<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_FormatMetaData_US_SANTANDERBANK_XML</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class SKS_EFT_FormatMetaData_US_SANTANDERBANK_XML
/// </summary>
class SKS_EFT_FormatMetaData_US_SANTANDERBANK_XML Extends SKS_EFT_Format_MetaData
{
                
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        productVersion = '';
        formatGroupVersion = '20230228';
        dataContractVersion = '1.0';
        conFormatID = ['US-SANTANDERBANK-XML'];
        formatfiletype = 'EFT';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFormatFileType</Name>
				<Source><![CDATA[
    protected str getFormatFileType()
    {
        return formatfiletype;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHeaderMetaData</Name>
				<Source><![CDATA[
    protected container getHeaderMetaData()
    {
        container   headerList;

        //Metadata column names of data elements
        //ProductVersion,FormatGroupVersion,UseWithCustomer,UseWithVenodrs,UseWithBanktoBank,UsewithCustReimbursements,
        //BeDesc01,BeDesc02,BeMask01,BeMask02,BlockFill,CompanyIdMask,CompanyIdTitle,CompanyNameTitle,CompanyNameMask,Crlf,Description,EffectiveDateOffset,EntryClassTitle,EntryClassMask,
        //FormatId,FormatType,IMMDestMask,IMMDestTitle,IMMDestNameTitle,IMMDestNameMask,IMMOriginTitle,IMMOriginMask,IMMOriginNameTitle,IMMOriginNameMask,IncludeCpnyCredit,
        //IncludeCpnyDebit,LastEffectiveDate,NextDailyReset,NextDailyResetDate,NextFileId,NextSequenceNumber,PreNote,RecordLength,Selected,TrimRecord,TwoFileNameAddition,
        //WBank01Description,WBank01Mask,WBank01Required,WBank02Required,WBank02Mask,WBank02Description,WBank03Required,WBank03Mask,WBank03Description,WBank04Required,WBank04Mask,
        //WBank04Description,PreNoteDays,EDI,PayDateIsEffDate,ARDateOffset,UseAddenda,MastAcctList,FormatGroup,MultiEffectiveDates,SupportsMultiCompany,ExternalFormat,FundTransferType

        headerList = ConIns(headerList,conLen(headerList)+1,[productVersion,formatGroupVersion,0,1,0,0,'','','','','','XXXXXXXX','Company Id','','',0,'US - SANTANDERBANK - ISO20022',0,'','','US-SANTANDERBANK-XML',1,'','','','','','','','',0,0,'1900-01-01 00:00:00.000',0,'1900-01-01 00:00:00.000',1,1,0,0,0,0,'','','',0,0,'','',0,'','',0,'','',0,0,0,0,0,0,'US-SANTANDERBANK-XML',1,0,0]);

        return headerList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getDeleteMetaData</Name>
				<Source><![CDATA[
    protected container getDeleteMetaData()
    {
        container   deleteList;

        //FormatGroup, FormatId, DetailType, KeyID1, KeyId2, KeyId3
        deleteList = ConIns(deleteList,conLen(deleteList)+1,['US-SANTANDERBANK-XML','*','FormatValidations','*','15','W01']);
        deleteList = ConIns(deleteList,conLen(deleteList)+1,['US-SANTANDERBANK-XML','*','FormatValidations','*','15','W02']);
        deleteList = ConIns(deleteList,conLen(deleteList)+1,['US-SANTANDERBANK-XML','*','FormatValidations','*','15','W03']);
        deleteList = ConIns(deleteList,conLen(deleteList)+1,['US-SANTANDERBANK-XML','*','FormatValidations','*','15','W04']);

        return deleteList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymSpecsMetaData</Name>
				<Source><![CDATA[
    protected container getPaymSpecsMetaData(str _formatID)
    {
        container   paymSpecList;

        //Metadata column names of data elements
        //BARoutingReqd,VBAAccountReqd,VBASwiftReqd,VBAIBANReqd,ARPaymSpecName,BEBeneBankAcctReqd,BE01Reqd,BE02Reqd,BE01Use,BE02Use,PaymSpecFileDescr,RecordSummary,TransactionCode,
        //EmailNote,PaymSpec,PaymSpecName,FilterSeparateFile,FormatId,Selected,CpnyIDNameReq,EmailOff,VendorUse,WireTabs,SamePaymentDate,SelectByPaymentDate,PreNote,TxnNacha,UseCheckNumber,
        //UseWithCustomers,UseWithVendors,EDI,UseWithBanktoBank,FundTransferType,UseWithCustomerReimbursement,InvoiceDetail,RemitAvailability,RemitType,APNameType,APAddressType
        //DDNameType,DDAddressType,CRNameType,CRAddressType

        switch (_formatID)
        {
            case ('US-SANTANDERBANK-XML'):
                paymSpecList = this.getPaymSpecsMetaData_US_SANTANDERBANK_XML();
                break;
            
        }

        return paymSpecList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymSpecsMetaData_US_SANTANDERBANK_XML</Name>
				<Source><![CDATA[
    private container getPaymSpecsMetaData_US_SANTANDERBANK_XML()
    {
        container   paymSpecList;

        paymSpecList = ConIns(paymSpecList,conLen(paymSpecList)+1,[0,0,0,0,'',0,0,0,0,0,'ACH - Corporate Trade Exchange',1,'ACH-CTX','','ACH-CTX','TRADE PAY',0,'US-SANTANDERBANK-XML',0,1,0,1,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,1,1,0,0,0,0]);
        paymSpecList = ConIns(paymSpecList,conLen(paymSpecList)+1,[0,0,0,0,'',0,0,0,0,0,'ACH - Cash Concentration and Disbursement',1,'ACH-CCD','','ACH-CCD','TRADE PAY',0,'US-SANTANDERBANK-XML',0,1,0,1,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,1,1,0,0,0,0]);
        paymSpecList = ConIns(paymSpecList,conLen(paymSpecList)+1,[0,0,0,0,'',0,0,0,0,0,'ACH - Prearranged Payment and Deposit',1,'ACH-PPD','','ACH-PPD','TRADE PAY',0,'US-SANTANDERBANK-XML',0,1,0,1,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,1,1,0,0,0,0]);
        paymSpecList = ConIns(paymSpecList,conLen(paymSpecList)+1,[0,0,0,0,'',0,0,0,0,0,'Cheque Payment',1,'CHK','','CHK','TRADE PAY',0,'US-SANTANDERBANK-XML',0,0,0,1,1,0,0,0,0,1,0,1,0,0,0,0,1,0,0,3,2,0,0,0,0]);
        paymSpecList = ConIns(paymSpecList,conLen(paymSpecList)+1,[0,0,0,0,'',0,0,0,0,0,'Faster Payments',1,'FSTRPMT','','FSTRPMT','TRADE PAY',0,'US-SANTANDERBANK-XML',0,1,0,1,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,1,1,0,0,0,0]);
        paymSpecList = ConIns(paymSpecList,conLen(paymSpecList)+1,[0,0,0,0,'',0,0,0,0,0,'Clearing House Automated Payment System',1,'CHAPS','','CHAPS','TRADE PAY',0,'US-SANTANDERBANK-XML',0,1,0,1,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,1,1,0,0,0,0]);
        paymSpecList = ConIns(paymSpecList,conLen(paymSpecList)+1,[0,0,0,0,'',0,0,0,0,0,'International Payments',1,'INTL','','INTL','TRADE PAY',0,'US-SANTANDERBANK-XML',0,1,0,1,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,1,1,0,0,0,0]);

        return paymSpecList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getNotesMetaData</Name>
				<Source><![CDATA[
    protected container getNotesMetaData(str _formatID)
    {
        container   notesList;

        //Metadata column names of data elements
        //FormatId,PaymSpec,Note

        switch (_formatID)
        {
            case ('US-SANTANDERBANK-XML'):
                notesList = this.getNotesMetaData_US_SANTANDERBANK_XML();
                break;
              
        }
        return notesList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNotesMetaData_US_SANTANDERBANK_XML</Name>
				<Source><![CDATA[
    private container getNotesMetaData_US_SANTANDERBANK_XML()
    {
        container   notesList;

        notesList = ConIns(notesList,conLen(notesList)+1,['US-SANTANDERBANK-XML','ACH-CTX','- Initiating Party > CodeLookup field.::-TAS > AP EFT+ -> Format -> Paym spec -> Vendor Code Lookup']);
        notesList = ConIns(notesList,conLen(notesList)+1,['US-SANTANDERBANK-XML','ACH-CCD','- Initiating Party > CodeLookup field.::-TAS > AP EFT+ -> Format -> Paym spec -> Vendor Code Lookup']);
        notesList = ConIns(notesList,conLen(notesList)+1,['US-SANTANDERBANK-XML','ACH-PPD','-Initiating Party > CodeLooku field.::-TAS > AP EFT+ -> Format -> Paym spec -> Vendor Code Lookup']);
        notesList = ConIns(notesList,conLen(notesList)+1,['US-SANTANDERBANK-XML','CHK','- Initiating Party > Name is stored in Organization administration > Setup > Organization > Legal entities > Name field.::-TAS > Setup > Bank Account > Company Info(Fast tab) > Company Id is stored in this tab']);
        notesList = ConIns(notesList,conLen(notesList)+1,['US-SANTANDERBANK-XML','FSTRPMT','-This format uses Code lookups. Please review the fields on these forms.:--Code lookup fields tab on EFT+ file formats > Payment specifications.:--Vendor ebanking details > Payment specifications > Additional fields.:-Group Header > Initiating Party > Name is stored in Organization administration > Setup > Organization > Legal entities > Name field.:-Debtor Name and Debtor Postal Address are stored in the Wire/IAT ordering party tab of EFT+ bank account > AP EFT+.:-Creditor Name is required and is stored in the Beneficiary Name region field on the Wire transfer/IAT-1 tab of Vendor eBanking details > Payment specifications.:-Creditor > Postal Address is stored in Beneficiary section of Wire transfer/IAT - 1 tab of Vendor eBanking details > Payment specifications. Country Code is required.:-Either the Routing number or SWIFT code is required on Vendor bank account.:-Creditor agent Country code is required and is stored in the Beneficiary bank Country/Region field on the Wire transfer/IAT-1 tab of Vendor eBanking details > Payment specifications.:-Beneficiary account is the Vendor Bank account number.:-Intermediary Agent 1 information will be included if either the SWIFT code or Bank id fields on the Intermediary bank section of the Wire transfer/IAT-2 tab of Vendor eBanking details > Payment specifications are populated.:--PmtInf > CdtTrfTxInf > IntrmyAg1 > FinInstnId > BIC will be included if the SWIFT code field is populated.:--PmtInf > CdtTrfTxInf > IntrmyAg1 > FinInstnId > ClrSysMmbId > MmbId will be included if the Bank id field is populated.:-The Unstructured Remittance Information field may be overridden using the RmtOvr field on the Code lookup fields tab of EFT+ file formats > Payment specifications and on Vendor eBanking details > Payment specifications > Additional fields. If not overridden this field will hold the Invoice numbers of the transaction.']);
        notesList = ConIns(notesList,conLen(notesList)+1,['US-SANTANDERBANK-XML','CHAPS','-This format uses Code lookups. Please review the fields on these forms.:--Code lookup fields tab on EFT+ file formats > Payment specifications.:--Vendor ebanking details > Payment specifications > Additional fields.:-Group Header > Initiating Party > Name is stored in Organization administration > Setup > Organization > Legal entities > Name field.:-Debtor Name and Debtor Postal Address are stored in the Wire/IAT ordering party tab of EFT+ bank account > AP EFT+.:-Creditor Name is required and is stored in the Beneficiary Name region field on the Wire transfer/IAT-1 tab of Vendor eBanking details > Payment specifications.:-Creditor > Postal Address is stored in Beneficiary section of Wire transfer/IAT - 1 tab of Vendor eBanking details > Payment specifications. Country Code is required.:-Either the Routing number or SWIFT code is required on Vendor bank account.:-Creditor agent Country code is required and is stored in the Beneficiary bank Country/Region field on the Wire transfer/IAT-1 tab of Vendor eBanking details > Payment specifications.:-Beneficiary account is the Vendor Bank account number.:-Intermediary Agent 1 information will be included if either the SWIFT code or Bank id fields on the Intermediary bank section of the Wire transfer/IAT-2 tab of Vendor eBanking details > Payment specifications are populated.:--PmtInf > CdtTrfTxInf > IntrmyAg1 > FinInstnId > BIC will be included if the SWIFT code field is populated.:--PmtInf > CdtTrfTxInf > IntrmyAg1 > FinInstnId > ClrSysMmbId > MmbId will be included if the Bank id field is populated.:-The Unstructured Remittance Information field may be overridden using the RmtOvr field on the Code lookup fields tab of EFT+ file formats > Payment specifications and on Vendor eBanking details > Payment specifications > Additional fields. If not overridden this field will hold the Invoice numbers of the transaction.']);
        notesList = ConIns(notesList,conLen(notesList)+1,['US-SANTANDERBANK-XML','INTL','-This format uses Code lookups. Please review the fields on these forms.:--Code lookup fields tab on EFT+ file formats > Payment specifications.:--Vendor ebanking details > Payment specifications > Additional fields.:-Group Header > Initiating Party > Name is stored in Organization administration > Setup > Organization > Legal entities > Name field.:-Debtor Name and Debtor Postal Address are stored in the Wire/IAT ordering party tab of EFT+ bank account > AP EFT+.:-Creditor Name is required and is stored in the Beneficiary Name region field on the Wire transfer/IAT-1 tab of Vendor eBanking details > Payment specifications.:-Creditor > Postal Address is stored in Beneficiary section of Wire transfer/IAT - 1 tab of Vendor eBanking details > Payment specifications. Country Code is required.:-Either the Routing number or SWIFT code is required on Vendor bank account.:-Creditor agent Country code is required and is stored in the Beneficiary bank Country/Region field on the Wire transfer/IAT-1 tab of Vendor eBanking details > Payment specifications.:-Beneficiary account is the Vendor Bank account number.:-Intermediary Agent 1 information will be included if either the SWIFT code or Bank id fields on the Intermediary bank section of the Wire transfer/IAT-2 tab of Vendor eBanking details > Payment specifications are populated.:--PmtInf > CdtTrfTxInf > IntrmyAg1 > FinInstnId > BIC will be included if the SWIFT code field is populated.:--PmtInf > CdtTrfTxInf > IntrmyAg1 > FinInstnId > ClrSysMmbId > MmbId will be included if the Bank id field is populated.:-The Unstructured Remittance Information field may be overridden using the RmtOvr field on the Code lookup fields tab of EFT+ file formats > Payment specifications and on Vendor eBanking details > Payment specifications > Additional fields. If not overridden this field will hold the Invoice numbers of the transaction.']);

        return notesList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getValidationsMetaData</Name>
				<Source><![CDATA[
    protected container getValidationsMetaData(str _formatID)
    {
        container   validationsList;

        //Metadata column names of data elements
        //FormatId,PaymSpec,Id,SourceFieldDesc,SourceFieldLoc,TargetFieldLoc,Notes,SourceContext,SourceField,ISOCountrySpec,CountryContext,Required,LengthValidation,MinLength,MaxLength,UserUpdated,Module

        switch (_formatID)
        {
            case ('US-SANTANDERBANK-XML'):
                validationsList = this.getValidationsMetaData_US_SANTANDERBANK_XML();
                break;


        }

        return validationsList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getValidationsMetaData_US_SANTANDERBANK_XML</Name>
				<Source><![CDATA[
    private container getValidationsMetaData_US_SANTANDERBANK_XML()
    {
        container   validationsList;
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['US-SANTANDERBANK-XML','ACH-CTX','','Name of the company','TAS > Set up > Bank account > Select AP EFT+ > Company Info(Fast tab) > Name of the company','Control Record > Name of the company','Company name related to bank','15','ACHCompanyName','','','1','1',1,'16',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['US-SANTANDERBANK-XML','ACH-CTX','','Company id','TAS > Set up > Bank account > Select AP EFT+ > Company info(Fast tab) > Company id','Dbtr > Id > OrgId > Othr > Id','Company Id related to Bank','15','ACHCompanyID','','',0,'0',1,'20',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['US-SANTANDERBANK-XML','ACH-CTX','','Bank Account Number','Cash and bank management > Select bank account > edit > General (fast tab) Bank Account Number','PmtInf > DbtrAcct > Id > Othr > Id','Bank account number ',0,'AccountNum','','',0,0,'1','17',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['US-SANTANDERBANK-XML','ACH-CTX','','Vendor bank Routing number','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts > General tab > Identification(group) > Routing number','PmtInf > CdTrfTxInf > CdtrAgt >  FinInstnId > ClrSysMmbId > MmbId','Routing number related to Vendor','9','RegistrationNum','','',0,0,1,'9',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['US-SANTANDERBANK-XML','ACH-CTX','','Name','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Name','PmtInf > CdTrfTxInf > Cdtr > Nm','Name related to Vendor','16','WBeneName','','',0,'0',1,'16',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['US-SANTANDERBANK-XML','ACH-CTX','','Vendor bank Account Number','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts > General tab > Identification(group) > Bank Account Number ','PmtInf > CdtTrfTxInf > CdtrAcct > Id > Othr > Id','Account Number related to vendor','9','AccountNum','','',0,0,'1','17',0,0]);

        validationsList = ConIns(validationsList,conLen(validationsList)+1,['US-SANTANDERBANK-XML','ACH-PPD','','Name of the company','TAS > Set up > Bank account > Select AP EFT+ > Company Info(Fast tab) > Name of the company','Control Record > Name of the company','Company name related to bank','15','ACHCompanyName','','','1','1',1,'16',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['US-SANTANDERBANK-XML','ACH-PPD','','Company id','TAS > Set up > Bank account > Select AP EFT+ > Company info(Fast tab) > Company id','Dbtr > Id > OrgId > Othr > Id','Company Id related to Bank','15','ACHCompanyID','','',0,'0',1,'20',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['US-SANTANDERBANK-XML','ACH-PPD','','Bank Account Number','Cash and bank management > Select bank account > edit > General (fast tab) Bank Account Number','PmtInf > DbtrAcct > Id > Othr > Id','Bank account number ',0,'AccountNum','','',0,0,'1','17',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['US-SANTANDERBANK-XML','ACH-PPD','','Bank Routing Number','Cash and bank management > Select bank account > edit > Additional identification (fast tab) > Swift Code','PmtInf > DbtrAgt >  FinInstnId > ClrSysMmbId > MmbId','Bank Routing Number',0,'RegistrationNum','','',0,0,1,'9',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['US-SANTANDERBANK-XML','ACH-PPD','','Vendor bank Routing number','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts > General tab > Identification(group) > Routing number','PmtInf > CdTrfTxInf > CdtrAgt >  FinInstnId > ClrSysMmbId > MmbId','Routing number related to Vendor','9','RegistrationNum','','',0,0,1,'9',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['US-SANTANDERBANK-XML','ACH-PPD','','Name','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Name','PmtInf > CdTrfTxInf > Cdtr > Nm','Name related to Vendor','16','WBeneName','','',0,'0',1,'12',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['US-SANTANDERBANK-XML','ACH-PPD','','Vendor bank Account Number','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts > General tab > Identification(group) > Bank Account Number ','PmtInf > CdtTrfTxInf > CdtrAcct > Id > Othr > Id','Account Number related to vendor','9','AccountNum','','',0,0,'1','17',0,0]);

        validationsList = ConIns(validationsList,conLen(validationsList)+1,['US-SANTANDERBANK-XML','ACH-CCD','','Name of the company','TAS > Set up > Bank account > Select AP EFT+ > Company Info(Fast tab) > Name of the company','Control Record > Name of the company','Company name related to bank','15','ACHCompanyName','','','1','1',1,'16',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['US-SANTANDERBANK-XML','ACH-CCD','','Company id','TAS > Set up > Bank account > Select AP EFT+ > Company info(Fast tab) > Company id','Dbtr > Id > OrgId > Othr > Id','Company Id related to Bank','15','ACHCompanyID','','',0,'0',1,'20',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['US-SANTANDERBANK-XML','ACH-CCD','','Bank Account Number','Cash and bank management > Select bank account > edit > General (fast tab) Bank Account Number','PmtInf > DbtrAcct > Id > Othr > Id','Bank account number ',0,'AccountNum','','',0,0,'1','17',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['US-SANTANDERBANK-XML','ACH-CCD','','Bank Routing Number','Cash and bank management > Select bank account > edit > Additional identification (fast tab) > Swift Code','PmtInf > DbtrAgt >  FinInstnId > ClrSysMmbId > MmbId','Bank Routing Number',0,'RegistrationNum','','',0,0,1,'9',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['US-SANTANDERBANK-XML','ACH-CCD','','Vendor bank Routing number','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts > General tab > Identification(group) > Routing number','PmtInf > CdTrfTxInf > CdtrAgt >  FinInstnId > ClrSysMmbId > MmbId','Routing number related to Vendor','9','RegistrationNum','','',0,0,1,'9',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['US-SANTANDERBANK-XML','ACH-CCD','','Name','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Name','PmtInf > CdTrfTxInf > Cdtr > Nm','Name related to Vendor','16','WBeneName','','',0,'0',1,'12',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['US-SANTANDERBANK-XML','ACH-CCD','','Vendor bank Account Number','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts > General tab > Identification(group) > Bank Account Number ','PmtInf > CdtTrfTxInf > CdtrAcct > Id > Othr > Id','Account Number related to vendor','9','AccountNum','','',0,0,'1','17',0,0]);

        validationsList = ConIns(validationsList,conLen(validationsList)+1,['US-SANTANDERBANK-XML','CHK','','Name','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > Name','PmtInf > Dbtr > Nm','Name related to bank','15','WOrdPartyName','','',0,'0','1','50',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['US-SANTANDERBANK-XML','CHK','','Zip/postal code','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > Zip/postal code','PmtInf > Dbtr > PstlAdr > PstCd','ZipCode related to bank','15','WOrdPartyZipCode','','',0,1,'','',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['US-SANTANDERBANK-XML','CHK','','City','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > City','PmtInf > Dbtr > PstlAdr > TwnNm','TownName related to bank','15','WOrdPartyCity','','',0,'1','','',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['US-SANTANDERBANK-XML','CHK','','State/province','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > State/province','PmtInf > Dbtr > PstlAdr > CtrySubDvsn','Bank Country Sub Division','15','WOrdPartyState','','',0,'1','','',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['US-SANTANDERBANK-XML','CHK','','Street name','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > Address 1','PmtInf > Dbtr > PstlAdr > StrtNm','Street name related to bank','15','WOrdPartyAddr','','',0,0,1,'50',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['US-SANTANDERBANK-XML','CHK','','Bank Account Number','Cash and bank management > Select bank account > edit > General (fast tab) Bank Account Number','PmtInf > DbtrAcct > Id > Othr > Id','Bank account number ',0,'AccountNum','','',0,1,'','',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['US-SANTANDERBANK-XML','CHK','','Routing number','Cash and bank management > Select bank account > edit > Additional identification (fast tab) > Routing Number','PmtInf > DbtrAgt >  FinInstnId > ClrSysMmbId > MmbId','Bank Routing Number',0,'RegistrationNum','','',0,1,'','',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['US-SANTANDERBANK-XML','CHK','','Name or Description','Account Payable > Journals > Payments > Payment Journal > Remittance(Tab Page) > address','PmtInf > CdTrfTxInf > Cdtr > Nm','Name related to Vendor','12','Name','','',0,1,'','',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['US-SANTANDERBANK-XML','CHK','','Address 1','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Address 1','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > StrtNm','Address related to vendor','16','WBeneAddr','','',0,0,1,'50',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['US-SANTANDERBANK-XML','CHK','','ZIP/Postal Code ','Account Payable > Journals > Payments > Payment Journal > Remittance(Tab Page) > Address','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > PstCd','Vendor Zip/postal code','10','ZipCode','','',0,1,'','',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['US-SANTANDERBANK-XML','CHK','','City','Account Payable > Journals > Payments > Payment Journal > Remittance(Tab Page) > Address','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > TwnNm','Country related to vendor','10','City','','',0,'1','','',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['US-SANTANDERBANK-XML','CHK','','State','Account Payable > Journals > Payments > Payment Journal > Remittance(Tab Page) > State/province ','PmtInf > CdTrfTxInf >Cdtr> PstlAdr> CtrySubDvsn','Bank Country Sub Division','10','State','','',0,'1','','',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['US-SANTANDERBANK-XML','CHK','','Country/Region','Account Payable > Journals > Payments > Payment Journal > Remittance(Tab Page) > Address','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > Ctry','Country related to vendor','10','CountryRegionId','','',0,1,'','',0,0]);
       
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['US-SANTANDERBANK-XML','FSTRPMT','','Name','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > Name','PmtInf > Dbtr > Nm','Name related to bank','15','WOrdPartyName','','',0,'0','1','140',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['US-SANTANDERBANK-XML','FSTRPMT','','Bank Address 1','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > Address 1','PmtInf > Dbtr > PstlAdr > StrtNm','Address related to bank','15','WOrdPartyAddr','','',1,'2','','35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['US-SANTANDERBANK-XML','FSTRPMT','','Bank Address 2','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > Address 2','PmtInf > Dbtr > PstlAdr > BldgNm','Address related to bank','15','WOrdPartyAddr2','','',1,'2','','35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['US-SANTANDERBANK-XML','FSTRPMT','','Bank Zip/postal code','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > Zip/postal code','PmtInf > Dbtr > PstlAdr > PstCd','ZipCode related to bank','15','WOrdPartyZipCode','','',1,1,'','',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['US-SANTANDERBANK-XML','FSTRPMT','','Bank City','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > City','PmtInf > Dbtr > PstlAdr > TwnNm','City related to bank','15','WOrdPartyCity','','',1,1,'','35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['US-SANTANDERBANK-XML','FSTRPMT','','Bank State','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > State','PmtInf > Dbtr > PstlAdr > CtrySubDvsn','City related to bank','15','WOrdPartyState','','',1,1,'','35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['US-SANTANDERBANK-XML','FSTRPMT','','Bank Country code','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > Country/region','PmtInf > Dbtr > PstlAdr > Ctry','Country related to bank','15','WOrdPartyCountryRegionId','','',0,1,'','',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['US-SANTANDERBANK-XML','FSTRPMT','','Bank account number','Cash and bank management > Select bank account > edit > General (fast tab) > Account number','PmtInf > DbtrAcct > Id > Othr > Id','Account number related to Bank',0,'AccountNum','','','0','0','1','8',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['US-SANTANDERBANK-XML','FSTRPMT','','Bank sort code','Cash and bank management > Select bank account > edit > General (fast tab) > Bak Sort code','PmtInf > DbtrAcct > Id > Othr > Id','Sort code related to Bank',0,'BankSortCode','','','0','0','1','6',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['US-SANTANDERBANK-XML','FSTRPMT','','Bank Swift number','Cash and bank management > Select bank account > edit > Additional identification (fast tab) > Swift No','PmtInf > DbtrAgt > FinInstnId > BIC','Swift code related to Bank',0,'SWIFTNo','','',3,0,'8','11',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['US-SANTANDERBANK-XML','FSTRPMT','','Bank Routing Number','Cash and bank management > Select bank account > edit > General (fast tab) > Routing Number','PmtInf > DbtrAgt > FinInstnId > ClrSysMmbId > MmbId','Routing Number related to Bank',0,'RegistrationNum','','',3,0,'1','35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['US-SANTANDERBANK-XML','FSTRPMT','','Vendor Swift number','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts > General tab > Identification(group) > Swift code ','PmtInf > CdTrfTxInf > CdtrAgt >  FinInstnId >BIC','Swift Code related  Vendor','9','SWIFTNo','','',3,'2','8','11',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['US-SANTANDERBANK-XML','FSTRPMT','','Vendor Routing number','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts > General tab > Identification(group) > Routing number','PmtInf > CdTrfTxInf > CdtrAgt >  FinInstnId > ClrSysMmbId > MmbId','Routing number related to Vendor','9','RegistrationNum','','',3,'2','1','35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['US-SANTANDERBANK-XML','FSTRPMT','','Name','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary (group) > Name','PmtInf > CdTrfTxInf > Cdtr > Nm','Name related to Vendor','16','WBeneName','','',0,0,1,'35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['US-SANTANDERBANK-XML','FSTRPMT','','Vendor Address 1','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Address 1','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > StrtNm','Address related to vendor','16','WBeneAddr','','',1,'2',1,'35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['US-SANTANDERBANK-XML','FSTRPMT','','Vendor Address 2','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Address 2','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > BldgNb','Address related to vendor','16','WBeneAddr2','','',1,'2',1,'35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['US-SANTANDERBANK-XML','FSTRPMT','','ZIP/Postal Code ','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > ZIP/Postal Code','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > PstlAdr > PstCd ','ZIP/Postal code  related to vendor','16','WBeneZipPostal','','',1,1,'',0,0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['US-SANTANDERBANK-XML','FSTRPMT','','City','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > City','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > PstlAdr > TwnNm','Vendor city','16','WBeneCity','','',1,1,'','30',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['US-SANTANDERBANK-XML','FSTRPMT','','State/province','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > State/province','PmtInf > CdTrfTxInf > Cdtr> PstlAdr> CtrySubDvsn','Country Sub Division related to vendor','16','WBeneState','','',1,'2',1,'35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['US-SANTANDERBANK-XML','FSTRPMT','','Vendor Country Region','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Country','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > Ctry','Country related to vendor','16','WBeneCountryRegionId','','',0,1,'',0,0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['US-SANTANDERBANK-XML','FSTRPMT','','Country/Region','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary bank(group) > Country/Region','PmtInf > CdTrfTxInf > CdtrAgt > FinInstnId > PstlAdr > Ctry','Country related to vendor bank','16','WBenBankCountryRegionId','','',1,1,'','',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['US-SANTANDERBANK-XML','FSTRPMT','','Bank Account Number','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts > General tab > Identification(group) > Bank Account Number ','PmtInf > CdtTrfTxInf > CdtrAcct > Id > Othr > Id','Account Number related to vendor','9','AccountNum','','',0,0,1,'34',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['US-SANTANDERBANK-XML','CHAPS','','Name','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > Name','PmtInf > Dbtr > Nm','Name related to bank','15','WOrdPartyName','','',0,'0','1','140',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['US-SANTANDERBANK-XML','CHAPS','','Bank Address 1','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > Address 1','PmtInf > Dbtr > PstlAdr > StrtNm','Address related to bank','15','WOrdPartyAddr','','',1,'2','','35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['US-SANTANDERBANK-XML','CHAPS','','Bank Address 2','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > Address 2','PmtInf > Dbtr > PstlAdr > BldgNm','Address related to bank','15','WOrdPartyAddr2','','',1,'2','','35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['US-SANTANDERBANK-XML','CHAPS','','Bank Zip/postal code','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > Zip/postal code','PmtInf > Dbtr > PstlAdr > PstCd','ZipCode related to bank','15','WOrdPartyZipCode','','',1,1,'','',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['US-SANTANDERBANK-XML','CHAPS','','Bank City','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > City','PmtInf > Dbtr > PstlAdr > TwnNm','City related to bank','15','WOrdPartyCity','','',1,1,'','35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['US-SANTANDERBANK-XML','CHAPS','','Bank State','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > State','PmtInf > Dbtr > PstlAdr > CtrySubDvsn','City related to bank','15','WOrdPartyState','','',1,1,'','35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['US-SANTANDERBANK-XML','CHAPS','','Bank Country code','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > Country/region','PmtInf > Dbtr > PstlAdr > Ctry','Country related to bank','15','WOrdPartyCountryRegionId','','',0,1,'','',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['US-SANTANDERBANK-XML','CHAPS','','Bank account number','Cash and bank management > Select bank account > edit > General (fast tab) > Account number','PmtInf > DbtrAcct > Id > Othr > Id','Account number related to Bank',0,'AccountNum','','','0','0','1','8',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['US-SANTANDERBANK-XML','CHAPS','','Bank sort code','Cash and bank management > Select bank account > edit > General (fast tab) > Bak Sort code','PmtInf > DbtrAcct > Id > Othr > Id','Sort code related to Bank',0,'BankSortCode','','','0','0','1','6',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['US-SANTANDERBANK-XML','CHAPS','','Bank Swift number','Cash and bank management > Select bank account > edit > Additional identification (fast tab) > Swift No','PmtInf > DbtrAgt > FinInstnId > BIC','Swift code related to Bank',0,'SWIFTNo','','',3,0,'8','11',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['US-SANTANDERBANK-XML','CHAPS','','Bank Routing Number','Cash and bank management > Select bank account > edit > General (fast tab) > Routing Number','PmtInf > DbtrAgt > FinInstnId > ClrSysMmbId > MmbId','Routing Number related to Bank',0,'RegistrationNum','','',3,0,'1','35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['US-SANTANDERBANK-XML','CHAPS','','Vendor Swift number','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts > General tab > Identification(group) > Swift code ','PmtInf > CdTrfTxInf > CdtrAgt >  FinInstnId >BIC','Swift Code related  Vendor','9','SWIFTNo','','',3,'2','8','11',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['US-SANTANDERBANK-XML','CHAPS','','Vendor Routing number','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts > General tab > Identification(group) > Routing number','PmtInf > CdTrfTxInf > CdtrAgt >  FinInstnId > ClrSysMmbId > MmbId','Routing number related to Vendor','9','RegistrationNum','','',3,'2','1','35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['US-SANTANDERBANK-XML','CHAPS','','Name','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary (group) > Name','PmtInf > CdTrfTxInf > Cdtr > Nm','Name related to Vendor','16','WBeneName','','',0,0,1,'35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['US-SANTANDERBANK-XML','CHAPS','','Vendor Address 1','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Address 1','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > StrtNm','Address related to vendor','16','WBeneAddr','','',1,'2',1,'35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['US-SANTANDERBANK-XML','CHAPS','','Vendor Address 2','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Address 2','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > BldgNb','Address related to vendor','16','WBeneAddr2','','',1,'2',1,'35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['US-SANTANDERBANK-XML','CHAPS','','ZIP/Postal Code ','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > ZIP/Postal Code','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > PstlAdr > PstCd ','ZIP/Postal code  related to vendor','16','WBeneZipPostal','','',1,1,'',0,0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['US-SANTANDERBANK-XML','CHAPS','','City','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > City','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > PstlAdr > TwnNm','Vendor city','16','WBeneCity','','',1,1,'','30',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['US-SANTANDERBANK-XML','CHAPS','','State/province','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > State/province','PmtInf > CdTrfTxInf > Cdtr> PstlAdr> CtrySubDvsn','Country Sub Division related to vendor','16','WBeneState','','',1,'2',1,'35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['US-SANTANDERBANK-XML','CHAPS','','Vendor Country Region','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Country','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > Ctry','Country related to vendor','16','WBeneCountryRegionId','','',0,1,'',0,0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['US-SANTANDERBANK-XML','CHAPS','','Country/Region','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary bank(group) > Country/Region','PmtInf > CdTrfTxInf > CdtrAgt > FinInstnId > PstlAdr > Ctry','Country related to vendor bank','16','WBenBankCountryRegionId','','',1,1,'','',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['US-SANTANDERBANK-XML','CHAPS','','Bank Account Number','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts > General tab > Identification(group) > Bank Account Number ','PmtInf > CdtTrfTxInf > CdtrAcct > Id > Othr > Id','Account Number related to vendor','9','AccountNum','','',0,0,1,'34',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['US-SANTANDERBANK-XML','INTL','','Name','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > Name','PmtInf > Dbtr > Nm','Name related to bank','15','WOrdPartyName','','',0,'0','1','140',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['US-SANTANDERBANK-XML','INTL','','Bank Address 1','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > Address 1','PmtInf > Dbtr > PstlAdr > StrtNm','Address related to bank','15','WOrdPartyAddr','','',1,'2','','35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['US-SANTANDERBANK-XML','INTL','','Bank Address 2','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > Address 2','PmtInf > Dbtr > PstlAdr > BldgNm','Address related to bank','15','WOrdPartyAddr2','','',1,'2','','35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['US-SANTANDERBANK-XML','INTL','','Bank Zip/postal code','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > Zip/postal code','PmtInf > Dbtr > PstlAdr > PstCd','ZipCode related to bank','15','WOrdPartyZipCode','','',1,1,'','',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['US-SANTANDERBANK-XML','INTL','','Bank City','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > City','PmtInf > Dbtr > PstlAdr > TwnNm','City related to bank','15','WOrdPartyCity','','',1,1,'','35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['US-SANTANDERBANK-XML','INTL','','Bank State','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > State','PmtInf > Dbtr > PstlAdr > CtrySubDvsn','City related to bank','15','WOrdPartyState','','',1,1,'','35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['US-SANTANDERBANK-XML','INTL','','Bank Country code','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > Country/region','PmtInf > Dbtr > PstlAdr > Ctry','Country related to bank','15','WOrdPartyCountryRegionId','','',0,1,'','',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['US-SANTANDERBANK-XML','INTL','','Bank account number','Cash and bank management > Select bank account > edit > General (fast tab) > Account number','PmtInf > DbtrAcct > Id > Othr > Id','Account number related to Bank',0,'AccountNum','','','0','0','1','8',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['US-SANTANDERBANK-XML','INTL','','Bank sort code','Cash and bank management > Select bank account > edit > General (fast tab) > Bak Sort code','PmtInf > DbtrAcct > Id > Othr > Id','Sort code related to Bank',0,'BankSortCode','','','0','0','1','6',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['US-SANTANDERBANK-XML','INTL','','Bank Swift number','Cash and bank management > Select bank account > edit > Additional identification (fast tab) > Swift No','PmtInf > DbtrAgt > FinInstnId > BIC','Swift code related to Bank',0,'SWIFTNo','','',3,0,'8','11',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['US-SANTANDERBANK-XML','INTL','','Bank Routing Number','Cash and bank management > Select bank account > edit > General (fast tab) > Routing Number','PmtInf > DbtrAgt > FinInstnId > ClrSysMmbId > MmbId','Routing Number related to Bank',0,'RegistrationNum','','',3,0,'1','35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['US-SANTANDERBANK-XML','INTL','','Vendor Swift number','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts > General tab > Identification(group) > Swift code ','PmtInf > CdTrfTxInf > CdtrAgt >  FinInstnId >BIC','Swift Code related  Vendor','9','SWIFTNo','','',0,'2','8','11',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['US-SANTANDERBANK-XML','INTL','','Name','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary (group) > Name','PmtInf > CdTrfTxInf > Cdtr > Nm','Name related to Vendor','16','WBeneName','','',0,0,1,'35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['US-SANTANDERBANK-XML','INTL','','Vendor Address 1','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Address 1','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > StrtNm','Address related to vendor','16','WBeneAddr','','',1,'2',1,'35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['US-SANTANDERBANK-XML','INTL','','Vendor Address 2','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Address 2','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > BldgNb','Address related to vendor','16','WBeneAddr2','','',1,'2',1,'35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['US-SANTANDERBANK-XML','INTL','','ZIP/Postal Code ','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > ZIP/Postal Code','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > PstlAdr > PstCd ','ZIP/Postal code  related to vendor','16','WBeneZipPostal','','',1,1,'',0,0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['US-SANTANDERBANK-XML','INTL','','City','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > City','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > PstlAdr > TwnNm','Vendor city','16','WBeneCity','','',1,1,'','30',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['US-SANTANDERBANK-XML','INTL','','State/province','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > State/province','PmtInf > CdTrfTxInf > Cdtr> PstlAdr> CtrySubDvsn','Country Sub Division related to vendor','16','WBeneState','','',1,'2',1,'35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['US-SANTANDERBANK-XML','INTL','','Vendor Country Region','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Country','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > Ctry','Country related to vendor','16','WBeneCountryRegionId','','',0,1,'',0,0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['US-SANTANDERBANK-XML','INTL','','Country/Region','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary bank(group) > Country/Region','PmtInf > CdTrfTxInf > CdtrAgt > FinInstnId > PstlAdr > Ctry','Country related to vendor bank','16','WBenBankCountryRegionId','','',1,1,'','',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['US-SANTANDERBANK-XML','INTL','','IBAN','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts > General tab > Identification(group) > IBAN','PmtInf > CdtTrfTxInf > CdtrAcct > Id > IBAN','IBAN related to vendor','9','BankIBAN','','',3,2,'','34',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['US-SANTANDERBANK-XML','INTL','','Bank Account Number','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts > General tab > Identification(group) > Bank Account Number ','PmtInf > CdtTrfTxInf > CdtrAcct > Id > Othr > Id','Account Number related to vendor','9','AccountNum','','',3,2,1,'34',0,0]);
           
        return validationsList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getCodeLookupMetaData</Name>
				<Source><![CDATA[
    protected container getCodeLookupMetaData()
    {
        container   codeLookupList;

        //Metadata column names of data elements
        //FormatGroup,CodeID,Description
        codeLookupList = ConIns(codeLookupList,conLen(codeLookupList)+1,['US-SANTANDERBANK-XML','DlvryMtd','Delivery Method code']);
        codeLookupList = ConIns(codeLookupList,conLen(codeLookupList)+1,['US-SANTANDERBANK-XML','ChqTp','Cheque Type']);
        codeLookupList = ConIns(codeLookupList,conLen(codeLookupList)+1,['US-SANTANDERBANK-XML','FrmsCd','Forms Code']);
        codeLookupList = ConIns(codeLookupList,conLen(codeLookupList)+1,['US-SANTANDERBANK-XML','ChrgBr','Charge bearer']);


        return codeLookupList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getCodeLookupValuesMetaData</Name>
				<Source><![CDATA[
    protected container getCodeLookupValuesMetaData()
    {
        container   codeLookupValuesList;

        //Metadata column names of data elements
        //FormatGroup,CodeID,Display Value,CodeValue

        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['US-SANTANDERBANK-XML','DlvryMtd','1st class to payee','USPS']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['US-SANTANDERBANK-XML','DlvryMtd','Priority Overnight to payee(UPS)','UPS']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['US-SANTANDERBANK-XML','DlvryMtd','Priority Overnight to payee(FEDX)','FEDX']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['US-SANTANDERBANK-XML','DlvryMtd','Return to payer USPS 1stClass (carton)','BNDL']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['US-SANTANDERBANK-XML','DlvryMtd','Return to payerFedEx Priority Overnight(carton)','BDLS']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['US-SANTANDERBANK-XML','ChqTp','Customer Check','CCHQ']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['US-SANTANDERBANK-XML','ChqTp','Certified Customer Check','CCCH']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['US-SANTANDERBANK-XML','FrmsCd','CKCOLMN','CKCOLMN']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['US-SANTANDERBANK-XML','FrmsCd','CKSTUB','CKSTUB']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['US-SANTANDERBANK-XML','ChrgBr','Our','DEBT']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['US-SANTANDERBANK-XML','ChrgBr','Beneficiary','CRED']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['US-SANTANDERBANK-XML','ChrgBr','Shared','SHAR']);


        
        return codeLookupValuesList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymSpecFieldsMetaData</Name>
				<Source><![CDATA[
    protected container getPaymSpecFieldsMetaData(str _formatID)
    {
        container   paymSpecFieldsList;

        //Metadata column names of data elements
        //FormatGroup,FormatID,PaymentSpec,FormatFieldID,Description,FieldType,CodeID,DefaultValue,Required,FixedValue,FixedValueMask,TechNotes

        switch (_formatID)
        {
            case ('US-SANTANDERBANK-XML'):
                paymSpecFieldsList = this.getPaymSpecFieldsMetaData_US_SANTANDERBANK_XML();
                break;
        }

        return paymSpecFieldsList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymSpecFieldsMetaData_US_SANTANDERBANK_XML</Name>
				<Source><![CDATA[
    private container getPaymSpecFieldsMetaData_US_SANTANDERBANK_XML()
    {
        container   paymSpecFieldsList;

        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['US-SANTANDERBANK-XML','US-SANTANDERBANK-XML','CHK','ChqTp','Cheque Type',0,'ChqTp','',0,'','','ChqInstr']);
        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['US-SANTANDERBANK-XML','US-SANTANDERBANK-XML','CHK','DlvryMtd','Delivery Method',0,'DlvryMtd','',1,'','','ChqInstr']);
        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['US-SANTANDERBANK-XML','US-SANTANDERBANK-XML','CHK','FrmsCd','FrmsCd',0,'FrmsCd','',1,'','','ChqInstr']);
        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['US-SANTANDERBANK-XML','US-SANTANDERBANK-XML','FSTRPMT','ChrgBr','Charges bearer',0,'ChrgBr','Our',0,'','','PmtInf > CdtTrfTxInf > ChrgBr']);
        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['US-SANTANDERBANK-XML','US-SANTANDERBANK-XML','CHAPS','ChrgBr','Charges bearer',0,'ChrgBr','Our',0,'','','PmtInf > CdtTrfTxInf > ChrgBr']);
        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['US-SANTANDERBANK-XML','US-SANTANDERBANK-XML','INTL','ChrgBr','Charges bearer',0,'ChrgBr','Our',0,'','','PmtInf > CdtTrfTxInf > ChrgBr']);

    
        return paymSpecFieldsList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getControlFormatMetaData</Name>
				<Source><![CDATA[
    protected container getControlFormatMetaData(str _formatID)
    {
        container   ControlFormatList;

        //Metadata column names of data elements
        //FileFormatID,ControlFileFormatID,ControlFileDescription

        switch (_formatID)
        {
        }

        return ControlFormatList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankCodeLookupMetaData</Name>
				<Source><![CDATA[
    protected container getBankCodeLookupMetaData()
    {
        container   codeLookupList;
        codeLookupList = ConIns(codeLookupList,conLen(codeLookupList)+1,['US-SANTANDERBANK-XML','BatchBooking','Batch Booking (Y/N)']);

        return codeLookupList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankCodeLookupValuesMetaData</Name>
				<Source><![CDATA[
    protected container getBankCodeLookupValuesMetaData()
    {
        container   codeLookupValuesList;

        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['US-SANTANDERBANK-XML','BatchBooking','Y','Y']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['US-SANTANDERBANK-XML','BatchBooking','N','N']);

        return codeLookupValuesList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFileFormatFieldsMetaData</Name>
				<Source><![CDATA[
    protected container getFileFormatFieldsMetaData(str _formatID)
    {
        container   paymSpecFieldsList;

        switch (_formatID)
        {
            case ('US-SANTANDERBANK-XML'):
                paymSpecFieldsList = this.getFileFormatFieldsMetaData_US_SANTANDERBANK_XML();
                break;
        }
                

        return paymSpecFieldsList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFileFormatFieldsMetaData_US_SANTANDERBANK_XML</Name>
				<Source><![CDATA[
    private container getFileFormatFieldsMetaData_US_SANTANDERBANK_XML()
    {
        container   paymSpecFieldsList;

        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['US-SANTANDERBANK-XML','US-SANTANDERBANK-XML','Initgpty','Initiating Party Id',1,'Initgpty','',0,'','XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX','GrpHdr > Initgpty > Id > Othr > Id']);
        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['US-SANTANDERBANK-XML','US-SANTANDERBANK-XML','BatchBooking','Batch Booking (Y/N)',0,'BatchBooking','',0,'','','PmtInf > BtchBookg']);
        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['US-SANTANDERBANK-XML','US-SANTANDERBANK-XML','Authstn','Authorisation code',1,'Authstn','',0,'','XXXX','GrpHdr > Authsn > Prtry']);
        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['US-SANTANDERBANK-XML','US-SANTANDERBANK-XML','InitgPtySchemeName','InitiatingParty Scheme Name',1,'InitgPtySchemeName','',0,'','XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX','GrpHdr > Initgpty > Id > Othr > SchemeNm > Prtry']);

        return paymSpecFieldsList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBankCodelookupValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updating the bank code lookpups from the W0X fields.
    /// </summary>
    protected void updateBankCodelookupValues()
    {
        switch(gSKS_EFT_FileFormat.FormatId)
        {

            case ('US-SANTANDERBANK-XML'):
                if(gSKS_EFT_Bank.W01)
                {
                    this.updateBankFields('Authstn', gSKS_EFT_Bank.W01);
                }
                if(gSKS_EFT_Bank.W02)
                {
                    this.updateBankFields('Batch Booking(Y/N)', gSKS_EFT_Bank.W02);
                }
                if(gSKS_EFT_Bank.W03)
                {
                    this.updateBankFields('Initiating Party Id', gSKS_EFT_Bank.W03);
                }
                if(gSKS_EFT_Bank.W04)
                {
                    this.updateBankFields('InitgPtySchemeName', gSKS_EFT_Bank.W04);
                }
                break;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>