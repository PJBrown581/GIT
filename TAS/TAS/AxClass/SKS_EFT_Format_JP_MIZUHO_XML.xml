<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_JP_MIZUHO_XML</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_JP_MIZUHO_XML extends SKS_EFT_Format_ISO_20022_001001003
/// </summary>
class SKS_EFT_Format_JP_MIZUHO_XML extends SKS_EFT_Format_ISO_20022_001001003
{
    #define.FormatVersion('20220901')
    #define.FEDWIRE('FEDWIRE')
    #define.SWIFT('SWIFT')

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_GrpHdr</Name>
				<Source><![CDATA[
    protected void node_GrpHdr()
    {
        //------------------------------------------------------------------------------------------------------
        //  1.0: GrpHdr
        //      1.1: MsgId
        //      1.2: CreDtTm
        //      1.6: NbOfTxs
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeGrpHdr;
        SKS_EFT_FileDetail tmpSKS_EFT_FileDetail;
    
        // Select count and sum for this file
        select COUNT(InvoiceOrigAmountCur), SUM(InvoiceSettleAmountPmtCur) from tmpSKS_EFT_FileDetail
            where
                tmpSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                tmpSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                tmpSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary;
    
        //  1.0: GrpHdr
        nodeGrpHdr = nodeRoot.appendChild(xmlDoc.createElement('GrpHdr'));
    
        //      1.1: MsgId
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeGrpHdr, 'MsgId', SKS_PP_StringFormats::strRight(mSKS_EFT_File.FileNbr,35));
    
        //      1.2: CreDtTm
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeGrpHdr, 'CreDtTm', DateTimeUtil::toStr(DateTimeUtil::utcNow()));
    
        //      1.6: NbOfTxs
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeGrpHdr, 'NbOfTxs', num2str(tmpSKS_EFT_FileDetail.InvoiceOrigAmountCur,0,0,0,0));

    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf</Name>
				<Source><![CDATA[
    protected void node_PmtInf()
    {
        //------------------------------------------------------------------------------------------------------
        //  2.0: PmtInf
        //      2.1: PmtInfId
        //      2.2: PmtMtd
        //      2.4: NbOfTxs
        //      2.5: CtrlSum
        //      2.6: PmtTpInf
        //      2.17: ReqdExctnDt
        //      2.19: Dbtr
        //      2.20: DbtrAcct
        //      2.21: DbtrAgt
        //      2.24 ChrgBr
        //------------------------------------------------------------------------------------------------------
    
        batchCount++;
    
        //  2.0: PmtInf
        nodePmtInf = nodeRoot.appendChild(xmlDoc.createElement('PmtInf'));
    
        //      2.17: ReqdExctnDt
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtInf, 'ReqdExctnDt', SKS_PP_StringFormats::strDateYYYYMMDD(mSKS_EFT_FileDetail.EffectiveDate, DateSeparator::Hyphen));
    
        if(mSKS_EFT_FileDetail.Module == SKS_EFT_Module::AP)
        {
            this.node_PmtInf_DbtrNodes(nodePmtInf);
        }
        else
        {
            this.node_PmtInf_CdtrNodes(nodePmtInf);
        }
    
        //      2.24 ChrgBr
        this.node_PmtInf_ChrgBr(nodePmtInf);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_DbtrNodes</Name>
				<Source><![CDATA[
    protected void node_PmtInf_DbtrNodes(XmlElement _nodePmtInf)
    {
        //      2.20: DbtrAcct
        this.node_PmtInf_DbtrAcct(_nodePmtInf);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_DbtrAcct</Name>
				<Source><![CDATA[
    protected void node_PmtInf_DbtrAcct(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.20: DbtrAcct
        //          Id
        //              IBAN
        //              Othr
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeDbtrAcct;
        XmlElement nodeDbtrAcctId;
    
        //      2.20: DbtrAcct
        nodeDbtrAcct = nodePmtInf.appendChild(xmlDoc.createElement('DbtrAcct'));
    
        //          Id
        nodeDbtrAcctId = nodeDbtrAcct.appendChild(xmlDoc.createElement('Id'));
    
        //              Othr
        this.node_PmtInf_DbtrAcct_Id_Othr(nodeDbtrAcctId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_DbtrAcct_Id_Othr</Name>
				<Source><![CDATA[
    protected void node_PmtInf_DbtrAcct_Id_Othr(XmlElement _nodeAcctId)
    {
        //------------------------------------------------------------------------------------------------------
        //              Othr
        //                  Id
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeOthr;
    
        //              Othr
        nodeOthr = _nodeAcctId.appendChild(xmlDoc.createElement('Othr'));
    
        //                  Id
        if(mBankAccountTable.CurrencyCode == 'USD')
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeOthr, 'Id','H' + mSKS_EFT_FileDetail.BankBankAcct);
        }
        else
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeOthr, 'Id', 'F' + mSKS_EFT_FileDetail.BankBankAcct);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_ChrgBr</Name>
				<Source><![CDATA[
    protected void node_PmtInf_ChrgBr(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.24 ChrgBr
        //------------------------------------------------------------------------------------------------------
    
        //      2.24 ChrgBr
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodePmtInf, 'ChrgBr', this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('Charges', mSKS_EFT_FileDetail.RecId)), 0, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_PmtId</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_PmtId(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.28: PmtId
        //              2.30: InstrId
        //------------------------------------------------------------------------------------------------------
    
        XmlElement nodePmtId;
    
        //          2.28: PmtId
        nodePmtId = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('PmtId'));
    
        //              2.30: InstrId
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtId, 'InstrId', SKS_PP_StringFormats::strRight(mSKS_EFT_FileDetail.PaymentReference, 16));
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_CdtrAgt</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_CdtrAgt(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.77: CdtrAgt
        //              FinInstnId
        //                  ClrSysMmbId
        //                      MmbId
        //                  BrnchId
        //                      Id
        //                  BIC
        //                  Nm
        //                  PstlAdr
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeCdtrAgt;
        XmlElement nodeFinInstnId;
        XmlElement nodeClrSysMmbId;
        XmlElement nodeClrSysId;
        
        if( mSKS_EFT_FileDetail.DepSwiftNo || mSKS_EFT_FileDetail.DepBankTransit)
        {
            //          2.77: CdtrAgt
            nodeCdtrAgt = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('CdtrAgt'));
    
            //              FinInstnId
            nodeFinInstnId = nodeCdtrAgt.appendChild(xmlDoc.createElement('FinInstnId'));

            if(mSKS_EFT_FileDetail.DepSwiftNo)
            {
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeFinInstnId, 'BIC', mSKS_EFT_FileDetail.DepSwiftNo, 0, false);
            }
            else
            {
                //                  ClrSysMmbId
                nodeClrSysMmbId = nodeFinInstnId.appendChild(xmlDoc.createElement('ClrSysMmbId'));
            
                if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #FEDWIRE)
                {
                    //                      ClrSysId
                    nodeClrSysId = nodeClrSysMmbId.appendChild(xmlDoc.createElement('ClrSysId'));

                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeClrSysId, 'Cd', 'USABA');
                }
            
                //                      MmbId
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeClrSysMmbId, 'MmbId', mSKS_EFT_FileDetail.DepBankTransit,35);
            }
    
            //                  Nm
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeFinInstnId, 'Nm', this.CharacterReplacement(mSKS_EFT_VendorPaym.WBenBankName), 140, false);
    
            //                  PstlAdr
            this.node_PstlAdr(nodeFinInstnId, mSKS_EFT_VendorPaym.WBenBankCountryRegionId, mSKS_EFT_VendorPaym.WBenBankAddr, '', '');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_CdtrAcct</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_CdtrAcct(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.80: CdtrAcct
        //                  Id
        //                  IBAN
        //------------------------------------------------------------------------------------------------------

        XmlElement nodeCdtrAcct;
        XmlElement nodeCdtrAcctId;
        XmlElement nodeCdtrAcctIdOthr;

        if(mSKS_EFT_FileDetail.DepBankIBAN || mSKS_EFT_FileDetail.DepBankAcct)
        {
            //          2.80: CdtrAcct
            nodeCdtrAcct = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('CdtrAcct'));

            //              Id
            nodeCdtrAcctId = nodeCdtrAcct.appendChild(xmlDoc.createElement('Id'));

            if(mSKS_EFT_FileDetail.DepBankIBAN)
            {
                //                  IBAN
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdtrAcctId, 'IBAN', mSKS_EFT_FileDetail.DepBankIBAN, 34);
            }
            else
            {
                //                  Othr
                nodeCdtrAcctIdOthr = nodeCdtrAcctId.appendChild(xmlDoc.createElement('Othr'));

                //                      Id
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdtrAcctIdOthr, 'Id', mSKS_EFT_FileDetail.DepBankAcct, 34, false);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_IntrmyAgt1</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_IntrmyAgt1(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.71: IntrmyAgt1
        //              FinInstnId
        //                  BIC
        //                  ClrSysMmbId
        //                      MmbId
        //                  Nm
        //                  PstlAdr
        //                  Id
        //------------------------------------------------------------------------------------------------------
    
        XmlElement nodeIntrmyAgt1;
        XmlElement nodeFinInstnId;
        XmlElement nodeClrSysMmbId;
        XmlElement nodeClrSysId;
        XmlElement nodeBrnchId;
    
        if(mSKS_EFT_VendorPaym.WIntBankSwift != '' || mSKS_EFT_VendorPaym.WIntBankId != '')
        {
            //          2.71: IntrmyAgt1
            nodeIntrmyAgt1 = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('IntrmyAgt1'));
    
            //              FinInstnId
            nodeFinInstnId = nodeIntrmyAgt1.appendChild(xmlDoc.createElement('FinInstnId'));
    
            if(mSKS_EFT_VendorPaym.WIntBankSwift != '')
            {
                //                  BIC
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeFinInstnId, 'BIC', mSKS_EFT_VendorPaym.WIntBankSwift, 0, false);
            }
            else 
            {    
                //                  ClrSysMmbId
                nodeClrSysMmbId = nodeFinInstnId.appendChild(xmlDoc.createElement('ClrSysMmbId'));
            
                //                      MmbId
                if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #FEDWIRE)
                {
                    nodeClrSysId = nodeClrSysMmbId.appendChild(xmlDoc.createElement('ClrSysId'));

                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeClrSysId, 'cd', 'USABA', 5);
                }

                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeClrSysMmbId, 'MmbId', mSKS_EFT_VendorPaym.WIntBankId, 0, false);
            }

            //                  Nm
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeFinInstnId, 'Nm', this.CharacterReplacement(mSKS_EFT_VendorPaym.WIntBankName), 140, false);
    
            //                  PstlAdr
            this.node_PstlAdr(nodeFinInstnId, mSKS_EFT_VendorPaym.WIntBankCountryRegionId, mSKS_EFT_VendorPaym.WIntBankAddr + '' + mSKS_EFT_VendorPaym.WIntBankAddr2, '', mSKS_EFT_VendorPaym.WIntBankCity);
    
            //              BrnchId
            if(mSKS_EFT_VendorPaym.WIntBankBranch != '')
            {
                nodeBrnchId = nodeIntrmyAgt1.appendChild(xmlDoc.createElement('BrnchId'));
                //              Id
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeBrnchId, 'Id', this.CharacterReplacement(mSKS_EFT_VendorPaym.WIntBankBranch));
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>