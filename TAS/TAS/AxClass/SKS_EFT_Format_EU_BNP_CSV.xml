<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_EU_BNP_CSV</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_EU_BNP_CSV extends SKS_EFT_Format
/// </summary>
class SKS_EFT_Format_EU_BNP_CSV extends SKS_EFT_Format
{
    #define.FormatVersion('20220608')
    #define.DOM_SPLITV('DOM-SPLITV')    //SKS#DevOps:16025
    #define.DOM('DOM')                  //SKS#DevOps:16025
    #define.SPLIT('SPLIT')              //SKS#DevOps:15778

    #define.Separator(',')
    #define.DoubleQuotes('"')

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    protected void formatStructure()
    {
        while(mSKS_EFT_FileDetail)
        {
            // Get SKS_EFT_FileFormatPaymSpec
            this.getSKS_EFT_FileFormatPaymSpec();

            mSKS_EFT_FileDetail_BankAccount = SKS_EFT_FileDetail_BankAccount::find(mSKS_EFT_FileDetail.RecId);
            
            this.rec_PaymentDetails();

            next mSKS_EFT_FileDetail;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCodePage</Name>
				<Source><![CDATA[
    protected int getCodePage()
    {
        return 1252;        //SKS#DevOps:15869
    }

]]></Source>
			</Method>
			<Method>
				<Name>wrapField</Name>
				<Source><![CDATA[
    private str wrapField(str _field = '', int _fieldLength = 0, boolean doubleQuotes = false, boolean _addSeparator = true)
    {
        str text;
        ;
        if(_fieldLength > 0)
        {
            text = subStr(_field, 1, _fieldLength);
        }
        else
        {
            text = _field;
        }
        if(doubleQuotes)
        {
            text = #DoubleQuotes + text + #DoubleQuotes;            
        }
        if(_addSeparator)
        {
            text = text + #Separator;
        }
        
        return text;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceNbrs</Name>
				<Source><![CDATA[
    protected str getInvoiceNbrs()
    {
        SKS_EFT_FileDetail invSKS_EFT_FileDetail;
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        str invString;
    
        select InvoiceNumber from invSKS_EFT_FileDetail where invSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId;
    
        while(invSKS_EFT_FileDetail)
        {
            if(invSKS_EFT_FileDetail.InvoiceNumber == '')
            {
                // If no invoice number, go to next record
                next invSKS_EFT_FileDetail;
                continue;
            }
            sb.Append(invSKS_EFT_FileDetail.InvoiceNumber);
    
            next invSKS_EFT_FileDetail;
    
            if(invSKS_EFT_FileDetail)
            {
                sb.Append(' ');
            }
        }
    
        invString = this.CharacterReplacement(sb.ToString());
        return invString;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_PaymentDetails</Name>
				<Source><![CDATA[
    public boolean rec_PaymentDetails()
    {
        //........................................................................................................
        // Nbr   Description                                    length
        // 1     Type of operation                                3
        // 2     Date of payment
        // 3     Amount                                          15
        // 4     Payer's bank reference number                    8
        // 5     Unused                                           1
        // 6     Payer’s account number – NRB format              26
        // 7     Contractor's account number – NRB format         26
        // 8     Payer Name and address                           4*35
        // 9     contractor Name and address                      4*35
        // 10    Unused...........................................1
        // 11    contractor bank Settlement number                8
        // 12    Payment details  
        // 13    empty
        // 14    empty
        // 15    Regular order                                     2
        // 16    Client’s references                               6*35
        //...........................................................................................................
        SKS_EFT_FileDetail sks_EFT_FileDetail;
        VendInvoiceJour    vendInvoiceJour;
        str  payerDetails, contractorDetails, payBankRefNum, value, paymentDetails, description;
        AmountMST amt;
        System.Text.StringBuilder sb = new System.Text.StringBuilder();

        //1	    Type of operation
        sb.Append(this.wrapField('110'));

        // 2     Date of payment
        sb.Append(this.wrapField(SKS_PP_StringFormats::strDateYYYYMMDD(mSKS_EFT_FileDetail.EffectiveDate)));

        // 3     Amount                                          15        
        sb.Append(this.wrapField(strRem(num2Str(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1, 1, 2, 1, 0), '.'), 15));

        // 4     Payer's bank reference number                    8
        payBankRefNum = strUpr(this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('PayBankRefNum', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank)));
        sb.Append(this.wrapField(payBankRefNum, 8, true));

        // 5     Unused                                           1
        sb.Append(this.wrapField('0'));

        // 6     Payer’s account number – NRB format              26
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.BankBankIBAN,28));     //SKS#DevOps:16037

        // 7     Contractor's account number – NRB format         26
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.DepBankIBAN,28));       //SKS#DevOps:16037

        // 8     Payer Name and address                           4*35
        payerDetails = subStr(mSKS_EFT_FileDetail_BankAccount.WOrdPartyName, 1, 35);
        
        if(mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr || mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr2)
        {
            payerDetails = payerDetails + '|'+  subStr(mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr + ' ' + mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr2,1,35);
        }
        if(mSKS_EFT_FileDetail_BankAccount.WOrdPartyZipCode || mSKS_EFT_FileDetail_BankAccount.WOrdPartyCity)
        {
            payerDetails = payerDetails + '|'+  subStr(mSKS_EFT_FileDetail_BankAccount.WOrdPartyZipCode + ' ' + mSKS_EFT_FileDetail_BankAccount.WOrdPartyCity,1,35);
        }
        if(mSKS_EFT_FileDetail_BankAccount.WOrdPartyState)
        {
            payerDetails = payerDetails + '|'+  subStr(mSKS_EFT_FileDetail_BankAccount.WOrdPartyState, 1, 35);
        }
        sb.Append(this.wrapField(this.CharacterReplacement(payerDetails), 140, true));

        // 9     contractor Name and address                      4*35
        contractorDetails = subStr(mSKS_EFT_FileDetail_VendAddress.BeneName, 1, 35);

        if(mSKS_EFT_FileDetail_VendAddress.BeneAddr || mSKS_EFT_FileDetail_VendAddress.BeneAddr2)
        {
            contractorDetails = contractorDetails + '|'+  subStr(mSKS_EFT_FileDetail_VendAddress.BeneAddr + ' ' + mSKS_EFT_FileDetail_VendAddress.BeneAddr2,1,35);
        }
        if(mSKS_EFT_FileDetail_VendAddress.BeneZipPostal || mSKS_EFT_FileDetail_VendAddress.BeneCity)
        {
            contractorDetails = contractorDetails + '|'+  subStr(mSKS_EFT_FileDetail_VendAddress.BeneZipPostal + ' ' + mSKS_EFT_FileDetail_VendAddress.BeneCity,1,35);
        }
        if(mSKS_EFT_FileDetail_VendAddress.BeneState)
        {
            contractorDetails = contractorDetails + '|'+  subStr(mSKS_EFT_FileDetail_VendAddress.BeneState, 1, 35);
        }
        sb.Append(this.wrapField(this.CharacterReplacement(contractorDetails), 140, true));

        // 10    Unused                                             1
        sb.Append(this.wrapField('0'));

        // 11    contractor bank Settlement number                8
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.DepBankTransit, 8, true));

        value =  this.getInvoiceNbrs();

        // 12    Payment details
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #DOM)     //SKS#DevOps:16025
        {
            if(value)
            {
                paymentDetails = subStr(value, 1, 35);

                if(strlen(value) > 35)
                {
                    paymentDetails = paymentDetails  + '|' +subStr(value, 36, 35);
                }
                if(strlen(value) > 70)
                {
                    paymentDetails = paymentDetails  + '|' +subStr(value, 71, 35);
                }
                if(strlen(value) > 105)
                {
                    paymentDetails = paymentDetails  + '|' +subStr(value, 106, 35);
                }
                sb.Append(this.wrapField(this.CharacterReplacement(paymentDetails), 140, true));
            }
            else
            {
                sb.Append(this.wrapField('', 0, true));
            }
        }
        else
        {
            while select InvoiceNumber, AccountNum, InvoiceDate from SKS_EFT_FileDetail where sks_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId
            {
                select firstOnly SumTax from  vendInvoiceJour
                    where vendInvoiceJour.InvoiceAccount    ==  sks_EFT_FileDetail.AccountNum &&
                    vendInvoiceJour.InvoiceDate       ==  sks_EFT_FileDetail.InvoiceDate &&
                    vendInvoiceJour.InvoiceId         ==  sks_EFT_FileDetail.InvoiceNumber;

                amt += vendInvoiceJour.SumTax;
            }
            description = LedgerJournalTrans::findRecId(mSKS_EFT_FileDetail.PaymentLineRecId, false).Txt;

            paymentDetails = '/VAT/'+num2str(amt,0,2,2,0) + '/IDC/'+mSKS_EFT_FileDetail.VATNum + '/INV/'+this.getInvoiceNbrs() + '/TXT/'+description;

            sb.Append(this.wrapField(this.CharacterReplacement(paymentDetails), 140, true));
        }
        // 13    empty
        sb.Append(this.wrapField('',0,true));

        // 14    empty
        sb.Append(this.wrapField('',0,true));

        // 15    Regular order                                     2
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #DOM:                  //SKS#DevOps:16025
                sb.Append(this.wrapField('51',2,true));
                break;
            case #DOM_SPLITV:           //SKS#DevOps:16025
            case #SPLIT:                //SKS#DevOps:15778
                sb.Append(this.wrapField('53',2,true));
                break;
        }
        // 16    Client’s references                               6*35
        sb.Append(this.wrapField('',0,true, false));

        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectPaymentRecords</Name>
				<Source><![CDATA[
    protected void selectPaymentRecords()
    {
        //------------------------------------------------------------------------------------------------------
        // Standard payment selction
        // Override if different selection is need for a format
        //------------------------------------------------------------------------------------------------------
    
        //Order by clause must match the clause in the SKS_EFT_Processing.SumByPayment
        select * from mSKS_EFT_FileDetail
            join mSKS_EFT_FileDetail_VendAddress
              order by mSKS_EFT_FileDetail.RecordSection,
                   mSKS_EFT_FileDetail.PaymMode,
                   mSKS_EFT_FileDetail.BankAccountId,
                   mSKS_EFT_FileDetail.PaymentCurrencyCode,
                   mSKS_EFT_FileDetail.PaymSpec,
                   mSKS_EFT_FileDetail.EffectiveDate,
                   mSKS_EFT_FileDetail.DepCountryRegionId,
                   mSKS_EFT_FileDetail.RecordType,
                   mSKS_EFT_FileDetail.AccountNum,
                   mSKS_EFT_FileDetail.PaymentReference,
                   mSKS_EFT_FileDetail.RecId
          where mSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                mSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                mSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary&&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_VendAddress.RefRecId ;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>