<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFTAP_SubmitPaymentRequest</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Move the payment request journal lines to a payment journal in the specified payment company.
/// </summary>
// SKS_FDD_9536
class SKS_EFTAP_SubmitPaymentRequest
{
    JournalId               journalNum;
    LedgerJournalTable      ledgerJournalTable;
    LedgerJournalId         ledgerJournalId;
    boolean                 callFromLine;
    LedgerJournalTable      ledgerJournalTableCreateNew;
    LedgerJournalTrans      ledgerJournalTransCreateNew;
    LedgerJournalTable      ledgerJournalTableCanCreateNew;
    Voucher                 paymentVoucher;
    

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    server static void main(Args args)
    {
        LedgerJournalTable                  ledgerJournalTable;
        LedgerJournalTrans                  ledgerJournalTrans;
        SKS_EFTAP_SubmitPaymentRequest      sKS_EFTAP_SubmitPaymentRequest = SKS_EFTAP_SubmitPaymentRequest::construct();

        if(args.record().TableId == tableNum(LedgerJournalTable))
        {
            ledgerJournalTable = args.record() as LedgerJournalTable;
        }
        else
        {
            ledgerJournalTrans = args.record() as LedgerJournalTrans;
            sKS_EFTAP_SubmitPaymentRequest.setCallFromJourLine(true);
            ledgerJournalTable = ledgerJournalTrans.ledgerJournalTable();
        }
        sKS_EFTAP_SubmitPaymentRequest.setledgerJournalTable(ledgerJournalTable);
        sKS_EFTAP_SubmitPaymentRequest.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    server static SKS_EFTAP_SubmitPaymentRequest construct()
    {
        return new SKS_EFTAP_SubmitPaymentRequest();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public  void run()
    {
        LedgerJournalTrans              ledgerJournalTrans;
        SKS_EFTAP_SwitchBoardIHBBank    sKS_EFTAP_SwitchBoardIHBBank;
        
        if(ledgerJournalTable.SKS_EFTAP_PaymJourName
            && ledgerJournalTable.SKS_EFTAP_PaymentCompany)
        {
            while select ledgerJournalTrans 
                where ledgerJournalTrans.JournalNum == ledgerJournalTable.JournalNum
            {
                changecompany(ledgerJournalTable.SKS_EFTAP_PaymentCompany)
                {
                    // Move the payment journal lines to a payment journal in the specified payment company.
                    this.transferPaymentRequestToPaymentJournal(ledgerJournalTrans);

                    // Execute switch board
                    sKS_EFTAP_SwitchBoardIHBBank = new SKS_EFTAP_SwitchBoardIHBBank();
                    sKS_EFTAP_SwitchBoardIHBBank.setIsCallfromPaymReq(true);
                    sKS_EFTAP_SwitchBoardIHBBank.setledgerJournalTable(LedgerJournalTable::find(ledgerJournalId));
                    sKS_EFTAP_SwitchBoardIHBBank.run();
                }
                this.insertPaymentrequestJournal(ledgerJournalTrans);
            }
            // Delete the payment request journal.  Once transferred to the payment  journal.
            changecompany(curExt())
            {
                this.deletePaymentrequestJournal();
            }           
        }
        else
        {
            error("@SKS:SKGEFTAPValPaymReqJour");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setledgerJournalTable</Name>
				<Source><![CDATA[
    void setledgerJournalTable(LedgerJournalTable _ledgerJournalTable)
    {
        ledgerJournalTable = _ledgerJournalTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCallFromJourLine</Name>
				<Source><![CDATA[
    void setCallFromJourLine(boolean _callFromLine)
    {
        callFromLine = _callFromLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferPaymentRequestToPaymentJournal</Name>
				<Source><![CDATA[
    void transferPaymentRequestToPaymentJournal(LedgerJournalTrans _ledgerJournalTrans)
    {
        RefRecId            numberSequenceId;        
        LedgerJournalName   newLedgerJournalName = LedgerJournalName::find(ledgerJournalTable.SKS_EFTAP_PaymJourName);

        if(newLedgerJournalName)
        {
            ttsbegin;
            select firstonly ledgerJournalTableCanCreateNew
                where ledgerJournalTableCanCreateNew.SKS_EFTAP_PayGroup == ledgerJournalTable.SKS_EFTAP_PayGroup
                && ledgerJournalTableCanCreateNew.JournalName == ledgerJournalTable.SKS_EFTAP_PaymJourName
                && ledgerJournalTableCanCreateNew.Posted == NoYes::No
                && ledgerJournalTableCanCreateNew.SKS_EFTAP_AcceptPaymReq == NoYes::Yes
                && ledgerJournalTableCanCreateNew.SKS_EFT_JournalState != SKS_EFT_JournalState::Transferred; // SKS_Bug_10229

            if (!ledgerJournalTableCanCreateNew.RecId)
            {
                ledgerJournalTableCreateNew.initFromLedgerJournalName(ledgerJournalTable.SKS_EFTAP_PaymJourName);
                ledgerJournalTableCreateNew.SKS_EFTAP_CreatedByPaymReq         = NoYes::Yes;
                ledgerJournalTableCreateNew.SKS_EFTAP_PayGroup                 = ledgerJournalTable.SKS_EFTAP_PayGroup;
                ledgerJournalTableCreateNew.SKS_EFTAP_AcceptPaymReq            = NoYes::Yes;
                ledgerJournalTableCreateNew.SKS_EFTAP_PaymentCompany           = ledgerJournalTable.SKS_EFTAP_PaymentCompany;
                ledgerJournalTableCreateNew.SKS_EFTAP_IsPaymReqJournal         = NoYes::No;
                ledgerJournalTableCreateNew.SKS_EFTAP_PaymentSubmitUser        = curUserId();
                ledgerJournalTableCreateNew.SKS_EFTAP_PaymentSubmitDateTime        = DateTimeUtil::getSystemDateTime();
                ledgerJournalTableCreateNew.insert();
                ledgerJournalId = ledgerJournalTableCreateNew.JournalNum;
            }
            else
            {
                ledgerJournalId = ledgerJournalTableCanCreateNew.JournalNum;
            }
            numberSequenceId = newLedgerJournalName.NumberSequenceTable;
            paymentVoucher = NumberSeq::newGetVoucherFromId(numberSequenceId, false).voucher();
            ledgerJournalTransCreateNew = _ledgerJournalTrans.data();
            ledgerJournalTransCreateNew.company(strUpr(curExt())); // SKS_Bug_10229
            ledgerJournalTransCreateNew.OffsetCompany           = curExt();
            ledgerJournalTransCreateNew.Voucher                 = paymentVoucher;
            ledgerJournalTransCreateNew.JournalNum              = ledgerJournalId;
            ledgerJournalTransCreateNew.OffsetAccountType = LedgerJournalACType::Bank;
            ledgerJournalTransCreateNew.OffsetLedgerDimension   = 0;
            ledgerJournalTransCreateNew.insert();
            this.updateSpecTransSingle(ledgerJournalTransCreateNew, _ledgerJournalTrans);
            ttscommit;
        }
        else
        {
            throw error(strFmt("@SYS25355", ledgerJournalTable.SKS_EFTAP_PaymJourName, curext()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSpecTransSingle</Name>
				<Source><![CDATA[
    private void updateSpecTransSingle(
        LedgerJournalTrans _paymJournal,
        LedgerJournalTrans _paymRequestJournal)
    {
        SpecTrans specTrans;

        specTrans.skipDataMethods(true);
        specTrans.skipDatabaseLog(true);
        specTrans.skipEvents(true);

        update_recordset specTrans
            setting SpecCompany = _paymJournal.DataAreaId,
                SpecTableId = tableNum(LedgerJournalTrans),
                SpecRecId = _paymJournal.RecId
            where specTrans.SpecCompany == _paymRequestJournal.DataAreaId
                && specTrans.SpecTableId == _paymRequestJournal.TableId
                && specTrans.SpecRecId == _paymRequestJournal.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deletePaymentrequestJournal</Name>
				<Source><![CDATA[
    public void deletePaymentrequestJournal()
    {
        LedgerJournalTable ledgerJournalTableLoc;
        LedgerJournalTrans ledgerJournalTransLoc;

        ttsbegin;
        if(callFromLine)
        {
            ledgerJournalTransLoc.skipDataMethods(true);
            delete_from ledgerJournalTransLoc where ledgerJournalTransLoc.JournalNum == ledgerJournalTable.JournalNum;
        }
        else
        {
            ledgerJournalTableLoc.skipDataMethods(true);
            delete_from ledgerJournalTableLoc where ledgerJournalTableLoc.JournalNum == ledgerJournalTable.JournalNum;
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertPaymentrequestJournal</Name>
				<Source><![CDATA[
    public void insertPaymentrequestJournal(LedgerJournalTrans _ledgerJournalTrans)
    {
        SKS_EFTAP_VendPmtSubmitLegerJournalTable        sks_EFTAP_VendPmtSubmitLegerJournalTable;
        SKS_EFTAP_VendPmtSubmitLegerJournalTrans        sks_EFTAP_VendPmtSubmitLegerJournalTrans;
        LedgerJournalTable  ledgerJournalTablePaymLoc;
        LedgerJournalTrans ledgerJournalTransLocal;

        select sks_EFTAP_VendPmtSubmitLegerJournalTable
            where sks_EFTAP_VendPmtSubmitLegerJournalTable.ReferenceFieldRecId == ledgerJournalTable.RecId;

        if(!sks_EFTAP_VendPmtSubmitLegerJournalTable)
        {
            changecompany(ledgerJournalTable.SKS_EFTAP_PaymentCompany)
            {
                ledgerJournalTablePaymLoc = LedgerJournalTable::find(ledgerJournalId);
            }
            sks_EFTAP_VendPmtSubmitLegerJournalTable.SKS_EFTAP_PaymentCompany = ledgerJournalTablePaymLoc.SKS_EFTAP_PaymentCompany;
            sks_EFTAP_VendPmtSubmitLegerJournalTable.SKS_EFTAP_PaymentSubmitUser = curUserId();//SKS_Bug_10203
            sks_EFTAP_VendPmtSubmitLegerJournalTable.SKS_EFTAP_PaymentSubmitDateTime = DateTimeUtil::getSystemDateTime();//SKS_Bug_10203
            sks_EFTAP_VendPmtSubmitLegerJournalTable.ReferenceJournalnum = ledgerJournalId;
            sks_EFTAP_VendPmtSubmitLegerJournalTable.Journalnum = ledgerJournalTable.JournalNum;
            sks_EFTAP_VendPmtSubmitLegerJournalTable.SKS_EFTAP_SubmitCompany = ledgerJournalTable.DataAreaId;
            sks_EFTAP_VendPmtSubmitLegerJournalTable.SKS_EFTAP_CreatedByPaymReq = NoYes::Yes;
            sks_EFTAP_VendPmtSubmitLegerJournalTable.ReferenceFieldRecId = ledgerJournalTable.RecId;
            sks_EFTAP_VendPmtSubmitLegerJournalTable.insert();
        }

        changecompany(ledgerJournalTable.SKS_EFTAP_PaymentCompany)
        {
            select ledgerJournalTransLocal where ledgerJournalTransLocal.Voucher == paymentVoucher
                && ledgerJournalTransLocal.JournalNum == sks_EFTAP_VendPmtSubmitLegerJournalTable.ReferenceJournalnum;
        }
        if(ledgerJournalTransLocal)
        {
            sks_EFTAP_VendPmtSubmitLegerJournalTrans.TransDate = ledgerJournalTransLocal.TransDate;
            sks_EFTAP_VendPmtSubmitLegerJournalTrans.CustVendBankAccountId = ledgerJournalTransLocal.CustVendBankAccountId;
            sks_EFTAP_VendPmtSubmitLegerJournalTrans.AmountCurCredit = ledgerJournalTransLocal.AmountCurCredit;
            sks_EFTAP_VendPmtSubmitLegerJournalTrans.AmountCurDebit = ledgerJournalTransLocal.AmountCurDebit;
            sks_EFTAP_VendPmtSubmitLegerJournalTrans.PaymentStatus = ledgerJournalTransLocal.PaymentStatus;
            sks_EFTAP_VendPmtSubmitLegerJournalTrans.CurrencyCode = ledgerJournalTransLocal.CurrencyCode;
            sks_EFTAP_VendPmtSubmitLegerJournalTrans.SKS_EFTAP_IHBBankAccount = ledgerJournalTransLocal.SKS_EFTAP_IHBBankAccount;
            sks_EFTAP_VendPmtSubmitLegerJournalTrans.Company = ledgerJournalTransLocal.Company;
            sks_EFTAP_VendPmtSubmitLegerJournalTrans.LedgerDimension = ledgerJournalTransLocal.LedgerDimension;
            sks_EFTAP_VendPmtSubmitLegerJournalTrans.Journalnum = ledgerJournalTable.JournalNum;
            sks_EFTAP_VendPmtSubmitLegerJournalTrans.VendPmtSubLedgerJournalTable = sks_EFTAP_VendPmtSubmitLegerJournalTable.RecId;
            sks_EFTAP_VendPmtSubmitLegerJournalTrans.PaymentVoucher = ledgerJournalTransLocal.Voucher;
            sks_EFTAP_VendPmtSubmitLegerJournalTrans.ReferenceJournalnum = sks_EFTAP_VendPmtSubmitLegerJournalTable.ReferenceJournalnum;
            sks_EFTAP_VendPmtSubmitLegerJournalTrans.insert();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>