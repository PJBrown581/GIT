<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_EU_SEB_MLF</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_EU_SEB_MLF extends SKS_EFT_Format
/// </summary>
class SKS_EFT_Format_EU_SEB_MLF extends SKS_EFT_Format
{
    #define.FormatVersion('20220509')
    BankAccountTable        mBankAccountTable;
    #define.FPAY('FOREIGN')
    #define.DPAY('DOMESTIC')

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>Address</Name>
				<Source><![CDATA[
    private str Address(str _AdrLine1,
                        str _AdrLine2,
                        str _City,
                        str _State,
                        str _ZipCode,
                        str _CountryRegionId)
    {
        str Address;
    
        Address = _AdrLine1;
    
        if(Address != '' && _AdrLine2 != '')
        {
            Address += ' ';
        }
    
        Address += _AdrLine2;
    
        if(Address != '' && _City != '')
        {
            Address += ' ';
        }
    
        Address += _City;
    
        if(Address != '' && _State != '')
        {
            Address += ' ';
        }
    
        Address += _State;
    
        if(Address != ''&& _ZipCode != '')
        {
            Address += ' ';
        }
    
        Address += _ZipCode;
    
        if(Address != '' && _CountryRegionId != '')
        {
            Address += ' ';
        }
    
        Address += _CountryRegionId;
    
        return Address;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    protected void formatStructure()
    {
        while(mSKS_EFT_FileDetail)
        {
            // Get SKS_EFT_VendorPaym
            this.getSKS_EFT_VendorPaym();
    
            if(mBankAccountTable.AccountID != mSKS_EFT_FileDetail.BankAccountId)
            {
                // Get SKS_EFT_Bank
                this.getSKS_EFT_Bank();
    
                // Get Bank account
                mBankAccountTable = BankAccountTable::find(mSKS_EFT_FileDetail.BankAccountId);
            }
    
            //Get Remittance Information
            this.getRemittanceAddress(mSKS_EFT_FileFormatPaymSpec.UseCheckNumber);
    
            this.rec_Fields();
    
            next mSKS_EFT_FileDetail;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceNbrs</Name>
				<Source><![CDATA[
    protected str getInvoiceNbrs()
    {
        SKS_EFT_FileDetail invSKS_EFT_FileDetail;
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        str invString;
    
        select InvoiceNumber from invSKS_EFT_FileDetail where invSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId;
    
        while(invSKS_EFT_FileDetail)
        {
            if(invSKS_EFT_FileDetail.InvoiceNumber == '')
            {
                // If no invoice number, go to next record
                next invSKS_EFT_FileDetail;
                continue;
            }
            sb.Append(invSKS_EFT_FileDetail.InvoiceNumber);
    
            next invSKS_EFT_FileDetail;
    
            if(invSKS_EFT_FileDetail)
            {
                sb.Append(' ');
            }
        }
    
        invString = this.CharacterReplacement(sb.ToString());
        return invString;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Fields</Name>
				<Source><![CDATA[
    private void rec_Fields()
    {
        //------------------------------------------------------------------
        //  :0:Type of payment order (PO)
        //  :1:PO number
        //  :2:PO amount
        //  :3:PO currency
        //  :4:PO purpose
        //  :5:Reference number
        //  :6:Payer's account No. (IBAN without spaces)
        //  :7:Beneficiary's account No
        //  :8:Beneficiary's name
        //  :9:Beneficiary's address
        //  :10:Receiving bank's SWIFT code
        //  :11:Receiving bank's name
        //  :12:Ignore
        //  :13:CorrBank's Name
        //  :14:CorrBank's account
        //  :15:CorrBank's code
        //  :16:Correspondent bank information
        //  :17:Payment Type
        //  :18:Payer of commission fee.
        //  :19:This field is ignored
        //  :20:Beneficiary's country code
        //  :21:External payment code
        //  :22:Ignored
        //  :23:Ignored
        //  :24:Ignored
        //  :25:Ignored
        //  :26:Ignored
        //  :27:PO date
        //  :28:Ignored
        //  :29:Beneficiary Registration code
        //  :31:Ignored
        //  :34:Correspondent Bank address
        //  :35:Receiving bank's address
        //--------------------------------------------------------------------
        str value;
        str invoices;
        LedgerJournalTrans      ledgerJournalTrans;
    
        //  :0:Type of payment order (PO)
        if(mSKS_EFT_FileDetail.PaymSpec == #FPAY)
        {
            this.fileWrite(':0: :**M4');
        }
        else
        {
            this.fileWrite(':0: :**M3');
        }
    
        //  :1:PO number
        this.fileWrite(':1: :' + subStr(this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference), strLen(this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference)), -5));
    
        //  :2:PO amount
        if(mSKS_EFT_FileDetail.FormatId == 'EU-SEB-MLF-EE' )
        {
            this.fileWrite(':2: :' + strRem(num2str(-1 * mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur, 0, 2, 1, 0), '.'));
        }
        else
        {
            this.fileWrite(':2: :' + num2str(-1 * mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur, 0, 2, 1, 0));
        }
    
        //  :3:PO currency
        this.fileWrite(':3: :' + mSKS_EFT_FileDetail.PaymentCurrencyCode);
    
        //  :4:PO purpose
        invoices = this.getInvoiceNbrs();
        if(invoices != '')
        {
            this.fileWrite(':4: :' + substr(invoices, 1, 140));
        }
    
        //  :5:Reference number
        select PaymId from ledgerJournalTrans where ledgerJournalTrans.RecId == mSKS_EFT_FileDetail.PaymentLineRecId;
    
        if(ledgerJournalTrans.PaymId)
        {
            this.fileWrite(':5: :' + substr(ledgerJournalTrans.PaymId, 1, 20));
        }
    
        if(mBankAccountTable.IBAN != '')
        {
            //  :6:Payer's account No. (IBAN without spaces)
            this.fileWrite(':6: :' + strRem(mBankAccountTable.IBAN, ' '));
        }
        else
        {
            //  :6:Payer's account No. (IBAN without spaces)
            this.fileWrite(':6: :' + strRem(mSKS_EFT_FileDetail.BankBankAcct, ' '));
        }
    
        if(mSKS_EFT_FileDetail.DepBankIBAN != '')
        {
            //  :7:Beneficiary's account No
            this.fileWrite(':7: :' + strRem(mSKS_EFT_FileDetail.DepBankIBAN, ' '));
        }
        else
        {
            //  :7:Beneficiary's account No
            this.fileWrite(':7: :' + strRem(mSKS_EFT_FileDetail.DepBankAcct, ' '));
        }
    
        if(mSKS_EFT_FileDetail.FormatId == 'EU-SEB-MLF-EE' )
        {
            //  :8:Beneficiary's name
            this.fileWrite(':8: :' + this.CharacterReplacement(mSKS_EFT_FileDetail.AccountName));
        }
        else
        {
            //  :8:Beneficiary's name
            this.fileWrite(':8: :' + mRemittanceName);
        }
    
        //  :9:Beneficiary's address
        value = this.Address(mRemittanceAdrLine1,
                               mRemittanceAdrLine2,
                               mRemittanceCity,
                               mRemittanceState,
                               mRemittanceZipCode, '');
        if(value != '')
        {
            this.fileWrite(':9: :' + subStr(value, 1, 105));
        }
    
        //  :10:Receiving bank's SWIFT code
        if(mSKS_EFT_FileDetail.DepSwiftNo != '')
        {
            this.fileWrite(':10: :' + mSKS_EFT_FileDetail.DepSwiftNo);
        }
    
        if(mSKS_EFT_VendorPaym.WBenBankName != '' &&
          (mSKS_EFT_FileDetail.PaymSpec == #FPAY || mSKS_EFT_FileDetail.FormatId == 'EU-SEB-MLF-EE'))
        {
            //  :11:Receiving bank's name
            this.fileWrite(':11: :' + this.CharacterReplacement(mSKS_EFT_VendorPaym.WBenBankName));
        }
    
        if (mSKS_EFT_FileDetail.PaymSpec == #FPAY)
        {
            //  :12:Ignore
            //  :13:CorrBank's Name
            //  :14:CorrBank's account
            //  :15:CorrBank's code
            //  :16:Correspondent bank information
            if(mSKS_EFT_FileDetail.FormatId == 'EU-SEB-MLF-EE')
            {
                //  :17:Payment Type
                this.fileWrite(':17: :T');
    
                //  :18:Payer of commission fee.
                this.fileWrite(':18: :K');
            }
            else
            {
                //  :17:Payment Type
                this.fileWrite(':17: :N');
                //  :18:Payer of commission fee.
                this.fileWrite(':18: :' + this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('Charges', mSKS_EFT_FileDetail.RecId)));
            }
            //  :19:This field is ignored
            //  :20:Beneficiary's country code
            this.fileWrite(':20: :' + mRemittanceCountryRegionId);
        }
        else
        {
            if(mSKS_EFT_FileDetail.FormatId == 'EU-SEB-MLF-EE')
            {
                //  :17:Payment Type
                this.fileWrite(':17: :T');
            }
            else
            {
                //  :21:External payment code
                //  :22:Ignored
                //  :23:Ignored
                //  :24:Ignored
                //  :25:Ignored
                //  :26:Ignored
                //  :27:PO date
                this.fileWrite(':27: :' + SKS_PP_StringFormats::strDateYYYYMMDD(mSKS_EFT_File.EffectiveDate));
    
                //  :28:Ignored
                //  :29:Beneficiary Registration code
                str benRegCode;

                benRegCode = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('BenRegCode', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank));
                if(benRegCode != '')
                    this.fileWrite(':29: :' + this.CharacterReplacement(benRegCode));
    
                //  :31:Ignored
                //  :34:Correspondent Bank address
                //  :35:Receiving bank's address
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>