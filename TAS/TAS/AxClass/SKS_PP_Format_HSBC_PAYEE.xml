<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_PP_Format_HSBC_PAYEE</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_PP_Format_HSBC_PAYEE Extends SKS_PP_Format_ChkType
{
    real mChkVoid_Amt;
    int mTotal_Cnt;
    str mAccountNbr;
    int mVoidChkCount;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>setOrderBy</Name>
				<Source><![CDATA[
    // Remove method if not overriding
    protected SKS_PP_OrderBy setOrderBy()
    {
        return SKS_PP_OrderBy::BankAcct_ChkType_RefNbr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtDetail</Name>
				<Source><![CDATA[
    // HSBC-PAYEE BANK FORMAT
        // Courtesy of:Sean Jean
    
        // Pos 01-13    13       Bank Number/Account - LJ-RBF
        // Pos 14-23    10       Check No. - RJ-LZF
        // Pos 24-33    10       Check Amount - LZF -
        // Pos 34-41    8        Issue Date (MMDDYYYY)
        // Pos 42-42    1        Void Indicator "V"
        // Pos 43-92    50       Payee Name 1
        // Pos 93-142   50       Payee Name 2
        // Pos 143-300           Spaces
    protected str txtDetail()
    {
        //' Note that the Working Table has records at the Voucher level (used by EFT as well)
        //' They are summarized and coded - so that you can easily get just the check records
        //' See the Report | Record Selection filter -
        //' These filters will give the Check Records only
        //' {SKS_PP_FileDetail.ComputerName} = RIPARAM("ComputerName")  - File can be used by multiple computers at once
        //' and {SKS_PP_FileDetail.RecordSummary} <> "X"                - "X" records need to be skipped over
        //' and {SKS_PP_FileDetail.FileType} = "P"                      - "P" records are for Positive Pay
    
        //' Below only want records with RecSection = "20P" (payment record)
        //' RecSection - defines sections:
        //' 10H - Header
        //' 20P - Payments
        //'   RecType: (within Payments)
        //'   10V - Voucher
        //'   20P - PreNotes (should not be any with Pos Pay)
        //' 30B - Blockfill
        //' 40T - Trailer
    
        //' The field with the summarized information for a check is RECORDSUMAMT (see below)
    
        str Amt;
        str ItemType;
        int Mult;
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        ;
    
        Mult = 1;
        ItemType = ' ';
        if (mSKS_PP_FileDetail.ChkType != SKS_PP_ChequeType::Cheque)
        {
            ItemType = 'V';
            if(mSKS_PP_FileDetail.Chkcuryamt < 0)
            {
                Mult = -1;
            }
            mVoidChkCount++;
        }
        //' Always use the Record Summary Amount - will have correct total for the Check
        //Amt =  trim(ToText(Mult * {SKS_PP_FileDetail.RecordSumAmt},"00000000.00"))
        Amt = SKS_PP_StringFormats::strMoney(Mult * mSKS_PP_FileDetail.ChkCuryAmt, 10);
        mChkVoid_Amt = mChkVoid_Amt + ABS(mSKS_PP_FileDetail.ChkCuryAmt);
        mTotal_Cnt++;
    
        mAccountNbr = SKS_PP_StringFormats::strFill(13, substr(mSKS_PP_FileDetail.BnkBankAcct,1,13), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right);
        sb.Append(mAccountNbr);
        sb.Append(SKS_PP_StringFormats::strFill(10, substr(mSKS_PP_FileDetail.ChkRefNbr,1,10), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        sb.Append(Amt);
        sb.Append(SKS_PP_StringFormats::strDateMMDDYYYY(mSKS_PP_FileDetail.ChkDocDate));
        sb.Append(ItemType);
        sb.Append(SKS_PP_StringFormats::strFill(50, substr(mSKS_PP_FileDetail.VendName,1,50), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        sb.Append(SKS_PP_StringFormats::strFill(50, substr(mSKS_PP_FileDetail.VendName,51,100), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        sb.Append(SKS_PP_StringFormats::strFill(158, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        return sb.ToString();
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtGroupTrailer</Name>
				<Source><![CDATA[
    // HSBC-PAYEE BANK FORMAT
        // Courtesy of: Sean Jean
    
        // Trailer Record
        // Pos 01-01    1        Trailer Record Indicator
        // Pos 02-14    13       Bank Number/Account - LJ-RBF
        // Pos 15-19    5        Spaces
        // Pos 20-29    10       Total Items (RJ-LZF)
        // Pos 30-34    5        Spaces
        // Pos 35-46    12       Total Dollar Amount (RJ-LZF)
        // Pos 47-300   254      Spaces
    protected str txtGroupTrailer()
    {
        //BP Deviation Documented
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        str localAmt;
        ;
    
        localAmt = SKS_PP_StringFormats::strMoney(mChkVoid_Amt,12);
        //Amt =  Left(Amt, 10) + Right(Amt,2)
    
        sb.Append('T');
        sb.Append(mAccountNbr);
        sb.Append(SKS_PP_StringFormats::strFill(5, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        sb.Append(SKS_PP_StringFormats::strFill(10, int2str(mTotal_Cnt), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        sb.Append(SKS_PP_StringFormats::strFill(5, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        sb.Append(localAmt);
    
        if(mVoidChkCount > 0)
        {
            sb.Append('VOIDS');
            sb.Append(SKS_PP_StringFormats::strFill(249, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
            mVoidChkCount = 0;
        }
        else
        {
            sb.Append(SKS_PP_StringFormats::strFill(254, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
    
        mChkVoid_Amt = 0;
        mTotal_Cnt = 0;
    
        return sb.ToString();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>