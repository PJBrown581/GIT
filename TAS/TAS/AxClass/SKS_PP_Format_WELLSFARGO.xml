<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_PP_Format_WELLSFARGO</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_PP_Format_WELLSFARGO Extends SKS_PP_Format_BankGroup
{
    int mChkCount;
    real mChkSum;
    // WELLS FARGO POSITIVE PAY FORMAT
        // Courtesy of: Larry Neu, Elypsis, Revised by Sam Bartley
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>txtDetail</Name>
				<Source><![CDATA[
    // Pos 01-10    10       Check number - RJ-LZF
        // Pos 11-16    6        Issue date
        // Pos 17-26    10       Account number - LJ-RBF
        // Pos 27-29    3        Trancode (320 = issued check, 370 = cancel old register - void)
        // Pos 30-39    10       Amount (zeroes for void)
        // Pos 40-80    41       Additional description - Payee1 + Payee2
    protected str txtDetail()
    {
        // Note that the Working Table has records at the Voucher level (used by EFT as well)
        // They are summarized and coded - so that you can easily get just the check records
        // See the Report | Record Selection filter -
        // These filters will give the Check Records only
        // {SKS_PP_FileDetail.ComputerName} = RIPARAM('ComputerName')  - File can be used by multiple computers at once
        // and {SKS_PP_FileDetail.RecordSummary} <> 'X'                - 'X' records need to be skipped over
        // and {SKS_PP_FileDetail.FileType} = 'P'                      - 'P' records are for Positive Pay
    
        // Below only want records with RecSection = '20P' (payment record)
        // RecSection - defines sections:
        // 10H - Header
        // 20P - Payments
        //   RecType: (within Payments)
        //   10V - Voucher
        //   20P - PreNotes (should not be any with Pos Pay)
        // 30B - Blockfill
        // 40T - Trailer
    
        // The field with the summarized information for a check is RECORDSUMAMT (see below)
    
        Str Amt;
        str ItemType;
        int Mult;
        str Payee1;
        str Payee2;
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        ;
    
        Mult = 1;
        if (mSKS_PP_FileDetail.ChkType != SKS_PP_ChequeType::Cheque)
        {
            if (mSKS_PP_FileDetail.ChkType == SKS_PP_ChequeType::CancelledCheque)
            {
                    ItemType = '370';
                    if (mSKS_PP_FileDetail.ChkCuryAmt < 0)
                    {
                       Mult = -1;
                    }
            }
            else
            {
                ItemType = '430';
                Mult = 0;
            }
    
        }
        else
        {
            ItemType = '320';
            if (mSKS_PP_FileDetail.ChkCuryAmt == 0)
            {
                Itemtype = '430';
            }
    
        }
    
        // Always use the Record Summary Amount - will have correct total for the Check
        Amt =  SKS_PP_StringFormats::strMoney(Mult * mSKS_PP_FileDetail.ChkCuryAmt, 10);
    
        // Get Lines 1 & 2 of the check
        Payee1 = mSKS_PP_FileDetail.VendName;
        Payee2 =  '';
    
        mChksum = mChksum + (Mult * mSKS_PP_FileDetail.ChkCuryAmt);
        mChkcount++;
    
        sb.Append(SKS_PP_StringFormats::strFill(10, mSKS_PP_FileDetail.ChkRefNbr, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        sb.Append(SKS_PP_StringFormats::strDateMMDDYY(mSKS_PP_FileDetail.ChkDocDate));
        sb.Append(SKS_PP_StringFormats::strFill(10, mSKS_PP_FileDetail.BnkBankAcct, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        sb.Append(ItemType);
        sb.Append(Amt);
        sb.Append(SKS_PP_StringFormats::strFill(30, substr(Payee1,1,30), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        sb.Append(SKS_PP_StringFormats::strFill(11, substr(Payee2,1,11), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        return sb.ToString();
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtGroupTrailer</Name>
				<Source><![CDATA[
    protected str txtGroupTrailer()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        str Amt;
        ;
    
        Amt = SKS_PP_StringFormats::strMoney(mChksum, 10);
    
        sb.Append('&');
        sb.Append(SKS_PP_StringFormats::strFill(14, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        sb.Append(SKS_PP_StringFormats::strFill(5, int2str(mChkcount), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        sb.Append(SKS_PP_StringFormats::strFill(3, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        sb.Append(Amt);
        sb.Append(SKS_PP_StringFormats::strFill(47, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        mChkSum = 0;
        mChkCount = 0;
    
        return sb.ToString();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>