<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CreditCardTAS_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Retail=Microsoft.Dynamics.Retail;
using RetailConst=Microsoft.Dynamics.Retail.PaymentSDK.Portable.Constants;

[ExtensionOf(classStr(CreditCard))]
final class CreditCardTAS_Extension
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>sKS_CC_InitFromCustPaymTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the reference on the <c>CreditCardAuthTrans</c> to the payment record.
    /// </summary>
    /// <param name="_creditCardAuthTrans">
    /// The <c>CreditCardAuthTrans</c> buffer to set.
    /// </param>
    /// <param name="_sKS_CC_CustPaymTable">
    /// The credit card payment record to be used in initialization.
    /// </param>
    /// <param name="_creditCardAuthTransOrig">
    /// The original <c>CreditCardAuthTrans</c> buffer that is being settled
    /// during a capture after authorized scenario.
    /// </param>
    private static void sKS_CC_InitFromCustPaymTable(CreditCardAuthTrans    _creditCardAuthTrans,
                                                     SKS_CC_CustPaymTable   _sKS_CC_CustPaymTable,
                                                     CreditCardAuthTrans    _creditCardAuthTransOrig = null)
    {
        LedgerJournalTrans      ledgerJournalTrans;
        SMAServiceOrderTable    serviceOrderTable;
        ProjProposalJour        projProposalJour;
        ProjInvoiceJour         projInvoiceJour;

        if (_sKS_CC_CustPaymTable)
        {
            _creditCardAuthTrans.SKS_CC_CustPaymTable = _sKS_CC_CustPaymTable.RecId;
            _creditCardAuthTrans.CurrencyCode = _sKS_CC_CustPaymTable.CreditCardCurrency;
            _creditCardAuthTrans.LineNum = CreditCardAuthTrans::sKS_CC_lastLineNum(_sKS_CC_CustPaymTable.RecId) + 1;
            switch (_sKS_CC_CustPaymTable.RefTableId)
            {
                case tableNum(LedgerJournalTrans):
                    ledgerJournalTrans = LedgerJournalTrans::findRecId(_sKS_CC_CustPaymTable.RefRecId, false);
                    _creditCardAuthTrans.SKS_CC_JournalNum = ledgerJournalTrans.JournalNum;
                    break;
                case tableNum(SalesTable):
                    _creditCardAuthTrans.SalesId = SalesTable::findRecId(_sKS_CC_CustPaymTable.RefRecId).SalesId;
                    break;
                case tableNum(SMAServiceOrderTable):
                    serviceOrderTable = SMAServiceOrderTable::sKS_CC_FindRecId(_sKS_CC_CustPaymTable.RefRecId, false);
                    _creditCardAuthTrans.SKS_CC_ServiceOrderId = serviceOrderTable.ServiceOrderId;

                    if (_creditCardAuthTrans.ApprovalType == CreditCardOperation::AuthorizeAndCapture ||
                        _creditCardAuthTrans.ApprovalType == CreditCardOperation::CaptureAfterAuthorize ||
                        _creditCardAuthTrans.ApprovalType == CreditCardOperation::Refund)
                    {
                        if (_creditCardAuthTrans.SalesInvoiceId)
                        {
                            _creditCardAuthTrans.SKS_CC_ProjInvoiceId = _creditCardAuthTrans.SalesInvoiceId;
                            _creditCardAuthTrans.SalesInvoiceId = '';
                        }
                        else
                        {
                            select ProjInvoiceId from projInvoiceJour
                                order by ProjInvoiceId desc
                                where projInvoiceJour.SKS_CC_ServiceOrderId == serviceOrderTable.ServiceOrderId;

                            if (projInvoiceJour)
                            {
                                _creditCardAuthTrans.SKS_CC_ProjInvoiceId = projInvoiceJour.ProjInvoiceId;
                            }
                        }
                    }

                    if (_creditCardAuthTransOrig)
                    {
                        _sKS_CC_CustPaymTable.CreditCardTransTypeOrig = _sKS_CC_CustPaymTable.CreditCardTransType;
                        _sKS_CC_CustPaymTable.CreditCardTransStatusOrig = _sKS_CC_CustPaymTable.CreditCardTransStatus;
                        _sKS_CC_CustPaymTable.ApprovedDateTimeOrig = _sKS_CC_CustPaymTable.ApprovedDateTime;
                        _sKS_CC_CustPaymTable.AuthorizationCodeOrig = _sKS_CC_CustPaymTable.AuthorizationCode;
                        _sKS_CC_CustPaymTable.ApprovalCodeOrig = _sKS_CC_CustPaymTable.ApprovalCode;
                        _sKS_CC_CustPaymTable.CreditCardTransAmountCurOrig = _sKS_CC_CustPaymTable.CreditCardTransAmountCur;

                        if (_creditCardAuthTrans.ApprovalType == CreditCardOperation::AuthorizeAndCapture ||
                            _creditCardAuthTrans.ApprovalType == CreditCardOperation::CaptureAfterAuthorize)
                        {
                            _sKS_CC_CustPaymTable.CreditCardTransType = SKS_CC_CreditCardTransType::Capture;
                            if (_sKS_CC_CustPaymTable.ApprovalVoid == NoYes::Yes &&
                                _creditCardAuthTrans.ProcessorStatus == CreditCardProcessorStatus::Approved)
                            {
                                _sKS_CC_CustPaymTable.ApprovalVoid = NoYes::No;
                            }
                        }

                        _sKS_CC_CustPaymTable.CreditCardTransStatus = _creditCardAuthTrans.ProcessorStatus;
                        _sKS_CC_CustPaymTable.ApprovedDateTime = _creditCardAuthTrans.ApprovedDateTime;
                        _sKS_CC_CustPaymTable.AuthorizationCode = _creditCardAuthTrans.Authorization;
                        _sKS_CC_CustPaymTable.ApprovalCode = _creditCardAuthTrans.SKS_CC_ApprovalCode;
                        _sKS_CC_CustPaymTable.CreditCardTransAmountCur = _creditCardAuthTrans.ApprovalAmountCur;
                        _sKS_CC_CustPaymTable.update();
                    }
                    else
                    {
                        if (_creditCardAuthTrans.ApprovalType == CreditCardOperation::AuthorizeAndCapture ||
                            _creditCardAuthTrans.ApprovalType == CreditCardOperation::CaptureAfterAuthorize)
                        {
                            _sKS_CC_CustPaymTable.CreditCardTransTypeOrig = _sKS_CC_CustPaymTable.CreditCardTransType;
                            _sKS_CC_CustPaymTable.CreditCardTransType = SKS_CC_CreditCardTransType::Capture;
                            _sKS_CC_CustPaymTable.CreditCardTransStatusOrig = _sKS_CC_CustPaymTable.CreditCardTransStatus;
                            _sKS_CC_CustPaymTable.ApprovedDateTimeOrig = _sKS_CC_CustPaymTable.ApprovedDateTime;
                            _sKS_CC_CustPaymTable.AuthorizationCodeOrig = _sKS_CC_CustPaymTable.AuthorizationCode;
                            _sKS_CC_CustPaymTable.ApprovalCodeOrig = _sKS_CC_CustPaymTable.ApprovalCode;
                            _sKS_CC_CustPaymTable.CreditCardTransAmountCurOrig = _sKS_CC_CustPaymTable.CreditCardTransAmountCur;

                            if (_sKS_CC_CustPaymTable.ApprovalVoid == NoYes::Yes &&
                                _creditCardAuthTrans.ProcessorStatus == CreditCardProcessorStatus::Approved)
                            {
                                _sKS_CC_CustPaymTable.ApprovalVoid = NoYes::No;
                            }
                        }
                        _sKS_CC_CustPaymTable.CreditCardTransStatus = _creditCardAuthTrans.ProcessorStatus;
                        _sKS_CC_CustPaymTable.ApprovedDateTime = _creditCardAuthTrans.ApprovedDateTime;
                        _sKS_CC_CustPaymTable.AuthorizationCode = _creditCardAuthTrans.Authorization;
                        _sKS_CC_CustPaymTable.ApprovalCode = _creditCardAuthTrans.SKS_CC_ApprovalCode;
                        _sKS_CC_CustPaymTable.CreditCardTransAmountCur = _creditCardAuthTrans.ApprovalAmountCur;
                        _sKS_CC_CustPaymTable.update();
                    }
                    break;
                case tableNum(ProjProposalJour):
                    if (_creditCardAuthTrans.SalesInvoiceId)
                    {
                        _creditCardAuthTrans.SKS_CC_ProjInvoiceId = _creditCardAuthTrans.SalesInvoiceId;
                        _creditCardAuthTrans.SalesInvoiceId = '';
                    }
                    else
                    {
                        projProposalJour = ProjProposalJour::findRecid(_sKS_CC_CustPaymTable.RefRecId);
                        _creditCardAuthTrans.SKS_CC_ProjInvoiceId = projProposalJour.ProjInvoiceId;
                    }

                    _sKS_CC_CustPaymTable.CreditCardTransStatus = _creditCardAuthTrans.ProcessorStatus;
                    _sKS_CC_CustPaymTable.ApprovedDateTime = _creditCardAuthTrans.ApprovedDateTime;
                    _sKS_CC_CustPaymTable.AuthorizationCode = _creditCardAuthTrans.Authorization;
                    _sKS_CC_CustPaymTable.ApprovalCode = _creditCardAuthTrans.SKS_CC_ApprovalCode;
                    _sKS_CC_CustPaymTable.CreditCardTransAmountCur = _creditCardAuthTrans.ApprovalAmountCur;
                    _sKS_CC_CustPaymTable.update();
                    break;
                default:
                    throw error(Error::wrongUseOfFunction(funcName()));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sKS_CC_InitCreditCardAuthTrans</Name>
				<Source><![CDATA[
    private static void sKS_CC_InitCreditCardAuthTrans(CreditCardAuthTrans _creditCardAuthTrans, CreditCardOperation _operation, CreditCardProcessorsId _processor, CreditCardApprovalRejectReason _description, boolean _succeeded, str _cardTokenRequest)
    {
        _creditCardAuthTrans.clear();
        _creditCardAuthTrans.initValue();
        _creditCardAuthTrans.ApprovalExpired = false;
        _creditCardAuthTrans.ApprovalVoid = false;
        _creditCardAuthTrans.ApprovedDateTime = DateTimeUtil::getSystemDateTime();
        _creditCardAuthTrans.ApprovalType = _operation;
        _creditCardAuthTrans.Description = _description;
        _creditCardAuthTrans.ProcessorStatus = _succeeded ? CreditCardProcessorStatus::Approved : CreditCardProcessorStatus::Declined;
        _creditCardAuthTrans.CardTokenRequest = _cardTokenRequest;
        _creditCardAuthTrans.CreditCardProcessors = _processor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sKS_CC_InitFromCreditCardProviderResult</Name>
				<Source><![CDATA[
    private static void sKS_CC_InitFromCreditCardProviderResult(CreditCardAuthTrans _creditCardAuthTrans, CreditCardProviderResult _creditCardProviderResult)
    {
        AmountCur getRequestAmount(CreditCardPaymentCardToken _token)
        {
            var property = CreditCardPaymentProperties::fromXmlString(_token).find(RetailConst.GenericNamespace::get_TransactionData(), RetailConst.TransactionDataProperties::get_Amount());

            return property ? property.parmDecimalValue() : 0;
        }

        if (_creditCardProviderResult)
        {
            _creditCardAuthTrans.AddressVerificationResult = _creditCardProviderResult.parmAvsResult();
            _creditCardAuthTrans.ApprovalAmountCur = _creditCardProviderResult.parmTransactionAmount();
            // Amount is zero on failure, see if we can get it from the request
            if (_creditCardAuthTrans.ApprovalAmountCur == 0 && _creditCardAuthTrans.CardTokenRequest)
            {
                _creditCardAuthTrans.ApprovalAmountCur = getRequestAmount(_creditCardAuthTrans.CardTokenRequest);
            }

            SKS_PP_Setup sKS_PP_SetupParmLocal = SKS_PP_Setup::find();
            if (sKS_PP_SetupParmLocal.ModCC == NoYes::No)
            {
                _creditCardAuthTrans.Authorization = _creditCardProviderResult.parmAuthorization();
            }
            else
            {
                const str constAuthCodeParm = 'AuthCodeParm';
                boolean usePFTransIdForAuthCode = true;                   
                
                CreditCardPaymentProperties sKS_CC_PropertiesLocal = _creditCardProviderResult.parmProperties();
                CreditCardPaymentProperty sKS_CC_PropertyLocal;
                sKS_CC_PropertyLocal = sKS_CC_PropertiesLocal.find(RetailConst.GenericNamespace::get_TransactionData(), constAuthCodeParm);
                if (sKS_CC_PropertyLocal && sKS_CC_PropertyLocal.parmStringValue())
                {
                    if (sKS_CC_PropertyLocal.parmStringValue() == 'OriginationId')
                    {
                        usePFTransIdForAuthCode = false;
                    }
                }
                
                if (usePFTransIdForAuthCode)
                {
                    _creditCardAuthTrans.Authorization = _creditCardProviderResult.parmSKS_CC_Authorization();
                    _creditCardAuthTrans.SKS_CC_ApprovalCode = _creditCardProviderResult.parmSKS_CC_ApprovalCode();                    
                }
                else
                {
                    _creditCardAuthTrans.Authorization = _creditCardProviderResult.parmSKS_CC_ApprovalCode();
                    _creditCardAuthTrans.SKS_CC_ApprovalCode = _creditCardProviderResult.parmSKS_CC_Authorization();                    
                }
                // Update parmAuthorization to allow sales order to be processed correctly
                _creditCardProviderResult.parmAuthorization(_creditCardAuthTrans.Authorization);

                const str constPFGatewayAuthCode = 'PFGatewayAuthCode';
                sKS_CC_PropertyLocal = sKS_CC_PropertiesLocal.find(RetailConst.GenericNamespace::get_TransactionData(), constPFGatewayAuthCode);
                if (sKS_CC_PropertyLocal && sKS_CC_PropertyLocal.parmStringValue())
                {
                    _creditCardAuthTrans.SKS_CC_AuthCode = sKS_CC_PropertyLocal.parmStringValue(); 
                }
                
            }

            _creditCardAuthTrans.CardTokenResult = _creditCardProviderResult.parmProperties().toXmlString();
            _creditCardAuthTrans.CreditCardNumber = _creditCardProviderResult.parmCreditCardNumber();
            _creditCardAuthTrans.CreditCardTypeName = _creditCardProviderResult.parmCreditCardTypeName();
            _creditCardAuthTrans.cvcResult = _creditCardProviderResult.parmCvcResult();
            _creditCardAuthTrans.UniqueCardId = _creditCardProviderResult.parmCreditCardUniqueCardId();            
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sKS_CC_InitFromSalesTable</Name>
				<Source><![CDATA[
    private static void sKS_CC_InitFromSalesTable(CreditCardAuthTrans _creditCardAuthTrans, SalesTable _salesTable)
    {
        if (_salesTable)
        {
            _creditCardAuthTrans.CurrencyCode = _salesTable.CurrencyCode;
            _creditCardAuthTrans.SalesId = _salesTable.SalesId;
            _creditCardAuthTrans.LineNum = CreditCardAuthTrans::lastLineNum(_salesTable.SalesId) + 1;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sKS_CC_McrInitFromCustPaymTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the reference on the <c>CreditCardAuthTrans</c> to the payment record.
    /// </summary>
    /// <param name="_creditCardAuthTrans">
    /// The <c>CreditCardAuthTrans</c> buffer to set.
    /// </param>
    /// <param name="_mcrCustPaymTable">
    /// The payment record to be used in initialization.
    /// </param>
    private static void sKS_CC_McrInitFromCustPaymTable(CreditCardAuthTrans _creditCardAuthTrans,
                                                        MCRCustPaymTable _mcrCustPaymTable)
    {
        CustInvoiceTable custInvoiceTable;
        LedgerJournalTrans ledgerJournalTrans;
        CustPaymSched custPaymSched;

        if (_mcrCustPaymTable)
        {
            _creditCardAuthTrans.MCRPaymRecId = _mcrCustPaymTable.RecId;
            _creditCardAuthTrans.CurrencyCode = _mcrCustPaymTable.CurrencyCode;
            switch (_mcrCustPaymTable.RefTableId)
            {
                case tableNum(CustInvoiceTable):
                    custInvoiceTable = CustInvoiceTable::findRecId(_mcrCustPaymTable.RefRecId);
                    _creditCardAuthTrans.MCRInvoiceId = custInvoiceTable.InvoiceId;
                    break;
                case tableNum(LedgerJournalTrans):
                    ledgerJournalTrans = LedgerJournalTrans::findRecId(_mcrCustPaymTable.RefRecId, false);
                    _creditCardAuthTrans.MCRJournalNum = ledgerJournalTrans.JournalNum;
                    break;
                case tableNum(SalesTable):
                    _creditCardAuthTrans.SalesId = SalesTable::findRecId(_mcrCustPaymTable.RefRecId).SalesId;
                    break;
                case tableNum(CustPaymSchedLine):
                    custPaymSched = CustPaymSched::mcrFindRecID(_mcrCustPaymTable.RefRecId);
                    _creditCardAuthTrans.MCRCustPaymSchedName = CustPaymSched.Name;
                    break;
                default:
                    throw error(Error::wrongUseOfFunction(funcName()));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sKS_CC_SetApprovalVoidOnVoidFailure</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets ApprovalVoid field on <c>CreditCardAuthTrans</c> record
    ///    when authorization void fails at Payment Processor.
    /// </summary>
    /// <param name="_salesTable">
    ///    The <c>_salesTable</c> record related to the voided authorization transaction.
    /// </param>
    public static void sKS_CC_SetApprovalVoidOnVoidFailure(SalesTable _salesTable)
    {
        CreditCardAuthTrans creditCardAuthTrans, creditCardAuthTransVoid;
        CreditCardPaymentProperties requestProperties;
        CreditCardPaymentProperty property;
        str voidFailure, description;

        if (!_salesTable.SalesId)
        {
            return;
        }

        select creditCardAuthTransVoid
        order by RecId desc
        where creditCardAuthTransVoid.SalesId == _salesTable.SalesId
            && creditCardAuthTransVoid.ApprovalType == CreditCardOperation::Void
            && creditCardAuthTransVoid.ProcessorStatus == CreditCardProcessorStatus::Approved;

        if (!creditCardAuthTransVoid.CardTokenResult)
        {
            return;
        }

        requestProperties = CreditCardPaymentProperties::fromXmlString(creditCardAuthTransVoid.CardTokenResult);
        if (requestProperties)
        {
            property = requestProperties.find(Microsoft.Dynamics.Retail.PaymentSDK.Portable.Constants.GenericNamespace::get_VoidResponse(),
                                            'PayFabricVoidFailed');

            if (property)
            {
                voidFailure = property.parmStringValue();
            }
        }

        if (voidFailure == 'Y')
        {
            select firstOnly1 creditCardAuthTrans
            where creditCardAuthTrans.SalesId == _salesTable.SalesId
                && creditCardAuthTrans.ApprovalType == CreditCardOperation::Authorize
                && !creditCardAuthTrans.ApprovalExpired
                && !creditCardAuthTrans.ApprovalVoid
                && creditCardAuthTrans.ProcessorStatus == CreditCardProcessorStatus::Approved;

            if (creditCardAuthTrans.RecId)
            {
                property = requestProperties.find(Microsoft.Dynamics.Retail.PaymentSDK.Portable.Constants.GenericNamespace::get_VoidResponse(),
                                                  Microsoft.Dynamics.Retail.PaymentSDK.Portable.Constants.VoidResponseProperties::get_ProviderMessage());

                if (property)
                {
                    description = property.parmStringValue();
                }

                if (description)
                {
                    creditCardAuthTransVoid.selectForUpdate(true);
                    ttsbegin;
                    creditCardAuthTransVoid.Description = description;
                    creditCardAuthTransVoid.doUpdate();
                    ttscommit;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sKS_CC_updateLedgerJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the ledger journal line table.
    /// </summary>
    /// <param name="_ledgerJournalTransRefRecId">
    ///    The <c>RecId</c> of a <c>LedgerJournalTrans</c> record.
    /// </param>
    /// <param name="_creditCardProviderResult">
    ///    The result of a credit card operation.
    /// </param>
    /// <param name="_success">
    ///    True if the credit card operation was successful.
    /// </param>
    /// <returns>
    ///    true if the journal line table is updated successfully; otherwise, false.
    /// </returns>
    public static boolean sKS_CC_updateLedgerJournalTrans(LedgerJournalTransRefRecId _ledgerJournalTransRefRecId, CreditCardProviderResult _creditCardProviderResult, boolean _success)
    {
        LedgerJournalTrans  ledgerJournalTrans;
        AmountCur amtToCharge, amtCharged, amtRemToCharge;
        UserConnection connection = new UserConnection();
        boolean processSuceeded;
        
        if (_creditCardProviderResult)
        {
            processSuceeded = _creditCardProviderResult.parmResultOK();
        }
        else
        {
            processSuceeded = _success;
        }

        ledgerJournalTrans.setConnection(connection);

        connection.ttsbegin();

        ledgerJournalTrans = LedgerJournalTrans::findRecId(_ledgerJournalTransRefRecId, true);
        if (ledgerJournalTrans)
        {
            if (_success && processSuceeded)
            {
                amtToCharge = SKS_CC_CustPaymTable::getCreditCardAmountToCharge(ledgerJournalTrans.TableId, ledgerJournalTrans.RecId);
                amtCharged = SKS_CC_CustPaymTable::getCreditCardAmountCharged(ledgerJournalTrans.TableId, ledgerJournalTrans.RecId);
                amtRemToCharge = abs(amtToCharge) - abs(amtCharged);
                if (amtRemToCharge <= 0)
                {
                    ledgerJournalTrans.PaymentStatus = CustVendPaymStatus::Confirmed;
                    if (_creditCardProviderResult)
                    {
                        ledgerJournalTrans.PaymReference = _creditCardProviderResult.parmAuthorization();
                    }
                    else
                    {
                        SKS_CC_CustPaymTable ccPaymTable = SKS_CC_CustPaymTable::findApprovedCreditCardPayments(ledgerJournalTrans.TableId, ledgerJournalTrans.RecId);
                        if (ccPaymTable)
                        {
                            ledgerJournalTrans.PaymReference = ccPaymTable.AuthorizationCode;
                        }                        
                    }
                    ledgerJournalTrans.update();
                }
            }
        }

        connection.ttscommit();

        return ledgerJournalTrans.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sKS_CC_recordCapture</Name>
				<Source><![CDATA[
    /// <summary>
    /// Stores the results of a credit card capture request.
    /// </summary>
    /// <param name="_result">
    /// The result properties of the operation.
    /// </param>
    /// <param name="_salesTable">
    /// The sales order which uses a credit card for payment.
    /// </param>
    /// <param name="_invoiceId">
    /// The invpoice number of the sales order.
    /// </param>
    /// <param name="_processor">
    /// The processor of the credit card.
    /// </param>
    /// <param name="_AuthorizeAndCaptureTogether">
    /// true of both the authorize and capture operations occured together; otherwise, false.
    /// </param>
    /// <param name="_succeeded">
    /// true if the request was successful; otherwise, false.
    /// </param>
    /// <param name="_description">
    /// Describes the outcome of the request.
    /// </param>
    /// <param name="_cardTokenRequest">
    /// The request parameters.
    /// </param>
    /// <param name="_skipUpdate">
    /// If true, updating the <c>SalesTable</c> and authorization record in the <c>CreditCardAuthTrans</c> tables will not occur.
    /// </param>    
    /// <param name="_mcrCustPaymTable">
    /// The <c>MCRCustPaymTable</c> record if present; otherwise, null.
    /// </param>
    /// <param name="_sKS_CC_CustPaymTable">
    /// The credit card customer payment reference record if present; otherwise, null.
    /// </param>
    /// <returns>
    /// The newly added credit card history record.
    /// </returns>
    public static CreditCardAuthTrans sKS_CC_recordCapture(CreditCardProviderResult _result,
                                                SalesTable _salesTable,
                                                SalesInvoiceId _invoiceId,
                                                CreditCardProcessorsId _processor,
                                                boolean _AuthorizeAndCaptureTogether,
                                                boolean _succeeded,
                                                CreditCardApprovalRejectReason _description,
                                                str _cardTokenRequest = '',
                                                boolean _skipUpdate = false,
                                                MCRCustPaymTable _mcrCustPaymTable = null,
                                                SKS_CC_CustPaymTable _sKS_CC_CustPaymTable = null)
                                                
    {
        //SKS-Begin
        CreditCardAuthTrans creditCardAuthTransAuthorized;
        CreditCardAuthTrans creditCardAuthTrans;
        CreditCardPaymentProperties requestProperties;
        CreditCardPaymentProperty property;
        UserConnection connection  = new UserConnection();
        SKS_CC_CustPaymTable sKS_CC_CustPaymTableLocal;

        if (_salesTable.SalesId)
        {
            creditCardAuthTransAuthorized = CreditCardAuthTrans::findValidPreApproval(_salesTable.SalesId);
        }
        else
        {
            if (_sKS_CC_CustPaymTable && _sKS_CC_CustPaymTable.RefTableId == tableNum(SMAServiceOrderTable))
            {
                creditCardAuthTransAuthorized = CreditCardAuthTrans::sKS_CC_FindValidPreApproval(_sKS_CC_CustPaymTable.RecId);
            }
        }        

        creditCardAuthTrans.setConnection(connection);

        connection.ttsbegin();

        CreditCard::sKS_CC_InitCreditCardAuthTrans(creditCardAuthTrans, _AuthorizeAndCaptureTogether ? CreditCardOperation::AuthorizeAndCapture : CreditCardOperation::CaptureAfterAuthorize, _processor, _description, _succeeded, _cardTokenRequest);
        CreditCard::sKS_CC_InitFromCreditCardProviderResult(creditCardAuthTrans, _result);
        CreditCard::sKS_CC_InitFromSalesTable(creditCardAuthTrans, _salesTable);

        if (_mcrCustPaymTable)
        {
            CreditCard::sKS_CC_McrInitFromCustPaymTable(creditCardAuthTrans, _mcrCustPaymTable);
        }

        creditCardAuthTrans.RefundStatus = CreditCardRefundStatus::None;
        creditCardAuthTrans.SalesInvoiceId = _invoiceId;
        
        //SKS-Begin
        if (creditCardAuthTrans.SalesInvoiceId)
        {
            CustInvoiceJour custInvoiceJourSKS;
            select firstonly1 RecId from custInvoiceJourSKS
                where custInvoiceJourSKS.InvoiceId == creditCardAuthTrans.SalesInvoiceId;

            if (custInvoiceJourSKS.RecId)
            {
                creditCardAuthTrans.SKS_CC_CustInvoceJourRecId = custInvoiceJourSKS.RecId;
            }
        }

        if (_sKS_CC_CustPaymTable)
        {
            if (_sKS_CC_CustPaymTable.RefTableId == tableNum(LedgerJournalTrans))
            {
                // LedgerJournalTrans type of related records are updated in the SKS_CC_ProcessCapture class
                CreditCard::sKS_CC_InitFromCustPaymTable(creditCardAuthTrans, _sKS_CC_CustPaymTable);
            }
            else
            {
                sKS_CC_CustPaymTableLocal = SKS_CC_CustPaymTable::findByRecID(_sKS_CC_CustPaymTable.RecId, true);
                if (sKS_CC_CustPaymTableLocal)
                {
                    sKS_CC_CustPaymTableLocal.setConnection(connection);
                    if (sKS_CC_CustPaymTableLocal.RefTableId == tableNum(SMAServiceOrderTable) && creditCardAuthTransAuthorized)
                    {
                        CreditCard::sKS_CC_InitFromCustPaymTable(creditCardAuthTrans, sKS_CC_CustPaymTableLocal, creditCardAuthTransAuthorized);
                    }
                    else
                    {
                        CreditCard::sKS_CC_InitFromCustPaymTable(creditCardAuthTrans, sKS_CC_CustPaymTableLocal);
                    }
                }
            }
        }
        //SKS-End

        // If no result or missing card number or type, get it from the request
        if(_cardTokenRequest && (!creditCardAuthTrans.CreditCardNumber || !creditCardAuthTrans.CreditCardTypeName))
        {
            requestProperties = CreditCardPaymentProperties::fromXmlString(_cardTokenRequest);
            if (!creditCardAuthTrans.CreditCardNumber)
            {
                property = requestProperties.find(Retail.PaymentSDK.Portable.Constants.GenericNamespace::get_AuthorizationResponse(), Retail.PaymentSDK.Portable.Constants.AuthorizationResponseProperties::get_Last4Digits());
                creditCardAuthTrans.CreditCardNumber = property ? property.parmStringValue() : '';
            }

            if (!creditCardAuthTrans.CreditCardTypeName)
            {
                property = requestProperties.find(Retail.PaymentSDK.Portable.Constants.GenericNamespace::get_AuthorizationResponse(), Retail.PaymentSDK.Portable.Constants.AuthorizationResponseProperties::get_CardType());
                creditCardAuthTrans.CreditCardTypeName = property ? property.parmStringValue() : '';
            }
        }

        creditCardAuthTrans.insert();

        connection.ttscommit();

        if (!_skipUpdate)
        {
            //SKS_Begin
            if(_succeeded && creditCardAuthTransAuthorized)
            {
                if (creditCardAuthTrans.SKS_CC_ProjInvoiceId)
                {
                    CreditCardAuthTrans::SKS_CC_SettlePreapprovalTransaction(creditCardAuthTransAuthorized.RecId, '', creditCardAuthTrans.SKS_CC_ProjInvoiceId);
                }
                else
                {
                    CreditCardAuthTrans::SKS_CC_SettlePreapprovalTransaction(creditCardAuthTransAuthorized.RecId, _invoiceId);
                }
            }

            if (_sKS_CC_CustPaymTable)
            {
                if (_sKS_CC_CustPaymTable.RefTableId == tableNum(LedgerJournalTrans))
                {
                    CreditCard::sKS_CC_updateLedgerJournalTrans(_sKS_CC_CustPaymTable.RefRecId, _result, _succeeded);
                }
            }
            //SKS-End               
        }

        return creditCardAuthTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sKS_CC_recordRefund</Name>
				<Source><![CDATA[
    /// <summary>
    /// Stores the results of a credit card refund request.
    /// </summary>
    /// <param name="_result">
    /// The result properties of the operation.
    /// </param>
    /// <param name="_salesTable">
    /// The sales order which uses a credit card for payment.
    /// </param>
    /// <param name="_processor">
    /// The processor of the credit card.
    /// </param>
    /// <param name="_succeeded">
    /// true if the request was successful; otherwise, false.
    /// </param>
    /// <param name="_description">
    /// Describes the outcome of the request.
    /// </param>
    /// <param name="_cardTokenRequest">
    /// The request parameters.
    /// </param>
    /// <param name="_skipUpdate">
    /// If true, updating the <c>SalesTable</c> and <c>CreditCardAuthTrans</c> tables will not occur.
    /// <param name="_mcrCustPaymTable">
    /// The <c>MCRCustPaymTable</c> record if present; otherwise, null.
    /// </param>
    /// <param name="_sKS_CC_CustPaymTable">
    /// The credit card customer payment reference record if present; otherwise, null.
    /// </param>
    /// /// <param name="_invoiceId">
    /// The invpoice number of the sales order.
    /// </param>
    /// <returns>
    /// The newly added credit card history record.
    /// </returns>
    public static void sKS_CC_recordRefund(
        CreditCardProviderResult _result,
        SalesTable _salesTable,
        CreditCardProcessorsId _processor,
        boolean _succeeded,
        CreditCardApprovalRejectReason _description,
        str _cardTokenRequest = '',
        boolean _skipUpdate = false,
        MCRCustPaymTable _mcrCustPaymTable = null,
        SKS_CC_CustPaymTable _sKS_CC_CustPaymTable = null,
        SalesInvoiceId _invoiceId = '')
    {
        var creditCardAuthTransRefunded = CreditCardAuthTrans::findRefundCharge(_salesTable.SalesId);
        CreditCardAuthTrans creditCardAuthTrans;
        SKS_CC_CustPaymTable sKS_CC_CustPaymTableLocal;
        UserConnection connection = new UserConnection();

        try
        {
            creditCardAuthTrans.setConnection(connection);

            connection.ttsbegin();

            CreditCard::sKS_CC_InitCreditCardAuthTrans(creditCardAuthTrans, CreditCardOperation::Refund, _processor, _description, _succeeded, _cardTokenRequest);            
            CreditCard::sKS_CC_InitFromCreditCardProviderResult(creditCardAuthTrans, _result);
            CreditCard::sKS_CC_InitFromSalesTable(creditCardAuthTrans, _salesTable);

            if (_mcrCustPaymTable)
            {
                CreditCard::sKS_CC_McrInitFromCustPaymTable(creditCardAuthTrans, _mcrCustPaymTable);
            }

            creditCardAuthTrans.RefundStatus = CreditCardRefundStatus::Processed;
            creditCardAuthTrans.SalesInvoiceId = _invoiceId;

            if (creditCardAuthTrans.SalesInvoiceId)
            {
                CustInvoiceJour custInvoiceJourSKS;
                select firstonly1 RecId from custInvoiceJourSKS
                    where custInvoiceJourSKS.InvoiceId == creditCardAuthTrans.SalesInvoiceId;

                if (custInvoiceJourSKS.RecId)
                {
                    creditCardAuthTrans.SKS_CC_CustInvoceJourRecId = custInvoiceJourSKS.RecId;
                }
            }

            if (_sKS_CC_CustPaymTable)
            {
                if (_sKS_CC_CustPaymTable.RefTableId == tableNum(LedgerJournalTrans))
                {
                    // LedgerJournalTrans type of related records are updated in the SKS_CC_ProcessCapture class
                    CreditCard::sKS_CC_InitFromCustPaymTable(creditCardAuthTrans, _sKS_CC_CustPaymTable);
                }
                else
                {
                    sKS_CC_CustPaymTableLocal = SKS_CC_CustPaymTable::findByRecID(_sKS_CC_CustPaymTable.RecId, true);
                    if (sKS_CC_CustPaymTableLocal)
                    {
                        sKS_CC_CustPaymTableLocal.setConnection(connection);
                        CreditCard::sKS_CC_InitFromCustPaymTable(creditCardAuthTrans, sKS_CC_CustPaymTableLocal);
                    }
                }
            }

            // If missing card number or type, get it from the request
            if (_cardTokenRequest && (!creditCardAuthTrans.CreditCardNumber || !creditCardAuthTrans.CreditCardTypeName))
            {
                var requestProperties = CreditCardPaymentProperties::fromXmlString(_cardTokenRequest);
                if (!creditCardAuthTrans.CreditCardNumber)
                {
                    var property = requestProperties.find(RetailConst.GenericNamespace::get_CaptureResponse(), RetailConst.CaptureResponseProperties::get_Last4Digits());
                    creditCardAuthTrans.CreditCardNumber = property ? property.parmStringValue() : '';
                }

                if (!creditCardAuthTrans.CreditCardTypeName)
                {
                    var property = requestProperties.find(RetailConst.GenericNamespace::get_CaptureResponse(), RetailConst.CaptureResponseProperties::get_CardType());
                    creditCardAuthTrans.CreditCardTypeName = property ? property.parmStringValue() : '';
                }
            }

            creditCardAuthTrans.insert();

            connection.ttscommit();            

            if (!_skipUpdate)
            { 
                if (_succeeded && creditCardAuthTransRefunded)
                {
                    CreditCardAuthTrans::markRefundProcessed(creditCardAuthTransRefunded.RecId);
                }
                
                if (_salesTable)
                {
                    CreditCard::updateSalesTable(_salesTable.RecId, _result, _succeeded);
                }
                else if (_sKS_CC_CustPaymTable)
                {
                    if (_sKS_CC_CustPaymTable.RefTableId == tableNum(LedgerJournalTrans))
                    {
                        CreditCard::sKS_CC_updateLedgerJournalTrans(_sKS_CC_CustPaymTable.RefRecId, _result, _succeeded);
                    }
                }                
            }
        }
        finally
        {
            connection.finalize();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sKS_CC_RecordVoid</Name>
				<Source><![CDATA[
    /// <summary>
    /// Stores the results of a credit card void request.
    /// </summary>
    /// <param name="_result">
    /// The result properties of the operation.
    /// </param>
    /// <param name="_salesTable">
    /// The sales order which uses a credit card for payment.
    /// </param>
    /// <param name="_processor">
    /// The processor of the credit card.
    /// </param>
    /// <param name="_succeeded">
    /// true if the request was successful; otherwise, false.
    /// </param>
    /// <param name="_description">
    /// Describes the outcome of the request.
    /// </param>
    /// <param name="_cardTokenRequest">
    /// The request parameters.
    /// </param>
    /// <param name="_skipUpdate">
    /// If true, updating the <c>SalesTable</c> and authorization record in the <c>CreditCardAuthTrans</c> tables will not occur.
    /// </param>
    /// <param name="_mcrCustPaymTable">
    /// The <c>MCRCustPaymTable</c> record if present; otherwise, null.
    /// </param>    
    /// <param name="_isVoidCapture">
    /// Used to indicate that the method is called as a void of a capture/refund transaction.
    /// </param>
    /// <param name="_creditCardAuthTransVoidedSKS">
    /// Used to indicate a capture/refund transaction to void.
    /// </param>
    /// <returns>
    /// The newly added credit card history record.
    /// </returns>
    public static void sKS_CC_RecordVoid(
        CreditCardProviderResult _result,
        SalesTable _salesTable,
        CreditCardProcessorsId _processor,
        boolean _succeeded,
        CreditCardApprovalRejectReason _description,
        str _cardTokenRequest = '',
        boolean _skipUpdate = false,
        MCRCustPaymTable _mcrCustPaymTable = null,
        boolean _isVoidCapture = false,
        CreditCardAuthTrans _creditCardAuthTransVoidedSKS = null)        
    {
        CreditCardAuthTrans creditCardAuthTransVoided;
        CreditCardAuthTrans creditCardAuthTrans;
        UserConnection connection = new UserConnection();

        try
        {
            creditCardAuthTrans.setConnection(connection);

            connection.ttsbegin();

            CreditCard::sKS_CC_InitCreditCardAuthTrans(creditCardAuthTrans, CreditCardOperation::Void, _processor, _description, _succeeded, _cardTokenRequest);
            CreditCard::sKS_CC_InitFromCreditCardProviderResult(creditCardAuthTrans, _result);

            if (isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)) && _mcrCustPaymTable)
            {
                CreditCard::sKS_CC_McrInitFromCustPaymTable(creditCardAuthTrans, _mcrCustPaymTable);
            }

            creditCardAuthTrans.RefundStatus = CreditCardRefundStatus::None;
            
            if (_isVoidCapture)
            {
                creditCardAuthTransVoided = _creditCardAuthTransVoidedSKS;
                creditCardAuthTrans.CurrencyCode = _creditCardAuthTransVoidedSKS.CurrencyCode;
                creditCardAuthTrans.SalesId = creditCardAuthTransVoided.SalesId;
                creditCardAuthTrans.SKS_CC_JournalNum = creditCardAuthTransVoided.SKS_CC_JournalNum;
                creditCardAuthTrans.SKS_CC_CustPaymTable = creditCardAuthTransVoided.SKS_CC_CustPaymTable;

                if (creditCardAuthTrans.SalesId)
                {
                    creditCardAuthTrans.LineNum = CreditCardAuthTrans::lastLineNum(creditCardAuthTrans.SalesId) + 1;
                }
                else if (creditCardAuthTrans.SKS_CC_CustPaymTable)
                {
                    creditCardAuthTrans.LineNum = CreditCardAuthTrans::sKS_CC_lastLineNum(creditCardAuthTrans.SKS_CC_CustPaymTable) + 1;
                }
                else
                {
                    creditCardAuthTrans.LineNum = creditCardAuthTransVoided.LineNum + 1;
                }
            }
            else
            {
                if (_salesTable.RecId)
                {
                    creditCardAuthTransVoided = CreditCardAuthTrans::findValidPreApproval(_salesTable.SalesId);
                    CreditCard::sKS_CC_InitFromSalesTable(creditCardAuthTrans, _salesTable);
                }
            }            

            // If missing card number or type, get it from the request
            if (_cardTokenRequest && (!creditCardAuthTrans.CreditCardNumber || !creditCardAuthTrans.CreditCardTypeName))
            {
                var requestProperties = CreditCardPaymentProperties::fromXmlString(_cardTokenRequest);
                if (!creditCardAuthTrans.CreditCardNumber)
                {
                    var property = requestProperties.find(RetailConst.GenericNamespace::get_AuthorizationResponse(), RetailConst.AuthorizationResponseProperties::get_Last4Digits());
                    creditCardAuthTrans.CreditCardNumber = property ? property.parmStringValue() : '';
                }

                if (!creditCardAuthTrans.CreditCardTypeName)
                {
                    var property = requestProperties.find(RetailConst.GenericNamespace::get_AuthorizationResponse(), RetailConst.AuthorizationResponseProperties::get_CardType());
                    creditCardAuthTrans.CreditCardTypeName = property ? property.parmStringValue() : '';
                }
            }

            creditCardAuthTrans.insert();

            connection.ttscommit();
            
            if( !_skipUpdate || _isVoidCapture)
            {
                if (_salesTable.RecId && !_isVoidCapture)
                {
                    CreditCard::updateSalesTable(_salesTable.RecId, _result, _succeeded);
                }
            }

            if (_salesTable.RecId)
            {
                CreditCard::sKS_CC_SetApprovalVoidOnVoidFailure(_salesTable);
            }            
        }
        finally
        {
            connection.finalize();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sKS_CC_RecordAuthorization</Name>
				<Source><![CDATA[
    /// <summary>
    /// Stores the results of a credit card authorization request.
    /// </summary>
    /// <param name="_result">
    /// The result properties of the operation.
    /// </param>
    /// <param name="_salesTable">
    /// The sales order which uses a credit card for payment.
    /// </param>
    /// <param name="_processor">
    /// The processor of the credit card.
    /// </param>
    /// <param name="_succeeded">
    /// true if the request was successful; otherwise, false.
    /// </param>
    /// <param name="_description">
    /// Describes the outcome of the request.
    /// </param>
    /// <param name="_cardTokenRequest">
    /// The request parameters.
    /// </param>
    /// <param name="_skipUpdate">
    /// If true, updating the <c>SalesTable</c> table will not occur.
    /// </param>
    /// <param name="_mcrCustPaymTable">
    /// The <c>MCRCustPaymTable</c> record if present; otherwise, null.
    /// </param>
    /// <param name="_sKS_CC_CustPaymTable">
    /// The credit card customer payment reference record if present; otherwise, null.
    /// </param>
    /// <param name="_sKS_CC_CustConfirmJourDocNum">
    /// A sales order confirmation document number to link with this authorization.
    /// </param>
    /// <returns>
    /// The newly added credit card history record.
    /// </returns>
    public static void sKS_CC_RecordAuthorization(
        CreditCardProviderResult _result,
        SalesTable _salesTable,
        CreditCardProcessorsId _processor,
        boolean _succeeded,
        CreditCardApprovalRejectReason _description,
        str _cardTokenRequest = '',
        boolean _skipUpdate = false,
        MCRCustPaymTable _mcrCustPaymTable = null,
        SKS_CC_CustPaymTable _sKS_CC_CustPaymTable = null,
        CustConfirmDocNum _sKS_CC_CustConfirmJourDocNum = '')
    {
        CreditCardAuthTrans creditCardAuthTrans;        
        SKS_CC_CustPaymTable sKS_CC_CustPaymTableLocal;
        UserConnection connection = new UserConnection();

        try
        {
            creditCardAuthTrans.setConnection(connection);

            connection.ttsbegin();

            CreditCard::sKS_CC_InitCreditCardAuthTrans(creditCardAuthTrans, CreditCardOperation::Authorize, _processor, _description, _succeeded, _cardTokenRequest);
            CreditCard::sKS_CC_InitFromCreditCardProviderResult(creditCardAuthTrans, _result);
            CreditCard::sKS_CC_InitFromSalesTable(creditCardAuthTrans, _salesTable);

            if (_mcrCustPaymTable)
            {
                CreditCard::sKS_CC_McrInitFromCustPaymTable(creditCardAuthTrans, _mcrCustPaymTable);
            }

            creditCardAuthTrans.RefundStatus = CreditCardRefundStatus::None;

            if (_sKS_CC_CustPaymTable)
            {
                if (_sKS_CC_CustPaymTable.RefTableId == tableNum(SMAServiceOrderTable))
                {
                    sKS_CC_CustPaymTableLocal = SKS_CC_CustPaymTable::findByRecID(_sKS_CC_CustPaymTable.RecId, true);
                    if (sKS_CC_CustPaymTableLocal)
                    {
                        sKS_CC_CustPaymTableLocal.setConnection(connection);
                        CreditCard::sKS_CC_InitFromCustPaymTable(creditCardAuthTrans, sKS_CC_CustPaymTableLocal);
                    }
                }
                else
                {
                    CreditCard::sKS_CC_InitFromCustPaymTable(creditCardAuthTrans, _sKS_CC_CustPaymTable);
                }
            }

            if (_sKS_CC_CustConfirmJourDocNum)
            {
                creditCardAuthTrans.SKS_CC_CustConfirmJourDocNum = _sKS_CC_CustConfirmJourDocNum;
            } 

            if (_cardTokenRequest)
            {
                var requestProperties = CreditCardPaymentProperties::fromXmlString(_cardTokenRequest);
                if (!creditCardAuthTrans.CreditCardNumber)
                {
                    var property = requestProperties.find(RetailConst.GenericNamespace::get_PaymentCard(), RetailConst.PaymentCardProperties::get_Last4Digits());
                    creditCardAuthTrans.CreditCardNumber = property ? property.parmStringValue() : '';
                }

                if (!creditCardAuthTrans.CreditCardTypeName)
                {
                    var property = requestProperties.find(RetailConst.GenericNamespace::get_PaymentCard(), RetailConst.PaymentCardProperties::get_CardType());
                    creditCardAuthTrans.CreditCardTypeName = property ? property.parmStringValue() : '';
                }

                CreditCard::obscureCVV(requestProperties, creditCardAuthTrans);
            }

            creditCardAuthTrans.insert();

            connection.ttscommit();

            if (!_skipUpdate)
            {                
                if (_salesTable)
                {
                    CreditCard::updateSalesTable(_salesTable.RecId, _result, _succeeded);
                }
                else if (_sKS_CC_CustPaymTable)
                {
                    if (_sKS_CC_CustPaymTable.RefTableId == tableNum(LedgerJournalTrans))
                    {
                        CreditCard::sKS_CC_updateLedgerJournalTrans(_sKS_CC_CustPaymTable.RefRecId, _result, _succeeded);
                    }
                }                
            }
        }
        finally
        {
            connection.finalize();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>