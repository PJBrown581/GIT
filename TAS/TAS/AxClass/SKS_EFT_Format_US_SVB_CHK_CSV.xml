<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_US_SVB_CHK_CSV</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_US_SVB_CHK_CSV  extends SKS_EFT_Format
/// </summary>
class SKS_EFT_Format_US_SVB_CHK_CSV  extends SKS_EFT_Format
{
    #define.FormatVersion('20230110')
    #define.Separator(',')
    #define.DoubleQuote('"')

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    [SuppressBPWarningAttribute("BPCheckNestedLoopinCode","Necessary to allow the processing of every invoice(inner loop) for every relevant parent file detail record(outer loop)")]
    protected void formatStructure()
    {
        SKS_EFT_FileDetail  invSKS_EFT_FileDetail;

        //Header Record
        this.rec_Header();

        while(mSKS_EFT_FileDetail)
        {
            // Get SKS_EFT_FileFormatPaymSpec
            this.getSKS_EFT_FileFormatPaymSpec();

            // Get RemittanceAddress
            this.getRemittanceAddress((mSKS_EFT_FileFormatPaymSpec.UseCheckNumber || subStr(mSKS_EFT_FileDetail.PaymSpec, 1, 3) == 'CHK'));

            while select invSKS_EFT_FileDetail where invSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId       //SKS#DevOps:15576
            {
                //Payment Record
                this.rec_Payment(invSKS_EFT_FileDetail);
            }

            next mSKS_EFT_FileDetail;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Header</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_Header
    /// </summary>
    /// <returns>boolean</returns>
    public boolean rec_Header()
    {
        //  Account Number
        //  Payer name
        //  Payer Address 1
        //  Payer Address 2
        //  Payer Address 3
        //  Payer City
        //  Payer State
        //  Payer Zip
        //  Payer Country
        //  Payment Code
        //  Check Date
        //  Check Number
        //  Check Amount
        //  Payee/Vendor Name
        //  Payee/Vendor Number
        //  Payee Address 1
        //  Payee Address 2
        //  Payee Address 3
        //  Payee City
        //  Payee State
        //  Payee Zip
        //  Payee Country
        //  Mail Code
        //  Handling Code
        //  Invoice Number
        //  Invoice Date
        //  Invoice Description
        //  Invoice Discount
        //  Invoice Gross
        //  Invoice Net
        //  Total Invoice Gross
        //  Total Invoice Discount
        //  Total Invoice Net
        //----------------------------------------------------------------------
      
        System.Text.StringBuilder sb = new System.Text.StringBuilder();

        //  Account Number
        sb.Append(this.wrapField('Account Number'));

        //  Payer name
        sb.Append(this.wrapField('Payer name'));

        //   Payer Address 1
        sb.Append(this.wrapField('Payer Address 1'));

        //  Payer Address 2
        sb.Append(this.wrapField('Payer Address 2'));

        //  Payer Address 3
        sb.Append(this.wrapField('Payer Address 3'));

        //  Payer City
        sb.Append(this.wrapField('Payer City'));

        //  Payer State
        sb.Append(this.wrapField('Payer State'));

        //  Payer Zip
        sb.Append(this.wrapField('Payer Zip'));

        //  Payer Country
        sb.Append(this.wrapField('Payer Country'));

        //  Payment Code
        sb.Append(this.wrapField(' Payment Code'));

        //  Check Date
        sb.Append(this.wrapField('Check Date'));

        //  Check Number
        sb.Append(this.wrapField('Check Number'));

        //  Check Amount
        sb.Append(this.wrapField('Check Amount'));

        //  Payee/Vendor Name
        sb.Append(this.wrapField('Payee/Vendor Name'));

        //  Payee/Vendor Number
        sb.Append(this.wrapField('Payee/Vendor Number'));

        //  Payee Address 1
        sb.Append(this.wrapField('Payee Address 1'));

        //  Payee Address 2
        sb.Append(this.wrapField('Payee Address 2'));

        //  Payee Address 3
        sb.Append(this.wrapField('Payee Address 3'));

        //  Payee City
        sb.Append(this.wrapField('Payee City'));

        //  Payee State
        sb.Append(this.wrapField('Payee State'));

        //  Payee Zip
        sb.Append(this.wrapField('Payee Zip'));

        //  Payee Country
        sb.Append(this.wrapField('Payee Country'));

        //  Mail Code
        sb.Append(this.wrapField('Mail Code'));

        //  Handling Code
        sb.Append(this.wrapField('Handling Code'));

        //  Invoice Number
        sb.Append(this.wrapField('Invoice Number'));

        //  Invoice Date
        sb.Append(this.wrapField('Invoice Date'));

        //  Invoice Description
        sb.Append(this.wrapField('Invoice Description'));

        //  Invoice Discount
        sb.Append(this.wrapField('Invoice Discount'));

        //  Invoice Gross
        sb.Append(this.wrapField('Invoice Gross'));

        //  Invoice Net
        sb.Append(this.wrapField('Invoice Net'));

        //  Total Invoice Gross
        sb.Append(this.wrapField('Total Invoice Gross'));

        //  Total Invoice Discount
        sb.Append(this.wrapField('Total Invoice Discount'));

        //  Total Invoice Net
        sb.Append(this.wrapField('Total Invoice Net', 0, false, false));

        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Payment</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_Payment
    /// </summary>
    /// <param name = "_invSKS_EFT_FileDetail">_invSKS_EFT_FileDetail</param>
    /// <returns>boolean</returns>
    public boolean rec_Payment(SKS_EFT_FileDetail _invSKS_EFT_FileDetail)
    {
        //  Account Number
        //  Payer name
        //   Payer Address 1
        //  Payer Address 2
        //  Payer Address 3
        //  Payer City
        //  Payer State
        //  Payer Zip
        //  Payer Country
        //  Payment Code
        //  Check Date
        //  Check Number
        //  Check Amount
        //  Payee/Vendor Name
        //  Payee/Vendor Number
        //  Payee Address 1
        //  Payee Address 2
        //  Payee Address 3
        //  Payee City
        //  Payee State
        //  Payee Zip
        //  Payee Country
        //  Mail Code
        //  Handling Code
        //  Invoice Number
        //  Invoice Date
        //  Invoice Description
        //  Invoice Discount
        //  Invoice Gross
        //  Invoice Net
        //  Total Invoice Gross
        //  Total Invoice Discount
        //  Total Invoice Net
        //----------------------------------------------------------------------
        str mailCode, handlingCode, description;
        System.Text.StringBuilder sb = new System.Text.StringBuilder();

        //  Account Number
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.BankBankAcct, 10));

        //  Payer name
        sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyName), 60, true));

        //   Payer Address 1
        sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr), 60, true));

        //  Payer Address 2
        sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr2), 60, true));

        //  Payer Address 3
        sb.Append(this.wrapField());

        //  Payer City
        sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyCity), 35, true));

        //  Payer State
        sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyState), 2, true));

        //  Payer Zip
        sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyZipCode), 10));

        //  Payer Country
        sb.Append(this.wrapField(this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_BankAccount.WOrdPartyCountryRegionId), 2));

        //  Payment Code
        sb.Append(this.wrapField('C'));

        //  Check Date
        sb.Append(this.wrapField(SKS_PP_StringFormats::strDateYYYYMMDD(mSKS_EFT_FileDetail.EffectiveDate, DateSeparator::Hyphen)));

        //  Check Number
        sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference), 10));

        //  Check Amount
        sb.Append(this.wrapField(num2str(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1, 0, 2, 0, 0), 12));

        //  Payee/Vendor Name
        sb.Append(this.wrapField(this.CharacterReplacement(mRemittanceName), 60, true));

        //  Payee/Vendor Number
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.AccountNum, 10, true));//DevOps20924

        //  Payee Address 1
        sb.Append(this.wrapField(this.CharacterReplacement(mRemittanceAdrLine1), 60, true));

        //  Payee Address 2
        sb.Append(this.wrapField(this.CharacterReplacement(mRemittanceAdrLine2), 60, true));

        //  Payee Address 3
        sb.Append(this.wrapField());

        //  Payee City
        sb.Append(this.wrapField(this.CharacterReplacement(mRemittanceCity), 35, true));

        //  Payee State
        sb.Append(this.wrapField(this.CharacterReplacement(mRemittanceState), 2, true));

        //  Payee Zip
        sb.Append(this.wrapField(this.CharacterReplacement(mRemittanceZipCode), 10));

        //  Payee Country
        sb.Append(this.wrapField(this.CharacterReplacement(mRemittanceCountryRegionId), 2));

        //  Mail Code
        mailCode = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('MailCode', mSKS_EFT_FileDetail.RecId));
        sb.Append(this.wrapField(mailCode, 1));

        //  Handling Code
        handlingCode = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('HandlingCode', mSKS_EFT_FileDetail.RecId));
        sb.Append(this.wrapField(handlingCode, 1));

        //  Invoice Number
        sb.Append(this.wrapField(this.CharacterReplacement(_invSKS_EFT_FileDetail.InvoiceNumber), 20));

        //  Invoice Date
        sb.Append(this.wrapField(SKS_PP_StringFormats::strDateYYYYMMDD(_invSKS_EFT_FileDetail.InvoiceDate, DateSeparator::Hyphen)));

        //  Invoice Description
        sb.Append(this.wrapField(this.CharacterReplacement(_invSKS_EFT_FileDetail.InvoiceTransactionTxt), 40, true));

        //  Invoice Discount
        sb.Append(this.wrapField(num2str(_invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur * -1, 0, 2, 0, 0), 12));

        //  Invoice Gross
        sb.Append(this.wrapField(num2str((_invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur + _invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur) * -1, 0, 2, 0, 0), 12));

        //  Invoice Net
        sb.Append(this.wrapField(num2str(_invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1, 0, 2, 0, 0), 12));

        //  Total Invoice Gross
        sb.Append(this.wrapField(num2str((mSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur + mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur) * -1, 0, 2, 0, 0), 12));

        //  Total Invoice Discount
        sb.Append(this.wrapField(num2str(mSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur * -1, 0, 2, 0, 0), 12));

        //  Total Invoice Net
        sb.Append(this.wrapField(num2str(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1, 0, 2, 0, 0), 12, false, false));

        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wrapField</Name>
				<Source><![CDATA[
    private str wrapField(str _field = '', int _fieldLength = 0, boolean quotes = false, boolean _addSeparator = true)
    {
        str text;

        if(_fieldLength > 0)
        {
            text = subStr(_field, 1, _fieldLength);
        }
        else
        {
            text = _field;
        }
        if(quotes && text != '' && strContains(text, ','))
        {
            text = #DoubleQuote + text + #DoubleQuote;
        }
        if(_addSeparator)
        {
            text += #Separator;
        }
        return text;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRemittanceAddress</Name>
				<Source><![CDATA[
    void getRemittanceAddress(boolean UseCheckNum)
    {
        LedgerJournalTrans      lLedgerJournalTrans;
        LogisticsLocation       lLogisticsLocation;
        LogisticsPostalAddress  lRemittancePostalAddress;
        Array vendAddrArray = new Array(Types::String);
    
        if(UseCheckNum && mSKS_EFT_FileDetail.PaymentLineRecId != 0)
        {
            select firstonly * from lRemittancePostalAddress join  RemittanceAddress from lLedgerJournalTrans
                    where lRemittancePostalAddress.Location == lLedgerJournalTrans.RemittanceLocation
                        && lLedgerJournalTrans.RecId == mSKS_EFT_FileDetail.PaymentLineRecId;
    
            lLogisticsLocation = LogisticsLocation::find(lLedgerJournalTrans.RemittanceLocation);
    
            //Populate Remittance Information
            mRemittanceName = lLogisticsLocation.Description;
    
            vendAddrArray = SKS_PP_50000Bas::StreetToAddressLineArray(lRemittancePostalAddress.Street,2);
    
            mRemittanceAdrLine1 = '';
            mRemittanceAdrLine2 = '';
    
            if(vendAddrArray.exists(1))
            {
                mRemittanceAdrLine1 = vendAddrArray.value(1);
                if (vendAddrArray.exists(2))
                {
                    mRemittanceAdrLine2 = vendAddrArray.value(2);
                }
            }
            mRemittanceCity = this.CharacterReplacement(lRemittancePostalAddress.City);
            mRemittanceState = this.CharacterReplacement(lRemittancePostalAddress.State);
            mRemittanceZipCode = this.CharacterReplacement(lRemittancePostalAddress.ZipCode);
            mRemittanceCountryRegionId = this.getLogisticsAddressCountryISO(lRemittancePostalAddress.CountryRegionId);
        }
        else
        {
            mRemittanceName = this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneName);
            mRemittanceAdrLine1 = this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneAddr);
            mRemittanceAdrLine2 = this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneAddr2);
            mRemittanceCity = this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneCity);
            mRemittanceState = this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneState);
            mRemittanceZipCode = this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneZipPostal);
            mRemittanceCountryRegionId = this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_VendAddress.BeneCountryRegionId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectPaymentRecords</Name>
				<Source><![CDATA[
    protected void selectPaymentRecords()
    {
        //------------------------------------------------------------------------------------------------------
        // Standard payment selction
        // Override if different selection is need for a format
        //------------------------------------------------------------------------------------------------------
    
        //Order by clause must match the clause in the SKS_EFT_Processing.SumByPayment
        select * from mSKS_EFT_FileDetail
            join mSKS_EFT_FileDetail_VendAddress
            join mSKS_EFT_FileDetail_BenBank
            join mSKS_EFT_FileDetail_Intermediary
            join mSKS_EFT_FileDetail_CreditParty
            join msKS_EFT_FileDetail_Instructions
                order by mSKS_EFT_FileDetail.PaymentCompany, //SKS_VSTS_12809
                   mSKS_EFT_FileDetail.RecordSection,
                   mSKS_EFT_FileDetail.PaymMode,
                   mSKS_EFT_FileDetail.BankAccountId,
                   mSKS_EFT_FileDetail.PaymentCurrencyCode,
                   mSKS_EFT_FileDetail.PaymSpec,
                   mSKS_EFT_FileDetail.EffectiveDate,
                   mSKS_EFT_FileDetail.DepCountryRegionId,
                   mSKS_EFT_FileDetail.RecordType,
                   mSKS_EFT_FileDetail.AccountNum,
                   mSKS_EFT_FileDetail.PaymentReference,
                   mSKS_EFT_FileDetail.RecId
          where mSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                mSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                mSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_VendAddress.RefRecId &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_BenBank.RefRecId &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_Intermediary.RefRecId &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_CreditParty.RefRecId &&
                mSKS_EFT_FileDetail.RecId == msKS_EFT_FileDetail_Instructions.RefRecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>