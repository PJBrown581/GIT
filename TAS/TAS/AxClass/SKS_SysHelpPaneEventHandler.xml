<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_SysHelpPaneEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.AX.Metadata.MetaModel;
/// <summary>
/// This is event handler class of SysHelpPane
/// </summary>
class SKS_SysHelpPaneEventHandler 
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>TASHelpGeneric_OnClicked</Name>
				<Source><![CDATA[
    /// <summary>
    ///This is event handler of SysHelpPane
    /// </summary>
    /// <param name="sender">FormControl</param>
    /// <param name="e">Arguments</param>
    [FormControlEventHandler(formControlStr(SysHelpPane, TASHelpGeneric), FormControlEventType::Clicked)]
    public static void TASHelpGeneric_OnClicked(FormControl sender, FormControlEventArgs e)
    {
        SKS_SysHelpPaneEventHandler::fillInstalledModules(true,false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>TASHelpNonGeneric_OnClicked</Name>
				<Source><![CDATA[
    /// <summary>
    ///This is event handler of SysHelpPane form
    /// </summary>
    /// <param name="sender">FormControl</param>
    /// <param name="e">Arguments</param>
    [FormControlEventHandler(formControlStr(SysHelpPane, TASHelpNonGeneric), FormControlEventType::Clicked)]
    public static void TASHelpNonGeneric_OnClicked(FormControl sender, FormControlEventArgs e)
    {
        str         context;
        FormRun     formRun;

        formRun = sender.formRun();
        context = formRun.parmFormContext();
        SKS_SysHelpPaneEventHandler::fillInstalledModules(false,true,context);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillInstalledModules</Name>
				<Source><![CDATA[
    public static void fillInstalledModules(boolean _isFromGeneric,boolean _isFromNonGeneric, str _context = '')
    {
        Browser br = new Browser();

        Microsoft.Dynamics.AX.Metadata.MetaModel.ModelInfo modelInfo;
        CLRObject modules;
        ClrObject modulesEnumerator;
        str60 moduleName;
        CLRObject moduleModels;
        CLRObject modelEnumerator;
        str version;
        UserInfo    UserInfo;

        modules = Microsoft.Dynamics.Ax.Xpp.MetadataSupport::GetInstalledModuleNamesInSortedOrder();
        modulesEnumerator = modules.GetEnumerator();

        while (modulesEnumerator.MoveNext())
        {
            moduleName = modulesEnumerator.get_Current();
            
            moduleModels = Microsoft.Dynamics.Ax.Xpp.MetadataSupport::GetModelsInModuleSortedByDisplayName(moduleName);
            modelEnumerator = moduleModels.GetEnumerator();

            while (modelEnumerator.MoveNext())
            {
                modelInfo = modelEnumerator.get_Current();

                if (modelInfo.DisplayName == 'TAS AX7')
                {
                    version = any2Str(modelInfo.VersionMajor) +'.'+ any2Str(modelInfo.VersionMinor);

                    select language from UserInfo where UserInfo.ID == curUserId();
                    if (_isFromGeneric == true)
                    {
                        br.navigate(SKS_PP_Setup::find().BaseHelpURL+'treasury-automation-suite'+'/'+version+'/'+subStr(UserInfo.Language, 0, 2)+'/'+ 'topic/introduction?key='+SKS_PP_Setup::find().HelpAccessKey,true);
                    }
                    else if (_isFromNonGeneric == true)
                    {
                       br.navigate(SKS_PP_Setup::find().BaseHelpURL+'treasury-automation-suite/'+version+'/'+subStr(UserInfo.Language, 0, 2)+'/search?q='+any2Str(_context)+'&key='+SKS_PP_Setup::find().HelpAccessKey,true);
                    }
                }               
            }          
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>SysHelpPane_loadExternalHelpContent</Name>
				<Source><![CDATA[
    /// <summary>
    ///This is event handler of SysHelpPane form
    /// </summary>
    /// <param name="_formRun">FormRun</param>
    /// <param name="_searchString">String text</param>
    [SubscribesTo(formStr(SysHelpPane), delegateStr(SysHelpPane, loadExternalHelpContent))]
    public static void SysHelpPane_loadExternalHelpContent(FormRun _formRun, str _searchString)
    {
        FormRun formRun = _formRun;
        str     context = _searchString;
        boolean isTASHelpForm;

        SKS_SysHelpPaneHelper SKS_SysHelpPaneHelper = new SKS_SysHelpPaneHelper();
        if(SKS_PP_Setup::find().BaseHelpURL != '')
        {
            isTASHelpForm = SKS_SysHelpPaneHelper.isTASHelpForm(context);
            formRun.design().controlName('TASHelpGeneric').visible(true);
            formRun.design().controlName('TASHelpNonGeneric').visible(isTASHelpForm);
        }
        else
        {
            formRun.design().controlName('TASHelpGeneric').visible(false);
            formRun.design().controlName('TASHelpNonGeneric').visible(false);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>