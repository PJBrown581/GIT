<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_US_CHASE_GFF_1019</Name>
	<SourceCode>
		<Declaration><![CDATA[
//File Header
//  Batch Header
//      Records
//  Batch Trailer
//File Trailer
/// <summary>
/// SKS_EFT_Format_US_CHASE_GFF_1019 extends SKS_EFT_Format
/// </summary>
class SKS_EFT_Format_US_CHASE_GFF_1019 extends SKS_EFT_Format
{
    #define.FormatVersion('20221114')
    SKS_EFT_SequenceNumber mSequenceNumber;
    AmountCur mHashTotal;       //Used for Batch Amount Hash Total and Account Amount Hash Total
    int mBatchRecordTotal;
    int mTransactionTotal;
    AmountCur mGrossTotal;
    AmountCur mDiscountTotal;
    AmountCur mNetTotal;
    
    SKS_EFT_FileDetail prevSKS_EFT_FileDetail;
    str nameCont;
    str mServiceCode;
    str mACHFileIdMod;
    str mCTXString;
    int mCTXAddenda;
    Boolean mRemit;
    #define.IAT('ACH-IAT')
    #define.CHK('CHK-CA-US')
    #define.FWT('Wire-FED') //If country code for vendor is marked as Canada, then the output will be for a Swift-Wire transfer.
    #define.TLX('GMT-TLX')
    #define.CTX('ACH-CTX')

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    //File Header
    //  Batch Header
    //      PM Record   (Payment Record 1)
    //      PN Record   (Payment Record 2)
    //      P2 Record   (Transaction text Record)
    //      PO Record   (Payment Additional Detail)
    //      PR Record   (Regulatory reporting)
    //      A1 Record   (Beneficiary's Address)
    //      ST Record   (Ship to Record)
    //      A2 Record   (Beneficiary's Bank Address)
    //      A3 Record   (Intermediary Bank Address)
    //      A4 Record   (Remittance)
    //      B4 Record   (Remittance)
    //      C4 Record   (Remittance)
    //      A5 Record   (By Order of Information)
    //                  R1 Record   (Remittance Information Record 1)
    //                  RA Record   (Remittance Information Record 1)
    //                  RB Record   (Remittance Detail Text Record)
    //      RC          (Remittance Totals Records)
    //      RD          (Remittance Summary Text Record)
    //      R2          (Remittance Count Record)
    //      LA          (Encoded Local Language information)
    //      LB          (Encoded Local Language information)
    //      LC          (Encoded Local Language information)
    //      LD          (Encoded Local Language information)
    //      LE          (Encoded Local Language information)
    //      LF          (Encoded Local Language information)
    //      W1          (Asia Witholding Record)
    //      W2          (Asia Witholding Record)
    //      W3          (Asia Witholding Record)
    //  Batch Trailer
    //File Trailer
    [SuppressBPWarningAttribute("BPCheckNestedLoopinCode","Necessary to allow the processing of every invoice(inner loop) for every relevant parent file detail record(outer loop)")]
    protected void formatStructure()
    {
        SKS_EFT_FileDetail invSKS_EFT_FileDetail;
        boolean Rrecords;
        ;
    
        //Get sequence number
        this.getSequence();
    
        //File Header
        this.rec_FHeader();
    
        //Batch Header
        mBatchRecordTotal = 0;
        mTransactionTotal = 0;
        this.rec_BHeader();
    
        while(mSKS_EFT_FileDetail)
        {
            //Clear Name
            nameCont = '';
    
            //Clear Remittance Flag
            Rrecords = false;
    
            // Get SKS_EFT_Bank
            this.getSKS_EFT_Bank();
    
            // Get SKS_EFT_VendorPaym
            this.getSKS_EFT_VendorPaym();
    
            // Get SKS_EFT_FileFormatPaymSpec
            this.getSKS_EFT_FileFormatPaymSpec();
    
            // Get RemittanceAddress
            this.getRemittanceAddress(mSKS_EFT_FileFormatPaymSpec.UseCheckNumber);
    
            //PM Record
            this.rec_PM(); //CTX, IAT, CHK, FWT
    
            //PN Record
            switch(mSKS_EFT_FileDetail.PaymSpec)
            {
                case #CHK:
                    this.rec_PN();  //CHK
                    break;
                default:            //CTX, IAT, FWT, TLX
                    break;
            }
    
            //P2 Record (Not used)
    
            //PO Record (Not used)
    
            //PR Record (Not used)
    
            //A1 Record
            this.rec_A1();
    
            //ST Record (Not used)
    
            //A2 Record
            switch(mSKS_EFT_FileDetail.PaymSpec)
            {
                case #TLX:
                case #FWT:
                    this.rec_A2();  //FWT, TLX
                    break;
                default:            //CTX, IAT, CHK
                    break;
            }
    
            //A3 Record   (Intermediary Bank Address)
            switch(mSKS_EFT_FileDetail.PaymSpec)
            {
                case #FWT:
                case #TLX:
                    if(mSKS_EFT_VendorPaym.WIntBankId)
                    {
                        this.rec_A3();  //FWT, TLX
                    }
                    break;
                default:            //CTX, IAT, CHK
                    break;
            }
    
            //A4 Record
            if(mRemit)
            {
                this.rec_A4();  //CTX, IAT, TLX,FWT
            }
    
            //B4 Record   (NOT USED)
            //C4 Record   (NOT USED)
            //A5 Record   (NOT USED)
    
            //R1 Record   (Remittance Information Record 1)
            //RA Record   (Remittance Information Record 2)
            mGrossTotal = 0;
            mDiscountTotal = 0;
            mNetTotal = 0;
    
            while select invSKS_EFT_FileDetail where invSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId
            {
                if(invSKS_EFT_FileDetail.InvoiceNumber != '')
                {
                    this.rec_R1(invSKS_EFT_FileDetail);  //CHK, CTX, IAT, FWT, TLX
                    this.rec_RA(invSKS_EFT_FileDetail); //CHK, CTX, IAT, FWT, TLX
                    Rrecords = true;
                }
            }
    
            //RB Record   (NOT USED)
            //RC Record   (Remittance Totals Records)
            if(Rrecords)
            {
                this.rec_RC();  //CTX, CHK, IAT, FWT, TLX
            }
    
            //RD Record   (NOT USED)
            //R2 Record   (NOT USED)
            //LA Record   (NOT USED)
            //LB Record   (NOT USED)
            //LC Record   (NOT USED)
            //LD Record   (NOT USED)
            //LE Record   (NOT USED)
            //LF Record   (NOT USED)
            //W1 Record   (NOT USED)
            //W2 Record   (NOT USED)
            //W3 Record   (NOT USED)
    
            next mSKS_EFT_FileDetail;
        }
    
        //Batch Trailer
        this.rec_BTrailer();
    
        //File Trailer
        this.rec_FTrailer();
    
        //Set sequence number
        this.setSequence();
    }

]]></Source>
			</Method>
			<Method>
				<Name>get_POInfo</Name>
				<Source><![CDATA[
    protected str get_POInfo(SKS_EFT_FileDetail _invSKS_EFT_FileDetail)
    {
        VendInvoiceJour vendInvoiceJour;
        VendTrans vendTrans;
        Container companyInfo;
        str PONum = '';
        ;
    
        companyInfo += _invSKS_EFT_FileDetail.InvoiceCompany;
    
        // See if PO exists
        if(conPeek(companyInfo, 1) != '')
        {
            select firstOnly crossCompany:companyInfo PurchId, InvoiceAccount, InvoiceDate, InvoiceId from vendInvoiceJour where
                vendInvoiceJour.InvoiceAccount == _invSKS_EFT_FileDetail.AccountNum &&
                vendInvoiceJour.InvoiceId == _invSKS_EFT_FileDetail.InvoiceNumber &&
                vendInvoiceJour.PurchId != ''
            join TransDate, RecId from vendTrans
            where vendTrans.RecId == _invSKS_EFT_FileDetail.VendTransRecId &&
                  vendTrans.TransDate == vendInvoiceJour.InvoiceDate;
    
            if(vendInvoiceJour)
            {
                PONum = vendInvoiceJour.PurchId;
            }
        }
        return this.CharacterReplacement(PONum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSequence</Name>
				<Source><![CDATA[
    private void getSequence()
    {
        ;
    
        if(mSKS_EFT_FileFormat)
        {
            //Get Next Sequence Number
            mSequenceNumber = mSKS_EFT_FileFormat.NextSequenceNumber;
        }
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_A1</Name>
				<Source><![CDATA[
    //Nbr   Content
    // 1    Record ID                       (  1-  2)
    // 2    Beneficiary's Name (Cont.)      (  3- 37)
    // 3    Beneficiary's Address 1         ( 38- 72)
    // 4    Beneficiary's Address 2         ( 73-107)
    // 5    Beneficiary's Address 3         (108-142)
    // 6    Beneficiary's Address 4 (City)  (143-175)
    // 7    Beneficiary's Address 4 (State) (176-177)
    // 8    Country Code                    (178-179)
    // 9    Filler                          (    180)
    //10    Zip Code                        (181-190)
    //11    Reserved                        (191-210)
    
    public boolean rec_A1()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        ;
        mBatchRecordTotal++;
        // 1    Record ID                       (  1-  2)
        sb.Append('A1');    // CHK, IAT, FWT, CTX, TLX
    
        // 2    Beneficiary/Reciever's Name (Cont.)      (  3- 37)
        sb.Append(SKS_PP_StringFormats::strFill(35, nameCont, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right)); // CHK, IAT, FWT, CTX, TLX
    
        // 3    Beneficiary/Reciever's Address 1         ( 38- 72)
        sb.Append(SKS_PP_StringFormats::strFill(35, mRemittanceAdrLine1, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right)); // CHK, IAT, FWT, CTX, TLX
    
        // 4    Beneficiary/Reciever's Address 2         ( 73-107)
        sb.Append(SKS_PP_StringFormats::strFill(35, mRemittanceAdrLine2, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right)); // CHK, IAT, FWT, CTX, TLX
    
        // 5    Beneficiary/Reciever's Address 3         (108-142)
        sb.Append(SKS_PP_StringFormats::strFill(35,'', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right)); // CHK, IAT, FWT, CTX, TLX
    
        // 6    Beneficiary/Reciever's Address 4 (City)  (143-175)
        sb.Append(SKS_PP_StringFormats::strFill(33, mRemittanceCity, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right)); // CHK, IAT, FWT, CTX, TLX
    
        // 7    Beneficiary/Reciever's Address 4 (State) (176-177)
        sb.Append(SKS_PP_StringFormats::strFill(2, mRemittanceState, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right)); // CHK, IAT, FWT, CTX, TLX
    
        // 8    Country Code                    (178-179)
        sb.Append(SKS_PP_StringFormats::strFill(2,mRemittanceCountryRegionId, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right)); // CHK, IAT, FWT, CTX, TLX
    
        // 9    Filler                          (    180)
        sb.Append(SKS_PP_StringFormats::strFill(1,'', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left)); // CHK, IAT, FWT, CTX, TLX
    
        //10    Reciever Country/Zip Code       (181-190)
        sb.Append(SKS_PP_StringFormats::strFill(10, mRemittanceZipCode, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right)); // CHK, IAT, FWT, CTX, TLX
    
        //11    Reserved                        (191-210)
        sb.Append(SKS_PP_StringFormats::strFill(20,'', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left)); // CHK, IAT, FWT, CTX, TLX
    
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_A2</Name>
				<Source><![CDATA[
    //Nbr   Content
    // 1    Record ID                           (  1-  2)
    // 2    Receiver's Bank Name/Address 1      (  3- 37)
    // 3    Bank Name Address 2                 ( 38- 72)
    // 4    Bank Name Address 3                 ( 73-107)
    // 5    Bank Name Address 4                 (108-142)
    // 6    Bene Bank Area Code                 (143-146)
    // 7    Party Identifier                    (147-181)
    // 8    Reserved                            (182-210)
    
    public boolean rec_A2()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        str PartyIdentifier = '';
    
        mBatchRecordTotal++;
        // 1    Record ID                           (  1-  2)
        sb.Append('A2');    //FWT, TLX
    
        // 2    Receiver's Bank Name/Address 1      (  3- 37)
        sb.Append(SKS_PP_StringFormats::strFill(35, this.CharacterReplacement(mSKS_EFT_VendorPaym.WBenBankName), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right)); //FWT, TLX
    
        // 3    Bank Name Address 2                 ( 38- 72)
        sb.Append(SKS_PP_StringFormats::strFill(35, this.CharacterReplacement(mSKS_EFT_VendorPaym.WBenBankAddr), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right)); //FWT, TLX
    
        // 4    Bank Name Address 3                 ( 73-107)
        sb.Append(SKS_PP_StringFormats::strFill(35, this.CharacterReplacement(mSKS_EFT_VendorPaym.WBenBankCity) + ' ' + this.getLogisticsAddressCountryISO(mSKS_EFT_VendorPaym.WBenBankCountryRegionId), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right)); //CHK, FWT, TLX
    
        // 5    Bank Name Address 4                 (108-142)
        sb.Append(SKS_PP_StringFormats::strFill(35,'', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right)); //FWT, TLX
    
        // 6    Bene Bank Area Code                 (143-146)
        sb.Append(SKS_PP_StringFormats::strFill(4,'', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right)); //FWT, TLX
    
        // 7    Party Identifier                    (147-181)
        if(mSKS_EFT_FileDetail.DepBankTransit != '')
        {
            if(this.getLogisticsAddressCountryISO(mSKS_EFT_VendorPaym.WBenBankCountryRegionId) == 'CA')
            {
                PartyIdentifier = 'CC' + SKS_PP_StringFormats::strFill(9, mSKS_EFT_FileDetail.DepBankTransit, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left);
            }
            else if(this.getLogisticsAddressCountryISO(mSKS_EFT_VendorPaym.WBenBankCountryRegionId) == 'UK')
            {
                PartyIdentifier = 'SC' + SKS_PP_StringFormats::strFill(6, mSKS_EFT_FileDetail.DepBankTransit, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left);
            }
        }
    
        sb.Append(SKS_PP_StringFormats::strFill(35, PartyIdentifier, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right)); //FWT, TLX
    
        // 6    Reserved                            (182-210)
        sb.Append(SKS_PP_StringFormats::strFill(29,'', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left)); //FWT, TLX
    
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_A3</Name>
				<Source><![CDATA[
    //Nbr   Content
    // 1    Record ID                           (  1-  2)
    // 2    Intermediary Bank ID                (  3- 37)
    // 3    Intermediary Bank Name/Address 1    ( 38- 72)
    // 4    Intermediary Bank Name/Address 2    ( 73-107)
    // 5    Intermediary Bank Name/Address 3    (108-142)
    // 6    Intermediary Bank Name/Address 4    (143-177)
    // 7    Reserved                            (178-210)
    
    public boolean rec_A3()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        ;
        mBatchRecordTotal++;
        // 1    Record ID                           (  1-  2)
        sb.Append('A3');
    
        // 2    Intermediary Bank ID                (  3- 37)
        sb.Append(SKS_PP_StringFormats::strFill(35,mSKS_EFT_VendorPaym.WIntBankId, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right)); //FWT, TLX
    
        // 3    Intermediary Bank Name/Address 1    ( 38- 72)
        sb.Append(SKS_PP_StringFormats::strFill(35, this.CharacterReplacement(mSKS_EFT_VendorPaym.WIntBankName), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right)); //FWT, TLX
    
        // 4    Intermediary Bank Name/Address 2    ( 73-107)
        sb.Append(SKS_PP_StringFormats::strFill(35, this.CharacterReplacement(mSKS_EFT_VendorPaym.WIntBankAddr) + ' ' + this.CharacterReplacement(mSKS_EFT_VendorPaym.WIntBankAddr2), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right)); //FWT, TLX
    
        // 5    Intermediary Bank Name/Address 3    (108-142)
        sb.Append(SKS_PP_StringFormats::strFill(35, this.CharacterReplacement(mSKS_EFT_VendorPaym.WIntBankCity) + ' ' + mSKS_EFT_VendorPaym.WIntBankCountryRegionId, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right)); //FWT, TLX
    
        // 6    Intermediary Bank Name/Address 4    (143-177)
        sb.Append(SKS_PP_StringFormats::strFill(35,'', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left)); //FWT, TLX
    
        // 7    Reserved                            (178-210)
        sb.Append(SKS_PP_StringFormats::strFill(33,'', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left)); //FWT, TLX
    
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_A4</Name>
				<Source><![CDATA[
    //Nbr   Content
    // 1    Record ID                               (  1-  2)
    // 2    Remittance Reciever Contact Name        (  3- 37)
    // 3    Remittance Destination Value - Primary  ( 38-117)
    // 4    Remittance Destination Value - Alt      (118-177)
    // 5    Remittance Delivery Mode                (178-179)
    // 6    Remittance File Type                    (180-189)
    // 7    Remittance Form ID                      (190-199)
    // 8    Remittance Summary ind                  (    200)
    // 9    Filler                                  (201-210)
    
    public boolean rec_A4()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        DirPartyContactInfoview mDirPartyContactInfoview;
        VendTable   vendorTable;
        str value;
        ;
        mBatchRecordTotal++;
        value = SKS_EFT_Format::getCodelookupvalue('RmtDeliveryMode', mSKS_EFT_FileDetail.RecId);

        // 1    Record ID                               (  1-  2)
        sb.Append('A4');    //FWT
    
        // 2    Remittance Reciever Contact Name        (  3- 37)
        sb.Append(SKS_PP_StringFormats::strFill(35,mRemittanceName, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right)); //FWT
    
        // 3    Remittance Destination Value - Primary  ( 38-117)
        vendorTable = VendTable::findByCompany(mSKS_EFT_VendorPaym.VendCompany, mSKS_EFT_VendorPaym.VendAccount);
        if(value == 'Fax')
        {
            select * from mDirPartyContactInfoview where mDirPartyContactInfoview.Party == vendorTable.Party && mDirPartyContactInfoview.IsPrimary == true
            &&  mDirPartyContactInfoview.Type == LogisticsElectronicAddressMethodType::Fax;
    
            sb.Append(SKS_PP_StringFormats::strFill(80,mDirPartyContactInfoView.Locator, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right)); //FWT
        }
        else if(subStr(value, 1, 5) == 'Email')
        {
            select * from mDirPartyContactInfoview where mDirPartyContactInfoview.Party == vendorTable.Party && mDirPartyContactInfoview.IsPrimary == true
            &&  mDirPartyContactInfoview.Type == LogisticsElectronicAddressMethodType::Email;
    
            sb.Append(SKS_PP_StringFormats::strFill(80,mDirPartyContactInfoView.Locator, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right)); //FWT
        }
        else
        {
            sb.Append(SKS_PP_StringFormats::strFill(80,'', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right)); //FWT
        }
    
        // 4    Remittance Destination Value - Alt      (118-177)
        sb.Append(SKS_PP_StringFormats::strFill(60,mRemittanceAdrLine2, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right)); //FWT
    
        // 5    Remittance Delivery Mode                (178-179)
        if(value == 'Fax')
        {
            sb.Append('FX'); //FWT
        }
        else if(subStr(value, 1, 5) == 'Email')
        {
            sb.Append('EM'); //FWT
        }
        else
        {
            sb.Append('BM'); //FWT
        }
    
        // 6    Remittance File Type                    (180-189)
        if(value == 'Email-HR' || value == 'Fax')
        {
            sb.Append(SKS_PP_StringFormats::strFill(10, 'HR', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right)); //FWT
        }
        else if(value == 'Email-TXT')
        {
            sb.Append(SKS_PP_StringFormats::strFill(10, 'TXT', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right)); //FWT
        }
        else if(value == 'Email-TIF')
        {
            sb.Append(SKS_PP_StringFormats::strFill(10, 'TIF', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right)); //FWT
        }
        else if(value == 'Email-PDF')
        {
            sb.Append(SKS_PP_StringFormats::strFill(10, 'PDF', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right)); //FWT
        }
        else
        {
            sb.Append(SKS_PP_StringFormats::strFill(10, 'OT', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right)); //FWT
        }
    
        // 7    Remittance Form ID                      (190-199)
        sb.Append(SKS_PP_StringFormats::strFill(10, this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('RmtFormId', mSKS_EFT_FileDetail.RecId)), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right)); //FWT
    
        // 8    Remittance Summary ind                  (    200)
        sb.Append(SKS_EFT_Format::getCodelookupvalue('RmtSummaryInd', mSKS_EFT_FileDetail.RecId));
    
        // 9    Filler                                  (201-210)
        sb.Append(SKS_PP_StringFormats::strFill(10,'', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left)); //IAT
    
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_BHeader</Name>
				<Source><![CDATA[
    //Nbr   Content
    // 1    Record ID           (  1-  2)
    // 2    Batch Number        (  3-  6)
    // 3    Value Date          (  7- 14)
    // 4    Message Reference   ( 15- 49)
    // 5    Bundling Reference  ( 50- 65)
    // 6    Reserved            ( 66-100)
    // 7    Reserved            (101-210)
    
    public boolean rec_BHeader()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        ;
        mBatchRecordTotal++;
        // 1    Record ID           (  1-  2)
        sb.Append('BH');
    
        // 2    Batch Number        (  3-  6)
        sb.Append('0001');
    
        // 3    Value Date          (  7- 14) CTX Field, no change.
        sb.Append(SKS_PP_StringFormats::strDateYYYYMMDD(mSKS_EFT_File.EffectiveDate));
    
        // 4    Message Reference   ( 15- 49)
        sb.Append(SKS_PP_StringFormats::strFill(35,'', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left));
    
        // 5    Bundling Reference  ( 50- 65)
        sb.Append(SKS_PP_StringFormats::strFill(16,'', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left));
    
        // 6    Reserved            ( 66-100)
        sb.Append(SKS_PP_StringFormats::strFill(35,'', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left));
    
        // 7    Reserved            ( 101-210)
        sb.Append(SKS_PP_StringFormats::strFill(110,'', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left));
    
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_BTrailer</Name>
				<Source><![CDATA[
    //Nbr   Content
    // 1    Record ID           (  1-  2)
    // 2    Amount Hash Total   (  3- 27)
    // 3    Batch Record Total  ( 28- 37)
    // 4    Transaction Total   ( 38- 47)
    // 5    Reserved            ( 48-210)
    
    
    public boolean rec_BTrailer()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        ;
        mBatchRecordTotal++;
        // 1    Record ID           (  1-  2)
        sb.Append('BT');
    
        // 2    Amount Hash Total   (  3- 27)
        sb.Append(SKS_PP_StringFormats::strFill(25, num2str(mHashTotal,0,2,1,0), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left));
    
        // 3    Batch Record Total  ( 28- 37)
        sb.Append(SKS_PP_StringFormats::strFill(10, int2str(mBatchRecordTotal), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
    
        // 4    Transaction Total   ( 38- 47)
        sb.Append(SKS_PP_StringFormats::strFill(10, int2str(mTransactionTotal), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
    
        // 5    Reserved            ( 48-210)
        sb.Append(SKS_PP_StringFormats::strFill(163,'', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left));
    
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_FHeader</Name>
				<Source><![CDATA[
    //Nbr   Content
    // 1    Record ID           (  1-  2)
    // 2    Sender ID           (  3- 12)
    // 3    Reciever ID         ( 13- 27)
    // 4    File Create Date    ( 28- 35)
    // 5    File Create Time    ( 36- 41)
    // 6    File Number         ( 42- 47)
    // 7    File Type indicator ( 48- 48)
    // 8    Reserved            ( 49-205)
    // 9    GFF Version No.     (206-210)
    
    
    public boolean rec_FHeader()
    {
        str fileNum;
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        ;
        // 1    Record ID           (  1-  2)
        sb.Append('FH');
    
        // 2    Sender ID           (  3- 12) CTX Field, no change.
        sb.Append(strUpr(SKS_PP_StringFormats::strFill(10, this.CharacterReplacement(mSKS_EFT_Bank.ACHCompanyName), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right)));
    
        // 3    Reciever ID         ( 13- 27) CTX Field, no change.
        sb.Append('CHASE 006981815');
    
        // 4    File Create Date    ( 28- 35) CTX Field, no change.
        sb.Append(SKS_PP_StringFormats::strDateYYYYMMDD(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone())));
    
        // 5    File Create Time    ( 36- 41) CTX Field, no change.
        sb.Append(SKS_PP_StringFormats::strTimeHHMMSS());
    
        // 6    File Number         ( 42- 47) CTX Field, no change.
        fileNum = SKS_PP_StringFormats::strRight(mSKS_EFT_File.FileNbr + int2str(mSequenceNumber), 6);
        sb.Append(SKS_PP_StringFormats::strFill(6,fileNum, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        // 7    File Type indicator ( 48- 48)
        sb.Append('G');
    
        // 8    Reserved            ( 49-205)
        sb.Append(SKS_PP_StringFormats::strFill(157,'', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left));
    
        // 9    GFF Version No.     (206-210)
        sb.Append('01000');
        this.fileWrite(sb.ToString());
        mSequenceNumber++;
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_FTrailer</Name>
				<Source><![CDATA[
    //Nbr   Content
    // 1    Record ID           (  1-  2)
    // 2    File Batch Total    (  3- 12)
    // 3    Amount Hash Total   ( 13- 37)
    // 4    Reserved            ( 38-210)
    
    
    public boolean rec_FTrailer()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        ;
        // 1    Record ID           (  1-  2)
        sb.Append('FT');
    
        // 2    File Batch Total    (  3- 12) This will always be 1 since multiple effective dates are not permitted
        sb.Append('0000000001');
    
        // 3    Amount Hash Total   ( 13- 37)
        sb.Append(SKS_PP_StringFormats::strFill(25, num2str(mHashTotal,0,2,1,0), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
    
        // 4    Reserved            ( 38-210)
        sb.Append(SKS_PP_StringFormats::strFill(173,'', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left));
    
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_PM</Name>
				<Source><![CDATA[
    //Nbr   Content
    // 1    Record ID                       (  1-  2)
    // 2    Originator's Reference Number   (  3- 18)
    // 3    Transaction Amount              ( 19- 33)
    // 4    Currency                        ( 34- 36)
    // 5    Payment Method                  ( 37- 39)
    // 6    Transaction Type                ( 40- 41)
    // 7    Back Office ID                  ( 42- 44)
    // 8    Originator's Account Number     ( 45- 79)
    // 9    Bank Charges                    ( 80- 80)
    //10    Correspondent Charges           ( 81- 81)
    //11    Beneficiary Name                ( 82-116)
    //12    Beneficiary Bank ID             (117-151)
    //13    Beneficiary Account Number      (152-186)
    //14    Beneficiary Account Type        (    187)
    //15    Business Function Code          (188-190)
    //16    Payment Vehicle                 (191-193)
    //17    ACH/IACH Payment Type           (194-196)
    //18    Company ID                      (197-207)
    //19    Remittance Details Indicator    (208-210)
    
    public boolean rec_PM()
    {
        AmountCur amount;
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        SKS_EFT_FileDetail lSKS_EFT_FileDetail;
        ;
    
        mTransactionTotal++;
        mBatchRecordTotal++;
        // 1    Record ID                       (  1-  2)
        sb.Append('PM');                        //CTX, IAT, FWT, CHK, TLX
    
        // 2    Originator's Reference Number   (  3- 18)
        switch(mSKS_EFT_FileDetail.PaymSpec)
        {
            case #CTX:
                sb.Append(SKS_PP_StringFormats::strFill(16,subStr(this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference),1,15), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right)); //CTX
                break;
            default:
                sb.Append(SKS_PP_StringFormats::strFill(16,this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right)); //IAT, FWT, CHK, TLX
                break;
        }
    
        // 3    Transaction Amount              ( 19- 33)
        amount = -1*mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur;
        mHashTotal += amount;
        switch(mSKS_EFT_FileDetail.PaymSpec)
        {
    
            case #CTX:
                sb.Append(SKS_PP_StringFormats::strFill(15,SKS_PP_StringFormats::strFill(10, num2str(amount, 0, 2, 1, 0), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left)); //CTX
                break;
            default:
                sb.Append(SKS_PP_StringFormats::strFill(15, num2str(amount, 0, 2, 1, 0), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left)); //IAT, FWT, CHK, TLX
                break;
        }
    
    
        // 4    Currency                        ( 34- 36)
        sb.Append(mSKS_EFT_FileDetail.PaymentCurrencyCode); //IAT, CHK, FWT, CTX, TLX
    
        // 5    Payment Method                  ( 37- 39)
        switch(mSKS_EFT_FileDetail.PaymSpec)
        {
            case #TLX:
                sb.Append('TLX'); //TLX
                break;
            default:
                sb.Append('   '); //CTX, CHK, FWT, IAT
                break;
        }
    
        // 6    Transaction Type                ( 40- 41) Credit only
        switch(mSKS_EFT_FileDetail.PaymSpec)
        {
            case #CHK:
                sb.Append('  ');    //CHK
                break;
            default:
                sb.Append('01');    //CTX, IAT, FWT, TLX
                break;
        }
    
        // 7    Back Office ID/Code                  ( 42- 44)
        sb.Append(SKS_EFT_Format::getCodelookupvalue('BackOfficeId', mSKS_EFT_FileDetail.RecId));   //CTX, IAT, FWT, CHK, TLX
    
        // 8    Originator's Account Number     ( 45- 79)
        switch(mSKS_EFT_FileDetail.PaymSpec)
        {
            case #CTX:
                sb.Append(SKS_PP_StringFormats::strFill(35,subStr(mSKS_EFT_FileDetail.BankBankAcct, 1, 10), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));    //CTX
                break;
            default:
                sb.Append(SKS_PP_StringFormats::strFill(35,subStr(mSKS_EFT_FileDetail.BankBankAcct,1,35), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));    //IAT, FWT, CHK, TLX
                break;
        }
    
        // 9    Bank Charges                    ( 80- 80)
        sb.Append(' '); //CTX, CHK, FTW, IAT, TLX
    
        //10    Correspondent Charges           ( 81- 81)
        sb.Append(' '); //CTX, CHK, FWT, IAT, TLX
    
        //11    Beneficiary Name                ( 82-116)
        switch(mSKS_EFT_FileDetail.PaymSpec)
        {
            case #CTX:
                sb.Append(SKS_PP_StringFormats::strFill(35, subStr(mRemittanceName, 1, 22), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right)); //CTX
                break;
            default:
                nameCont = subStr(mRemittanceName, 36, strLen(mRemittanceName));
                sb.Append(SKS_PP_StringFormats::strFill(35, mRemittanceName, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right)); //IAT, FWT, CHK, TLX
                break;
        }
    
        //12    Beneficiary Bank ID             (117-151)
        switch(mSKS_EFT_FileDetail.PaymSpec)
        {
            case #CTX:
                sb.Append(SKS_PP_StringFormats::strFill(35, subStr(mSKS_EFT_FileDetail.DepBankTransit, 1, 9), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right)); //CTX
                break;
            case #FWT:
                if(this.getLogisticsAddressCountryISO(mSKS_EFT_VendorPaym.WBenBankCountryRegionId) == 'CA')
                {
                    sb.Append(SKS_PP_StringFormats::strFill(35, mSKS_EFT_FileDetail.DepSwiftNo, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right)); //SWT
                }
                else
                {
                    sb.Append(SKS_PP_StringFormats::strFill(35, mSKS_EFT_FileDetail.DepBankTransit, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right)); //FWT
                }
                break;
            case #IAT:
            case #TLX:
                sb.Append(SKS_PP_StringFormats::strFill(35, mSKS_EFT_FileDetail.DepSwiftNo, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right)); //IAT
                break;
            default:
                sb.Append(SKS_PP_StringFormats::strFill(35, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right)); //CHK
                break;
        }
    
        //13    Beneficiary Account Number      (152-186)
        switch(mSKS_EFT_FileDetail.PaymSpec)
        {
            case #CTX:
                sb.Append(SKS_PP_StringFormats::strFill(35, subStr(mSKS_EFT_FileDetail.DepBankAcct, 1, 17), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right)); //CTX
                break;
            case #CHK:
                sb.Append(SKS_PP_StringFormats::strFill(35, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right)); //CHK
                break;
            default:
                sb.Append(SKS_PP_StringFormats::strFill(35, mSKS_EFT_FileDetail.DepBankAcct, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right)); //IAT, FWT, TLX
                break;
        }
    
        //14    Beneficiary Account Type        (    187)
        switch(mSKS_EFT_FileDetail.PaymSpec)
        {
            case #CTX:
                if(mSKS_EFT_FileDetail.BankAcctType == BankAccountType::CheckingAccount) //CTX
                {
                    sb.Append('D');
                }
                else //Savings
                {
                    sb.Append('S');
                }
                break;
            default:
                sb.Append(SKS_PP_StringFormats::strFill(1,'', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right)); //FWT, IAT, CHK, TLX
                break;
        }
    
        //15    Business Function Code          (188-190)
        sb.Append('   '); //IAT, CTX, FWT, CHK, TLX
    
        //16    Payment Vehicle                 (191-193)
        switch(mSKS_EFT_FileDetail.PaymSpec)
        {
            case #CTX:
                sb.Append('ACH'); //CTX
                break;
            case #IAT:
                sb.Append('BOP'); //IAT
                break;
            case #CHK:
                sb.Append('CHK'); //CHK
                break;
            case #TLX:
                sb.Append('SWT'); //TLX
                break;
            default:
                if(this.getLogisticsAddressCountryISO(mSKS_EFT_VendorPaym.WBenBankCountryRegionId) == 'CA')
                {
                    sb.Append('SWT'); //SWT
                }
                else
                {
                    sb.Append('FWT'); //FWT
                }
    
                break;
        }
    
        //17    ACH/IACH Payment Type           (194-196)
        switch(mSKS_EFT_FileDetail.PaymSpec)
        {
            case #CTX:
                sb.Append('CTX'); //CTX
                break;
            case #IAT:
                sb.Append('CCD'); //IAT
                break;
            default:
                sb.Append('   '); //FWT, CHK, TLX
                break;
        }
    
        //18    Company ID                      (197-207)
        switch(mSKS_EFT_FileDetail.PaymSpec)
        {
            case #IAT:
                sb.Append(SKS_PP_StringFormats::strFill(11,subStr(mSKS_EFT_FileDetail.FileACHCompanyId, 1, 7), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right)); //IAT
                break;
            case #CTX:
                sb.Append(SKS_PP_StringFormats::strFill(11,mSKS_EFT_FileDetail.FileACHCompanyId, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right)); //CTX
                break;
            default:
                sb.Append(SKS_PP_StringFormats::strFill(11,'', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right)); //FWT, CHK, TLX
                break;
        }
    
        //19    Remittance Details Indicator    (208-210)
        if(SKS_EFT_Format::getCodelookupvalue('RmtDeliveryMode', mSKS_EFT_FileDetail.RecId) != '')
        {
            select firstOnly InvoiceNumber,
                             RecordSummaryRecId
                        from lSKS_EFT_FileDetail
                       where lSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId
                          && lSKS_EFT_FileDetail.InvoiceNumber != '';
        }
    
        mRemit = (lSKS_EFT_FileDetail.RecId != 0);
    
        if(mRemit)
        {
            sb.Append('YES'); //CTX, CHK, FWT, IAT, TLX
        }
        else
        {
            sb.Append(SKS_PP_StringFormats::strFill(3,'NO', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right)); //CTX, CHK, FWT, IAT, TLX
        }
    
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_PN</Name>
				<Source><![CDATA[
    //Nbr   Content
    // 1    Record ID                       (  1-  2)
    // 2    Remittance Form ID              (  3- 11)
    // 3    Document (check) Number         ( 12- 21)
    // 4    Mailing Instructions            ( 22- 26)
    // 5    Vendor Number                   ( 27- 46)
    // 6    Payer Number                    ( 47- 66)
    // 7    Bundling Reference              ( 67- 82)
    // 8    Transaction Category            ( 83- 90)
    // 9    Reserved                        ( 91-209)
    //10    Issue Only Flag                 (    120)
    
    public boolean rec_PN()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        ;
        mBatchRecordTotal++;
        // 1    Record ID                       (  1-  2)
        sb.Append('PN');    //CHK
    
        // 2    Remittance Form ID              (  3- 11)
        sb.Append(SKS_PP_StringFormats::strFill(9, this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('RmtFormId', mSKS_EFT_FileDetail.RecId)), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left)); //CHK
    
        // 3    Document (check) Number         ( 12- 21)
        sb.Append(SKS_PP_StringFormats::strFill(10, this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right)); //CHK
    
        // 4    Mailing Instructions            ( 22- 26)
        sb.Append(SKS_PP_StringFormats::strFill(5, this.CharacterReplacement(mSKS_EFT_VendorPaym.WPmtInstText1), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left)); //CHK
    
        // 5    Vendor Number                   ( 27- 46)
        sb.Append(SKS_PP_StringFormats::strFill(20,mSKS_EFT_FileDetail.AccountNum, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right)); //CHK
    
        // 6    Payer Number                    ( 47- 66)
        sb.Append(SKS_PP_StringFormats::strFill(20,'', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right)); //CHK
    
        // 7    Bundling Reference              ( 67- 82)
        sb.Append(SKS_PP_StringFormats::strFill(16,'', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right)); //CHK
    
        // 8    Transaction Category            ( 83- 90)
        sb.Append(SKS_PP_StringFormats::strFill(8,'', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right)); //CHK
    
        // 9    Reserved                        ( 91-209)
        sb.Append(SKS_PP_StringFormats::strFill(119,'', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right)); //CHK
    
        //10    Issue Only Flag                 (    120)
        sb.Append(SKS_PP_StringFormats::strFill(1,'', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right)); //CHK
    
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_R1</Name>
				<Source><![CDATA[
    //Nbr   Content
    // 1    Record ID                       (  1-  2)
    // 2    Line type indicator             (  3-  4)
    // 3    Payee Reference                 (  5- 34)
    // 4    Filler                          ( 35- 37)
    // 5    Payer Reference                 ( 38- 67)
    // 6    Filler                          ( 68- 70)
    // 7    Invoice Date                    ( 71- 78)
    // 8    Filler                          ( 79- 81)
    // 9    Additional Ref 1                ( 82-111)
    //10    Filler                          (112-114)
    //11    Additional Ref 2                (115-144)
    //12    Filler                          (145-147)
    //13    Additional Ref 3                (148-177)
    //14    Filler                          (178-180)
    //15    Additional Ref 4                (181-210)
    
    public boolean rec_R1(SKS_EFT_FileDetail _invSKS_EFT_FileDetail)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        ;
        mBatchRecordTotal++;
        // 1    Record ID                       (  1-  2)
        sb.Append('R1');    //CHK, CTX, CTX
    
        // 2    Line type indicator             (  3-  4)
        sb.Append(SKS_PP_StringFormats::strFill(2,'', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right)); //CHK, CTX
    
        // 3    Payee Reference                 (  5- 34)
        sb.Append(SKS_PP_StringFormats::strFill(30,_invSKS_EFT_FileDetail.InvoiceNumber, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right)); //CHK, CTX
    
        // 4    Filler                          ( 35- 37)
        sb.Append(SKS_PP_StringFormats::strFill(3,'', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right)); //CHK, CTX
    
        // 5    Payer Reference (Description)   ( 38- 67)
        sb.Append(SKS_PP_StringFormats::strFill(30, this.CharacterReplacement(_invSKS_EFT_FileDetail.InvoiceTransactionTxt), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right)); //CHK, CTX
    
        // 6    Filler                          ( 68- 70)
        sb.Append(SKS_PP_StringFormats::strFill(3,'', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right)); //CHK, CTX
    
        // 7    Invoice Date                    ( 71- 78)
        sb.Append(SKS_PP_StringFormats::strDateYYYYMMDD(_invSKS_EFT_FileDetail.InvoiceDate)); //CHK, CTX
    
        // 8    Filler                          ( 79- 81)
        sb.Append(SKS_PP_StringFormats::strFill(3,'', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right)); //CHK, CTX
    
        // 9    Additional Ref 1                ( 82-111)
        sb.Append(SKS_PP_StringFormats::strFill(30,'', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right)); //CHK, CTX
    
        //10    Filler                          (112-114)
        sb.Append(SKS_PP_StringFormats::strFill(3,'', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right)); //CHK, CTX
    
        //11    Additional Ref 2                (115-144)
        sb.Append(SKS_PP_StringFormats::strFill(30,'', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right)); //CHK, CTX
    
        //12    Filler                          (145-147)
        sb.Append(SKS_PP_StringFormats::strFill(3,'', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right)); //CHK, CTX
    
        //13    Additional Ref 3                (148-177)
        sb.Append(SKS_PP_StringFormats::strFill(30,'', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right)); //CHK, CTX
    
        //14    Filler                          (178-180)
        sb.Append(SKS_PP_StringFormats::strFill(3,'', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right)); //CHK, CTX
    
        //15    Additional Ref 4                (181-210)
        sb.Append(SKS_PP_StringFormats::strFill(30,'', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right)); //CHK, CTX
    
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_RA</Name>
				<Source><![CDATA[
    //Nbr   Content
    // 1    Record ID                       (  1-  2)
    // 2    Line type indicator             (  3-  4)
    // 3    Filler                          (  5- 13)
    // 4    Gross Amount                    ( 14- 28)
    // 5    Filler                          ( 29- 30)
    // 6    Discount Amount                 ( 31- 45)
    // 7    Filler                          ( 46- 47)
    // 8    Withholding Amount              ( 48- 62)
    // 9    Filler                          ( 63- 64)
    //10    Net Amount                      ( 65- 79)
    //11    Reserved                        ( 80-210)
    
    public boolean rec_RA(SKS_EFT_FileDetail _invSKS_EFT_FileDetail)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        AmountCur grossAmt;
        ;
        mBatchRecordTotal++;
        // 1    Record ID                       (  1-  2)
        sb.Append('RA');    //CHK, CTX
    
        // 2    Line type indicator             (  3-  4)
        sb.Append('  '); //CHK, CTX
    
        // 3    Filler                          (  5- 13)
        sb.Append(SKS_PP_StringFormats::strFill(9,'', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right)); //CHK, CTX
    
        // 4    Gross Amount                    ( 14- 28)
        grossAmt = _invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur + _invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur;
        switch(mSKS_EFT_FileDetail.PaymSpec)
        {
            case #CTX:
                sb.Append(SKS_PP_StringFormats::strFill(15,SKS_PP_StringFormats::strFill(10, num2str(-1*grossAmt, 0, 2, 1, 0), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left)); //CTX
                break;
            default:
                sb.Append(SKS_PP_StringFormats::strFill(15,num2str(-1*grossAmt, 0, 2, 1, 0), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left)); //CHK, CTX
                break;
        }
        mGrossTotal -= grossAmt;
    
        // 5    Filler                          ( 29- 30)
        sb.Append('  '); //CHK, CTX
    
        // 6    Discount Amount                 ( 31- 45)
        switch(mSKS_EFT_FileDetail.PaymSpec)
        {
            case #CTX:
                sb.Append(SKS_PP_StringFormats::strFill(15,SKS_PP_StringFormats::strFill(10, num2str(-1*_invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur, 0, 2, 1, 0), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left)); //CTX
                break;
            default:
                sb.Append(SKS_PP_StringFormats::strFill(15,num2str(-1*_invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur, 0, 2, 1, 0), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left)); //CHK, CTX
                break;
        }
        mDiscountTotal -= _invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur;
    
        // 7    Filler                          ( 46- 47)
        sb.Append('  '); //CHK, CTX
    
        // 8    Withholding Amount              ( 48- 62)
        sb.Append(SKS_PP_StringFormats::strFill(15,'0.00', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left)); //CHK, CTX
    
        // 9    Filler                          ( 63- 64)
        sb.Append('  '); //CHK, CTX
    
        //10    Net Amount                      ( 65- 79)
        switch(mSKS_EFT_FileDetail.PaymSpec)
        {
            case #CTX:
                sb.Append(SKS_PP_StringFormats::strFill(15,SKS_PP_StringFormats::strFill(10, num2str(-1*_invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur, 0, 2, 1, 0), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left)); //CTX
                break;
            default:
                sb.Append(SKS_PP_StringFormats::strFill(15,num2str(-1*_invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur, 0, 2, 1, 0), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left)); //CHK, CTX
                break;
        }
        mNetTotal -= _invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur;
    
        //11    Reserved                        ( 80-210)
        sb.Append(SKS_PP_StringFormats::strFill(131,'', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right)); //CHK, CTX
    
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_RC</Name>
				<Source><![CDATA[
    //Nbr   Content
    // 1    Record ID                       (  1-  2)
    // 2    Line type indicator             (  3-  4)
    // 3    Filler                          (  5- 13)
    // 4    Gross Amount                    ( 14- 28)
    // 5    Filler                          ( 29- 30)
    // 6    Discount Amount                 ( 31- 45)
    // 7    Filler                          ( 46- 47)
    // 8    Withholding Amount              ( 48- 62)
    // 9    Filler                          ( 63- 64)
    //10    Net Amount                      ( 65- 79)
    //11    Reserved                        ( 80-210)
    
    public boolean rec_RC()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        ;
        mBatchRecordTotal++;
        // 1    Record ID                       (  1-  2)
        sb.Append('RC');    //CHK, CTX
    
        // 2    Line type indicator             (  3-  4)
        sb.Append('  '); //CHK, CTX
    
        // 3    Filler                          (  5- 13)
        sb.Append(SKS_PP_StringFormats::strFill(9,'', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right)); //CHK, CTX
    
        // 4    Gross Amount                    ( 14- 28)
        sb.Append(SKS_PP_StringFormats::strFill(15,num2str(mGrossTotal, 0, 2, 1, 0), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left)); //CHK, CTX
    
        // 5    Filler                          ( 29- 30)
        sb.Append('  '); //CHK, CTX
    
        // 6    Discount Amount                 ( 31- 45)
        sb.Append(SKS_PP_StringFormats::strFill(15,num2str(mDiscountTotal, 0, 2, 1, 0), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left)); //CHK, CTX
    
        // 7    Filler                          ( 46- 47)
        sb.Append('  '); //CHK, CTX
    
        // 8    Withholding Amount              ( 48- 62)
        sb.Append(SKS_PP_StringFormats::strFill(15,'0.00', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left)); //CHK, CTX
    
        // 9    Filler                          ( 63- 64)
        sb.Append('  '); //CHK, CTX
    
        //10    Net Amount                      ( 65- 79)
        sb.Append(SKS_PP_StringFormats::strFill(15,num2str(mNetTotal, 0, 2, 1, 0), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left)); //CHK, CTX
    
        //11    Reserved                        ( 80-210)
        sb.Append(SKS_PP_StringFormats::strFill(131,'', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right)); //CHK, CTX
    
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSequence</Name>
				<Source><![CDATA[
    private void setSequence()
    {
        SKS_EFT_FileFormat sks_eft_fileformat;
        ;
    
        select firstOnly forUpdate sks_eft_fileformat
            where sks_eft_fileformat.FormatId == mSKS_EFT_FileFormat.FormatId;
    
        if(sks_eft_fileformat)
        {
            sks_eft_fileformat.NextSequenceNumber = mSequenceNumber;
            sks_eft_fileformat.update();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>