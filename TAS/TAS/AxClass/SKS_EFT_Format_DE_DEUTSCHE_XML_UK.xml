<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_DE_DEUTSCHE_XML_UK</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_DE_DEUTSCHE_XML_UK extends SKS_EFT_Format_ISO_20022_001001003
/// </summary>
class SKS_EFT_Format_DE_DEUTSCHE_XML_UK extends SKS_EFT_Format_ISO_20022_001001003
{
    #define.FormatVersion('20230420')
    #define.UK_BACS('UK-BACS')
    #define.ACH_CCD('ACH-CCD')
    #define.ACH_PPD('ACH-PPD')
    #define.ACH_IAT('ACH-IAT')
    #define.DOM_WIRE('DOM-WIRE')
    #define.INT_WIRE('INT-WIRE')
    #define.EMEA_URGP('EMEA-URGP')
    #define.EMEA_NURG('EMEA-NURG')

    #define.DOM_URGT('DOM-URGT')//DevOps20463

    #define.SEPA('SEPA')                    //SKS#VSTS:14367
    #define.NON_SEPA('NON-SEPA')            //SKS#VSTS:14367
    #define.QRR('QRR')

    
    str         initiatingprtyId;



}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_Cdtr</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_Cdtr(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.79: Cdtr
        //              Nm
        //              PstlAdr
        //              Id
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeCdtr;
        boolean value=true;
        if(mSKS_EFT_FileDetail.FormatId=='DE-DEUTSCHE-XML-UK' && mSKS_EFT_FileDetail.PaymSpec == #SEPA)
        {
            value =false;
        }
    
        //          2.79: Cdtr
        nodeCdtr = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('Cdtr'));
    
        //              Nm
        this.node_CdtTrfTxInf_Cdtr_Nm(nodeCdtr);
    
        //              PstlAdr
        this.node_PmtInf_Cdtr_PstlAdr(nodeCdtr);

        if(value)
        {
            //              Id
            this.node_PmtInf_Cdtr_Id(nodeCdtr);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_Cdtr_Nm</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_Cdtr_Nm(XmlElement _nodeCdtr)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.79: Cdtr
        //              Nm
        //------------------------------------------------------------------------------------------------------
        int length;
        str name = mSKS_EFT_FileDetail.AccountName;
    
        if(mRemittanceName != '')
        {
            name = mRemittanceName;
        }
       
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #ACH_CCD:
            case #ACH_PPD:
                length = 22;
                break;
            case #ACH_IAT:
            case #DOM_WIRE:
            case #DOM_URGT:
                length = 35;
                break;
            case #SEPA:
                if(mSKS_EFT_FileDetail.FormatId =='EU-DEUTSCHE-XML-UK')
                {
                    length = 140;
                }
                else
                {
                    length = 35;
                }
                break;
            case #NON_SEPA:
                length = 140;     //SKS#DevOps:16991
                break;
            default:
                length = 70;
                break;
        }
        
        //              Nm
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeCdtr, 'Nm', this.CharacterReplacement(name), length);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_CdtrAcct</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_CdtrAcct(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.80: CdtrAcct
        //              Id
        //                  IBAN
        //------------------------------------------------------------------------------------------------------
    
        XmlElement nodeCdtrAcct;
        XmlElement nodeCdtrAcctId;
        XmlElement nodeCdtrAcctIdOthr;
        XmlElement nodeCdtrAcctTp;
        str value;
        VendBankAccount vendBankAccount;
        vendBankAccount = VendBankAccount::findByCompany(msks_eft_FileDetail.AccountCompany, msks_eft_FileDetail.AccountNum, msks_eft_FileDetail.DepBankAccountId);
    
        //          2.80: CdtrAcct
    
        //          2.80: CdtrAcct
        nodeCdtrAcct = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('CdtrAcct'));
    
        //              Id
        nodeCdtrAcctId = nodeCdtrAcct.appendChild(xmlDoc.createElement('Id'));
    
        if(vendBankAccount.QRIBAN_CH && mSKS_EFT_FileDetail.PaymSpec == #QRR)
        {
            //                  IBAN
            nodeCdtrAcctId = SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdtrAcctId, 'IBAN', vendBankAccount.QRIBAN_CH);
        }
        else if(mSKS_EFT_FileDetail.DepBankIBAN != '' &&
           (mSKS_EFT_FileFormatPaymSpec.TransactionCode != #ACH_CCD  &&
            mSKS_EFT_FileFormatPaymSpec.TransactionCode != #ACH_PPD  &&
            mSKS_EFT_FileFormatPaymSpec.TransactionCode != #ACH_IAT     &&
            mSKS_EFT_FileFormatPaymSpec.TransactionCode != #DOM_WIRE))
        {
            //                  IBAN
            nodeCdtrAcctId = SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdtrAcctId, 'IBAN', mSKS_EFT_FileDetail.DepBankIBAN);
        }
        else
        {
            //                  Othr
            nodeCdtrAcctIdOthr = nodeCdtrAcctId.appendChild(xmlDoc.createElement('Othr'));
    
            //                      Id
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdtrAcctIdOthr, 'Id', mSKS_EFT_FileDetail.DepBankAcct);
        }
    
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #ACH_CCD ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #ACH_CCD ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #ACH_IAT )
        {
            //              Tp
            //                  Cd/Ptry
            if(mSKS_EFT_FileDetail.DepBankAcctType == BankAccountType::SavingsAccount)
            {
                value = 'SVGS';
            }
            else
            {
                value = 'CACC';
            }
    
            nodeCdtrAcctTp = nodeCdtrAcct.appendChild(xmlDoc.createElement('Tp'));
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdtrAcctTp, 'Cd', value);
        }
        if(mSKS_EFT_FileDetail.PaymSpec == #DOM_URGT)
        {
            //              Ccy
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdtrAcct, 'Ccy', mSKS_EFT_FileDetail.PaymentCurrencyCode);
        }       
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_RgltryRptg</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_RgltryRptg(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.89: RgltryRptg
        //              Dtls
        //                  Inf
        //------------------------------------------------------------------------------------------------------
    
        XmlElement  nodeRgltryRptg;
        XmlElement  nodeDtls;
        str         bankPurpCode, bankPurpName;
    
        msks_EFT_FileDetail_PaymentLine = sks_EFT_FileDetail_PaymentLine::find(mSKS_EFT_FileDetail.RecId);

        bankPurpName = this.CharacterReplacement(msks_EFT_FileDetail_PaymentLine.BankCentralBankPurposeName);
        bankPurpCode = this.CharacterReplacement(msks_EFT_FileDetail_PaymentLine.BankCentralBankPurposeCode);
        
        if(bankPurpCode || bankPurpName)
        {
            nodeRgltryRptg = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('RgltryRptg'));
            
            nodeDtls = nodeRgltryRptg.appendChild(xmlDoc.createElement('Dtls'));

            if(bankPurpCode)
            {
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeDtls, 'Cd', this.CharacterReplacement(bankPurpCode));
            }
            if(bankPurpName)
            {
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeDtls, 'Inf', this.CharacterReplacement(bankPurpName));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_BtchBookg</Name>
				<Source><![CDATA[
    protected void node_PmtInf_BtchBookg(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.3: BtchBookg
        //------------------------------------------------------------------------------------------------------

        if(mSKS_EFT_FileDetail.FormatId == 'DE-DEUTSCHE-XML-EU')    //SKS_VSTS_14903
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodePmtInf, 'BtchBookg', 'false');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_CdtrAgt</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_CdtrAgt(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.77: CdtrAgt
        //              FinInstnId
        //                  BIC
        //                  PstlAdr
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeCdtrAgt;
        XmlElement nodeFinInstnId;
    
        //          2.77: CdtrAgt
        nodeCdtrAgt = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('CdtrAgt'));
    
        //              FinInstnId
        nodeFinInstnId = nodeCdtrAgt.appendChild(xmlDoc.createElement('FinInstnId'));
    
        if(mSKS_EFT_FileDetail.DepSwiftNo != ''  &&
          ((!mSKS_EFT_FileDetail.DepBankTransit && mSKS_EFT_FileFormatPaymSpec.TransactionCode != #INT_WIRE)||   // SKG#VSTS:7362
          (mSKS_EFT_FileFormatPaymSpec.TransactionCode == #INT_WIRE &&
          (mBankAccountTable.CurrencyCode != 'USD' || mSKS_EFT_FileDetail.PaymentCurrencyCode != 'USD'))    ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #EMEA_URGP ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #EMEA_NURG ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #SEPA      ||     //SKS#VSTS:14367
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #NON_SEPA  ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #DOM_URGT ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #QRR))
        {
             //                  BICDOM_URGT
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeFinInstnId, 'BIC', mSKS_EFT_FileDetail.DepSwiftNo, 0, false);
        }
        else
        {
            //                  ClrSysMmbId
            this.node_CdtTrfTxInf_CdtrAgt_MmbId(nodeFinInstnId);
        }
        
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode != #SEPA &&
           mSKS_EFT_FileFormatPaymSpec.TransactionCode != #NON_SEPA)
        {
            //                  Nm
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeFinInstnId, 'Nm', this.CharacterReplacement(mSKS_EFT_FileDetail_BenBank.BenBankName), 140, false);
        }
    
        //                  PstlAdr
        this.node_CdtTrfTxInf_CdtrAgt_PstlAdr(nodeFinInstnId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_CdtrAgt_MmbId</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_CdtTrfTxInf_CdtrAgt_MmbId
    /// </summary>
    /// <param name = "_nodeFinInstnId">_nodeFinInstnId</param>
    protected void node_CdtTrfTxInf_CdtrAgt_MmbId(XmlElement _nodeFinInstnId)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.77: CdtrAgent
        //          ClrSysMmbId
        //              ClrSysId
        //                  Cd
        //          MmbId
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeClrSysMmbId;
        XmlElement nodeClrSysId;
    
    
        if(mSKS_EFT_FileDetail.DepBankTransit != '')
        {
            //          ClrSysMmbId
            nodeClrSysMmbId = _nodeFinInstnId.appendChild(xmlDoc.createElement('ClrSysMmbId'));
    
            if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #EMEA_URGP ||
               mSKS_EFT_FileFormatPaymSpec.TransactionCode == #EMEA_NURG)
            {
                //                    ClrSysId
                nodeClrSysId = nodeClrSysMmbId.appendChild(xmlDoc.createElement('ClrSysId'));
    
                //                          Cd
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeClrSysId, 'Cd', 'GBDSC');
            }
    
            //          MmbId
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeClrSysMmbId, 'MmbId', mSKS_EFT_FileDetail.DepBankTransit, 35);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_CdtrAgt_PstlAdr</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_CdtrAgt_PstlAdr(XmlElement _nodeCdtrAgt)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.77: CdtrAgent
        //          PstlAdr
        //------------------------------------------------------------------------------------------------------
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #EMEA_URGP ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #EMEA_NURG ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #DOM_URGT||
            mSKS_EFT_FileFormatPaymSpec.TransactionCode == #QRR )
        {
            this.node_PstlAdr(_nodeCdtrAgt, mSKS_EFT_FileDetail_BenBank.BenBankCountryRegionId, mSKS_EFT_FileDetail_BenBank.BenBankAddr, '', mSKS_EFT_FileDetail_BenBank.BenBankCity, 35, '', '', true);
        }
        else if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #SEPA ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #NON_SEPA)        //SKS#VSTS:14367
        {
            this.node_PstlAdr(_nodeCdtrAgt, mSKS_EFT_FileDetail_BenBank.BenBankCountryRegionId, mSKS_EFT_FileDetail_BenBank.BenBankAddr, '', mSKS_EFT_FileDetail_BenBank.BenBankCity, 35, '', '', true);
        }
        else
        {
            this.node_PstlAdr(_nodeCdtrAgt, mSKS_EFT_VendorPaym.WBenBankCountryRegionId, mSKS_EFT_VendorPaym.WBenBankAddr, '', ''); // SKS#VSTS:14367
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_IntrmyAgt1</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_IntrmyAgt1(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.71: IntrmyAgt1
        //              FinInstnId
        //                  BIC
        //                  ClrSysMmbId
        //                      MmbId
        //                  Nm
        //                  PstlAdr
        //              BrnchId
        //                  Id
        //------------------------------------------------------------------------------------------------------
    
        XmlElement nodeIntrmyAgt1;
        XmlElement nodeFinInstnId;
        XmlElement nodeBrnchId;
        XmlElement nodeClrSysMmbId;
        XmlElement nodeClrSysId;
    
        if(mSKS_EFT_FileDetail_Intermediary.IntBankSwift != '' || mSKS_EFT_FileDetail_Intermediary.IntBankId != '')
        {
            //          2.71: IntrmyAgt1
            nodeIntrmyAgt1 = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('IntrmyAgt1'));
    
            //              FinInstnId
            nodeFinInstnId = nodeIntrmyAgt1.appendChild(xmlDoc.createElement('FinInstnId'));
    
            if(mSKS_EFT_FileDetail_Intermediary.IntBankSwift != '')
            {
                //                  BIC
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeFinInstnId, 'BIC', mSKS_EFT_FileDetail_Intermediary.IntBankSwift, 0, false);
            }
    
            //                  ClrSysMmbId
            else if(mSKS_EFT_FileDetail_Intermediary.IntBankId != '')
            {
                nodeClrSysMmbId = nodeFinInstnId.appendChild(xmlDoc.createElement('ClrSysMmbId'));
    
                if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #EMEA_URGP ||
                   mSKS_EFT_FileFormatPaymSpec.TransactionCode == #EMEA_NURG)
                {
                    //                    ClrSysId
                    nodeClrSysId = nodeClrSysMmbId.appendChild(xmlDoc.createElement('ClrSysId'));
    
                    //                          Cd
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeClrSysId, 'Cd', 'GBDSC');
                }
                //                      MmbId
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeClrSysMmbId, 'MmbId', mSKS_EFT_FileDetail_Intermediary.IntBankId, 0, false);
            }
    
            //                  Nm
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeFinInstnId, 'Nm', this.CharacterReplacement(mSKS_EFT_FileDetail_Intermediary.IntBankName), 140, false);
    
            //                  PstlAdr
            this.node_PstlAdr(nodeFinInstnId, mSKS_EFT_FileDetail_Intermediary.IntBankCountryRegionId, mSKS_EFT_FileDetail_Intermediary.IntBankAddr + '' + mSKS_EFT_FileDetail_Intermediary.IntBankAddr2, '', mSKS_EFT_FileDetail_Intermediary.IntBankCity);
    
            //              BrnchId
            if(mSKS_EFT_FileDetail_Intermediary.IntBankBranch != '')
            {
                nodeBrnchId = nodeIntrmyAgt1.appendChild(xmlDoc.createElement('BrnchId'));
                //              Id
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeBrnchId, 'Id', this.CharacterReplacement(mSKS_EFT_FileDetail_Intermediary.IntBankBranch));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_RmtInf</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_RmtInf(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.98: RmtInf
        //              2.99: Ustrd
        //------------------------------------------------------------------------------------------------------
    
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #INT_WIRE ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #QRR)
        {
            this.node_CdtTrfTxInf_RmtInf_Strd(_nodeCdtTrfTxInf);
        }       
        else
        {
            this.node_CdtTrfTxInf_RmtInf_Ustrd(_nodeCdtTrfTxInf);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_RmtInf_Ustrd</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_CdtTrfTxInf_RmtInf_Ustrd
    /// </summary>
    /// <param name = "_nodeCdtTrfTxInf">_nodeCdtTrfTxInf</param>
    protected void node_CdtTrfTxInf_RmtInf_Ustrd(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.98: RmtInf
        //              2.99: Ustrd
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeRmtInf;
        str invNumbers;
    
        invNumbers = this.getInvoiceNbrs();
        if(invNumbers)
        {
            //          2.98: RmtInf
            nodeRmtInf = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('RmtInf'));
    
            if(mSKS_EFT_FileDetail.FormatId == 'DE-DEUTSCHE-XML-EU' && (mSKS_EFT_FileDetail_BenBank.BenBankCountryRegionId =='CHE' ||mSKS_EFT_FileDetail_BenBank.BenBankCountryRegionId =='DEU'))//DevOps20318//DevOps20868
            {
                //              2.99: Ustrd
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRmtInf, 'Ustrd', invNumbers, 130);
            }
            else
            {
                //              2.99: Ustrd
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRmtInf, 'Ustrd', invNumbers, 140);
            }
        }
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_RmtInf_Strd</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_RmtInf_Strd(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.98: RmtInf
        //              Strd
        //------------------------------------------------------------------------------------------------------
        SKS_EFT_FileDetail invSKS_EFT_FileDetail;
        XmlElement nodeRmtInf;
        XmlElement nodeStrd;
        XmlElement nodeRfrdDocInf;
        XmlElement nodeRfrdDocAmt;
        XmlElement nodeTp;
        str value;
        Boolean firstRec = true;
    
    
        while select invSKS_EFT_FileDetail where invSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId
        {
            if(invSKS_EFT_FileDetail.InvoiceNumber != '')
            {
                if(firstRec)
                {
                    //          2.98: RmtInf
                    nodeRmtInf = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('RmtInf'));
                    firstRec = false;
                }
    
                //              2.100: Strd
                nodeStrd = nodeRmtInf.appendChild(xmlDoc.createElement('Strd'));

                if(mSKS_EFT_FileDetail.PaymSpec == #QRR)
                {
                    this.node_CdtTrfTxInf_RmtInf_RfrdDocInf(nodeStrd, invSKS_EFT_FileDetail);
                }
                else
                {
    
                    //              2.101: RfrdDocInf
                    nodeRfrdDocInf = nodeStrd.appendChild(xmlDoc.createElement('RfrdDocInf'));
    
                    //                  2.102: RfrdDocTp
                    nodeTp = nodeRfrdDocInf.appendChild(xmlDoc.createElement('RfrdDocTp'));
    
                    //                          2.104: Cd
                    if(invSKS_EFT_FileDetail.InvoiceSettleAmountCur > 0)
                    {
                        value = 'CREN';
                    }
                    else
                    {
                        value = 'CINV';
                    }
    
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeTp, 'Cd', value);
    
                    //              2.107: RfrdDocNb
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRfrdDocInf, 'RfrdDocNb', invSKS_EFT_FileDetail.InvoiceNumber);
    
                    //              2.108: RfrdDocRltdDt
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeStrd, 'RfrdDocRltdDt', SKS_PP_StringFormats::strDateYYYYMMDD(invSKS_EFT_FileDetail.InvoiceDate, DateSeparator::Hyphen));
    
                    //              2.109 RfrdDocAmt
                    nodeRfrdDocAmt = nodeStrd.appendChild(xmlDoc.createElement('RfrdDocAmt'));
    
                    this.node_RmtInf_Amt(nodeRfrdDocAmt, invSKS_EFT_FileDetail);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_RmtInf_RfrdDocInf</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_CdtTrfTxInf_RmtInf_RfrdDocInf
    /// </summary>
    /// <param name = "nodeStrd">nodeStrd</param>
    /// <param name = "_invSKS_EFT_FileDetail">_invSKS_EFT_FileDetail</param>
    protected void node_CdtTrfTxInf_RmtInf_RfrdDocInf(XmlElement nodeStrd, SKS_EFT_FileDetail _invSKS_EFT_FileDetail)
    {
        XmlElement nodeCdtrRefInf,nodeTp,nodeCdOrPrtry;

        if(_invSKS_EFT_FileDetail.PaymId)
        {
            //              CdtrRefInf
            nodeCdtrRefInf=nodestrd.appendChild(xmlDoc.createElement('CdtrRefInf'));

            //               Tp
            nodeTp=nodeCdtrRefInf.appendChild(xmlDoc.createElement('Tp'));

            //               CdOrPrtry
            nodeCdOrPrtry=nodeTp.appendChild(xmlDoc.createElement('CdOrPrtry'));

            //               Cd
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdOrPrtry, 'Prtry', 'QRR');
               
            //               Ref
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdtrRefInf, 'Ref', _invSKS_EFT_FileDetail.PaymId, 27);
        }
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_GrpHdr_InitgPty_Id</Name>
				<Source><![CDATA[
    protected void node_GrpHdr_InitgPty_Id(XmlElement _nodeInitgPty)
    {
        //------------------------------------------------------------------------------------------------------
        //      1.8: InitgPty
        //          9.1.12: Id
        //              9.1.13: OrgId
        //                  9.1.15: Othr
        //                      9.1.1.16: Id
        //                      9.1.17: SchmeNm
        //                          9.1.18: Cd
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeId;
        XmlElement nodeOrgId;
        XmlElement nodeOther;
        XmlElement nodeSchmeNm;
    
        initiatingprtyId = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('InitiatingprtyId', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank));
        if(mSKS_EFT_FileDetail_BankAccount.WOrdPartySWIFTNo != '')
        {
            //          9.1.12: Id
            nodeId = _nodeInitgPty.appendChild(xmlDoc.createElement('Id'));
    
            //              9.1.13: OrgId
            nodeOrgId = nodeId.appendChild(xmlDoc.createElement('OrgId'));
    
            //                  9.1.14: BICOrBEI
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeOrgId, 'BICOrBEI', mSKS_EFT_FileDetail_BankAccount.WOrdPartySWIFTNo);
        }
        else if(initiatingprtyId)
        {
            //          9.1.12: Id
            nodeId = _nodeInitgPty.appendChild(xmlDoc.createElement('Id'));
    
            //              9.1.13: OrgId
            nodeOrgId = nodeId.appendChild(xmlDoc.createElement('OrgId'));
    
            //                  9.1.15: Other
            nodeOther = nodeOrgId.appendChild(xmlDoc.createElement('Othr'));
    
            //                      9.1.1.16: Id
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeOther, 'Id', this.CharacterReplacement(InitiatingprtyId), 35);
    
            //                      9.1.17: SchmeNm
            nodeSchmeNm = nodeOther.appendChild(xmlDoc.createElement('SchmeNm'));
    
            //                          9.1.18: Cd
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeSchmeNm, 'Cd', 'CUST');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_Cdtr_Id</Name>
				<Source><![CDATA[
    protected void node_PmtInf_Cdtr_Id(XmlElement _nodeCdtr)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.79: Cdtr
        //          Id
        //              OrgId
        //                  Othr
        //                      Id
        //                      SchemeName
        //          or
        //              PrvtId
        //                  Othr
        //                      Id
        //                      SchemeName
        //------------------------------------------------------------------------------------------------------
    
        XmlElement nodeId;
        XmlElement nodeOrgId;
        XmlElement nodePrvtId;
        XmlElement nodeOthr;
        XmlElement nodeSchmeNm;
    
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #EMEA_URGP ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #EMEA_NURG ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #SEPA)        //SKS#VSTS:14367
        {
            //          Id
            nodeId = _nodeCdtr.appendChild(xmlDoc.createElement('Id'));
    
            if(mSKS_EFT_FileDetail.VATNum != '')
            {
                nodeOrgId = nodeId.appendChild(xmlDoc.createElement('OrgId'));
    
                nodeOthr = nodeOrgId.appendChild(xmlDoc.createElement('Othr'));
    
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeOthr, 'Id', mSKS_EFT_FileDetail.VATNum);
    
                nodeSchmeNm = nodeOthr.appendChild(xmlDoc.createElement('SchmeNm'));
    
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeSchmeNm, 'Cd', 'TXID');
            }
            else
            {
                nodePrvtId = nodeId.appendChild(xmlDoc.createElement('PrvtId'));
    
                nodeOthr = nodePrvtId.appendChild(xmlDoc.createElement('Othr'));
    
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeOthr, 'Id', mSKS_EFT_FileDetail.AccountNum);
    
                nodeSchmeNm = nodeOthr.appendChild(xmlDoc.createElement('SchmeNm'));
    
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeSchmeNm, 'Cd', 'CUST');
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_Cdtr_PstlAdr</Name>
				<Source><![CDATA[
    protected void node_PmtInf_Cdtr_PstlAdr(XmlElement _nodeCdtr)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.19: Cdtr
        //          PstlAdr
        //------------------------------------------------------------------------------------------------------
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #ACH_IAT      ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #EMEA_URGP    ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #EMEA_NURG)
        {
            this.node_PstlAdr(_nodeCdtr, mRemittanceCountryRegionId, mRemittanceAdrLine1, mRemittanceZipCode, mRemittanceCity, 0, '', mRemittanceState, true);
        }
        else if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #SEPA ||         //SKS#VSTS:14367
                mSKS_EFT_FileFormatPaymSpec.TransactionCode == #NON_SEPA ||
                mSKS_EFT_FileFormatPaymSpec.TransactionCode == #DOM_URGT||
                mSKS_EFT_FileFormatPaymSpec.TransactionCode == #QRR)
        {
            this.node_PstlAdr(_nodeCdtr, mRemittanceCountryRegionId, mRemittanceAdrLine1, mRemittanceZipCode, mRemittanceCity, 0, mRemittanceAdrLine2, mRemittanceState, true);
        }
        else
        {
            super(_nodeCdtr);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_ChrgBr</Name>
				<Source><![CDATA[
    protected void node_PmtInf_ChrgBr(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.24 ChrgBr
        //------------------------------------------------------------------------------------------------------
    
        //      2.24 ChrgBr

        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode != #SEPA &&       //SKS#DevOps:15277 -->
           mSKS_EFT_FileFormatPaymSpec.TransactionCode != #NON_SEPA)
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodePmtInf, 'ChrgBr', this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('Charges', mSKS_EFT_FileDetail.RecId)), 0, false);
        } //SKS#DevOps:15277 <--
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_Dbtr</Name>
				<Source><![CDATA[
    protected void node_PmtInf_Dbtr(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.19: Dbtr
        //          Nm
        //          PstlAdr
        //          Id
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeDbtr;
    
        //      2.19: Dbtr
        nodeDbtr = nodePmtInf.appendChild(xmlDoc.createElement('Dbtr'));
    
        //          Nm
        this.node_PmtInf_Dbtr_Nm(nodeDbtr);
    
        //          Id
        this.node_PmtInf_Dbtr_Id(nodeDbtr);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_Dbtr_Nm</Name>
				<Source><![CDATA[
    protected void node_PmtInf_Dbtr_Nm(XmlElement _nodeDbtr)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.19: Dbtr
        //          Nm
        //------------------------------------------------------------------------------------------------------
        
        int len;
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #SEPA:
            case #NON_SEPA:
            case #DOM_URGT:
            case #QRR:
                len = 140;
                break;
            default:
                len = 70;
                break;
        }
        //          Nm
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeDbtr, 'Nm', this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyName), len, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_Dbtr_Id</Name>
				<Source><![CDATA[
    protected void node_PmtInf_Dbtr_Id(XmlElement _nodeDbtr)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.19: Dbtr
        //          9.1.13: OrgId
        //              9.1.14: BICOrBEI
        //                      OR
        //          9.1.12: Id
        //              9.1.13: OrgId
        //                  9.1.15: Othr
        //                      9.1.16: Id
        //                          9.1.17: SchmeNm
        //                              9.1.18: Cd
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeId;
        XmlElement nodeOrgId;
        XmlElement nodeOther;
        XmlElement nodeSchmeNm;
    
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #INT_WIRE     ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #EMEA_URGP    ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #EMEA_NURG    ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #SEPA         ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #NON_SEPA)
        {
            if(mSKS_EFT_FileDetail_BankAccount.WOrdPartySWIFTNo != '')
            {
                //          9.1.12: Id
                nodeId = _nodeDbtr.appendChild(xmlDoc.createElement('Id'));
    
                //              9.1.13: OrgId
                nodeOrgId = nodeId.appendChild(xmlDoc.createElement('OrgId'));
    
                //                  9.1.14: BICOrBEI
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeOrgId, 'BICOrBEI', mSKS_EFT_FileDetail_BankAccount.WOrdPartySWIFTNo, 0);
            }
            else if(InitiatingprtyId)
            {
                //          9.1.12: Id
                nodeId = _nodeDbtr.appendChild(xmlDoc.createElement('Id'));
    
                //              9.1.13: OrgId
                nodeOrgId = nodeId.appendChild(xmlDoc.createElement('OrgId'));
    
                //                  9.1.15: Other
                nodeOther = nodeOrgId.appendChild(xmlDoc.createElement('Othr'));
    
                //                      9.1.1.16: Id
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeOther, 'Id', this.CharacterReplacement(InitiatingprtyId), 35);
    
                //                      9.1.17: SchmeNm
                nodeSchmeNm = nodeOther.appendChild(xmlDoc.createElement('SchmeNm'));
    
                if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #EMEA_URGP ||
                   mSKS_EFT_FileFormatPaymSpec.TransactionCode == #EMEA_NURG)
                {
                    //                          9.1.9: Prtry
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeSchmeNm, 'Prtry', 'OTHR');
                }
                else
                {
                    //                          9.1.18: Cd
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeSchmeNm, 'Cd', 'BANK');
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_DbtrAcct</Name>
				<Source><![CDATA[
    protected void node_PmtInf_DbtrAcct(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.20: DbtrAcct
        //          Id
        //              IBAN
        //              Othr
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeDbtrAcct;
        XmlElement nodeDbtrAcctId;
        XmlElement nodeOthr;
    
        //      2.20: DbtrAcct
        nodeDbtrAcct = nodePmtInf.appendChild(xmlDoc.createElement('DbtrAcct'));
    
        //          Id
        nodeDbtrAcctId = nodeDbtrAcct.appendChild(xmlDoc.createElement('Id'));
    
        if(mSKS_EFT_FileDetail.BankBankIBAN && (!mSKS_EFT_FileDetail.BankBankAcct ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #INT_WIRE     ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #EMEA_URGP    ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #EMEA_NURG    ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #SEPA         ||          //SKS#VSTS:14367
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #NON_SEPA ||               //SKS#VSTS:14367
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #QRR ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #DOM_URGT))
        {
            //              IBAN
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeDbtrAcctId, 'IBAN', mSKS_EFT_FileDetail.BankBankIBAN);
        }
        else
        {
            //              Othr
            nodeOthr = nodeDbtrAcctId.appendChild(xmlDoc.createElement('Othr'));
    
            //                  Id
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeOthr, 'Id', mSKS_EFT_FileDetail.BankBankAcct);
        }
        //          Ccy
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeDbtrAcct, 'Ccy', mSKS_EFT_FileDetail.CurrencyCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_DbtrAgt</Name>
				<Source><![CDATA[
    protected void node_PmtInf_DbtrAgt(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.70: DbtrAgt
        //              FinInstnId
        //                  CmbndId
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeDbtrAgt;
        XmlElement nodeFinInstnId;
        XmlElement nodeClrSysMmbId;
        XmlElement nodePstlAdr;
        XmlElement nodeBrnchId;
        str valueSwift,valueTransit,branchId;
        boolean country,printName,fulladdress,printBranchID;
    
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #ACH_CCD:
            case #ACH_PPD:
            case #ACH_IAT:
            case #DOM_WIRE:
            case #INT_WIRE:
            case #EMEA_URGP:
            case #EMEA_NURG:
                valueSwift = mSKS_EFT_FileDetail.BankBankSwiftNo;
                break;
            case #DOM_URGT:
                valueSwift = mSKS_EFT_FileDetail.BankBankSwiftNo;
                branchId = SKS_EFT_Format::getCodelookupvalue('DbtrAgtBranchId', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank);
                printName=true;
                fulladdress=true;
                printBranchID=true;
                break;
            case #UK_BACS:
                valueTransit = mSKS_EFT_FileDetail.BankBankTransit;
                break;
            case #SEPA:                         //SKS#VSTS:14367
            case #NON_SEPA:                     //SKS#VSTS:14367
                valueSwift = mSKS_EFT_FileDetail.BankBankSwiftNo;
                valueTransit = mSKS_EFT_FileDetail.BankBankTransit;
                country = true;
                break;
            case #QRR:
                valueSwift = mSKS_EFT_FileDetail.BankBankSwiftNo;
                valueTransit = mSKS_EFT_FileDetail.BankBankTransit;
                branchId = SKS_EFT_Format::getCodelookupvalue('DbtrAgtBranchId', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank);
                fulladdress = true;
                printBranchID=true;
                break;
            default:
                valueSwift = '';
                valueTransit = '';
                break;
        }
    
        if(valueSwift || valueTransit)
        {
    
            //          2.70: DbtrAgt
            nodeDbtrAgt = nodePmtInf.appendChild(xmlDoc.createElement('DbtrAgt'));
    
            //                   FinInstnId
            nodeFinInstnId = nodeDbtrAgt.appendChild(xmlDoc.createElement('FinInstnId'));
    
            if(valueSwift)
            {
                //              BIC
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeFinInstnId, 'BIC', valueSwift, 0, false);
            }
            else if(valueTransit)
            {
                //                            ClrSysMmbId
                nodeClrSysMmbId = nodeFinInstnId.appendChild(xmlDoc.createElement('ClrSysMmbId'));
                //          MmbId
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeClrSysMmbId, 'MmbId', valueTransit, 35);
            }

            select msks_EFT_FileDetail_BankAddress where
                msks_EFT_FileDetail_BankAddress.RefRecId == mSKS_EFT_FileDetail.RecID
                && msks_EFT_FileDetail_BankAddress.AddressType == SKS_EFT_AddressType::BankAddress;

            if(printName)
            {
                //                  Nm
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeFinInstnId, 'Nm', msks_EFT_FileDetail_BankAddress.Name, 140, false);
            }
            if(country && mSKS_EFT_FileDetail_BankAccount.WOrdPartyCountryRegionId)
            {
                //              PstlAdr
                nodePstlAdr = nodeFinInstnId.appendChild(xmlDoc.createElement('PstlAdr'));
    
                //                  Ctry
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePstlAdr, 'Ctry', this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_BankAccount.WOrdPartyCountryRegionId), 0, false);
            }
            else if(fulladdress)
            {
                this.node_PstlAdr(nodeFinInstnId, msks_EFT_FileDetail_BankAddress.CountryRegionId, msks_EFT_FileDetail_BankAddress.Addr, msks_EFT_FileDetail_BankAddress.ZipCode, msks_EFT_FileDetail_BankAddress.City, 0, msks_EFT_FileDetail_BankAddress.Addr2, msks_EFT_FileDetail_BankAddress.State,true);
            }        
            if(branchId && printBranchID)
            {
                //                  BrnchId
                nodeBrnchId = nodeDbtrAgt.appendChild(xmlDoc.createElement('BrnchId'));

                //                      Id
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeBrnchId, 'Id', branchId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_PmtTpInf_CtgyPurp</Name>
				<Source><![CDATA[
    protected void node_PmtInf_PmtTpInf_CtgyPurp(XmlElement _nodePmftTpInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.14: CtgyPurp
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeCtgyPurp;
    
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #INT_WIRE)
        {
            //          2.11: CtgyPurp
            nodeCtgyPurp = _nodePmftTpInf.appendChild(xmlDoc.createElement('CtgyPurp'));
    
            //              2.12: Cd
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCtgyPurp, 'Cd', 'INTC');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_PmtTpInf_LclInstrm</Name>
				<Source><![CDATA[
    protected void node_PmtInf_PmtTpInf_LclInstrm(XmlElement _nodePmftTpInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.11: LclInstrm
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeLclInstrm;
        str value;
    
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #ACH_CCD:
                value = 'CCD';
                break;
            case #ACH_PPD:
                value = 'PPD';
                break;
            case #ACH_IAT:
                value = 'IAT';
                break;
            default:
                value = '';
                break;
        }
        if(value)
        {
            //          2.11: LclInstrm
            nodeLclInstrm = _nodePmftTpInf.appendChild(xmlDoc.createElement('LclInstrm'));
    
            //              2.12: Cd
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeLclInstrm, 'Cd', value);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_PmtTpInf_SvcLvl_Cd</Name>
				<Source><![CDATA[
    protected void node_PmtInf_PmtTpInf_SvcLvl_Cd(XmlElement _nodeSvcLvl)
    {
        //------------------------------------------------------------------------------------------------------
        //              2.9: Cd
        //------------------------------------------------------------------------------------------------------
        str value;

        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #UK_BACS:
            case #DOM_WIRE:
            case #INT_WIRE:
            case #EMEA_URGP:
            case #DOM_URGT:
                value = 'URGP';
                break;
            case #SEPA:
                value = 'SEPA';
                break;
            default:
                value = 'NURG';
                break;
        }
        if(value)
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeSvcLvl, 'Cd',value);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_RmtInf_Amt</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_RmtInf_Amt
    /// </summary>
    /// <param name = "_nodeRfrdDocAmt">_nodeRfrdDocAmt</param>
    /// <param name = "_invSKS_EFT_FileDetail">_invSKS_EFT_FileDetail</param>
    protected void node_RmtInf_Amt(XmlElement _nodeRfrdDocAmt, SKS_EFT_FileDetail _invSKS_EFT_FileDetail)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.42: Amt
        //              CdtNoteAmt
        //              RmtdAmt
        //------------------------------------------------------------------------------------------------------
        XmlElement  currentElement;
        AmountMST   gross = _invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur + _invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur;
        AmountMST   Discount = _invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur;
        AmountMST   Remitted;
        AmountMST   CreditNote;
    
        if(_invSKS_EFT_FileDetail.InvoiceSettleAmountCur > 0)
        {
            Gross = _invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur + _invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur;
            Discount = _invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur;
            Remitted = 0;
            CreditNote = _invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur;
        }
        else
        {
            Gross = (_invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur + _invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur) * -1;
            Discount = _invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur * -1;
            Remitted = _invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1;
            CreditNote = 0;
        }
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #NON_SEPA)            //SKS#VSTS:14367
        {
            //      2.110
            currentElement = SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeRfrdDocAmt, 'DuePyblAmt', num2str(gross,0,2,1,0));
            SKS_EFT_Format::xmlsetAttributeText(currentElement, 'Ccy', _invSKS_EFT_FileDetail.PaymentCurrencyCode);

        }
        if(Remitted != 0)
        {
            //      RmtdAmt
            currentElement = SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeRfrdDocAmt, 'RmtdAmt', num2str(Remitted,0,2,1,0));
            SKS_EFT_Format::xmlsetAttributeText(currentElement, 'Ccy', _invSKS_EFT_FileDetail.PaymentCurrencyCode);
        }
        else
        {
            //      CdtNoteAmt
            currentElement = SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeRfrdDocAmt, 'CdtNoteAmt', num2str(CreditNote,0,2,1,0));
            SKS_EFT_Format::xmlsetAttributeText(currentElement, 'Ccy', _invSKS_EFT_FileDetail.PaymentCurrencyCode);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_ChrgBr</Name>
				<Source><![CDATA[
    //SKS#DevOps:15277 -->
    protected void node_CdtTrfTxInf_ChrgBr(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.51 ChrgBr
        //-----------------------------------------------------------------------------------------------------

        //      2.51 ChrgBr
        if(mSKS_EFT_FileDetail.PaymSpec == #SEPA && mSKS_EFT_FileDetail.FormatId =='DE-DEUTSCHE-XML-UK')//DevOps20931
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeCdtTrfTxInf, 'ChrgBr','SLEV');

        }
        else if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #SEPA ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #NON_SEPA)
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeCdtTrfTxInf, 'ChrgBr', this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('Charges', mSKS_EFT_FileDetail.RecId)), 0, false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectPaymentRecords</Name>
				<Source><![CDATA[
    //SKS#DevOps:15277 <--

    protected void selectPaymentRecords()
    {
        //------------------------------------------------------------------------------------------------------
        // Standard payment selction
        // Override if different selection is need for a format
        //------------------------------------------------------------------------------------------------------
    
        //Order by clause must match the clause in the SKS_EFT_Processing.SumByPayment
        select * from mSKS_EFT_FileDetail
            join mSKS_EFT_FileDetail_VendAddress
            join mSKS_EFT_FileDetail_BenBank
            join mSKS_EFT_FileDetail_Intermediary
            join mSKS_EFT_FileDetail_CreditParty
            join msKS_EFT_FileDetail_Instructions
            join mSKS_EFT_FileDetail_BankAccount
              order by mSKS_EFT_FileDetail.PaymentCompany,
                   mSKS_EFT_FileDetail.RecordSection,
                   mSKS_EFT_FileDetail.PaymMode,
                   mSKS_EFT_FileDetail.BankAccountId,
                   mSKS_EFT_FileDetail.PaymentCurrencyCode,
                   mSKS_EFT_FileDetail.PaymSpec,
                   mSKS_EFT_FileDetail.EffectiveDate,
                   mSKS_EFT_FileDetail.DepCountryRegionId,
                   mSKS_EFT_FileDetail.RecordType,
                   mSKS_EFT_FileDetail.AccountNum,
                   mSKS_EFT_FileDetail.PaymentReference,
                   mSKS_EFT_FileDetail.RecId
          where mSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                mSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                mSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_VendAddress.RefRecId &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_BenBank.RefRecId &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_Intermediary.RefRecId &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_CreditParty.RefRecId &&
                mSKS_EFT_FileDetail.RecId == msKS_EFT_FileDetail_Instructions.RefRecId &&
            mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_BankAccount.RefRecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>