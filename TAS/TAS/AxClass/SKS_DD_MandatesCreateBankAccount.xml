<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_DD_MandatesCreateBankAccount</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_DD_MandatesCreateBankAccount Class for creating a TAS_Auto Bank account
/// </summary>
class SKS_DD_MandatesCreateBankAccount
{


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>CreateBankAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creating a TAS_Auto Bank account
    /// </summary>
    /// <param name = "_custTableLoc">CustTable buffer</param>
    public static void CreateBankAccount(CustTable _custTableLoc)
    {
        CustTable custTableUpdate;
        CustBankAccount custBankAccount, locCustBankAccount;
        SKS_EFT_FileFormatPaymSpec fileFormatPaymSpec;

        if((_custTableLoc.PaymMode && _custTableLoc.PaymSpec))
        {
            select firstonly fileFormatPaymSpec
                where fileFormatPaymSpec.FormatId == CustPaymModeTable::find(_custTableLoc.PaymMode).SKS_EFT_FormatId
                    && fileFormatPaymSpec.PaymSpec == _custTableLoc.PaymSpec;

            if(fileFormatPaymSpec.DDAutoCreateBankAccount)
            {
                select firstonly locCustBankAccount
                    where locCustBankAccount.CustAccount == _custTableLoc.AccountNum
                        && locCustBankAccount.AccountID == 'TAS_AUTO';

                if(!locCustBankAccount)
                {
                    custBankAccount.AccountID = 'TAS_AUTO';
                    custBankAccount.Name = 'TAS_AUTO';
                    custBankAccount.CustAccount = _custTableLoc.AccountNum;
                    custBankAccount.insert();
                     
                    if(!_custTableLoc.BankAccount)
                    {
                        changecompany(_custTableLoc.company())
                        {
                            ttsbegin;
                            select firstonly forupdate custTableUpdate where custTableUpdate.AccountNum == _custTableLoc.AccountNum;
                            custTableUpdate.BankAccount = custBankAccount.AccountID;
                            custTableUpdate.update();
                            ttscommit;
                        }
                    }
                }
                else
                {
                    if(_custTableLoc.BankAccount!='TAS_AUTO' && _custTableLoc.BankAccount)
                    {
                        return;
                    }
                    else
                    {
                        changecompany(_custTableLoc.company())
                        {
                            ttsbegin;
                            select firstonly forupdate custTableUpdate where custTableUpdate.AccountNum == _custTableLoc.AccountNum;
                            custTableUpdate.BankAccount = 'TAS_AUTO';
                            custTableUpdate.update();
                            ttscommit;
                        }
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createUpdateCustBankAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Crating bank account while validating payment journal
    /// </summary>
    /// <param name = "_custTable">CustTable buffer</param>
    /// <returns>True or false</returns>
    public static boolean createUpdateCustBankAccount(CustTable _custTable)
    {
        CustBankAccount custBankAccount = CustBankAccount::find(_custTable.AccountNum, 'TAS_AUTO');

        if (_custTable && !custBankAccount)
        {
            custBankAccount.clear();
            custBankAccount.AccountID = 'TAS_AUTO';
            custBankAccount.Name = 'TAS AUTO';
            custBankAccount.CustAccount = _custTable.AccountNum;
            custBankAccount.insert();
        
            if (_custTable.BankAccount == '')
            {
                changecompany(_custTable.company())
                {
                    ttsbegin;
                    _custTable.selectForUpdate(true);
                    _custTable.BankAccount = custBankAccount.AccountID;
                    _custTable.update();
                    ttscommit;
                }
            }
        }
        else if (custBankAccount && _custTable.BankAccount == '')
        {
            changecompany(_custTable.company())
            {
                ttsbegin;
                _custTable.selectForUpdate(true);
                _custTable.BankAccount = custBankAccount.AccountID;
                _custTable.update();
                ttscommit;
            }
        }        

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCustBankAccountBulkLoad</Name>
				<Source><![CDATA[
    /// <summary>
    /// Crating bank account while bulkload
    /// </summary>
    /// <param name = "_custTable">custtable buffer</param>
    /// <returns>custbankaccount</returns>
    public static CustBankAccount createCustBankAccountBulkLoad(CustTable _custTable)
    {
        CustBankAccount custBankAccount;
        CustBankAccount locCustBankAccount;

        select firstonly locCustBankAccount
            where locCustBankAccount.CustAccount == _custTable.AccountNum
                && locCustBankAccount.AccountID == 'TAS_AUTO';

        if (_custTable && ! locCustBankAccount)
        {
            ttsbegin;
            custBankAccount.clear();
            custBankAccount.AccountID = 'TAS_AUTO';
            custBankAccount.Name = 'TAS AUTO';
            custBankAccount.CustAccount = _custTable.AccountNum;
            custBankAccount.insert();
            ttscommit;
        }

        return custBankAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDepositer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creating depositor while creating payment journal EFT validate
    /// </summary>
    /// <param name = "_custTable">custtable buffer</param>
    /// <param name = "_companyId">Company id buffer</param>
    /// <returns>SKS_LB_Depositor</returns>
    public static boolean createDepositer(CustTable _custTable, CompanyId _companyId)
    {
        SKS_LB_Depositor sks_lb_depositer;
        SKS_PP_Setup     sks_pp_setup;

        if (SKS_LB_Depositor::find(_companyId, _custTable.AccountNum))
        {
            return false;
        }

        sks_lb_depositer.AccountNum = _custTable.AccountNum;
        sks_lb_depositer.CustomerCompany = _companyId;

        sks_lb_depositer.Active = NoYes::Yes; //Active
        sks_lb_depositer.PaymCanChange = NoYes::Yes;

        select firstonly AutoCR, AutoCRCreateCR, AutoCRAutoRev, LBSettlementMethod, LBWriteOffId
            from sks_pp_setup;

        SKS_LB_Setup_AutoCRParms sks_LB_Setup_AutoCRParms = SKS_LB_Setup_AutoCRParms::find(_companyId);

        //Lockbox fields
        sks_lb_depositer.LBSettlementMethod = sks_pp_setup.LBSettlementMethod;
        if(SKS_PP_Setup.LBSettlementMethod == SKS_LB_SettlementMethod::External)
        {
            sks_lb_depositer.LBExternalFormatId = SKS_PP_Setup.LBExternalFormatId;
        }
        sks_lb_depositer.AutoCRFromSetup = NoYes::Yes;
        sks_lb_depositer.WriteOffId = sks_pp_setup.LBWriteOffId;
        if (sks_LB_Setup_AutoCRParms)
        {
            sks_lb_depositer.AutoCR = sks_pp_setup.AutoCR;
            sks_lb_depositer.AutoCRAutoRev = sks_pp_setup.AutoCRAutoRev;
            sks_lb_depositer.AutoCRLedgerDimension = sks_LB_Setup_AutoCRParms.AutoCRLedgerDimension;
            sks_lb_depositer.AutoCRGenJrnlName = sks_LB_Setup_AutoCRParms.AutoCRGenJrnlName;
            sks_lb_depositer.AutoCROffsetLedgerDimension = sks_LB_Setup_AutoCRParms.AutoCROffsetLedgerDimension;
        }
        else
        {
            // if a sks_LB_Setup_AutoCRParms record does not exist for the correct company, null out autocredit info.
            sks_lb_depositer.AutoCR = NoYes::No;
            sks_lb_depositer.AutoCRAutoRev = NoYes::No;
            sks_lb_depositer.AutoCRLedgerDimension = 0;
            sks_lb_depositer.AutoCRGenJrnlName = '';
            sks_lb_depositer.AutoCROffsetLedgerDimension = 0;
        }

        sks_lb_depositer.insert();

        return true;

    }

]]></Source>
			</Method>
			<Method>
				<Name>createDepositorPaymSpec</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creating a eBanking details
    /// </summary>
    /// <param name = "_custAccount">CustAccount buffer</param>
    /// <param name = "_companyId">CompanyId buffer</param>
    /// <param name = "_paymMode">PaymMode buffer</param>
    /// <param name = "_paymSpec">PaymSpec buffer</param>
    /// <param name = "_custBankAccountId">CustBankAccountId buffer</param>
    public static void createDepositorPaymSpec(CustAccount _custAccount,
                                          CompanyId _companyId,
                                          PaymMode _paymMode,
                                          PaymSpec _paymSpec,
                                          CustBankAccountId _custBankAccountId)
    {
        SKS_EFT_CustomerPaym sks_EFT_CustomerPaym;

        sks_eft_customerpaym.CustCompany        = _companyId;
        sks_eft_customerpaym.CustAccount        = _custAccount;
        sks_eft_customerpaym.PaymMode           = _paymMode;
        sks_eft_customerpaym.PaymSpec           = _paymSpec;
        sks_eft_customerpaym.CustBankAccountId  = _custBankAccountId;

        sks_eft_customerpaym.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDepositorReimbursementPaymSpec</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creating a customer reimbrusement spec details
    /// </summary>
    /// <param name = "_custAccount">CustAccount buffer</param>
    /// <param name = "_companyId">CompanyId buffer</param>
    /// <param name = "_paymMode">PaymMode buffer</param>
    /// <param name = "_paymSpec">PaymSpec buffer</param>
    /// <param name = "_custBankAccountId">CustBankAccountId buffer</param>
    public static void createDepositorReimbursementPaymSpec(CustAccount _custAccount,
                                          CompanyId _companyId,
                                          PaymMode _paymMode,
                                          PaymSpec _paymSpec,
                                          CustBankAccountId _custBankAccountId)
    {
        SKS_EFT_CustReimbursementPaym sks_EFT_CustomerReImbursementPaym;

        SKS_EFT_FileFormatPaymSpec    local_SKS_EFT_FileFormatPaymSpec;
        CustPaymModeTable             local_CustPaymModeTable;

        select firstOnly SKS_CNP_FormatId, PaymMode from local_CustPaymModeTable
            where local_CustPaymModeTable.PaymMode == _paymMode;

        sks_EFT_CustomerReImbursementPaym.FormatId = local_CustPaymModeTable.SKS_CNP_FormatId;

        select firstOnly FormatId, PaymSpec, WireTabs from local_SKS_EFT_FileFormatPaymSpec
            where local_SKS_EFT_FileFormatPaymSpec.FormatId == sks_EFT_CustomerReImbursementPaym.FormatId &&
                  local_SKS_EFT_FileFormatPaymSpec.PaymSpec == _paymSpec;


        sks_EFT_CustomerReImbursementPaym.CustCompany        = _companyId;
        sks_EFT_CustomerReImbursementPaym.CustAccount        = _custAccount;
        sks_EFT_CustomerReImbursementPaym.PaymMode           = _paymMode;
        sks_EFT_CustomerReImbursementPaym.PaymSpec           = _paymSpec;
        sks_EFT_CustomerReImbursementPaym.CustBankAccountId  = _custBankAccountId;

        SKS_EFT_CustomerLoad::UpdateCustomerAddresses(sks_EFT_CustomerReImbursementPaym, false, sks_EFT_CustomerReImbursementPaym.WBeneRemittanceLocation);
        SKS_EFT_CustomerLoad::UpdateCustomerBankAddresses(sks_EFT_CustomerReImbursementPaym);
        SKS_EFT_CustomerLoad::UpdateCustomerIntermediaryBank(sks_EFT_CustomerReImbursementPaym);
        SKS_EFT_CustomerLoad::UpdateCustomerCreditParty(sks_EFT_CustomerReImbursementPaym);

        sks_EFT_CustomerReImbursementPaym.insert();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>