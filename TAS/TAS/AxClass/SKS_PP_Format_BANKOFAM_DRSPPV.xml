<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_PP_Format_BANKOFAM_DRSPPV</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_PP_Format_BANKOFAM_DRSPPV Extends SKS_PP_Format_BankGroup
{
    boolean mHeaderFlag;
    int mChkCount;
    real mChkSum;
    int mPrintFooter;
    real mHashTotal;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>txtDetail</Name>
				<Source><![CDATA[
    // Bank of America - DRS - PPV - Detail Record (differs from DRSPNV in that Voide (Cancellations) have full amount)
        //
        // Pos 1-10      10      Check Number - RJ-LZF
        // Pos 11-20     10      Check Amount - RJ-LZF, Voids = Cancellations = full amount
        // Pos 21-30     10      Account Number - RJ-LZF
        // Pos 31-36     6       Check Date (mmddyy)
        // Pos 37-37     1       Issue - blank, Void '-'
        // Pos 38-80     43      Payee information
    protected str txtDetail()
    {
        //  Note that the Working Table has records at the Voucher level (used by EFT as well)
        //  They are summarized and coded - so that you can easily get just the check records
        //  See the Report | Record Selection filter -
        //  These filters will give the Check Records only
        //  {SKS_PP_FileDetail.ComputerName} = RIPARAM('ComputerName')  - File can be used by multiple computers at once
        //  and {SKS_PP_FileDetail.RecordSummary} <> 'X'                - 'X' records need to be skipped over
        //  and {SKS_PP_FileDetail.FileType} = 'P'                      - 'P' records are for Positive Pay
    
        //  Below only want records with RecSection = '20P' (payment record)
        //  RecSection - defines sections:
        //  10H - Header
        //  20P - Payments
        //  RecType: (within Payments)
        //  10V - Voucher
        //  20P - PreNotes (should not be any with Pos Pay)
        //  30B - Blockfill
        //  40T - Trailer
        //  The field with the summarized information for a check is RECORDSUMAMT (see below)
    
        str ItemType;
        int Mult;
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        ;
    
        // Convert negative void numbers to positives
        Mult = 1;
        if (mSKS_PP_FileDetail.ChkType != SKS_PP_ChequeType::Cheque)
        {
            ItemType = '-';
            if (mSKS_PP_FileDetail.ChkCuryAmt < 0)
            {
                Mult = -1;
            }
        }
        else
        {
            ItemType = ' ';
        }
    
        // Always use the Record Summary Amount - will have correct total for the Check
        mChkCount++;
        mChkSum = mChkSum + mSKS_PP_FileDetail.ChkCuryAmt;
        mHashTotal = mHashTotal + str2num(mSKS_PP_FileDetail.ChkRefNbr);
    
        sb.Append(SKS_PP_StringFormats::strFill(10, strLtrim(strRTrim(mSKS_PP_FileDetail.ChkRefNbr)), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        sb.Append(SKS_PP_StringFormats::strMoney(Mult * mSKS_PP_FileDetail.ChkCuryAmt, 10));
        sb.Append(SKS_PP_StringFormats::strFill(10, strLTrim(StrRTrim(mSKS_PP_FileDetail.BnkBankAcct)), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        sb.Append(SKS_PP_StringFormats::strDateMMDDYY(mSKS_PP_FileDetail.ChkDocDate));
        sb.Append(ItemType);
        sb.Append(SKS_PP_StringFormats::strFill(43, mSKS_PP_FileDetail.VendName, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        return sb.ToString();
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtGroupHeader</Name>
				<Source><![CDATA[
    // Bank of America - DRS - PPV - Header Record
        // Pos 1-03      3       Header Record Label 'DRS'
        // Pos 04-06     3       Bank Number
        // Pos 07-18     12      Bank Account Number - RJ-LZF
        // Pos 19-26     8       Prccessing Date (YYYYMMDD)
        // Pos 27-27     1       Blank
        // Pos 28-35     8       Certification Cutoff Date (yyyymmdd)
        // Pos 36-36     1       Final Input Indicator ('N')
        // Pos 37-80     44      Blank
    protected str txtGroupHeader()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        str FinalInputIndic;
        SKS_PP_FileFormat bFileFormat;
        SKS_PP_Bank bSKS_PP_Bank;
        Container company;
        ;
    
        company = [mSKS_PP_FileDetail.ChkCpnyId];
        select crossCompany:company PP01 from bSKS_PP_Bank where bSKS_PP_Bank.BankAccountId == mSKS_PP_FileDetail.ChkBankAcct;
    
        select LastEffDate from bFileFormat where bFileFormat.FormatId == mSKS_PP_FileDetail.FormatId;
    
        FinalInputIndic = 'N';
    
        if(bSKS_PP_Bank.PP02 != '')
        {
            FinalInputIndic = strRtrim(strLtrim(bSKS_PP_Bank.PP02));
        }
    
        sb.Append('DRS');
        sb.Append(SKS_PP_StringFormats::strFill(3, substr(bSKS_PP_Bank.PP01,0,3), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        sb.Append(SKS_PP_StringFormats::strFill(12, strRtrim(strLtrim(mSKS_PP_FileDetail.BnkBankAcct)), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        sb.Append(SKS_PP_StringFormats::strDateYYYYMMDD(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone())));
        sb.Append(SKS_PP_StringFormats::strFill(1,'', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        sb.Append(SKS_PP_StringFormats::strDateYYYYMMDD(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone())));
        sb.Append(FinalInputIndic);
        sb.Append(SKS_PP_StringFormats::strFill(44, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        return sb.ToString();
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtGroupTrailer</Name>
				<Source><![CDATA[
    // Bank of America - DRS - PPV - Trailer Record
        //
        // Pos 1-04      4       '1EOF'
        // Pos 05-05     1       Blank
        // Pos 06-10     5       Total number of Detail Records (Issues and Voids) RJ-LZF
        // Pos 11-30     20      Blank
        // Pos 31-40     10      Hash Total (summation of All Check Issue numbers (Issues/Voids) RJ-LZF
        // Pos 41-50     10      Summation of amounts (Issues/Voids) RJ-LZF
        // Pos 51-80     30      Blank
    protected str txtGroupTrailer()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        str result;
        ;
    
        sb.Append('1EOF');
        sb.Append(SKS_PP_StringFormats::strFill(1, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left));
        sb.Append(SKS_PP_StringFormats::strFill(5, int2str(mChkCount), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        sb.Append(SKS_PP_StringFormats::strFill(20, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left));
        sb.Append(SKS_PP_StringFormats::strFill(10, num2str(mHashtotal,0,0,1,0), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
    
        sb.Append(SKS_PP_StringFormats::strMoney(mChkSum, 10));
        sb.Append(SKS_PP_StringFormats::strFill(30, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left));
        result = sb.ToString();
    
        mChkCount = 0;
        mHashtotal = 0;
        mChkSum = 0;
    
        return result;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>