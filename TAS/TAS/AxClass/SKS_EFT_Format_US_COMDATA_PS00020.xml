<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_US_COMDATA_PS00020</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_US_COMDATA_PS00020 extends SKS_EFT_Format
/// </summary>
class SKS_EFT_Format_US_COMDATA_PS00020 extends SKS_EFT_Format
{
    #define.FormatVersion('20220711')
    int64                       mRecCount;
    str                         mCDNAcctCode;
    str                         mEmail1;
    str                         mEmail2;

    #define.TAB('\t')
    #define.QUOTES('"')

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatAmounts</Name>
				<Source><![CDATA[
    private str formatAmounts(AmountMST _amount)
    {
        str value;
        value = SKS_PP_StringFormats::strMoney(-1 * _amount, 10);
        if(strFind(value, '-', 1, 10))
        {
            value = '-' + strRem(value, '-');
        }
    
        return value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    [SuppressBPWarningAttribute("BPCheckNestedLoopinCode","Necessary to allow the processing of every invoice(inner loop) for every relevant parent file detail record(outer loop)")]
    protected void formatStructure()
    {
        SKS_EFT_FileDetail invSKS_EFT_FileDetail;
    
        // Get SKS_EFT_Bank
        this.getSKS_EFT_Bank();
        mCDNAcctCode = mSKS_EFT_Bank.WOrdPartyId;
    
    
        select COUNT(RecId), RecordSummaryRecId from invSKS_EFT_FileDetail where
                             invSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                             invSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                             invSKS_EFT_FileDetail.RecordSummary == SKS_EFT_RecordSummary::NonSummary;
    
        mRecCount = invSKS_EFT_FileDetail.RecId;
    
        // Format header
        this.rec_HeaderTrailer();
    
        while(mSKS_EFT_FileDetail)
        {
            // Get SKS_EFT_VendorPaym
            this.getSKS_EFT_VendorPaym();
    
            // Get Remittance information
            this.getRemittanceAddress(mSKS_EFT_FileFormatPaymSpec.UseCheckNumber);
    
            while select invSKS_EFT_FileDetail where invSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId
            {
                // Details
                this.rec_Details(invSKS_EFT_FileDetail);
            }
    
            next mSKS_EFT_FileDetail;
        }
    
        // Format trailer
        this.rec_HeaderTrailer();
    }

]]></Source>
			</Method>
			<Method>
				<Name>get_POInfo</Name>
				<Source><![CDATA[
    private str get_POInfo(SKS_EFT_FileDetail _invSKS_EFT_FileDetail)
    {
        VendInvoiceJour vendInvoiceJour;
        Container companyInfo;
        str PONum = '';
        ;
    
        companyInfo += _invSKS_EFT_FileDetail.InvoiceCompany;
    
        // See if PO exists
        if(conPeek(companyInfo, 1) != '')
        {
            select firstOnly crossCompany:companyInfo PurchId, InvoiceAccount, InvoiceDate, InvoiceId from vendInvoiceJour where
                vendInvoiceJour.InvoiceAccount == _invSKS_EFT_FileDetail.AccountNum &&
                vendInvoiceJour.InvoiceDate == _invSKS_EFT_FileDetail.InvoiceDate &&
                vendInvoiceJour.InvoiceId == _invSKS_EFT_FileDetail.InvoiceNumber &&
                vendInvoiceJour.PurchId != '';
    
            if(vendInvoiceJour)
            {
                PONum = vendInvoiceJour.PurchId;
            }
        }
        return this.CharacterReplacement(PONum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Details</Name>
				<Source><![CDATA[
    public boolean rec_Details(SKS_EFT_FileDetail _invSKS_EFT_FileDetail)
    {
        //------------------------------------------------
        //Nbr   Description                         Length
        // 1    Comdata Account Code                     5
        // 2    Comdata Customer ID                     10
        // 3    Comdata Code Word for this customer     20
        // 4    Supplier Code                           15
        // 5    Location Code                           10
        // 6    Supplier Name                           50
        // 7    Supplier Email Address                  50
        // 8    Supplier Email Address 2                50
        // 9    Supplier AddressLine1                   50
        //10    Supplier AddressLine2                   50
        //11    Supplier City                           30
        //12    Supplier State                           2
        //13    Supplier Zip                            10
        //14    Supplier Phone Number                   10
        //15    Subscriber Name                         50
        //16    Subscriber AddressLine1                 50
        //17    Subscriber AddressLine2                 50
        //18    Subscriber City                         30
        //19    Subscriber State                         2
        //20    Subscriber Zip                          10
        //21    Subscriber Phone Number                 10
        //22    Subscriber Account Number               50
        //23    Invoice Number                          20
        //24    Invoice Date                             8
        //25    Due Date                                 8
        //26    Payment Date                             8
        //27    Payment Number                          10
        //28    Invoice Comments                        60
        //29    Purchase Order Number                   15
        //30    Gross Amount                            10
        //31    Net Amount                              10
        //32    Discount Amount                         10
        //33    Virtual Card Invoice No                 15
        //34    G/L account                             60
        //35    Supplier Fax Number                     10
        //36    Discretionary Data 1                    10
        //37    Discretionary Data 2                    17
        //38    Discretionary Data 3                    17
        //39    Supplier Tax ID Number                   9
        //40    Filler                                  50
        //41    Filler                                  50
        //42    Filler                                  50
        //43    Filler                                  50
        //44    Filler                                  50
        //45    Filler                                  50
        //------------------------------------------------
        SKS_EB_Vendor   sks_eb_Vendor;
        VendTable       vendorTable;
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
    
        //get sks_eb_Vendor
        sks_eb_Vendor = SKS_EB_Vendor::find(mSKS_EFT_FileDetail.AccountCompany, mSKS_EFT_FileDetail.AccountNum);
    
        // 1    Comdata Account Code                     5
        sb.Append(this.wrapField(mCDNAcctCode, 5));
    
        // 2    Comdata Customer ID                     10
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.FileACHCompanyId, 10));
    
        // 3    Comdata Code Word for this customer     20
        sb.Append(this.wrapField(this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('ComdataCodeword', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank)), 20));
    
        // 4    Supplier Code                           15
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.AccountNum, 15));
    
        // 5    Location Code                           10
        sb.Append(this.wrapField());
    
        // 6    Supplier Name                           50
        sb.Append(this.wrapField(mRemittanceName, 50));
    
        // 7    Supplier Email Address                  50
        if(sks_eb_Vendor.EM1Vendor)
        {
            vendorTable = VendTable::findByCompany(_invSKS_EFT_FileDetail.AccountCompany, mSKS_EFT_FileDetail.AccountNum);
            sb.Append(this.wrapField(vendorTable.email(), 50));
        }
        else
        {
            sb.Append(this.wrapField());
        }
    
        // 8    Supplier Email Address 2                50
        sb.Append(this.wrapField(sks_eb_Vendor.EM2Addr, 50));
    
        // 9    Supplier AddressLine1                   50
        sb.Append(this.wrapField(mRemittanceAdrLine1, 50));
    
        //10    Supplier AddressLine2                   50
        sb.Append(this.wrapField(mRemittanceAdrLine2, 50));
    
        //11    Supplier City                           30
        sb.Append(this.wrapField(mRemittanceCity, 30));
    
        //12    Supplier State                           2
        sb.Append(this.wrapField(mRemittanceState, 2));
    
        //13    Supplier Zip                            10
        sb.Append(this.wrapField(mRemittanceZipCode, 10));
    
        //14    Supplier Phone Number                   10
        sb.Append(this.wrapField());
    
        //15    Subscriber Name                         50
        sb.Append(this.wrapField());
    
        //16    Subscriber AddressLine1                 50
        sb.Append(this.wrapField());
    
        //17    Subscriber AddressLine2                 50
        sb.Append(this.wrapField());
    
        //18    Subscriber City                         30
        sb.Append(this.wrapField());
    
        //19    Subscriber State                         2
        sb.Append(this.wrapField());
    
        //20    Subscriber Zip                          10
        sb.Append(this.wrapField());
    
        //21    Subscriber Phone Number                 10
        sb.Append(this.wrapField());
    
        //22    Subscriber Account Number               50
        sb.Append(this.wrapField());
    
        //23    Invoice Number                          20
        sb.Append(this.wrapField(_invSKS_EFT_FileDetail.InvoiceNumber, 20));
    
        //24    Invoice Date                             8
        sb.Append(this.wrapField(SKS_PP_StringFormats::strDateMMDDYYYY(_invSKS_EFT_FileDetail.InvoiceDate)));
    
        //25    Due Date                                 8
        sb.Append(this.wrapField(SKS_PP_StringFormats::strDateMMDDYYYY(mSKS_EFT_File.EffectiveDate)));
    
        //26    Payment Date                             8
        sb.Append(this.wrapField(SKS_PP_StringFormats::strDateMMDDYYYY(mSKS_EFT_FileDetail.PaymentTransDate)));
    
        //27    Payment Number                          10
        sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference), 10));
    
        //28    Invoice Comments                        60
        sb.Append(this.wrapField(this.CharacterReplacement(_invSKS_EFT_FileDetail.InvoiceTransactionTxt)));
    
        //29    Purchase Order Number                   15
        sb.Append(this.wrapField(this.get_POInfo(_invSKS_EFT_FileDetail)));
    
        //30    Gross Amount                            10
        sb.Append(this.wrapField(this.formatAmounts(_invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur + _invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur)));
    
        //31    Net Amount                              10
        sb.Append(this.wrapField(this.formatAmounts(_invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur)));
    
        //32    Discount Amount                         10
        sb.Append(this.wrapField(this.formatAmounts(_invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur)));
    
        //33    Virtual Card Invoice No                 15
        sb.Append(this.wrapField());
    
        //34    G/L account                             60
        sb.Append(this.wrapField());
    
        //35    Supplier Fax Number                     10
        sb.Append(this.wrapField());
    
        //36    Discretionary Data 1                    10
        sb.Append(this.wrapField());
    
        //37    Discretionary Data 2                    17
        sb.Append(this.wrapField());
    
        //38    Discretionary Data 3                    17
        sb.Append(this.wrapField());
    
        //39    Supplier Tax ID Number                   9
        sb.Append(this.wrapField());
    
        //40    Filler                                  50
        sb.Append(this.wrapField());
    
        //41    Filler                                  50
        sb.Append(this.wrapField());
    
        //42    Filler                                  50
        sb.Append(this.wrapField());
    
        //43    Filler                                  50
        sb.Append(this.wrapField());
    
        //44    Filler                                  50
        sb.Append(this.wrapField());
    
        //45    Filler                                  50
        sb.Append(this.wrapField('', 50, false));
    
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_HeaderTrailer</Name>
				<Source><![CDATA[
    public boolean rec_HeaderTrailer()
    {
        //-------------------------------------------
        //Nbr   Description                    Length
        // 1    Comdata Account Code                5
        // 2    Comdata Account Code                5
        // 3    Total Number of Records             8
        //-------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
    
        // 1    Comdata Account Code                5
        sb.Append(this.wrapField(mCDNAcctCode, 5));
    
        // 2    Comdata Account Code                5
        sb.Append(this.wrapField(mCDNAcctCode, 5));
    
        // 3    Total Number of Records             8
        sb.Append(this.wrapField(SKS_PP_StringFormats::strFill(8, int642str(mRecCount), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left), 8, false));
    
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wrapField</Name>
				<Source><![CDATA[
    private str wrapField(str _Field = '', int _length = strLen(_Field), boolean _Delimit = true)
    {
        if(_Delimit)
        {
            return subStr(strRem(strUpr(_field), #QUOTES), 1, _length) + #TAB;
        }
        else
        {
            return subStr(strRem(strUpr(_field), #QUOTES), 1, _length);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>