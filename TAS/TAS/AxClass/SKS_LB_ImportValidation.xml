<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_LB_ImportValidation</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class SKS_LB_ImportValidation
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>LBBatNbrFromFileNameDate</Name>
				<Source><![CDATA[
    JournalID LBBatNbrFromFileNameDate( str fileName, date fileDate, str filepath)
    {
        SKS_LB_JournalAR JAR;
        SKS_LB_JournalARErrors JARErrors;
        JournalID jID;
    
        ;
    
        jID = '';
    
        while select * from JAR where JAR.FileDate == fileDate
        {
            if ( strscan(JAR.Filename,fileName,1,strlen(JAR.Filename)) > 0 )
            {
                if(strscan(JAR.Filename,filepath,1,strlen(JAR.Filename)) > 0)
                {
                    jID = JAR.JournalId;
                    break;
                }
            }
        }
    
        if ( strlen(jID) == 0 )
        {
            while select * from JARErrors where JARErrors.FileDate == fileDate
            {
                if ( strscan(JARErrors.Filename,fileName,1,strlen(JARErrors.Filename)) > 0 )
                {
                    if(strscan(JARErrors.Filename,filepath,1,strlen(JARErrors.Filename)) > 0 )
                    {
                        jID = JARErrors.JournalId;
                        break;
                    }
                }
            }
        }
    
        return jID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ESDimensionValidation</Name>
				<Source><![CDATA[
    static int64 ESDimensionValidation(str DimensionString, SKS_LB_FormatID   _FormatID)
    {
    
        container                           dimContainer;
        container                           dimNameContainer;
        container                           dimValueContainer;
        int                                 StartPosition = 1;
        int                                 EndPosition;
        int                                 ConCount;
        SKS_LB_FileFormatDet                FileFormatDet;
        RefRecId                            DimensionRecID;
        SKS_LB_OffsetDimensionMapping       OffsetDimMapping;
        ;
    
        select Firstonly DimSeparator from fileformatDet where Fileformatdet.FieldType == SKS_LB_FieldType::OffsetDim && FileFormatDet.FormatID == _FormatID;
        DimensionString = strLRTrim(DimensionString);
    
        while(EndPosition < strLen(DimensionString))
        {
            EndPosition = strScan(DimensionString, Fileformatdet.DimSeparator, StartPosition, strLen(DimensionString));
            if(EndPosition == 0)
            {
               EndPosition = strLen(DimensionString) + 1;
            }
            dimValueContainer += [strRem(substr(DimensionString, StartPosition, (EndPosition - StartPosition)), Fileformatdet.DimSeparator)];
            StartPosition = EndPosition + 1;
        }
    
        while select DimensionAttribute from OffsetDimMapping order by OffsetDimMapping.step asc where OffsetDimMapping.SKS_LB_FileFormat == _FormatID
        {
            dimNameContainer += [DimensionAttribute::find(OffsetDimMapping.DimensionAttribute).name];
        }
    
        if(conLen(dimNameContainer) != conLen(dimValueContainer))
        {
            return 0;
        }
        else
        {
            for(conCount = 1; conCount <= conLen(dimNameContainer); conCount++)
            {
                dimContainer += [conpeek(dimNameContainer, ConCount)];
                dimContainer += [conpeek(dimValueContainer, ConCount)];
            }
    
            try
            {
                DimensionRecid = SKS_LB_ImportValidation::getDimensionAttributeValueSetId([conCount - 1] + dimContainer);
            }
            catch
            {
                return 0;
            }
            return DimensionRecid;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimensionAttributeValueSetId</Name>
				<Source><![CDATA[
    public static recId getDimensionAttributeValueSetId(container _dimensionValue, dataAreaId _dataAreaId = curext())
    {
        //Code taken from AXDimensionUtil class
        recId                               dimensionId;
        DimensionAttributeValueSetStorage   storage;
        DimensionAttribute                  dimensionAttribute;
        DimensionAttributeValue             dimensionAttributeValue;
        int                                 attributeCount, attributeIndex;
        str                                 attributeName, attributeValue;
        int                                 containerElementIndex;
    
        changecompany(_dataAreaId)
        {
            containerElementIndex = 1;
    
            storage = new DimensionAttributeValueSetStorage();
    
            // Get attribute count
            attributeCount = conPeek(_dimensionValue, containerElementIndex);
            containerElementIndex++;
    
            // Get attributes
            for (attributeIndex = 1; attributeIndex <= attributeCount; attributeIndex++)
            {
                // Get attribute name
                attributeName = conPeek(_dimensionValue, containerElementIndex);
                containerElementIndex++;
    
                // Validate the Financial Dimenion that was passed in.
                dimensionAttribute = SKS_LB_Importvalidation::validateFinancialDimension(attributeName);
    
                // Get attribute value
                attributeValue = conPeek(_dimensionValue, containerElementIndex);
                containerElementIndex++;
    
                // Validate the Financial Dimenion Value that was passed in.
                dimensionAttributeValue = SKS_LB_Importvalidation::validateFinancialDimensionValue(dimensionAttribute, attributeValue);
    
                if(dimensionAttributeValue)
                {
                    // Add attribute
                    storage.addItem(dimensionAttributeValue);
                }
            }
    
            dimensionId = storage.save();
        }
    
        return dimensionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFinancialDimension</Name>
				<Source><![CDATA[
    public static DimensionAttribute validateFinancialDimension(str _dimensionName)
    {
        //Code taken from AXDimensionUtil class
        DimensionAttribute  dimensionAttribute;
    
        dimensionAttribute = DimensionAttribute::findByName(_dimensionName);
    
        return dimensionAttribute;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFinancialDimensionValue</Name>
				<Source><![CDATA[
    public static DimensionAttributeValue validateFinancialDimensionValue(DimensionAttribute _dimensionAttribute, str _dimensionValue)
    {
        //Code taken from AXDimensionUtil class
        DimensionAttributeValue dimensionAttributeValue;
    
        dimensionAttributeValue = DimensionAttributeValue::findByDimensionAttributeAndValueNoError(_dimensionAttribute, _dimensionValue, false, true);
    
        return dimensionAttributeValue;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>