<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_IHB_BankAccountTrans_Insert_PostEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_IHB_BankAccountTrans_Insert_PostEventHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>BankAccountTrans_Post_insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the value date field with the original journal trans date.
    /// </summary>
    /// <param name="args"></param>
    [PostHandlerFor(tableStr(BankAccountTrans), tableMethodStr(BankAccountTrans, insert))]
    public static void BankAccountTrans_Post_insert(XppPrePostArgs args)
    {  
        LedgerJournalTrans  ledgerJournalTrans;
        BankAccountTrans    bankAccountTrans = args.getThis() as BankAccountTrans;
        //FDD-11448 --->
        SKS_IHB_CalculatedInterest calculatedInterest;
        SKS_PP_Bank                sKS_PP_Bank;
        //<--- FDD-11448

        ledgerJournalTrans = LedgerJournalTrans::findJournalForVoucher(bankAccountTrans.Voucher,bankAccountTrans.TransDate);
        if (ledgerJournalTrans)
        {
            //This code is for AP EFT assignment of inbound reference number.
            if (ledgerJournalTrans.SKS_EFTAP_InboundRefNum != '')
            {
                ttsbegin;
                bankAccountTrans.SKS_EFTAP_InboundRefNum = LedgerJournalTrans.SKS_EFTAP_InboundRefNum;
                bankAccountTrans.update();
                ttscommit;
            }

            //JU Bug 10347: Value date is no longer being assigned with this code commented out. Value date needs to be assigned.
            if(BankAccountTrans.SKS_IHB_ValueDate == dateNull())
            {
                ttsbegin;
                bankAccountTrans.SKS_IHB_ValueDate = ledgerJournalTrans.SKS_IHB_ValueDate;
                bankAccountTrans.update();
                ttscommit;
            }
            //FDD-11448 --->
            sKS_PP_Bank = SKS_PP_Bank::find(bankAccountTrans.AccountId);
            if(ledgerJournalTrans.BankTransType != sKS_PP_Bank.IHB_InterestRepaymentNonCompounded 
               || sKS_PP_Bank.IHB_InterestCalcMethod == SKS_IHB_InterestCalcMeth::Compound)
            {
                //SKS_Bug_21012--->
                date validFrom;

                validFrom = SKS_IHB_BankAccountTrans_Insert_PostEventHandler::getPerdiodStartDates(sKS_PP_Bank, BankAccountTrans.SKS_IHB_ValueDate);
                //SKS_Bug_21012<----

                update_recordset calculatedInterest
                        setting Recalculate = NoYes::Yes
                    where calculatedInterest.BankAccountID == bankAccountTrans.AccountId &&
                          calculatedInterest.ValueDate >= validFrom;  //SKS_Bug_21012
            } 
            //<--- FDD-11448            
            //SKS_Bug_12269 -->
            //SKS_Bug_12232 -->
            //if (ledgerJournalTrans.BankTransType == sKS_PP_Bank.IHB_InterestRepaymentNonCompounded)
            if (sKS_PP_Bank.IHB_InterestCalcMethod == SKS_IHB_InterestCalcMeth::Noncompounded &&
                sKS_PP_Bank.IHB_InterestRepaymentNonCompounded !='' &&
                ledgerJournalTrans.BankTransType !='' &&
                ledgerJournalTrans.BankTransType == SKS_PP_BANK.IHB_InterestRepaymentNonCompounded)//SKS_Bug_12232 <--            
            {
                ttsbegin;
                bankAccountTrans.SKS_IHB_InterestCalculated = NoYes::Yes;
                bankAccountTrans.update();
                ttscommit;
            }
            //SKS_Bug_12269 <--
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPerdiodStartDates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return Period start date
    /// </summary>
    /// <param name = "_sKS_PP_Bank">SKS_PP_Bank</param>
    /// <param name = "_transDate">TransDate</param>
    /// <returns></returns>
    public static date getPerdiodStartDates(SKS_PP_Bank _sKS_PP_Bank, TransDate _transDate)
    {
        if (_sKS_PP_Bank.IHB_InterestCalcFreq == SKS_IHB_InterestCalcFreq::Month)
        {
            return dateStartMth(_transDate);
        }
        else
        {
            if (_sKS_PP_Bank.IHB_CalculationFrequencyStartMonth>_sKS_PP_Bank.IHB_CalculationFrequencyEndMonth)
            {
                if (mthOfYr(_transDate)>=_sKS_PP_Bank.IHB_CalculationFrequencyStartMonth)
                {
                    return dateStartMth(mkDate(dayOfMth(_transDate), _sKS_PP_Bank.IHB_CalculationFrequencyStartMonth, year(_transDate)));
                }
                else
                {
                    return dateStartMth(mkDate(dayOfMth(_transDate), _sKS_PP_Bank.IHB_CalculationFrequencyStartMonth, year(_transDate)-1));
                }
            }
            else
            {
                return dateStartMth(mkDate(dayOfMth(_transDate), _sKS_PP_Bank.IHB_CalculationFrequencyStartMonth, year(_transDate)));
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>