<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Processing</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_EFT_Processing
{
    SKS_EFTAP_File msks_eftap_file, msks_eftap_fileTmp;
    SKS_EFT_FileFormat msks_eft_FileFormat;
    str gInvokingClass;
    int mNbrGoodRecs;
    SKS_EFT_Setup msks_eft_Setup;
    SKS_EFT_Bank msks_eft_bank;
    SKS_EFTAR_Bank msks_eftar_bank;
    SKS_EFTBTB_Bank msks_eftbtb_bank;                                 
    SKS_EFTCNP_Bank msks_eftcnp_bank;          
    SKS_EFT_FileId mNextFileId;
    SKS_EFT_SequenceNumber mNextSequenceNumber;
    str mReturnMsg;
    SKS_EB_CustVendOpenTransManager mManager;
    RecId mlastLedgerJournalTranRecId;
    SKS_EFT_ActionHistory gActionHistory;
    SKS_EFT_InboundFileNbr gInboundFileNbr;
    //9785 sks pmt upd
    NoYes     sks_eft_IsPaymentUpload;

    // SKS_FDD_10590 -->
    SKS_EFT_Setup   sks_eft_Setuploc;
    container       multicompaniesCon;
    DataAreaId      preNoteOnlyDataAreaId;
    // SKS_FDD_10590 <--

    boolean         ignoreUserErrorFile = false; // SKS_Bug_11845

    #define.PaymSpec_CCDP('CCD+')
    #define.PaymSpec_IAT('IAT')
    #define.PaymSpec_QRR('QRR')

    #define.BankQualifier_Id('I')
    #define.BankQualifier_Swift('S')
    #define.BankQualifier_Both('B')
    

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>ActionHistory</Name>
				<Source><![CDATA[
    private SKS_EFT_ActionHistory ActionHistory(SKS_EFT_ActionHistory _ActionHistory = gActionHistory)
    {
        gActionHistory = _ActionHistory;
        return gActionHistory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>APARrocess_EFT_Static</Name>
				<Source><![CDATA[
    /// <summary>
    /// this method is called for larger payment journals 
    /// </summary>
    /// <param name = "_con">container of parameters</param>
    public static void APARrocess_EFT_Static(container _con)
    {
        SKS_EFT_FileNbr FileNbr = conPeek(_con, 1);
        SKS_PP_NextActionDisplay nextAction = conPeek(_con, 2);
        boolean printReport = conPeek(_con, 3);
        SKS_EFT_Module module = conPeek(_con, 4);
        SKS_EB_CommProcess SKS_EB_CommProcess = conPeek(_con, 5);
        boolean isInBatch = conPeek(_con, 6);
        boolean AutoCreateEFT = conPeek(_con, 7);
        boolean isPreNotesOnly = conPeek(_con, 8); //Issue20063: To not show Dialog if is PreNotes
        
        SKS_EFT_Processing sks_eft_Processing;

        sks_eft_Processing = new SKS_EFT_Processing();
        sks_eft_Processing.APARrocess_EFT(FileNbr, nextAction, false, module, SKS_EB_CommProcess, true, AutoCreateEFT, isPreNotesOnly);
    }

]]></Source>
			</Method>
			<Method>
				<Name>APARrocess_EFT</Name>
				<Source><![CDATA[
    public void APARrocess_EFT(SKS_EFT_FileNbr _FileNbr,
                                SKS_PP_NextActionDisplay _nextAction,
                                boolean _printReport,
                                SKS_EFT_Module _module,
                                SKS_EB_CommProcess _SKS_EB_CommProcess,
                                boolean _isInBatch,
                                boolean _AutoCreateEFT, // SKS_BS_DD_5_BankFormatValidations
                                boolean _isPreNotesOnly = false) //Issue20063: Don't show prompt when it's PreNotesOnly

    {

        boolean recordCreated = false;
        ExecutePermission perm;
        str formatName;
        str locParamters;
        SysDictClass obj;
        Object classInstance;
        SKS_PP_500PPBas sks_pp_500ppbas = new SKS_PP_500PPBas();
        boolean doCommunications;
        boolean APOSkipCom;
        boolean keepDelete;
        boolean locErrorFileExists = false;
        boolean loclogFileExists = false;
        boolean locControlLogFileExists = false;
        boolean locControlErrorFileExists = false;
        boolean locSendSuccess = false;
        boolean locErrorFreeSend = true;
        SKS_EB_CommProcess locSKS_EB_CommProcess;
        SKS_EFT_InboundFileGroups locSKS_EFT_InboundFileGroups;
        str locErrFilePathName;
        str locLogFilePathName;
        str locFilePathName;
        str locControlErrFilePathName;
        str locControllogFilePathName;
        str locControlFilePathName;
        str mBFNewFileName;         //Bankfabric
        str mBFNewCtrlFileName;         //Bankfabric
        SKS_EFT_SendMail sks_eft_SendMail;
        LedgerJournalTrans  ledgerJournalTrans;
        CustPaymModeTable   custPaymModeTable;
        VendPaymModeTable   vendPaymModeTable;
        SKS_BTB_PaymModeTable btbPaymModeTable;
        SKS_EFT_FileDetail  fileDetail;
        System.Xml.XmlDocument locXmlDocument;
        SKS_PP_NextActionDisplay nextAction;
        SKS_DD_JournalBankValidate sks_DD_JournalBankValidate = new SKS_DD_JournalBankValidate(); // SKS_BS_DD5_BankFormatValidation
        SKS_APEFT_JournalBankValidate sks_APEFT_JournalBankValidate = new SKS_APEFT_JournalBankValidate();  //SKS_BS_VP4_BankFormatValidation
        SKS_BTBEFT_JournalBankValidate sks_BTBEFT_JournalBankValidate = new SKS_BTBEFT_JournalBankValidate();  //SKS_BS_VP4_BankFormatValidation
        SKS_CNPEFT_JournalBankValidate sks_CNPEFT_JournalBankValidate = new SKS_CNPEFT_JournalBankValidate();  //SKS_BS_VP4_BankFormatValidation
        sKS_EFT_FilePmtSelection    sKS_EFT_FilePmtSelection;
        LedgerJournalTable  ledgerJournalTable;
        JournalId           prevJournalID;
        boolean             deleteControlFileFlag = true;

        // API
        SKG_File.Models.SKGResponseModel    response;             
        boolean                             API = false;

        nextAction = _nextAction;
        mNextFileId = 1;
        select forupdate msks_eftap_file where msks_eftap_file.FileNbr == _FileNbr && msks_eftap_file.EFTFileType == _module;
        this.GetAPBank(msks_eftap_file.MALBankAccountId, msks_eftap_file.MALPaymMode);
        if (mSKS_EFT_Bank.APArchive == NoYes::Yes && mSKS_EFTAP_File.BFBankIntegration == SKS_BF_BankIntType::BankFabric)
        {
            if(strScan(msks_eftap_file.FilePath, '\\Archive', 1, strLen(msks_eftap_file.FilePath)))
            {
                str newpath = subStr(msks_eftap_file.FilePath, 1, strScan(msks_eftap_file.FilePath, '\\Archive', 1, strLen(msks_eftap_file.FilePath))-1);
                ttsbegin;
                msks_eftap_file.selectForUpdate(true);
                msks_eftap_file.FilePath = subStr(msks_eftap_file.FilePath, 1, strScan(msks_eftap_file.FilePath, '\\Archive', 1, strLen(msks_eftap_file.FilePath)) - 1);
                msks_eftap_file.doUpdate();
                ttscommit;
            }
        }

        if(msks_eftap_file.FileName != '')
        {
            locFilePathName = msks_eftap_file.FilePath + '\\' + msks_eftap_file.FileName;       
        }
        else
        {
            locFilePathName = msks_eftap_file.FilePath;         
        }
        locErrFilePathName = msks_eftap_file.FilePath + '\\Log\\' + msks_eftap_file.FileName + '.err';
        locLogFilePathName = msks_eftap_file.FilePath + '\\Log\\' + msks_eftap_file.FileName + '.log';

        if(msks_eftap_file.ControlFileName != '')
        {
            locControlFilePathName = msks_eftap_file.FilePath + '\\' + msks_eftap_file.ControlFileName;
        }
        else
        {
            locControlFilePathName = msks_eftap_file.FilePath;
            deleteControlFileFlag = false;
        }
        locControlErrFilePathName = msks_eftap_file.FilePath + '\\Log\\' + msks_eftap_file.ControlFileName + '.err';
        locControllogFilePathName = msks_eftap_file.FilePath + '\\Log\\' + msks_eftap_file.ControlFileName + '.log';

        mNbrGoodRecs = msks_eftap_file.Ret_NbrGoodRecs;

        mNextSequenceNumber = mNbrGoodRecs;

        mSKS_EFT_Setup = SKS_EFT_Setup::find();

        //FDD-10590 --->
        if(!multicompaniesCon)
        {
            if(_module == SKS_EFT_Module::AR)
            {
                multicompaniesCon = SKS_EB_VirtualCompany::getDDMultiCompanies();
            }
            else if(_module == SKS_EFT_Module::AP)
            {
                multicompaniesCon = SKS_EB_VirtualCompany::getEFT_APMultiCompanies();
            }
        }
        //<--- FDD-10590
        this.GetEFTFileFormat('', _module);

        if(nextAction == SKS_PP_NextActionDisplay::CreateSendFile || nextAction  == SKS_PP_NextActionDisplay::SendAdvEmail) // SKS_Bug_11724
        {
            if(_module == SKS_EFT_Module::AR)
            {
                while select crosscompany:multicompaniesCon PmtJournalNum, Company from sKS_EFT_FilePmtSelection //SKS_FDD_10590
                where sKS_EFT_FilePmtSelection.FileRecId == msks_eftap_file.RecId
                {
                    changecompany(sKS_EFT_FilePmtSelection.Company ? sKS_EFT_FilePmtSelection.Company: sKS_EFT_FilePmtSelection.DataAreaId)//FDD-10590
                    {
                        ledgerJournalTable = null;//SKS_FDD_10590
                        ledgerJournalTable = LedgerJournalTable::find(sKS_EFT_FilePmtSelection.PmtJournalNum);
                        if(ledgerJournalTable.JournalType == LedgerJournalType::CustPayment)//Sks_Bug_7520
                        {
                            SKS_EFT_ARJournalValidate::validateSet(ledgerJournalTable,true,false,mSKS_EFT_Setup.DDFormatValidCreateSend,mSKS_EFT_Setup.DDFormatValidMultiThread);//Sks_Bug_7520
  
                            if(SKS_EFT_JournalValidate::isJournalException(ledgerJournalTable.JournalNum))
                            {
                                throw error("@SKS4242");
                            }
                        }
                    }
                }

                boolean recordFound = false;
                System.Threading.Tasks.Task validationTask;
                List tasks = new List(Types::Class);

                while select crosscompany:multicompaniesCon PmtJournalNum, Company from sKS_EFT_FilePmtSelection //SKS_FDD_10590
                where sKS_EFT_FilePmtSelection.FileRecId == msks_eftap_file.RecId
                    join LedgerJournalTrans
                        where LedgerJournalTrans.SKS_EFT_ARPmtSelectionRecId == sKS_EFT_FilePmtSelection.RecId
                {
                    changecompany(sKS_EFT_FilePmtSelection.Company ? sKS_EFT_FilePmtSelection.Company: sKS_EFT_FilePmtSelection.DataAreaId)//FDD-10590
                    {
                        if(prevJournalID != LedgerJournalTrans.JournalNum)
                        {
                            ledgerJournalTable = LedgerJournalTable::find(sKS_EFT_FilePmtSelection.PmtJournalNum);
                            prevJournalID = LedgerJournalTrans.JournalNum;

                            SKS_EFT_JournalValidate::removeJournalException(sKS_EFT_FilePmtSelection.PmtJournalNum);
                        }
                        custPaymModeTable = custPaymModeTable::find(ledgerJournalTrans.PaymMode);
                        if(ledgerJournalTable.JournalType == LedgerJournalType::CustPayment)//Sks_Bug_7520
                        {
                            if(!_AutoCreateEFT)
                            {
                                recordFound = true;
                                if(mSKS_EFT_Setup.DDFormatValidMultiThread)
                                {
                                    validationTask = Global::runAsync(
                                    classNum(SKS_DD_JournalBankValidate),
                                    staticMethodStr(SKS_DD_JournalBankValidate, runValidation),
                                    [custPaymModeTable, ledgerJournalTrans, true, false],
                                    System.Threading.CancellationToken::None);

                                    tasks.addEnd(validationTask);
                                }
                                else
                                {
                                    sks_DD_JournalBankValidate.paymJournalValidate(custPaymModeTable, ledgerJournalTrans, true, false);//Sks_Bug_7520
                                }
                            }
                        }
                    }
                }
                if(recordFound)
                {
                    if(mSKS_EFT_Setup.DDFormatValidMultiThread)
                    {
                        SKS_EFT_JournalValidate::runAfterAllValidated(tasks.pack(), '');
                    }
                    prevJournalID = '';
                    while select crosscompany:multicompaniesCon PmtJournalNum, Company, FileRecId from sKS_EFT_FilePmtSelection //SKS_FDD_10590
                    where sKS_EFT_FilePmtSelection.FileRecId == msks_eftap_file.RecId
                    {
                        changecompany(sKS_EFT_FilePmtSelection.Company ? sKS_EFT_FilePmtSelection.Company: sKS_EFT_FilePmtSelection.DataAreaId) //SKS_FDD_10590
                        {
                            if(prevJournalID == '' || prevJournalID != sKS_EFT_FilePmtSelection.PmtJournalNum)
                            {
                                prevJournalID = sKS_EFT_FilePmtSelection.PmtJournalNum;

                                if(SKS_EFT_JournalValidate::isJournalException(sKS_EFT_FilePmtSelection.PmtJournalNum))
                                {
                                    throw error("@SKS4242");
                                }
                            }
                        }
                    }
                }
            }

            if(_module == SKS_EFT_Module::AP)
            {
                
                //SKS -start
                //SKS_VP1_APPaymentValidation
                while select crosscompany:multicompaniesCon PmtJournalNum, Company from sKS_EFT_FilePmtSelection //SKS_FDD_10590
                where sKS_EFT_FilePmtSelection.FileRecId == msks_eftap_file.RecId
                {
                    changecompany(sKS_EFT_FilePmtSelection.Company ? sKS_EFT_FilePmtSelection.Company: sKS_EFT_FilePmtSelection.DataAreaId) //SKS_FDD_10590
                    {
                        ledgerJournalTable = null;
                        ledgerJournalTable = LedgerJournalTable::find(sKS_EFT_FilePmtSelection.PmtJournalNum);
                        if(ledgerJournalTable.JournalType == LedgerJournalType::Payment && !_AutoCreateEFT)//Sks_Bug_7520
                        {
                            SKS_EFT_APJournalValidate::validateSet(ledgerJournalTable,true,false,false,mSKS_EFT_Setup.APFormatValidCreateSend,mSKS_EFT_Setup.APFormatValidMultiThread);//Sks_Bug_7520

                            if(SKS_EFT_JournalValidate::isJournalException(ledgerJournalTable.JournalNum))
                            {
                                throw error("@SKS4426");
                            }
                        }
                    }
                }

                boolean recordFound = false;
                System.Threading.Tasks.Task validationTask;
                List tasks = new List(Types::Class);

                while select crosscompany:multicompaniesCon PmtJournalNum, Company, FileRecId from sKS_EFT_FilePmtSelection //SKS_FDD_10590
                where sKS_EFT_FilePmtSelection.FileRecId == msks_eftap_file.RecId
                join ledgerJournalTrans where ledgerJournalTrans.SKS_EFT_APPmtSelectionRecId == sKS_EFT_FilePmtSelection.RecId //SKS_FDD_10590
                {
                    changecompany(sKS_EFT_FilePmtSelection.Company ? sKS_EFT_FilePmtSelection.Company: sKS_EFT_FilePmtSelection.DataAreaId) //SKS_FDD_10590
                    {
                        if(prevJournalID != LedgerJournalTrans.JournalNum)
                        {
                            ledgerJournalTable = LedgerJournalTable::find(sKS_EFT_FilePmtSelection.PmtJournalNum);
                            prevJournalID = LedgerJournalTrans.JournalNum;

                            SKS_EFT_JournalValidate::removeJournalException(sKS_EFT_FilePmtSelection.PmtJournalNum);
                        }
                        vendPaymModeTable = VendPaymModeTable::find(ledgerJournalTrans.PaymMode);

                        if(ledgerJournalTable.JournalType == LedgerJournalType::Payment)
                        {
                            if(!_AutoCreateEFT)
                            {
                                recordFound = true;
                                SKS_EFT_JournalValidate::checkSettledAmount(ledgerJournalTrans, _module, true);

                                if(mSKS_EFT_Setup.APFormatValidMultiThread)
                                {
                                    validationTask = Global::runAsync(
                                        classNum(SKS_APEFT_JournalBankValidate),
                                        staticMethodStr(SKS_APEFT_JournalBankValidate, runValidation),
                                        [vendPaymModeTable, ledgerJournalTrans, true, false],
                                        System.Threading.CancellationToken::None);

                                    tasks.addEnd(validationTask);
                                }
                                else
                                {
                                    sks_APEFT_JournalBankValidate.paymJournalValidate(vendPaymModeTable, ledgerJournalTrans, true, false);//Sks_Bug_7520
                                }
                            }
                        }
                    }
                }

                if(recordFound)
                {
                    if(mSKS_EFT_Setup.APFormatValidMultiThread)
                    {
                        SKS_EFT_JournalValidate::runAfterAllValidated(tasks.pack(), '');
                    }
                    prevJournalID = '';
                    while select crosscompany:multicompaniesCon PmtJournalNum, Company from sKS_EFT_FilePmtSelection //SKS_FDD_10590
                        where sKS_EFT_FilePmtSelection.FileRecId == msks_eftap_file.RecId
                    {
                        changecompany(sKS_EFT_FilePmtSelection.Company ? sKS_EFT_FilePmtSelection.Company: sKS_EFT_FilePmtSelection.DataAreaId) //SKS_FDD_10590
                        {
                            if(prevJournalID == '' || prevJournalID != sKS_EFT_FilePmtSelection.PmtJournalNum)
                            {
                                prevJournalID = sKS_EFT_FilePmtSelection.PmtJournalNum;

                                if(SKS_EFT_JournalValidate::isJournalException(sKS_EFT_FilePmtSelection.PmtJournalNum))
                                {
                                    throw error("@SKS4426");
                                }
                            }
                        }
                    }
                }
                //SKS_VP1_APPaymentValidation
                //SKS -End
            }

            if(_module == SKS_EFT_Module::CNP)
            {
                while select PmtJournalNum, Company from sKS_EFT_FilePmtSelection //SKS_FDD_10590
                where sKS_EFT_FilePmtSelection.FileRecId == msks_eftap_file.RecId
                {
                    ledgerJournalTable = null;//SKS_FDD_10590
                    ledgerJournalTable = LedgerJournalTable::find(sKS_EFT_FilePmtSelection.PmtJournalNum);
                    if(ledgerJournalTable.JournalType == LedgerJournalType::CustPayment)//Sks_Bug_7520
                    {
                        SKS_EFT_CNPJournalValidate::validateSet(ledgerJournalTable,true,false);//Sks_Bug_7520

                        if(SKS_EFT_JournalValidate::isJournalException(sKS_EFT_FilePmtSelection.PmtJournalNum))
                        {
                            throw error("@SKS:SKGCNPEFTValidationFailed");
                        }
                    }
                }

                while select PmtJournalNum, Company from sKS_EFT_FilePmtSelection //SKS_FDD_10590
                    where sKS_EFT_FilePmtSelection.FileRecId == msks_eftap_file.RecId
                        join LedgerJournalTrans
                            where LedgerJournalTrans.JournalNum == sKS_EFT_FilePmtSelection.pmtjournalnum
                {
                    if(prevJournalID != LedgerJournalTrans.JournalNum)
                    {
                        ledgerJournalTable = LedgerJournalTable::find(sKS_EFT_FilePmtSelection.PmtJournalNum);
                        prevJournalID = LedgerJournalTrans.JournalNum;
                    }
                    custPaymModeTable = custPaymModeTable::find(ledgerJournalTrans.PaymMode);
                    if(ledgerJournalTable.JournalType == LedgerJournalType::CustPayment)//Sks_Bug_7520
                    {
                        sks_CNPEFT_JournalBankValidate.paymJournalValidate(custPaymModeTable, ledgerJournalTrans, true, false);//Sks_Bug_7520

                        if(SKS_EFT_JournalValidate::isJournalException(sKS_EFT_FilePmtSelection.PmtJournalNum))
                        {
                            throw error("@SKS:SKGCNPEFTValidationFailed");
                        }
                    }
                }
            }

            if(_module == SKS_EFT_Module::BTB)
            {
                while select PmtJournalNum, Company from sKS_EFT_FilePmtSelection //SKS_FDD_10590
                where sKS_EFT_FilePmtSelection.FileRecId == msks_eftap_file.RecId
                {
                    ledgerJournalTable = null;//SKS_FDD_10590
                    ledgerJournalTable = LedgerJournalTable::find(sKS_EFT_FilePmtSelection.PmtJournalNum);
                    if(ledgerJournalTable.JournalType == LedgerJournalType::Daily)//Sks_Bug_7520
                    {
                        SKS_EFT_BTBJournalValidate::validateSet(ledgerJournalTable,true,false);//Sks_Bug_7520

                        if(SKS_EFT_JournalValidate::isJournalException(sKS_EFT_FilePmtSelection.PmtJournalNum))
                        {
                            throw error("@SKS:SKGBTBEFTValidationFailed");
                        }
                    }
                }

                while select PmtJournalNum, Company from sKS_EFT_FilePmtSelection //SKS_FDD_10590
                where sKS_EFT_FilePmtSelection.FileRecId == msks_eftap_file.RecId
                        join LedgerJournalTrans
                            where LedgerJournalTrans.JournalNum == sKS_EFT_FilePmtSelection.pmtjournalnum
                {
                    if(prevJournalID != LedgerJournalTrans.JournalNum)
                    {
                        ledgerJournalTable = LedgerJournalTable::find(sKS_EFT_FilePmtSelection.PmtJournalNum);
                        prevJournalID = LedgerJournalTrans.JournalNum;
                    }
                    btbPaymModeTable = SKS_BTB_PaymModeTable::find(ledgerJournalTrans.PaymMode);
                    if(ledgerJournalTable.JournalType == LedgerJournalType::Daily)//Sks_Bug_7520
                    {
                        sks_BTBEFT_JournalBankValidate.paymJournalValidate(btbPaymModeTable, ledgerJournalTrans, true, false);//Sks_Bug_7520

                        if(SKS_EFT_JournalValidate::isJournalException(sKS_EFT_FilePmtSelection.PmtJournalNum))
                        {
                            throw error("@SKS:SKGBTBEFTValidationFailed");
                        }
                    }
                }
            }

        }
        // SKS_Bug_11724

        //Print Report (only available once working table has been created) and exit
        if (nextAction == SKS_PP_NextActionDisplay::PrintAudit)// (Print audit report only)
        {
            this.PrintEFTAuditReport(_module);
            return;
        }

        else if(nextAction == SKS_PP_NextActionDisplay::CreateSendFile || nextAction  == SKS_PP_NextActionDisplay::SendAdvEmail)
        {
            if(msks_eftap_file.JournalOption != SKS_EFT_FileJournalOption::PreNotesOnly &&
                msks_eftap_file.JournalOption != SKS_EFT_FileJournalOption::MasterAccountList &&
                msks_eftap_file.JournalOption != SKS_EFT_FileJournalOption::TestFile)

            {
                if(_module == SKS_EFT_Module::AP)
                {
                    mReturnMsg = this.CheckUserSelectionAP(msks_eftap_file.RecId);
                }
                else if(_module == SKS_EFT_Module::BTB)
                {
                    mReturnMsg = this.CheckUserSelectionBTB(msks_eftap_file.RecId);
                }
                else if(_module == SKS_EFT_Module::CNP)
                {
                    mReturnMsg = this.CheckUserSelectionCNP(msks_eftap_file.RecId);
                }
                else
                {
                    mReturnMsg = this.CheckUserSelectionAR(msks_eftap_file.RecId);
                }

                if(mReturnMsg != '') //errors were found
                {
                    error(mReturnMsg);
                    return;
                }
            }
            else if(msks_eftap_file.JournalOption == SKS_EFT_FileJournalOption::MasterAccountList)
            {
                if(!msks_eft_Setup.APServerSideFiles  && msks_eft_FileFormat.MastAcctList)
                {
                    mReturnMsg = strFmt("@SKS2633",msks_eftap_file.FormatId, msks_eft_Setup.company());
                    error(mReturnMsg);
                    return;
                }

            }

            if(_module == SKS_EFT_Module::AP)
            {
                if(msks_eftap_file.MALBankAccountId != '' && msks_eftap_file.MALPaymMode != '')
                {
                    this.GetAPBank(msks_eftap_file.MALBankAccountId, msks_eftap_file.MALPaymMode);
                }
            }
            else if(_module == SKS_EFT_Module::BTB)
            {
                this.GetBTBBank();
            }
            else if(_module == SKS_EFT_Module::CNP)
            {
                this.GetCNPBank();
            }
            else
            {
                this.GetARBank();
            }

            if(msks_eftap_file.FileStatus != SKS_EFT_FileStatus::NotProcessed
                    && nextAction  == SKS_PP_NextActionDisplay::SendAdvEmail)
            {
                recordCreated = true;
            }
            else
            {
                recordCreated = this.BuildWorkingTable(_module, msks_eftap_file.MALPaymMode);
            }

            if(mReturnMsg != '') //errors were found
            {
                this.SequenceUpdateACHNotInUse(_module, msks_eftap_file.RecId); //FDD-10590
                error(mReturnMsg);
                return;
            }
            else if(!recordCreated)
            {
                this.SequenceUpdateACHNotInUse(_module, msks_eftap_file.RecId); //FDD-10590
                mReturnMsg = "@SYS4205";
                error(mReturnMsg); //no records found
                return;
            }

            if(msks_eftap_file.JournalOption != SKS_EFT_FileJournalOption::TestFile &&
                msks_eftap_file.JournalOption != SKS_EFT_FileJournalOption::MasterAccountList)
            {
                mReturnMsg = this.CheckJournals(_module);
                mNextSequenceNumber = mNbrGoodRecs; //11849
                if(mReturnMsg != '') //errors were found
                {
                    this.SequenceUpdateACHNotInUse(_module, msks_eftap_file.RecId); //FDD-10590
                    error(mReturnMsg);
                    return;
                }
                else if(mNbrGoodRecs == 0)
                {
                    this.SequenceUpdateACHNotInUse(_module, msks_eftap_file.RecId); //FDD-10590
                    mReturnMsg = "@SYS4205";
                    error(mReturnMsg);
                    return;
                }
            }

            if(mNbrGoodRecs > 0 ||
                msks_eftap_file.JournalOption == SKS_EFT_FileJournalOption::PreNotesOnly ||
                msks_eftap_file.JournalOption == SKS_EFT_FileJournalOption::TestFile ||
                msks_eftap_file.JournalOption == SKS_EFT_FileJournalOption::MasterAccountList &&
                nextAction != SKS_PP_NextActionDisplay::SendAdvEmail)
            {
                if(msks_eft_FileFormat.FormatGroupCodeSource == SKS_EB_CodeSource::BankFabric)
                {
                    if(!msks_eft_FileFormat.FormatGroupDataContractVersion)
                    {
                        msks_eft_FileFormat.FormatGroupDataContractVersion = '1.0';
                    }
                    str className = strReplace('SKS_EFT_BankFabricPayment_' + msks_eft_FileFormat.FormatGroupDataContractVersion, '.', '_');
                    mReturnMsg = SKS_EFT_Processing::ValidateBFLClass(className);

                    if(mReturnMsg != '') //errors were found
                    {
                        this.SequenceUpdateACHNotInUse(_module, msks_eftap_file.RecId); //FDD-10590
                        error(mReturnMsg);
                        return;
                    }

                    perm = new ExecutePermission();
                    perm.assert();

                    // BP deviation documented
                    obj = new SysDictClass(className2Id(className));
                    classInstance = obj.makeObject(); // Instantiate class
                    // BP deviation documented
                    obj.callObject('parmSKS_EFT_File', classInstance, msks_eftap_file); 
                    // BP deviation documented
                    obj.callObject('parmSKS_EFT_FileFormat', classInstance, msks_eft_FileFormat);
                    // BP deviation documented
                    obj.callObject('parmSKS_EFTAP_Bank', classInstance, msks_eft_bank);
                    // BP deviation documented
                    obj.callObject('parmSKS_EFTAR_Bank', classInstance, msks_eftar_bank);
                    // BP deviation documented
                    obj.callObject('parmSKS_EFTBTB_Bank', classInstance, msks_eftbtb_bank);
                    // BP deviation documented
                    obj.callObject('parmSKS_EFTCNP_Bank', classInstance, msks_eftcnp_bank);
                    // BP deviation documented
                    obj.callObject('parmNextFileId', classInstance, mNextFileId);
                    // BP deviation documented
                    obj.callObject('parmNextSequenceNumber', classInstance, mNextSequenceNumber);
                    // BP deviation documented
                    response = obj.callObject('sendPayments', classInstance); // Run

                    // API
                    if(mSKS_EFTAP_File.BFBankIntegration == SKS_BF_BankIntType::BankFabric && msks_eft_FileFormat.APIFileFormatType == SKS_EFT_APIFormatType::API)
                    {
                        API = true;
                    }

                    if(response && response.Exception == "")
                    { 
                        if(API)     
                        {  
                            str jsonStr = response.PaymentCreateResponseString;
                            SKS_APIResponseTableTmp responseTable;
                            responseTable = this.parseResponse(jsonStr);
                             /*
                            SKS_APIResponseTableTmp responseTableLoc;
                            while select responseTable
                            {
                                buf2Buf(responseTable, responseTableLoc);
                                responseTableLoc.insert();
                            }
                             */
                            select count(RecId) from responseTable;
                            int64 totalResponses = responseTable.RecId;

                            mNbrGoodRecs = this.responseCount(responseTable, SKS_EFT_APIPaymentStatus::Received);

                            // parse the response and set the status
                            if(totalResponses == this.responseCount(responseTable, SKS_EFT_APIPaymentStatus::Received))
                            {
                                // C/S Status
                                this.Update_SKS_EFTAP_File_FileStatus(SKS_EFT_FileStatus::Transmitted, _module);
                            
                                // Line detail file status - field is not displayed on the form                                
                                this.Update_SKS_EFT_FileDetail(SKS_EFT_FileStatus::Transmitted);
                            
                                // C/S Response Type
                                this.Update_SKS_EFTAP_File_ResponseType(SKS_EFT_APIResponseType::Received);
                            
                                // Line detail API status
                                SKS_EFT_FileDetail  sks_eft_fileDetailLoc;
                                while select sks_eft_fileDetailLoc 
                                    join responseTable 
                                    where responseTable.PaymentReference == sks_eft_fileDetailLoc.PaymentReference
                                        && sks_eft_fileDetailLoc.FileRecId == msks_eftap_file.RecId                                    
                                {
                                    this.Update_SKS_EFT_FileDetail_Response(sks_eft_fileDetailLoc, SKS_EFT_APIResponseType::Received, responseTable);
                                }
                            
                                // Payment journal line status                            
                            }
                            else if(totalResponses == this.responseCount(responseTable, SKS_EFT_APIPaymentStatus::CommFailed))
                            {                               
                                // C/S Status
                                this.Update_SKS_EFTAP_File_FileStatus(SKS_EFT_FileStatus::NotProcessed, _module);
                            
                                // Line detail file status - Do not update                            
                            
                                // C/S Response Type
                                this.Update_SKS_EFTAP_File_ResponseType(SKS_EFT_APIResponseType::CommFailed);
                            
                                // Line detail API status
                                SKS_EFT_FileDetail  sks_eft_fileDetailLoc;
                                while select sks_eft_fileDetailLoc
                                    join responseTable
                                    where responseTable.PaymentReference == sks_eft_fileDetailLoc.PaymentReference
                                        && sks_eft_fileDetailLoc.FileRecId == msks_eftap_file.RecId
                                {
                                    this.Update_SKS_EFT_FileDetail_Response(sks_eft_fileDetailLoc, SKS_EFT_APIResponseType::CommFailed, responseTable);
                                }
                            
                                // Payment journal line status - Do not update
                            }                   
                            else if(totalResponses == this.responseCount(responseTable, SKS_EFT_APIPaymentStatus::Rejected))
                            {
                                // C/S Status
                                this.Update_SKS_EFTAP_File_FileStatus(SKS_EFT_FileStatus::NotProcessed, _module);
                            
                                // Line detail file status - Do not update
                            
                                // C/S Response Type
                                this.Update_SKS_EFTAP_File_ResponseType(SKS_EFT_APIResponseType::Rejected);
                            
                                // Line detail API status
                                SKS_EFT_FileDetail  sks_eft_fileDetailLoc;
                                while select sks_eft_fileDetailLoc
                                    join responseTable
                                    where responseTable.PaymentReference == sks_eft_fileDetailLoc.PaymentReference
                                        && sks_eft_fileDetailLoc.FileRecId == msks_eftap_file.RecId
                                {
                                    this.Update_SKS_EFT_FileDetail_Response(sks_eft_fileDetailLoc, SKS_EFT_APIResponseType::None, responseTable);
                                }
                            
                                // Payment journal line status - Do not update                            
                            }
                            else if(totalResponses == (this.responseCount(responseTable, SKS_EFT_APIPaymentStatus::Rejected) + this.responseCount(responseTable, SKS_EFT_APIPaymentStatus::CommFailed)))
                            {
                                // C/S Outbound Status
                                this.Update_SKS_EFTAP_File_FileStatus(SKS_EFT_FileStatus::NotProcessed, _module);
                            
                                // Line detail file status - field is not displayed on the form                                 
                            
                                // C/S Response Type
                                this.Update_SKS_EFTAP_File_ResponseType(SKS_EFT_APIResponseType::Rejected);
                            
                                // Line detail API status
                                SKS_EFT_FileDetail  sks_eft_fileDetailLoc;
                                while select sks_eft_fileDetailLoc
                                    join responseTable
                                    where responseTable.PaymentReference == sks_eft_fileDetailLoc.PaymentReference
                                        && sks_eft_fileDetailLoc.FileRecId == msks_eftap_file.RecId
                                {
                                    this.Update_SKS_EFT_FileDetail_Response(sks_eft_fileDetailLoc, SKS_EFT_APIResponseType::None, responseTable);
                                }                           
                            }
                            else // Partially received
                            {
                                // C/S Outbound Status
                                this.Update_SKS_EFTAP_File_FileStatus(SKS_EFT_FileStatus::Transmitted, _module);
                            
                                // Line detail file status - field is not displayed on the form
                                this.Update_SKS_EFT_FileDetail(SKS_EFT_FileStatus::Transmitted);
                            
                                // C/S Response Type
                                this.Update_SKS_EFTAP_File_ResponseType(SKS_EFT_APIResponseType::PartiallyReceived);

                                // Line detail API status
                                SKS_EFT_FileDetail  sks_eft_fileDetailLoc;
                                while select sks_eft_fileDetailLoc
                                    join responseTable
                                    where responseTable.PaymentReference == sks_eft_fileDetailLoc.PaymentReference
                                        && sks_eft_fileDetailLoc.FileRecId == msks_eftap_file.RecId
                                {
                                    this.Update_SKS_EFT_FileDetail_Response(sks_eft_fileDetailLoc, SKS_EFT_APIResponseType::None, responseTable);
                                }
                            }
                        } // if API
                    }
                 
                    if(response.PaymentAdditionalData != '')
                    {
                        System.Xml.XmlDocument xmlDoc = new System.Xml.XmlDocument();
                        xmlDoc.LoadXml(response.PaymentAdditionalData);
                        this.StoreAdditionalDataFields(xmlDoc);
                    }

                    mReturnMsg = response.Exception;

                    if(msks_eft_FileFormat.FormatType == SKS_EFT_FormatType::EFT
                        && msks_eftap_file.JournalOption != SKS_EFT_FileJournalOption::MasterAccountList)
                    {
                        if(!API)
                        {
                            mNbrGoodRecs = response.PaymentNextSequenceNumber;                        
                        }
                    }

                    //BankFabric get file name
                    mBFNewFileName = obj.callObject('getBFNewFileName', classInstance);
                    mBFNewCtrlFileName = obj.callObject('getBFNewCtrlFileName', classInstance);
                }
                else
                {
                    if(msks_eftap_file.JournalOption == SKS_EFT_FileJournalOption::MasterAccountList)
                    {
                        formatName = strReplace('SKS_EFT_MAL_' + msks_eft_FileFormat.FormatGroup, '-', '_');
                        mReturnMsg = this.ValidateClass(formatName, msks_eft_FileFormat.FormatId);
                    }
                    else
                    {
                        if(_module == SKS_EFT_Module::AR)
                        {
                            formatName = strReplace('SKS_EFT_Format_' + msks_eft_FileFormat.FormatGroup + '_AR', '-', '_');

                            mReturnMsg = this.ValidateClass(formatName, msks_eft_FileFormat.FormatId); //If we don't find AR specific class then continue to check for normal class.
                        }

                        if((_module == SKS_EFT_Module::AP ||
                            _module == SKS_EFT_Module::BTB ||
                            _module == SKS_EFT_Module::CNP) || mReturnMsg != '')
                        {
                            formatName = strReplace('SKS_EFT_Format_' + msks_eft_FileFormat.FormatGroup, '-', '_');
                            mReturnMsg = this.ValidateClass(formatName, msks_eft_FileFormat.FormatId);
                        }
                    }

                    if(mReturnMsg != '') //errors were found
                    {
                        this.SequenceUpdateACHNotInUse(_module, msks_eftap_file.RecId); //FDD-10590
                        error(mReturnMsg);
                        return;
                    }

                    perm = new ExecutePermission();
                    perm.assert();

                    // BP deviation documented
                    obj = new SysDictClass(className2Id(formatName));
                    classInstance = obj.makeObject(); // Instantiate class
                    // BP deviation documented
                    obj.callObject('setFileNbr', classInstance, msks_eftap_file.FileNbr); // Call method to set variable
                    // BP deviation documented
                    obj.callObject('setSeqNumber', classInstance, mNextSequenceNumber);
                    // BP deviation documented
                    obj.callObject('setFileIdMod', classInstance, mNextFileId);
                    // BP deviation documented
                    obj.callObject('setModule', classInstance, msks_eftap_file.EFTFileType);
                    // BP deviation documented
                    locXmlDocument = obj.callObject('run', classInstance); // Run

                    //This method will place the values returned from the format into the SKS_EFT_FileData table.  These are values created on the fly during the format run process, and not stored anywhere else.
                    this.StoreAdditionalDataFields(locXmlDocument);

                    //BankFabric get file name
                    mBFNewFileName = obj.callObject('getBFNewFileName', classInstance);
                    mBFNewCtrlFileName = obj.callObject('getBFNewCtrlFileName', classInstance);

                    // BP deviation documented
                    mReturnMsg = obj.callObject('getErrorText', classInstance);

                    if(msks_eft_FileFormat.FormatType == SKS_EFT_FormatType::EFT
                        && msks_eftap_file.JournalOption != SKS_EFT_FileJournalOption::MasterAccountList)
                    {
                        // BP deviation documented
                        mNbrGoodRecs = obj.callObject('getSeqNumber', classInstance);
                    }

                    obj = null;
                    classInstance = null;
                    CodeAccessPermission::revertAssert();
                }
            }
            if(mReturnMsg != '') //errors were found
            {
                this.SequenceUpdateACHNotInUse(_module, msks_eftap_file.RecId); //FDD-10590

                if (msks_eftap_file.BFBankIntegration == SKS_BF_BankIntType::BankFabric && !API)  //Bankfabric DEvops 15745
                {
                    ttsbegin;
                    RefRecId                fileRecId = msks_eftap_file.RecId;
                    select forupdate msks_eftap_file where msks_eftap_file.RecId == fileRecId;
                    
                    msks_eftap_file.FileName = '';
                    msks_eftap_file.ControlFileName = '';
                    ttscommit;
                    msks_eftap_file.update();
                }

                error(mReturnMsg);
                return;
            }

            if(mNbrGoodRecs > 0)
            {
                if(!API)               
                {
                    this.Update_SKS_EFTAP_File_FileStatus(SKS_EFT_FileStatus::FileCreated, _module);
                }
                
                //Update any number sequences used in these files.
                this.SequenceNumberUpdate(_module, msks_eftap_file.RecId); //FDD-10590
                
            }

            // Cleanup/delete files becuase we had no records
            if(mNbrGoodRecs == 0)
            {
                if(!API)
                {
                    sks_pp_500ppbas.Kill(locFilePathName, msks_eftap_file.BFBankIntegration);
                }

                this.SequenceUpdateACHNotInUse(_module, msks_eftap_file.RecId); //FDD-10590
                if(API)
                {
                    mReturnMsg = "@SKS:APIFailed";
                }
                else
                {
                    mReturnMsg = "@SYS4205";
                }
                error(mReturnMsg);
                return;
            }

            
            ttsbegin;

            RefRecId                fileRecId = msks_eftap_file.RecId;
            select forupdate msks_eftap_file where msks_eftap_file.RecId == fileRecId;

            msks_eftap_file.Ret_NbrGoodRecs = mNbrGoodRecs;
            msks_eftap_file.FormatGroupVersion = msks_eft_FileFormat.FormatGroupVersion;
            msks_eftap_file.FormatGroupCodeSource = msks_eft_FileFormat.FormatGroupCodeSource;
            msks_eftap_file.FormatGroupDataContractVersion = msks_eft_FileFormat.FormatGroupDataContractVersion;

            //BankFabric - assign file name from bank fabric
            if (mBFNewFileName)
            {
                msks_eftap_file.FileName = mBFNewFileName;
            }

            if (mBFNewCtrlFileName)
            {
                msks_eftap_file.ControlFileName = mBFNewCtrlFileName;
            }

            //The following block retrieves and sets the InOutFormatKey field used later in matching with inbound files
            if(!API)
            {
                if(_module == SKS_EFT_Module::AP)
                {
                    select locSKS_EFT_InboundFileGroups
                        where locSKS_EFT_InboundFileGroups.InboundFileGroupId  == msks_eft_FileFormat.InboundFileGroupId;
                    if(locSKS_EFT_InboundFileGroups)
                    {
                        SKS_EFT_Processing::setOutboundFileKeys(locSKS_EFT_InboundFileGroups, msks_eftap_file);
                        SKS_EFT_Processing::setOutboundTranskeys(locSKS_EFT_InboundFileGroups, msks_eftap_file);
                    }

                }
                //<SKS-begin>
                else if(_module == SKS_EFT_Module::AR)
                {
                    select locSKS_EFT_InboundFileGroups
                        where locSKS_EFT_InboundFileGroups.InboundFileGroupId  == msks_eft_FileFormat.SKS_DD_InboundFileGroupId;
                    if(locSKS_EFT_InboundFileGroups)
                    {
                        SKS_EFT_Processing::setOutboundFileKeys(locSKS_EFT_InboundFileGroups, msks_eftap_file);
                        SKS_EFT_Processing::setOutboundTranskeys(locSKS_EFT_InboundFileGroups, msks_eftap_file);
                    }
                }
                else if(_module == SKS_EFT_Module::BTB)
                {
                    select locSKS_EFT_InboundFileGroups
                        where locSKS_EFT_InboundFileGroups.InboundFileGroupId  == msks_eft_FileFormat.SKS_BTB_InboundFileGroupId;
                    if(locSKS_EFT_InboundFileGroups)
                    {
                        SKS_EFT_Processing::setOutboundFileKeys(locSKS_EFT_InboundFileGroups, msks_eftap_file);
                        SKS_EFT_Processing::setOutboundTranskeys(locSKS_EFT_InboundFileGroups, msks_eftap_file);
                    }

                }
                else if(_module == SKS_EFT_Module::CNP)
                {
                    select locSKS_EFT_InboundFileGroups
                        where locSKS_EFT_InboundFileGroups.InboundFileGroupId  == msks_eft_FileFormat.SKS_CNP_InboundFileGroupId;
                    if(locSKS_EFT_InboundFileGroups)
                    {
                        SKS_EFT_Processing::setOutboundFileKeys(locSKS_EFT_InboundFileGroups, msks_eftap_file);
                        SKS_EFT_Processing::setOutboundTranskeys(locSKS_EFT_InboundFileGroups, msks_eftap_file);
                    }

                }
                //</SKS-end>
            }

            msks_eftap_file.update();

            ttscommit;
        }

        // CreateSendFile

        // ----------------------------------
        // FILE CREATED STAGE - FINISHED
        // ----------------------------------


        // ----------------------------------
        // TRANSMITTED - STARTED
        // ----------------------------------

        if(_module == SKS_EFT_Module::AP)
        {
            this.GetAPBank(msks_eftap_file.MALBankAccountId, msks_eftap_file.MALPaymMode);
            locSKS_EB_CommProcess = SKS_EFT_Processing::getSKS_EB_CommProcess(_SKS_EB_CommProcess, msks_eft_bank.APCommID);

        }
        else if(_module == SKS_EFT_Module::AR)
        {
            this.GetARBank();
            locSKS_EB_CommProcess = SKS_EFT_Processing::getSKS_EB_CommProcess(_SKS_EB_CommProcess, msks_eftar_bank.ARCommID);
        }
        else if(_module == SKS_EFT_Module::BTB)
        {
            this.GetBTBBank();
            locSKS_EB_CommProcess = SKS_EFT_Processing::getSKS_EB_CommProcess(_SKS_EB_CommProcess, msks_eftbtb_bank.BTBCommID);
        }
        else if(_module == SKS_EFT_Module::CNP)
        {
            this.GetCNPBank();
            locSKS_EB_CommProcess = SKS_EFT_Processing::getSKS_EB_CommProcess(_SKS_EB_CommProcess, msks_eftcnp_bank.CNPCommID);
        }

        if(msks_eftap_file.CommID == '')
        {
            this.Update_SKS_EFTAP_File_CommID(locSKS_EB_CommProcess.CommID);
        }
        //prenotes and test files will not know their own commid's. this block will look it up and set it in the SKS_EFTAP_File


        //AP Module
        if(_module == SKS_EFT_Module::AP
            && (nextAction == SKS_PP_NextActionDisplay::CreateSendFile
                || nextAction == SKS_PP_NextActionDisplay::Send
                || nextAction == SKS_PP_NextActionDisplay::RetryComm))
        {
            doCommunications = true;
            APOSkipCom = false;

            if(mSKS_EFT_Setup.APAdvProcessing && msks_eftap_file.JournalOption != SKS_EFT_FileJournalOption::TestFile && msks_eftap_file.JournalOption != SKS_EFT_FileJournalOption::MasterAccountList)
            {
                // Skip Comm if Pass2 or Pass1 and Skip Comm
                if(!mSKS_EFT_Setup.APAPOComm)
                {
                    doCommunications = false;
                    APOSkipCom = true;
                }
            }

            if(!API)
            {
                if(((locSKS_EB_CommProcess.CommType != SKS_PP_CommunicationsType::None && msks_eftap_file.BFBankIntegration == SKS_BF_BankIntType::FileHubLocal 
                    || msks_eftap_file.BFBankIntegration == SKS_BF_BankIntType::BankFabric))
                    && !APOSkipCom)
                {
                    //Build params list.
                    locParamters = SKS_EB_Send::getParams(locSKS_EB_CommProcess,
                                                                    msks_eftap_file.FileName,
                                                                    msks_eftap_file.FilePath,
                                                                    locFilePathName,
                                                                    SKS_EB_ParamGroup::unclassified,
                                                                    msks_eftap_file.ControlFileName,
                                                                    locControlFilePathName);

                    //Launch communications, if any.
                    locSendSuccess = SKS_EB_Send::Send(locSKS_EB_CommProcess,
                                                        locParamters,
                                                        locSKS_EB_CommProcess.CommUserProg,
                                                        locFilePathName,
                                                        _isInBatch, 
                                                        FalseTrue::False,
                                                        msks_eftap_file.FileName,
                                                        msks_eftap_file.FilePath);

                    //because the error file could come from AP or AR, you have to use a variable to store if it exist for shared code later.
                    SKS_EB_FileHub fileHub = SKS_EB_FileHub::construct(msks_eftap_file.BFBankIntegration);
                    fileHub.parmThrowErrorIfException(false);
                    fileHub.runFileInquire(locErrFilePathName);
                    locErrorFileExists = fileHub.attrFileExists();

                    //if commfailed and the previous run wasn't a commfailure, set it to commfailed status
                    if(locErrorFileExists || !locSendSuccess)                
                    {
                        locErrorFreeSend = false;
                        if(msks_eftap_file.FileStatus != SKS_EFT_FileStatus::CommFailed)
                        {
                            this.Update_SKS_EFTAP_File_FileStatus(SKS_EFT_FileStatus::CommFailed,_module);
                        }

                        if(_AutoCreateEFT)
                        {
                            mReturnMsg = "@SKS3755";
                            error(mReturnMsg);
                            return;
                        }
                    }
                    else
                    {
                        //Chk log file was created #15996
                        fileHub.runFileInquire(loclogFilePathName);
                        loclogFileExists = fileHub.attrFileExists();

                        if (msks_eftap_file.BFBankIntegration == SKS_BF_BankIntType::BankFabric && msks_eftap_file.ControlFileName)
                        {
                            locSendSuccess = SKS_EB_Send::Send(locSKS_EB_CommProcess, locParamters, locSKS_EB_CommProcess.CommUserProg,
                                                        locFilePathName, _isInBatch, FalseTrue::False, msks_eftap_file.ControlFileName, msks_eftap_file.FilePath);
                        }

                        fileHub.runFileInquire(locControlErrFilePathName);
                        locControlErrorFileExists = fileHub.attrFileExists();                    

                        if(locControlErrorFileExists || (msks_eftap_file.BFBankIntegration == SKS_BF_BankIntType::BankFabric && !locSendSuccess))
                        {
                            locErrorFreeSend = false;
                            if(msks_eftap_file.FileStatus != SKS_EFT_FileStatus::CommFailed)
                            {
                                this.Update_SKS_EFTAP_File_FileStatus(SKS_EFT_FileStatus::CommFailed,_module);
                            }
                        }
                        else
                        {
                            fileHub.runFileInquire(locControlLogFilePathName);
                            locControlLogFileExists = fileHub.attrFileExists();

                            this.Update_SKS_EFTAP_File_FileStatus(SKS_EFT_FileStatus::Transmitted,_module);
                            this.Update_SKS_EFT_FileDetail(SKS_EFT_FileStatus::Transmitted);
                        }
                    }
                    //#15996
                    ttsbegin;
                    RefRecId                fileRecId = msks_eftap_file.RecId;
                    select forupdate msks_eftap_file where msks_eftap_file.RecId == fileRecId;

                    msks_eftap_file.LogErrFilesChecked = NoYes::Yes;
                    msks_eftap_file.LogFileExist = (loclogFileExists || locControlLogFileExists)  ? NoYes::Yes : NoYes::No;
                    msks_eftap_file.ErrFileExist = (locErrorFileExists || locControlErrorFileExists) ? NoYes::Yes : NoYes::No;
                    msks_eftap_file.update();
                    ttscommit;


                }
                else
                {
                    if(APOSkipCom || (locSKS_EB_CommProcess.CommType == SKS_PP_CommunicationsType::None && msks_eftap_file.BFBankIntegration == SKS_BF_BankIntType::FileHubLocal))
                    {
                        this.Update_SKS_EFTAP_File_FileStatus(SKS_EFT_FileStatus::Transmitted, _module);
                        this.Update_SKS_EFT_FileDetail(SKS_EFT_FileStatus::Transmitted);
                    }                
                }
            }

            if(mSKS_EFT_Setup.APAdvProcessing && mNbrGoodRecs > 0
                && msks_eftap_file.JournalOption != SKS_EFT_FileJournalOption::TestFile
                && msks_eftap_file.JournalOption != SKS_EFT_FileJournalOption::MasterAccountList
                && !locErrorFileExists)
            {
                if((msks_eftap_file.JournalOption == SKS_EFT_FileJournalOption::PreNotesOnly && !mSKS_EFT_Setup.APAPOPreNotesOne) ||
                    msks_eftap_file.JournalOption != SKS_EFT_FileJournalOption::PreNotesOnly)
                {
                    if(mSKS_EFT_Setup.APAPOComm && locSendSuccess)
                    {
                        info(strFmt("@SKS995",
                            locFilePathName, ' ' + "@SKS996"));
                    }
                    else if(mSKS_EFT_Setup.APAPOComm && !locSendSuccess)
                    {
                        info(strFmt("@SKS:SKGFileCreated", locFilePathName));
                        error(strFmt("@SKS:SKGCommFailed", locFilePathName));
                    }
                    else
                    {
                        info(strFmt("@SKS995",
                            locFilePathName, ''));
                    }
                }
            }

            //10567 move AP audit report after communications
            if (_printReport)//check box was checked so print report now
            {
                //Print Audit report from working table
                this.PrintEFTAuditReport(_module);
            }
        }
        // Create/Send, Send AP

        //AR Module
        if(_module == SKS_EFT_Module::AR && (nextAction == SKS_PP_NextActionDisplay::CreateSendFile
            || nextAction == SKS_PP_NextActionDisplay::Send
            || nextAction == SKS_PP_NextActionDisplay::RetryComm))
        {
            locParamters = SKS_EB_Send::getParams(locSKS_EB_CommProcess,
                                                            msks_eftap_file.FileName,
                                                            msks_eftap_file.FilePath,
                                                            locFilePathName,
                                                            SKS_EB_ParamGroup::unclassified,
                                                            msks_eftap_file.ControlFileName,
                                                            locControlFilePathName);
            locSendSuccess = SKS_EB_Send::Send(locSKS_EB_CommProcess,
                                                    locParamters,
                                                    locSKS_EB_CommProcess.CommUserProg,
                                                    locFilePathName,
                                                    _isInBatch,
                                                    FalseTrue::False,
                                                    msks_eftap_file.FileName,
                                                    msks_eftap_file.FilePath);
            SKS_EB_FileHub fileHub = SKS_EB_FileHub::construct(msks_eftap_file.BFBankIntegration);
            fileHub.parmThrowErrorIfException(false);
            fileHub.runFileInquire(locErrFilePathName);
            locErrorFileExists = fileHub.attrFileExists();
            if (locErrorFileExists || !locSendSuccess)
            {
                locErrorFreeSend = false;
                if(msks_eftap_file.FileStatus != SKS_EFT_FileStatus::CommFailed)
                {
                    this.Update_SKS_EFTAP_File_FileStatus(SKS_EFT_FileStatus::CommFailed,_module);
                }
            }
            else
            {
                //Chk log file was created #15996
                fileHub.runFileInquire(loclogFilePathName);
                loclogFileExists = fileHub.attrFileExists();

                if (msks_eftap_file.BFBankIntegration == SKS_BF_BankIntType::BankFabric && msks_eftap_file.ControlFileName)
                {
                    locSendSuccess = SKS_EB_Send::Send(locSKS_EB_CommProcess, locParamters, locSKS_EB_CommProcess.CommUserProg,
                                                    locFilePathName, _isInBatch, FalseTrue::False, msks_eftap_file.ControlFileName, msks_eftap_file.FilePath);
                }

                fileHub.runFileInquire(locControlErrFilePathName);
                locControlErrorFileExists = fileHub.attrFileExists();

                if(locControlErrorFileExists || (msks_eftap_file.BFBankIntegration == SKS_BF_BankIntType::BankFabric && !locSendSuccess))
                {
                    locErrorFreeSend = false;
                    if(msks_eftap_file.FileStatus != SKS_EFT_FileStatus::CommFailed)
                    {
                        this.Update_SKS_EFTAP_File_FileStatus(SKS_EFT_FileStatus::CommFailed,_module);
                    }
                }
                else
                {
                    //Chk log file was created #15996
                    fileHub.runFileInquire(locControlLogFilePathName);
                    locControllogFileExists = fileHub.attrFileExists();

                    nextAction = SKS_PP_NextActionDisplay::CreateSendFile;
                    this.Update_SKS_EFTAP_File_FileStatus(SKS_EFT_FileStatus::Transmitted,_module);
                    this.Update_SKS_EFT_FileDetail(SKS_EFT_FileStatus::Transmitted);
                }
            }

            //#15996
            ttsbegin;
            RefRecId                fileRecId = msks_eftap_file.RecId;
            select forupdate msks_eftap_file where msks_eftap_file.RecId == fileRecId;

            msks_eftap_file.LogErrFilesChecked = NoYes::Yes;
            msks_eftap_file.LogFileExist = (loclogFileExists || locControlLogFileExists)  ? NoYes::Yes : NoYes::No;
            msks_eftap_file.ErrFileExist = (locErrorFileExists || locControlErrorFileExists) ? NoYes::Yes : NoYes::No;
            msks_eftap_file.update();
            ttscommit;

            //10567 move DD audit report after communications
            if (_printReport)//check box was checked so print report now
            {
                //Print Audit report from working table
                this.PrintEFTAuditReport(_module);
            }
        }
        // Create/Send, Send AR

        //BTB Module
        if(_module == SKS_EFT_Module::BTB
            && (nextAction == SKS_PP_NextActionDisplay::CreateSendFile
                || nextAction == SKS_PP_NextActionDisplay::Send
                || nextAction == SKS_PP_NextActionDisplay::RetryComm))
        {
            doCommunications = true;
            APOSkipCom = false;

            //Build params list.
            locParamters = SKS_EB_Send::getParams(locSKS_EB_CommProcess,
                                                                msks_eftap_file.FileName,
                                                                msks_eftap_file.FilePath,
                                                                locFilePathName,
                                                                SKS_EB_ParamGroup::unclassified,
                                                                msks_eftap_file.ControlFileName,
                                                                locControlFilePathName);


            locSendSuccess = SKS_EB_Send::Send(locSKS_EB_CommProcess,
                                                    locParamters,
                                                    locSKS_EB_CommProcess.CommUserProg,
                                                    locFilePathName,
                                                    _isInBatch,
                                                    FalseTrue::False,
                                                    msks_eftap_file.FileName,
                                                    msks_eftap_file.FilePath);

            //because the error file could come from AP or AR or BTB, you have to use a variable to store if it exist for shared code later.
            SKS_EB_FileHub fileHub = SKS_EB_FileHub::construct(msks_eftap_file.BFBankIntegration);
            fileHub.parmThrowErrorIfException(false);
            fileHub.runFileInquire(locErrFilePathName);
            locErrorFileExists = fileHub.attrFileExists();
            
            //if commfailed and the previous run wasn't a commfailure, set it to commfailed status
            if(locErrorFileExists || !locSendSuccess)            
            {
                locErrorFreeSend = false;
                if(msks_eftap_file.FileStatus != SKS_EFT_FileStatus::CommFailed)
                {
                    this.Update_SKS_EFTAP_File_FileStatus(SKS_EFT_FileStatus::CommFailed,_module);
                }
                if(_AutoCreateEFT)
                {
                    mReturnMsg = "@SKS3755";
                    error(mReturnMsg);
                    return;
                }
            }
            else
            {
                //Chk log file was created #15996
                fileHub.runFileInquire(loclogFilePathName);
                loclogFileExists = fileHub.attrFileExists();

                if (msks_eftap_file.BFBankIntegration == SKS_BF_BankIntType::BankFabric && msks_eftap_file.ControlFileName)
                {
                    locSendSuccess = SKS_EB_Send::Send(locSKS_EB_CommProcess, locParamters, locSKS_EB_CommProcess.CommUserProg,
                                                locFilePathName, _isInBatch, FalseTrue::False, msks_eftap_file.ControlFileName, msks_eftap_file.FilePath);
                }

                fileHub.runFileInquire(locControlErrFilePathName);
                locControlErrorFileExists = fileHub.attrFileExists();

                if(locControlErrorFileExists || (msks_eftap_file.BFBankIntegration == SKS_BF_BankIntType::BankFabric && !locSendSuccess))
                {
                    locErrorFreeSend = false;
                    if(msks_eftap_file.FileStatus != SKS_EFT_FileStatus::CommFailed)
                    {
                        this.Update_SKS_EFTAP_File_FileStatus(SKS_EFT_FileStatus::CommFailed,_module);
                    }
                }
                else
                {
                    //Chk log file was created #15996
                    fileHub.runFileInquire(locControlLogFilePathName);
                    locControllogFileExists = fileHub.attrFileExists();

                    this.Update_SKS_EFTAP_File_FileStatus(SKS_EFT_FileStatus::Transmitted,_module);
                    this.Update_SKS_EFT_FileDetail(SKS_EFT_FileStatus::Transmitted);
                }
            }

            //#15996
            ttsbegin;
            RefRecId                fileRecId = msks_eftap_file.RecId;
            select forupdate msks_eftap_file where msks_eftap_file.RecId == fileRecId;

            msks_eftap_file.LogErrFilesChecked = NoYes::Yes;
            msks_eftap_file.LogFileExist = (loclogFileExists || locControlLogFileExists)  ? NoYes::Yes : NoYes::No;
            msks_eftap_file.ErrFileExist = (locErrorFileExists || locControlErrorFileExists) ? NoYes::Yes : NoYes::No;
            msks_eftap_file.update();
            ttscommit;

            //}
            //else
            //{
            //    if(APOSkipCom || locSKS_EB_CommProcess.CommType == SKS_PP_CommunicationsType::None)
            //    {
            //        this.Update_SKS_EFTAP_File_FileStatus(SKS_EFT_FileStatus::Transmitted, _module);
            //        this.Update_SKS_EFT_FileDetail(SKS_EFT_FileStatus::Transmitted);
            //    }
            //}

            //10567 move AP audit report after communications
            if (_printReport)//check box was checked so print report now
            {
                //Print Audit report from working table
                this.PrintEFTAuditReport(_module);
            }
        }
        // Create/Send, Send BTB

        //AR Module
        if(_module == SKS_EFT_Module::CNP && (nextAction == SKS_PP_NextActionDisplay::CreateSendFile
            || nextAction == SKS_PP_NextActionDisplay::Send
            || nextAction == SKS_PP_NextActionDisplay::RetryComm))
        {
            locParamters = SKS_EB_Send::getParams(locSKS_EB_CommProcess,
                                                            msks_eftap_file.FileName,
                                                            msks_eftap_file.FilePath,
                                                            locFilePathName,
                                                            SKS_EB_ParamGroup::unclassified,
                                                            msks_eftap_file.ControlFileName,
                                                            locControlFilePathName);

            locSendSuccess = SKS_EB_Send::Send(locSKS_EB_CommProcess,
                                                    locParamters,
                                                    locSKS_EB_CommProcess.CommUserProg,
                                                    locFilePathName,
                                                    _isInBatch,
                                                    FalseTrue::False,
                                                    msks_eftap_file.FileName,
                                                    msks_eftap_file.FilePath);

            SKS_EB_FileHub fileHub = SKS_EB_FileHub::construct(msks_eftap_file.BFBankIntegration);
            fileHub.parmThrowErrorIfException(false);
            fileHub.runFileInquire(locErrFilePathName);
            locErrorFileExists = fileHub.attrFileExists();
            if (locErrorFileExists || !locSendSuccess)
            {
                locErrorFreeSend = false;
                if(msks_eftap_file.FileStatus != SKS_EFT_FileStatus::CommFailed)
                {
                    this.Update_SKS_EFTAP_File_FileStatus(SKS_EFT_FileStatus::CommFailed,_module);
                }
            }
            else
            {
                //Chk log file was created #15996
                fileHub.runFileInquire(loclogFilePathName);
                loclogFileExists = fileHub.attrFileExists();

                if (msks_eftap_file.BFBankIntegration == SKS_BF_BankIntType::BankFabric && msks_eftap_file.ControlFileName)
                {
                    locSendSuccess = SKS_EB_Send::Send(locSKS_EB_CommProcess, locParamters, locSKS_EB_CommProcess.CommUserProg,
                                                    locFilePathName, _isInBatch, FalseTrue::False, msks_eftap_file.ControlFileName, msks_eftap_file.FilePath);
                }

                fileHub.runFileInquire(locControlErrFilePathName);
                locControlErrorFileExists = fileHub.attrFileExists();

                if(locControlErrorFileExists || (msks_eftap_file.BFBankIntegration == SKS_BF_BankIntType::BankFabric && !locSendSuccess))
                {
                    locErrorFreeSend = false;
                    if(msks_eftap_file.FileStatus != SKS_EFT_FileStatus::CommFailed)
                    {
                        this.Update_SKS_EFTAP_File_FileStatus(SKS_EFT_FileStatus::CommFailed,_module);
                    }
                }
                else
                {
                    //Chk log file was created #15996
                    fileHub.runFileInquire(locControlLogFilePathName);
                    locControllogFileExists = fileHub.attrFileExists();

                    nextAction = SKS_PP_NextActionDisplay::CreateSendFile;
                    this.Update_SKS_EFTAP_File_FileStatus(SKS_EFT_FileStatus::Transmitted,_module);
                    this.Update_SKS_EFT_FileDetail(SKS_EFT_FileStatus::Transmitted);
                }
            }

            //#15996
            ttsbegin;
            RefRecId                fileRecId = msks_eftap_file.RecId;
            select forupdate msks_eftap_file where msks_eftap_file.RecId == fileRecId;

            msks_eftap_file.LogErrFilesChecked = NoYes::Yes;
            msks_eftap_file.LogFileExist = (loclogFileExists || locControlLogFileExists)  ? NoYes::Yes : NoYes::No;
            msks_eftap_file.ErrFileExist = (locErrorFileExists || locControlErrorFileExists) ? NoYes::Yes : NoYes::No;
            msks_eftap_file.update();
            ttscommit;

            //10567 move DD audit report after communications
            if (_printReport)//check box was checked so print report now
            {
                //Print Audit report from working table
                this.PrintEFTAuditReport(_module);
            }
        }

        // ----------------------------------
        // FILE TRANSMITTED STAGE - FINISHED
        // ----------------------------------

        //
        //Send Advance Email
        if( nextAction == SKS_PP_NextActionDisplay::SendAdvEmail)
        {
            // 9205 CR -->
            if(_module == SKS_EFT_Module::AR)
            {
                info("@SKS:SKGInfoDDAdvEmailBatch"); // SKS_Bug_9629
                SKS_EFTAP_CreateSendFileBatch::createMultiThreadBatch(
                    msks_eftap_file, nextAction, SKS_EFT_EmailSendType::All,'','', NoYes::Yes);
            }
            else if(_module == SKS_EFT_Module::AP)
            {
                // 9205 CR <--
                sks_eft_SendMail = new SKS_EFT_SendMail();
                if(sks_eft_SendMail.process_EFT_eMail(msks_eftap_file.FileNbr, msks_eftap_file.EFTFileType, SKS_EFT_EmailSendType::All,'','',NoYes::Yes))
                {
                    this.Update_SKS_EFTAP_File_FileStatus(SKS_EFT_FileStatus::AdvEmailSent, SKS_EFT_Module::AR, NoYes::Yes);

                }
                else
                {
                    this.Update_SKS_EFTAP_File_FileStatus(SKS_EFT_FileStatus::AdvEmailFailed, SKS_EFT_Module::AR, NoYes::Yes);
                }
                // 9205 CR -->
            }
            // 9205 CR <--
            this.SequenceUpdateACHNotInUse(SKS_EFT_Module::AR, msks_eftap_file.RecId);

            //10567 Audit report generated during DD advanced e-mail
            if (_printReport)//check box was checked so print report now
            {
                //Print Audit report from working table
                this.PrintEFTAuditReport(_module);
            }
        }
        // ----------------------------------
        // COMPLETE NOW/KEEP - STARTED
        // ----------------------------------

        if(nextAction == SKS_PP_NextActionDisplay::EmailOnly)
        {
            if(_module == SKS_EFT_Module::AP)
            {
                this.KeepAP(true, locFilePathName, locControlFilePathName, false, deleteControlFileFlag);
            }
            else if(_module == SKS_EFT_Module::AR)
            {
                this.keepAR(true, locFilePathName, locControlFilePathName);
            }
        }
        else if(nextAction == SKS_PP_NextActionDisplay::CompleteKeep)
        {
            if(_module == SKS_EFT_Module::AP)
            {
                this.KeepAP(false, locFilePathName, locControlFilePathName, false, deleteControlFileFlag);
            }
            else if(_module == SKS_EFT_Module::AR)
            {
                this.keepAR(false, locFilePathName, locControlFilePathName);
            }
            else if(_module == SKS_EFT_Module::BTB)
            {
                this.keepBTB(false, locFilePathName, locControlFilePathName);
            }
            else if(_module == SKS_EFT_Module::CNP)
            {
                this.keepCNP(false, locFilePathName, locControlFilePathName);
            }
        }
        else if(nextAction == SKS_PP_NextActionDisplay::CreateSendFile
                || nextAction == SKS_PP_NextActionDisplay::Send
                || nextAction == SKS_PP_NextActionDisplay::RetryComm)
        {
            keepDelete = true;

            // Never any Delete/Keep if Test File
            if(msks_eftap_file.JournalOption == SKS_EFT_FileJournalOption::TestFile)
            {
                this.Update_SKS_EFTAP_File_FileStatus(SKS_EFT_FileStatus::Completed, _module);
                keepDelete = false;
            }
            //for MALs, go strait to KeepDelete
            else if(msks_eftap_file.JournalOption == SKS_EFT_FileJournalOption::MasterAccountList)
            {
                keepDelete = true;
            }
            else
            {
                keepDelete = (mNbrGoodRecs > 0);
                if(_module == SKS_EFT_Module::AP && keepDelete)
                {
                    if(msks_eftap_file.JournalOption == SKS_EFT_FileJournalOption::PreNotesOnly)
                    {
                        keepDelete = (!mSKS_EFT_Setup.APAdvProcessing || (mSKS_EFT_Setup.APAdvProcessing && mSKS_EFT_Setup.APAPOPreNotesOne));
                    }
                    else
                    {
                        keepDelete = (!mSKS_EFT_Setup.APAdvProcessing);
                    }
                }
            }
            if(keepDelete)
            {
                this.KeepDeleteDialog(_module, locFilePathName, locControlFilePathName, locSKS_EB_CommProcess, locErrorFreeSend, _AutoCreateEFT, _isPreNotesOnly);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>Archive</Name>
				<Source><![CDATA[
    Private void Archive(SKS_EFT_Module  _Module)
    {
        str PathFile;
        str fileLocation;
        str ArchivePathFile;
        str ArchiveFileName;
        int Pos;
        SKS_PP_StringFormats formats = new SKS_PP_StringFormats();
        ;

        select firstonly * from mSKS_EFT_Setup;
        RefRecId                fileRecId = msks_eftap_file.RecId;
        select forupdate msks_eftap_file where msks_eftap_file.RecId == fileRecId;

        PathFile = mSKS_EFTAP_File.FilePath + '\\' + mSKS_EFTAP_File.FileName;
        fileLocation = msks_eftap_file.FilePath;

        if (_Module == SKS_EFT_Module::AP)
        {
            if (mSKS_EFT_Bank.APArchive == NoYes::Yes && (mSKS_EFT_Bank.APPathArchive != '' || (mSKS_EFTAP_File.BFBankIntegration == SKS_BF_BankIntType::BankFabric && mSKS_EFTAP_File.APIFormatType == SKS_EFT_APIFormatType::File)))
            {
                ttsbegin;
                select forupdate firstonly mSKS_EFT_Setup;
                if (mSKS_EFT_Setup.APArchiveNbr < 999999)
                {
                    mSKS_EFT_Setup.APArchiveNbr = mSKS_EFT_Setup.APArchiveNbr + 1;
                }
                else
                {
                    mSKS_EFT_Setup.APArchiveNbr = 1;
                }

                if (mSKS_EFT_Setup.validateWrite())
                {
                    mSKS_EFT_Setup.update();
                }

                Pos = strFind(mSKS_EFTAP_File.FileName, '.', strLen(mSKS_EFTAP_File.FileName), -strLen(mSKS_EFTAP_File.FileName));
                if (Pos != 0)
                {
                    str BaseFileName = substr(mSKS_EFTAP_File.FileName, 0, Pos - 1);
                    str ArchiveNumber = formats.fill_String(6, int2Str(mSKS_EFT_Setup.APArchiveNbr), '0', 'L');
                    str FileExtension = substr(mSKS_EFTAP_File.FileName, Pos, strlen(mSKS_EFTAP_File.FileName));
                    ArchiveFileName = BaseFileName + '-' + ArchiveNumber + FileExtension;
                    //ArchivePathFile = mSKS_EFT_Bank.APPathArchive + '\\' + ArchiveFileName;
                }
                else
                {
                    str ArchiveNumber = formats.fill_String(6, int2Str(mSKS_EFT_Setup.APArchiveNbr), '0', 'L');
                    ArchiveFileName = mSKS_EFTAP_File.FileName + '-' + ArchiveNumber;
                    //ArchivePathFile = mSKS_EFT_Bank.APPathArchive + '\\' + ArchiveFileName;
                }
                //BankFabric
                if (mSKS_EFTAP_File.BFBankIntegration == SKS_BF_BankIntType::BankFabric)
                {
                    if(!strScan(msks_eftap_file.FilePath, '\\Archive', 1, strLen(msks_eftap_file.FilePath)))
                    {
                        ArchivePathFile = fileLocation + '\\Archive\\' + ArchiveFileName;
                    }
                    else
                    {
                        ArchivePathFile = fileLocation  + '\\' + ArchiveFileName;
                    }
                }
                else
                {
                    ArchivePathFile = mSKS_EFT_Bank.APPathArchive + '\\' + ArchiveFileName;
                }

                if(SKS_EB_FileHub::fileArchive(PathFile, ArchivePathFile, mSKS_EFTAP_File.BFBankIntegration))
                {
                    if (mSKS_EFTAP_File.BFBankIntegration == SKS_BF_BankIntType::BankFabric)
                    {
                        mSKS_EFTAP_File.FilePath = fileLocation + '\\Archive'; //BankFabric
                    }
                    else
                    {
                        mSKS_EFTAP_File.FilePath = mSKS_EFT_Bank.APPathArchive;
                    }
                    mSKS_EFTAP_File.FileName = ArchiveFileName;
                    mSKS_EFTAP_File.update();
                    info("@SKS477" + ': ' + ArchivePathFile );
                }

                //CONTROL FILE ARCHIVING
                if(mSKS_EFT_Bank.APControlFileFormatID != '')
                {
                    if (mSKS_EFTAP_File.BFBankIntegration == SKS_BF_BankIntType::BankFabric)
                    {
                        PathFile = fileLocation + '\\' + mSKS_EFTAP_File.ControlFileName;
                    }
                    else
                    {
                        PathFile = mSKS_EFT_Bank.APFilePath + '\\' + mSKS_EFTAP_File.ControlFileName;
                    }
                    
                    Pos = strFind(msks_eftap_file.ControlFileName , '.', strLen(msks_eftap_file.ControlFileName ), -strLen(msks_eftap_file.ControlFileName));
                    if (Pos != 0)
                    {
                        str BaseFileName = substr(msks_eftap_file.ControlFileName , 0, Pos - 1);
                        str ArchiveNumber = formats.fill_String(6, int2Str(mSKS_EFT_Setup.APArchiveNbr), '0', 'L');
                        str FileExtension = substr(mSKS_EFTAP_File.ControlFileName, Pos, strlen(msks_eftap_file.ControlFileName ));
                        ArchiveFileName = BaseFileName + '-' + ArchiveNumber + FileExtension;
                        //ArchivePathFile = mSKS_EFT_Bank.APPathArchive + '\\' + ArchiveFileName;
                    }
                    else
                    {
                        str ArchiveNumber = formats.fill_String(6, int2Str(mSKS_EFT_Setup.APArchiveNbr), '0', 'L');
                        ArchiveFileName = mSKS_EFTAP_File.ControlFileName + '-' + ArchiveNumber;
                        //ArchivePathFile = mSKS_EFT_Bank.APPathArchive + '\\' + ArchiveFileName;
                    }

                    //BankFabric
                    if (mSKS_EFTAP_File.BFBankIntegration == SKS_BF_BankIntType::BankFabric)
                    {
                        ArchivePathFile = fileLocation + '\\Archive\\' + ArchiveFileName;
                    }
                    else
                    {
                        ArchivePathFile = mSKS_EFT_Bank.APPathArchive + '\\' + ArchiveFileName;
                    }

                    if(SKS_EB_FileHub::fileArchive(PathFile, ArchivePathFile,mSKS_EFTAP_File.BFBankIntegration))
                    {
                        if (mSKS_EFTAP_File.BFBankIntegration == SKS_BF_BankIntType::BankFabric)
                        {
                            mSKS_EFTAP_File.FilePath = fileLocation + '\\Archive'; //BankFabric
                        }
                        else
                        {
                            mSKS_EFTAP_File.FilePath = mSKS_EFT_Bank.APPathArchive;
                        }
                        mSKS_EFTAP_File.ControlFileName = ArchiveFileName;
                        mSKS_EFTAP_File.update();
                        info("@SKS477" + ': ' + ArchivePathFile );
                    }
                }
                ttscommit;
            }
        }
        else if (_Module == SKS_EFT_Module::CNP)
        {
            if (mSKS_EFTCNP_Bank.CNPArchive == NoYes::Yes && (mSKS_EFTCNP_Bank.CNPPathArchive != '' || mSKS_EFTAP_File.BFBankIntegration == SKS_BF_BankIntType::BankFabric))
            {
                ttsbegin;
                select forupdate firstonly mSKS_EFT_Setup;                

                if (mSKS_EFT_Setup.CNPArchiveNbr < 999999)
                {
                    mSKS_EFT_Setup.CNPArchiveNbr = mSKS_EFT_Setup.CNPArchiveNbr + 1;
                }
                else
                {
                    mSKS_EFT_Setup.CNPArchiveNbr = 1;
                }

                if (mSKS_EFT_Setup.validateWrite())
                {
                    mSKS_EFT_Setup.update();
                }

                Pos = strFind(mSKS_EFTAP_File.FileName, '.', strLen(mSKS_EFTAP_File.FileName), -strLen(mSKS_EFTAP_File.FileName));
                if (Pos != 0)
                {
                    str BaseFileName = substr(mSKS_EFTAP_File.FileName, 0, Pos - 1);
                    str ArchiveNumber = formats.fill_String(6, int2Str(mSKS_EFT_Setup.CNPArchiveNbr), '0', 'L');
                    str FileExtension = substr(mSKS_EFTAP_File.FileName, Pos, strlen(mSKS_EFTAP_File.FileName));
                    ArchiveFileName = BaseFileName + '-' + ArchiveNumber + FileExtension;
                    //ArchivePathFile = mSKS_EFTCNP_Bank.CNPPathArchive + '\\' + ArchiveFileName;
                }
                else
                {
                    str ArchiveNumber = formats.fill_String(6, int2Str(mSKS_EFT_Setup.CNPArchiveNbr), '0', 'L');
                    ArchiveFileName = mSKS_EFTAP_File.FileName + '-' + ArchiveNumber;
                    //ArchivePathFile = mSKS_EFTCNP_Bank.CNPPathArchive + '\\' + ArchiveFileName;
                }

                //BankFabric
                if (mSKS_EFTAP_File.BFBankIntegration == SKS_BF_BankIntType::BankFabric)
                {
                    ArchivePathFile = fileLocation + '\\Archive\\' + ArchiveFileName;
                }
                else
                {
                    ArchivePathFile = mSKS_EFTCNP_Bank.CNPPathArchive + '\\' + ArchiveFileName;
                }

                if(SKS_EB_FileHub::fileArchive(PathFile, ArchivePathFile, mSKS_EFTAP_File.BFBankIntegration))
                {
                    if (mSKS_EFTAP_File.BFBankIntegration == SKS_BF_BankIntType::BankFabric)
                    {
                        mSKS_EFTAP_File.FilePath = fileLocation + '\\Archive'; //BankFabric
                    }
                    else
                    {
                        mSKS_EFTAP_File.FilePath = mSKS_EFTCNP_Bank.CNPPathArchive;
                    }

                    mSKS_EFTAP_File.FileName = ArchiveFileName;
                    mSKS_EFTAP_File.update();
                    info("@SKS477" + ': ' + ArchivePathFile );
                }

                //CONTROL FILE ARCHIVING
                if(mSKS_EFTCNP_Bank.CNPControlFileFormatID != '')
                {
                    if (mSKS_EFTAP_File.BFBankIntegration == SKS_BF_BankIntType::BankFabric)
                    {
                        PathFile = fileLocation + '\\' + mSKS_EFTAP_File.ControlFileName;
                    }
                    else
                    {
                        PathFile = mSKS_EFTCNP_Bank.CNPFilePath + '\\' + mSKS_EFTAP_File.ControlFileName;
                    }

                    Pos = strFind(msks_eftap_file.ControlFileName , '.', strLen(msks_eftap_file.ControlFileName ), -strLen(msks_eftap_file.ControlFileName));
                    if (Pos != 0)
                    {
                        str BaseFileName = substr(msks_eftap_file.ControlFileName , 0, Pos - 1);
                        str ArchiveNumber = formats.fill_String(6, int2Str(mSKS_EFT_Setup.CNPArchiveNbr), '0', 'L');
                        str FileExtension = substr(mSKS_EFTAP_File.ControlFileName, Pos, strlen(msks_eftap_file.ControlFileName ));
                        ArchiveFileName = BaseFileName + '-' + ArchiveNumber + FileExtension;
                        //ArchivePathFile = mSKS_EFTCNP_Bank.CNPPathArchive + '\\' + ArchiveFileName;
                    }
                    else
                    {
                        str ArchiveNumber = formats.fill_String(6, int2Str(mSKS_EFT_Setup.CNPArchiveNbr), '0', 'L');
                        ArchiveFileName = mSKS_EFTAP_File.ControlFileName + '-' + ArchiveNumber;
                        //ArchivePathFile = mSKS_EFTCNP_Bank.CNPPathArchive + '\\' + ArchiveFileName;
                    }

                    //BankFabric
                    if (mSKS_EFTAP_File.BFBankIntegration == SKS_BF_BankIntType::BankFabric)
                    {
                        ArchivePathFile = fileLocation + '\\Archive\\' + ArchiveFileName;
                    }
                    else
                    {
                        ArchivePathFile = mSKS_EFTCNP_Bank.CNPPathArchive + '\\' + ArchiveFileName;
                    }

                    if(SKS_EB_FileHub::fileArchive(PathFile, ArchivePathFile, mSKS_EFTAP_File.BFBankIntegration))
                    {
                        if (mSKS_EFTAP_File.BFBankIntegration == SKS_BF_BankIntType::BankFabric)
                        {
                            mSKS_EFTAP_File.FilePath = fileLocation + '\\Archive'; //BankFabric
                        }
                        else
                        {
                            mSKS_EFTAP_File.FilePath = mSKS_EFTCNP_Bank.CNPPathArchive;
                        }

                        mSKS_EFTAP_File.ControlFileName = ArchiveFileName;
                        mSKS_EFTAP_File.update();
                        info("@SKS477" + ': ' + ArchivePathFile );
                    }
                }
                ttscommit;
            }
        }
        else if (_Module == SKS_EFT_Module::BTB)
        {
            if (mSKS_EFTBTB_Bank.BBArchive == NoYes::Yes && (mSKS_EFTBTB_Bank.BBPathArchive != ''|| mSKS_EFTAP_File.BFBankIntegration == SKS_BF_BankIntType::BankFabric))
            {
                ttsbegin;
                select forupdate firstonly mSKS_EFT_Setup;
                if (mSKS_EFT_Setup.BTBArchiveNbr < 999999)
                {
                    mSKS_EFT_Setup.BTBArchiveNbr = mSKS_EFT_Setup.BTBArchiveNbr + 1;
                }
                else
                {
                    mSKS_EFT_Setup.BTBArchiveNbr = 1;
                }

                if (mSKS_EFT_Setup.validateWrite())
                {
                    mSKS_EFT_Setup.update();
                }

                Pos = strFind(mSKS_EFTAP_File.FileName, '.', strLen(mSKS_EFTAP_File.FileName), -strLen(mSKS_EFTAP_File.FileName));
                if (Pos != 0)
                {
                    str BaseFileName = substr(mSKS_EFTAP_File.FileName, 0, Pos - 1);
                    str ArchiveNumber = formats.fill_String(6, int2Str(mSKS_EFT_Setup.BTBArchiveNbr), '0', 'L');
                    str FileExtension = substr(mSKS_EFTAP_File.FileName, Pos, strlen(mSKS_EFTAP_File.FileName));
                    ArchiveFileName = BaseFileName + '-' + ArchiveNumber + FileExtension;
                    //ArchivePathFile = mSKS_EFTBTB_Bank.bbPathArchive + '\\' + ArchiveFileName;
                }
                else
                {
                    str ArchiveNumber = formats.fill_String(6, int2Str(mSKS_EFT_Setup.BTBArchiveNbr), '0', 'L');
                    ArchiveFileName = mSKS_EFTAP_File.FileName + '-' + ArchiveNumber;
                    //ArchivePathFile = mSKS_EFTBTB_Bank.BBPathArchive + '\\' + ArchiveFileName;
                }

                //BankFabric
                if (mSKS_EFTAP_File.BFBankIntegration == SKS_BF_BankIntType::BankFabric)
                {
                    ArchivePathFile = fileLocation + '\\Archive\\' + ArchiveFileName;
                }
                else
                {
                    ArchivePathFile = mSKS_EFTBTB_Bank.bbPathArchive + '\\' + ArchiveFileName;
                }

                if(SKS_EB_FileHub::fileArchive(PathFile, ArchivePathFile, mSKS_EFTAP_File.BFBankIntegration))
                {
                    if (mSKS_EFTAP_File.BFBankIntegration == SKS_BF_BankIntType::BankFabric)
                    {
                        mSKS_EFTAP_File.FilePath = fileLocation + '\\Archive'; //BankFabric
                    }
                    else
                    {
                        mSKS_EFTAP_File.FilePath = mSKS_EFTBTB_Bank.BBPathArchive;
                    }

                    mSKS_EFTAP_File.FileName = ArchiveFileName;
                    mSKS_EFTAP_File.update();
                    info("@SKS477" + ': ' + ArchivePathFile );
                }

                //CONTROL FILE ARCHIVING
                if(mSKS_EFTBTB_Bank.BBControlFileFormatID != '')
                {
                    if (mSKS_EFTAP_File.BFBankIntegration == SKS_BF_BankIntType::BankFabric)
                    {
                        PathFile = fileLocation + '\\' + mSKS_EFTAP_File.ControlFileName;
                    }
                    else
                    {
                        PathFile = mSKS_EFTBTB_Bank.BBFilePath + '\\' + mSKS_EFTAP_File.ControlFileName;
                    }

                    Pos = strFind(msks_eftap_file.ControlFileName , '.', strLen(msks_eftap_file.ControlFileName ), -strLen(msks_eftap_file.ControlFileName));
                    if (Pos != 0)
                    {
                        str BaseFileName = substr(msks_eftap_file.ControlFileName , 0, Pos - 1);
                        str ArchiveNumber = formats.fill_String(6, int2Str(mSKS_EFT_Setup.BTBArchiveNbr), '0', 'L');
                        str FileExtension = substr(mSKS_EFTAP_File.ControlFileName, Pos, strlen(msks_eftap_file.ControlFileName ));
                        ArchiveFileName = BaseFileName + '-' + ArchiveNumber + FileExtension;
                        //ArchivePathFile = mSKS_EFTBTB_Bank.BBPathArchive + '\\' + ArchiveFileName;
                    }
                    else
                    {
                        str ArchiveNumber = formats.fill_String(6, int2Str(mSKS_EFT_Setup.BTBArchiveNbr), '0', 'L');
                        ArchiveFileName = mSKS_EFTAP_File.ControlFileName + '-' + ArchiveNumber;
                        //ArchivePathFile = mSKS_EFTBTB_Bank.BBPathArchive + '\\' + ArchiveFileName;
                    }

                    //BankFabric
                    if (mSKS_EFTAP_File.BFBankIntegration == SKS_BF_BankIntType::BankFabric)
                    {
                        ArchivePathFile = fileLocation + '\\Archive\\' + ArchiveFileName;
                    }
                    else
                    {
                        ArchivePathFile = mSKS_EFTBTB_Bank.BBPathArchive + '\\' + ArchiveFileName;
                    }

                    if(SKS_EB_FileHub::fileArchive(PathFile, ArchivePathFile,mSKS_EFTAP_File.BFBankIntegration))
                    {
                        if (mSKS_EFTAP_File.BFBankIntegration == SKS_BF_BankIntType::BankFabric)
                        {
                            mSKS_EFTAP_File.FilePath = fileLocation + '\\Archive'; //BankFabric
                        }
                        else
                        {
                            mSKS_EFTAP_File.FilePath = mSKS_EFTBTB_Bank.BBPathArchive;
                        }

                        mSKS_EFTAP_File.ControlFileName = ArchiveFileName;
                        mSKS_EFTAP_File.update();
                        info("@SKS477" + ': ' + ArchivePathFile );
                    }
                }
                ttscommit;
            }
        }
        else
        {
            //AR
            if (mSKS_EFTAR_Bank.ARArchive == NoYes::Yes && (mSKS_EFTAR_Bank.ARPathArchive != '' || mSKS_EFTAP_File.BFBankIntegration == SKS_BF_BankIntType::BankFabric))
            {
                ttsbegin;
                select forupdate firstonly mSKS_EFT_Setup;
                if (mSKS_EFT_Setup.ARArchiveNbr < 999999)
                {
                    mSKS_EFT_Setup.ARArchiveNbr = mSKS_EFT_Setup.ARArchiveNbr + 1;
                }
                else
                {
                    mSKS_EFT_Setup.ARArchiveNbr = 1;
                }

                if (mSKS_EFT_Setup.validateWrite())
                {
                    mSKS_EFT_Setup.update();
                }

                Pos = strFind(mSKS_EFTAP_File.FileName, '.', strLen(mSKS_EFTAP_File.FileName), -strLen(mSKS_EFTAP_File.FileName));
                if (Pos != 0)
                {
                    str BaseFileName = substr(mSKS_EFTAP_File.FileName, 0, Pos - 1);
                    str ArchiveNumber = formats.fill_String(6, int2Str(mSKS_EFT_Setup.ARArchiveNbr), '0', 'L');
                    str FileExtension = substr(mSKS_EFTAP_File.FileName, Pos, strlen(mSKS_EFTAP_File.FileName));
                    ArchiveFileName = BaseFileName + '-' + ArchiveNumber + FileExtension;
                    //ArchivePathFile = mSKS_EFTAR_Bank.ARPathArchive + '\\' + ArchiveFileName;
                }
                else
                {
                    str ArchiveNumber = formats.fill_String(6, int2Str(mSKS_EFT_Setup.ARArchiveNbr), '0', 'L');
                    ArchiveFileName = mSKS_EFTAP_File.FileName + '-' + ArchiveNumber;
                    //ArchivePathFile = mSKS_EFTAR_Bank.ARPathArchive + '\\' + ArchiveFileName;
                }
                //BankFabric
                if (mSKS_EFTAP_File.BFBankIntegration == SKS_BF_BankIntType::BankFabric)
                {
                    ArchivePathFile = fileLocation + '\\Archive\\' + ArchiveFileName;
                }
                else
                {
                    ArchivePathFile = mSKS_EFTAR_Bank.ARPathArchive + '\\' + ArchiveFileName;
                }

                if(SKS_EB_FileHub::fileArchive(PathFile, ArchivePathFile,mSKS_EFTAP_File.BFBankIntegration))
                {
                    if (mSKS_EFTAP_File.BFBankIntegration == SKS_BF_BankIntType::BankFabric)
                    {
                        mSKS_EFTAP_File.FilePath = fileLocation + '\\Archive';
                    }
                    else
                    {
                        mSKS_EFTAP_File.FilePath = mSKS_EFTAR_Bank.ARPathArchive;
                    }
                    
                    mSKS_EFTAP_File.FileName = ArchiveFileName;
                    mSKS_EFTAP_File.update();
                    info("@SKS477" + ': ' + ArchivePathFile );
                }

                //CONTROL FILE ARCHIVING
                if(mSKS_EFTAR_Bank.ARControlFileFormatID != '')
                {
                    if (mSKS_EFTAP_File.BFBankIntegration == SKS_BF_BankIntType::BankFabric)
                    {
                        PathFile = fileLocation + '\\' + mSKS_EFTAP_File.ControlFileName;
                    }
                    else
                    {
                        PathFile = mSKS_EFTAR_Bank.ARFilePath + '\\' + mSKS_EFTAP_File.ControlFileName;
                    }
                    
                    Pos = strFind(mSKS_EFTAP_File.ControlFileName , '.', strLen(mSKS_EFTAP_File.ControlFileName ), -strLen(mSKS_EFTAP_File.ControlFileName));
                    if (Pos != 0)
                    {
                        str BaseFileName = substr(mSKS_EFTAP_File.ControlFileName , 0, Pos - 1);
                        str ArchiveNumber = formats.fill_String(6, int2Str(mSKS_EFT_Setup.APArchiveNbr), '0', 'L');
                        str FileExtension = substr(mSKS_EFTAP_File.ControlFileName, Pos, strlen(msks_eftap_file.ControlFileName ));
                        ArchiveFileName = BaseFileName + '-' + ArchiveNumber + FileExtension;
                        //ArchivePathFile = mSKS_EFTAR_Bank.ARPathArchive + '\\' + ArchiveFileName;
                    }
                    else
                    {
                        str ArchiveNumber = formats.fill_String(6, int2Str(mSKS_EFT_Setup.APArchiveNbr), '0', 'L');
                        ArchiveFileName = mSKS_EFTAP_File.ControlFileName + '-' + ArchiveNumber;
                        //ArchivePathFile = mSKS_EFTAR_Bank.ARPathArchive + '\\' + ArchiveFileName;
                    }
                    //BankFabric
                    if (mSKS_EFTAP_File.BFBankIntegration == SKS_BF_BankIntType::BankFabric)
                    {
                        ArchivePathFile = fileLocation + '\\Archive\\' + ArchiveFileName;
                    }
                    else
                    {
                        ArchivePathFile = mSKS_EFTAR_Bank.ARPathArchive + '\\' + ArchiveFileName;
                    }

                    if(SKS_EB_FileHub::fileArchive(PathFile, ArchivePathFile,mSKS_EFTAP_File.BFBankIntegration))
                    {
                        if (mSKS_EFTAP_File.BFBankIntegration == SKS_BF_BankIntType::BankFabric)
                        {
                            mSKS_EFTAP_File.FilePath = fileLocation + '\\Archive';
                        }
                        else
                        {
                            mSKS_EFTAP_File.FilePath = mSKS_EFTAR_Bank.ARPathArchive;
                        }
                        mSKS_EFTAP_File.ControlFileName = ArchiveFileName;
                        mSKS_EFTAP_File.update();
                        info("@SKS477" + ': ' + ArchivePathFile );
                    }
                }
                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>BuildHeaderTrailer</Name>
				<Source><![CDATA[
    private void BuildHeaderTrailer(SKS_EFT_Module  _module)
    {
        SKS_PP_HeaderTrailer sks_pp_HeaderTrailer;
        ;

        ttsbegin;
        if(_module == SKS_EFT_Module::AP)
        {

            // Build header records
            while select sks_pp_HeaderTrailer
              order by sks_pp_HeaderTrailer.HeaderTrailer
              where  sks_pp_HeaderTrailer.FileType == SKS_PP_HeaderTrailerFileType::SKS_EFTAP
                  && sks_pp_HeaderTrailer.FormatID == msks_eft_FileFormat.FormatId
                  && sks_pp_HeaderTrailer.HeadTrailID == msks_eft_bank.APHeadTrailID
                  && sks_pp_HeaderTrailer.HeaderTrailer < 4
            {
                this.InsertMiscEFTRecord(SKS_EFT_RecordSection::Header, sks_pp_HeaderTrailer.Value, msks_eft_FileFormat.FormatId);
            }

            // Build trailer records
            while select sks_pp_HeaderTrailer
              order by sks_pp_HeaderTrailer.HeaderTrailer
              where  sks_pp_HeaderTrailer.FileType == SKS_PP_HeaderTrailerFileType::SKS_EFTAP
                  && sks_pp_HeaderTrailer.FormatID == msks_eft_FileFormat.FormatId
                  && sks_pp_HeaderTrailer.HeadTrailID == msks_eft_bank.APHeadTrailID
                  && sks_pp_HeaderTrailer.HeaderTrailer > 3
            {
                this.InsertMiscEFTRecord(SKS_EFT_RecordSection::Trailer, sks_pp_HeaderTrailer.Value, msks_eft_FileFormat.FormatId);
            }
        }
        else
        {
            //AR
            // Build header records  PAB  SKS_EFTAP  No AR
            while select sks_pp_HeaderTrailer
              order by sks_pp_HeaderTrailer.HeaderTrailer
              where  sks_pp_HeaderTrailer.FileType == SKS_PP_HeaderTrailerFileType::SKS_EFTAR
                  && sks_pp_HeaderTrailer.FormatID == msks_eft_FileFormat.FormatId
                  && sks_pp_HeaderTrailer.HeadTrailID == msks_eftar_bank.ARHeadTrailID
                  && sks_pp_HeaderTrailer.HeaderTrailer < 4
            {
                this.InsertMiscEFTRecord(SKS_EFT_RecordSection::Header, sks_pp_HeaderTrailer.Value, msks_eft_FileFormat.FormatId);
            }

            // Build trailer records
            while select sks_pp_HeaderTrailer
              order by sks_pp_HeaderTrailer.HeaderTrailer
              where  sks_pp_HeaderTrailer.FileType == SKS_PP_HeaderTrailerFileType::SKS_EFTAR
                  && sks_pp_HeaderTrailer.FormatID == msks_eft_FileFormat.FormatId
                  && sks_pp_HeaderTrailer.HeadTrailID == msks_eftar_bank.ARHeadTrailID
                  && sks_pp_HeaderTrailer.HeaderTrailer > 3
            {
                this.InsertMiscEFTRecord(SKS_EFT_RecordSection::Trailer, sks_pp_HeaderTrailer.Value, msks_eft_FileFormat.FormatId);
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>BuildWorkingTable</Name>
				<Source><![CDATA[
    // Return true if records were built;
    protected boolean BuildWorkingTable(SKS_EFT_Module _module, PaymMode _PaymMode = '')
    {
        SKS_EFT_FileDetail sks_eft_filedetail;
        SKS_EFT_FilePmtSelection sks_eft_FilePmtSelection;
        boolean InvoiceRecordCreated = false;
        boolean preNoteRecordCreated = false;
        boolean testRecordCreated = false;
        boolean MALRecordCreated = false;
        ClassId locClassid;
        ;

        locClassid = classIdGet(this);
        gInvokingClass = classId2Name(locClassid);
        if(strUpr(gInvokingClass) == strUpr('SKS_FXA_PROCESSING'))
        {
            delete_from sks_eft_filedetail
                where sks_eft_filedetail.FileRecId == msks_eftap_file.RecId
                    && sks_eft_filedetail.RecordSection == SKS_EFT_RecordSection::FXAllVendor;

            InvoiceRecordCreated = this.WriteWrkTable(SKS_EFT_Module::AP);
        }
        else
        {
            this.deleteFileDetailRelatedData(msks_eftap_file.RecId); //SKS_FDD_21456

            this.SequenceNumberInit(_module, msks_eftap_file.RecId); //FDD-10590

            // Build file detail table with invoices/payments
            // Don't build if Test file or PreNotes only
            if(msks_eftap_file.JournalOption != SKS_EFT_FileJournalOption::TestFile
                && msks_eftap_file.JournalOption != SKS_EFT_FileJournalOption::PreNotesOnly
                && msks_eftap_file.JournalOption != SKS_EFT_FileJournalOption::MasterAccountList)
            {
                if(msks_eftap_file.FXAProcessing)
                {
                    InvoiceRecordCreated = this.CreateFXAllDetail();
                }
                else
                {
                    InvoiceRecordCreated = this.WriteWrkTable(_module);
                    if(InvoiceRecordCreated)
                    {
                        this.nextSequenceNumber(); //SKS_VSTS_13184
                    }
                }
            }
            if(_module == SKS_EFT_Module::AP)
            {

                if(msks_eftap_file.JournalOption == SKS_EFT_FileJournalOption::MasterAccountList)
                {
                    MALRecordCreated = this.CreateMAL(_PaymMode);
                }
                // Prenotes and test file
                else if(msks_eftap_file.JournalOption == SKS_EFT_FileJournalOption::JournalsPreNotes && msks_eft_bank.APACHPreNote)
                {
                    select firstOnly crosscompany:multicompaniesCon PmtBankAccountId, PaymMode from sks_eft_FilePmtSelection where sks_eft_FilePmtSelection.FileRecId == msks_eftap_file.RecId; //FDD-10590
                    preNoteRecordCreated = this.CreatePreNoteVendors(sks_eft_FilePmtSelection.PmtBankAccountId, sks_eft_FilePmtSelection.PaymMode);
                }
                if(msks_eftap_file.JournalOption == SKS_EFT_FileJournalOption::PreNotesOnly && msks_eft_Setup.APReqPreNote)
                {
                    preNoteRecordCreated = this.CreatePreNoteVendors(msks_eftap_file.PreNoteOnlyBankAccountId, msks_eftap_file.PreNotesOnlyPaymMode);
                }
                else if(msks_eftap_file.JournalOption == SKS_EFT_FileJournalOption::TestFile)
                {
                    testRecordCreated = this.CreateTestVendors();
                }
            }
            else if(_module == SKS_EFT_Module::AR)
            {
                // Prenotes and test file
                if(msks_eftap_file.JournalOption == SKS_EFT_FileJournalOption::JournalsPreNotes && msks_eftar_bank.ARACHPreNote)
                {
                    select firstOnly crosscompany:multicompaniesCon PmtBankAccountId, PaymMode from sks_eft_FilePmtSelection where sks_eft_FilePmtSelection.FileRecId == msks_eftap_file.RecId; //FDD-10590
                    preNoteRecordCreated = this.CreatePreNoteCustomers(sks_eft_FilePmtSelection.PmtBankAccountId, sks_eft_FilePmtSelection.PaymMode);
                }
                if(msks_eftap_file.JournalOption == SKS_EFT_FileJournalOption::PreNotesOnly && msks_eft_Setup.ARReqPreNote)
                {
                    preNoteRecordCreated = this.CreatePreNoteCustomers(msks_eftap_file.PreNoteOnlyBankAccountId, msks_eftap_file.PreNotesOnlyPaymMode);
                }
                else if(msks_eftap_file.JournalOption == SKS_EFT_FileJournalOption::TestFile)
                {
                    testRecordCreated = this.CreateTestCustomers();
                }
            }


            this.BuildHeaderTrailer(_module);
        }

        if(InvoiceRecordCreated || preNoteRecordCreated || testRecordCreated || MALRecordCreated)
        {
            return true;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>CheckJournals</Name>
				<Source><![CDATA[
    protected str CheckJournals(SKS_EFT_Module _module)
    {
        SKS_EFT_FileDetail sks_eft_FileDetail;
        str retStr = '';
        str errStr = '';
        ;

        mNbrGoodRecs = 0;

        if(strUpr(gInvokingClass) == strUpr('SKS_FXA_PROCESSING'))
        {
            select * from sks_eft_FileDetail
             order by sks_eft_FileDetail.RecordSection,
                       sks_eft_FileDetail.PaymSpec,
                       sks_eft_FileDetail.DepCountryRegionId,
                       sks_eft_FileDetail.RecordType,
                       sks_eft_FileDetail.BankAccountId,
                       sks_eft_FileDetail.AccountNum,
                       sks_eft_FileDetail.AccountCompany,
                       sks_eft_FileDetail.RecId
              where sks_eft_FileDetail.FileRecId == msks_eftap_file.RecId &&
                    sks_eft_FileDetail.RecordSection == SKS_EFT_RecordSection::FXAllVendor &&
                    sks_eft_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary;
        }
        else
        {
            select * from sks_eft_FileDetail
            order by sks_eft_FileDetail.RecordSection,
                       sks_eft_FileDetail.PaymSpec,
                       sks_eft_FileDetail.DepCountryRegionId,
                       sks_eft_FileDetail.RecordType,
                       sks_eft_FileDetail.BankAccountId,
                       sks_eft_FileDetail.AccountNum,
                       sks_eft_FileDetail.AccountCompany,
                       sks_eft_FileDetail.RecId
              where sks_eft_FileDetail.FileRecId == msks_eftap_file.RecId &&
                    sks_eft_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                sks_eft_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary;
        }
        while(sks_eft_FileDetail)
        {
            if(sks_eft_FileDetail.RecordType == SKS_EFT_RecordType::Invoice)
            {
                if(_module == SKS_EFT_Module::AP)
                {
                    errStr = this.RecordCheckAP(sks_eft_FileDetail);
                }
                else if(_module == SKS_EFT_Module::AR)
                {
                    errStr = this.RecordCheckAR(sks_eft_FileDetail);
                }
                else if(_module == SKS_EFT_Module::BTB)
                {
                    errStr = this.RecordCheckBTB(sks_eft_FileDetail);
                }
                else if(_module == SKS_EFT_Module::CNP)
                {
                    errStr = this.RecordCheckCNP(sks_eft_FileDetail);
                }
                if(errStr != '')
                {
                    error(errStr);
                    retStr = "@SKS984";
                }
                else
                {
                    mNbrGoodRecs++;
                }
            }
            else if(sks_eft_FileDetail.RecordType == SKS_EFT_RecordType::PreNote)
            {
                mNbrGoodRecs++;
            }
            next sks_eft_FileDetail;
        }
        return retStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>CheckUserSelectionAP</Name>
				<Source><![CDATA[
    public str CheckUserSelectionAP(RefRecId _fileRecId, RefRecID _recId = -1, container _multicompaniesCon = conNull(), boolean _calledfromAutoCreation = false,
        SKS_EFT_Processing _sks_eft_processingAP = null, DataAreaId _dataAreaId = curext(), LedgerDimensionAccount  _offsetLedgerDimension = 0,
        PaymMode _paymMode = '', PaymSpec _paymSpec = '', TransDate _paymDate = dateNull()) // SKS_Bug_11845
    {
        SKS_EFT_FilePmtSelection sks_eft_filePmtSelection;
        SKS_EFT_FilePmtSelection sks_eft_filePmtSelectionValid;
        LedgerJournalTable ledgerJournalTable;
        SKS_EFT_FormatGroup formatGroup;
        SKS_EB_BankHolidayGroupID msks_eb_bankholidaygroupid;
        SKS_EB_CommID InboundCommID, currInboundCommID; //IHB_3.3.5 SKS 9536 -->
        str InboundFilePath, currInboundFilePath; //IHB_3.3.5 SKS 9536<---
        str fileInfo[8];
        str commInfo;
        str currCommInfo;
        str prevPaymMode;
        str prevFormatId;
        str prevBankId;
        str prevControlName;
        str currControlName;
        str prevControlFormatID;
        str currControlFormatID;

        // SKS_Bug_11845 -->
        str                      fileInfoLoc, controlNameLoc, controlFormatIDLoc,
                                 commInfoLoc, inboundFilePathLoc, formatGroupLoc, companyInfoLoc, fileInfoCur,
                                 outboundFilePath, currOutboundFilePath, outboundFilePathLoc;
        BankAccountTable         bankAccountTable;
        SKS_EFT_Bank             sks_eft_bankLoc;
        VendPaymModeTable        vendPaymModeTableLoc = VendPaymModeTable::findByCompanySKS(_dataAreaId, _paymMode);// SKS_Bug_12453
        SKS_EFT_FileFormat       sks_eft_FileFormatLoc = SKS_EFT_FileFormat::findByCompany(_dataAreaId, vendPaymModeTableLoc.SKS_EFT_FormatId);
        SKS_EB_CommID            inboundCommIDLoc;
        SKS_EB_BankHolidayGroupID   bankHolidayGroupidLoc;
        boolean                     firstRec = true;
        SKS_EFTAP_File lSKS_EFTAP_File;
        select firstonly lSKS_EFTAP_File where lSKS_EFTAP_File.RecId == _fileRecId;
        // SKS_Bug_11845 <--

        str generateError(str _error,
                          str _ValueKeylabel = '', str _vKeyValue1 = '', str _vKeyValue2 = '',
                          str _Value1label = '', str _v1Value1 = '', str _v1Value2 = '',
                          str _Value2label = '', str _v2Value1 = '', str _v2Value2 = '')
        {
            str ret;

            ret = 'Validation error: ' + _error + ' Record 1: ';

            if(_ValueKeylabel)
            {
                ret += _ValueKeylabel + ': ' + _vKeyValue1;
            }
            if(_Value1label)
            {
                ret += ', ' + _Value1label + ': ' + _v1Value1;
            }
            if(_Value2label)
            {
                ret += ', ' + _Value2label + ': ' + _v2Value1;
            }

            if(_vKeyValue2 || _v1Value2 || _v2Value2)
            {
                ret += '; Record 2: ';

                if(_ValueKeylabel)
                {
                    ret += _ValueKeylabel + ': ' + _vKeyValue2;
                }
                if(_Value1label)
                {
                    ret += ', ' + _Value1label + ': ' + _v1Value2;
                }
                if(_Value2label)
                {
                    ret += ', ' + _Value2label + ': ' + _v2Value2;
                }
            }

            ret += '.';

            return ret;
        }

        while select crosscompany:_multicompaniesCon * from  sks_eft_filePmtSelection order by sks_eft_filePmtSelection.PrimaryFormat desc
            where sks_eft_filePmtSelection.FileRecId == _fileRecId || sks_eft_filePmtSelection.RecId == _recId
        {
            // Check for posted payment journals
            // This is not currently supported.  Once a payment journal is posted, the invoices are removed from SpecTrans
            changecompany(sKS_EFT_FilePmtSelection.Company ? sKS_EFT_FilePmtSelection.Company: sKS_EFT_FilePmtSelection.DataAreaId)
            {
                select firstonly JournalNum from ledgerJournalTable where ledgerJournalTable.JournalNum == sks_eft_filePmtSelection.PmtJournalNum
                && ledgerJournalTable.JournalType == LedgerJournalType::Payment && ledgerJournalTable.Posted == NoYes::Yes;
            }
            if(ledgerJournalTable)
            {
                return(strFmt("@SKS997", sks_eft_filePmtSelection.PmtJournalNum));
            }

            if(!msks_eft_FileFormat)
            {
                this.GetEFTFileFormat(sks_eft_filePmtSelection.PaymMode, SKS_EFT_Module::AP);
            }

            // Different format group
            if(msks_eft_bank.BankAccountId != sks_eft_filePmtSelection.PmtBankAccountId || msks_eft_bank.PaymMode != sks_eft_filePmtSelection.PaymMode)
            {
                this.GetAPBank(sks_eft_filePmtSelection.PmtBankAccountId, sks_eft_filePmtSelection.PaymMode, sks_eft_filePmtSelection.Company); // SKS-FDD-10590
            }
            if(msks_eft_Bank)
            {
                // SKS_Bug_11845 -->
                if(_calledfromAutoCreation)
                {
                    if(firstRec)
                    {
                        changecompany(_dataAreaId)
                        {
                            bankAccountTable = null;
                            bankAccountTable = BankAccountTable::findByLedgerDimension(_offsetLedgerDimension);
                        }
                        sks_eft_bankLoc  = SKS_EFT_Bank::findByCompany(_dataAreaId, bankAccountTable.AccountID, _paymMode);
                        companyInfoLoc =  sks_eft_bankLoc.ACHCompanyID + sks_eft_bankLoc.ACHCompanyName;
                        fileInfoLoc = sks_eft_bankLoc.ACHImmDest +
                               sks_eft_bankLoc.ACHImmDestName +
                               sks_eft_bankLoc.ACHImmOrig +
                               sks_eft_bankLoc.ACHImmOrigName +
                               enum2str(sks_eft_bankLoc.ACHFileIDModifier) +
                               enum2str(sks_eft_bankLoc.FillBlock) +
                               enum2str(sks_eft_bankLoc.APHeadTrailID) +
                               enum2str(sks_eft_bankLoc.APDelete);
                        if(lSKS_EFTAP_File.BFBankIntegration == SKS_BF_BankIntType::BankFabric)
                        {
                            controlNameLoc = sks_eft_bankLoc.APBankFabricFileNames;
                        }
                        else
                        {
                            controlNameLoc = sks_eft_bankLoc.APControlFileName;
                        }
                        controlFormatIDLoc = sks_eft_bankLoc.APControlFileFormatId;
                        commInfoLoc = sks_eft_bankLoc.APCommID;
                        bankHolidayGroupidLoc = sks_eft_bankLoc.BankHolidayGroupId;
                        formatGroupLoc = sks_eft_FileFormatLoc.FormatGroup;
                        if(sks_eft_FileFormatLoc.InboundFileGroupId != '')
                        {
                            inboundCommIDLoc    = sks_eft_bankLoc.InboundCommID;
                            if(lSKS_EFTAP_File.BFBankIntegration == SKS_BF_BankIntType::BankFabric)
                            {
                                inboundFilePathLoc  = sks_eft_bankLoc.APBankFabricInboundFileLocation;
                            }
                            else
                            {
                                inboundFilePathLoc  = sks_eft_bankLoc.InboundFileLoc;
                            }
                        }

                        if(lSKS_EFTAP_File.BFBankIntegration == SKS_BF_BankIntType::BankFabric)
                        {
                            outboundFilePathLoc = sks_eft_bankLoc.APBankFabricFileLocation;
                        }
                        else
                        {
                            outboundFilePathLoc = sks_eft_bankLoc.APFilePath + '\\' + sks_eft_bankLoc.APFileName;
                        }

                        firstRec = false;
                    }
                    fileInfoCur = msks_eft_Bank.ACHImmDest +
                               msks_eft_Bank.ACHImmDestName +
                               msks_eft_Bank.ACHImmOrig +
                               msks_eft_Bank.ACHImmOrigName +
                               enum2str(msks_eft_Bank.ACHFileIDModifier) +
                               enum2str(msks_eft_Bank.FillBlock) +
                               enum2str(msks_eft_Bank.APHeadTrailID) +
                               enum2str(msks_eft_Bank.APDelete);
                    if(lSKS_EFTAP_File.BFBankIntegration == SKS_BF_BankIntType::BankFabric)
                    {
                        controlNameLoc = msks_eft_Bank.APBankFabricFileNames;
                    }
                    else
                    {
                        controlNameLoc = msks_eft_Bank.APControlFileName;
                    }

                    if(strUpr(fileInfoLoc) != strUpr(fileInfoCur))
                    {
                        _sks_eft_processingAP.parmIgnoreFile(true);
                        return '';
                    }
                    // APControlFileInfo and ControlFileFormatId
                    if(comminfo == '') //Check a mandatory field to make sure that we aren't doing a comparison to an entirely empty record
                    {
                        if(lSKS_EFTAP_File.BFBankIntegration == SKS_BF_BankIntType::BankFabric)
                        {
                            currControlName = msks_eft_Bank.APBankFabricFileNames;
                        }
                        else
                        {
                            currControlName = msks_eft_Bank.APControlFIleName;
                        }
                        currControlFormatID = msks_eft_Bank.APControlFileFormatId;
                    }
                    if(strUpr(controlNameLoc) != strupr(currControlName) || strUpr(controlFormatIDLoc) != strUpr(currControlFormatID))
                    {
                        _sks_eft_processingAP.parmIgnoreFile(true);
                        return '';
                    }
                    // Communincation info

                    comminfo = msks_eft_Bank.APCommID;
                    if(strUpr(comminfo) != strUpr(commInfoLoc))
                    {
                        _sks_eft_processingAP.parmIgnoreFile(true);
                        return '';
                    }
                    //Holidays
                    msks_eb_bankholidaygroupid = msks_eft_Bank.BankHolidayGroupId;
                    if(msks_eb_bankholidaygroupid != bankHolidayGroupidLoc)
                    {
                        _sks_eft_processingAP.parmIgnoreFile(true);
                        return '';
                    }
                    if(msks_eft_FileFormat.InboundFileGroupId != '' || sks_eft_FileFormatLoc.InboundFileGroupId != '')
                    {
                        InboundCommID = msks_eft_Bank.InboundCommID;

                        if(InboundCommID != inboundCommIDLoc)
                        {
                            _sks_eft_processingAP.parmIgnoreFile(true);
                            return '';
                        }
                        // Inbound File Location
                        if(lSKS_EFTAP_File.BFBankIntegration == SKS_BF_BankIntType::BankFabric)
                        {
                            InboundFilePath = msks_eft_Bank.APBankFabricInboundFileLocation;
                        }
                        else
                        {
                            InboundFilePath = msks_eft_Bank.InboundFileLoc;
                        }

                        if(inboundFilePathLoc != InboundFilePath)
                        {
                            _sks_eft_processingAP.parmIgnoreFile(true);
                            return '';
                        }
                    }

                    if(lSKS_EFTAP_File.BFBankIntegration == SKS_BF_BankIntType::BankFabric)
                    {
                        outboundFilePath = msks_eft_Bank.APBankFabricFileLocation;
                    }
                    else
                    {
                        outboundFilePath = msks_eft_Bank.APFilePath + '\\' + msks_eft_bank.APFileName;
                    }

                    if(outboundFilePathLoc != outboundFilePath)
                    {
                        _sks_eft_processingAP.parmIgnoreFile(true);
                        return '';
                    }

                }
                // SKS_Bug_11845 <--
                else
                {
                    if(formatGroup == '')
                    {
                        formatGroup = sks_eft_filePmtSelection.FormatGroup;
                        prevPaymMode = sks_eft_filePmtSelection.PaymMode;
                        prevFormatId = sks_eft_filePmtSelection.FormatId;
                    }
                    else
                    {
                        if(formatGroup != sks_eft_filePmtSelection.FormatGroup)
                        {
                            return generateError("@SKS998",
                                             fieldPName(SKS_EFT_FilePmtSelection, PaymMode), prevPaymMode, sks_eft_filePmtSelection.PaymMode,
                                             fieldPName(SKS_EFT_FilePmtSelection, FormatGroup), formatGroup, sks_eft_filePmtSelection.FormatGroup,
                                             fieldPName(SKS_EFT_FilePmtSelection, FormatId), prevFormatId, sks_eft_filePmtSelection.FormatId);
                        }
                    }

                    // File header info
                    if(fileInfo[1] == '')
                    {
                        prevBankId = msks_eft_bank.BankAccountId;
                        fileInfo[1] = msks_eft_bank.ACHImmDest;
                        fileInfo[2] = msks_eft_bank.ACHImmDestName;
                        fileInfo[3] = msks_eft_bank.ACHImmOrig;
                        fileInfo[4] = msks_eft_bank.ACHImmOrigName;
                        fileInfo[5] = enum2str(msks_eft_bank.ACHFileIDModifier);
                        fileInfo[6] = enum2str(msks_eft_bank.FillBlock);
                        fileInfo[7] = enum2str(msks_eft_bank.APHeadTrailID);
                        fileInfo[8] = enum2str(msks_eft_bank.APDelete);
                    }
                    else
                    {
                        if(strUpr(fileInfo[1]) != strUpr(msks_eft_bank.ACHImmDest))
                        {
                            return generateError("@SKS1000",
                                             fieldPName(SKS_EFT_Bank, ACHImmDest), fileInfo[1], msks_eft_bank.ACHImmDest);
                        }
                        else if(strUpr(fileInfo[2]) != strUpr(msks_eft_bank.ACHImmDestName))
                        {
                            return generateError("@SKS1000",
                                             fieldPName(SKS_EFT_Bank, ACHImmDestName), fileInfo[2], msks_eft_bank.ACHImmDestName);
                        }
                        else if(strUpr(fileInfo[3]) != strUpr(msks_eft_bank.ACHImmOrig))
                        {
                            return generateError("@SKS1000",
                                             fieldPName(SKS_EFT_Bank, ACHImmOrig), fileInfo[3], msks_eft_bank.ACHImmOrig);
                        }
                        else if(strUpr(fileInfo[4]) != strUpr(msks_eft_bank.ACHImmOrigName))
                        {
                            return generateError("@SKS1000",
                                             fieldPName(SKS_EFT_Bank, ACHImmOrigName), fileInfo[4], msks_eft_bank.ACHImmOrigName);
                        }
                        else if(strUpr(fileInfo[5]) != strUpr(enum2str(msks_eft_bank.ACHFileIDModifier)))
                        {
                            return generateError("@SKS1000",
                                             fieldPName(SKS_EFT_Bank, ACHFileIDModifier), fileInfo[5], enum2str(msks_eft_bank.ACHFileIDModifier));
                        }
                        else if(strUpr(fileInfo[6]) != strUpr(enum2str(msks_eft_bank.FillBlock)))
                        {
                            return generateError("@SKS1000",
                                             fieldPName(SKS_EFT_Bank, FillBlock), fileInfo[6], enum2str(msks_eft_bank.FillBlock));
                        }
                        else if(strUpr(fileInfo[7]) != strUpr(enum2str(msks_eft_bank.APHeadTrailID)))
                        {
                            return generateError("@SKS1000",
                                             fieldPName(SKS_EFT_Bank, APHeadTrailID), fileInfo[7], enum2str(msks_eft_bank.APHeadTrailID));
                        }
                        else if(strUpr(fileInfo[8]) != strUpr(enum2str(msks_eft_bank.APDelete)))
                        {
                            return generateError("@SKS1000",
                                             fieldPName(SKS_EFT_Bank, APDelete), fileInfo[8], enum2str(msks_eft_bank.APDelete));
                        }
                    }

                    if(prevControlName == '' && currControlFormatID == '')
                    {
                        if(comminfo == '')//Check a mandatory field to make sure that we aren't doing a comparison to an entirely empty record
                        {
                            if(lSKS_EFTAP_File.BFBankIntegration == SKS_BF_BankIntType::BankFabric)
                            {
                                prevControlName = msks_eft_bank.APBankFabricFileNames;
                            }
                            else
                            {
                                prevControlName = msks_eft_bank.APControlFileName;
                            }
                            prevControlFormatID = msks_eft_bank.APControlFileFormatiD;
                        }
                        else
                        {
                            if(lSKS_EFTAP_File.BFBankIntegration == SKS_BF_BankIntType::BankFabric)
                            {
                                CurrControlName = msks_eft_bank.APBankFabricFileNames;
                            }
                            else
                            {
                                CurrControlName = msks_eft_bank.APControlFileName;
                            }
                            CurrControlFormatID = msks_eft_bank.APControlFileFormatiD;

                            if(strUpr(prevControlName) != strupr(currControlName) || strUpr(prevControlFormatID) != strUpr(currControlFormatID))
                            {
                                return generateError("@SKS3248",
                                                 fieldPName(SKS_EFT_Bank, BankAccountId), prevBankId, msks_eft_bank.BankAccountId,
                                                 fieldPName(SKS_EFT_Bank, APControlFileName), prevControlName, currControlName,
                                                 fieldPName(SKS_EFT_Bank, APControlFileFormatID), prevControlFormatID, currControlFormatID);
                            }
                        }
                    }
                    else
                    {
                        if(lSKS_EFTAP_File.BFBankIntegration == SKS_BF_BankIntType::BankFabric)
                        {
                            currControlName = msks_eft_bank.APBankFabricFileNames;
                        }
                        else
                        {
                            currControlName = msks_eft_bank.APControlFileName;
                        }
                        currControlFormatID = msks_eft_bank.APControlFileFormatiD;
                        if(strUpr(prevControlName) != strupr(currControlName) || strUpr(prevControlFormatID) != strUpr(currControlFormatID))
                        {
                            return generateError("@SKS3248",
                                                fieldPName(SKS_EFT_Bank, BankAccountId), prevBankId, msks_eft_bank.BankAccountId,
                                                fieldPName(SKS_EFT_Bank, APControlFileName), prevControlName, currControlName,
                                                fieldPName(SKS_EFT_Bank, APControlFileFormatID), prevControlFormatID, currControlFormatID);
                        }
                    }

                    // Communincation info
                    if(commInfo == '')
                    {
                        commInfo = msks_eft_bank.APCommID;
                    }
                    else
                    {
                        currCommInfo = msks_eft_bank.APCommID;

                        if(strUpr(commInfo) != strUpr(currCommInfo))
                        {
                            return generateError("@SKS1001",
                                             fieldPName(SKS_EFT_Bank, BankAccountId), prevBankId, msks_eft_bank.BankAccountId,
                                             fieldPName(SKS_EFT_Bank, APCommID), commInfo, currCommInfo);
                        }
                    }

                    // Inbound Communications
                    if(msks_eft_FileFormat.InboundFileGroupId != '' || msks_eft_FileFormat.SKS_DD_InboundFileGroupId != '')
                    {
                        if(InboundCommID == '')
                        {
                            InboundCommID = msks_eft_bank.InboundCommID;
                        }
                        else
                        {
                            currInboundCommID = msks_eft_bank.InboundCommID;

                            if(strUpr(InboundCommID) != strUpr(currInboundCommID))
                            {
                                return generateError("@SKS2888",
                                                 fieldPName(SKS_EFT_Bank, BankAccountId), prevBankId, msks_eft_bank.BankAccountId,
                                                 fieldPName(SKS_EFT_Bank, InboundCommID), InboundCommID, msks_eft_bank.InboundCommID);
                            }
                        }

                        // Inbound File Location
                        if(InboundFilePath == '')
                        {
                            if(lSKS_EFTAP_File.BFBankIntegration == SKS_BF_BankIntType::BankFabric)
                            {
                                InboundFilePath = msks_eft_bank.APBankFabricInboundFileLocation;
                            }
                            else
                            {
                                InboundFilePath = msks_eft_bank.InboundFileLoc;
                            }
                        }
                        else
                        {
                            if(lSKS_EFTAP_File.BFBankIntegration == SKS_BF_BankIntType::BankFabric)
                            {
                                currInboundFilePath = msks_eft_bank.APBankFabricInboundFileLocation;
                            }
                            else
                            {
                                currInboundFilePath = msks_eft_bank.InboundFileLoc;
                            }

                            if(strUpr(InboundFilePath) != strUpr(currInboundFilePath))
                            {
                                return generateError("@SKS2889",
                                                 fieldPName(SKS_EFT_Bank, BankAccountId), prevBankId, msks_eft_bank.BankAccountId,
                                                 fieldPName(SKS_EFT_Bank, InboundFileLoc), InboundFilePath, currInboundFilePath);
                            }
                        }
                    }

                    // Outbound File Location
                    if(outboundFilePath == '')
                    {
                        if(lSKS_EFTAP_File.BFBankIntegration == SKS_BF_BankIntType::BankFabric)
                        {
                            outboundFilePath = msks_eft_bank.APBankFabricFileLocation;
                        }
                        else
                        {
                            outboundFilePath = msks_eft_bank.APFilePath + '\\' + msks_eft_bank.APFileName;
                        }
                    }
                    else
                    {
                        if(lSKS_EFTAP_File.BFBankIntegration == SKS_BF_BankIntType::BankFabric)
                        {
                            currOutboundFilePath = msks_eft_bank.APBankFabricFileLocation;
                        }
                        else
                        {
                            currOutboundFilePath = msks_eft_bank.APFilePath + '\\' + msks_eft_bank.APFileName;
                        }

                        if(strUpr(outboundFilePath) != strUpr(currOutboundFilePath))
                        {
                            return generateError("@SKS:SKGOutboundFileNameError",
                                                 fieldPName(SKS_EFT_Bank, BankAccountId), prevBankId, msks_eft_bank.BankAccountId,
                                                 fieldPName(SKS_EFT_Bank, APFilePath), outboundFilePath, currOutboundFilePath);
                        }
                    }

                    //Holidays
                    if(msks_eb_bankholidaygroupid == '')
                    {
                        msks_eb_bankholidaygroupid = msks_eft_bank.BankHolidayGroupId;
                    }
                    else
                    {
                        if(msks_eb_bankholidaygroupid != msks_eft_bank.BankHolidayGroupId)
                        {
                            return generateError("@SKS2505",
                                             fieldPName(SKS_EFT_Bank, BankAccountId), prevBankId, msks_eft_bank.BankAccountId,
                                             fieldPName(SKS_EFT_Bank, BankHolidayGroupId), msks_eb_bankholidaygroupid, msks_eft_bank.BankHolidayGroupId);
                        }
                    }
                }
            }
            else
            {
                return strFmt("@SKS1002",strFmt("@SKS1028"));
            }
        }
        // See if any payment selection records require a separate file
        select firstOnly crossCompany:_multicompaniesCon sks_eft_filePmtSelection
         where
         (sks_eft_filePmtSelection.FileRecId == _fileRecId || sks_eft_filePmtSelection.RecId == _recId) &&
         sks_eft_filePmtSelection.PaymSpecSeparateFile == NoYes::Yes;

        // If a record was found, see if other payment specs are selected
        // Other payment specs are not allowed to be in this file
        if(sks_eft_filePmtSelection)
        {
            if(_calledfromAutoCreation)
            {
                select firstOnly crossCompany:_multicompaniesCon sks_eft_filePmtSelectionValid where sks_eft_filePmtSelectionValid.FileRecId == _fileRecId &&
                 !(sks_eft_filePmtSelectionValid.PaymMode == _paymMode &&
                   sks_eft_filePmtSelectionValid.PaymSpec == _paymSpec);

                if(sks_eft_filePmtSelectionValid)
                {
                    _sks_eft_processingAP.parmIgnoreFile(true);
                    return '';
                }
            }
            else
            {
                select firstOnly crossCompany:_multicompaniesCon sks_eft_filePmtSelectionValid where
                 (sks_eft_filePmtSelectionValid.FileRecId == _fileRecId || sks_eft_filePmtSelectionValid.RecId == _recId) &&
                 !(sks_eft_filePmtSelectionValid.PaymMode == sks_eft_filePmtSelection.PaymMode &&
                   sks_eft_filePmtSelectionValid.PaymSpec == sks_eft_filePmtSelection.PaymSpec);

                if(sks_eft_filePmtSelectionValid)
                {
                    return "@SKS1003";
                }
            }
        }

        // See if any payment selection records require the payment date to be the same
        select firstOnly crossCompany:_multicompaniesCon sks_eft_filePmtSelection
         where
         (sks_eft_filePmtSelection.FileRecId == _fileRecId || sks_eft_filePmtSelection.RecId == _recId) &&
         sks_eft_filePmtSelection.PaymSpecSameDate == NoYes::Yes;

        // If a record was found, see if other dates are selected
        // Other payment dates are not allowed to be in this file
        if(sks_eft_filePmtSelection)
        {
            if(_calledfromAutoCreation)
            {
                select firstOnly crossCompany:_multicompaniesCon sks_eft_filePmtSelectionValid where sks_eft_filePmtSelectionValid.FileRecId == _fileRecId &&
                 (sks_eft_filePmtSelectionValid.PmtDate != _paymDate) && (sks_eft_filePmtSelectionValid.PmtDate != DateNull())
                 && (sks_eft_filePmtSelection.PmtDate != DateNull());

                if(sks_eft_filePmtSelectionValid)
                {
                    _sks_eft_processingAP.parmIgnoreFile(true);
                    return '';
                }
            }
            else
            {
                select firstOnly crossCompany:_multicompaniesCon sks_eft_filePmtSelectionValid where
             (sks_eft_filePmtSelectionValid.FileRecId == _fileRecId || sks_eft_filePmtSelectionValid.RecId == _recId) &&
             (sks_eft_filePmtSelectionValid.PmtDate != sks_eft_filePmtSelection.PmtDate) && (sks_eft_filePmtSelectionValid.PmtDate != DateNull())
             && (sks_eft_filePmtSelection.PmtDate != DateNull());

                if(sks_eft_filePmtSelectionValid)
                {
                    return "@SKS1004";
                }
            }
        }

        // See if any payment selection records require the effective date to be the same If Supports multiple effective date should be No

        if(msks_eft_FileFormat.EffectiveDateMethod == SKS_EFT_EffectiveDateMethod::PaymSpecOffset && msks_eft_FileFormat.SupportsMultipleEffectiveDates == NoYes::No)
        {
            select firstOnly crossCompany:_multicompaniesCon sks_eft_filePmtSelection
             where
             (sks_eft_filePmtSelection.FileRecId == _fileRecId || sks_eft_filePmtSelection.RecId == _recId) &&
             sks_eft_filePmtSelection.EffectiveDate != dateNull();

            // If a record was found, see if other dates are selected
            // Other payment dates are not allowed to be in this file
            if(sks_eft_filePmtSelection)
            {
                /*if(_calledfromAutoCreation)
                {
                    select firstOnly crossCompany:_multicompaniesCon sks_eft_filePmtSelectionValid where sks_eft_filePmtSelectionValid.FileRecId == _fileRecId &&
                     (sks_eft_filePmtSelectionValid.PmtDate != _paymDate) && (sks_eft_filePmtSelectionValid.PmtDate != DateNull())
                     && (sks_eft_filePmtSelection.PmtDate != DateNull());

                    if(sks_eft_filePmtSelectionValid)
                    {
                        _sks_eft_processingAP.parmIgnoreFile(true);
                        return '';
                    }
                }
                else
                {*/
                select firstOnly crossCompany:_multicompaniesCon sks_eft_filePmtSelectionValid where
                 (sks_eft_filePmtSelectionValid.FileRecId == _fileRecId || sks_eft_filePmtSelectionValid.RecId == _recId) &&
                 (sks_eft_filePmtSelectionValid.EffectiveDate != sks_eft_filePmtSelection.EffectiveDate) && (sks_eft_filePmtSelectionValid.EffectiveDate != DateNull())
                 && (sks_eft_filePmtSelection.EffectiveDate != DateNull());

                if(sks_eft_filePmtSelectionValid)
                {
                    return "@SKS:SKGFormatDoesNotSupportValidation";
                }
            
            }
        }
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>CheckUserSelectionAR</Name>
				<Source><![CDATA[
    public str CheckUserSelectionAR(RefRecId _fileRecId, RefRecID _recId = -1, container _multicompaniesCon = conNull(), boolean _calledfromAutoCreation = false,
        SKS_EFT_Processing _sks_eft_processingAR = null, DataAreaId _dataAreaId = curext(), LedgerDimensionAccount  _offsetLedgerDimension = 0,
        PaymMode _paymMode = '', PaymSpec _paymSpec = '', TransDate _paymDate = dateNull()) //FDD-10590 // SKS_Bug_11845
    {
        SKS_EFT_FilePmtSelection sks_eft_filePmtSelection;
        SKS_EFT_FilePmtSelection sks_eft_filePmtSelectionValid;
        LedgerJournalTable ledgerJournalTable;
        SKS_EFT_FormatGroup formatGroup;
        SKS_EB_BankHolidayGroupID msks_eb_bankholidaygroupid;
        str cpnyInfo;
        str currCpnyInfo;
        str fileInfo;
        str currFileInfo;
        str commInfo;
        str currCommInfo;
        str prevControlName;
        str currControlName;
        str prevControlFormatID;
        str currControlFormatID;
        // SKS_Bug_11845 -->
        str                      fileInfoLoc, controlNameLoc, controlFormatIDLoc,
                                 commInfoLoc, inboundFilePathLoc, formatGroupLoc, InboundFilePath, prevBankId, companyInfoLoc,
                                 outboundFilePath, currOutboundFilePath, outboundFilePathLoc;
        BankAccountTable         bankAccountTable;
        SKS_EFTAR_Bank           sks_eftar_bankLoc;
        CustPaymModeTable        custPaymModeTableLoc = CustPaymModeTable::findByCompany(_dataAreaId, _paymMode);
        SKS_EFT_FileFormat       sks_eft_FileFormatLoc = SKS_EFT_FileFormat::findByCompany(_dataAreaId, custPaymModeTableLoc.SKS_EFT_FormatId);
        SKS_EB_CommID            inboundCommIDLoc, InboundCommID;
        SKS_EB_BankHolidayGroupID   bankHolidayGroupidLoc;
        boolean firstRec = true;
        SKS_EFTAP_File lSKS_EFTAP_File;
        select firstonly lSKS_EFTAP_File where lSKS_EFTAP_File.RecId == _fileRecId;

        // SKS_Bug_11845 <--
        while select crosscompany:_multicompaniesCon * from sks_eft_filePmtSelection order by sks_eft_filePmtSelection.PrimaryFormat desc
                where sks_eft_filePmtSelection.FileRecId == _fileRecId || sks_eft_filePmtSelection.RecId == _recId //FDD-10590
        {
            // Check for posted payment journals
            // This is not currently supported.  Once a payment journal is posted, the invoices are removed from SpecTrans
            changecompany(sks_eft_filePmtSelection.Company ? sks_eft_filePmtSelection.Company: sks_eft_filePmtSelection.DataAreaId) //FDD-10590
            {
                select firstonly JournalNum from ledgerJournalTable where ledgerJournalTable.JournalNum == sks_eft_filePmtSelection.PmtJournalNum
                    && ledgerJournalTable.JournalType == LedgerJournalType::Payment && ledgerJournalTable.Posted == NoYes::Yes;
            }
            if(ledgerJournalTable)
            {
                return(strFmt("@SKS997", sks_eft_filePmtSelection.PmtJournalNum));
            }

            if(!msks_eft_FileFormat)
            {
                this.GetEFTFileFormat(sks_eft_filePmtSelection.PaymMode, SKS_EFT_Module::AR);
            }

            // Different format group
            if(msks_eftar_bank.BankAccountId != sks_eft_filePmtSelection.PmtBankAccountId || msks_eftar_bank.PaymMode != sks_eft_filePmtSelection.PaymMode)
            {
                this.GetARBank(sks_eft_filePmtSelection.PmtBankAccountId, sks_eft_filePmtSelection.PaymMode, sks_eft_filePmtSelection.Company);// SKS_FDD_10590
            }

            if(msks_eftar_Bank)
            {
                // SKS_Bug_11845 -->
                if(_calledfromAutoCreation)
                {
                    if(firstRec)
                    {
                        changecompany(_dataAreaId)
                        {
                            bankAccountTable = null;
                            bankAccountTable = BankAccountTable::findByLedgerDimension(_offsetLedgerDimension);
                        }
                        sks_eftar_bankLoc  = SKS_EFTAR_Bank::findByCompany(_dataAreaId, bankAccountTable.AccountID, _paymMode);
                        companyInfoLoc =  sks_eftar_bankLoc.ACHCompanyID + sks_eftar_bankLoc.ACHCompanyName;
                        fileInfoLoc = sks_eftar_bankLoc.ACHImmDest +
                               sks_eftar_bankLoc.ACHImmDestName +
                               sks_eftar_bankLoc.ACHImmOrig +
                               sks_eftar_bankLoc.ACHImmOrigName +
                               enum2str(sks_eftar_bankLoc.ACHFileIDModifier) +
                               enum2str(sks_eftar_bankLoc.FillBlock) +
                               enum2str(sks_eftar_bankLoc.ARHeadTrailID) +
                               enum2str(sks_eftar_bankLoc.ARDelete);
                        if(lSKS_EFTAP_File.BFBankIntegration == SKS_BF_BankIntType::BankFabric)
                        {
                            controlNameLoc = sks_eftar_bankLoc.ARBankFabricFileNames;
                        }
                        else
                        {
                            controlNameLoc = sks_eftar_bankLoc.ARControlFileName;
                        }
                        controlFormatIDLoc = sks_eftar_bankLoc.ARControlFileFormatId;
                        commInfoLoc = sks_eftar_bankLoc.ARCommID;
                        bankHolidayGroupidLoc = sks_eftar_bankLoc.BankHolidayGroupId;
                        formatGroupLoc = sks_eft_FileFormatLoc.FormatGroup;

                        if(sks_eft_FileFormatLoc.SKS_DD_InboundFileGroupId != '')
                        {
                            inboundCommIDLoc    = sks_eftar_bankLoc.SKS_DD_InCommId;
                            if(lSKS_EFTAP_File.BFBankIntegration == SKS_BF_BankIntType::BankFabric)
                            {
                                inboundFilePathLoc  = sks_eftar_bankLoc.ARBankFabricInboundFileLoc;
                            }
                            else
                            {
                                inboundFilePathLoc  = sks_eftar_bankLoc.SKS_DD_InboundFileLoc;
                            }
                        }
                        if(lSKS_EFTAP_File.BFBankIntegration == SKS_BF_BankIntType::BankFabric)
                        {
                            outboundFilePathLoc = sks_eftar_bankLoc.ARBankFabricFileLocation;
                        }
                        else
                        {
                            outboundFilePathLoc = sks_eftar_bankLoc.ARFilePath;
                        }

                        firstRec = false;
                    }


                    //format group
                    formatGroup = sks_eft_filePmtSelection.FormatGroup;
                    if(formatGroup != formatGroupLoc)
                    {
                        return "@SKS998";
                    }
                    // Company info
                    cpnyInfo = msks_eftar_bank.ACHCompanyID + msks_eftar_bank.ACHCompanyName;
                    if(msks_eft_FileFormat.FormatType != SKS_EFT_FormatType::EFT && (strUpr(cpnyInfo) != strUpr(companyInfoLoc)))
                    {
                        _sks_eft_processingAR.parmIgnoreFile(true);
                        return '';
                    }
                    // File header info
                    fileInfo = msks_eftar_bank.ACHImmDest +
                               msks_eftar_bank.ACHImmDestName +
                               msks_eftar_bank.ACHImmOrig +
                               msks_eftar_bank.ACHImmOrigName +
                               enum2str(msks_eftar_bank.ACHFileIDModifier) +
                               enum2str(msks_eftar_bank.FillBlock) +
                               enum2str(msks_eftar_bank.ARHeadTrailID) +
                               enum2str(msks_eftar_bank.ARDelete);
                    if(strUpr(fileInfoLoc) != strUpr(fileInfo))
                    {
                        _sks_eft_processingAR.parmIgnoreFile(true);
                        return '';
                    }
                    // ARControlFileInfo and ControlFileFormatId
                    if(comminfo == '') //Check a mandatory field to make sure that we aren't doing a comparison to an entirely empty record
                    {
                        if(lSKS_EFTAP_File.BFBankIntegration == SKS_BF_BankIntType::BankFabric)
                        {
                            currControlName = msks_eftar_bank.ARBankFabricFileNames;
                        }
                        else
                        {
                            currControlName = msks_eftar_bank.ARControlFIleName;
                        }
                        currControlFormatID = msks_eftar_bank.ARControlFileFormatId;
                    }
                    if(strUpr(controlNameLoc) != strupr(currControlName) || strUpr(controlFormatIDLoc) != strUpr(currControlFormatID))
                    {
                        _sks_eft_processingAR.parmIgnoreFile(true);
                        return '';
                    }
                    // Communincation info

                    comminfo = msks_eftar_bank.ARCommID;
                    if(strUpr(comminfo) != strUpr(commInfoLoc))
                    {
                        _sks_eft_processingAR.parmIgnoreFile(true);
                        return '';
                    }
                    //Holidays
                    msks_eb_bankholidaygroupid = msks_eftar_bank.BankHolidayGroupId;
                    if(msks_eb_bankholidaygroupid != bankHolidayGroupidLoc)
                    {
                        _sks_eft_processingAR.parmIgnoreFile(true);
                        return '';
                    }
                    if(msks_eft_FileFormat.SKS_DD_InboundFileGroupId != '' || sks_eft_FileFormatLoc.SKS_DD_InboundFileGroupId != '')
                    {
                        InboundCommID = msks_eftar_bank.SKS_DD_InCommId;

                        if(InboundCommID != inboundCommIDLoc)
                        {
                            _sks_eft_processingAR.parmIgnoreFile(true);
                            return '';
                        }
                        // Inbound File Location
                        if(lSKS_EFTAP_File.BFBankIntegration == SKS_BF_BankIntType::BankFabric)
                        {
                            InboundFilePath = msks_eftar_bank.ARBankFabricInboundFileLoc;
                        }
                        else
                        {
                            InboundFilePath = msks_eftar_bank.SKS_DD_InboundFileLoc;
                        }
                        if(inboundFilePathLoc != InboundFilePath)
                        {
                            _sks_eft_processingAR.parmIgnoreFile(true);
                            return '';
                        }
                    }

                    if(lSKS_EFTAP_File.BFBankIntegration == SKS_BF_BankIntType::BankFabric)
                    {
                        outboundFilePath = msks_eftar_bank.ARBankFabricFileLocation;
                    }
                    else
                    {
                        outboundFilePath = msks_eftar_bank.ARFilePath;
                    }
                    if(outboundFilePathLoc != outboundFilePath)
                    {
                        _sks_eft_processingAR.parmIgnoreFile(true);
                        return '';
                    }
                }
                // SKS_Bug_11845 <--
                else
                {
                    if(formatGroup == '')
                    {
                        formatGroup = sks_eft_filePmtSelection.FormatGroup;
                    }
                    else
                    {
                        if(formatGroup != sks_eft_filePmtSelection.FormatGroup)
                        {
                            return "@SKS998";
                        }
                    }
                    // Company info
                    if(cpnyInfo == '')
                    {
                        cpnyInfo = msks_eftar_bank.ACHCompanyID + msks_eftar_bank.ACHCompanyName;
                    }
                    else
                    {
                        currCpnyInfo = msks_eftar_bank.ACHCompanyID + msks_eftar_bank.ACHCompanyName;
                        if(msks_eft_FileFormat.FormatType != SKS_EFT_FormatType::EFT && (strUpr(cpnyInfo) != strUpr(currCpnyInfo)))
                        {
                            return "@SKS999";
                        }
                    }
                    // File header info
                    if(fileInfo == '')
                    {
                        prevBankId = msks_eftar_bank.BankAccountId;
                        fileInfo = msks_eftar_bank.ACHImmDest +
                               msks_eftar_bank.ACHImmDestName +
                               msks_eftar_bank.ACHImmOrig +
                               msks_eftar_bank.ACHImmOrigName +
                               enum2str(msks_eftar_bank.ACHFileIDModifier) +
                               enum2str(msks_eftar_bank.FillBlock) +
                               enum2str(msks_eftar_bank.ARHeadTrailID) +
                               enum2str(msks_eftar_bank.ARDelete);
                    }
                    else
                    {
                        currfileInfo = msks_eftar_bank.ACHImmDest +
                               msks_eftar_bank.ACHImmDestName +
                               msks_eftar_bank.ACHImmOrig +
                               msks_eftar_bank.ACHImmOrigName +
                               enum2str(msks_eftar_bank.ACHFileIDModifier) +
                               enum2str(msks_eftar_bank.FillBlock) +
                               enum2str(msks_eftar_bank.ARHeadTrailID) +
                               enum2str(msks_eftar_bank.ARDelete);

                        if(strUpr(fileInfo) != strUpr(currfileInfo))
                        {
                            return "@SKS1000";
                        }
                    }

                    if(prevControlName == '' && prevControlFormatID == '')
                    {
                        if(comminfo == '')//Check a mandatory field to make sure that we aren't doing a comparison to an entirely empty record
                        {
                            if(lSKS_EFTAP_File.BFBankIntegration == SKS_BF_BankIntType::BankFabric)
                            {
                                prevControlName = msks_eftar_bank.ARBankFabricFileNames;
                            }
                            else
                            {
                                prevControlName = msks_eftar_bank.ARControlFIleName;
                            }
                            prevControlFormatID = msks_eftar_bank.ARControlFileFormatId;
                        }
                        else
                        {
                            if(lSKS_EFTAP_File.BFBankIntegration == SKS_BF_BankIntType::BankFabric)
                            {
                                currControlName = msks_eftar_bank.ARBankFabricFileNames;
                            }
                            else
                            {
                                currControlName = msks_eftar_bank.ARControlFIleName;
                            }
                            currControlFormatID = msks_eftar_bank.ARControlFileFormatId;

                            if(strUpr(prevControlName) != strupr(currControlName) || strUpr(prevControlFormatID) != strUpr(currControlFormatID))
                            {
                                return "@SKS3248";
                            }
                        }
                    }
                    else
                    {
                        if(lSKS_EFTAP_File.BFBankIntegration == SKS_BF_BankIntType::BankFabric)
                        {
                            currControlName = msks_eftar_bank.ARBankFabricFileNames;
                        }
                        else
                        {
                            currControlName = msks_eftar_bank.ARControlFIleName;
                        }
                        currControlFormatID = msks_eftar_bank.ARControlFileFormatId;

                        if(strUpr(prevControlName) != strupr(currControlName) || strUpr(prevControlFormatID) != strUpr(currControlFormatID))
                        {
                            return "@SKS3248";
                        }
                    }

                    // Communincation info
                    if(commInfo == '')
                    {
                        commInfo = msks_eftar_bank.ARCommID;
                    }
                    else
                    {
                        currCommInfo = msks_eftar_bank.ARCommID;

                        if(strUpr(commInfo) != strUpr(currCommInfo))
                        {
                            return "@SKS1001";
                        }
                    }

                    // Inbound Communications
                    if(msks_eft_FileFormat.SKS_DD_InboundFileGroupId != '')
                    {
                        if(InboundCommID == '')
                        {
                            InboundCommID = msks_eftar_bank.SKS_DD_InCommId;
                        }
                        else
                        {
                            if(InboundCommID != msks_eftar_bank.SKS_DD_InCommId)
                            {
                                return "@SKS2888";
                            }
                        }

                        // Inbound File Location
                        if(InboundFilePath == '')
                        {
                            if(lSKS_EFTAP_File.BFBankIntegration == SKS_BF_BankIntType::BankFabric)
                            {
                                InboundFilePath = msks_eftar_bank.ARBankFabricInboundFileLoc;
                            }
                            else
                            {
                                InboundFilePath = msks_eftar_bank.SKS_DD_InboundFileLoc;
                            }
                        }
                        else
                        {
                            str curInboundFilePath;
                            if(lSKS_EFTAP_File.BFBankIntegration == SKS_BF_BankIntType::BankFabric)
                            {
                                curInboundFilePath = msks_eftar_bank.ARBankFabricInboundFileLoc;
                            }
                            else
                            {
                                curInboundFilePath = msks_eftar_bank.SKS_DD_InboundFileLoc;
                            }
                            if(InboundFilePath != curInboundFilePath)
                            {
                                return "@SKS2889";
                            }
                        }
                    }

                    // Outbound File Location
                    if(outboundFilePath == '')
                    {
                        if(lSKS_EFTAP_File.BFBankIntegration == SKS_BF_BankIntType::BankFabric)
                        {
                            outboundFilePath = msks_eftar_bank.ARBankFabricFileLocation;
                        }
                        else
                        {
                            outboundFilePath = msks_eftar_bank.ARFilePath;
                        }
                    }
                    else
                    {
                        if(lSKS_EFTAP_File.BFBankIntegration == SKS_BF_BankIntType::BankFabric)
                        {
                            currOutboundFilePath = msks_eftar_bank.ARBankFabricFileLocation;
                        }
                        else
                        {
                            currOutboundFilePath = msks_eftar_bank.ARFilePath;
                        }

                        if(strUpr(outboundFilePath) != strUpr(currOutboundFilePath))
                        {
                            return "@SKS:SKGOutboundFileNameError";
                        }
                    }

                    //Holidays
                    if(msks_eb_bankholidaygroupid == '')
                    {
                        msks_eb_bankholidaygroupid = msks_eftar_bank.BankHolidayGroupId;
                    }
                    else
                    {
                        if(msks_eb_bankholidaygroupid != msks_eftar_bank.BankHolidayGroupId)
                        {
                            return "@SKS2505";
                        }
                    }
                }

            }
            else
            {
                return strFmt("@SKS1002",strFmt("@SKS4138"));
            }
        }
        // See if any payment selection records require a separate file
        select firstOnly crosscompany:_multicompaniesCon sks_eft_filePmtSelection
         where
         (sks_eft_filePmtSelection.FileRecId == _fileRecId || sks_eft_filePmtSelection.RecId == _recId) &&
         sks_eft_filePmtSelection.PaymSpecSeparateFile == NoYes::Yes;

        // If a record was found, see if other payment specs are selected
        // Other payment specs are not allowed to be in this file
        if(sks_eft_filePmtSelection)
        {
            if(_calledfromAutoCreation)
            {
                select firstOnly crossCompany:_multicompaniesCon  sks_eft_filePmtSelectionValid where sks_eft_filePmtSelectionValid.FileRecId == _fileRecId &&
                 !(sks_eft_filePmtSelectionValid.PaymMode == _paymMode &&
                   sks_eft_filePmtSelectionValid.PaymSpec == _paymSpec);
                if(sks_eft_filePmtSelectionValid)
                {
                    _sks_eft_processingAR.parmIgnoreFile(true);
                    return '';
                }

            }
            else
            {
                select firstOnly crossCompany:_multicompaniesCon  sks_eft_filePmtSelectionValid where
                 (sks_eft_filePmtSelectionValid.FileRecId == _fileRecId || sks_eft_filePmtSelectionValid.RecId == _recId) &&
                 !(sks_eft_filePmtSelectionValid.PaymMode == sks_eft_filePmtSelection.PaymMode &&
                   sks_eft_filePmtSelectionValid.PaymSpec == sks_eft_filePmtSelection.PaymSpec);

                if(sks_eft_filePmtSelectionValid)
                {
                    return "@SKS1003";
                }
            }
        }

        // See if any payment selection records require the payment date to be the same
        select firstOnly crossCompany:_multicompaniesCon sks_eft_filePmtSelection
         where
         (sks_eft_filePmtSelection.FileRecId == _fileRecId || sks_eft_filePmtSelection.RecId == _recId) &&
         sks_eft_filePmtSelection.PaymSpecSameDate == NoYes::Yes;

        // If a record was found, see if other dates are selected
        // Other payment dates are not allowed to be in this file
        if(sks_eft_filePmtSelection)
        {
            if(_calledfromAutoCreation)
            {
                select firstOnly crossCompany:_multicompaniesCon sks_eft_filePmtSelectionValid where sks_eft_filePmtSelectionValid.FileRecId == _fileRecId &&
                 (sks_eft_filePmtSelectionValid.PmtDate != _paymDate) && (sks_eft_filePmtSelectionValid.PmtDate != DateNull())
                 && (sks_eft_filePmtSelection.PmtDate != DateNull());

                if(sks_eft_filePmtSelectionValid)
                {
                    _sks_eft_processingAR.parmIgnoreFile(true);
                    return '';
                }
            }

            else
            {
                select firstOnly crossCompany:_multicompaniesCon sks_eft_filePmtSelectionValid where
             (sks_eft_filePmtSelectionValid.FileRecId == _fileRecId || sks_eft_filePmtSelectionValid.RecId == _recId) &&
             (sks_eft_filePmtSelectionValid.PmtDate != sks_eft_filePmtSelection.PmtDate) && (sks_eft_filePmtSelectionValid.PmtDate != DateNull())
             && (sks_eft_filePmtSelection.PmtDate != DateNull());
            }

            if(sks_eft_filePmtSelectionValid)
            {
                return "@SKS1004";
            }
        }
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>CheckUserSelectionCNP</Name>
				<Source><![CDATA[
    public str CheckUserSelectionCNP(RefRecId _fileRecId, RefRecID _recId = -1, container _multicompaniesCon = conNull(), boolean _calledfromAutoCreation = false,
        SKS_EFT_Processing _sks_eft_processingAP = null, DataAreaId _dataAreaId = curext(), LedgerDimensionAccount  _offsetLedgerDimension = 0,
        PaymMode _paymMode = '', PaymSpec _paymSpec = '', TransDate _paymDate = dateNull()) // SKS_Bug_11845
    {
        SKS_EFT_FilePmtSelection sks_eft_filePmtSelection;
        SKS_EFT_FilePmtSelection sks_eft_filePmtSelectionValid;
        LedgerJournalTable ledgerJournalTable;
        SKS_EFT_FormatGroup formatGroup;
        SKS_EB_BankHolidayGroupID msks_eb_bankholidaygroupid;
        SKS_EB_CommID InboundCommID, currInboundCommID; //IHB_3.3.5 SKS 9536 -->
        str InboundFilePath, currInboundFilePath; //IHB_3.3.5 SKS 9536<---
        str fileInfo[8];
        str commInfo;
        str currCommInfo;
        str prevPaymMode;
        str prevFormatId;
        str prevBankId;
        str prevControlName;
        str currControlName;
        str prevControlFormatID;
        str currControlFormatID;

        // SKS_Bug_11845 -->
        str                      fileInfoLoc, controlNameLoc, controlFormatIDLoc,
                                 commInfoLoc, inboundFilePathLoc, formatGroupLoc, companyInfoLoc, fileInfoCur,
                                 outboundFilePath, currOutboundFilePath, outboundFilePathLoc;
        BankAccountTable         bankAccountTable;
        SKS_EFTCNP_Bank             sks_eft_bankLoc;
        CustPaymModeTable        custPaymModeTableLoc = CustPaymModeTable::find(_paymMode);// SKS_Bug_12453
        SKS_EFT_FileFormat       sks_eft_FileFormatLoc = SKS_EFT_FileFormat::find(custPaymModeTableLoc.SKS_CNP_FormatId);
        SKS_EB_CommID            inboundCommIDLoc;
        SKS_EB_BankHolidayGroupID   bankHolidayGroupidLoc;
        boolean                     firstRec = true;
        SKS_EFTAP_File lSKS_EFTAP_File;
        select firstonly lSKS_EFTAP_File where lSKS_EFTAP_File.RecId == _fileRecId;
        // SKS_Bug_11845 <--

        str generateError(str _error,
                          str _ValueKeylabel = '', str _vKeyValue1 = '', str _vKeyValue2 = '',
                          str _Value1label = '', str _v1Value1 = '', str _v1Value2 = '',
                          str _Value2label = '', str _v2Value1 = '', str _v2Value2 = '')
        {
            str ret;

            ret = 'Validation error: ' + _error + ' Record 1: ';

            if(_ValueKeylabel)
            {
                ret += _ValueKeylabel + ': ' + _vKeyValue1;
            }
            if(_Value1label)
            {
                ret += ', ' + _Value1label + ': ' + _v1Value1;
            }
            if(_Value2label)
            {
                ret += ', ' + _Value2label + ': ' + _v2Value1;
            }

            if(_vKeyValue2 || _v1Value2 || _v2Value2)
            {
                ret += '; Record 2: ';

                if(_ValueKeylabel)
                {
                    ret += _ValueKeylabel + ': ' + _vKeyValue2;
                }
                if(_Value1label)
                {
                    ret += ', ' + _Value1label + ': ' + _v1Value2;
                }
                if(_Value2label)
                {
                    ret += ', ' + _Value2label + ': ' + _v2Value2;
                }
            }

            ret += '.';

            return ret;
        }

        while select * from  sks_eft_filePmtSelection order by sks_eft_filePmtSelection.PrimaryFormat desc
            where sks_eft_filePmtSelection.FileRecId == _fileRecId || sks_eft_filePmtSelection.RecId == _recId
        {
            // Check for posted payment journals
            // This is not currently supported.  Once a payment journal is posted, the invoices are removed from SpecTrans
            select JournalNum from ledgerJournalTable where ledgerJournalTable.JournalNum == sks_eft_filePmtSelection.PmtJournalNum
                && ledgerJournalTable.JournalType == LedgerJournalType::CustPayment && ledgerJournalTable.Posted == NoYes::Yes;
            if(ledgerJournalTable)
            {
                return(strFmt("@SKS997", sks_eft_filePmtSelection.PmtJournalNum));
            }

            if(!msks_eft_FileFormat)
            {
                this.GetEFTFileFormat(sks_eft_filePmtSelection.PaymMode, SKS_EFT_Module::CNP);
            }

            // Different format group
            if(msks_eftcnp_bank.BankAccountId != sks_eft_filePmtSelection.PmtBankAccountId || msks_eftcnp_bank.PaymMode != sks_eft_filePmtSelection.PaymMode)
            {
                this.GetCNPBank(sks_eft_filePmtSelection.PmtBankAccountId, sks_eft_filePmtSelection.PaymMode, sks_eft_filePmtSelection.Company); // SKS-FDD-10590
            }
            if(msks_eftcnp_bank)
            {
                // SKS_Bug_11845 -->
                if(_calledfromAutoCreation)
                {
                    if(firstRec)
                    {
                        changecompany(_dataAreaId)
                        {
                            bankAccountTable = null;
                            bankAccountTable = BankAccountTable::findByLedgerDimension(_offsetLedgerDimension);
                        }
                        sks_eft_bankLoc  = SKS_EFTCNP_Bank::find(bankAccountTable.AccountID, _paymMode);
                        companyInfoLoc =  sks_eft_bankLoc.ACHCompanyID + sks_eft_bankLoc.ACHCompanyName;
                        fileInfoLoc = sks_eft_bankLoc.ACHImmDest +
                               sks_eft_bankLoc.ACHImmDestName +
                               sks_eft_bankLoc.ACHImmOrig +
                               sks_eft_bankLoc.ACHImmOrigName +
                               enum2str(sks_eft_bankLoc.ACHFileIDModifier) +
                               enum2str(sks_eft_bankLoc.FillBlock);
                        if(lSKS_EFTAP_File.BFBankIntegration == SKS_BF_BankIntType::BankFabric)
                        {
                            controlNameLoc = sks_eft_bankLoc.CNPBankFabricFileNames;
                        }
                        else
                        {
                            controlNameLoc = sks_eft_bankLoc.CNPControlFileName;
                        }
                        controlFormatIDLoc = sks_eft_bankLoc.CNPControlFileFormatId;
                        commInfoLoc = sks_eft_bankLoc.CNPCommID;
                        bankHolidayGroupidLoc = sks_eft_bankLoc.BankHolidayGroupId;
                        formatGroupLoc = sks_eft_FileFormatLoc.FormatGroup;
                        if(sks_eft_FileFormatLoc.InboundFileGroupId != '')
                        {
                            inboundCommIDLoc    = sks_eft_bankLoc.InboundCommID;
                            if(lSKS_EFTAP_File.BFBankIntegration == SKS_BF_BankIntType::BankFabric)
                            {
                                inboundFilePathLoc  = sks_eft_bankLoc.CNPBankFabricInboundFileLocation;
                            }
                            else
                            {
                                inboundFilePathLoc  = sks_eft_bankLoc.CNPInboundFileLoc;
                            }
                        }

                        if(lSKS_EFTAP_File.BFBankIntegration == SKS_BF_BankIntType::BankFabric)
                        {
                            outboundFilePathLoc = sks_eft_bankLoc.CNPBankFabricFileLocation;
                        }
                        else
                        {
                            outboundFilePathLoc = sks_eft_bankLoc.CNPFilePath + '\\' + sks_eft_bankLoc.CNPFileName;
                        }

                        firstRec = false;
                    }
                    fileInfoCur = msks_eftcnp_Bank.ACHImmDest +
                               msks_eftcnp_Bank.ACHImmDestName +
                               msks_eftcnp_Bank.ACHImmOrig +
                               msks_eftcnp_Bank.ACHImmOrigName +
                               enum2str(msks_eftcnp_Bank.ACHFileIDModifier) +
                               enum2str(msks_eftcnp_Bank.FillBlock);
                    if(lSKS_EFTAP_File.BFBankIntegration == SKS_BF_BankIntType::BankFabric)
                    {
                        controlNameLoc = msks_eftcnp_Bank.CNPBankFabricFileNames;
                    }
                    else
                    {
                        controlNameLoc = msks_eftcnp_Bank.CNPControlFileName;
                    }
                    if(strUpr(fileInfoLoc) != strUpr(fileInfoCur))
                    {
                        _sks_eft_processingAP.parmIgnoreFile(true);
                        return '';
                    }
                    // APControlFileInfo and ControlFileFormatId
                    if(comminfo == '') //Check a mandatory field to make sure that we aren't doing a comparison to an entirely empty record
                    {
                        if(lSKS_EFTAP_File.BFBankIntegration == SKS_BF_BankIntType::BankFabric)
                        {
                            currControlName = msks_eftcnp_Bank.CNPBankFabricFileNames;
                        }
                        else
                        {
                            currControlName = msks_eftcnp_bank.CNPControlFIleName;
                        }
                        currControlFormatID = msks_eftcnp_bank.CNPControlFileFormatId;
                    }
                    if(strUpr(controlNameLoc) != strupr(currControlName) || strUpr(controlFormatIDLoc) != strUpr(currControlFormatID))
                    {
                        _sks_eft_processingAP.parmIgnoreFile(true);
                        return '';
                    }
                    // Communincation info

                    comminfo = msks_eftcnp_bank.CNPCommID;
                    if(strUpr(comminfo) != strUpr(commInfoLoc))
                    {
                        _sks_eft_processingAP.parmIgnoreFile(true);
                        return '';
                    }
                    //Holidays
                    msks_eb_bankholidaygroupid = msks_eftcnp_bank.BankHolidayGroupId;
                    if(msks_eb_bankholidaygroupid != bankHolidayGroupidLoc)
                    {
                        _sks_eft_processingAP.parmIgnoreFile(true);
                        return '';
                    }
                    if(msks_eft_FileFormat.InboundFileGroupId != '' || sks_eft_FileFormatLoc.InboundFileGroupId != '')
                    {
                        InboundCommID = msks_eftcnp_bank.InboundCommID;

                        if(InboundCommID != inboundCommIDLoc)
                        {
                            _sks_eft_processingAP.parmIgnoreFile(true);
                            return '';
                        }
                        // Inbound File Location
                        if(lSKS_EFTAP_File.BFBankIntegration == SKS_BF_BankIntType::BankFabric)
                        {
                            InboundFilePath = msks_eftcnp_Bank.CNPBankFabricInboundFileLocation;
                        }
                        else
                        {
                            InboundFilePath = msks_eftcnp_bank.CNPInboundFileLoc;
                        }
                        if(inboundFilePathLoc != InboundFilePath)
                        {
                            _sks_eft_processingAP.parmIgnoreFile(true);
                            return '';
                        }
                    }

                    if(lSKS_EFTAP_File.BFBankIntegration == SKS_BF_BankIntType::BankFabric)
                    {
                        outboundFilePath = msks_eftcnp_Bank.CNPBankFabricFileLocation;
                    }
                    else
                    {
                        outboundFilePath = msks_eftcnp_bank.CNPFilePath + '\\' + msks_eftcnp_bank.CNPFileName;
                    }
                    if(outboundFilePathLoc != outboundFilePath)
                    {
                        _sks_eft_processingAP.parmIgnoreFile(true);
                        return '';
                    }

                }
                // SKS_Bug_11845 <--
                else
                {
                    if(formatGroup == '')
                    {
                        formatGroup = sks_eft_filePmtSelection.FormatGroup;
                        prevPaymMode = sks_eft_filePmtSelection.PaymMode;
                        prevFormatId = sks_eft_filePmtSelection.FormatId;
                    }
                    else
                    {
                        if(formatGroup != sks_eft_filePmtSelection.FormatGroup)
                        {
                            return generateError("@SKS998",
                                             fieldPName(SKS_EFT_FilePmtSelection, PaymMode), prevPaymMode, sks_eft_filePmtSelection.PaymMode,
                                             fieldPName(SKS_EFT_FilePmtSelection, FormatGroup), formatGroup, sks_eft_filePmtSelection.FormatGroup,
                                             fieldPName(SKS_EFT_FilePmtSelection, FormatId), prevFormatId, sks_eft_filePmtSelection.FormatId);
                        }
                    }

                    // File header info
                    if(fileInfo[1] == '')
                    {
                        prevBankId = msks_eftcnp_bank.BankAccountId;
                        fileInfo[1] = msks_eftcnp_bank.ACHImmDest;
                        fileInfo[2] = msks_eftcnp_bank.ACHImmDestName;
                        fileInfo[3] = msks_eftcnp_bank.ACHImmOrig;
                        fileInfo[4] = msks_eftcnp_bank.ACHImmOrigName;
                        fileInfo[5] = enum2str(msks_eftcnp_bank.ACHFileIDModifier);
                        fileInfo[6] = enum2str(msks_eftcnp_bank.FillBlock);
                    }
                    else
                    {
                        if(strUpr(fileInfo[1]) != strUpr(msks_eftcnp_bank.ACHImmDest))
                        {
                            return generateError("@SKS1000",
                                             fieldPName(SKS_EFTCNP_Bank, ACHImmDest), fileInfo[1], msks_eftcnp_bank.ACHImmDest);
                        }
                        else if(strUpr(fileInfo[2]) != strUpr(msks_eftcnp_bank.ACHImmDestName))
                        {
                            return generateError("@SKS1000",
                                             fieldPName(SKS_EFTCNP_Bank, ACHImmDestName), fileInfo[2], msks_eftcnp_bank.ACHImmDestName);
                        }
                        else if(strUpr(fileInfo[3]) != strUpr(msks_eftcnp_bank.ACHImmOrig))
                        {
                            return generateError("@SKS1000",
                                             fieldPName(SKS_EFTCNP_Bank, ACHImmOrig), fileInfo[3], msks_eftcnp_bank.ACHImmOrig);
                        }
                        else if(strUpr(fileInfo[4]) != strUpr(msks_eftcnp_bank.ACHImmOrigName))
                        {
                            return generateError("@SKS1000",
                                             fieldPName(SKS_EFTCNP_Bank, ACHImmOrigName), fileInfo[4], msks_eftcnp_bank.ACHImmOrigName);
                        }
                        else if(strUpr(fileInfo[5]) != strUpr(enum2str(msks_eftcnp_bank.ACHFileIDModifier)))
                        {
                            return generateError("@SKS1000",
                                             fieldPName(SKS_EFTCNP_Bank, ACHFileIDModifier), fileInfo[5], enum2str(msks_eftcnp_bank.ACHFileIDModifier));
                        }
                        else if(strUpr(fileInfo[6]) != strUpr(enum2str(msks_eftcnp_bank.FillBlock)))
                        {
                            return generateError("@SKS1000",
                                             fieldPName(SKS_EFTCNP_Bank, FillBlock), fileInfo[6], enum2str(msks_eftcnp_bank.FillBlock));
                        }
                        
                    }

                    if(prevControlName == '' && currControlFormatID == '')
                    {
                        if(comminfo == '')//Check a mandatory field to make sure that we aren't doing a comparison to an entirely empty record
                        {
                            if(lSKS_EFTAP_File.BFBankIntegration == SKS_BF_BankIntType::BankFabric)
                            {
                                prevControlName = msks_eftcnp_bank.CNPBankFabricFileNames;
                            }
                            else
                            {
                                prevControlName = msks_eftcnp_bank.CNPControlFileName;
                            }
                            prevControlFormatID = msks_eftcnp_bank.CNPControlFileFormatiD;
                        }
                        else
                        {
                            if(lSKS_EFTAP_File.BFBankIntegration == SKS_BF_BankIntType::BankFabric)
                            {
                                CurrControlName = msks_eftcnp_bank.CNPBankFabricFileNames;
                            }
                            else
                            {
                                CurrControlName = msks_eftcnp_bank.CNPControlFileName;
                            }
                            CurrControlFormatID = msks_eftcnp_bank.CNPControlFileFormatiD;

                            if(strUpr(prevControlName) != strupr(currControlName) || strUpr(prevControlFormatID) != strUpr(currControlFormatID))
                            {
                                return generateError("@SKS3248",
                                                 fieldPName(SKS_EFTCNP_Bank, BankAccountId), prevBankId, msks_eftcnp_bank.BankAccountId,
                                                 fieldPName(SKS_EFTCNP_Bank, CNPControlFileName), prevControlName, currControlName,
                                                 fieldPName(SKS_EFTCNP_Bank, CNPControlFileFormatID), prevControlFormatID, currControlFormatID);
                            }
                        }
                    }
                    else
                    {
                        if(lSKS_EFTAP_File.BFBankIntegration == SKS_BF_BankIntType::BankFabric)
                        {
                            currControlName = msks_eftcnp_bank.CNPBankFabricFileNames;
                        }
                        else
                        {
                            currControlName = msks_eftcnp_bank.CNPControlFileName;
                        }
                        currControlFormatID = msks_eftcnp_bank.CNPControlFileFormatiD;
                        if(strUpr(prevControlName) != strupr(currControlName) || strUpr(prevControlFormatID) != strUpr(currControlFormatID))
                        {
                            return generateError("@SKS3248",
                                                fieldPName(SKS_EFTCNP_Bank, BankAccountId), prevBankId, msks_eftcnp_bank.BankAccountId,
                                                fieldPName(SKS_EFTCNP_Bank, CNPControlFileName), prevControlName, currControlName,
                                                fieldPName(SKS_EFTCNP_Bank, CNPControlFileFormatID), prevControlFormatID, currControlFormatID);
                        }
                    }

                    // Communincation info
                    if(commInfo == '')
                    {
                        commInfo = msks_eftcnp_bank.CNPCommID;
                    }
                    else
                    {
                        currCommInfo = msks_eftcnp_bank.CNPCommID;

                        if(strUpr(commInfo) != strUpr(currCommInfo))
                        {
                            return generateError("@SKS1001",
                                             fieldPName(SKS_EFTCNP_Bank, BankAccountId), prevBankId, msks_eftcnp_bank.BankAccountId,
                                             fieldPName(SKS_EFTCNP_Bank, CNPCommID), commInfo, currCommInfo);
                        }
                    }

                    // Inbound Communications
                    if(msks_eft_FileFormat.InboundFileGroupId != '' || msks_eft_FileFormat.SKS_DD_InboundFileGroupId != '')
                    {
                        if(InboundCommID == '')
                        {
                            InboundCommID = msks_eftcnp_bank.InboundCommID;
                        }
                        else
                        {
                            currInboundCommID = msks_eftcnp_bank.InboundCommID;

                            if(strUpr(InboundCommID) != strUpr(currInboundCommID))
                            {
                                return generateError("@SKS2888",
                                                 fieldPName(SKS_EFTCNP_Bank, BankAccountId), prevBankId, msks_eftcnp_bank.BankAccountId,
                                                 fieldPName(SKS_EFTCNP_Bank, InboundCommID), InboundCommID, msks_eftcnp_bank.InboundCommID);
                            }
                        }

                        // Inbound File Location
                        if(InboundFilePath == '')
                        {
                            if(lSKS_EFTAP_File.BFBankIntegration == SKS_BF_BankIntType::BankFabric)
                            {
                                InboundFilePath = msks_eftcnp_bank.CNPBankFabricInboundFileLocation;
                            }
                            else
                            {
                                InboundFilePath = msks_eftcnp_bank.CNPInboundFileLoc;
                            }
                        }
                        else
                        {
                            if(lSKS_EFTAP_File.BFBankIntegration == SKS_BF_BankIntType::BankFabric)
                            {
                                currInboundFilePath = msks_eftcnp_bank.CNPBankFabricInboundFileLocation;
                            }
                            else
                            {
                                currInboundFilePath = msks_eftcnp_bank.CNPInboundFileLoc;
                            }

                            if(strUpr(InboundFilePath) != strUpr(currInboundFilePath))
                            {
                                return generateError("@SKS2889",
                                                 fieldPName(SKS_EFTCNP_Bank, BankAccountId), prevBankId, msks_eftcnp_bank.BankAccountId,
                                                 fieldPName(SKS_EFTCNP_Bank, CNPInboundFileLoc), InboundFilePath, msks_eftcnp_bank.CNPInboundFileLoc);
                            }
                        }
                    }

                    // Outbound File Location
                    if(outboundFilePath == '')
                    {
                        if(lSKS_EFTAP_File.BFBankIntegration == SKS_BF_BankIntType::BankFabric)
                        {
                            outboundFilePath = msks_eftcnp_bank.CNPBankFabricFileLocation;
                        }
                        else
                        {
                            outboundFilePath = msks_eftcnp_bank.CNPFilePath + '\\' + msks_eftcnp_bank.CNPFileName;
                        }
                    }
                    else
                    {
                        if(lSKS_EFTAP_File.BFBankIntegration == SKS_BF_BankIntType::BankFabric)
                        {
                            currOutboundFilePath = msks_eftcnp_bank.CNPBankFabricFileLocation;
                        }
                        else
                        {
                            currOutboundFilePath = msks_eftcnp_bank.CNPFilePath + '\\' + msks_eftcnp_bank.CNPFileName;
                        }

                        if(strUpr(outboundFilePath) != strUpr(currOutboundFilePath))
                        {
                            return generateError("@SKS:SKGOutboundFileNameError",
                                                 fieldPName(SKS_EFTCNP_Bank, BankAccountId), prevBankId, msks_eftcnp_bank.BankAccountId,
                                                 fieldPName(SKS_EFTCNP_Bank, CNPFilePath), outboundFilePath, msks_eftcnp_bank.CNPFilePath + '\\' + msks_eftcnp_bank.CNPFileName);
                        }
                    }

                    //Holidays
                    if(msks_eb_bankholidaygroupid == '')
                    {
                        msks_eb_bankholidaygroupid = msks_eftcnp_bank.BankHolidayGroupId;
                    }
                    else
                    {
                        if(msks_eb_bankholidaygroupid != msks_eftcnp_bank.BankHolidayGroupId)
                        {
                            return generateError("@SKS2505",
                                             fieldPName(SKS_EFTCNP_Bank, BankAccountId), prevBankId, msks_eftcnp_bank.BankAccountId,
                                             fieldPName(SKS_EFTCNP_Bank, BankHolidayGroupId), msks_eb_bankholidaygroupid, msks_eftcnp_bank.BankHolidayGroupId);
                        }
                    }
                }
            }
            else
            {
                return strFmt("@SKS1002",strFmt("@SKS:SKGCustReimbursement"));
            }
        }
        // See if any payment selection records require a separate file
        select firstOnly sks_eft_filePmtSelection
         where
         (sks_eft_filePmtSelection.FileRecId == _fileRecId || sks_eft_filePmtSelection.RecId == _recId) &&
         sks_eft_filePmtSelection.PaymSpecSeparateFile == NoYes::Yes;

        // If a record was found, see if other payment specs are selected
        // Other payment specs are not allowed to be in this file
        if(sks_eft_filePmtSelection)
        {
            if(_calledfromAutoCreation)
            {
                select firstOnly crossCompany:_multicompaniesCon sks_eft_filePmtSelectionValid where sks_eft_filePmtSelectionValid.FileRecId == _fileRecId &&
                 !(sks_eft_filePmtSelectionValid.PaymMode == _paymMode &&
                   sks_eft_filePmtSelectionValid.PaymSpec == _paymSpec);

                if(sks_eft_filePmtSelectionValid)
                {
                    _sks_eft_processingAP.parmIgnoreFile(true);
                    return '';
                }
            }
            else
            {
                select firstOnly crossCompany:_multicompaniesCon sks_eft_filePmtSelectionValid where
                 (sks_eft_filePmtSelectionValid.FileRecId == _fileRecId || sks_eft_filePmtSelectionValid.RecId == _recId) &&
                 !(sks_eft_filePmtSelectionValid.PaymMode == sks_eft_filePmtSelection.PaymMode &&
                   sks_eft_filePmtSelectionValid.PaymSpec == sks_eft_filePmtSelection.PaymSpec);

                if(sks_eft_filePmtSelectionValid)
                {
                    return "@SKS1003";
                }
            }
        }

        // See if any payment selection records require the payment date to be the same
        select firstOnly crossCompany:_multicompaniesCon sks_eft_filePmtSelection
         where
         (sks_eft_filePmtSelection.FileRecId == _fileRecId || sks_eft_filePmtSelection.RecId == _recId) &&
         sks_eft_filePmtSelection.PaymSpecSameDate == NoYes::Yes;

        // If a record was found, see if other dates are selected
        // Other payment dates are not allowed to be in this file
        if(sks_eft_filePmtSelection)
        {
            if(_calledfromAutoCreation)
            {
                select firstOnly crossCompany:_multicompaniesCon sks_eft_filePmtSelectionValid where sks_eft_filePmtSelectionValid.FileRecId == _fileRecId &&
                 (sks_eft_filePmtSelectionValid.PmtDate != _paymDate) && (sks_eft_filePmtSelectionValid.PmtDate != DateNull())
                 && (sks_eft_filePmtSelection.PmtDate != DateNull());

                if(sks_eft_filePmtSelectionValid)
                {
                    _sks_eft_processingAP.parmIgnoreFile(true);
                    return '';
                }
            }
            else
            {
                select firstOnly crossCompany:_multicompaniesCon sks_eft_filePmtSelectionValid where
             (sks_eft_filePmtSelectionValid.FileRecId == _fileRecId || sks_eft_filePmtSelectionValid.RecId == _recId) &&
             (sks_eft_filePmtSelectionValid.PmtDate != sks_eft_filePmtSelection.PmtDate) && (sks_eft_filePmtSelectionValid.PmtDate != DateNull())
             && (sks_eft_filePmtSelection.PmtDate != DateNull());

                if(sks_eft_filePmtSelectionValid)
                {
                    return "@SKS1004";
                }
            }
        }
        // See if any payment selection records require the effective date to be the same If Supports multiple effective date should be No

        if(msks_eft_FileFormat.EffectiveDateMethod == SKS_EFT_EffectiveDateMethod::PaymSpecOffset && msks_eft_FileFormat.SupportsMultipleEffectiveDates == NoYes::No)
        {
            select firstOnly crossCompany:_multicompaniesCon sks_eft_filePmtSelection
             where
             (sks_eft_filePmtSelection.FileRecId == _fileRecId || sks_eft_filePmtSelection.RecId == _recId) &&
             sks_eft_filePmtSelection.EffectiveDate != dateNull();

            // If a record was found, see if other dates are selected
            // Other payment dates are not allowed to be in this file
            if(sks_eft_filePmtSelection)
            {
                /*if(_calledfromAutoCreation)
                {
                select firstOnly crossCompany:_multicompaniesCon sks_eft_filePmtSelectionValid where sks_eft_filePmtSelectionValid.FileRecId == _fileRecId &&
                (sks_eft_filePmtSelectionValid.PmtDate != _paymDate) && (sks_eft_filePmtSelectionValid.PmtDate != DateNull())
                && (sks_eft_filePmtSelection.PmtDate != DateNull());

                if(sks_eft_filePmtSelectionValid)
                {
                _sks_eft_processingAP.parmIgnoreFile(true);
                return '';
                }
                }
                else
                {*/
                select firstOnly crossCompany:_multicompaniesCon sks_eft_filePmtSelectionValid where
                 (sks_eft_filePmtSelectionValid.FileRecId == _fileRecId || sks_eft_filePmtSelectionValid.RecId == _recId) &&
                 (sks_eft_filePmtSelectionValid.EffectiveDate != sks_eft_filePmtSelection.EffectiveDate) && (sks_eft_filePmtSelectionValid.EffectiveDate != DateNull())
                 && (sks_eft_filePmtSelection.EffectiveDate != DateNull());

                if(sks_eft_filePmtSelectionValid)
                {
                    return "@SKS:SKGFormatDoesNotSupportValidation";
                }
            
            }
        }
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>CreateFXAllDetail</Name>
				<Source><![CDATA[
    private boolean CreateFXAllDetail()
    {
        SKS_FXA_Details lSKS_FXA_Details;
        SKS_EFT_FileDetail lSKS_EFT_FileDetail;
        SKS_EFT_FileDetail insSKS_EFT_FileDetail;
        SKS_FXA_CounterPartyTable lSKS_FXA_CounterPartyTable;
        LedgerJournalTrans lLedgerJournalTrans;
        SKS_EFT_Bank lSKS_EFT_Bank;
        RecordInsertList LocSKS_EFT_FileDetailRecordInsertList;
        CurrencyCode lBankAccCurrency; //Issue21685

        ttsBegin;
        LocSKS_EFT_FileDetailRecordInsertList = new RecordInsertList(tableNum(SKS_EFT_FileDetail));
        while select
            minof(PaymentCompany),
            minof(PaymentCurrencyCode),
            minof(PaymentTransDate),
            minof(PaymentVoucher),
            minof(PaymentJournalNum),
            minOf(PaymentLineRecId),
            minof(BankAccountId),
            minof(PaymMode),
            minof(PaymSpec),
            minof(DepRecord),
            minof(FormatId)
        from lSKS_EFT_FileDetail
          join
            minOf(DealtCurrency),
            minOf(SKS_FXA_BuySell),
            minOf(SKS_FXA_CounterPartyAccount),
            sum(SKS_FXA_ContraAmount)
        from lSKS_FXA_Details
           join
             sum(amountcurdebit),
             minOf(AccountType),
             minOf(CurrencyCode)
         from
              lLedgerJournalTrans
           group by lSKS_FXA_Details.SKS_FXA_CounterPartyAccount, lSKS_FXA_Details.ValueDate, lLedgerJournalTrans.CurrencyCode, lSKS_FXA_Details.SKS_FXA_BuySell
          where lSKS_EFT_FileDetail.FileRecId == mSKS_EFTAP_File.RecId &&
                lSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::FXAllVendor &&
                lSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary &&
                lSKS_EFT_FileDetail.PaymentRejected == NoYes::No &&
                lSKS_EFT_FileDetail.PaymentLineRecId == lSKS_FXA_Details.LedgerJournalTransRecid &&
                lSKS_EFT_FileDetail.PaymentLineRecId == lLedgerJournalTrans.RecId
        {
            if(lSKS_FXA_Details.SKS_FXA_CounterPartyAccount == '')
            {
                ttsAbort;
                mReturnMsg = strFmt("@SKS3606", "@SKS3590");
                return false;
            }

            if(lSKS_FXA_Details.SKS_FXA_ContraAmount == 0)
            {
                ttsAbort;
                mReturnMsg = strFmt("@SKS3606", "@SKS3605");
                return false;
            }
            
            //<Issue21685>
            lBankAccCurrency = BankAccountTable::find(lSKS_EFT_FileDetail.BankAccountId).CurrencyCode;
            //</Issue21685>

            select firstOnly lSKS_FXA_CounterPartyTable
              where  lSKS_FXA_CounterPartyTable.CounterPartyID == lSKS_FXA_Details.SKS_FXA_CounterPartyAccount &&
                     lSKS_FXA_CounterPartyTable.CurrencyCode == lBankAccCurrency;//Issue21685

            if(!lSKS_FXA_CounterPartyTable)
            {
                ttsAbort;
                mReturnMsg = strFmt("@SKS3607", lSKS_FXA_Details.SKS_FXA_CounterPartyAccount, lBankAccCurrency);
                return false;
            }

            // File fields
            insSKS_EFT_FileDetail.FileRecId = mSKS_EFTAP_File.RecId;

            // LedgerJournalTrans fields
            insSKS_EFT_FileDetail.AccountType = lLedgerJournalTrans.AccountType;
            insSKS_EFT_FileDetail.PaymentCurrencyCode = strUpr(lLedgerJournalTrans.CurrencyCode);
            insSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur = lLedgerJournalTrans.amountcurdebit * -1;

            // FXAll detail fields
            insSKS_EFT_FileDetail.PaymentTransDate = lSKS_FXA_Details.ValueDate;
            insSKS_EFT_FileDetail.EffectiveDate = lSKS_FXA_Details.ValueDate;

            // Counterparty fields
            insSKS_EFT_FileDetail.AccountCompany = lSKS_FXA_CounterPartyTable.VendorCompany;
            insSKS_EFT_FileDetail.AccountNum = lSKS_FXA_CounterPartyTable.VendAccount;
            insSKS_EFT_FileDetail.DepBankAccountId = lSKS_FXA_CounterPartyTable.VendBankAccountId;

            // File detail fields
            insSKS_EFT_FileDetail.BankAccountId = lSKS_EFT_FileDetail.BankAccountId;
            insSKS_EFT_FileDetail.FormatId = lSKS_EFT_FileDetail.FormatId;
            insSKS_EFT_FileDetail.PaymMode = lSKS_EFT_FileDetail.PaymMode;
            insSKS_EFT_FileDetail.PaymSpec = lSKS_EFT_FileDetail.PaymSpec;
            insSKS_EFT_FileDetail.DepRecord = lSKS_EFT_FileDetail.DepRecord;

            insSKS_EFT_FileDetail.FileStatus = SKS_EFT_FileStatus::FileCreated;
            insSKS_EFT_FileDetail.RecordSummary = SKS_EFT_RecordSummary::Payment;
            insSKS_EFT_FileDetail.RecordSection = SKS_EFT_RecordSection::Payments;

            // Set Bank fields
            lSKS_EFT_Bank = SKS_EFT_Bank::find(insSKS_EFT_FileDetail.BankAccountId, insSKS_EFT_FileDetail.PaymMode);
            SKS_EFT_Processing::BuildBankFields(insSKS_EFT_FileDetail, lSKS_EFT_Bank);

            // Set vendor fields
            SKS_EFT_Processing::BuildVendorFields(insSKS_EFT_FileDetail, lLedgerJournalTrans);

            ttsBegin;
            insSKS_EFT_FileDetail.PaymentReference = NumberSeq::newGetNum(SKS_PP_Setup::numRefAPEFTPlusPaymentReferenceNumber()).num();
            ttsCommit;
            LocSKS_EFT_FileDetailRecordInsertList.add(insSKS_EFT_FileDetail);
        }
        LocSKS_EFT_FileDetailRecordInsertList.insertDatabase();
        ttsCommit;

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>CreateInvcFileDetail</Name>
				<Source><![CDATA[
    /// <summary>
    /// CreateInvcFileDetail
    /// </summary>
    /// <param name = "sks_eft_FilePmtSelection"></param>
    /// <param name = "ledgerJournalTrans"></param>
    /// <param name = "specTrans"></param>
    /// <param name = "_calledFromARValidation"></param>
    /// <param name = "_sks_eftap_file"></param>
    /// <returns></returns>
    public str CreateInvcFileDetail(SKS_EFT_FilePmtSelection sks_eft_FilePmtSelection,
        LedgerJournalTrans ledgerJournalTrans, SpecTrans specTrans, boolean _calledFromARValidation = false, SKS_EFTAP_File _sks_eftap_file = null) //SKS_Bug_11967
    {
        container virtualCompanyCompanies;
        CustTransOpen custTransOpen;
        CustTrans custTrans;
        SKS_EFT_FileDetail sks_eft_FileDetail;
        CustTable custTable;
        SKS_EFT_CustomerPaym sks_eft_customerpaym;
        CustBankAccount custBankAccount;
        BankAccountTable bankAccountTable;
        LedgerJournalAC accountNum;

        //FDD-10590 --->
        SKS_EFT_FileFormatPaymSpec          sks_eft_fileformatpaymspec;
        SKS_EFT_FileFormat                  sks_eft_fileformat;
        CompanyInfo                         companyInfo;
        //FDD-10590 --->

        virtualCompanyCompanies = CustVendOpenTransManager::findSharedServiceCompanies(curExt());


        if (specTrans.RefCompany != '' && specTrans.RefRecId != 0)
        {
            virtualCompanyCompanies = [specTrans.RefCompany];

            select firstOnly crosscompany:virtualCompanyCompanies custTransOpen
            where
                custTransOpen.RecId == specTrans.RefRecId
            join AmountCur, TransDate, CurrencyCode, DocumentDate, ExchRate, Invoice, Voucher, Txt, PaymId, RecId from custTrans
            where
                custTrans.RecId == custTransOpen.RefRecId;

            if(!custTransOpen)
            {
                warning(strFmt("@SKS:SKGVoucherInvoiceNotFound", ledgerJournalTrans.Voucher));
                return '';
            }
        }

        accountNum = SKS_EFT_Common::getAccountNum(ledgerJournalTrans.LedgerDimension);
        // Create file detail record
        sks_eft_FileDetail = null;
        //SKS_Bug_11967 -->
        if(_calledFromARValidation)
        {
            changecompany(ledgerJournalTrans.DataAreaId)
            {
                bankAccountTable = null;
                bankAccountTable = BankAccountTable::findByLedgerDimension(ledgerJournalTrans.OffsetLedgerDimension);
            }
            sks_eft_FileDetail.FileRecId = _sks_eftap_file.RecId;
            sks_eft_FileDetail.BankAccountId = bankAccountTable.AccountID;
            sks_eft_FileDetail.PaymentJournalNum = ledgerJournalTrans.JournalNum;
            sks_eft_FileDetail.PaymMode = ledgerJournalTrans.PaymMode;
            sks_eft_FileDetail.RecordType = SKS_EFT_RecordType::FieldValidations;
            sks_eft_FileDetail.RecordSection = SKS_EFT_RecordSection::EFTValidate;
            sks_eft_FileDetail.RecordSummary = SKS_EFT_RecordSummary::Invoice;
        }
        //SKS_Bug_11967 <--
        else
        {
            if(!msks_eftap_file)
            {
                select msks_eftap_file where msks_eftap_file.RecId == sks_eft_FilePmtSelection.FileRecId;
            }
            sks_eft_FileDetail.FileRecId = sks_eft_FilePmtSelection.FileRecId;
            sks_eft_FileDetail.BankAccountId = sks_eft_filepmtselection.PmtBankAccountId;
            sks_eft_FileDetail.PaymentJournalNum = sks_eft_filepmtselection.PmtJournalNum;
            sks_eft_FileDetail.PaymMode = sks_eft_filepmtselection.PaymMode;
            sks_eft_FileDetail.RecordType = SKS_EFT_RecordType::Invoice;
            sks_eft_FileDetail.RecordSection = SKS_EFT_RecordSection::Payments;
            sks_eft_FileDetail.RecordSummary = SKS_EFT_RecordSummary::Invoice;
        }
        sks_eft_FileDetail.PaymentRejected = NoYes::No;

        sks_eft_FileDetail.AccountNum = accountNum;
        sks_eft_FileDetail.AccountType = ledgerJournalTrans.AccountType;
        sks_eft_FileDetail.AccountCompany = ledgerJournalTrans.Company;

        sks_eft_FileDetail.EffectiveDate = msks_eftap_file.EffectiveDate;
        sks_eft_FileDetail.EFTAP_IHBBankAccount = ledgerJournalTrans.SKS_EFTAP_IHBBankAccount; // SKS 9615
        if(custTransOpen) // Invoice is marked to settle
        {
            if(sks_eft_FileDetail.RecordType != SKS_EFT_RecordType::FieldValidations)
            {
                if(mlastLedgerJournalTranRecId != ledgerJournalTrans.RecId)
                {
                    mManager = null;
                    mManager = SKS_EB_CustVendOpenTransManager::construct(ledgerJournalTrans);
                    mlastLedgerJournalTranRecId = ledgerJournalTrans.RecId;
                }
                sks_eft_FileDetail.InvoiceSettleAmountPmtCur = mManager.getSettleAmountPaymCur(custTransOpen);
                sks_eft_FileDetail.InvoiceDiscAmountCur = mManager.getCashDiscAmountToTake(custTransOpen);
                sks_eft_FileDetail.InvoiceDiscAmountPmtCur = mManager.getCashDiscAmountToTakePaymCur(custTransOpen);
                sks_eft_FileDetail.InvoiceSettleAmountCur = mManager.getSettleAmount(custTransOpen);
            }
            sks_eft_FileDetail.InvoiceCompany = specTrans.RefCompany;
            sks_eft_FileDetail.InvoiceOrigAmountCur = custTrans.AmountCur;
            sks_eft_FileDetail.PaymId = custTrans.PaymId;//SKS_Bug_11967

            if(!custTrans.DocumentDate)
            {
                sks_eft_FileDetail.InvoiceDate = custTrans.TransDate;
            }
            else
            {
                sks_eft_FileDetail.InvoiceDate = custTrans.DocumentDate;
            }

            sks_eft_FileDetail.InvoiceCurrencyCode = strUpr(custTrans.CurrencyCode);
            sks_eft_FileDetail.InvoiceExchRate = custTrans.ExchRate;
            sks_eft_FileDetail.InvoiceNumber = custTrans.Invoice;
            sks_eft_FileDetail.InvoiceVoucherNumber = custTrans.Voucher;
            sks_eft_FileDetail.InvoiceTransactionTxt = custTrans.Txt;
            sks_eft_FileDetail.VendTransRecId = custTrans.RecId;
        }
        else // No invoice marked on payment journal line
        {
            if(LedgerJournalTrans.AmountCurCredit != 0)
            {
                sks_eft_FileDetail.InvoiceSettleAmountPmtCur = LedgerJournalTrans.AmountCurCredit;
            }
            else
            {
                sks_eft_FileDetail.InvoiceSettleAmountPmtCur = LedgerJournalTrans.AmountCurDebit * -1;
            }
            sks_eft_FileDetail.InvoiceSettleAmountCur =  sks_eft_FileDetail.InvoiceSettleAmountPmtCur;
            sks_eft_FileDetail.InvoiceOrigAmountCur =  sks_eft_FileDetail.InvoiceSettleAmountPmtCur;
            sks_eft_FileDetail.InvoiceCurrencyCode = strUpr(LedgerJournalTrans.currencyCode);
        }

        sks_eft_FileDetail.PaymentCurrencyCode = strUpr(LedgerJournalTrans.currencyCode);
        sks_eft_FileDetail.PaymentTransDate = LedgerJournalTrans.TransDate;
        sks_eft_FileDetail.PaymentVoucher = LedgerJournalTrans.Voucher;
        sks_eft_FileDetail.PaymentLineRecId = LedgerJournalTrans.RecId;
        sks_eft_FileDetail.PaymentCompany = ledgerJournalTrans.company(); //FDD-10590
        sks_eft_FileDetail.DocumentNum = LedgerJournalTrans.DocumentNum; // SKS_FDD_10590
        sks_eft_FileDetail.PaymentNotes = LedgerJournalTrans.PaymentNotes;

        this.GetEFTFileFormat(ledgerJournalTrans.PaymMode, SKS_EFT_Module::AR);
        sks_eft_FileDetail.FormatId = msks_eft_FileFormat.FormatId;

        sks_eft_FileDetail.FileStatus = SKS_EFT_FileStatus::FileCreated;

        if(_calledFromARValidation)
        {
            if(msks_eftar_bank.BankAccountId != bankAccountTable.AccountID ||
            msks_eftar_bank.PaymMode != ledgerJournalTrans.PaymMode)
            {
                this.GetARBank(bankAccountTable.AccountID, ledgerJournalTrans.PaymMode);
            }
        }
        else
        {
            // SKS_EFT_ARBank fields
            if(msks_eftar_bank.BankAccountId != sks_eft_filepmtselection.PmtBankAccountId ||
            msks_eftar_bank.PaymMode != sks_eft_filepmtselection.PaymMode)
            {
                this.GetARBank(sks_eft_filepmtselection.PmtBankAccountId, sks_eft_filepmtselection.PaymMode);
            }
        }

        sks_eft_FileDetail.BankAcctType = msks_eftar_bank.AcctType;
        sks_eft_FileDetail.BankOrigDFI = msks_eftar_bank.ACHOrigDFI;

        sks_eft_FileDetail.FileACHImmDest = msks_eftar_bank.ACHImmDest;
        sks_eft_FileDetail.FileACHImmDestName = msks_eftar_bank.ACHImmDestName;
        sks_eft_FileDetail.FileACHImmOrigin = msks_eftar_bank.ACHImmOrig;
        sks_eft_FileDetail.FileACHImmOriginName = msks_eftar_bank.ACHImmOrigName;
        sks_eft_FileDetail.FileCrLf = msks_eftar_bank.FileCrLf;

        if(msks_eftar_bank.CompanyIDUnique)
        {
            switch(LedgerJournalTrans.PaymSpec)
            {
                case 'CCD':
                case 'CCD+':
                case 'ACH-CCD':
                case 'ACH-CCD+':
                    sks_eft_FileDetail.FileACHCompanyId = msks_eftar_bank.CompanyIDCCD;
                    sks_eft_FileDetail.FileACHCompanyName = msks_eftar_bank.CompanyNameCCD;
                    break;
                case 'PPD':
                case 'PPD+':
                case 'ACH-PPD':
                case 'ACH-PPD+':
                    sks_eft_FileDetail.FileACHCompanyId = msks_eftar_bank.CompanyIDPPD;
                    sks_eft_FileDetail.FileACHCompanyName = msks_eftar_bank.CompanyNamePPD;
                    break;
                default:
                    sks_eft_FileDetail.FileACHCompanyId = msks_eftar_bank.ACHCompanyID;//SKS_VSTS_14305
                    sks_eft_FileDetail.FileACHCompanyName = msks_eftar_bank.ACHCompanyName;//SKS_VSTS_14305
            }
        }
        else
        {
            sks_eft_FileDetail.FileACHCompanyId = msks_eftar_bank.ACHCompanyID;
            sks_eft_FileDetail.FileACHCompanyName = msks_eftar_bank.ACHCompanyName;
        }
        if(!_calledFromARValidation)
        {
            // BankAccountTable fields
            if(bankAccountTable.AccountID != sks_eft_filepmtselection.PmtBankAccountId)
            {
                bankAccountTable = BankAccountTable::findbycompany(sks_eft_filepmtselection.company(),sks_eft_filepmtselection.PmtBankAccountId);
            }
        }
        sks_eft_FileDetail.BankBankAcct = bankAccountTable.AccountNum;
        sks_eft_FileDetail.BankBankTransit = bankAccountTable.RegistrationNum;
        // SKS_FDD_10590 -->
        sks_eft_FileDetail.BankBankCodeType = bankAccountTable.BankCodeType;
        sks_eft_FileDetail.BankBankIBAN = bankAccountTable.IBAN;
        sks_eft_FileDetail.BankBankSwiftNo = bankAccountTable.SWIFTNo;
        sks_eft_FileDetail.BankBankSortCode = bankAccountTable.BankSortCode;
        // SKS_FDD_10590 <--
        sks_eft_FileDetail.CurrencyCode = bankAccountTable.CurrencyCode; //FDD-10590

        // Customer payment
        if(sks_eft_customerpaym.CustCompany!= ledgerJournalTrans.Company ||
            sks_eft_customerpaym.CustAccount != accountNum ||
            sks_eft_customerpaym.PaymMode != ledgerJournalTrans.PaymMode ||
            sks_eft_customerpaym.PaymSpec != ledgerJournalTrans.PaymSpec ||
            sks_eft_customerpaym.CustBankAccountId != ledgerJournalTrans.CustVendBankAccountId)
        {
            //sks_eft_customerpaym = SKS_EFT_CustomerPaym::find(ledgerJournalTrans.Company, accountNum, ledgerJournalTrans.PaymMode, ledgerJournalTrans.PaymSpec, ledgerJournalTrans.CustVendBankAccountId);
            sks_eft_customerpaym = SKS_EFT_CustomerPaym::findByCompany(ledgerJournalTrans.Company(),
                                                            ledgerJournalTrans.Company,
                                                            accountNum,
                                                            ledgerJournalTrans.PaymMode,
                                                            ledgerJournalTrans.PaymSpec,
                                                            ledgerJournalTrans.CustVendBankAccountId);
            if(!sks_eft_customerpaym)
            {
                return strFmt("@SKS1855",
                            accountNum, ledgerJournalTrans.Company, ledgerJournalTrans.PaymMode, ledgerJournalTrans.PaymSpec, ledgerJournalTrans.CustVendBankAccountId);
            }
            custTable = CustTable::findByCompany(ledgerJournalTrans.Company, accountNum);
            custBankAccount = CustBankAccount::findByCompany(ledgerJournalTrans.Company, accountNum, ledgerJournalTrans.CustVendBankAccountId);
        }

        sks_eft_FileDetail.PaymSpec = LedgerJournalTrans.PaymSpec;
        sks_eft_FileFormatPaymSpec = SKS_EFT_FileFormatPaymSpec::findByCompany(sks_eft_FileDetail.PaymentCompany ? sks_eft_FileDetail.PaymentCompany : sks_eft_FileDetail.DataAreaId,
                                                                               sks_eft_FileDetail.FormatId, sks_eft_FileDetail.PaymSpec);//SKS_FDD_10590


        if(sks_eft_fileformatpaymspec.RecordSummary == SKS_EFT_PaymSpecRecordSummary::Payment )
        {
            sks_eft_FileDetail.DepRecord = SKS_EFT_VendorRecordSummary::Payment;
        }
        else if(sks_eft_fileformatpaymspec.RecordSummary == SKS_EFT_PaymSpecRecordSummary::Invoice)
        {
            sks_eft_FileDetail.DepRecord = SKS_EFT_VendorRecordSummary::Invoice;
        }
        else
        {
            sks_eft_FileDetail.DepRecord = sks_eft_customerpaym.RecordSummary;
        }

        if(sks_eft_FileDetail.DepRecord == SKS_EFT_VendorRecordSummary::Invoice &&
            sks_eft_FileDetail.InvoiceSettleAmountPmtCur > 0 &&
            LedgerJournalTrans.PaymSpec == 'CCD+') //&&
            // sks_eft_customerpaym.ConvertCCDPtoCCD)
        {
            sks_eft_FileDetail.PaymSpec = 'CCD';
            sks_eft_FileDetail.DepRecord = SKS_EFT_VendorRecordSummary::Payment;
        }

        // sks_eft_FileDetail.DepEDIVersion = sks_eft_customerpaym.EDIVersion;
        // Vendor bank account
        sks_eft_FileDetail.DepBankAccountId = custBankAccount.AccountID;
        sks_eft_FileDetail.DepBankAcctType = custBankAccount.BankAccountType;
        sks_eft_FileDetail.DepBankAcct = custBankAccount.AccountNum;
        sks_eft_FileDetail.DepBankCodeType = custBankAccount.BankCodeType;
        sks_eft_FileDetail.DepBankIBAN = custBankAccount.BankIBAN;
        sks_eft_FileDetail.DepSwiftNo = custBankAccount.SWIFTNo;
        sks_eft_FileDetail.DepBankTransit = custBankAccount.RegistrationNum;
        sks_eft_FileDetail.DepPreNoteDate = custBankAccount.SKS_EFT_PreNoteDate;
        sks_eft_FileDetail.DepPreNoteStatus = SKS_EFT_Processing::GetPreNoteStatus(custBankAccount.SKS_EFT_PreNoteStatus, custBankAccount.SKS_EFT_PreNoteDate, msks_eftap_file.EffectiveDate);

        // Customer
        sks_eft_fileformat = SKS_EFT_FileFormat::findByCompany(sks_eft_FileDetail.PaymentCompany, sks_eft_FileDetail.FormatId);
        if(sks_eft_fileformat.FormatGroupCodeSource == SKS_EB_CodeSource::BankFabric)
        {
            if(sks_eft_fileformatpaymspec.DDNameType == SKS_EFT_DDNameType::AddressTypeDD)
            {
                LogisticsPostalAddress postalAddress;
                LogisticsLocation logisticsLocation;
                postalAddress = SKS_EFT_Processing::findPostalAddressLineByPartyLocationRole(custTable.Party, 'Direct Debit');
                if(!postalAddress)
                {
                    postalAddress = SKS_EFT_Processing::findPostalAddressLineByPartyLocationRole(custTable.Party, 'AREFT');
                }
                if(postalAddress)
                {
                    logisticsLocation = LogisticsLocation::find(postalAddress.Location);
                }

                sks_eft_FileDetail.AccountName = logisticsLocation.Description;
            }
            else if(sks_eft_fileformatpaymspec.DDNameType == SKS_EFT_DDNameType::PrimaryAddress)
            {
                DirPartyLocation        partyLocation;
                LogisticsLocation logisticsLocation;

                select firstonly Location, IsPrimary from partyLocation
                        order by partyLocation.IsPrimary desc
                        where partyLocation.Party == custTable.Party && partyLocation.IsPrimary;
                logisticsLocation = LogisticsLocation::find(partyLocation.Location);

                sks_eft_FileDetail.AccountName = logisticsLocation.Description;
            }
            else
            {
                sks_eft_FileDetail.AccountName = SKS_EFT_Common::getCustomerNameByParty(custTable.Party);
            }
        }
        else
        {
            sks_eft_FileDetail.AccountName = SKS_EFT_Common::getCustomerNameByParty(custTable.Party);
        }

        sks_eft_FileDetail.Module = SKS_EFT_Module::AR;

        //FDD-10590 --->
        sks_eft_FileDetail.PaymSpecName = sks_eft_FileFormatPaymSpec.ARPaymSpecName;
        sks_eft_FileDetail.TransactionCode = sks_eft_FileFormatPaymSpec.TransactionCode;
        sks_eft_FileDetail.UseCheckNumber = sks_eft_FileFormatPaymSpec.UseCheckNumber;

        select firstonly Tax1099RegNum, CoRegNum, Rfc_MX from companyInfo where companyInfo.DataArea == sks_eft_FileDetail.InvoiceCompany ;
        sks_eft_FileDetail.Tax1099RegNum = companyInfo.Tax1099RegNum;
        sks_eft_FileDetail.CoRegNum = companyInfo.CoRegNum;
        sks_eft_FileDetail.CompanyRfc_MX= companyInfo.Rfc_MX;
        // <--- FDD-10590

        sks_eft_FileDetail.insert();
        //SKS-Bug_11967 -->
        // for AR Validations we always need to call this method to populate values
        if(_calledFromARValidation)
        {
            SKS_EFT_Processing::BuildMultiCompFields(sks_eft_FileDetail, ledgerJournalTrans);
        }
        //SKS-Bug_11967 <--
        else
        {
            if(sks_eft_FileDetail.DepRecord == SKS_EFT_VendorRecordSummary::Invoice) //FDD-10590 --->
            {
                SKS_EFT_Processing::BuildMultiCompFields(sks_eft_FileDetail, ledgerJournalTrans);
            }
            //<--- FDD-10590
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>CreateMAL</Name>
				<Source><![CDATA[
    private boolean CreateMAL(PaymMode _vendPaymMode)
    {
        SKS_EFT_VendorPaym locSKS_EFT_VendorPaym;
        boolean recordCreated = false;
        while select  * from locSKS_EFT_VendorPaym
                where locSKS_EFT_VendorPaym.PaymMode == _vendPaymMode
                && (locSKS_EFT_VendorPaym.MALStatus == SKS_EFT_MALStatus::New //new
                ||  locSKS_EFT_VendorPaym.MALStatus == SKS_EFT_MALStatus::Update)//updated
        {

            this.InsertMALRecordAP(locSKS_EFT_VendorPaym);
            mNbrGoodRecs++;
        }

        if(mNbrGoodRecs > 0)
        {
            RecordCreated = true;
        }
        else
        {
            recordCreated = false;
        }

        return recordCreated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>CreatePreNoteCustomers</Name>
				<Source><![CDATA[
    private boolean CreatePreNoteCustomers(CompanyBankAccountId _bankAccountId, PaymMode _custPaymMode)
    {
        CustBankAccount custBankAccount;
        SKS_EFT_CustomerPaym sks_eft_CustPaym;
        SKS_LB_Depositor sks_lb_Depositor;
        CustPaymModeTable custPaymModeTable;
        CustPaymModeTable custPaymModeTableFormat;
        SKS_EFT_FileFormat sks_eft_FileFormat;
        SKS_EFT_FileFormatPaymSpec  sks_eft_fileformatpaymspec;
        container virtualCompanyCompanies, multiCompanies; //FDD-10590
        str retStr;
        boolean recordCreated = false;
        DataArea dataArea;
        DataAreaId conDataAreaId; //Bug-11864
        ;

        if(_bankAccountId == '' || _custPaymMode == '')
        {
            mReturnMsg = "@SKS1005";
        }
        select firstonly crossCompany:multicompaniesCon SKS_EFT_FormatId from custPaymModeTableFormat where custPaymModeTableFormat.PaymMode == _custPaymMode //FDD-10590
            exists join sks_eft_FileFormat where sks_eft_FileFormat.FormatId == custPaymModeTableFormat.SKS_EFT_FormatId && sks_eft_FileFormat.PreNote;

        // Make sure format requires pre notes
        //<Issue21808>
        //select sks_eft_FileFormat where sks_eft_FileFormat.FormatId == custPaymModeTableFormat.SKS_EFT_FormatId;
        //if(!sks_eft_FileFormat.PreNote)
        if(!custPaymModeTableFormat)
        //</Issue21808>
        {
            return false;
        }

        virtualCompanyCompanies = CustVendOpenTransManager::findSharedServiceCompanies(curExt());
        //FDD-10590 --->
        multiCompanies = SKS_EB_VirtualCompany::getDDMultiCompanies();
        if(multiCompanies != conNull())
        {
            for(int i = 1; i <= conLen(multiCompanies); i++)
            {
                conDataAreaId = conPeek(multiCompanies, i); //Bug-11864
                if (conFind(virtualCompanyCompanies,conDataAreaId) == 0)
                {
                    virtualCompanyCompanies = conIns(virtualCompanyCompanies, conLen(virtualCompanyCompanies)+1, conPeek(multiCompanies, i));
                }
            }
        }

        //<--- FDD-10590
        while select crossCompany:virtualCompanyCompanies
         minof(BankAccountType),
         minof(AccountNum),
         minof(RegistrationNum),
         minof(SKS_EFT_PreNoteDate),
         minof(SKS_EFT_PreNoteStatus)
         //minof(SKS_EFT_AcctStatus)
         from custBankAccount
         group by custBankAccount.CustAccount, custBankAccount.AccountID, custBankAccount.dataAreaId
          where custBankAccount.SKS_EFT_PreNoteStatus == SKS_EB_PreNoteStatus::New
        {
            select firstonly dataArea where
               dataArea.Id == custBankAccount.dataAreaId &&
               dataArea.isVirtual == 1;

            if(dataArea) // Customer bank account is virtualized
            {
                select firstonly crossCompany:multicompaniesCon sks_eft_CustPaym where //FDD-1059
                   sks_eft_CustPaym.CustAccount == custBankAccount.CustAccount &&
                   sks_eft_CustPaym.CustBankAccountId == custBankAccount.AccountID
                  join PaymMode, SKS_EFT_FormatId from custPaymModeTable where
                   custPaymModeTable.PaymMode == sks_eft_CustPaym.PaymMode
                  join FormatId from sks_eft_FileFormat where
                   sks_eft_FileFormat.FormatId == custPaymModeTable.SKS_EFT_FormatId &&
                   sks_eft_FileFormat.FormatId == custPaymModeTableFormat.SKS_EFT_FormatId
                  join sks_eft_fileformatpaymspec //Issue21808
                    where sks_eft_fileformatpaymspec.FormatId == sks_eft_CustPaym.FormatId
                        && sks_eft_fileformatpaymspec.PaymSpec == sks_eft_CustPaym.PaymSpec
                        && sks_eft_fileformatpaymspec.PreNote;
            }
            else
            {
                select firstonly crossCompany:multicompaniesCon sks_eft_CustPaym where //FDD-10590
                   sks_eft_CustPaym.dataAreaId == custBankAccount.dataAreaId && // include dataAreaId since not virtualized
                   sks_eft_CustPaym.CustAccount == custBankAccount.CustAccount &&
                   sks_eft_CustPaym.CustBankAccountId == custBankAccount.AccountID
                  join PaymMode, SKS_EFT_FormatId from custPaymModeTable where
                   custPaymModeTable.PaymMode == sks_eft_CustPaym.PaymMode
                  join FormatId from sks_eft_FileFormat where
                   sks_eft_FileFormat.FormatId == custPaymModeTable.SKS_EFT_FormatId &&
                   sks_eft_FileFormat.FormatId == custPaymModeTableFormat.SKS_EFT_FormatId
                  join sks_eft_fileformatpaymspec //Issue21808
                    where sks_eft_fileformatpaymspec.FormatId == sks_eft_CustPaym.FormatId
                        && sks_eft_fileformatpaymspec.PaymSpec == sks_eft_CustPaym.PaymSpec
                        && sks_eft_fileformatpaymspec.PreNote;
            }
            if(!sks_eft_CustPaym)
            {
                continue;
            }

            //SKS_VSTS_13134--->
            SKS_EFTAR_Bank locSKS_EFTAR_Bank;

            select firstonly crossCompany:multicompaniesCon locSKS_EFTAR_Bank where locSKS_EFTAR_Bank.PaymMode == sks_eft_CustPaym.PaymMode &&
                locSKS_EFTAR_Bank.DataAreaId == sks_eft_CustPaym.DataAreaId;

            //SKS_VSTS_13134<---

            sks_lb_Depositor = SKS_LB_Depositor::findByCompany(sks_eft_CustPaym.company(), sks_eft_CustPaym.CustCompany, sks_eft_CustPaym.CustAccount);
            retStr = this.ValidateCustomer(sks_lb_Depositor);
            if(retStr != '')
            {
                continue;
            }
            this.InsertPreNoteRecordAR(custBankAccount, sks_eft_CustPaym, sks_eft_FileFormat, locSKS_EFTAR_Bank.BankAccountId, locSKS_EFTAR_Bank.PaymMode, false, custBankAccount.DataAreaId);//Bug-11849
            recordCreated = true;
        }
        return recordCreated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>CreatePreNoteVendors</Name>
				<Source><![CDATA[
    private boolean CreatePreNoteVendors(CompanyBankAccountId _bankAccountId, PaymMode _vendPaymMode)
    {
        VendBankAccount vendBankAccount;
        SKS_EFT_VendorPaym sks_eft_VendorPaym;
        SKS_EB_Vendor sks_eb_vendor;
        VendPaymModeTable vendPaymModeTable;
        VendPaymModeTable vendPaymModeTableFormat;
        SKS_EFT_FileFormat sks_eft_FileFormat;
        SKS_EFT_FileFormatPaymSpec  sks_eft_fileformatpaymspec;
        container virtualCompanyCompanies, multiCompanies; //FDD-10590
        str retStr;
        boolean recordCreated = false;
        DataArea dataArea;
        DataAreaId conDataAreaId; //Bug-11864
        ;

        if(_bankAccountId == '' || _vendPaymMode == '')
        {
            mReturnMsg = "@SKS1005";
        }

        // <17256>
        select firstonly crossCompany:multicompaniesCon SKS_EFT_FormatId 
            from vendPaymModeTableFormat 
            where vendPaymModeTableFormat.PaymMode == _vendPaymMode //FDD-10590
                && vendPaymModeTableFormat.SKS_EFT_PaymMode == NoYes::Yes;
        
        changecompany(vendPaymModeTableFormat.DataAreaId)
        {
            select sks_eft_FileFormat 
                where sks_eft_FileFormat.FormatId == vendPaymModeTableFormat.SKS_EFT_FormatId;
        }
        // </17256>

        // Make sure format requires pre notes
        if(!sks_eft_FileFormat.PreNote)
        {
            return false;
        }

        virtualCompanyCompanies = CustVendOpenTransManager::findSharedServiceCompanies(curExt());
        //FDD-10590 --->
        multiCompanies = SKS_EB_VirtualCompany::getEFT_APMultiCompanies();
        if(multiCompanies != conNull())
        {
            for(int i = 1; i <= conLen(multiCompanies); i++)
            {
                conDataAreaId = conPeek(multiCompanies, i); //Bug-11864
                if (conFind(virtualCompanyCompanies,conDataAreaId) == 0)
                {
                    virtualCompanyCompanies = conIns(virtualCompanyCompanies, conLen(virtualCompanyCompanies)+1, conPeek(multiCompanies, i));
                }
            }
        }
        //<--- FDD-10590
        while select crossCompany:virtualCompanyCompanies
         minof(BankAccountType),
         minof(AccountNum),
         minof(RegistrationNum),
         minof(SKS_EFT_PreNoteDate),
         minof(SKS_EFT_PreNoteStatus),
         minof(SKS_EFT_AcctStatus)
         from vendBankAccount
         group by vendBankAccount.VendAccount, vendBankAccount.AccountID, vendBankAccount.dataAreaId
          where vendBankAccount.SKS_EFT_PreNoteStatus == SKS_EB_PreNoteStatus::New
        {
            select firstonly dataArea where
               dataArea.Id == vendBankAccount.dataAreaId &&
               dataArea.isVirtual == 1;

            if(dataArea) // Vendor bank account is virtualized
            {
                select firstonly crossCompany:multicompaniesCon sks_eft_VendorPaym where
                   sks_eft_VendorPaym.VendAccount == vendBankAccount.VendAccount &&
                   sks_eft_VendorPaym.VendBankAccountId == vendBankAccount.AccountID
                  join PaymMode, SKS_EFT_FormatId from vendPaymModeTable where
                   vendPaymModeTable.PaymMode == sks_eft_VendorPaym.PaymMode
                  join FormatId from sks_eft_FileFormat where
                   sks_eft_FileFormat.FormatId == vendPaymModeTable.SKS_EFT_FormatId &&
                   sks_eft_FileFormat.FormatId == vendPaymModeTableFormat.SKS_EFT_FormatId //FDD-10590
                    join sks_eft_fileformatpaymspec //Issue20468: To get the PaymSpec with PreNote = Yes
                        where sks_eft_fileformatpaymspec.FormatId == sks_eft_vendorpaym.FormatId
                            && sks_eft_fileformatpaymspec.PaymSpec == sks_eft_vendorpaym.PaymSpec
                            && sks_eft_fileformatpaymspec.PreNote;
            }
            else
            {
                select firstonly crossCompany:multicompaniesCon sks_eft_VendorPaym where
                   sks_eft_VendorPaym.VendCompany == vendBankAccount.dataAreaId && // include dataAreaId since not virtualized
                   sks_eft_VendorPaym.VendAccount == vendBankAccount.VendAccount &&
                   sks_eft_VendorPaym.VendBankAccountId == vendBankAccount.AccountID
                  join PaymMode, SKS_EFT_FormatId from vendPaymModeTable where
                   vendPaymModeTable.PaymMode == sks_eft_VendorPaym.PaymMode
                  join FormatId from sks_eft_FileFormat where
                   sks_eft_FileFormat.FormatId == vendPaymModeTable.SKS_EFT_FormatId &&
                   sks_eft_FileFormat.FormatId == vendPaymModeTableFormat.SKS_EFT_FormatId //FDD-10590
                    join sks_eft_fileformatpaymspec //Issue20468: To get the PaymSpec with PreNote = Yes
                        where sks_eft_fileformatpaymspec.FormatId == sks_eft_vendorpaym.FormatId
                            && sks_eft_fileformatpaymspec.PaymSpec == sks_eft_vendorpaym.PaymSpec
                            && sks_eft_fileformatpaymspec.PreNote;
            }
            if(!sks_eft_VendorPaym)
            {
                continue;
            }

            //SKS_VSTS_13134--->
            SKS_EFT_Bank locSKS_EFT_Bank;

            select firstonly crossCompany:multicompaniesCon locSKS_EFT_Bank where locSKS_EFT_Bank.PaymMode == sks_eft_VendorPaym.PaymMode &&
                locSKS_EFT_Bank.DataAreaId == sks_eft_VendorPaym.DataAreaId;

            //SKS_VSTS_13134<---

            sks_eb_vendor = sks_eb_vendor::findByCompany(sks_eft_VendorPaym.company(), sks_eft_VendorPaym.VendCompany, sks_eft_VendorPaym.VendAccount); //FDD-10590
            retStr = this.ValidateVendor(sks_eb_vendor, sks_eft_VendorPaym, vendBankAccount);
            if(retStr != '')
            {
                continue;
            }
            this.InsertPreNoteRecordAP(vendBankAccount, sks_eft_VendorPaym, sks_eft_FileFormat, locSKS_EFT_Bank.BankAccountId, locSKS_EFT_Bank.PaymMode, false, vendBankAccount.DataAreaId); //SKS_VSTS_13134
            recordCreated = true;
        }
        return recordCreated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>CreateTestCustomers</Name>
				<Source><![CDATA[
    private boolean CreateTestCustomers()
    {
        CustBankAccount custBankAccount;
        SKS_EFT_CustomerPaym sks_eft_CustomerPaym;
        SKS_LB_Depositor sks_lb_depositor;
        CustPaymModeTable custPaymModeTable;
        CustPaymModeTable custPaymModeTableFormat;
        SKS_EFT_FileFormat sks_eft_FileFormat;
        str retStr;
        int recCount;
        boolean recordCreated = false;
        ;

        this.GetARBank();

        select firstonly crossCompany:multicompaniesCon PaymMode from custPaymModeTableFormat where custPaymModeTableFormat.PaymMode == msks_eftar_bank.PaymMode;

        while select crossCompany:multicompaniesCon sks_eft_CustomerPaym
          order by sks_eft_CustomerPaym.CustCompany, sks_eft_CustomerPaym.CustAccount, sks_eft_CustomerPaym.CustBankAccountId where
          sks_eft_CustomerPaym.BankAccountId == msks_eftar_bank.BankAccountId
          join PaymMode, SKS_EFT_FormatId from custPaymModeTable where
           custPaymModeTable.PaymMode == sks_eft_CustomerPaym.PaymMode
          join FormatId from sks_eft_FileFormat where
           sks_eft_FileFormat.FormatId == custPaymModeTable.SKS_EFT_FormatId &&
           sks_eft_FileFormat.FormatId == custPaymModeTableFormat.SKS_EFT_FormatId
        {
            if(sks_eft_CustomerPaym.CustCompany == sks_lb_depositor.CustomerCompany && sks_eft_CustomerPaym.CustAccount == sks_lb_depositor.AccountNum)
            {
                continue; // Don't put duplicate customer in test file
            }
            custBankAccount = CustbankAccount::findByCompany(sks_eft_CustomerPaym.CustCompany, sks_eft_CustomerPaym.CustAccount,sks_eft_CustomerPaym.CustBankAccountId);
            sks_lb_depositor = sks_lb_depositor::findWithSetup(sks_eft_CustomerPaym.CustCompany, sks_eft_CustomerPaym.CustAccount);
            retStr = this.ValidateCustomer(sks_lb_depositor);
            if(retStr != '')
            {
                continue; // Skip if not valid
            }

            this.InsertPreNoteRecordAR(custBankAccount, sks_eft_CustomerPaym, sks_eft_FileFormat, msks_eftar_bank.BankAccountId, msks_eftar_bank.PaymMode, true);
            mNbrGoodRecs++;
            recordCreated = true;

            recCount++;
            if(recCount == 5) // Test file only includes 5 vendor records
            {
                break;
            }
        }
        return recordCreated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>CreateTestVendors</Name>
				<Source><![CDATA[
    private boolean CreateTestVendors()
    {
        VendBankAccount vendBankAccount;
        SKS_EFT_VendorPaym sks_eft_VendorPaym;
        SKS_EB_Vendor sks_eb_vendor;
        VendPaymModeTable vendPaymModeTable;
        VendPaymModeTable vendPaymModeTableFormat;
        SKS_EFT_FileFormat sks_eft_FileFormat;
        str retStr;
        int recCount;
        boolean recordCreated = false;
        ;

        this.GetAPBank();

        select firstonly crosscompany PaymMode from vendPaymModeTableFormat where vendPaymModeTableFormat.PaymMode == msks_eft_bank.PaymMode;//FDD-10590

        while select crosscompany sks_eft_VendorPaym
          order by sks_eft_VendorPaym.VendCompany, sks_eft_VendorPaym.VendAccount, sks_eft_VendorPaym.VendBankAccountId where
          sks_eft_VendorPaym.BankAccountId == msks_eft_bank.BankAccountId
          join PaymMode, SKS_EFT_FormatId from vendPaymModeTable where
           vendPaymModeTable.PaymMode == sks_eft_VendorPaym.PaymMode
          join FormatId from sks_eft_FileFormat where
           sks_eft_FileFormat.FormatId == vendPaymModeTable.SKS_EFT_FormatId &&
           sks_eft_FileFormat.FormatId == vendPaymModeTableFormat.SKS_EFT_FormatId
        {
            if(sks_eft_VendorPaym.VendCompany == sks_eb_vendor.VendCompany && sks_eft_VendorPaym.VendAccount == sks_eb_vendor.VendAccount)
            {
                continue; // Don't put duplicate vendor in test file
            }
            vendBankAccount = VendbankAccount::findByCompany(sks_eft_VendorPaym.VendCompany, sks_eft_VendorPaym.VendAccount,sks_eft_VendorPaym.VendBankAccountId);
            sks_eb_vendor = sks_eb_vendor::find(sks_eft_VendorPaym.VendCompany, sks_eft_VendorPaym.VendAccount);
            retStr = this.ValidateVendor(sks_eb_vendor, sks_eft_VendorPaym, vendBankAccount);
            if(retStr != '')
            {
                continue; // Skip if not valid
            }

            this.InsertPreNoteRecordAP(vendBankAccount, sks_eft_VendorPaym, sks_eft_FileFormat, msks_eft_bank.BankAccountId, msks_eft_bank.PaymMode, true);
            mNbrGoodRecs++;
            recordCreated = true;

            recCount++;
            if(recCount == 5) // Test file only includes 5 vendor records
            {
                break;
            }
        }
        return recordCreated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>CreateVchFileDetail</Name>
				<Source><![CDATA[
    public str CreateVchFileDetail(SKS_EFT_FilePmtSelection sks_eft_FilePmtSelection, LedgerJournalTrans ledgerJournalTrans, SpecTrans specTrans,
                                    boolean _calledFromAP = false, SKS_EFTAP_File _sks_eftap_file = null, boolean _seperateRemitDetail = false, boolean _calledFromRemiDetails = false) //Bug-11967
    {
        container virtualCompanyCompanies;
        VendTransOpen vendTransOpen;
        VendTrans vendTrans;
        SKS_EFT_FileDetail sks_eft_FileDetail;
        TaxWithholdTrans lTaxWithholdTrans;

        LedgerJournalAC accountNum;
        Classid locClassid;

        //9785 SKS pmt upd
        VendInvoiceJour  vendInvoiceJour;
        Container        companyInfo;

        //FDD-10590 --->
        ReasonTableRef          reasonTableRef;
        vendInvoiceInfoTable    vendInvoiceInfoTable;
        VendTable               vendTable;
        //<--- FDD-10590
        BankAccountTable        bankAccountTable; //Bug-11967
        ;

        sks_eft_IsPaymentUpload = ledgerJournalTrans.SKS_EFT_IsPaymentUpload;

        if(!msks_eftap_file)
        {
            select msks_eftap_file
                where msks_eftap_file.RecId == sks_eft_FilePmtSelection.FileRecId
                join msks_eft_FileFormat
                    where msks_eft_FileFormat.FormatId == msks_eftap_file.FormatId;
        }

        if(!specTrans && sks_eft_IsPaymentUpload)
        {
            this.CreateVchUpdFileDetail(sks_eft_FilePmtSelection,ledgerJournalTrans);
        }
        else
        {
            if (specTrans.RefCompany != '' && specTrans.RefRecId != 0)
            {
                virtualCompanyCompanies = [specTrans.RefCompany];

                select firstOnly crosscompany:virtualCompanycompanies vendTransOpen
                    where
                        vendTransOpen.RecId == specTrans.RefRecId
                    join AmountCur, TransDate, CurrencyCode, ExchRate, Invoice, Voucher, Txt, DocumentDate, PaymId, RecId from vendTrans
                    where
                        vendTrans.RecId == vendTransOpen.RefRecId;

                if(!vendTransOpen)
                {
                    warning(strFmt("@SKS:SKGVoucherInvoiceNotFound", ledgerJournalTrans.Voucher));
                    return ''; 
                }
            }

            accountNum = SKS_EFT_Common::getAccountNum(ledgerJournalTrans.LedgerDimension);

            // Create file detail record
            sks_eft_FileDetail = null;
            if(_calledFromAP) //Bug-11967 --->
            {
                sks_eft_FileDetail.RecordType = SKS_EFT_RecordType::FieldValidations;
                sks_eft_FileDetail.FileRecId = _sks_eftap_file.RecId;
                sks_eft_FileDetail.PaymentJournalNum = ledgerJournalTrans.JournalNum;
                sks_eft_FileDetail.PaymMode = ledgerJournalTrans.PaymMode;
            }
            else //<--- Bug-11967
            {
                sks_eft_FileDetail.RecordType = SKS_EFT_RecordType::Invoice;
                sks_eft_FileDetail.FileRecId = sks_eft_FilePmtSelection.FileRecId;
                sks_eft_FileDetail.PmtSelectionRecId = sks_eft_FilePmtSelection.RecId;
                sks_eft_FileDetail.PaymentJournalNum = sks_eft_filepmtselection.PmtJournalNum;
                sks_eft_FileDetail.PaymMode = sks_eft_filepmtselection.PaymMode;
            }
            sks_eft_FileDetail.PaymentRejected = NoYes::No;

            sks_eft_FileDetail.AccountNum = accountNum;
            sks_eft_FileDetail.AccountType = ledgerJournalTrans.AccountType;
            sks_eft_FileDetail.AccountCompany = ledgerJournalTrans.Company;
            sks_eft_FileDetail.LedgerTrans_PaymId = ledgerJournalTrans.PaymId;//SKS_FDD_10590
            sks_eft_FileDetail.EFTAP_IHBBankAccount = ledgerJournalTrans.SKS_EFTAP_IHBBankAccount; // SKS 9615

            // For FXAll always use the payment journal transaction date
            if(sks_eft_FileDetail.RecordType != SKS_EFT_RecordType::FieldValidations) //Bug-11967
            {
                if(msks_eftap_file.FXAProcessing)
                {
                    sks_eft_FileDetail.EffectiveDate = ledgerJournalTrans.TransDate;
                }
                //for any effective date method EXCEPT FormatOffset, use the ledgerjournaltrans.trans#date
                else if(msks_eft_FileFormat.EffectiveDateMethod == SKS_EFT_EffectiveDateMethod::PaymentJournalPostingDate)
                {
                    sks_eft_FileDetail.EffectiveDate = ledgerJournalTrans.TransDate;
                }
                else if(msks_eft_FileFormat.EffectiveDateMethod == SKS_EFT_EffectiveDateMethod::FormatOffset ||
                    (msks_eft_FileFormat.EffectiveDateMethod == SKS_EFT_EffectiveDateMethod::PaymSpecOffset && msks_eft_FileFormat.SupportsMultipleEffectiveDates == NoYes::No))
                {
                    sks_eft_FileDetail.EffectiveDate = msks_eftap_file.EffectiveDate;
                }
                else
                {
                    sks_eft_FileDetail.EffectiveDate = sks_eft_filepmtselection.EffectiveDate;
                }
            }

            if(vendTransOpen) // Invoice is marked to settle
            {
                if(sks_eft_FileDetail.RecordType != SKS_EFT_RecordType::FieldValidations) 
                {
                    if(mlastLedgerJournalTranRecId != ledgerJournalTrans.RecId)
                    {
                        mManager = null;
                        mManager = SKS_EB_CustVendOpenTransManager::construct(ledgerJournalTrans);
                        mlastLedgerJournalTranRecId = ledgerJournalTrans.RecId;
                    }
                    select crosscompany sum(InvoiceTaxWithholdAmount), sum(PaymTaxWithholdAmount) from lTaxWithholdTrans where lTaxWithholdTrans.VendTransInvoiceId == vendTrans.RecId && lTaxWithholdTrans.JournalNum == ledgerJournalTrans.JournalNum;//SKS#DevOps:15119
                    sks_eft_FileDetail.InvoiceSettleAmountPmtCur = mManager.getSettleAmountPaymCur(vendTransOpen) + lTaxWithholdTrans.PaymTaxWithholdAmount;
                    sks_eft_FileDetail.InvoiceDiscAmountCur = mManager.getCashDiscAmountToTake(vendTransOpen);
                    sks_eft_FileDetail.InvoiceDiscAmountPmtCur = mManager.getCashDiscAmountToTakePaymCur(vendTransOpen);
                    sks_eft_FileDetail.InvoiceSettleAmountCur = mManager.getSettleAmount(vendTransOpen) + lTaxWithholdTrans.InvoiceTaxWithholdAmount;
                }
                sks_eft_FileDetail.InvoiceCompany = specTrans.RefCompany;
                sks_eft_FileDetail.InvoiceOrigAmountCur = VendTrans.AmountCur;

                if(!VendTrans.DocumentDate)
                {
                    sks_eft_FileDetail.InvoiceDate = VendTrans.TransDate;
                }
                else
                {
                    sks_eft_FileDetail.InvoiceDate = VendTrans.DocumentDate;
                }

                sks_eft_FileDetail.InvoiceCurrencyCode = strUpr(VendTrans.CurrencyCode);
                sks_eft_FileDetail.InvoiceExchRate = VendTrans.ExchRate;
                sks_eft_FileDetail.InvoiceNumber = VendTrans.Invoice;
                sks_eft_FileDetail.InvoiceVoucherNumber = VendTrans.Voucher;
                sks_eft_FileDetail.InvoiceTransactionTxt = VendTrans.Txt;
                sks_eft_FileDetail.PaymId = VendTrans.PaymId;
                sks_eft_FileDetail.VendTransRecId = VendTrans.RecId;

                //9785 sks pmt upd start
                if(sks_eft_FileDetail.InvoiceCompany != '')
                {
                    companyInfo += sks_eft_FileDetail.InvoiceCompany;

                    select firstOnly crossCompany:companyInfo PurchId, InvoiceAccount, InvoiceDate, InvoiceId, Description
                    from  vendInvoiceJour
                        where vendInvoiceJour.InvoiceAccount    ==  sks_eft_FileDetail.AccountNum &&
                                vendInvoiceJour.InvoiceDate       ==  sks_eft_FileDetail.InvoiceDate &&
                                vendInvoiceJour.InvoiceId         ==  sks_eft_FileDetail.InvoiceNumber &&
                                vendInvoiceJour.PurchId           !=  '';

                    if(vendInvoiceJour)
                    {
                        sks_eft_FileDetail.PurchId = vendInvoiceJour.PurchId;

                        if(!sks_eft_FileDetail.InvoiceTransactionTxt)
                        {
                            sks_eft_FileDetail.InvoiceTransactionTxt = vendInvoiceJour.Description;
                        }

                        //SKS_FDD_10590 -->
                        select firstOnly crossCompany:companyInfo vendInvoiceInfoTable where
                            vendInvoiceInfoTable.InvoiceAccount == sks_eft_FileDetail.AccountNum &&
                            vendInvoiceInfoTable.Num == sks_eft_FileDetail.InvoiceNumber &&
                            vendInvoiceInfoTable.PurchId == vendInvoiceJour.PurchId &&
                            vendInvoiceInfoTable.PurchAgreementHeader_PSN != 0;

                        if(vendInvoiceInfoTable)
                        {
                            sks_eft_FileDetail.PurchNumberSequence = PurchAgreementHeader::find(vendInvoiceInfoTable.PurchAgreementHeader_PSN).PurchNumberSequence;
                        }
                        //SKS_FDD_10590 <--
                    }
                }
                //9785 sks pmt upd end

            }
            else // No invoice marked on payment journal line
            {
                if(LedgerJournalTrans.AmountCurCredit != 0)
                {
                    sks_eft_FileDetail.InvoiceSettleAmountPmtCur = LedgerJournalTrans.AmountCurCredit;
                }
                else
                {
                    sks_eft_FileDetail.InvoiceSettleAmountPmtCur = LedgerJournalTrans.AmountCurDebit * -1;
                }
                sks_eft_FileDetail.InvoiceSettleAmountCur =  sks_eft_FileDetail.InvoiceSettleAmountPmtCur;
                sks_eft_FileDetail.InvoiceOrigAmountCur =  sks_eft_FileDetail.InvoiceSettleAmountPmtCur;
                sks_eft_FileDetail.InvoiceCurrencyCode = strUpr(LedgerJournalTrans.currencyCode);
            }


            sks_eft_FileDetail.PaymentCurrencyCode = strUpr(LedgerJournalTrans.currencyCode);
            sks_eft_FileDetail.PaymentTransDate = LedgerJournalTrans.TransDate;
            sks_eft_FileDetail.PaymentVoucher = LedgerJournalTrans.Voucher;
            sks_eft_FileDetail.PaymSpec = LedgerJournalTrans.PaymSpec;
            //SKS_FDD_10590 -->
            sks_eft_FileDetail.DocumentNum = LedgerJournalTrans.DocumentNum;
            sks_eft_FileDetail.PaymentNotes = LedgerJournalTrans.PaymentNotes;

            //SKS_DevOps-17491 -->
            changecompany(LedgerJournalTrans.Company)
            {
                vendTable = null;
                vendTable = VendTable::findByLedgerDimension(LedgerJournalTrans.LedgerDimension);
            }
            sks_eft_FileDetail.Rfc_MX = vendTable.Rfc_MX;
            //SKS_DevOps-17491 <--

            //SKS_FDD_10590 <--
            sks_eft_FileDetail.PaymentLineRecId = LedgerJournalTrans.RecId;
            sks_eft_FileDetail.PaymentCompany = ledgerJournalTrans.company(); //FDD-10590

            locClassid = classIdGet(this);
            if(sks_eft_FileDetail.RecordType != SKS_EFT_RecordType::FieldValidations) //Bug-11967
            {
                if(strUpr(classId2Name(locClassid)) == strUpr('SKS_FXA_PROCESSING'))
                {
                    sks_eft_FileDetail.RecordSection = SKS_EFT_RecordSection::FXAllVendor;
                }
                else
                {
                    sks_eft_FileDetail.RecordSection = SKS_EFT_RecordSection::Payments;
                }
            }
            else //Bug-11967 --->
            {
                sks_eft_FileDetail.RecordSection = SKS_EFT_RecordSection::EFTValidate;
            }
            //<--- Bug-11967
            sks_eft_FileDetail.RecordSummary = SKS_EFT_RecordSummary::Invoice;

            //SKS_FDD_21456--->
            if(_seperateRemitDetail)
            {
                sks_eft_FileDetail.NeedsRebuilt = NoYes::Yes;
            }
            //SKS_FDD_21456<---

            if(sks_eft_FileDetail.RecordType != SKS_EFT_RecordType::FieldValidations) //Bug-11967
            {
                this.GetEFTFileFormat(ledgerJournalTrans.PaymMode, SKS_EFT_Module::AP);
                sks_eft_FileDetail.FormatId = msks_eft_FileFormat.FormatId;
            }
            else //Bug-11967 --->
            {
                sks_eft_FileDetail.FormatId = VendPaymModeTable::find(ledgerJournalTrans.paymMode).SKS_EFT_FormatId;
            }
            //<--- Bug-11967

            sks_eft_FileDetail.FileStatus = SKS_EFT_FileStatus::FileCreated;

            // Set Bank fields
            changecompany(ledgerJournalTrans.DataAreaId)
            {
                bankAccountTable = null;
                bankAccountTable = BankAccountTable::findByLedgerDimension(ledgerJournalTrans.OffsetLedgerDimension);
            }

            if(sks_eft_FileDetail.RecordType != SKS_EFT_RecordType::FieldValidations) //Bug-11967
            {
                this.GetAPBank(sks_eft_filepmtselection.PmtBankAccountId, sks_eft_filepmtselection.PaymMode, sks_eft_filepmtselection.company()); //FDD-10590
            }
            else //Bug-11967 --->
            {
                this.GetAPBank(bankAccountTable.AccountID, ledgerJournalTrans.PaymMode, ledgerJournalTrans.DataAreaId);
            }
            //<--- Bug-11967
            SKS_EFT_Processing::BuildBankFields(sks_eft_FileDetail, msks_eft_bank, ledgerJournalTrans.DataAreaId, bankAccountTable);

            // Set vendor fields
            sks_eft_FileDetail.DepBankAccountId = LedgerJournalTrans.CustVendBankAccountId;
            SKS_EFT_Processing::BuildVendorFields(sks_eft_FileDetail, ledgerJournalTrans);

            //FDD-10590 --->
            if(sks_eft_FileDetail.VendTransRecId)
            {
                changeCompany(sks_eft_FileDetail.InvoiceCompany)
                {
                    select firstonly vendTrans
                        where vendTrans.RecId == sks_eft_FileDetail.VendTransRecId;

                    if(vendTrans && vendTrans.ReasonRefRecId != 0)
                    {
                        reasonTableRef = ReasonTableRef::find(vendTrans.ReasonRefRecID);
                    }
                }
                sks_eft_FileDetail.InvoiceDocumentNum = vendTrans.DocumentNum;
                sks_eft_FileDetail.InvoiceReason = reasonTableRef.Reason;
                sks_eft_FileDetail.InvoiceReasonComment = reasonTableRef.ReasonComment;
            }
            //<--- FDD-10590

            sks_eft_FileDetail.insert();

            if(!_calledFromRemiDetails) //SKS_FDD_21456
            {
                if((SKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::EFTValidate && SKS_EFT_FileDetail.DepRecord == SKS_EFT_VendorRecordSummary::Invoice)
                    || SKS_EFT_FileDetail.RecordSection != SKS_EFT_RecordSection::EFTValidate)
                {
                    SKS_EFT_Processing::BuildUploadVendorFields(SKS_EFT_FileDetail, ledgerJournalTrans);
                    SKS_EFT_Processing::BuildMultiCompFields(SKS_EFT_FileDetail,ledgerJournalTrans);  //FDD-10590
                    SKS_EFT_Processing::BuildAddendaCustom(SKS_EFT_FileDetail); //FDD-10590
                }
            }
        }
        return '';

    }

]]></Source>
			</Method>
			<Method>
				<Name>CreateVchUpdFileDetail</Name>
				<Source><![CDATA[
    //9785 sks pmt upd
    public str CreateVchUpdFileDetail(SKS_EFT_FilePmtSelection sks_eft_FilePmtSelection, LedgerJournalTrans ledgerJournalTrans)
    {
        container virtualCompanyCompanies;
        SKS_EFT_FileDetail  sks_eft_FileDetail;
        LedgerJournalAC     accountNum;
        Classid             locClassid;
        SKS_UPLD_INV        sks_upld_INV;
        SKS_UPLD_PMT        sks_upld_PMT;
        ;

        if(!msks_eftap_file)
        {
            select msks_eftap_file
                where msks_eftap_file.RecId == sks_eft_FilePmtSelection.FileRecId
                join msks_eft_FileFormat
                    where msks_eft_FileFormat.FormatId == msks_eftap_file.FormatId;
        }

        while select * from sks_upld_INV where sks_upld_INV.RefRecId == ledgerJournalTrans.RecId
        {
            virtualCompanyCompanies = CustVendOpenTransManager::findSharedServiceCompanies(curExt());

            sks_upld_PMT = SKS_UPLD_PMT::findRefRecId(ledgerJournalTrans.RecId);

            if(sks_upld_PMT)
            {
                accountNum = sks_upld_PMT.AccountNum;
            }

            // Create file detail record
            sks_eft_FileDetail = null;

            sks_eft_FileDetail.FileRecId = sks_eft_FilePmtSelection.FileRecId;
            sks_eft_FileDetail.PmtSelectionRecId = sks_eft_FilePmtSelection.RecId;
            sks_eft_FileDetail.PaymentRejected = NoYes::No;

            sks_eft_FileDetail.AccountNum = accountNum;
            sks_eft_FileDetail.AccountType = ledgerJournalTrans.AccountType;
            sks_eft_FileDetail.AccountCompany = ledgerJournalTrans.Company;

            sks_eft_FileDetail.BankAccountId = sks_eft_filepmtselection.PmtBankAccountId;
            sks_eft_FileDetail.EFTAP_IHBBankAccount = ledgerJournalTrans.SKS_EFTAP_IHBBankAccount; // SKS 9615

            // For FXAll always use the payment journal transaction date
            if(msks_eftap_file.FXAProcessing)
            {
                sks_eft_FileDetail.EffectiveDate = ledgerJournalTrans.TransDate;
            }
            //for any effective date method EXCEPT FormatOffset, use the ledgerjournaltrans.trans#date
            else if(msks_eft_FileFormat.EffectiveDateMethod == SKS_EFT_EffectiveDateMethod::PaymentJournalPostingDate)
            {
                sks_eft_FileDetail.EffectiveDate = ledgerJournalTrans.TransDate;
            }
            else if(msks_eft_FileFormat.EffectiveDateMethod == SKS_EFT_EffectiveDateMethod::FormatOffset)
            {
                sks_eft_FileDetail.EffectiveDate = msks_eftap_file.EffectiveDate;
            }
            else if(msks_eft_FileFormat.EffectiveDateMethod == SKS_EFT_EffectiveDateMethod::PaymSpecOffset && msks_eft_FileFormat.SupportsMultipleEffectiveDates == NoYes::No)
            {
                sks_eft_FileDetail.EffectiveDate = msks_eftap_file.EffectiveDate;
            }
            else
            {
                sks_eft_FileDetail.EffectiveDate = sks_eft_filepmtselection.EffectiveDate;
            }

            if(sks_upld_INV) // Invoice
            {
                if(mlastLedgerJournalTranRecId != ledgerJournalTrans.RecId)
                {
                    mManager = null;
                    mManager = SKS_EB_CustVendOpenTransManager::construct(ledgerJournalTrans);
                    mlastLedgerJournalTranRecId = ledgerJournalTrans.RecId;
                }
                sks_eft_FileDetail.InvoiceCompany = ledgerJournalTrans.Company;
                sks_eft_FileDetail.InvoiceOrigAmountCur = sks_upld_INV.InvoiceAmount;
                sks_eft_FileDetail.InvoiceSettleAmountPmtCur =sks_upld_INV.SettleAmount * -1;
                sks_eft_FileDetail.InvoiceDiscAmountCur = sks_upld_INV.DiscAmount;
                sks_eft_FileDetail.InvoiceDiscAmountPmtCur = sks_upld_INV.DiscAmount;
                sks_eft_FileDetail.InvoiceSettleAmountCur =sks_upld_INV.SettleAmount * -1;

                sks_eft_FileDetail.InvoiceNumber = sks_upld_INV.Invoice;
                sks_eft_FileDetail.InvoiceDate = sks_upld_INV.TransDate;

                sks_eft_FileDetail.InvoiceCurrencyCode = sks_upld_INV.CurrencyCode;
                sks_eft_FileDetail.InvoiceNumber = sks_upld_INV.Invoice;
                sks_eft_FileDetail.InvoiceVoucherNumber = ledgerJournalTrans.Voucher;
                sks_eft_FileDetail.InvoiceTransactionTxt = sks_upld_INV.Txt;
                sks_eft_FileDetail.PaymId = sks_upld_INV.PaymId;
                sks_eft_FileDetail.VendTransRecId = sks_upld_PMT.RecId;
            }
            else // No invoice on payment journal line
            {
                if(LedgerJournalTrans.AmountCurCredit != 0)
                {
                    sks_eft_FileDetail.InvoiceSettleAmountPmtCur = LedgerJournalTrans.AmountCurCredit;
                }
                else
                {
                    sks_eft_FileDetail.InvoiceSettleAmountPmtCur = LedgerJournalTrans.AmountCurDebit * -1;
                }
                sks_eft_FileDetail.InvoiceSettleAmountCur =  sks_eft_FileDetail.InvoiceSettleAmountPmtCur;
                sks_eft_FileDetail.InvoiceOrigAmountCur =  sks_eft_FileDetail.InvoiceSettleAmountPmtCur;
                sks_eft_FileDetail.InvoiceCurrencyCode = strUpr(LedgerJournalTrans.currencyCode);
            }

            sks_eft_FileDetail.PaymentCurrencyCode = strUpr(LedgerJournalTrans.currencyCode);
            sks_eft_FileDetail.PaymentTransDate = LedgerJournalTrans.TransDate;
            sks_eft_FileDetail.PaymentJournalNum = sks_eft_filepmtselection.PmtJournalNum;
            sks_eft_FileDetail.PaymentVoucher = LedgerJournalTrans.Voucher;
            sks_eft_FileDetail.PaymMode = sks_eft_filepmtselection.PaymMode;
            sks_eft_FileDetail.PaymSpec = LedgerJournalTrans.PaymSpec;
            sks_eft_FileDetail.PaymentLineRecId = LedgerJournalTrans.RecId;
            sks_eft_FileDetail.PaymentNotes = LedgerJournalTrans.PaymentNotes;

            locClassid = classIdGet(this);
            if(strUpr(classId2Name(locClassid)) == strUpr('SKS_FXA_PROCESSING'))
            {
                sks_eft_FileDetail.RecordSection = SKS_EFT_RecordSection::FXAllVendor;
            }
            else
            {
                sks_eft_FileDetail.RecordSection = SKS_EFT_RecordSection::Payments;
            }
            sks_eft_FileDetail.RecordSummary = SKS_EFT_RecordSummary::Invoice;
            sks_eft_FileDetail.RecordType = SKS_EFT_RecordType::Invoice;

            this.GetEFTFileFormat(ledgerJournalTrans.PaymMode, SKS_EFT_Module::AP);
            sks_eft_FileDetail.FormatId = msks_eft_FileFormat.FormatId;

            sks_eft_FileDetail.FileStatus = SKS_EFT_FileStatus::FileCreated;

            // Set Bank fields
            this.GetAPBank(sks_eft_filepmtselection.PmtBankAccountId, sks_eft_filepmtselection.PaymMode);
            SKS_EFT_Processing::BuildBankFields(sks_eft_FileDetail, msks_eft_bank);

            // Set vendor fields
            sks_eft_FileDetail.DepBankAccountId = LedgerJournalTrans.CustVendBankAccountId;
            SKS_EFT_Processing::BuildVendorFields(sks_eft_FileDetail, ledgerJournalTrans);

            sks_eft_FileDetail.insert();

            SKS_EFT_Processing::BuildUploadVendorFields(SKS_EFT_FileDetail, ledgerJournalTrans);
            SKS_EFT_Processing::BuildMultiCompFields(SKS_EFT_FileDetail,ledgerJournalTrans);//FDD-10590
        }
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>Delete_Exit</Name>
				<Source><![CDATA[
    void Delete_Exit(SKS_EFT_Module  _module, boolean _CommSuccess)
    {
        ;
        ttsbegin;
        if(_CommSuccess)
        {
            this.Update_SKS_EFTAP_File_FileStatus(SKS_EFT_FileStatus::Transmitted, _module);
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetAPBank</Name>
				<Source><![CDATA[
    protected void GetAPBank(BankAccountId _bankAccountId = '', PaymMode _paymMode = '', CompanyId _company = curExt())
    {
        SKS_EFT_FilePmtSelection sks_eft_filePmtSelection;
        ;

        if(msks_eftap_file.JournalOption == SKS_EFT_FileJournalOption::MasterAccountList && msks_eft_bank)
        {
            return;
        }

        if(_bankAccountId != '' && _paymMode != '')
        {
            if(msks_eft_Bank.BankAccountId != _bankAccountId || msks_eft_Bank.PaymMode != _paymMode || msks_eft_Bank.DataAreaId != _company)//SKS_Bug_12510
            {
                msks_eft_Bank = SKS_EFT_Bank::findByCompany(_company, _bankAccountId, _paymMode); // SKS_FDD_10590
            }
        }
        else if(msks_eftap_file.JournalOption == SKS_EFT_FileJournalOption::PreNotesOnly)
        {
            if(msks_eft_Bank.BankAccountId != msks_eftap_file.PreNoteOnlyBankAccountId || msks_eft_Bank.PaymMode != msks_eftap_file.PreNotesOnlyPaymMode)
            {
                msks_eft_Bank = SKS_EFT_Bank::findByCompany(_company, msks_eftap_file.PreNoteOnlyBankAccountId, msks_eftap_file.PreNotesOnlyPaymMode); // SKS_FDD_10590
            }
        }
        else
        {
            select firstonly PmtBankAccountId,PaymMode, Company from sks_eft_filePmtSelection // SKS_FDD_10590
                where sks_eft_filePmtSelection.FileRecId == msks_eftap_file.RecId;
            if(msks_eft_Bank.BankAccountId != sks_eft_filePmtSelection.PmtBankAccountId || msks_eft_Bank.PaymMode != sks_eft_filePmtSelection.PaymMode)
            {
                msks_eft_Bank = SKS_EFT_Bank::findByCompany(sks_eft_filePmtSelection.Company, sks_eft_filePmtSelection.PmtBankAccountId, sks_eft_filePmtSelection.PaymMode); // SKS_FDD_10590
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetCNPBank</Name>
				<Source><![CDATA[
    protected void GetCNPBank(BankAccountId _bankAccountId = '', PaymMode _paymMode = '', CompanyId _company = curExt())
    {
        SKS_EFT_FilePmtSelection sks_eft_filePmtSelection;
        ;

        if(msks_eftap_file.JournalOption == SKS_EFT_FileJournalOption::MasterAccountList && msks_eft_bank)
        {
            return;
        }

        if(_bankAccountId != '' && _paymMode != '')
        {
            if(msks_eftcnp_Bank.BankAccountId != _bankAccountId || msks_eftcnp_Bank.PaymMode != _paymMode)//SKS_Bug_12510
            {
                msks_eftcnp_Bank = SKS_EFTCNP_Bank::find(_bankAccountId, _paymMode); // SKS_FDD_10590
            }
        }
        else
        {
            select firstonly PmtBankAccountId,PaymMode, Company from sks_eft_filePmtSelection // SKS_FDD_10590
            where sks_eft_filePmtSelection.FileRecId == msks_eftap_file.RecId;
            if(msks_eftcnp_Bank.BankAccountId != sks_eft_filePmtSelection.PmtBankAccountId || msks_eftcnp_Bank.PaymMode != sks_eft_filePmtSelection.PaymMode)
            {
                msks_eftcnp_Bank = SKS_EFTCNP_Bank::find(sks_eft_filePmtSelection.PmtBankAccountId, sks_eft_filePmtSelection.PaymMode); // SKS_FDD_10590
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetBTBBank</Name>
				<Source><![CDATA[
    private void GetBTBBank(BankAccountId _bankAccountId = '', PaymMode _paymMode = '', DataAreaId _dataAreaId = curext()) //FDD-10590
    {
        SKS_EFT_FilePmtSelection sks_eft_filePmtSelection;
        ;

        if(_bankAccountId != '' && _paymMode != '')
        {
            if(msks_eftbtb_bank.BankAccountId != _bankAccountId || msks_eftbtb_bank.PaymMode != _paymMode)
            {
                msks_eftbtb_bank = SKS_EFTBTB_Bank::findByCompany(_dataAreaId, _bankAccountId, _paymMode);//FDD-10590
            }
        }
        else
        {
            select firstonly PmtBankAccountId,PaymMode from sks_eft_filePmtSelection where sks_eft_filePmtSelection.FileRecId == msks_eftap_file.RecId;
            if(msks_eftbtb_bank.BankAccountId != sks_eft_filePmtSelection.PmtBankAccountId || msks_eftbtb_bank.PaymMode != sks_eft_filePmtSelection.PaymMode)
            {
                msks_eftbtb_bank = SKS_EFTBTB_Bank::findByCompany(sks_eft_filePmtSelection.company(), sks_eft_filePmtSelection.PmtBankAccountId, sks_eft_filePmtSelection.PaymMode); //FDD-10590
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetARBank</Name>
				<Source><![CDATA[
    private void GetARBank(BankAccountId _bankAccountId = '', PaymMode _paymMode = '', DataAreaId _dataAreaId = curext()) //FDD-10590
    {
        SKS_EFT_FilePmtSelection sks_eft_filePmtSelection;
        ;

        if(_bankAccountId != '' && _paymMode != '')
        {
            if(msks_eftar_Bank.BankAccountId != _bankAccountId || msks_eftar_Bank.PaymMode != _paymMode)
            {
                msks_eftar_Bank = SKS_EFTAR_Bank::findByCompany(_dataAreaId, _bankAccountId, _paymMode);//FDD-10590
            }
        }
        else if(msks_eftap_file.JournalOption == SKS_EFT_FileJournalOption::PreNotesOnly)
        {
            if(msks_eftar_Bank.BankAccountId != msks_eftap_file.PreNoteOnlyBankAccountId || msks_eftar_Bank.PaymMode != msks_eftap_file.PreNotesOnlyPaymMode)
            {
                msks_eftar_Bank = SKS_EFTAR_Bank::findByCompany(preNoteOnlyDataAreaId, msks_eftap_file.PreNoteOnlyBankAccountId, msks_eftap_file.PreNotesOnlyPaymMode);//FDD-10590
            }
        }
        else
        {
            select firstonly PmtBankAccountId,PaymMode from sks_eft_filePmtSelection where sks_eft_filePmtSelection.FileRecId == msks_eftap_file.RecId;
            if(msks_eftar_Bank.BankAccountId != sks_eft_filePmtSelection.PmtBankAccountId || msks_eftar_Bank.PaymMode != sks_eft_filePmtSelection.PaymMode)
            {
                msks_eftar_Bank = SKS_EFTAR_Bank::findByCompany(sks_eft_filePmtSelection.company(), sks_eft_filePmtSelection.PmtBankAccountId, sks_eft_filePmtSelection.PaymMode); //FDD-10590
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetEFTFileFormat</Name>
				<Source><![CDATA[
    private void GetEFTFileFormat(PaymMode _paymMode = '', SKS_EFT_Module _module = SKS_EFT_Module::AP, DataAreaId _dataAreaId = curExt())//FDD-10590
    {
        VendPaymModeTable vendPaymModeTable;
        CustPaymModeTable custPaymModeTable;
        SKS_EFT_FilePmtSelection sks_eft_FilePmtSelection;
        SKS_BTB_PaymModeTable bankPaymModeTable;
        ;

        if(_module == SKS_EFT_Module::AP)
        {
            if(msks_eftap_file.JournalOption == SKS_EFT_FileJournalOption::PreNotesOnly)
            {
                if(multicompaniesCon) //FDD-10590 --->
                {
                    select firstOnly crosscompany:multicompaniesCon PaymMode from sks_eft_FilePmtSelection where sks_eft_FilePmtSelection.FileRecId == msks_eftap_file.RecId; //FDD-10590
                    vendPaymModeTable = VendPaymModeTable::findByCompanySKS(sks_eft_FilePmtSelection.company(), msks_eftap_file.PreNotesOnlyPaymMode); //FDD-10590
                    // SKS_Bug_12453
                }
                else //<--- FDD-10590
                {
                    vendPaymModeTable = VendPaymModeTable::find(sks_eft_FilePmtSelection.PaymMode);
                }
            }
            else if(msks_eftap_file.JournalOption == SKS_EFT_FileJournalOption::MasterAccountList)
            {
                vendPaymModeTable = VendPaymModeTable::find(msks_eftap_file.MALPaymMode);
            }

            else if(_paymMode == '')
            {
                if(multicompaniesCon) //FDD-10590 --->
                {
                    select firstOnly crosscompany:multicompaniesCon PaymMode from sks_eft_FilePmtSelection where sks_eft_FilePmtSelection.FileRecId == msks_eftap_file.RecId; //FDD-10590
                    vendPaymModeTable = VendPaymModeTable::findByCompanySKS(sks_eft_FilePmtSelection.company, sks_eft_FilePmtSelection.PaymMode); //FDD-10590// SKS_Bug_12453
                }
                else //<--- FDD-10590
                {
                    vendPaymModeTable = VendPaymModeTable::find(sks_eft_FilePmtSelection.PaymMode);
                }
            }
            else
            {
                vendPaymModeTable = VendPaymModeTable::findByCompanySKS(_dataAreaId, _paymMode);//FDD-10590// SKS_Bug_12453
            }

            if(vendPaymModeTable)
            {
                msks_eft_FileFormat = SKS_EFT_FileFormat::find(vendPaymModeTable.SKS_EFT_FormatId, true);
            }
            else if(msks_eftap_file.FormatId != '')
            {
                msks_eft_FileFormat = SKS_EFT_FileFormat::findByCompany(msks_eftap_file.DataAreaId, msks_eftap_file.FormatId, true); //FDD-10590
            }
        }
        else if (_module == SKS_EFT_Module::BTB)
        {
            if(_paymMode == '')
            {
                select firstOnly PaymMode from sks_eft_FilePmtSelection where sks_eft_FilePmtSelection.FileRecId == msks_eftap_file.RecId; //FDD-10590
                bankPaymModeTable = SKS_BTB_PaymModeTable::find(sks_eft_FilePmtSelection.PaymMode);
            }
            else
            {
                bankPaymModeTable = SKS_BTB_PaymModeTable::find(_paymMode);
            }
            if(bankPaymModeTable)
            {
                msks_eft_FileFormat = SKS_EFT_FileFormat::find(bankPaymModeTable.FormatId, true);
            }
            else if(msks_eftap_file.FormatId != '')
            {
                msks_eft_FileFormat = SKS_EFT_FileFormat::findByCompany(msks_eftap_file.company(), msks_eftap_file.FormatId, true); //FDD-10590
            }
        }

        else if(_module == SKS_EFT_Module::AR)//AR
        {
            if(msks_eftap_file.JournalOption == SKS_EFT_FileJournalOption::PreNotesOnly)
            {
                if(multicompaniesCon) //FDD-10590 --->
                {
                    select firstOnly crosscompany:multicompaniesCon PaymMode from sks_eft_FilePmtSelection where sks_eft_FilePmtSelection.FileRecId == msks_eftap_file.RecId; //FDD-10590
                    custPaymModeTable = CustPaymModeTable::findByCompany(sks_eft_FilePmtSelection.company(), msks_eftap_file.PreNotesOnlyPaymMode); //FDD-10590
                }
                else //<--- FDD-10590
                {
                    custPaymModeTable = CustPaymModeTable::find(sks_eft_FilePmtSelection.PaymMode);
                }
            }
            else if(_paymMode == '')
            {
                if(multicompaniesCon) //FDD-10590 --->
                {
                    select firstOnly crosscompany:multicompaniesCon PaymMode from sks_eft_FilePmtSelection where sks_eft_FilePmtSelection.FileRecId == msks_eftap_file.RecId; //FDD-10590
                    custPaymModeTable = CustPaymModeTable::findByCompany(sks_eft_FilePmtSelection.company(),sks_eft_FilePmtSelection.PaymMode); //FDD-10590
                }
                else //<--- FDD-10590
                {
                    custPaymModeTable = CustPaymModeTable::find(sks_eft_FilePmtSelection.PaymMode);
                }
            }
            else
            {
                custPaymModeTable = CustPaymModeTable::findByCompany(_dataAreaId, _paymMode); //FDD-10590
            }
            if(custPaymModeTable)
            {
                msks_eft_FileFormat = SKS_EFT_FileFormat::find(custPaymModeTable.SKS_EFT_FormatId, true);
            }
            else if(msks_eftap_file.FormatId != '')
            {
                msks_eft_FileFormat = SKS_EFT_FileFormat::findByCompany(msks_eftap_file.company(), msks_eftap_file.FormatId, true); //FDD-10590
            }
        }
        else if(_module == SKS_EFT_Module::CNP)//AR
        {
            if(_paymMode == '')
            {
                select firstOnly PaymMode from sks_eft_FilePmtSelection where sks_eft_FilePmtSelection.FileRecId == msks_eftap_file.RecId; //FDD-10590
                custPaymModeTable = custPaymModeTable::find(sks_eft_FilePmtSelection.PaymMode);
            }
            else
            {
                custPaymModeTable = CustPaymModeTable::find(_paymMode);
            }
            
            if(custPaymModeTable)
            {
                msks_eft_FileFormat = SKS_EFT_FileFormat::find(custPaymModeTable.SKS_CNP_FormatId, true);
            }
            else if(msks_eftap_file.FormatId != '')
            {
                msks_eft_FileFormat = SKS_EFT_FileFormat::find(msks_eftap_file.FormatId, true);
            }
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPreNoteOnlyDataAreaId</Name>
				<Source><![CDATA[
    public DataAreaId parmPreNoteOnlyDataAreaId(DataAreaId _preNoteOnlyDataAreaId = preNoteOnlyDataAreaId)
    {
        preNoteOnlyDataAreaId = _preNoteOnlyDataAreaId;
        return preNoteOnlyDataAreaId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReturnMsg</Name>
				<Source><![CDATA[
    public str getReturnMsg()
    {
        return mReturnMsg;
    }

]]></Source>
			</Method>
			<Method>
				<Name>InboundFileNbr</Name>
				<Source><![CDATA[
    private SKS_EFT_InboundFileNbr InboundFileNbr(SKS_EFT_InboundFileNbr _InboundFileNbr = gInboundFileNbr)
    {
        gInboundFileNbr = _InboundFileNbr;
        return gInboundFileNbr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>InsertMALRecordAP</Name>
				<Source><![CDATA[
    private void InsertMALRecordAP(SKS_EFT_VendorPaym _sks_eft_VendorPaym)
    {
        SKS_EFT_FileDetail LocSKS_EFT_FileDetail;
        ;

        LocSKS_EFT_FileDetail.BankAccountId = msks_eft_bank.BankAccountId;

        LocSKS_EFT_FileDetail.PaymMode = _sks_eft_VendorPaym.PaymMode;
        LocSKS_EFT_FileDetail.PaymSpec = _sks_eft_VendorPaym.PaymSpec;
        LocSKS_EFT_FileDetail.AccountNum = _sks_eft_VendorPaym.VendAccount;
        LocSKS_EFT_FileDetail.AccountCompany = _sks_eft_VendorPaym.VendCompany;
        LocSKS_EFT_FileDetail.DepBankAccountId = _sks_eft_VendorPaym.VendBankAccountId;
        LocSKS_EFT_FileDetail.FileCrLf = msks_eft_bank.FileCrLf;
        LocSKS_EFT_FileDetail.AccountName = SKS_EFT_Common::getVendorName(_sks_eft_VendorPaym.VendCompany, _sks_eft_VendorPaym.VendAccount);
        LocSKS_EFT_FileDetail.EffectiveDate = msks_eftap_file.EffectiveDate;
        LocSKS_EFT_FileDetail.FormatId = _sks_eft_VendorPaym.FormatId;
        LocSKS_EFT_FileDetail.FileRecId = msks_eftap_file.RecId;
        LocSKS_EFT_FileDetail.FileStatus = SKS_EFT_FileStatus::FileCreated;
        LocSKS_EFT_FileDetail.Module = SKS_EFT_Module::AP;

        LocSKS_EFT_FileDetail.DepRecord = SKS_EFT_VendorRecordSummary::Payment;
        LocSKS_EFT_FileDetail.RecordSection = SKS_EFT_RecordSection::Payments;
        LocSKS_EFT_FileDetail.RecordSummary = SKS_EFT_RecordSummary::Payment;
        LocSKS_EFT_FileDetail.RecordType = SKS_EFT_RecordType::MAL;

        //insert the new record into the db.
        LocSKS_EFT_FileDetail.Insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>InsertMiscEFTRecord</Name>
				<Source><![CDATA[
    private void InsertMiscEFTRecord(SKS_EFT_RecordSection _recSection, SKS_EFT_ValueString _valueStr, SKS_EFT_FormatId _formatId)
    {
        SKS_EFT_FileDetail sks_eft_FileDetail;
        ;

        sks_eft_FileDetail.FileRecId = msks_eftap_file.RecId;

        sks_eft_FileDetail.RecordSection = _recSection;
        sks_eft_FileDetail.ValueString = _valueStr;
        sks_eft_FileDetail.FormatID = _formatId;
        sks_eft_FileDetail.FileStatus = SKS_EFT_FileStatus::FileCreated;

        sks_eft_FileDetail.Insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>InsertPreNoteRecordAP</Name>
				<Source><![CDATA[
    private void InsertPreNoteRecordAP(VendBankAccount _vendBankAccount, SKS_EFT_VendorPaym _sks_eft_VendorPaym, SKS_EFT_FileFormat _sks_eft_FileFormat, CompanyBankAccountId _bankAccountId,
                                       PaymMode _vendPaymMode, boolean testMode = false, DataAreaId _preDataAreaId = curExt()) //Bug-11849
    {
        SKS_EFT_FileDetail sks_eft_FileDetail;
        BankAccountTable bankAccountTable;
        SKS_EFT_FileFormatPaymSpec sks_eft_FileFormatPaymSpec;
        ;

        // Use passed in bank account and method of payment instead of SKS_EFT_VendorPaym
        // All PreNote vendors for a format will use the same source bank account
        if(msks_eft_bank.BankAccountId != _bankAccountId || msks_eft_bank.PaymMode != _vendPaymMode || msks_eft_bank.company() != _sks_eft_VendorPaym.company()) //FDD-10590
        {
            if(msks_eftap_file.JournalOption == SKS_EFT_FileJournalOption::PreNotesOnly || msks_eftap_file.JournalOption == SKS_EFT_FileJournalOption::JournalsPreNotes) //Bug-11849 --->
            {
                this.GetAPBank(_bankAccountId, _vendPaymMode, _preDataAreaId); //SKS_VSTS_13134
            }
            else //<--- Bug-11849
            {
                this.GetAPBank(_bankAccountId, _vendPaymMode, _sks_eft_VendorPaym.company());//FDD-10590
            }
        }
        bankAccountTable = BankAccountTable::findByCompany(_sks_eft_VendorPaym.company(),_bankAccountId); //SKS_VSTS_13134

        sks_eft_FileDetail.FileRecId = msks_eftap_file.RecId;
        sks_eft_FileDetail.EffectiveDate = msks_eftap_file.EffectiveDate;

        sks_eft_FileDetail.PaymMode = _sks_eft_VendorPaym.PaymMode;
        sks_eft_FileDetail.PaymSpec = _sks_eft_VendorPaym.PaymSpec;
        sks_eft_FileDetail.PaymentCompany = _sks_eft_VendorPaym.company(); //FDD-10590

        sks_eft_FileDetail.DepBankAccountId = _vendBankAccount.AccountID;
        sks_eft_FileDetail.DepBankAcctType = _vendBankAccount.BankAccountType;
        sks_eft_FileDetail.DepBankAcct = _vendBankAccount.AccountNum;
        sks_eft_FileDetail.DepBankTransit = _vendBankAccount.RegistrationNum;
        sks_eft_FileDetail.DepPreNoteDate = _vendBankAccount.SKS_EFT_PreNoteDate;
        sks_eft_FileDetail.DepPreNoteStatus = _vendBankAccount.SKS_EFT_PreNoteStatus;

        sks_eft_FileDetail.DepEDIVersion = _sks_eft_vendorpaym.EDIVersion;

        sks_eft_FileDetail.AccountNum = _sks_eft_VendorPaym.VendAccount;
        sks_eft_FileDetail.AccountType = LedgerJournalACType::Vend;
        sks_eft_FileDetail.AccountCompany = _sks_eft_VendorPaym.VendCompany;

        // SKS_EFT_Bank
        sks_eft_FileDetail.BankAccountId = msks_eft_bank.BankAccountId;
        sks_eft_FileDetail.BankAcctType = msks_eft_bank.AcctType;
        sks_eft_FileDetail.BankOrigDFI = msks_eft_bank.ACHOrigDFI;

        sks_eft_FileDetail.FileACHImmDest = msks_eft_bank.ACHImmDest;
        sks_eft_FileDetail.FileACHImmDestName = msks_eft_bank.ACHImmDestName;
        sks_eft_FileDetail.FileACHImmOrigin = msks_eft_bank.ACHImmOrig;
        sks_eft_FileDetail.FileACHImmOriginName = msks_eft_bank.ACHImmOrigName;
        sks_eft_FileDetail.FileCrLf = msks_eft_bank.FileCrLf;

        if(msks_eft_bank.CompanyIDUnique)
        {
            switch(_sks_eft_VendorPaym.PaymSpec)
            {
                case enum2str(SKS_EFT_CompanyPaymSpec::CCD):
                    sks_eft_FileDetail.FileACHCompanyId = msks_eft_bank.CompanyIDCCD;
                    sks_eft_FileDetail.FileACHCompanyName = msks_eft_bank.CompanyNameCCD;
                    break;
                case enum2str(SKS_EFT_CompanyPaymSpec::IAT):
                    sks_eft_FileDetail.FileACHCompanyId = msks_eft_bank.CompanyIDIAT;
                    sks_eft_FileDetail.FileACHCompanyName = msks_eft_bank.CompanyNameIAT;
                    break;
                case enum2str(SKS_EFT_CompanyPaymSpec::PPD):
                    sks_eft_FileDetail.FileACHCompanyId = msks_eft_bank.CompanyIDPPD;
                    sks_eft_FileDetail.FileACHCompanyName = msks_eft_bank.CompanyNamePPD;
                    break;
                case enum2str(SKS_EFT_CompanyPaymSpec::CTX):
                    sks_eft_FileDetail.FileACHCompanyId = msks_eft_bank.CompanyIDCTX;
                    sks_eft_FileDetail.FileACHCompanyName = msks_eft_bank.CompanyNameCTX;
                    break;
            }
        }

        // If id or name were not set above, set them to the non-unique values
        if(sks_eft_FileDetail.FileACHCompanyId == '')
        {
            sks_eft_FileDetail.FileACHCompanyId = msks_eft_bank.ACHCompanyID;
        }
        if(sks_eft_FileDetail.FileACHCompanyName == '')
        {
            sks_eft_FileDetail.FileACHCompanyName = msks_eft_bank.ACHCompanyName;
        }

        // BankAccountTable
        sks_eft_FileDetail.BankBankAcct = bankAccountTable.AccountNum;
        sks_eft_FileDetail.BankBankTransit = bankAccountTable.RegistrationNum;

        // Vendor
        sks_eft_FileDetail.AccountName = SKS_EFT_Common::getVendorName(_sks_eft_VendorPaym.VendCompany, _sks_eft_VendorPaym.VendAccount);

        // SKS_EFT_FileFormat
        sks_eft_FileDetail.FormatId = _sks_eft_FileFormat.FormatId;

        sks_eft_FileDetail.DepRecord = SKS_EFT_VendorRecordSummary::Payment;
        sks_eft_FileDetail.RecordSection = SKS_EFT_RecordSection::Payments;
        sks_eft_FileDetail.RecordSummary = SKS_EFT_RecordSummary::Payment;
        sks_eft_FileDetail.RecordType = SKS_EFT_RecordType::PreNote;
        sks_eft_FileDetail.FileStatus = SKS_EFT_FileStatus::FileCreated;
        sks_eft_FileDetail.Module = SKS_EFT_Module::AP;

        // Test mode -.01
        if(testMode)
        {
            sks_eft_FileDetail.InvoiceOrigAmountCur = -0.01;
            sks_eft_FileDetail.InvoiceSettleAmountPmtCur = -0.01;
            sks_eft_FileDetail.InvoiceSettleAmountCur = -0.01;
            sks_eft_FileDetail.RecordType = SKS_EFT_RecordType::Invoice;
        }

        sks_eft_FileFormatPaymSpec = SKS_EFT_FileFormatPaymSpec::findByCompany(sks_eft_FileDetail.PaymentCompany ? sks_eft_FileDetail.PaymentCompany : sks_eft_FileDetail.DataAreaId,
                                                                               sks_eft_FileDetail.FormatId, sks_eft_FileDetail.PaymSpec);

        sks_eft_FileDetail.PaymSpecName = sks_eft_FileFormatPaymSpec.PaymSpecName;
        sks_eft_FileDetail.TransactionCode = sks_eft_FileFormatPaymSpec.TransactionCode;

        ttsbegin;
        sks_eft_FileDetail.PaymentReference = NumberSeq::newGetNum(SKS_PP_Setup::numRefAPEFTPlusPaymentReferenceNumber()).num();
        ttscommit;

        sks_eft_FileDetail.CurrencyCode = bankAccountTable.CurrencyCode;        //SKS_DevOps_19158

        sks_eft_FileDetail.Insert();

        //SKS_VSTS_12937--->
        SKS_EFT_Processing::BuildUploadVendorFields(sks_eft_FileDetail);
        SKS_EFT_Processing::BuildMultiCompFields(sks_eft_FileDetail);
        //SKS_VSTS_12937<---
    }

]]></Source>
			</Method>
			<Method>
				<Name>InsertPreNoteRecordAR</Name>
				<Source><![CDATA[
    private void InsertPreNoteRecordAR(CustBankAccount _custBankAccount, SKS_EFT_CustomerPaym _sks_eft_CustomerPaym, SKS_EFT_FileFormat _sks_eft_FileFormat,
                                       CompanyBankAccountId _bankAccountId, PaymMode _custPaymMode, boolean testMode = false, DataAreaId _preDataAreaId = curExt())
    {
        SKS_EFT_FileDetail sks_eft_FileDetail;
        BankAccountTable bankAccountTable;
        SKS_EFT_FileFormatPaymSpec sks_eft_FileFormatPaymSpec;
        ;

        // Use passed in bank account and method of payment instead of SKS_EFT_VendorPaym
        // All PreNote vendors for a format will use the same source bank account
        if(msks_eftap_file.JournalOption == SKS_EFT_FileJournalOption::PreNotesOnly || msks_eftap_file.JournalOption == SKS_EFT_FileJournalOption::JournalsPreNotes) //Bug-11849 --->
        {
            if(msks_eftar_bank.BankAccountId != _sks_eft_CustomerPaym.BankAccountId || msks_eftar_bank.PaymMode != _custPaymMode || msks_eft_bank.company() != _sks_eft_CustomerPaym.company())
            {
                this.GetARBank(_bankAccountId, _custPaymMode, _preDataAreaId); //SKS_VSTS_13134
            }
        }
        else //<--- Bug-11849
        {
            if(msks_eftar_bank.BankAccountId != _bankAccountId || msks_eftar_bank.PaymMode != _custPaymMode || msks_eft_bank.company() != _sks_eft_CustomerPaym.company())//FDD-10590
            {
                this.GetARBank(_bankAccountId, _custPaymMode, _sks_eft_CustomerPaym.company());//FDD-10590
            }
        }
        bankAccountTable = BankAccountTable::findByCompany(_sks_eft_CustomerPaym.company(), _bankAccountId);//FDD-10590 //Bug-11849 //SKS_VSTS_13134

        sks_eft_FileDetail.FileRecId = msks_eftap_file.RecId;
        sks_eft_FileDetail.EffectiveDate = msks_eftap_file.EffectiveDate;

        sks_eft_FileDetail.PaymMode = _sks_eft_CustomerPaym.PaymMode;
        sks_eft_FileDetail.PaymSpec = _sks_eft_CustomerPaym.PaymSpec;
        sks_eft_FileDetail.PaymentCompany = _sks_eft_CustomerPaym.company();//FDD-10590

        sks_eft_FileDetail.DepBankAccountId = _custBankAccount.AccountID;
        sks_eft_FileDetail.DepBankAcctType = _custBankAccount.BankAccountType;
        sks_eft_FileDetail.DepBankAcct = _custBankAccount.AccountNum;
        sks_eft_FileDetail.DepBankTransit = _custBankAccount.RegistrationNum;
        sks_eft_FileDetail.DepPreNoteDate = _custBankAccount.SKS_EFT_PreNoteDate;
        sks_eft_FileDetail.DepPreNoteStatus = _custBankAccount.SKS_EFT_PreNoteStatus;

        //sks_eft_FileDetail.DepEDIVersion = _sks_eft_Customerpaym.eEDIVersion;

        sks_eft_FileDetail.AccountNum = _sks_eft_CustomerPaym.custAccount;
        sks_eft_FileDetail.AccountType = LedgerJournalACType::Cust;
        sks_eft_FileDetail.AccountCompany = _sks_eft_CustomerPaym.CustCompany;

        // SKS_EFT_Bank
        sks_eft_FileDetail.BankAccountId = msks_eftar_bank.BankAccountId;
        sks_eft_FileDetail.BankAcctType = msks_eftar_bank.AcctType;
        sks_eft_FileDetail.BankOrigDFI = msks_eftar_bank.ACHOrigDFI;

        sks_eft_FileDetail.FileACHImmDest = msks_eftar_bank.ACHImmDest;
        sks_eft_FileDetail.FileACHImmDestName = msks_eftar_bank.ACHImmDestName;
        sks_eft_FileDetail.FileACHImmOrigin = msks_eftar_bank.ACHImmOrig;
        sks_eft_FileDetail.FileACHImmOriginName = msks_eftar_bank.ACHImmOrigName;
        sks_eft_FileDetail.FileCrLf = msks_eftar_bank.FileCrLf;

        if(msks_eftar_bank.CompanyIDUnique)
        {
            switch(_sks_eft_CustomerPaym.PaymSpec)
            {
                case enum2str(SKS_EFT_CompanyPaymSpec::CCD):
                    sks_eft_FileDetail.FileACHCompanyId = msks_eftar_bank.CompanyIDCCD;
                    sks_eft_FileDetail.FileACHCompanyName = msks_eftar_bank.CompanyNameCCD;
                    break;

                case enum2str(SKS_EFT_CompanyPaymSpec::PPD):
                    sks_eft_FileDetail.FileACHCompanyId = msks_eftar_bank.CompanyIDPPD;
                    sks_eft_FileDetail.FileACHCompanyName = msks_eftar_bank.CompanyNamePPD;
                    break;
            }
        }
        else
        {
            sks_eft_FileDetail.FileACHCompanyId = msks_eftar_bank.ACHCompanyID;
            sks_eft_FileDetail.FileACHCompanyName = msks_eftar_bank.ACHCompanyName;
        }

        // BankAccountTable
        sks_eft_FileDetail.BankBankAcct = bankAccountTable.AccountNum;
        sks_eft_FileDetail.BankBankTransit = bankAccountTable.RegistrationNum;


        sks_eft_FileDetail.AccountName = SKS_EFT_Common::getCustomerName(_sks_eft_CustomerPaym.CustCompany, _sks_eft_CustomerPaym.CustAccount);

        // SKS_EFT_FileFormat
        sks_eft_FileDetail.FormatId = _sks_eft_FileFormat.FormatId;
        sks_eft_FileDetail.DepRecord = SKS_EFT_VendorRecordSummary::Payment;
        sks_eft_FileDetail.RecordSection = SKS_EFT_RecordSection::Payments;
        sks_eft_FileDetail.RecordSummary = SKS_EFT_RecordSummary::Payment;
        sks_eft_FileDetail.RecordType = SKS_EFT_RecordType::PreNote;
        sks_eft_FileDetail.FileStatus = SKS_EFT_FileStatus::FileCreated;
        sks_eft_FileDetail.Module = SKS_EFT_Module::AR;

        // Test mode .01
        if(testMode)
        {
            sks_eft_FileDetail.InvoiceOrigAmountCur = 0.01;
            sks_eft_FileDetail.InvoiceSettleAmountPmtCur = 0.01;
            sks_eft_FileDetail.InvoiceSettleAmountCur = 0.01;
            sks_eft_FileDetail.RecordType = SKS_EFT_RecordType::Invoice;
        }

        sks_eft_FileFormatPaymSpec = SKS_EFT_FileFormatPaymSpec::findByCompany(sks_eft_FileDetail.PaymentCompany ? sks_eft_FileDetail.PaymentCompany : sks_eft_FileDetail.DataAreaId,
                                                                               sks_eft_FileDetail.FormatId, sks_eft_FileDetail.PaymSpec);

        sks_eft_FileDetail.PaymSpecName = sks_eft_FileFormatPaymSpec.ARPaymSpecName;
        sks_eft_FileDetail.TransactionCode = sks_eft_FileFormatPaymSpec.TransactionCode;

        ttsbegin;
        sks_eft_FileDetail.PaymentReference = NumberSeq::newGetNum(SKS_PP_Setup::numRefAREFTPlusPaymentReferenceNumber()).num();
        ttscommit;

        sks_eft_FileDetail.CurrencyCode = bankAccountTable.CurrencyCode;        //SKS_DevOps_19158

        sks_eft_FileDetail.Insert();

        //SKS_VSTS_12937--->
        SKS_EFT_Processing::BuildMultiCompFields(sks_eft_FileDetail);
        //SKS_VSTS_12937<---
    }

]]></Source>
			</Method>
			<Method>
				<Name>KeepAP</Name>
				<Source><![CDATA[
    private void KeepAP(boolean _sendMailOnly = false,
                        str _filePathName = '',
                        str _ctrlFilePathName = '',
                        boolean _AutoCreateEFT = false,
                        boolean deleteControlFileFlag = true)
    {
        SKS_EFT_FileStatus keepDeleteStatus;
        SKS_EB_CommProcess locSKS_EB_CommProcess, lSKS_EB_CommProcess;
        SKS_EFT_FileDetail sks_eft_filedetail;
        SKS_EFT_Setup locSKS_EFT_Setup;
        SKS_PP_500PPBas sks_pp_500ppbas = new SKS_PP_500PPBas();
        VendBankAccount vendBankAccount;
        container virtualCompanyCompanies;
        container multicompanies = SKS_EB_VirtualCompany::getEFT_APMultiCompanies();
        str fullRootFilePath = mSKS_EFTAP_File.FilePath + '\\' + mSKS_EFTAP_File.FileName;
        str fullControlFilePath = (mSKS_EFTAP_File.BFBankIntegration == SKS_BF_BankIntType::BankFabric ? mSKS_EFTAP_File.FilePath : mSKS_EFT_Bank.APFilePath) + '\\' + mSKS_EFTAP_File.ControlFileName;
        boolean apEFTAutoPost;

        lSKS_EB_CommProcess = null;

        select firstonly CommID, AutoPost from lSKS_EB_CommProcess where lSKS_EB_CommProcess.CommID == msks_eftap_file.CommId;

        if(multicompanies != conNull())
        {
            select firstonly crosscompany:multicompanies ModAPEmail from locSKS_EFT_Setup where locSKS_EFT_Setup.ModAPEmail == NoYes::Yes;
        }
        else
        {
            select firstonly ModAPEmail from locSKS_EFT_Setup where locSKS_EFT_Setup.ModAPEmail == NoYes::Yes;
        }


        if(!_sendMailOnly)
        {
            virtualCompanyCompanies = CustVendOpenTransManager::findSharedServiceCompanies(curExt());

            if(locSKS_EFT_Setup.ModAPEmail
                && (msks_eftap_file.JournalOption != SKS_EFT_FileJournalOption::PreNotesOnly
                    && msks_eftap_file.JournalOption != SKS_EFT_FileJournalOption::MasterAccountList))
            {
                keepDeleteStatus = SKS_EFT_FileStatus::CompletedNoEmail;
            }
            else
            {
                keepDeleteStatus = SKS_EFT_FileStatus::Completed;
            }

            if(msks_eftap_file.JournalOption == SKS_EFT_FIlejournalOption::MasterAccountList)
            {
                ttsBegin;
                this.Update_SKS_EFTAP_File_FileStatus(SKS_EFT_FileStatus::Transmitted, SKS_EFT_Module::AP);
                SKS_EFT_Processing::Update_SKS_EFT_VendorPaym_MALStatus(SKS_EFT_MALStatus::New,SKS_EFT_MALStatus::Pending,msks_eftap_file.MALPaymMode);
                SKS_EFT_Processing::Update_SKS_EFT_VendorPaym_MALStatus(SKS_EFT_MALStatus::Update,SKS_EFT_MALStatus::Approved,msks_eftap_file.MALPaymMode);
                ttsCommit;
            }
            else if(mSKS_EFT_Setup.APReqPreNote)
            {
                ttsbegin;
                //Bug-11864 --->
                if(multiCompanies != conNull())
                {
                    DataAreaId conDataAreaId;
                    for(int i = 1; i <= conLen(multiCompanies); i++)
                    {
                        conDataAreaId = conPeek(multiCompanies, i);
                        if (conFind(virtualCompanyCompanies,conDataAreaId) == 0)
                        {
                            virtualCompanyCompanies = conIns(virtualCompanyCompanies, conLen(virtualCompanyCompanies)+1, conPeek(multiCompanies, i));
                        }
                    }
                }
                //<--- Bug-11864
                // --------------------------------------------
                // Update Depositor with "P"ending - if "N"ew
                // --------------------------------------------
                while select crossCompany:multiCompanies AccountCompany, AccountNum, DepBankAcctType, DepBankTransit, DepBankAcct, DepPreNoteStatus,
                    PaymentCompany from sks_eft_filedetail where //Bug-11864
                  sks_eft_filedetail.FileRecId == msks_eftap_file.RecId &&
                  sks_eft_filedetail.RecordType == SKS_EFT_RecordType::PreNote
                {
                    if(sks_eft_filedetail.DepPreNoteStatus == SKS_EB_PreNoteStatus::New)
                    {
                        while select forupdate crossCompany:virtualCompanyCompanies vendBankAccount where
                          vendBankAccount.VendAccount == sks_eft_filedetail.AccountNum &&
                          vendBankAccount.BankAccountType == sks_eft_FileDetail.DepBankAcctType &&
                          vendBankAccount.RegistrationNum == sks_eft_FileDetail.DepBankTransit &&
                          vendBankAccount.AccountNum == sks_eft_FileDetail.DepBankAcct &&
                          vendBankAccount.DataAreaId == sks_eft_FileDetail.PaymentCompany && //Bug-11864
                          vendBankAccount.SKS_EFT_PreNoteStatus == SKS_EB_PreNoteStatus::New
                        {
                            changecompany(vendBankAccount.company())
                            {
                                VendBankAccount    locvendBankAccount = null; //Bug-11864 --->
                                locvendBankAccount = vendBankAccount;
                                locvendBankAccount.selectForUpdate(true); //<--- Bug-11864
                                vendBankAccount.SKS_EFT_PreNoteStatus = SKS_EB_PreNoteStatus::Pending;
                                vendBankAccount.SKS_EFT_PreNoteDate = SKS_EFT_Processing::GetPreNoteDate(msks_eft_FileFormat.PreNoteDays, msks_eft_bank.BankHolidayGroupId);
                                vendBankAccount.update();
                            }
                        }
                    }
                }
                ttscommit;
                ttsbegin;
                // -------------------------------------------------------------
                // Check All Depositors - Pending Pre-Notes - Move to Approved
                // -------------------------------------------------------------
                while select forupdate crossCompany:virtualCompanyCompanies vendBankAccount where
                  vendBankAccount.SKS_EFT_PreNoteStatus == SKS_EB_PreNoteStatus::Pending &&
                  vendBankAccount.SKS_EFT_PreNoteDate <= DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone())
                {
                    // Set status to approved
                    changecompany(vendBankAccount.company())
                    {
                        vendBankAccount.SKS_EFT_PreNoteStatus = SKS_EB_PreNoteStatus::Approved;
                        vendBankAccount.SKS_EFT_PreNoteDate = dateNull();
                        vendBankAccount.update();
                    }
                }
                ttscommit;
            }
            ttsbegin;
            this.Update_SKS_EFT_FileDetail(keepDeleteStatus);
            this.Update_SKS_EFTAP_File_FileStatus(keepDeleteStatus, SKS_EFT_Module::AP);
            ttscommit;
            If (msks_eft_Bank.APArchive)
            {
                this.Archive(SKS_EFT_Module::AP);
            }
            select firstonly FileComplete from locSKS_EB_CommProcess where locSKS_EB_CommProcess.CommID == msks_eftap_file.CommID;
            if(locSKS_EB_CommProcess.FileComplete == SKS_EB_FileComplete::BasedOnInboundSettings)
            {
                if (mSKS_EFTAP_File.FileStatus == SKS_EFT_FileStatus::Completed ||
                        mSKS_EFTAP_File.FileStatus == SKS_EFT_FileStatus::CompletedEmailPending ||
                        mSKS_EFTAP_File.FileStatus == SKS_EFT_FileStatus::CompletedNoEmail)
                {
                    // set the payment Journal lines to Approved(Confirmed)
                    SKS_EFT_Processing::ApprovePaymentJournalLines(mSKS_EFTAP_File.RecId, CustVendPaymStatus::Confirmed);

                    if(gActionHistory == SKS_EFT_ActionHistory::AutoCompletionInboundStatus)
                    {
                        sks_eft_Processing::createFileHistory(gActionHistory, mSKS_EFTAP_File.RecId, gInboundFileNbr, '', '', mSKS_EFTAP_File.FileStatus);
                    }
                    else
                    {
                        sks_eft_Processing::createFileHistory(gActionHistory, mSKS_EFTAP_File.RecId, '', '', '', mSKS_EFTAP_File.FileStatus);
                    }
                }
            }

            //SKS_FDD_21456--->
            if(locSKS_EFT_Setup.ModAPEmail == NoYes::No)
            {
                if(lSKS_EB_CommProcess.AutoPost)
                {
                    info(strFmt("@SKS:SKGPaymJournalPostingBatch"));
                    SKS_EFT_PaymJournalPostBatch::createMultiThreadBatch(msks_eftap_file);
                }
            }
            //SKS_FDD_21456<----
            this.Purge(SKS_EFT_Module::AP);
        }

        if(locSKS_EFT_Setup.ModAPEmail
                && (msks_eftap_file.JournalOption != SKS_EFT_FileJournalOption::PreNotesOnly
                    && msks_eftap_file.JournalOption != SKS_EFT_FileJournalOption::MasterAccountList))
        {
            //SKS_FDD_21456---->
            if(lSKS_EB_CommProcess.AutoPost && (!_sendMailOnly || msks_eftap_file.FileStatus == SKS_EFT_FileStatus::CompletedRemitdetailFailed))
            {
                info(strFmt("@SKS:SKGPaymJournalPostingBatchJob"));
                apEFTAutoPost = true;
            }
            //SKS_FDD_21456<-----

            info(strFmt("@SKS:SKGInfoAPEmailBatch"));
            SKS_EFTAP_CreateSendFileBatch::createMultiThreadBatch(msks_eftap_file, SKS_PP_NextActionDisplay::CompleteNow, SKS_EFT_EmailSendType::All,null,null,NoYes::No,null,apEFTAutoPost); // 9496 CR
        }

        if(msks_eft_bank.APDelete)
        {
            if (fullRootFilePath != '')
            {
                sks_pp_500ppbas.Kill(fullRootFilePath,msks_eftap_file.BFBankIntegration);
            }

            if (deleteControlFileFlag
                && mSKS_EFTAP_File.ControlFileName
                && fullControlFilePath != '')
            {
                SKS_PP_500PPBas.Kill(fullControlFilePath,msks_eftap_file.BFBankIntegration);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>KeepAR</Name>
				<Source><![CDATA[
    private void KeepAR(boolean _sendMailOnly = false,
                        str _filePathName = '',
                        str _ctrlFilePathName = '',
                        boolean _AutoCreateEFT = false)
    {
        SKS_EFT_FileStatus keepDeleteStatus;
        SKS_EFT_FileDetail sks_eft_filedetail;
        SKS_PP_500PPBas sks_pp_500ppbas = new SKS_PP_500PPBas();
        SKS_EFT_Setup locSKS_EFT_Setup;
        CustBankAccount custBankAccount;
        container virtualCompanyCompanies;
        container  multiCompanies = SKS_EB_VirtualCompany::getDDMultiCompanies();
        SKS_EB_CommProcess locSKS_EB_CommProcess;
        ;

        if(multicompanies != conNull())
        {
            select firstonly crosscompany:multicompanies ModAREmail from locSKS_EFT_Setup where locSKS_EFT_Setup.ModAREmail == NoYes::Yes;
        }
        else
        {
            select firstonly ModAREmail from locSKS_EFT_Setup where locSKS_EFT_Setup.ModAREmail == NoYes::Yes;
        }

        if(!_sendMailOnly)
        {
            virtualCompanyCompanies = CustVendOpenTransManager::findSharedServiceCompanies(curExt());

            if(locSKS_EFT_Setup.ModAREmail && msks_eftap_file.JournalOption != SKS_EFT_FileJournalOption::PreNotesOnly)
            {
                keepDeleteStatus = SKS_EFT_FileStatus::CompletedNoEmail;
            }
            else
            {
                keepDeleteStatus = SKS_EFT_FileStatus::Completed;
            }

            if(mSKS_EFT_Setup.ARReqPreNote)
            {
                ttsbegin;

                if(multiCompanies != conNull())
                {
                    DataAreaId conDataAreaId;
                    for(int i = 1; i <= conLen(multiCompanies); i++)
                    {
                        conDataAreaId = conPeek(multiCompanies, i);
                        if (conFind(virtualCompanyCompanies,conDataAreaId) == 0)
                        {
                            virtualCompanyCompanies = conIns(virtualCompanyCompanies, conLen(virtualCompanyCompanies)+1, conPeek(multiCompanies, i));
                        }
                    }
                }
                //<--- Bug-11864
                // --------------------------------------------
                // Update Depositor with "P"ending - if "N"ew
                // --------------------------------------------
                while select crossCompany:multiCompanies AccountCompany, AccountNum, DepBankAcctType, DepBankTransit, DepBankAcct,
                    DepPreNoteStatus, PaymentCompany from sks_eft_filedetail  //Bug-11864
                    where sks_eft_filedetail.FileRecId == msks_eftap_file.RecId &&
                          sks_eft_filedetail.RecordType == SKS_EFT_RecordType::PreNote
                {
                    if(sks_eft_filedetail.DepPreNoteStatus == SKS_EB_PreNoteStatus::New)
                    {
                        while select forupdate crossCompany:virtualCompanyCompanies custBankAccount
                            where custBankAccount.CustAccount == sks_eft_filedetail.AccountNum &&
                                  custBankAccount.BankAccountType == sks_eft_FileDetail.DepBankAcctType &&
                                  custBankAccount.RegistrationNum == sks_eft_FileDetail.DepBankTransit &&
                                  custBankAccount.AccountNum == sks_eft_FileDetail.DepBankAcct &&
                                  custBankAccount.DataAreaId == sks_eft_FileDetail.PaymentCompany && //Bug-11864
                                  custBankAccount.SKS_EFT_PreNoteStatus == SKS_EB_PreNoteStatus::New
                        {
                            changecompany(custBankAccount.company())
                            {
                                CustBankAccount    loccustBankAccount = null; //Bug-11864 --->
                                loccustBankAccount = custBankAccount;
                                loccustBankAccount.selectForUpdate(true); //<--- Bug-11864
                                loccustBankAccount.SKS_EFT_PreNoteStatus = SKS_EB_PreNoteStatus::Pending;
                                loccustBankAccount.SKS_EFT_PreNoteDate = SKS_EFT_Processing::GetPreNoteDate(msks_eft_FileFormat.PreNoteDays, msks_eftar_bank.BankHolidayGroupId);
                                loccustBankAccount.update();
                            }
                        }
                    }
                }
                ttscommit;
                ttsbegin;
                // -------------------------------------------------------------
                // Check All Depositors - Pending Pre-Notes - Move to Approved
                // -------------------------------------------------------------
                while select forupdate crossCompany:virtualCompanyCompanies custBankAccount where
                  custBankAccount.SKS_EFT_PreNoteStatus == SKS_EB_PreNoteStatus::Pending &&
                  custBankAccount.SKS_EFT_PreNoteDate <= DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone())
                {
                    // Set status to approved
                    changecompany(custBankAccount.company())
                    {
                        custBankAccount.SKS_EFT_PreNoteStatus = SKS_EB_PreNoteStatus::Approved;
                        custBankAccount.SKS_EFT_PreNoteDate = dateNull();
                        custBankAccount.update();
                    }
                }
                ttscommit;
            }
            ttsbegin;
            this.Update_SKS_EFT_FileDetail(keepDeleteStatus);
            this.Update_SKS_EFTAP_File_FileStatus(keepDeleteStatus, SKS_EFT_Module::AR);
            ttscommit;
            If (msks_eftar_Bank.ARArchive)
            {
                this.Archive(SKS_EFT_Module::AR);
            }


            // 7237 -->
            select FileComplete from locSKS_EB_CommProcess where locSKS_EB_CommProcess.CommID == msks_eftap_file.CommID;
            if(locSKS_EB_CommProcess.FileComplete == SKS_EB_FileComplete::BasedOnInboundSettings)
            {
                if (mSKS_EFTAP_File.FileStatus == SKS_EFT_FileStatus::Completed ||
                    mSKS_EFTAP_File.FileStatus == SKS_EFT_FileStatus::CompletedEmailPending ||
                        mSKS_EFTAP_File.FileStatus == SKS_EFT_FileStatus::CompletedNoEmail)
                {
                    // set the payment Journal lines to Approved(Confirmed)
                    SKS_EFT_Processing::ApprovePaymentJournalLines(mSKS_EFTAP_File.RecId, CustVendPaymStatus::Confirmed);

                    if(gActionHistory == SKS_EFT_ActionHistory::AutoCompletionInboundStatus)
                    {
                        sks_eft_Processing::createFileHistory(gActionHistory, mSKS_EFTAP_File.RecId, gInboundFileNbr, '', '', mSKS_EFTAP_File.FileStatus);
                    }
                    else
                    {
                        sks_eft_Processing::createFileHistory(gActionHistory, mSKS_EFTAP_File.RecId, '', '', '', mSKS_EFTAP_File.FileStatus);
                    }
                }
            }

            //Auto Post
            if(msks_eftap_file.FXAProcessing)
            {
                select sks_eft_filedetail
                    group by PaymentJournalNum, PaymentCompany
                        where sks_eft_filedetail.FileRecId == msks_eftap_file.RecId &&
                sks_eft_filedetail.RecordSection == SKS_EFT_RecordSection::FXAllVendor &&
                                sks_eft_filedetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary;
            }
            else
            {
                select sks_eft_filedetail
                    group by PaymentJournalNum, PaymentCompany
                        where sks_eft_filedetail.FileRecId == msks_eftap_file.RecId &&
                                sks_eft_filedetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                                sks_eft_filedetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary;
            }
            while(sks_eft_filedetail)
            {
                SKS_EFT_Processing::AutoPostPaymentJournal(sks_eft_filedetail.PaymentJournalNum, msks_eftap_file, _AutoCreateEFT, sks_eft_filedetail.PaymentCompany);
                next sks_eft_filedetail;
            }
            // 7237 <--

            this.Purge(SKS_EFT_Module::AR);
        }

        if(locSKS_EFT_Setup.ModAREmail && msks_eftap_file.JournalOption != SKS_EFT_FileJournalOption::PreNotesOnly) //FDD - 11060
        {
            info("@SKS:SKGInfoDDEmailBatch"); // SKS_Bug_9629
            SKS_EFTAP_CreateSendFileBatch::createMultiThreadBatch(msks_eftap_file, SKS_PP_NextActionDisplay::CompleteNow, SKS_EFT_EmailSendType::All); // 9205 CR
            //calls to sks_eft_SendMail.failedEmailCount() and sks_eft_SendMail.sentEmailCount() will give counts of bad and good emails sent respectively.
        }

        if(msks_eftar_bank.ARDelete)
        {
            sks_pp_500ppbas.Kill(_filePathName, msks_eftap_file.BFBankIntegration);
            SKS_PP_500PPBas.Kill(_ctrlFilePathName, msks_eftap_file.BFBankIntegration);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>KeepBTB</Name>
				<Source><![CDATA[
    private void KeepBTB(boolean _sendMailOnly = false,
                        str _filePathName = '',
                        str _ctrlFilePathName = '',
                        boolean _AutoCreateEFT = false)
    {
        SKS_EFT_FileStatus keepDeleteStatus;
        SKS_EB_CommProcess locSKS_EB_CommProcess;
        SKS_EFT_FileDetail sks_eft_filedetail;
        SKS_PP_500PPBas sks_pp_500ppbas = new SKS_PP_500PPBas();


        if(!_sendMailOnly)
        {
            keepDeleteStatus = SKS_EFT_FileStatus::Completed;

            ttsbegin;
            this.Update_SKS_EFT_FileDetail(keepDeleteStatus);
            this.Update_SKS_EFTAP_File_FileStatus(keepDeleteStatus, SKS_EFT_Module::BTB);
            ttscommit;
            If (msks_eftbtb_Bank.BBArchive)
            {
                this.Archive(SKS_EFT_Module::BTB);
            }
            select FileComplete from locSKS_EB_CommProcess where locSKS_EB_CommProcess.CommID == msks_eftap_file.CommID;
            if(locSKS_EB_CommProcess.FileComplete == SKS_EB_FileComplete::BasedOnInboundSettings)
            {
                if (mSKS_EFTAP_File.FileStatus == SKS_EFT_FileStatus::Completed ||
                        mSKS_EFTAP_File.FileStatus == SKS_EFT_FileStatus::CompletedEmailPending ||
                        mSKS_EFTAP_File.FileStatus == SKS_EFT_FileStatus::CompletedNoEmail)
                {
                    // set the payment Journal lines to Approved(Confirmed)
                    SKS_EFT_Processing::ApprovePaymentJournalLines(mSKS_EFTAP_File.RecId, CustVendPaymStatus::Confirmed);

                    if(gActionHistory == SKS_EFT_ActionHistory::AutoCompletionInboundStatus)
                    {
                        sks_eft_Processing::createFileHistory(gActionHistory, mSKS_EFTAP_File.RecId, gInboundFileNbr, '', '', mSKS_EFTAP_File.FileStatus);
                    }
                    else
                    {
                        sks_eft_Processing::createFileHistory(gActionHistory, mSKS_EFTAP_File.RecId, '', '', '', mSKS_EFTAP_File.FileStatus);
                    }
                }
            }

            select sks_eft_filedetail
                group by PaymentJournalNum, PaymentCompany
                    where sks_eft_filedetail.FileRecId == msks_eftap_file.RecId &&
                            sks_eft_filedetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                            sks_eft_filedetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary;

            while(sks_eft_filedetail)
            {
                SKS_EFT_Processing::AutoPostPaymentJournal(sks_eft_filedetail.PaymentJournalNum, msks_eftap_file, _AutoCreateEFT, sks_eft_filedetail.PaymentCompany);
                next sks_eft_filedetail;
            }

            this.Purge(SKS_EFT_Module::BTB);
        }

        
        if(msks_eftbtb_bank.BBDelete)
        {
            sks_pp_500ppbas.Kill(_filePathName, msks_eftap_file.BFBankIntegration);
            SKS_PP_500PPBas.Kill(_ctrlFilePathName, msks_eftap_file.BFBankIntegration);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>KeepCNP</Name>
				<Source><![CDATA[
    private void KeepCNP(boolean _sendMailOnly = false,
                        str _filePathName = '',
                        str _ctrlFilePathName = '',
                        boolean _AutoCreateEFT = false)
    {
        SKS_EFT_FileStatus keepDeleteStatus;
        SKS_EB_CommProcess locSKS_EB_CommProcess;
        SKS_EFT_FileDetail sks_eft_filedetail;
        SKS_PP_500PPBas sks_pp_500ppbas = new SKS_PP_500PPBas();


        if(!_sendMailOnly)
        {
            keepDeleteStatus = SKS_EFT_FileStatus::Completed;

            ttsbegin;
            this.Update_SKS_EFT_FileDetail(keepDeleteStatus);
            this.Update_SKS_EFTAP_File_FileStatus(keepDeleteStatus, SKS_EFT_Module::CNP);
            ttscommit;
            If (msks_eftcnp_Bank.cnpArchive)
            {
                this.Archive(SKS_EFT_Module::CNP);
            }
            select FileComplete from locSKS_EB_CommProcess where locSKS_EB_CommProcess.CommID == msks_eftap_file.CommID;
            if(locSKS_EB_CommProcess.FileComplete == SKS_EB_FileComplete::BasedOnInboundSettings)
            {
                if (mSKS_EFTAP_File.FileStatus == SKS_EFT_FileStatus::Completed ||
                        mSKS_EFTAP_File.FileStatus == SKS_EFT_FileStatus::CompletedEmailPending ||
                        mSKS_EFTAP_File.FileStatus == SKS_EFT_FileStatus::CompletedNoEmail)
                {
                    // set the payment Journal lines to Approved(Confirmed)
                    SKS_EFT_Processing::ApprovePaymentJournalLines(mSKS_EFTAP_File.RecId, CustVendPaymStatus::Confirmed);

                    if(gActionHistory == SKS_EFT_ActionHistory::AutoCompletionInboundStatus)
                    {
                        sks_eft_Processing::createFileHistory(gActionHistory, mSKS_EFTAP_File.RecId, gInboundFileNbr, '', '', mSKS_EFTAP_File.FileStatus);
                    }
                    else
                    {
                        sks_eft_Processing::createFileHistory(gActionHistory, mSKS_EFTAP_File.RecId, '', '', '', mSKS_EFTAP_File.FileStatus);
                    }
                }
            }

            select sks_eft_filedetail
                group by PaymentJournalNum, PaymentCompany
                    where sks_eft_filedetail.FileRecId == msks_eftap_file.RecId &&
                            sks_eft_filedetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                            sks_eft_filedetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary;

            while(sks_eft_filedetail)
            {
                SKS_EFT_Processing::AutoPostPaymentJournal(sks_eft_filedetail.PaymentJournalNum, msks_eftap_file, _AutoCreateEFT, sks_eft_filedetail.PaymentCompany);
                next sks_eft_filedetail;
            }

            this.Purge(SKS_EFT_Module::CNP);
        }

        
        if(msks_eftcnp_bank.cnpDelete)
        {
            sks_pp_500ppbas.Kill(_filePathName, msks_eftap_file.BFBankIntegration);
            SKS_PP_500PPBas.Kill(_ctrlFilePathName, msks_eftap_file.BFBankIntegration);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>KeepDeleteDialog</Name>
				<Source><![CDATA[
    private DialogButton KeepDeleteDialog(SKS_EFT_Module _module,
                                    str _filePathName,
                                    str _ctrlFilePathName,
                                    SKS_EB_CommProcess _SKS_EB_CommProcess,
                                    boolean _CommSuccess,
                                    boolean _AutoCreateEFT = false,
                                    boolean _isPreNotesOnly = false) //Issue20063: Don't show prompt when it's PreNotesOnly
    {
        DialogButton diagBut;
        ;
        //PROMPT
        if(_SKS_EB_CommProcess.FileComplete == SKS_EB_FileComplete::Prompt)
        {
            if(!_isPreNotesOnly) //Issue20063: Set to complited and don't show prompt when it's PreNotesOnly
            {
                diagBut = Box::yesNo(
                    "@SKS1007",
                    DialogButton::Yes, // Initial focus is on the No button.
                    "@SKS3068");
            }
            //Issue20063: Set to complited and don't show prompt when it's PreNotesOnly
            else 
            {
                diagBut = DialogButton::Yes;
            }
            //</Issue20063>
        }
        //IF NO ERROR, ALWAYS MARK COMPLETE
        else if(_SKS_EB_CommProcess.FileComplete == SKS_EB_FileComplete::AlwaysMarkIfNoError)
        {
            //if CommType = none, they communications are complete and there can't be an error.
            if(_SKS_EB_CommProcess.CommType == SKS_PP_CommunicationsType::None && msks_eftap_file.BFBankIntegration == SKS_BF_BankIntType::FileHubLocal)
            {
                diagBut = DialogButton::Yes;
            }
            else
            {
                //if communications type is something else.  Base this on the error file
                if(_CommSuccess)
                {
                    diagBut = DialogButton::Yes;
                }
                else
                {
                    diagBut= DialogButton::No;
                }
            }
        }
        //NEVER MARK COMPLETE OR Based on inbound file.
        else //(_SKS_EB_CommProcess.FileComplete == SKS_EB_FileComplete::AlwaysMarkIfNoError || _SKS_EB_CommProcess.FileComplete == SKS_EB_FileComplete::BasedOnInboundSettings
        {
            diagBut = DialogButton::No;
        }

        if (diagBut == DialogButton::Yes)
        {
            if(_module == SKS_EFT_Module::AP)
            {
                this.KeepAP(false, _filePathName, _ctrlFilePathName, _AutoCreateEFT);
            }
            else if(_module == SKS_EFT_Module::BTB)
            {
                this.KeepBTB(false, _filePathName, _ctrlFilePathName, _AutoCreateEFT);
            }
            else if(_module == SKS_EFT_Module::CNP)
            {
                this.KeepCNP(false, _filePathName, _ctrlFilePathName, _AutoCreateEFT);
            }
            else
            {
                this.KeepAR(false, _filePathName, _ctrlFilePathName, _AutoCreateEFT);//SKS_Bug_11847
            }

        }
        else
        {
            this.Delete_Exit(_module, _CommSuccess);
        }

        return diagBut;
    }

]]></Source>
			</Method>
			<Method>
				<Name>PrintEFTAuditReport</Name>
				<Source><![CDATA[
    private void PrintEFTAuditReport(SKS_EFT_Module _module)
    {
        SKS_EFTAP_File      fileDetail;
        MenuFunction        mf;
        Args                parms = new Args();

        select firstOnly fileDetail
            where fileDetail.RecId == msks_eftap_file.RecId;

        parms.record(fileDetail);
        if(_module == SKS_EFT_Module::AP)
        {
            mf = new MenuFunction(menuitemOutputStr(SKS_EFTAP_AuditReport), MenuItemType::Output);
        }
        else
        {
            mf = new MenuFunction(menuitemOutputStr(SKS_EFTAR_AuditReport), MenuItemType::Output);
        }

        mf.run(parms);
    }

]]></Source>
			</Method>
			<Method>
				<Name>Purge</Name>
				<Source><![CDATA[
    Public void Purge(SKS_EFT_Module  _Module)
    {
        SKS_EFT_SETUP  setuprecord;
        SKS_EFTAP_File sks_eftap_file;
        Date cutoffDate;
        int nbrmonths;

        select firstonly APPeriodsRet, APPurgeFiles, ARPeriodsRet, ARPurgeFiles,BTBPurgeFiles  from setuprecord;

        // Get Number of periods to retain from setup
        if (_Module == SKS_EFT_Module::AP && setuprecord.APPurgeFiles)
        {
            nbrmonths = setuprecord.APPeriodsRet;
        }
        else if (_Module == SKS_EFT_Module::AR && setuprecord.ARPurgeFiles)
        {
            nbrmonths = setuprecord.ARPeriodsRet;
        }
        else if (_Module == SKS_EFT_Module::BTB && setuprecord.BTBPurgeFiles)
        {
            nbrmonths = setuprecord.BTBPeriodsRet;
        }
        else if (_Module == SKS_EFT_Module::CNP && setuprecord.CNPPurgeFiles)
        {
            nbrmonths = setuprecord.CNPPeriodsRet;
        }
        else
        {
            return;
        }

        // Safeguard
        if (nbrmonths < 2)
        {
            nbrmonths = 2;
        }

        // Determine Cutoff date
        cutoffDate = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());
        cutoffDate = dateMthFwd(cutoffDate, -nbrmonths);

        //SKS_PP_FileDetail records are cascading deletes using DeleteActions on the table.
        //per preceeding comment, a delete-from command should not be used here.  IN D365 in order ot do a delete-from, and have the delete action fire,
        //  you need to use the sks_eftap_file.skipDeleteActions(false);  this implicitly means the delete-from needs to run as a while loop.
        //  the correct solution is to use a while select for update with a delete() command.  Thus you are doing an explicit loop.
        ttsbegin;
        while select forupdate sks_eftap_file where sks_eftap_file.TransmitDate < cutoffDate && sks_eftap_file.TransmitDate > mkDate(1,1,1900) && sks_eftap_file.EFTFileType == _module
        {
            sks_eftap_file.delete();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RecordCheckAP</Name>
				<Source><![CDATA[
    private str RecordCheckAP(SKS_EFT_FileDetail sks_eft_FileDetail)
    {
        SKS_EFT_FileFormat sks_eft_FileFormat;
        SKS_EFT_FileFormatPaymSpec sks_eft_FileFormatPaymSpec;
        SKS_EFT_VendorPaym sks_eft_vendorPaym;
        SKS_EB_Vendor sks_eb_vendor;
        VendBankAccount vendBankAccount;
        SKS_EB_PreNoteStatus preNoteStatus;
        SKS_EFT_BankGateway sks_eft_BankGateWay;
        //str bankQualifier;
        LedgerJournalTrans ledgerJournalTrans;
        ;

        if(msks_eft_bank.company()     != sks_eft_FileDetail.PaymentCompany || //FDD-10590
            msks_eft_bank.BankAccountId != sks_eft_FileDetail.BankAccountId)
        {
            this.GetAPBank(sks_eft_FileDetail.BankAccountId, sks_eft_FileDetail.PaymMode, sks_eft_FileDetail.PaymentCompany);//FDD-10590
        }

        sks_eft_FileFormat = SKS_EFT_FileFormat::find(sks_eft_FileDetail.FormatId);
        sks_eft_FileFormatPaymSpec = SKS_EFT_FileFormatPaymSpec::findByCompany(sks_eft_FileDetail.PaymentCompany ? sks_eft_FileDetail.PaymentCompany : sks_eft_FileDetail.DataAreaId,
                                                                               sks_eft_FileDetail.FormatId, sks_eft_FileDetail.PaymSpec);

        ledgerJournalTrans = LedgerJournalTrans::findRecId(sks_eft_FileDetail.PaymentLineRecId, false);

        sks_eft_IsPaymentUpload = ledgerJournalTrans.SKS_EFT_IsPaymentUpload;

        // Vendor payment
        if(sks_eft_vendorpaym.company()  != sks_eft_FileDetail.PaymentCompany || //FDD-10590
            sks_eft_vendorpaym.VendCompany != sks_eft_FileDetail.AccountCompany ||
           sks_eft_vendorpaym.VendAccount != sks_eft_FileDetail.AccountNum ||
           sks_eft_vendorpaym.PaymMode != sks_eft_FileDetail.PaymMode ||
           sks_eft_vendorpaym.PaymSpec != sks_eft_FileDetail.PaymSpec)
        {
            // EB Vendor
            if(!sks_eft_IsPaymentUpload) //9785 SKS pmt upd
            {
                if(sks_eb_vendor.company()  != sks_eft_FileDetail.PaymentCompany || //FDD-10590
                    sks_eb_vendor.VendCompany != sks_eft_FileDetail.AccountCompany ||
                   sks_eb_vendor.VendAccount != sks_eft_FileDetail.AccountNum)
                {
                    sks_eb_vendor = SKS_EB_Vendor::findByCompany(sks_eft_FileDetail.PaymentCompany ? sks_eft_FileDetail.PaymentCompany: sks_eft_FileDetail.DataAreaId, sks_eft_FileDetail.AccountCompany, sks_eft_FileDetail.AccountNum);
                    if(!sks_eb_vendor)
                    {
                        return strFmt("@SKS1009",
                                       sks_eft_FileDetail.AccountNum, sks_eft_FileDetail.AccountCompany);
                    }
                }
            }

            if(!sks_eft_IsPaymentUpload) //9785 SKS pmt upd
            {
                sks_eft_vendorpaym = SKS_EFT_VendorPaym::findByCompany(sks_eft_FileDetail.PaymentCompany ? sks_eft_FileDetail.PaymentCompany: sks_eft_FileDetail.DataAreaId, sks_eft_FileDetail.AccountCompany, sks_eft_FileDetail.AccountNum, sks_eft_FileDetail.PaymMode, sks_eft_FileDetail.PaymSpec, sks_eft_FileDetail.DepBankAccountId); //SKS_FDD_10590
            }

            if(!sks_eft_vendorpaym && !sks_eft_IsPaymentUpload ) //9785 SKS pmt upd
            {
                return strFmt("@SKS1006",
                               sks_eft_FileDetail.AccountNum, sks_eft_FileDetail.AccountCompany, sks_eft_FileDetail.PaymMode, sks_eft_FileDetail.PaymSpec, sks_eft_FileDetail.DepBankAccountId);
            }
            else if(sks_eft_FileFormat.mastacctlist == NoYes::Yes && sks_eft_vendorPaym.malstatus != SKS_EFT_MALStatus::Approved)
            {
                return Strfmt("@SKS2645", sks_eft_FileDetail.AccountNum, sks_eft_FileDetail.AccountCompany, sks_eft_FileDetail.PaymMode, sks_eft_FileDetail.PaymSpec, sks_eft_FileDetail.DepBankAccountId);
            }

            //vendTable = VendTable::findByCompany(sks_eft_vendorpaym.VendCompany, sks_eft_vendorpaym.VendAccount);
            if(!sks_eft_IsPaymentUpload) //9785 SKS pmt upd
            {
                vendBankAccount = VendBankAccount::findByCompany(sks_eft_vendorpaym.VendCompany, sks_eft_vendorpaym.VendAccount, sks_eft_vendorpaym.VendBankAccountId);

                mReturnMsg = this.ValidateVendor(sks_eb_vendor, sks_eft_vendorpaym, vendBankAccount);
            }
            if(mReturnMsg != '')
            {
                return mReturnMsg;
            }
        }

        //
        // IAT transaction
        //
        if(sks_eft_FileDetail.PaymSpec == #PaymSpec_IAT)
        {
            if(sks_eft_FileDetail.DepCountryRegionId == '')
            {
                return strFmt("@SKS1010", SKS_PP_Sys::getLabel(tablenum(SKS_EFT_FileDetail), fieldnum(SKS_EFT_FileDetail, DepCountryRegionId)));
            }

            // Originator Identification
            if(msks_eft_bank.WOrdPartyId == '')
            {
                return strFmt("@SKS1010", SKS_PP_Sys::getLabel(tablenum(SKS_EFT_Bank), fieldnum(SKS_EFT_Bank, WOrdPartyId)));
            }

            // Gateway Operator record
            sks_eft_BankGateway = SKS_EFT_BankGateway::find(sks_eft_FileDetail.DepBankAcct, sks_eft_FileDetail.PaymMode, sks_eft_FileDetail.DepCountryRegionId);
            if(!sks_eft_BankGateway)
            {
                return strFmt("@SKS1011", sks_eft_FileDetail.DepCountryRegionId);
            }

            //
            // Addenda 710 - 716 mandatory
            //
            // Addenda 710 - Receiver Name
            if(sks_eft_vendorpaym.WBeneName == '')
            {
                return strFmt("@SKS1010", SKS_PP_Sys::getLabel(tablenum(SKS_EFT_VendorPaym), fieldnum(SKS_EFT_VendorPaym, WBeneName)));
            }

            // Addenda 711 - Originator Name, Street
            if(msks_eft_bank.WOrdPartyName == '' || msks_eft_bank.WOrdPartyAddr == '')
            {
                return strFmt("@SKS1010",
                  SKS_PP_Sys::getLabel(tablenum(SKS_EFT_Bank), fieldnum(SKS_EFT_Bank, WOrdPartyName)) + '/' +
                  SKS_PP_Sys::getLabel(tablenum(SKS_EFT_Bank), fieldnum(SKS_EFT_Bank, WOrdPartyAddr)));
            }

            // Addenda 712 - Originator City/State, Cntry/Postal
            if(msks_eft_bank.WOrdPartyCity == '' || msks_eft_bank.WOrdPartyState == '')
            {
                return strFmt("@SKS1010",
                  SKS_PP_Sys::getLabel(tablenum(SKS_EFT_Bank), fieldnum(SKS_EFT_Bank, WOrdPartyCity)) + '/' +
                  SKS_PP_Sys::getLabel(tablenum(SKS_EFT_Bank), fieldnum(SKS_EFT_Bank, WOrdPartyState)));
            }
            if(msks_eft_bank.WOrdPartyCountryRegionId == '' || msks_eft_bank.WOrdPartyZipCode == '')
            {
                return strFmt("@SKS1010",
                  SKS_PP_Sys::getLabel(tablenum(SKS_EFT_Bank), fieldnum(SKS_EFT_Bank, WOrdPartyCountryRegionId)) + '/' +
                  SKS_PP_Sys::getLabel(tablenum(SKS_EFT_Bank), fieldnum(SKS_EFT_Bank, WOrdPartyZipCode)));
            }

            // Addenda 713 - ODFI Name, ID
            if(msks_eft_bank.ACHOrigDFI == '' || msks_eft_bank.ACHOrigDFIName == '')
            {
                return strFmt("@SKS1010",
                  SKS_PP_Sys::getLabel(tablenum(SKS_EFT_Bank), fieldnum(SKS_EFT_Bank, ACHOrigDFI)) + '/' +
                  SKS_PP_Sys::getLabel(tablenum(SKS_EFT_Bank), fieldnum(SKS_EFT_Bank, ACHOrigDFIName)));
            }

            // Addenda 714 - RDFI Name, Qual, ID, ISOCntry
            if(sks_eft_vendorpaym.WBenBankName == '')
            {
                return strFmt("@SKS1010",
                  SKS_PP_Sys::getLabel(tablenum(SKS_EFT_VendorPaym), fieldnum(SKS_EFT_VendorPaym, WBenBankName)));
            }

            // Addenda 715 - Receiver Street
            if(sks_eft_vendorpaym.WBeneAddr == '')
            {
                return strFmt("@SKS1010",
                  SKS_PP_Sys::getLabel(tablenum(SKS_EFT_VendorPaym), fieldnum(SKS_EFT_VendorPaym, WBeneAddr)));
            }

            // Addenda 716 - Receiver City/State, Cntry/Postal
            if(sks_eft_vendorpaym.WBenBankCity == '' || sks_eft_vendorpaym.WBeneState == '')
            {
                return strFmt("@SKS1010",
                  SKS_PP_Sys::getLabel(tablenum(SKS_EFT_VendorPaym), fieldnum(SKS_EFT_VendorPaym, WBenBankCity)) + '/' +
                  SKS_PP_Sys::getLabel(tablenum(SKS_EFT_VendorPaym), fieldnum(SKS_EFT_VendorPaym, WBeneState)));
            }
            if(sks_eft_vendorpaym.WBeneCountryRegionId == '' || sks_eft_vendorpaym.WBeneZipPostal == '')
            {
                return strFmt("@SKS1010",
                  SKS_PP_Sys::getLabel(tablenum(SKS_EFT_VendorPaym), fieldnum(SKS_EFT_VendorPaym, WBeneCountryRegionId)) + '/' +
                  SKS_PP_Sys::getLabel(tablenum(SKS_EFT_VendorPaym), fieldnum(SKS_EFT_VendorPaym, WBeneZipPostal)));
            }

            //
            // Addenda 718 - Optional
            //
            // Addenda 718 - Intermediary Bank - Dep.WIntBankName/Qual/ID/SWIFT
            if(sks_eft_vendorpaym.WIntBankName == '')
            {
                return strFmt("@SKS1010",
                  SKS_PP_Sys::getLabel(tablenum(SKS_EFT_VendorPaym), fieldnum(SKS_EFT_VendorPaym, WIntBankName)));
            }
            if(sks_eft_vendorpaym.WIntBankId == '' || sks_eft_vendorpaym.WIntBankSwift == '')
            {
                return strFmt("@SKS1010",
                  SKS_PP_Sys::getLabel(tablenum(SKS_EFT_VendorPaym), fieldnum(SKS_EFT_VendorPaym, WIntBankId)) + '/' +
                  SKS_PP_Sys::getLabel(tablenum(SKS_EFT_VendorPaym), fieldnum(SKS_EFT_VendorPaym, WIntBankSwift)));
            }

            // Addenda 718 - Credit Party Bank
            if(sks_eft_vendorpaym.WCrePartyBankName == '')
            {
                return strFmt("@SKS1010",
                  SKS_PP_Sys::getLabel(tablenum(SKS_EFT_VendorPaym), fieldnum(SKS_EFT_VendorPaym, WCrePartyBankName)));
            }
        }




        if(msks_eft_bank.APACHPreNote && sks_eft_FileFormat.PreNote && sks_eft_FileFormatPaymSpec.PreNote)
        {
            preNoteStatus = SKS_EFT_Processing::GetPreNoteStatus(sks_eft_FileDetail.DepPreNoteStatus, sks_eft_FileDetail.DepPreNoteDate, msks_eftap_file.EffectiveDate);
            if(preNoteStatus != SKS_EB_PreNoteStatus::Approved)
            {
                return strFmt("@SKS1012",
                               sks_eft_FileDetail.AccountNum, sks_eft_FileDetail.AccountCompany, sks_eft_vendorpaym.VendBankAccountId);
            }
        }
        /*
        if(sks_eft_FileFormat.FormatType != SKS_EFT_FormatType::EFT)
        {
            /*
            // Intermediary Bank Qualifier
            bankQualifier = SKS_EFT_Processing::GetCustomLookupData(sks_eft_FileDetail, SKS_EFT_LookupTypes::IntBankQual, sks_eft_vendorpaym.WIntBankQualifier);            //SKS_VSTS_12814
            switch(bankQualifier)
            {
                case #BankQualifier_Id:
                    if(sks_eft_vendorpaym.WIntBankId == '')
                    {
                        return strFmt("@SKS1013",
                                      "@SKS1016", sks_eft_FileDetail.AccountNum, sks_eft_FileDetail.AccountCompany);
                    }
                    break;
                case #BankQualifier_Swift:
                    if(sks_eft_vendorpaym.WIntBankSwift == '')
                    {
                        return strFmt("@SKS1013",
                                      "@SKS1017", sks_eft_FileDetail.AccountNum, sks_eft_FileDetail.AccountCompany);
                    }
                    break;
            }
            */
        }
        else // US-ACH Format
        */
        if(sks_eft_FileFormat.FormatType == SKS_EFT_FormatType::EFT)
        {
            // EDI version is blank?
            if(sks_eft_FileDetail.PaymSpec == #PaymSpec_CCDP && sks_eft_vendorpaym.EDIVersion == SKS_EFT_EDIVersion::NotApplicable)
            {
                return strFmt("@SKS1018", sks_eft_FileDetail.AccountNum, sks_eft_FileDetail.AccountCompany);
            }
        }
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>RecordCheckBTB</Name>
				<Source><![CDATA[
    private str RecordCheckBTB(SKS_EFT_FileDetail sks_eft_FileDetail)
    {
        SKS_EFT_FileFormat sks_eft_FileFormat;
        SKS_EFT_FileFormatPaymSpec sks_eft_FileFormatPaymSpec;
        SKS_EFT_BanktoBankPaym sKS_EFT_BanktoBankPaym;
        LedgerJournalTrans ledgerJournalTrans;
        ;

        if(msks_eftbtb_bank.company()     != sks_eft_FileDetail.PaymentCompany || //FDD-10590
        msks_eftbtb_bank.BankAccountId != sks_eft_FileDetail.BankAccountId)
        {
            this.GetBTBBank(sks_eft_FileDetail.BankAccountId, sks_eft_FileDetail.PaymMode, sks_eft_FileDetail.PaymentCompany);//FDD-10590
        }

        sks_eft_FileFormat = SKS_EFT_FileFormat::find(sks_eft_FileDetail.FormatId);
        sks_eft_FileFormatPaymSpec = SKS_EFT_FileFormatPaymSpec::findByCompany(sks_eft_FileDetail.PaymentCompany ? sks_eft_FileDetail.PaymentCompany : sks_eft_FileDetail.DataAreaId,
                                                                               sks_eft_FileDetail.FormatId, sks_eft_FileDetail.PaymSpec);

        ledgerJournalTrans = LedgerJournalTrans::findRecId(sks_eft_FileDetail.PaymentLineRecId, false);

        sks_eft_IsPaymentUpload = ledgerJournalTrans.SKS_EFT_IsPaymentUpload;

        // Vendor payment
        if(sKS_EFT_BanktoBankPaym.company()  != sks_eft_FileDetail.PaymentCompany || //FDD-10590
        sKS_EFT_BanktoBankPaym.BankCompany != sks_eft_FileDetail.AccountCompany ||
           sKS_EFT_BanktoBankPaym.BankAccountId != sks_eft_FileDetail.AccountNum ||
           sKS_EFT_BanktoBankPaym.PaymMode != sks_eft_FileDetail.PaymMode ||
           sKS_EFT_BanktoBankPaym.PaymSpec != sks_eft_FileDetail.PaymSpec)
        {

            if(!sks_eft_IsPaymentUpload) //9785 SKS pmt upd
            {
                sKS_EFT_BanktoBankPaym = SKS_EFT_BanktoBankPaym::find(sks_eft_FileDetail.AccountCompany, sks_eft_FileDetail.AccountNum, sks_eft_FileDetail.PaymMode, sks_eft_FileDetail.PaymSpec); //SKS_FDD_10590
            }

            if(!sKS_EFT_BanktoBankPaym && !sks_eft_IsPaymentUpload ) //9785 SKS pmt upd
            {
                return strFmt("@SKS:SKGBTBValidationOnSetup",
                               sks_eft_FileDetail.AccountNum, sks_eft_FileDetail.AccountCompany, sks_eft_FileDetail.PaymMode, sks_eft_FileDetail.PaymSpec);
            }
            if(mReturnMsg != '')
            {
                return mReturnMsg;
            }
        }
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>RecordCheckAR</Name>
				<Source><![CDATA[
    private str RecordCheckAR(SKS_EFT_FileDetail sks_eft_FileDetail)
    {
        SKS_EFT_FileFormat sks_eft_FileFormat;
        SKS_EFT_FileFormatPaymSpec sks_eft_FileFormatPaymSpec;
        CustPaymModeTable custPaymModeTable;
        SKS_EFT_CustomerPaym sks_eft_customerPaym;
        SKS_LB_Depositor sks_lb_depositor;
        CustBankAccount custBankAccount;
        SKS_EB_PreNoteStatus preNoteStatus;
        ;

        if(msks_eft_bank.company()     != sks_eft_FileDetail.PaymentCompany || //FDD-10590
           msks_eftar_bank.BankAccountId != sks_eft_FileDetail.BankAccountId)
        {
            this.GetARBank(sks_eft_FileDetail.BankAccountId, sks_eft_FileDetail.PaymMode, sks_eft_FileDetail.PaymentCompany); //FDD-10590

            if(custPaymModeTable.PaymMode != msks_eftar_bank.PaymMode)
            {
                custPaymModeTable = CustPaymModeTable::findbycompany(msks_eftar_bank.company(),msks_eftar_bank.PaymMode);
                if(sks_eft_FileFormat.FormatId != custPaymModeTable.SKS_EFT_FormatId)
                {
                    sks_eft_FileFormat = SKS_EFT_FileFormat::find(custPaymModeTable.SKS_EFT_FormatId);
                }
            }
        }

        // Customer payment
        if(sks_eft_customerpaym.company()  != sks_eft_FileDetail.PaymentCompany || //FDD-10590
           sks_eft_customerpaym.CustCompany != sks_eft_FileDetail.AccountCompany ||
           sks_eft_customerpaym.CustAccount != sks_eft_FileDetail.AccountNum ||
           sks_eft_customerpaym.PaymMode != sks_eft_FileDetail.PaymMode ||
           sks_eft_customerpaym.PaymSpec != sks_eft_FileDetail.PaymSpec)
        {
            // LB Customer
            if(sks_lb_depositor.company()  != sks_eft_FileDetail.PaymentCompany || //FDD-10590
               sks_lb_depositor.CustomerCompany != sks_eft_FileDetail.AccountCompany ||
               sks_lb_depositor.AccountNum != sks_eft_FileDetail.AccountNum)
            {
                sks_lb_depositor = SKS_LB_Depositor::findByCompany(sks_eft_FileDetail.PaymentCompany ? sks_eft_FileDetail.PaymentCompany: sks_eft_FileDetail.DataAreaId, sks_eft_FileDetail.AccountCompany, sks_eft_FileDetail.AccountNum);//FDD-10590
                if(!sks_lb_depositor)
                {
                    return strFmt("@SKS1856",
                                   sks_eft_FileDetail.AccountNum, sks_eft_FileDetail.AccountCompany);
                }
            }

            sks_eft_customerpaym = SKS_EFT_CustomerPaym::findByCompany(sks_eft_FileDetail.PaymentCompany ? sks_eft_FileDetail.PaymentCompany: sks_eft_FileDetail.DataAreaId, sks_eft_FileDetail.AccountCompany, sks_eft_FileDetail.AccountNum, sks_eft_FileDetail.PaymMode, sks_eft_FileDetail.PaymSpec, sks_eft_FileDetail.DepBankAccountId);
            if(!sks_eft_customerpaym)
            {
                return strFmt("@SKS1855",
                               sks_eft_FileDetail.AccountNum, sks_eft_FileDetail.AccountCompany, sks_eft_FileDetail.PaymMode, sks_eft_FileDetail.PaymSpec, sks_eft_FileDetail.DepBankAccountId);
            }

            custBankAccount = CustBankAccount::findByCompany(sks_eft_Customerpaym.Custcompany, sks_eft_customerpaym.CustAccount, sks_eft_customerpaym.CustBankAccountId);

            mReturnMsg = this.ValidateCustomer(sks_lb_depositor);
            if(mReturnMsg != '')
            {
                return mReturnMsg;
            }
        }

        if(sks_eft_FileFormatPaymSpec.FormatId != sks_eft_FileFormat.FormatId ||
           sks_eft_FileFormatPaymSpec.PaymSpec != sks_eft_FileDetail.PaymSpec)
        {
            sks_eft_FileFormatPaymSpec = SKS_EFT_FileFormatPaymSpec::findByCompany(sks_eft_FileDetail.PaymentCompany ? sks_eft_FileDetail.PaymentCompany : sks_eft_FileDetail.DataAreaId, sks_eft_FileDetail.FormatId, sks_eft_FileDetail.PaymSpec);
        }

        if(msks_eftar_bank.ARACHPreNote && sks_eft_FileFormat.PreNote && sks_eft_FileFormatPaymSpec.PreNote)
        {
            preNoteStatus = SKS_EFT_Processing::GetPreNoteStatus(sks_eft_FileDetail.DepPreNoteStatus, sks_eft_FileDetail.DepPreNoteDate, msks_eftap_file.EffectiveDate);
            if(preNoteStatus != SKS_EB_PreNoteStatus::Approved)
            {
                return strFmt("@SKS1857",
                               sks_eft_FileDetail.AccountNum, sks_eft_FileDetail.AccountCompany, sks_eft_customerpaym.CustBankAccountId);
            }
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>RecordCheckCNP</Name>
				<Source><![CDATA[
    private str RecordCheckCNP(SKS_EFT_FileDetail sks_eft_FileDetail)
    {
        SKS_EFT_FileFormat sks_eft_FileFormat;
        SKS_EFT_FileFormatPaymSpec sks_eft_FileFormatPaymSpec;
        SKS_EFT_CustReimbursementPaym sks_eft_custreimbpaym;
        SKS_LB_Depositor sks_lb_depositor;
        CustBankAccount custBankAccount;
        //SKS_EB_PreNoteStatus preNoteStatus;
        //SKS_EFT_BankGateway sks_eft_BankGateWay;
        //str bankQualifier;
        LedgerJournalTrans ledgerJournalTrans;
        ;

        if(msks_eftcnp_bank.company()     != sks_eft_FileDetail.PaymentCompany || //FDD-10590
        msks_eftcnp_bank.BankAccountId != sks_eft_FileDetail.BankAccountId)
        {
            this.GetCNPBank(sks_eft_FileDetail.BankAccountId, sks_eft_FileDetail.PaymMode, sks_eft_FileDetail.PaymentCompany);//FDD-10590
        }

        sks_eft_FileFormat = SKS_EFT_FileFormat::find(sks_eft_FileDetail.FormatId);
        sks_eft_FileFormatPaymSpec = SKS_EFT_FileFormatPaymSpec::findByCompany(sks_eft_FileDetail.PaymentCompany ? sks_eft_FileDetail.PaymentCompany : sks_eft_FileDetail.DataAreaId,
                                                                               sks_eft_FileDetail.FormatId, sks_eft_FileDetail.PaymSpec);

        ledgerJournalTrans = LedgerJournalTrans::findRecId(sks_eft_FileDetail.PaymentLineRecId, false);

        //sks_eft_IsPaymentUpload = ledgerJournalTrans.SKS_EFT_IsPaymentUpload;

        // Vendor payment
        if(sks_eft_custreimbpaym.company()  != sks_eft_FileDetail.PaymentCompany || //FDD-10590
        sks_eft_custreimbpaym.CustCompany != sks_eft_FileDetail.AccountCompany ||
           sks_eft_custreimbpaym.CustAccount != sks_eft_FileDetail.AccountNum ||
           sks_eft_custreimbpaym.PaymMode != sks_eft_FileDetail.PaymMode ||
           sks_eft_custreimbpaym.PaymSpec != sks_eft_FileDetail.PaymSpec)
        {
            // EB Vendor
            if(!sks_eft_IsPaymentUpload) //9785 SKS pmt upd
            {
                if(sks_lb_depositor.company()  != sks_eft_FileDetail.PaymentCompany || //FDD-10590
                sks_lb_depositor.CustomerCompany != sks_eft_FileDetail.AccountCompany ||
                   sks_lb_depositor.AccountNum != sks_eft_FileDetail.AccountNum)
                {
                    sks_lb_depositor = SKS_LB_Depositor::findByCompany(sks_eft_FileDetail.PaymentCompany ? sks_eft_FileDetail.PaymentCompany: sks_eft_FileDetail.DataAreaId, sks_eft_FileDetail.AccountCompany, sks_eft_FileDetail.AccountNum);
                    if(!sks_lb_depositor)
                    {
                        return strFmt("@SKS1856",
                                       sks_eft_FileDetail.AccountNum, sks_eft_FileDetail.AccountCompany);
                    }
                }
            }

            sks_eft_custreimbpaym = SKS_EFT_CustReimbursementPaym::findByCompany(sks_eft_FileDetail.PaymentCompany ? sks_eft_FileDetail.PaymentCompany: sks_eft_FileDetail.DataAreaId, sks_eft_FileDetail.AccountCompany, sks_eft_FileDetail.AccountNum, sks_eft_FileDetail.PaymMode, sks_eft_FileDetail.PaymSpec, sks_eft_FileDetail.DepBankAccountId); //SKS_FDD_10590

            if(!sks_eft_custreimbpaym) //9785 SKS pmt upd
            {
                return strFmt("@SKS1855",
                               sks_eft_FileDetail.AccountNum, sks_eft_FileDetail.AccountCompany, sks_eft_FileDetail.PaymMode, sks_eft_FileDetail.PaymSpec, sks_eft_FileDetail.DepBankAccountId);
            }

            custBankAccount = CustBankAccount::findByCompany(sks_eft_custreimbpaym.CustCompany, sks_eft_custreimbpaym.CustAccount, sks_eft_custreimbpaym.CustBankAccountId);

            mReturnMsg = this.ValidateCNPCustomer(sks_lb_depositor, custBankAccount);

            if(mReturnMsg != '')
            {
                return mReturnMsg;
            }
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>SequenceNumberInit</Name>
				<Source><![CDATA[
    private void SequenceNumberInit(SKS_EFT_Module _module, RefRecId _fileRecId, RefRecID _recId = -1)
    {
        sks_eft_filePmtSelection        sks_eft_filePmtSelection; //FDD-10590 --->
        ;

        while select crosscompany:multicompaniesCon * from  sks_eft_filePmtSelection order by sks_eft_filePmtSelection.PrimaryFormat desc
            where sks_eft_filePmtSelection.FileRecId == _fileRecId || sks_eft_filePmtSelection.RecId == _recId //<--- FDD-10590
        {
            if(_module == SKS_EFT_Module::AP)
            {
                this.GetAPBank(sks_eft_filePmtSelection.PmtBankAccountId, sks_eft_filePmtSelection.PaymMode, sks_eft_filePmtSelection.Company); //FDD-10590
            }
            else
            {
                this.GetARBank(sks_eft_filePmtSelection.PmtBankAccountId, sks_eft_filePmtSelection.PaymMode, sks_eft_filePmtSelection.Company); //FDD-10590
            }

            ttsbegin;
            if(msks_eft_FileFormat.FormatType == SKS_EFT_FormatType::EFT && msks_eftap_file.JournalOption != SKS_EFT_FileJournalOption::MasterAccountList)
            {
                mReturnMsg = this.SequenceSetupACH(_module);
            }
            else
            {
                this.SequenceSetupNonACH();
            }
            ttscommit;
        }
        //FDD-10590
    }

]]></Source>
			</Method>
			<Method>
				<Name>SequenceNumberUpdate</Name>
				<Source><![CDATA[
    private void SequenceNumberUpdate(SKS_EFT_Module _module, RefRecId _fileRecId, RefRecID _recId = -1)
    {
        sks_eft_filePmtSelection        sks_eft_filePmtSelection; //FDD-10590 --->
        ;
        while select crosscompany:multicompaniesCon * from  sks_eft_filePmtSelection order by sks_eft_filePmtSelection.PrimaryFormat desc
            where sks_eft_filePmtSelection.FileRecId == _fileRecId || sks_eft_filePmtSelection.RecId == _recId
        {
            if(_module == SKS_EFT_Module::AP)
            {
                this.GetAPBank(sks_eft_filePmtSelection.PmtBankAccountId, sks_eft_filePmtSelection.PaymMode, sks_eft_filePmtSelection.Company); //FDD-10590
            }
            else
            {
                this.GetARBank(sks_eft_filePmtSelection.PmtBankAccountId, sks_eft_filePmtSelection.PaymMode, sks_eft_filePmtSelection.Company); //<--- FDD-10590
            }
            ttsbegin;
            if(msks_eft_FileFormat.FormatType == SKS_EFT_FormatType::EFT)
            {
                this.SequenceUpdateACH(_module);
            }
            else
            {
                this.SequenceUpdateNonACH(_module);
            }
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>SequenceSetupACH</Name>
				<Source><![CDATA[
    [SuppressBPWarningAttribute("BPCheckSelectForUpdateAbsent","Buffer sks_eft_ACHSequence is selected forUpdate and is passed to other methods where it is modified.")]
    private str SequenceSetupACH(SKS_EFT_Module _module)
    {
        if(_module == SKS_EFT_Module::AP)
        {
            changecompany(msks_eft_bank.company()) //FDD-10590
            {
                SKS_EFT_ACHSequence sks_eft_ACHSequence;
                select forupdate sks_eft_ACHSequence where  sks_eft_ACHSequence.ImmDest == msks_eft_bank.ACHImmDest;
                this.sks_eft_ACHSequenceImmDest(sks_eft_ACHSequence, _module);
            }
        }
        else
        {
            changecompany(msks_eftar_bank.company()) //FDD-10590
            {
                SKS_EFT_ACHSequence sks_eft_ACHSequence;
                select forupdate sks_eft_ACHSequence where  sks_eft_ACHSequence.ImmDest == msks_eftar_bank.ACHImmDest;
                this.sks_eft_ACHSequenceImmDest(sks_eft_ACHSequence, _module);
            }
        }
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>sks_eft_ACHSequenceImmDest</Name>
				<Source><![CDATA[
    public str sks_eft_ACHSequenceImmDest(SKS_EFT_ACHSequence sks_eft_ACHSequence, SKS_EFT_Module _module)
    {
        if(!sks_eft_ACHSequence)
        {
            // Create record
            sks_eft_ACHSequence.TransferDate = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());
            if(_module == SKS_EFT_Module::AP)
            {
                sks_eft_ACHSequence.ImmDest = msks_eft_bank.ACHImmDest;
            }
            else
            {
                sks_eft_ACHSequence.ImmDest = msks_eftar_bank.ACHImmDest;
            }

            sks_eft_ACHSequence.NextFileId = mNextFileId;
            sks_eft_ACHSequence.NextSequenceNumber = mNextSequenceNumber;
            sks_eft_ACHSequence.InUse = NoYes::Yes;
            sks_eft_ACHSequence.insert();
        }
        else
        {
            // See if in use
            if(sks_eft_ACHSequence.InUse == NoYes::Yes)
            {
                return "@SKS1021";
            }
            else
            {
                changecompany(sks_eft_ACHSequence.company()) //FDD-10590 --->
                {
                    sks_eft_ACHSequence.InUse = NoYes::Yes;

                    // If found, check date
                    if(sks_eft_ACHSequence.TransferDate == DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()))
                    {
                        // Date Entry is Today
                        mNextFileId = sks_eft_ACHSequence.NextFileId;
                        mNextSequenceNumber = sks_eft_ACHSequence.NextSequenceNumber;
                    }
                    else
                    {
                        // Date Entry was NOT Today - Set new Date
                        sks_eft_ACHSequence.TransferDate = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());
                        sks_eft_ACHSequence.NextFileId = 1;
                        sks_eft_ACHSequence.NextSequenceNumber = mNextSequenceNumber;
                    }
                    sks_eft_ACHSequence.update();
                }
                //<--- FDD-10590
            }
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>SequenceSetupNonACH</Name>
				<Source><![CDATA[
    private void SequenceSetupNonACH(SKS_EFT_FileDetail _sKS_EFT_FileDetail = null) //SKS_VSTS_13184
    {
        // SKS_FDD_10590 -->
        SKS_EFT_FileDetail_Extra        sks_EFT_FileDetail_Extra;
        // SKS_FDD_10590 <--
        boolean nonUSReset = false;
        ;
        if(msks_eft_FileFormat.NextDailyReset == NoYes::Yes && msks_eft_FileFormat.NextDailyResetDate != DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()))
        {
            nonUSReset = true;
        }
        // SKS_FDD_10590 -->

        if(_sKS_EFT_FileDetail.RecId)
        {
            sks_EFT_FileDetail_Extra.FieldName = 'NextFileId'; // Assign NextFileId to fileDetail_Extra
            sks_EFT_FileDetail_Extra.Value = int2Str(msks_eft_FileFormat.NextFileId);
            sks_EFT_FileDetail_Extra.RefRecId = _sKS_EFT_FileDetail.RecId;
            if(sks_EFT_FileDetail_Extra.Value == '0' || nonUSReset)
            {
                sks_EFT_FileDetail_Extra.Value = '1';
            }
            sks_EFT_FileDetail_Extra.insert();
        }

        // SKS_FDD_10590 <--
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextSequenceNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Insert nextsequence number in file detial extra table
    /// </summary>
    /// FDD-10590
    private void nextSequenceNumber()
    {
        SKS_EFT_FileDetail_Extra        lsks_eft_filedetailextra;
        SKS_EFT_SequenceNumber          lSequenceNumber;
        SKS_EFT_FileFormat              lSeqSKS_EFT_FileFormat, lSeqSKS_EFT_FileFormat1;
        SKS_EFT_FileDetail              sks_EFT_FileDetail;     //SKS_VSTS_13184
        boolean isFirst = true;
        ;

        void incrementSequenceNumber()
        {
            if(lSequenceNumber >= 9999)
            {
                lSequenceNumber = 0;
            }
            else
            {
                lSequenceNumber++;
            }
        }

        //SKS_VSTS_13184--->
        while select sks_EFT_FileDetail where
            sks_EFT_FileDetail.FileRecId == msks_eftap_file.RecId &&
            sks_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
            sks_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary
        {
            if(sks_EFT_FileDetail)
            {
                ttsbegin;
                lSeqSKS_EFT_FileFormat = SKS_EFT_FileFormat::find(sks_EFT_FileDetail.FormatId);
                lSequenceNumber = lSeqSKS_EFT_FileFormat.NextSequenceNumber;
                if(isFirst)
                {
                    incrementSequenceNumber();
                    isFirst = false;
                }
                select firstonly pessimisticlock lSeqSKS_EFT_FileFormat1
                            where lSeqSKS_EFT_FileFormat1.FormatId == lSeqSKS_EFT_FileFormat.FormatId;

                if(lSeqSKS_EFT_FileFormat1)
                {
                    lSeqSKS_EFT_FileFormat1.NextSequenceNumber = lSequenceNumber;
                    lSeqSKS_EFT_FileFormat1.update();
                
                    if(lSeqSKS_EFT_FileFormat1.NextSequenceNumber)
                    {
                        lsks_eft_filedetailextra.FieldName = 'NextSequenceNumber';
                        lsks_eft_filedetailextra.Value = int2Str(lSeqSKS_EFT_FileFormat1.NextSequenceNumber);
                        lsks_eft_filedetailextra.RefRecId  = sks_EFT_FileDetail.RecId;
                        lsks_eft_filedetailextra.insert();
                    }
                }
                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>SequenceUpdateACH</Name>
				<Source><![CDATA[
    [SuppressBPWarningAttribute("BPCheckSelectForUpdateAbsent","Buffer sks_eft_ACHSequence is selected forUpdate and is passed to other methods where it is modified.")]
    private void SequenceUpdateACH(SKS_EFT_Module _module)
    {
        If(_module == SKS_EFT_Module::AP)
        {
            changecompany(msks_eft_bank.company()) //FDD-10590
            {
                SKS_EFT_ACHSequence sks_eft_ACHSequence;
                select forupdate sks_eft_ACHSequence where  sks_eft_ACHSequence.ImmDest == msks_eft_bank.ACHImmDest;
                this.sks_eft_ACHSequenceImm(sks_eft_ACHSequence, _module);
            }
        }
        else
        {
            changecompany(msks_eftar_bank.company()) //FDD-10590
            {
                SKS_EFT_ACHSequence sks_eft_ACHSequence;
                select forupdate  sks_eft_ACHSequence where  sks_eft_ACHSequence.ImmDest == msks_eftar_bank.ACHImmDest;
                this.sks_eft_ACHSequenceImm(sks_eft_ACHSequence, _module);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sks_eft_ACHSequenceImm</Name>
				<Source><![CDATA[
    private void sks_eft_ACHSequenceImm(SKS_EFT_ACHSequence sks_eft_ACHSequence, SKS_EFT_Module _module)
    {
        if(sks_eft_ACHSequence)
        {
            sks_eft_ACHSequence.TransferDate = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());
            if(_module == SKS_EFT_Module::AP)
            {
                if(msks_eft_bank.ACHFileIDModifier == SKS_AlphaNumeric::Numeric)
                {
                    if(sks_eft_ACHSequence.NextFileId >= 9)
                    {
                        sks_eft_ACHSequence.NextFileId = 1;
                    }
                    else
                    {
                        sks_eft_ACHSequence.NextFileId = sks_eft_ACHSequence.NextFileId + 1;
                    }
                }
                else if(msks_eft_bank.ACHFileIDModifier == SKS_AlphaNumeric::Alpha)
                {
                    if(sks_eft_ACHSequence.NextFileId >= 26)
                    {
                        sks_eft_ACHSequence.NextFileId = 1;
                    }
                    else
                    {
                        sks_eft_ACHSequence.NextFileId = sks_eft_ACHSequence.NextFileId + 1;
                    }
                }
            }
            else
            {
                if(msks_eftar_bank.ACHFileIDModifier == SKS_AlphaNumeric::Numeric)
                {
                    if(sks_eft_ACHSequence.NextFileId >= 9)
                    {
                        sks_eft_ACHSequence.NextFileId = 1;
                    }
                    else
                    {
                        sks_eft_ACHSequence.NextFileId = sks_eft_ACHSequence.NextFileId + 1;
                    }
                }
                else if(msks_eftar_bank.ACHFileIDModifier == SKS_AlphaNumeric::Alpha)
                {
                    if(sks_eft_ACHSequence.NextFileId >= 26)
                    {
                        sks_eft_ACHSequence.NextFileId = 1;
                    }
                    else
                    {
                        sks_eft_ACHSequence.NextFileId = sks_eft_ACHSequence.NextFileId + 1;
                    }
                }
            }
        }

        sks_eft_ACHSequence.NextSequenceNumber = mNbrGoodRecs;
        sks_eft_ACHSequence.InUse = NoYes::No;
        sks_eft_ACHSequence.update();

    }

]]></Source>
			</Method>
			<Method>
				<Name>SequenceUpdateACHNotInUse</Name>
				<Source><![CDATA[
    private void SequenceUpdateACHNotInUse(SKS_EFT_Module _module, RefRecId _fileRecId = 0, RefRecID _recId = -1)
    {

        sks_eft_filePmtSelection        sks_eft_filePmtSelection; //FDD-10590
        ;
        if(msks_eft_FileFormat.FormatType == SKS_EFT_FormatType::EFT)
        {
            while select crosscompany:multicompaniesCon * from  sks_eft_filePmtSelection order by sks_eft_filePmtSelection.PrimaryFormat desc
            where sks_eft_filePmtSelection.FileRecId == _fileRecId || sks_eft_filePmtSelection.RecId == _recId //FDD-10590
            {
                if(_module == SKS_EFT_Module::AP)
                {
                    this.GetAPBank(sks_eft_filePmtSelection.PmtBankAccountId, sks_eft_filePmtSelection.PaymMode, sks_eft_filePmtSelection.Company); //FDD-10590
                }
                else
                {
                    this.GetARBank(sks_eft_filePmtSelection.PmtBankAccountId, sks_eft_filePmtSelection.PaymMode, sks_eft_filePmtSelection.Company); //FDD-10590
                }

                ttsbegin;

                if(_module == SKS_EFT_Module::AP)
                {
                    changecompany(msks_eftar_bank.company()) //FDD-10590
                    {
                        SKS_EFT_ACHSequence             sks_eft_ACHSequence;
                        select firstonly forupdate  sks_eft_ACHSequence where  sks_eft_ACHSequence.ImmDest == msks_eft_bank.ACHImmDest;
                        sks_eft_ACHSequence.InUse = NoYes::No;
                        sks_eft_ACHSequence.update();
                    }
                }
                else
                {
                    changecompany(msks_eft_bank.company()) //FDD-10590
                    {
                        SKS_EFT_ACHSequence             sks_eft_ACHSequence;
                        select firstonly forupdate  sks_eft_ACHSequence where  sks_eft_ACHSequence.ImmDest == msks_eftar_bank.ACHImmDest;
                        sks_eft_ACHSequence.InUse = NoYes::No;
                        sks_eft_ACHSequence.update();
                    }
                }
                ttscommit;
            }

        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>SequenceUpdateNonACH</Name>
				<Source><![CDATA[
    private void SequenceUpdateNonACH(SKS_EFT_Module _module)
    {
        SKS_EFT_FileFormat sks_eft_FileFormat;
        ;

        if(_module == SKS_EFT_Module::AP)
        {
            this.GetAPBank();
        }
        else
        {
            this.GetARBank();
        }

        select firstonly pessimisticlock sks_eft_FileFormat where  sks_eft_FileFormat.FormatId == msks_eft_FileFormat.FormatId;
        sks_eft_FileFormat.NextDailyResetDate = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());
        sks_eft_FileFormat.NextFileId = sks_eft_FileFormat.NextFileId + 1;
        sks_eft_FileFormat.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>StoreAdditionalDataFields</Name>
				<Source><![CDATA[
    protected void StoreAdditionalDataFields(System.Xml.XmlDocument _XmlSourceDocument)
    {
        System.Xml.XmlNodeList locListOfFileNodes, locListOfFieldValuesNodes, locListOfHeaderNodes,
                               locListofFieldNodes, locListOfDetailNodes, locListOfAddendaNodes;
        System.Collections.IEnumerator locEnumeratorOfFileNodes, locEnumeratorOfFieldValuesNodes,
                                        locEnumeratorOfHeaderFieldValuesNodes, locEnumeratorOfFieldNodes,
                                        locEnumeratorOfDetailFieldValuesNodes, locEnumeratorOfAddendaFieldValuesNodes;
        System.Xml.XmlDocument locCurrentFileDocument, locCurrentFieldValuesDocument,
                                locCurrentHeaderFieldValuesDocument, locCurrentDetailFieldValuesDocument,
                                locCurrentAddendaFieldValuesDocument;
        System.Xml.XmlNode locCurrentFileNode, locCurrentFieldValuesNode, locCurrentHeaderFieldValuesNode,
                            locCurrentFieldNode, locCurrentDetailFieldValuesNode, locCurrentAddendaFieldValuesNode;
        Map locRecTypes;
        str locTempValue;
        str validXML;

        int getKey(Map _map, str _value)
        {
            MapEnumerator locMapEnumerator;
            int rtnval = -1;
            ;

            locMapEnumerator = _map.getEnumerator();
            locMapEnumerator.reset();
            while(locMapEnumerator.moveNext())
            {
                if(locMapEnumerator.currentValue() == _value)
                {
                    rtnval = locMapEnumerator.currentKey();
                    break;
                }
            }
            return rtnval;

        }
        void insertRecord(SKS_EFT_FILEDATA _SKS_EFT_FileData)
        {
            SKS_EFT_FILEDATA locSKS_EFT_FileDataExisting;
            ;

            select firstonly forUpdate locSKS_EFT_FileDataExisting
                where locSKS_EFT_FileDataExisting.FieldName == _SKS_EFT_FileData.FieldName
                && locSKS_EFT_FileDataExisting.RefRecId == _SKS_EFT_FIleData.RefRecId
                && locSKS_EFT_FileDataExisting.RecType == _SKS_EFT_FileData.RecType;
            if(locSKS_EFT_FileDataExisting)
            {
                ttsBegin;
                locSKS_EFT_FileDataExisting.FieldValue = _SKS_EFT_FileData.FieldValue;
                locSKS_EFT_FileDataExisting.update();
                ttsCommit;
            }
            else
            {
                _SKS_EFT_FileData.insert();
            }
        }

        void processField(System.Xml.XmlNode _FieldNode, System.Xml.XmlNode _ParentNode)
        {
            System.Xml.XmlDocument locFieldDocument;
            System.Xml.XmlNodeList locTempNodeList;
            System.Collections.IEnumerator locTempEnumerator;
            System.Xml.XmlNode locTempNode;
            SKS_EFT_FILEDATA locSKS_EFT_FileData;
            str locTempStr;

            ;

            locFieldDocument = new System.Xml.XmlDocument();
            locFieldDocument.LoadXml(_FieldNode.get_OuterXml());
            locTempNodeList = locFieldDocument.GetElementsByTagName('Name');
            locTempEnumerator = locTempNodeList.GetEnumerator();
            while(locTempEnumerator.MoveNext())
            {
                locTempNode = locTempEnumerator.get_Current();
                locSKS_EFT_FileData.FieldName = locTempNode.get_InnerText();
            }
            locTempNodeList = locFieldDocument.GetElementsByTagName('Value');
            locTempEnumerator = locTempNodeList.GetEnumerator();
            while(locTempEnumerator.MoveNext())
            {
                locTempNode = locTempEnumerator.get_Current();
                locSKS_EFT_FileData.FieldValue = locTempNode.get_InnerText();
            }
            locTempNodeList = locFieldDocument.GetElementsByTagName('RefRecId');
            locTempEnumerator = locTempNodeList.GetEnumerator();
            while(locTempEnumerator.MoveNext())
            {
                locTempNode = locTempEnumerator.get_Current();
                locTempStr = locTempNode.get_InnerText();
                locSKS_EFT_FileData.RefRecId = str2int64(locTempStr);
            }
            locTempStr = _ParentNode.get_Name();
            locSKS_EFT_FileData.RecType = getKey(locRecTypes, locTempStr);
            insertRecord(locSKS_EFT_FileData);
        }
        ;

        validXML = _XmlSourceDocument.get_InnerXml();

        if(validXML != '')
        {
            locRecTypes = new Map(Types::Integer, Types::String);
            locRecTypes.insert(0,'HeaderFieldValues');
            locRecTypes.insert(1,'DetailFieldValues');
            locRecTypes.insert(2,'AddendaFieldValues');

            locListOfFileNodes = _XmlSourceDocument.GetElementsByTagName('File');
            locEnumeratorOfFileNodes = locListOfFileNodes.GetEnumerator();
            while(locEnumeratorOfFileNodes.MoveNext())
            {
                locCurrentFileNode = locEnumeratorOfFileNodes.get_Current();//get the current File node
                locCurrentFileDocument = new System.Xml.XmlDocument();
                locCurrentFileDocument.LoadXml(locCurrentFileNode.get_OuterXml());
                locListOfFieldValuesNodes = locCurrentFileDocument.GetElementsByTagName('FieldValues');
                locEnumeratorOfFieldValuesNodes = locListOfFieldValuesNodes.GetEnumerator();
                while(locEnumeratorOfFieldValuesNodes.MoveNext())
                {
                    locCurrentFieldValuesNode = locEnumeratorOfFieldValuesNodes.get_Current();
                    locCurrentFieldValuesDocument = new System.Xml.XmlDocument();
                    locCurrentFieldValuesDocument.LoadXml(locCurrentFieldValuesNode.get_OuterXml());
                    locTempValue = locRecTypes.lookup(0);
                    locListOfHeaderNodes = locCurrentFieldValuesDocument.GetElementsByTagName(locTempValue);
                    locEnumeratorOfHeaderFieldValuesNodes = locListOfHeaderNodes.GetEnumerator();
                    while(locEnumeratorOfHeaderFieldValuesNodes.MoveNext())
                    {
                        locCurrentHeaderFieldValuesNode = locEnumeratorOfHeaderFieldValuesNodes.get_Current();
                        locCurrentHeaderFieldValuesDocument = new System.Xml.XmlDocument();
                        locCurrentHeaderFieldValuesDocument.LoadXml(locCurrentHeaderFieldValuesNode.get_OuterXml());
                        locListofFieldNodes = locCurrentHeaderFieldValuesDocument.GetElementsByTagName('Field');
                        locEnumeratorOfFieldNodes = locListofFieldNodes.GetEnumerator();
                        while(locEnumeratorOfFieldNodes.MoveNext())
                        {
                            locCurrentFieldNode = locEnumeratorOfFieldNodes.get_Current();
                            processField(locCurrentFieldNode, locCurrentHeaderFieldValuesNode);
                        }
                    }
                    locTempValue = locRecTypes.lookup(1);
                    locListOfDetailNodes = locCurrentFieldValuesDocument.GetElementsByTagName(locTempValue);
                    locEnumeratorOfDetailFieldValuesNodes = locListOfDetailNodes.GetEnumerator();
                    while(locEnumeratorOfDetailFieldValuesNodes.MoveNext())
                    {
                        locCurrentDetailFieldValuesNode = locEnumeratorOfDetailFieldValuesNodes.get_Current();
                        locCurrentDetailFieldValuesDocument = new System.Xml.XmlDocument();
                        locCurrentDetailFieldValuesDocument.LoadXml(locCurrentDetailFieldValuesNode.get_OuterXml());
                        locListofFieldNodes = locCurrentDetailFieldValuesDocument.GetElementsByTagName('Field');
                        locEnumeratorOfFieldNodes = locListofFieldNodes.GetEnumerator();
                        while(locEnumeratorOfFieldNodes.MoveNext())
                        {
                            locCurrentFieldNode = locEnumeratorOfFieldNodes.get_Current();
                            processField(locCurrentFieldNode, locCurrentDetailFieldValuesNode);
                        }
                    }
                    locTempValue = locRecTypes.lookup(2);
                    locListOfAddendaNodes = locCurrentFieldValuesDocument.GetElementsByTagName(locTempValue);
                    locEnumeratorOfAddendaFieldValuesNodes = locListOfAddendaNodes.GetEnumerator();
                    while(locEnumeratorOfAddendaFieldValuesNodes.MoveNext())
                    {
                        locCurrentAddendaFieldValuesNode = locEnumeratorOfAddendaFieldValuesNodes.get_Current();
                        locCurrentAddendaFieldValuesDocument = new System.Xml.XmlDocument();
                        locCurrentAddendaFieldValuesDocument.LoadXml(locCurrentAddendaFieldValuesNode.get_OuterXml());
                        locListofFieldNodes = locCurrentAddendaFieldValuesDocument.GetElementsByTagName('Field');
                        locEnumeratorOfFieldNodes = locListofFieldNodes.GetEnumerator();
                        while(locEnumeratorOfFieldNodes.MoveNext())
                        {
                            locCurrentFieldNode = locEnumeratorOfFieldNodes.get_Current();
                            processField(locCurrentFieldNode, locCurrentAddendaFieldValuesNode);
                        }
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>SumByInvoice</Name>
				<Source><![CDATA[
    private void SumByInvoice(SKS_EFT_FileDetail fileDetailDistinct)
    {
        SKS_EFT_FileDetail fileDetailTotals;
        LedgerJournalTrans ledgerJournalTrans;
        SpecTrans lSpecTrans;
        ;

        select forupdate fileDetailTotals
            where
                fileDetailTotals.FileRecId == msks_eftap_file.RecId &&
                fileDetailTotals.BankAccountId == fileDetailDistinct.BankAccountId &&
                fileDetailTotals.AccountNum == fileDetailDistinct.AccountNum &&
                fileDetailTotals.PaymMode == fileDetailDistinct.PaymMode &&
                fileDetailTotals.DepBankAccountId == fileDetailDistinct.DepBankAccountId &&
                fileDetailTotals.PaymSpec == fileDetailDistinct.PaymSpec;

        while(fileDetailTotals)
        {
            ttsbegin;

            //SKS_FDD_10590 -->
            changecompany(fileDetailTotals.PaymentCompany ? fileDetailTotals.PaymentCompany : fileDetailTotals.DataAreaId)
            {
                lSpecTrans = null;
                ledgerJournalTrans = null;

                // If there is more than one invoice attached to a payment the payment reference number cannot
                // be pushed back to the payment line since there will be multiple.
                // First determine if more than one invoice is attached.
                select crosscompany count(RecId) from lSpecTrans where lSpecTrans.specrecid == fileDetailTotals.PaymentLineRecId;
                if(lSpecTrans.RecId <= 1)
                {
                    select firstonly forupdate ledgerJournalTrans
                        where
                        ledgerJournalTrans.RecId == fileDetailTotals.PaymentLineRecId;

                    // If there is an existing PaymReference it will be used, otherwise use the number sequence to get the next number
                    if(ledgerJournalTrans.PaymReference == '')
                    {
                        if(msks_eftap_file.EFTFileType == SKS_EFT_Module::AP || msks_eftap_file.EFTFileType == SKS_EFT_Module::APValidation)
                        {
                            ledgerJournalTrans.PaymReference = NumberSeq::newGetNum(SKS_PP_Setup::numRefAPEFTPlusPaymentReferenceNumber()).num();
                        }
                        else
                        {
                            ledgerJournalTrans.PaymReference = NumberSeq::newGetNum(SKS_PP_Setup::numRefAREFTPlusPaymentReferenceNumber()).num();
                        }
                        ledgerJournalTrans.update();

                    }
                }
            }
            if(lSpecTrans.RecId <= 1)
            {
                fileDetailTotals.PaymentReference = ledgerJournalTrans.PaymReference;
            }
            //SKS_FDD_10590 <--
            else
            {
                if(msks_eftap_file.EFTFileType == SKS_EFT_Module::AP || msks_eftap_file.EFTFileType == SKS_EFT_Module::APValidation)
                {
                    fileDetailTotals.PaymentReference = NumberSeq::newGetNum(SKS_PP_Setup::numRefAPEFTPlusPaymentReferenceNumber()).num();
                }
                else
                {
                    fileDetailTotals.PaymentReference = NumberSeq::newGetNum(SKS_PP_Setup::numRefAREFTPlusPaymentReferenceNumber()).num();
                }
            }

            this.SequenceSetupNonACH(fileDetailTotals); //SKS_VSTS_13184

            fileDetailTotals.update();
            ttscommit;
            next fileDetailTotals;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>SumByPayment</Name>
				<Source><![CDATA[
    [SuppressBPWarning('BPCheckInsertMethodInLoop','This cannot be a Record Insert List.  You have to insert these as you go, because SumUpdateNonSummary depends on this file being there.')]
    private void SumByPayment(SKS_EFT_FileDetail fileDetailDistinct, SKS_EFT_FileDetail fileDetailInsert, NoYes _useCheckNumber, SKS_EFT_Module _module)
    {
        SKS_EFT_FileDetail fileDetailTotals;
        LedgerJournalTrans ledgerJournalTrans;      //SKS_VSTS_14074
        ;

        // Total records based on summary level
        select
                sum(InvoiceDiscAmountPmtCur),
                sum(InvoiceOrigAmountCur),
                sum(InvoiceSettleAmountMST),
                sum(InvoiceSettleAmountPmtCur),
                minof(PaymentCompany),
                minof(PaymentCurrencyCode),
                minof(PaymentTransDate),
                minof(PaymentVoucher),
                minof(PaymentJournalNum),
                minOf(PaymentLineRecId),
                EffectiveDate,
                EFTAP_IHBBankAccount //SKS 9615
            from fileDetailTotals
                group by fileDetailTotals.BankAccountId, fileDetailTotals.AccountNum,
                        fileDetailTotals.AccountCompany, fileDetailTotals.PaymMode,
                        fileDetailTotals.PaymSpec, fileDetailTotals.DepBankAccountId,
                        fileDetailTotals.PaymentLineRecId, fileDetailTotals.EffectiveDate,
                        fileDetailTotals.EFTAP_IHBBankAccount //SKS 9615
            where
              fileDetailTotals.FileRecId == msks_eftap_file.RecId &&
              fileDetailTotals.BankAccountId == fileDetailDistinct.BankAccountId &&
              fileDetailTotals.AccountNum == fileDetailDistinct.AccountNum &&
              fileDetailTotals.AccountCompany == fileDetailDistinct.AccountCompany &&
              fileDetailTotals.PaymMode == fileDetailDistinct.PaymMode &&
              fileDetailTotals.DepBankAccountId == fileDetailDistinct.DepBankAccountId &&
              fileDetailTotals.PaymSpec == fileDetailDistinct.PaymSpec;

        while( fileDetailTotals )
        {
            // Apply summed totals to template record
            fileDetailInsert.InvoiceDiscAmountPmtCur = fileDetailTotals.InvoiceDiscAmountPmtCur;
            fileDetailInsert.InvoiceOrigAmountCur = fileDetailTotals.InvoiceOrigAmountCur;
            fileDetailInsert.InvoiceSettleAmountMST = fileDetailTotals.InvoiceSettleAmountMST;
            fileDetailInsert.InvoiceSettleAmountPmtCur = fileDetailTotals.InvoiceSettleAmountPmtCur;

            fileDetailInsert.PaymentCompany = fileDetailTotals.PaymentCompany;
            fileDetailInsert.PaymentCurrencyCode = fileDetailTotals.PaymentCurrencyCode;
            fileDetailInsert.PaymentTransDate = fileDetailTotals.PaymentTransDate;
            fileDetailInsert.PaymentVoucher = fileDetailTotals.PaymentVoucher;
            fileDetailInsert.PaymentJournalNum = fileDetailTotals.PaymentJournalNum;
            fileDetailInsert.PaymentLineRecId = fileDetailTotals.PaymentLineRecId;
            fileDetailInsert.EffectiveDate = fileDetailTotals.EffectiveDate;
            fileDetailInsert.EFTAP_IHBBankAccount = fileDetailTotals.EFTAP_IHBBankAccount; //SKS 9615

            // Blank out fields not needed in summary
            fileDetailInsert.InvoiceCompany = '';
            fileDetailInsert.InvoiceCurrencyCode = '';
            fileDetailInsert.InvoiceDate = Global::dateNull();
            fileDetailInsert.InvoiceExchRate = 0;
            fileDetailInsert.InvoiceNumber = '';
            fileDetailInsert.InvoiceVoucherNumber = '';
            fileDetailInsert.InvoiceTransactionTxt = '';
            fileDetailInsert.InvoiceDiscAmountCur = 0;
            fileDetailInsert.InvoiceSettleAmountCur = 0;
            fileDetailInsert.VendTransRecId = 0;
            fileDetailInsert.RecordSummary = SKS_EFT_RecordSummary::Payment;
            if(fileDetailInsert.RecordType != SKS_EFT_RecordType::FieldValidations) //Bug-11967
            {
                this.Update_PaymentReference(_useCheckNumber, fileDetailInsert,msks_eftap_file.EFTFileType );
            }

            //SKS_VSTS_14074--->
            ledgerJournalTrans = LedgerJournalTrans::findByCompany(fileDetailInsert.PaymentCompany ? fileDetailInsert.PaymentCompany : fileDetailInsert.DataAreaId, fileDetailInsert.PaymentLineRecId, false);

            fileDetailInsert.PaymId = ledgerJournalTrans.PaymId;
            fileDetailInsert.PaymentNotes = ledgerJournalTrans.PaymentNotes;
            //SKS_VSTS_14074<---

            fileDetailInsert.NeedsRebuilt = NoYes::No; //SKS_FDD_21456

            fileDetailInsert.insert();

            this.SequenceSetupNonACH(fileDetailInsert); //SKS_VSTS_13184

            if(_module == SKS_EFT_Module::BTB || _module == SKS_EFT_Module::BTBValidation)
            {
                SKS_EFT_Processing::BuildBTBUploadBankFields(fileDetailInsert, LedgerJournalTrans::findByCompany(fileDetailInsert.PaymentCompany ? fileDetailInsert.PaymentCompany : fileDetailInsert.DataAreaId, fileDetailInsert.PaymentLineRecId, false));
                SKS_EFT_Processing::BuildBTBMultiCompFields(fileDetailInsert, LedgerJournalTrans::findByCompany(fileDetailInsert.PaymentCompany ? fileDetailInsert.PaymentCompany : fileDetailInsert.DataAreaId, fileDetailInsert.PaymentLineRecId, false));//FDD-10590
            }
            else if(_module == SKS_EFT_Module::CNP || _module == SKS_EFT_Module::CNPValidation)
            {
                SKS_EFT_Processing::BuildUploadCNPCustomerFields(fileDetailInsert, LedgerJournalTrans::findByCompany(fileDetailInsert.PaymentCompany ? fileDetailInsert.PaymentCompany : fileDetailInsert.DataAreaId, fileDetailInsert.PaymentLineRecId, false));

                SKS_EFT_Processing::BuildCNPMultiCompFields(fileDetailInsert, LedgerJournalTrans::findByCompany(fileDetailInsert.PaymentCompany ? fileDetailInsert.PaymentCompany : fileDetailInsert.DataAreaId, fileDetailInsert.PaymentLineRecId, false));//FDD-10590
            }
            else
            {
                SKS_EFT_Processing::BuildUploadVendorFields(fileDetailInsert, LedgerJournalTrans::findByCompany(fileDetailInsert.PaymentCompany ? fileDetailInsert.PaymentCompany : fileDetailInsert.DataAreaId, fileDetailInsert.PaymentLineRecId, false));

                SKS_EFT_Processing::BuildMultiCompFields(fileDetailInsert, LedgerJournalTrans::findByCompany(fileDetailInsert.PaymentCompany ? fileDetailInsert.PaymentCompany : fileDetailInsert.DataAreaId, fileDetailInsert.PaymentLineRecId, false));//FDD-10590
            }

            this.SumUpdateNonSummary(fileDetailTotals, fileDetailInsert.RecId);
            next fileDetailTotals;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>SumUpdateNonSummary</Name>
				<Source><![CDATA[
    private void SumUpdateNonSummary(SKS_EFT_FileDetail _fileDetailDistinct, RefRecId _RecordSummaryRecId)
    {
        SKS_EFT_FileDetail fileDetailNonSummary;
        ;
        // Set Invoice records to non summary if records are being summarized
        update_recordset fileDetailNonSummary
            setting RecordSummary = SKS_EFT_RecordSummary::NonSummary,
                    RecordSummaryRecId = _RecordSummaryRecId
            where
              fileDetailNonSummary.FileRecId == msks_eftap_file.RecId &&
              fileDetailNonSummary.BankAccountId == _fileDetailDistinct.BankAccountId &&
              fileDetailNonSummary.AccountNum == _fileDetailDistinct.AccountNum &&
              fileDetailNonSummary.AccountCompany == _fileDetailDistinct.AccountCompany &&
              fileDetailNonSummary.PaymMode == _fileDetailDistinct.PaymMode &&
              fileDetailNonSummary.PaymSpec == _fileDetailDistinct.PaymSpec &&
              fileDetailNonSummary.RecordSummary == SKS_EFT_RecordSummary::Invoice &&
              fileDetailNonSummary.PaymentLineRecId == _fileDetailDistinct.PaymentLineRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>SumWorkingTable</Name>
				<Source><![CDATA[
    private void SumWorkingTable(SKS_EFT_Module _module)
    {
        SKS_EFT_FileDetail fileDetailDistinct;
        SKS_EFT_FileDetail fileDetailTemplate;
        SKS_EFT_FileDetail fileDetailInsert;
        SKS_EFT_VendorRecordSummary recordSummary;
        SKS_EFT_FileFormatPaymSpec sks_eft_FileFormatPaymSpec;

        ;
        // Determine unique combinations
        while select
         minof(DepBankAccountId),
         minof(BankAccountId),
         minof(AccountNum),
         minof(AccountCompany),
         minof(PaymMode),
         minof(PaymSpec),
         minof(RecId),
         minof(DepRecord),
         minof(RecordType)//SKS_Bug_11967
          from fileDetailDistinct
           group by fileDetailDistinct.DepBankAccountId,
                    fileDetailDistinct.BankAccountId,
                    fileDetailDistinct.AccountNum,
                    fileDetailDistinct.AccountCompany,
                    fileDetailDistinct.PaymMode,
                    fileDetailDistinct.PaymSpec
            where fileDetailDistinct.RecordSummary == SKS_EFT_RecordSummary::Invoice &&
                  fileDetailDistinct.FileRecId == msks_eftap_file.RecId
        {

            recordSummary = fileDetailDistinct.DepRecord;
            if(recordSummary == SKS_EFT_VendorRecordSummary::Payment)
            {
                // Select one of the unique combos to use as a template
                select firstonly * from fileDetailTemplate where fileDetailTemplate.RecId == fileDetailDistinct.RecId;
                buf2buf(fileDetailTemplate, fileDetailInsert);

                // See if using check number
                if(sks_eft_FileFormatPaymSpec.PaymSpec != fileDetailInsert.PaymSpec ||
                   sks_eft_FileFormatPaymSpec.FormatId != fileDetailInsert.FormatId)
                {
                    select firstonly FormatId, PaymSpec, UseCheckNumber from sks_eft_FileFormatPaymSpec where
                        sks_eft_FileFormatPaymSpec.PaymSpec == fileDetailInsert.PaymSpec &&
                        sks_eft_FileFormatPaymSpec.FormatId == fileDetailInsert.FormatId;
                }

                this.SumByPayment(fileDetailDistinct, fileDetailInsert, sks_eft_FileFormatPaymSpec.UseCheckNumber, _module);
            }
            else
            {
                if(fileDetailDistinct.RecordType != SKS_EFT_RecordType::FieldValidations) //Bug-11967
                {
                    this.SumByInvoice(fileDetailDistinct);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>Update_LedgerJournalTrans_StatusSent</Name>
				<Source><![CDATA[
    void Update_LedgerJournalTrans_StatusSent()
    {
        LedgerJournalTrans ledgerJournalTrans;
        SKS_EFT_FileDetail sks_eft_FileDetail;
        ;

        // Don't update if this is a test file
        if(msks_eftap_file.JournalOption == SKS_EFT_FileJournalOption::TestFile)
        {
            return;
        }

        ttsbegin;

        while select PaymentLineRecId, PaymentCompany from sks_eft_FileDetail
         group by PaymentLineRecId, PaymentCompany //FDD-10590
         where
          ((sks_eft_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments && !msks_eftap_file.FXAProcessing) ||
          (sks_eft_FileDetail.RecordSection == SKS_EFT_RecordSection::FXAllVendor && msks_eftap_file.FXAProcessing)) &&
          sks_eft_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary &&
          sks_eft_FileDetail.FileRecId == msks_eftap_file.RecId
        {
            changecompany (sks_eft_FileDetail.PaymentCompany ? sks_eft_FileDetail.PaymentCompany: sks_eft_FileDetail.DataAreaId)//FDD-10590
            {
                ledgerJournalTrans = null; // SKS_FDD_10590

                select firstonly forupdate ledgerJournalTrans
                 where
                  ledgerJournalTrans.RecId == sks_eft_FileDetail.PaymentLineRecId &&
                  (ledgerJournalTrans.SKS_EFT_APPmtSelectionRecId != 0 ||
                  ledgerJournalTrans.SKS_EFT_BTBPmtSelectionRecId != 0 ||
                  ledgerJournalTrans.SKS_EFT_CNPPmtSelectionRecId != 0 ||
                  ledgerJournalTrans.SKS_EFT_ARPmtSelectionRecId != 0) &&
                  ledgerJournalTrans.PaymentStatus == CustVendPaymStatus::None;

                if(ledgerJournalTrans)
                {
                    ledgerJournalTrans.PaymentStatus = CustVendPaymStatus::Sent;
                    ledgerJournalTrans.doUpdate();
                }
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>Update_PaymentReference</Name>
				<Source><![CDATA[
    private void Update_PaymentReference(NoYes _useCheckNumber, SKS_EFT_FileDetail _fileDetailInsert, SKS_EFT_Module _module)
    {
        LedgerJournalTrans ledgerJournalTrans;
        BankChequeNum chequeNum;
        CustVendCheque custVendCheque;
        BankNegInstRecipientName recipientName;
        SKS_EFT_VendorPaym SKS_EFT_VendorPaym;
        ;
        // Module should always by AP or AR
        // Module APValidation and ARValidation should not be passed into this method
        if(_module == SKS_EFT_Module::APValidation || _module == SKS_EFT_Module::ARValidation)
        {
            return;
        }

        changecompany (_fileDetailInsert.PaymentCompany ? _fileDetailInsert.PaymentCompany : _fileDetailInsert.DataAreaId) //FDD-10590
        {
            select forupdate ledgerJournalTrans
             where
              ledgerJournalTrans.RecId == _fileDetailInsert.PaymentLineRecId;
        }

        _useCheckNumber = this.getUseCheckNumber(_fileDetailInsert, _useCheckNumber); //SKS_DEvOps_17119

        if(!_useCheckNumber)
        {
            // If no reference number is assigned to ledgerjournaltrans, create one
            // If a reference number is assigned, it will be used
            if(ledgerJournalTrans.PaymReference == '')
            {
                ttsbegin;
                if(_module == SKS_EFT_Module::AP)
                {
                    ledgerJournalTrans.PaymReference = NumberSeq::newGetNum(SKS_PP_Setup::numRefAPEFTPlusPaymentReferenceNumber()).num();
                }
                else if(_module == SKS_EFT_Module::BTB)
                {
                    ledgerJournalTrans.PaymReference = NumberSeq::newGetNum(SKS_PP_Setup::numRefBTBPaymentReferenceNumber()).num();
                }
                else if(_module == SKS_EFT_Module::CNP)
                {
                    ledgerJournalTrans.PaymReference = NumberSeq::newGetNum(SKS_PP_Setup::numRefCNPPaymentReferenceNumber()).num();
                }
                else
                {
                    ledgerJournalTrans.PaymReference = NumberSeq::newGetNum(SKS_PP_Setup::numRefAREFTPlusPaymentReferenceNumber()).num();
                }

                _fileDetailInsert.PaymentReference = ledgerJournalTrans.PaymReference;
                changecompany (ledgerJournalTrans.Company()) //FDD-10590
                {
                    ledgerJournalTrans.doUpdate();
                }
                ttscommit;
            }
        }
        else
        {
            // If no check number is assigned to ledgerjournaltrans, create one
            // If a check number is assigned, it will be used
            if(ledgerJournalTrans.BankChequeNum == '')
            {
                changecompany (ledgerJournalTrans.Company()) //FDD-10590
                {
                    ttsbegin;

                    // New
                    custVendCheque = new CustVendCheque();

                    // Set class parameters
                    custVendCheque.parmAccountId            (_fileDetailInsert.BankAccountId);
                    custVendCheque.parmFirstChequeNum       (0);
                    custVendCheque.parmNumOfBlankCheque     (0);
                    custVendCheque.parmChequeNumMethod      (0);
                    if(_module == SKS_EFT_Module::AP)
                    {
                        custVendCheque.parmLedgerJournalACType  (LedgerJournalACType::Vend);

                        select firstOnly WBeneName, FormatId from SKS_EFT_VendorPaym where
                            SKS_EFT_VendorPaym.VendCompany == _fileDetailInsert.AccountCompany &&
                            SKS_EFT_VendorPaym.VendAccount == _fileDetailInsert.AccountNum &&
                            SKS_EFT_VendorPaym.PaymMode == _fileDetailInsert.PaymMode &&
                            SKS_EFT_VendorPaym.PaymSpec == _fileDetailInsert.PaymSpec &&
                            SKS_EFT_VendorPaym.VendBankAccountId == _fileDetailInsert.DepBankAccountId;

                        if(SKS_EFT_VendorPaym.WBeneName != '')
                        {
                            recipientName = SKS_EFT_VendorPaym.WBeneName;
                        }
                        else
                        {
                            recipientName = _fileDetailInsert.AccountName;
                        }

                        if(SKS_EFT_VendorPaym.FormatId == 'US-BOA-EDI820')
                        {
                            recipientName = subStr(recipientName,1,70);
                        }
                        else if(SKS_EFT_VendorPaym.FormatId == 'US-BOA-CHK-EDI820')
                        {
                            recipientName = subStr(recipientName,1,35);
                        }
                    }
                    else
                    {
                        custVendCheque.parmLedgerJournalACType  (LedgerJournalACType::Cust);

                        recipientName = _fileDetailInsert.AccountName;
                    }

                    // Determine check number
                    custVendCheque.initChequeNumEx(true);

                    // Creates check and set LedgerJournalTrans fielda
                    chequeNum = custVendCheque.processChequeNum(ledgerJournalTrans);

                    // Update check with payment data
                    BankChequeTable::setChequeStatus(_fileDetailInsert.BankAccountId,
                                                     chequeNum,
                                                     ChequeStatus::Payment,
                                                     ledgerJournalTrans.TransDate,
                                                     ledgerJournalTrans.Voucher,
                                                     CustVendCheque::ledgerJournalACType2RecipientType(ledgerJournalTrans.AccountType),
                                                     ledgerJournalTrans.Company,
                                                     ledgerJournalTrans.parmAccount(),
                                                     ledgerJournalTrans.CurrencyCode,
                                                     ledgerJournalTrans.AmountCurDebit,
                                                     recipientName,
                                                     ledgerJournalTrans.RemittanceAddress);

                    ledgerJournalTrans.update();
                }
                ttscommit;
            }
        }
        // Set FileDetail payment reference to payment reference of ledgerjournaltrans
        _fileDetailInsert.PaymentReference = ledgerJournalTrans.PaymReference;

    }

]]></Source>
			</Method>
			<Method>
				<Name>Update_SKS_EFT_FileDetail</Name>
				<Source><![CDATA[
    private void Update_SKS_EFT_FileDetail(SKS_EFT_FileStatus _keepDeleteStatus)
    {
        SKS_EFT_FileDetail sks_eft_FileDetail;
        ;

        update_recordset sks_eft_FileDetail
            setting FileStatus = _keepDeleteStatus
            where
              sks_eft_FileDetail.FileRecId == msks_eftap_file.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>Update_SKS_EFTAP_File_CommID</Name>
				<Source><![CDATA[
    private void Update_SKS_EFTAP_File_CommID(SKS_EB_CommID _SKS_EB_CommID)
    {
        ttsbegin;
        RefRecId                fileRecId = msks_eftap_file.RecId;
        select forupdate msks_eftap_file where msks_eftap_file.RecId == fileRecId;
        if(msks_eftap_file)
        {
            msks_eftap_file.CommID = _SKS_EB_CommID;
            msks_eftap_file.update();
        }
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>Update_SKS_EFTAP_File_FileStatus</Name>
				<Source><![CDATA[
    //    '===============================================================================
    //    ' update SKS_EFTAP_File
    //    '
    //    ' Parameters
    //    '   Keep                I   True - Being called as part of Keep
    //    '                       I   False - Being called as part of Delete
    //    '   KeepDeleteStatus    I   Status to set

    public void Update_SKS_EFTAP_File_FileStatus(SKS_EFT_FileStatus _keepDeleteStatus, SKS_EFT_Module _module, NoYes _isadvance = NoYes::No) // 9205 CR
    {
        SKS_EFT_FileHistory     SKS_EFT_FileHistory;
        

        ttsbegin;
        // Update SKS_PP_File    
        RefRecId                fileRecId = msks_eftap_file.RecId;
        select forupdate msks_eftap_file where msks_eftap_file.RecId == fileRecId;
        

        // 9205 CR -->
        if(!msks_eft_Setup)
        {
            msks_eft_Setup = SKS_EFT_Setup::find();
        }
        // 9205 CR <--
        if(msks_eftap_file)
        {
            if(_module == SKS_EFT_Module::AP)
            {
                If (_keepDeleteStatus == SKS_EFT_FileStatus::Completed || _keepDeleteStatus == SKS_EFT_FileStatus::CompletedNoEmail || _keepDeleteStatus == SKS_EFT_FileStatus::CompletedEmailPending)
                {
                    select firstonly forupdate SKS_EFT_FileHistory where SKS_EFT_FileHistory.OutboundFileRecId == msks_eftap_file.RecId && SKS_EFT_FileHistory.OutboundStatus == sks_eft_filestatus::CompletedNoEmail;
                    if(SKS_EFT_FileHistory)
                    {
                        SKS_EFT_FileHistory.OutboundStatus = _keepDeleteStatus;
                        SKS_EFT_FileHistory.update();
                    }
                    msks_eftap_file.TransmitDate = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());
                    if(msks_eft_Setup.APWhenMarkSent == SKS_EFT_WhenMarkSent::Completion)
                    {
                        this.Update_LedgerJournalTrans_StatusSent();
                    }
                }
                else if(_keepDeleteStatus == SKS_EFT_FileStatus::FileCreated && msks_eft_Setup.APWhenMarkSent == SKS_EFT_WhenMarkSent::FileCreation) //10588
                {
                    this.Update_LedgerJournalTrans_StatusSent();
                }
                else if(_keepDeleteStatus == SKS_EFT_FileStatus::Transmitted)
                {
                    mSKS_EFTAP_File.TransmitDateTime = DateTimeUtil::utcNow();
                }
            }
            else if(_module == SKS_EFT_Module::BTB)
            {
                If (_keepDeleteStatus == SKS_EFT_FileStatus::Completed || _keepDeleteStatus == SKS_EFT_FileStatus::CompletedNoEmail || _keepDeleteStatus == SKS_EFT_FileStatus::CompletedEmailPending)
                {
                    msks_eftap_file.TransmitDate = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());
                    if(msks_eft_Setup.BTBWhenMarkSent == SKS_EFT_WhenMarkSent::Completion)
                    {
                        this.Update_LedgerJournalTrans_StatusSent();
                    }
                }
                else if(_keepDeleteStatus == SKS_EFT_FileStatus::FileCreated && msks_eft_Setup.BTBWhenMarkSent == SKS_EFT_WhenMarkSent::FileCreation) //10588
                {
                    this.Update_LedgerJournalTrans_StatusSent();
                }
                else if(_keepDeleteStatus == SKS_EFT_FileStatus::Transmitted)
                {
                    mSKS_EFTAP_File.TransmitDateTime = DateTimeUtil::utcNow();
                }
            }
            else if(_module == SKS_EFT_Module::CNP)
            {
                If (_keepDeleteStatus == SKS_EFT_FileStatus::Completed || _keepDeleteStatus == SKS_EFT_FileStatus::CompletedNoEmail || _keepDeleteStatus == SKS_EFT_FileStatus::CompletedEmailPending)
                {
                    msks_eftap_file.TransmitDate = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());
                    if(msks_eft_Setup.CNPWhenMarkSent == SKS_EFT_WhenMarkSent::Completion)
                    {
                        this.Update_LedgerJournalTrans_StatusSent();
                    }
                }
                else if(_keepDeleteStatus == SKS_EFT_FileStatus::FileCreated && msks_eft_Setup.CNPWhenMarkSent == SKS_EFT_WhenMarkSent::FileCreation) //10588
                {
                    this.Update_LedgerJournalTrans_StatusSent();
                }
                else if(_keepDeleteStatus == SKS_EFT_FileStatus::Transmitted)
                {
                    mSKS_EFTAP_File.TransmitDateTime = DateTimeUtil::utcNow();
                }
            }
            else //_module == SKS_EFT_Module::AR (DD)
            {
                If (_keepDeleteStatus == SKS_EFT_FileStatus::Completed || _keepDeleteStatus == SKS_EFT_FileStatus::CompletedNoEmail || _keepDeleteStatus == SKS_EFT_FileStatus::CompletedEmailPending)
                {
                    msks_eftap_file.TransmitDate = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());
                    if(msks_eft_Setup.ARWhenMarkSent == SKS_EFT_WhenMarkSent::Completion)
                    {
                        this.Update_LedgerJournalTrans_StatusSent();
                    }
                }
                else if(_keepDeleteStatus == SKS_EFT_FileStatus::FileCreated && msks_eft_Setup.ARWhenMarkSent == SKS_EFT_WhenMarkSent::FileCreation)
                {
                    this.Update_LedgerJournalTrans_StatusSent();
                }
            }

            msks_eftap_file.FileStatus = _KeepDeleteStatus;
            // 7234 -->
            if (_keepDeleteStatus == SKS_EFT_FileStatus::Transmitted)
            {
                mSKS_EFTAP_File.TransmitDateTime = DateTimeUtil::utcNow();
            }
            if (_keepDeleteStatus == SKS_EFT_FileStatus::Transmitted || _keepDeleteStatus == SKS_EFT_FileStatus::Completed || _keepDeleteStatus == SKS_EFT_FileStatus::CompletedNoEmail || _keepDeleteStatus == SKS_EFT_FileStatus::CompletedEmailPending)
            {
                mSKS_EFTAP_File.TransmitDate     = DateTimeUtil::date(DateTimeUtil::utcNow());
            }
            // 7234 <--
            if(_isadvance)
            {
                msks_eftap_file.AdvEmailDate = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());
            }
            msks_eftap_file.update();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ValidateBFLClass</Name>
				<Source><![CDATA[
    public static str ValidateBFLClass(str className)
    {
        TreeNode tnode2Enum;
        ;

        tnode2Enum = TreeNode::findNode('Classes');
        tnode2Enum = tnode2Enum.AOTfindChild(className);

        if (tnode2Enum == null)
        {
            return strFmt("@SKS:SKGBFLDLLMissing", className);
        }
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>ValidateClass</Name>
				<Source><![CDATA[
    private str ValidateClass(str className, str formatId)
    {
        TreeNode tnode2Enum;
        ;

        tnode2Enum = TreeNode::findNode('Classes');
        tnode2Enum = tnode2Enum.AOTfindChild(className);

        if (tnode2Enum == null)
        {
            return strFmt("@SKS1022", formatId);
        }
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>ValidateCustomer</Name>
				<Source><![CDATA[
    private str ValidateCustomer(SKS_LB_Depositor _sks_lb_depositor)
    {
        ;
        if(_sks_lb_depositor.Active == NoYes::No)
        {
            return strFmt("@SKS1859", _sks_lb_depositor.AccountNum, _sks_lb_depositor.CustomerCompany);
        }
        else
        {
            if(_sks_lb_depositor.InactiveDate != Global::dateNull())
            {
                if(_sks_lb_depositor.InactiveDate <= msks_eftap_file.EffectiveDate)
                {
                    return strFmt("@SKS1859", _sks_lb_depositor.AccountNum, _sks_lb_depositor.CustomerCompany);
                }
            }
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>ValidateCNPCustomer</Name>
				<Source><![CDATA[
    private str ValidateCNPCustomer(SKS_LB_Depositor _sks_lb_depositor, CustBankAccount _CustBankAccount)
    {
        ;
        if(_sks_lb_depositor.Active == NoYes::No)
        {
            return strFmt("@SKS1859", _sks_lb_depositor.AccountNum, _sks_lb_depositor.CustomerCompany);
        }
        else if(mSKS_EFT_Setup.CNPAcctApproval && _CustBankAccount.SKS_EFT_AcctStatus == SKS_EFT_AcctApprovalStatus::Pending)
        {
            return strFmt("@SYS76766", _sks_lb_depositor.AccountNum, "@SKS:SKGCNPCustBankisNotApproved");
        }
        else
        {
            if(_sks_lb_depositor.InactiveDate != Global::dateNull())
            {
                if(_sks_lb_depositor.InactiveDate <= msks_eftap_file.EffectiveDate)
                {
                    return strFmt("@SKS1859", _sks_lb_depositor.AccountNum, _sks_lb_depositor.CustomerCompany);
                }
            }
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>ValidateVendor</Name>
				<Source><![CDATA[
    private str ValidateVendor(SKS_EB_Vendor _sks_eb_vendor, SKS_EFT_VendorPaym _sks_eft_vendorPaym, VendBankAccount _vendBankAccount)
    {
        ;
        if(_sks_eb_vendor.Active == NoYes::No)
        {
            return strFmt("@SKS1023", _sks_eb_vendor.VendAccount, _sks_eb_vendor.VendCompany, _sks_eft_vendorPaym.company());
        }
        else if(mSKS_EFT_Setup.APAcctApproval && _vendBankAccount.SKS_EFT_AcctStatus == SKS_EFT_AcctApprovalStatus::Pending)
        {
            return strFmt("@SYS76766", _sks_eb_vendor.VendAccount, "@SKS1024");
        }
        else
        {
            if(_sks_eb_vendor.InactiveDate != Global::dateNull())
            {
                if(_sks_eb_vendor.InactiveDate <= msks_eftap_file.EffectiveDate)
                {
                    return strFmt("@SKS1023", _sks_eb_vendor.VendAccount, _sks_eb_vendor.VendCompany, _sks_eft_vendorPaym.company());
                }
            }
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>processEFTCommon</Name>
				<Source><![CDATA[
    delegate void processEFTCommon(RefRecId _fileRecId, SKS_EFT_Module _module, SKS_EFT_Processing _InvokingClass, EventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>WriteWrkTable</Name>
				<Source><![CDATA[
    private boolean WriteWrkTable(SKS_EFT_Module _module)
    {
        str                 responseErrorText;
        EventHandlerResult  result = new EventHandlerResult();
        responseErrorText = SKS_PP_Sys::ValidateSKSCommonModel();
        if (responseErrorText != '')
        {
            throw error(responseErrorText);
        }

        this.processEFTCommon(msks_eftap_file.RecId, _module, this, result);

        responseErrorText = result.result();

        if (responseErrorText != '')
        {
            // A response of '-1' is being used to indicate no records were created but no errors were encountered.
            // If any other error is encountered it will be set on 'responseErrorText'.
            if (responseErrorText != '-1')
            {
                mReturnMsg = responseErrorText;
            }
            return false;
        }

        this.SumWorkingTable(_module);

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ApprovePaymentJournalLines</Name>
				<Source><![CDATA[
    public server static void ApprovePaymentJournalLines(RefRecId _recID, CustVendPaymStatus _paymStatus, SKS_APIResponseTableTmp _responseTable = null)
    {
        LedgerJournalTrans ledgerJournalTrans;
        LedgerJournalTable ledgerJournalTable;
        SKS_EFT_FileDetail eftFileDetail;
        
        boolean APIFlag = false;
        if(_responseTable)
        {
            APIFlag = true;
        }

        // SKS_FDD_10590 -->
        ledgerJournalTrans.skipDataMethods(true);

       
        while select eftFileDetail where eftFileDetail.FileRecId == _recID &&   //VSTS 11877
            eftFileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary &&
            eftFileDetail.RecordSection == SKS_EFT_RecordSection::Payments
        {
            select firstonly forupdate crosscompany RecId, DataAreaId, PaymentStatus, PaymReference 
                from ledgerJournalTrans
                where ledgerJournalTrans.RecId == eftFileDetail.PaymentLineRecId &&
                ledgerJournalTrans.PaymentStatus != CustVendPaymStatus::Rejected &&
                ledgerJournalTrans.PaymentStatus != CustVendPaymStatus::Confirmed &&
                ledgerJournalTrans.PaymentStatus != _paymStatus
            join ledgerJournalTable
                where ledgerJournalTable.JournalNum == ledgerJournalTrans.JournalNum &&
                !ledgerJournalTable.Posted;

            if(ledgerJournalTrans.RecId)
            {
                changecompany(ledgerJournalTrans.DataAreaId)
                {
                    if(APIFlag)
                    {                              
                        select _responseTable where _responseTable.PaymentReference == ledgerJournalTrans.PaymReference;
                                                    
                        if(_responseTable.Status == SKS_EFT_APIPaymentStatus::Received)
                        {
                            _paymStatus = CustVendPaymStatus::Recieved;
                        }
                        else if(_responseTable.Status == SKS_EFT_APIPaymentStatus::Rejected || _responseTable.Status == SKS_EFT_APIPaymentStatus::CommFailed)
                        {
                            _paymStatus = CustVendPaymStatus::Rejected;
                        }                       
                    }
                   
                    ttsbegin;
                    ledgerJournalTrans.PaymentStatus = _paymStatus;
                    ledgerJournalTrans.doUpdate();
                    ttscommit;
                    
                }
            }
        }
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>AutoCompleteARAP</Name>
				<Source><![CDATA[
    public static boolean AutoCompleteARAP(RefRecId _recID, SKS_EFT_ActionHistory _actionhistory, SKS_EFT_InboundFileNbr _sks_eft_inboundfilenbr = '')
    {

        SKS_EB_CommProcess locSKS_EB_CommProcess;
        SKS_EFT_Processing sks_eft_Processing;
        SKS_EFTAP_File sks_EFTAP_File;
        ;

        select firstonly CommID, EFTFileType, FileNbr from sks_EFTAP_File where sks_EFTAP_File.RecId == _recID;
        select firstonly locSKS_EB_CommProcess where locSKS_EB_CommProcess.CommID == sks_EFTAP_File.CommID;

        sks_eft_Processing = new SKS_EFT_Processing();
        sks_eft_Processing.InboundFileNbr(_sks_eft_inboundfilenbr);
        sks_eft_Processing.ActionHistory(_actionhistory);
        sks_eft_Processing.APARrocess_EFT(sks_EFTAP_File.FileNbr,
                                            SKS_PP_NextActionDisplay::CompleteKeep,
                                            false,
                                            SKS_EFTAP_File.EFTFileType,
                                            locSKS_EB_CommProcess,
                                            false,
                                            false);


        Return true;

    }

]]></Source>
			</Method>
			<Method>
				<Name>AutoCreateAndSend</Name>
				<Source><![CDATA[
    /// <summary>
    /// AutoCreateAndSend
    /// </summary>
    /// <param name = "_SKS_EFTAP_File"></param>
    /// <param name = "_journaltable"></param>
    /// <param name = "_SKS_EFT_Module"></param>
    /// <param name = "_createSendMultiCompany"></param>
    public static server void AutoCreateAndSend(SKS_EFTAP_File _SKS_EFTAP_File,  LedgerJournalTable _journaltable, SKS_EFT_Module _SKS_EFT_Module = SKS_EFT_Module::AP, boolean _createSendMultiCompany = false) // SKS_FDD_10590
    {
        SKS_EFT_Bank                lSKS_EFT_Bank;
        SKS_EFTAR_Bank              lSKS_EFTAR_Bank;
        SKS_EFT_FilePmtSelection    lSKS_EFT_FilePmtSelection, lSKS_EFT_FilePmtSelectionloc;
        SKS_EFT_Processing          lSKS_EFT_Processing;
        SKS_EFT_Setup               lSKS_EFT_Setup;
        VendPaymModeTable           lVendPaymModeTable;
        CustPaymModeTable           lCustPaymModeTable;
        SKS_EFTAP_File              lSKS_EFTAP_File;//IHB SKS 9536
        //str                         errors;// SKS-Bugs_11845
        boolean                     firstRec = true;
        boolean                     ServerSide;
        SKS_EFT_FileFormatPaymSpec  sksSpecByDate, sksPaymSpec;
        SKS_EFT_FilePmtSelection    pmtSelectionCreateSendCompany; // SKS_FDD_10590
        
        SKS_EFTBTB_Bank lSKS_EFTBTB_Bank;
        SKS_BTB_PaymModeTable bankPaymModeTable;

        SKS_EFTCNP_Bank lSKS_EFTCNP_Bank;
        lSKS_EFT_Processing = new SKS_EFT_Processing();

        // 17757
        SKS_EFTAP_File locSKS_EFTAP_File;
        

        select firstonly APServerSideFiles, ARServerSideFiles, BTBServerSideFiles, CNPServerSideFiles from lSKS_EFT_Setup;

        ttsBegin;

        select firstonly forupdate locSKS_EFTAP_File where locSKS_EFTAP_File.RecId == _SKS_EFTAP_File.RecId;

        //For the group of transfered records, validate then assign to EFTAP

        //IHB  SKS 9536 start function to reset header totals.
        void resetCount()
        {
            locSKS_EFTAP_File.PmtCount = 0;
            locSKS_EFTAP_File.PmtTotal = 0;
        }
        //IHB  SKS 9536 end

        while select forUpdate crosscompany lSKS_EFT_FilePmtSelection where lSKS_EFT_FilePmtSelection.FileRecId == locSKS_EFTAP_File.RecID // SKS_FDD_10590
        && lSKS_EFT_FilePmtSelection.PmtJournalNum == _journaltable.JournalNum
        {
            if(firstRec)
            {
                SKS_EFT_FilePmtSelection primarySelection;
                select firstonly
                        RecId
                from primarySelection
                where primarySelection.FileRecId == locSKS_EFTAP_File.RecID
                    && primarySelection.PrimaryFormat == NoYes::Yes;

                if (!primarySelection.recid)
                {
                    lSKS_EFT_FilePmtSelection.PrimaryFormat = NoYes::Yes;
                    locSKS_EFTAP_File.FormatId = lSKS_EFT_FilePmtSelection.FormatId;
                    locSKS_EFTAP_File.MultiFormat = SKS_EFTAP_File::multipleFormats(lSKS_EFT_FilePmtSelection);
                }
                firstRec = false;
            }

            //IHB  SKS 9536 start
            sksSpecByDate = SKS_EFT_FileFormatPaymSpec::find(lSKS_EFT_FilePmtSelection.FormatId,LedgerJournalTrans::find(lSKS_EFT_FilePmtSelection.PmtJournalNum,'',false).PaymSpec);
            if (sksSpecByDate.SelectByPaymentDate == NoYes::No && sksSpecByDate.FilterSeparateFile == NoYes::No && SKS_EFT_FileFormat::find(lSKS_EFT_FilePmtSelection.FormatId).SupportsMultipleEffectiveDates == NoYes::No)
            {
                select firstonly crosscompany FileRecId, PrimaryFormat from lSKS_EFT_FilePmtSelectionloc // SKS_FDD_10590
                where lSKS_EFT_FilePmtSelectionloc.FileRecId == locSKS_EFTAP_File.RecId
                    && lSKS_EFT_FilePmtSelectionloc.FormatGroup != locSKS_EFTAP_File.FormatGroup
                    && lSKS_EFT_FilePmtSelectionloc.PrimaryFormat == NoYes::Yes;

                if(lSKS_EFT_FilePmtSelectionloc)
                {
                    lSKS_EFT_FilePmtSelection.PrimaryFormat = NoYes::No;
                }
            }
            else
            {
                select firstonly crosscompany FileRecId, PrimaryFormat from lSKS_EFT_FilePmtSelectionloc // SKS_FDD_10590
                where lSKS_EFT_FilePmtSelectionloc.FileRecId == locSKS_EFTAP_File.RecId
                    && lSKS_EFT_FilePmtSelectionloc.PrimaryFormat == NoYes::Yes
                    && lSKS_EFT_FilePmtSelectionloc.RecId != lSKS_EFT_FilePmtSelection.RecId;

                if(lSKS_EFT_FilePmtSelectionloc)
                {
                    lSKS_EFT_FilePmtSelection.PrimaryFormat = NoYes::No;
                }
            }
            //IHB  SKS 9536 end

            changecompany(lSKS_EFT_FilePmtSelection.DataAreaId)// SKS_FDD_10590
            {
                lSKS_EFT_FilePmtSelection.update();
            }

            SKS_EB_FileStorage lSKS_EB_FileStorage;
            select firstonly StorageOption_APEFTFXDD from lSKS_EB_FileStorage;
            locSKS_EFTAP_File.BFBankIntegration = (lSKS_EB_FileStorage.StorageOption_APEFTFXDD == SKS_EB_BankIntegOptWithNoLicense::FileHubLocalEnumValue) ? SKS_BF_BankIntType::FileHubLocal : SKS_BF_BankIntType::BankFabric;

            if(_SKS_EFT_Module == SKS_EFT_Module::AP)
            {
                select firstonly SKS_EFT_FormatId from lVendPaymModeTable where lVendPaymModeTable.PaymMode == lSKS_EFT_FilePmtSelection.PaymMode;

                if(_createSendMultiCompany  && _journaltable.SKS_EFT_AutoCreate == NoYes::No)
                {
                    // select pmtSlection from create and send company
                    select firstonly pmtSelectionCreateSendCompany
                        where pmtSelectionCreateSendCompany.FileRecId == locSKS_EFTAP_File.RecId &&
                        pmtSelectionCreateSendCompany.DataAreaId == locSKS_EFTAP_File.DataAreaId;
                    // Select Bank from create and send company
                    lSKS_EFT_Bank =     SKS_EFT_Bank::find(pmtSelectionCreateSendCompany.PmtBankAccountId, pmtSelectionCreateSendCompany.PaymMode);
                }
                else
                {
                    lSKS_EFT_Bank = SKS_EFT_Bank::find(lSKS_EFT_FilePmtSelection.PmtBankAccountId, lSKS_EFT_FilePmtSelection.PaymMode);
                }
                // if the bank is not avilable pick the bank from paymJournal company
                if(!lSKS_EFT_Bank)
                {
                    lSKS_EFT_Bank = SKS_EFT_Bank::findByCompany(lSKS_EFT_FilePmtSelection.DataAreaId, lSKS_EFT_FilePmtSelection.PmtBankAccountId,lSKS_EFT_FilePmtSelection.PaymMode);
                }

                //<Issue20996: Send later also goes through here, 
                //this validation has been moved to SKS_LedgerJournalTransVendPaymEventHandler.SKSChangeEFTStatusAuto_OnClicked()>
                //if(lSKS_EFT_Bank.FXAEnabled == NoYes::Yes)
                //{
                //    //SKS_EFT_JournalValidate::errorLog("Cannot use send now for FXAll enabled bank accounts", lLedgerJournalTrans, true);
                //    error("@SKS3595");
                //    Throw Exception::Error;
                //}
                //</Issue20996>

                if(locSKS_EFTAP_File.BFBankIntegration == SKS_BF_BankIntType::BankFabric)
                {
                    SKS_EFT_APIFormatType formatType = SKS_EFT_FileFormat::findByCompany(lSKS_EFT_FilePmtSelection.DataAreaId, lVendPaymModeTable.SKS_EFT_FormatId).APIFileFormatType;
                    locSKS_EFTAP_File.APIFormatType = formatType;
                    locSKS_EFTAP_File.FileName = '';
                    if(locSKS_EFTAP_File.APIFormatType == SKS_EFT_APIFormatType::File)
                    {
                        //<Issue21103>
                        if(lSKS_EFT_Bank.FXAEnabled)
                        {
                            locSKS_EFTAP_File.FilePath = lSKS_EFT_Bank.FXABankFabricOutboundTradeFileLoc;
                        }
                        //</Issue21103>
                        else 
                        {
                            locSKS_EFTAP_File.FilePath = lSKS_EFT_Bank.APBankFabricFileLocation;
                            locSKS_EFTAP_File.BankFabricFileNameName = lSKS_EFT_Bank.APBankFabricFileNames;
                        }
                        if (!locSKS_EFTAP_File.FilePath)
                        {
                            Error("@SKS:SKGBFBlankFileLocation");
                            Throw Exception::Error;
                        }
                    }
                }
                else
                {
                    locSKS_EFTAP_File.FileName = lSKS_EFT_Bank.APFileName;
                    locSKS_EFTAP_File.FilePath = lSKS_EFT_Bank.APFilePath;
                    locSKS_EFTAP_File.ControlFileName = lSKS_EFT_Bank.APControlFileName;
                }

                locSKS_EFTAP_File.CommID = lSKS_EFT_Bank.APCommID;
                locSKS_EFTAP_File.ControlFileFormatId = lSKS_EFT_Bank.APControlFileFormatiD;
            }
            
            else if(_SKS_EFT_Module == SKS_EFT_Module::BTB)
            {

                select firstonly FormatId from bankPaymModeTable where bankPaymModeTable.PaymMode == lSKS_EFT_FilePmtSelection.PaymMode;

                lSKS_EFTBTB_Bank = SKS_EFTBTB_Bank::find(lSKS_EFT_FilePmtSelection.PmtBankAccountId, lSKS_EFT_FilePmtSelection.PaymMode);

                locSKS_EFTAP_File.TransferDirection = SKS_BTB_PaymModeTable::find(lSKS_EFT_FilePmtSelection.PaymMode).TransferType;

                if(locSKS_EFTAP_File.BFBankIntegration == SKS_BF_BankIntType::BankFabric)
                {
                    locSKS_EFTAP_File.FileName = '';
                    locSKS_EFTAP_File.FilePath = lSKS_EFTBTB_Bank.BTBBankFabricFileLocation;
                    locSKS_EFTAP_File.BankFabricFileNameName = lSKS_EFTBTB_Bank.BTBBankFabricFileNames;
                    if (!locSKS_EFTAP_File.FilePath)
                    {
                        Error("@SKS:SKGBFBlankFileLocation");
                        Throw Exception::Error;
                    }
                }
                else
                {
                    locSKS_EFTAP_File.FileName = lSKS_EFTBTB_Bank.BBFileName;
                    locSKS_EFTAP_File.FilePath = lSKS_EFTBTB_Bank.BBFilePath;
                    locSKS_EFTAP_File.ControlFileName = lSKS_EFTBTB_Bank.BBControlFileName;
                }

                locSKS_EFTAP_File.CommID = lSKS_EFTBTB_Bank.BTBCommID;
                locSKS_EFTAP_File.ControlFileFormatId = lSKS_EFTBTB_Bank.BBControlFileFormatiD;
            }
            else if(_SKS_EFT_Module == SKS_EFT_Module::AR)
            {
                select firstonly SKS_EFT_FormatId from lCustPaymModeTable where lCustPaymModeTable.PaymMode == lSKS_EFT_FilePmtSelection.PaymMode;
                if(_createSendMultiCompany  && _journaltable.SKS_EFT_AutoCreate == NoYes::No)
                {
                    // select pmtSlection from create and send company
                    select firstonly pmtSelectionCreateSendCompany
                        where pmtSelectionCreateSendCompany.FileRecId == locSKS_EFTAP_File.RecId &&
                        pmtSelectionCreateSendCompany.DataAreaId == locSKS_EFTAP_File.DataAreaId;

                    // Select Bank from create and send company
                    lSKS_EFTAR_Bank = SKS_EFTAR_Bank::find(pmtSelectionCreateSendCompany.PmtBankAccountId, pmtSelectionCreateSendCompany.PaymMode);
                }
                else
                {
                    lSKS_EFTAR_Bank = SKS_EFTAR_Bank::find(lSKS_EFT_FilePmtSelection.PmtBankAccountId, lSKS_EFT_FilePmtSelection.PaymMode);
                }
                // if the bank is not avilable pick the bank from paymJournal company
                if(!lSKS_EFTAR_Bank)
                {
                    lSKS_EFTAR_Bank = SKS_EFTAR_Bank::findByCompany(lSKS_EFT_FilePmtSelection.DataAreaId, lSKS_EFT_FilePmtSelection.PmtBankAccountId, lSKS_EFT_FilePmtSelection.PaymMode);
                }

                if(locSKS_EFTAP_File.BFBankIntegration == SKS_BF_BankIntType::BankFabric)
                {
                    locSKS_EFTAP_File.FileName = '';
                    locSKS_EFTAP_File.FilePath = lSKS_EFTAR_Bank.ARBankFabricFileLocation;
                    locSKS_EFTAP_File.BankFabricFileNameName = lSKS_EFTAR_Bank.ARBankFabricFileNames;
                    if (!locSKS_EFTAP_File.FilePath)
                    {
                        Error("@SKS:SKGBFBlankFileLocation");
                        Throw Exception::Error;
                    }
                }
                else
                {
                    locSKS_EFTAP_File.FileName = lSKS_EFTAR_Bank.ARFileName;
                    locSKS_EFTAP_File.FilePath = lSKS_EFTAR_Bank.ARFilePath;
                    locSKS_EFTAP_File.ControlFileName = lSKS_EFTAR_Bank.ARControlFileName;
                }

                locSKS_EFTAP_File.CommID = lSKS_EFTAR_Bank.ARCommID;
                locSKS_EFTAP_File.ControlFileFormatId = lSKS_EFTAR_Bank.ARControlFileFormatiD;
            }
            else if(_SKS_EFT_Module == SKS_EFT_Module::CNP)
            {
                select SKS_EFT_FormatId from lCustPaymModeTable where lCustPaymModeTable.PaymMode == lSKS_EFT_FilePmtSelection.PaymMode;
                lSKS_EFTCNP_Bank = SKS_EFTCNP_Bank::find(lSKS_EFT_FilePmtSelection.PmtBankAccountId, lSKS_EFT_FilePmtSelection.PaymMode);

                

                if(locSKS_EFTAP_File.BFBankIntegration == SKS_BF_BankIntType::BankFabric)
                {
                    locSKS_EFTAP_File.FileName = '';
                    locSKS_EFTAP_File.FilePath = lSKS_EFTCNP_Bank.CNPBankFabricFileLocation;
                    locSKS_EFTAP_File.BankFabricFileNameName = lSKS_EFTCNP_Bank.CNPBankFabricFileNames;
                    if (!locSKS_EFTAP_File.FilePath)
                    {
                        Error("@SKS:SKGBFBlankFileLocation");
                        Throw Exception::Error;
                    }
                }
                else
                {
                    locSKS_EFTAP_File.FileName = lSKS_EFTCNP_Bank.CNPFileName;
                    locSKS_EFTAP_File.FilePath = lSKS_EFTCNP_Bank.CNPFilePath;
                    locSKS_EFTAP_File.ControlFileName = lSKS_EFTCNP_Bank.CNPControlFileName;
                }

                locSKS_EFTAP_File.CommID = lSKS_EFTCNP_Bank.CNPCommID;
                locSKS_EFTAP_File.ControlFileFormatId = lSKS_EFTCNP_Bank.CNPControlFileFormatiD;
                
            }
            
            if(locSKS_EFTAP_File.BFBankIntegration == SKS_BF_BankIntType::FileHubLocal)
            {
                if(_SKS_EFT_Module == SKS_EFT_Module::AP)
                {
                    locSKS_EFTAP_File.FileName = SKS_EFT_Common::getFileName(locSKS_EFTAP_File.FileNbr, locSKS_EFTAP_File.FileName, SKS_EFT_Module::AP);

                    if(locSKS_EFTAP_File.ControlFileName)     //SKS_Bug_11575
                    {
                        locSKS_EFTAP_File.ControlFileName = SKS_EFT_Common::getFileName(locSKS_EFTAP_File.FileNbr, locSKS_EFTAP_File.ControlFileName, SKS_EFT_Module::AP);
                    }
                }
                else if(_SKS_EFT_Module == SKS_EFT_Module::BTB)
                {
                    locSKS_EFTAP_File.FileName = SKS_EFT_Common::getFileName(locSKS_EFTAP_File.FileNbr, locSKS_EFTAP_File.FileName, SKS_EFT_Module::BTB);

                    if(locSKS_EFTAP_File.ControlFileName)
                    {
                        locSKS_EFTAP_File.ControlFileName = SKS_EFT_Common::getFileName(locSKS_EFTAP_File.FileNbr, locSKS_EFTAP_File.ControlFileName, SKS_EFT_Module::BTB);
                    }
                }
                else if(_SKS_EFT_Module == SKS_EFT_Module::AR)
                {
                    locSKS_EFTAP_File.FileName = SKS_EFT_Common::getFileName(locSKS_EFTAP_File.FileNbr, locSKS_EFTAP_File.FileName, SKS_EFT_Module::AR);

                    if(locSKS_EFTAP_File.ControlFileName)     //SKS_Bug_11575
                    {
                        locSKS_EFTAP_File.ControlFileName = SKS_EFT_Common::getFileName(locSKS_EFTAP_File.FileNbr, locSKS_EFTAP_File.ControlFileName, SKS_EFT_Module::AR);
                    }

                }
                else if(_SKS_EFT_Module == SKS_EFT_Module::CNP)
                {
                    locSKS_EFTAP_File.FileName = SKS_EFT_Common::getFileName(locSKS_EFTAP_File.FileNbr, locSKS_EFTAP_File.FileName, SKS_EFT_Module::CNP);

                    if(locSKS_EFTAP_File.ControlFileName)     //SKS_Bug_11575
                    {
                        locSKS_EFTAP_File.ControlFileName = SKS_EFT_Common::getFileName(locSKS_EFTAP_File.FileNbr, locSKS_EFTAP_File.ControlFileName, SKS_EFT_Module::CNP);
                    }

                }
            }

            //IHB SKS 9536 start if already file num exists for format id, it will select existing record
            if(_SKS_EFT_Module != SKS_EFT_Module::BTB)
            {
                select firstonly * from lSKS_EFTAP_File
                    where lSKS_EFTAP_File.FormatId ==  lVendPaymModeTable.SKS_EFT_FormatId
                        && lSKS_EFTAP_File.FileStatus == SKS_EFT_FileStatus::NotProcessed;
            }

            if(!lSKS_EFTAP_File)
            {
                resetCount();
            }           
        }

        //FDD_10383--->
        SKS_EFT_FilePmtSelection locSKS_EFT_FilePmtSelection;
        LedgerJournalTrans locLedgerJournalTrans;

        if(_SKS_EFT_Module == SKS_EFT_Module::AP)
        {
            select firstonly PaymSpec from locSKS_EFT_FilePmtSelection
                where locSKS_EFT_FilePmtSelection.FileRecId == _SKS_EFTAP_File.RecId
                join locLedgerJournalTrans where locLedgerJournalTrans.SKS_EFT_APPmtSelectionRecId == locSKS_EFT_FilePmtSelection.RecId;
        }
        else if(_SKS_EFT_Module == SKS_EFT_Module::AR)
        {
            select firstonly PaymSpec from locSKS_EFT_FilePmtSelection
                where locSKS_EFT_FilePmtSelection.FileRecId == _SKS_EFTAP_File.RecId
                join locLedgerJournalTrans where locLedgerJournalTrans.SKS_EFT_ARPmtSelectionRecId == locSKS_EFT_FilePmtSelection.RecId;
        }
        else if(_SKS_EFT_Module == SKS_EFT_Module::CNP)
        {
            select firstonly PaymSpec from locSKS_EFT_FilePmtSelection
                where locSKS_EFT_FilePmtSelection.FileRecId == _SKS_EFTAP_File.RecId
                join locLedgerJournalTrans where locLedgerJournalTrans.SKS_EFT_CNPPmtSelectionRecId == locSKS_EFT_FilePmtSelection.RecId;
        }

        //FDD_10383<---

        //IHB SKS 9536 start
        select crosscompany sum(PmtTotal) from lSKS_EFT_FilePmtSelection where lSKS_EFT_FilePmtSelection.FileRecId == locSKS_EFTAP_File.RecID;//SKS_FDD_10590

        locSKS_EFTAP_File.PmtTotal = lSKS_EFT_FilePmtSelection.PmtTotal;
        locSKS_EFTAP_File.OriginalPmtTotal = locSKS_EFTAP_File.PmtTotal;

        select crosscompany count(RecId) from lSKS_EFT_FilePmtSelection where lSKS_EFT_FilePmtSelection.FileRecId == locSKS_EFTAP_File.RecID;//SKS_FDD_10590

        locSKS_EFTAP_File.PmtCount = int642int(lSKS_EFT_FilePmtSelection.RecId);

        if(_SKS_EFT_Module == SKS_EFT_Module::AP)
        {
            if (locSKS_EFTAP_File.PmtCount == 1)
            {
                select crosscompany maxof(PmtDate) from lSKS_EFT_FilePmtSelection where lSKS_EFT_FilePmtSelection.FileRecId == locSKS_EFTAP_File.RecID;
                locSKS_EFTAP_File.setOffsetDate(lVendPaymModeTable.SKS_EFT_FormatId, lSKS_EFT_Bank.BankHolidayGroupId, lSKS_EFT_FilePmtSelection.PmtDate, locSKS_EFTAP_File.EFTFileType, locLedgerJournalTrans.PaymSpec); // SKS_FDD_10590
            }
            else
            {
                select crosscompany maxof(PmtDate) from lSKS_EFT_FilePmtSelection where lSKS_EFT_FilePmtSelection.FileRecId == locSKS_EFTAP_File.RecID;       //SKS#DevOps:16109
                locSKS_EFTAP_File.updateRelatedLedgerJournalTransDate();
            }
        }
        else if(_SKS_EFT_Module == SKS_EFT_Module::BTB)
        {
            //if (locSKS_EFTAP_File.PmtCount == 1)
            //{
            //    select crosscompany maxof(PmtDate) from lSKS_EFT_FilePmtSelection where lSKS_EFT_FilePmtSelection.FileRecId == _SKS_EFTAP_File.RecID;
            //    _SKS_EFTAP_File.setOffsetDate(bankPaymModeTable.FormatId, lSKS_EFTBTB_Bank.BankHolidayGroupId, lSKS_EFT_FilePmtSelection.PmtDate, _SKS_EFTAP_File.EFTFileType); // SKS_FDD_10590
            //}
            //else
            //{
            //    _SKS_EFTAP_File.updateRelatedLedgerJournalTransDate();
            //}
            locSKS_EFTAP_File.setOffsetDate(bankPaymModeTable.FormatId, lSKS_EFTBTB_Bank.BankHolidayGroupId, lSKS_EFT_FilePmtSelection.PmtDate, locSKS_EFTAP_File.EFTFileType);  //SKS_FDD_10590
        }
        else if(_SKS_EFT_Module == SKS_EFT_Module::CNP)
        {
            if (locSKS_EFTAP_File.PmtCount == 1)
            {
                select crosscompany maxof(PmtDate) from lSKS_EFT_FilePmtSelection where lSKS_EFT_FilePmtSelection.FileRecId == locSKS_EFTAP_File.RecID;
                locSKS_EFTAP_File.setOffsetDate(lCustPaymModeTable.SKS_CNP_FormatId, lSKS_EFT_Bank.BankHolidayGroupId, lSKS_EFT_FilePmtSelection.PmtDate, locSKS_EFTAP_File.EFTFileType, locLedgerJournalTrans.PaymSpec); // SKS_FDD_10590
            }
            else
            {
                locSKS_EFTAP_File.updateRelatedLedgerJournalTransDate();
            }
        }
        else
        {
            locSKS_EFTAP_File.setOffsetDate(lCustPaymModeTable.SKS_EFT_FormatId, lSKS_EFTAR_Bank.BankHolidayGroupId, lSKS_EFT_FilePmtSelection.PmtDate, locSKS_EFTAP_File.EFTFileType, locLedgerJournalTrans.PaymSpec);  //SKS_FDD_10590
        }

        locSKS_EFTAP_File.update();
        //IHB SKS 9536 end

        //complete create and send
        if(_SKS_EFT_Module == SKS_EFT_Module::AP)
        {
            ServerSide = lSKS_EFT_Setup.APServerSideFiles;
        }
        else if(_SKS_EFT_Module == SKS_EFT_Module::BTB)
        {
            ServerSide = lSKS_EFT_Setup.BTBServerSideFiles;
        }
        else if(_SKS_EFT_Module == SKS_EFT_Module::AR)
        {
            ServerSide = lSKS_EFT_Setup.ARServerSideFiles;
        }
        else if(_SKS_EFT_Module == SKS_EFT_Module::CNP)
        {
            ServerSide = lSKS_EFT_Setup.CNPServerSideFiles;
        }

        ttsCommit;

        if(locSKS_EFTAP_File.BFBankIntegration == SKS_BF_BankIntType::FileHubLocal && !SKS_EB_FileHub::construct().runDirectoryExists(locSKS_EFTAP_File.filepath))
        {
            error(strFmt("@SYS55831", locSKS_EFTAP_File.filepath),"@SKS225"); //file does not exist
            Throw Exception::Error;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>AutoPostPaymentJournal</Name>
				<Source><![CDATA[
    //return false if the journal failed posting
    public static server boolean AutoPostPaymentJournal(LedgerJournalId _JournalNum, SKS_EFTAP_File _SKS_EFTAP_File, boolean _AutoCreateEFT, DataAreaId _paymCompany)
    {
        LedgerJournalTable  lLedgerJournalTable;
        LedgerJournalTrans  lLedgerJournalTrans;
        SKS_EB_CommProcess  lSKS_EB_CommProcess;
        SKS_EFT_FileHistory lSKS_EFT_FileHistory;
        container           multicompaniesCon; // SKS_FDD_10590
        boolean ret;
        boolean post = true;
        ;
       
        multicompaniesCon += _paymCompany;

        if(multicompaniesCon == conNull())
        {
            multicompaniesCon += curExt();
        }

        select firstonly crosscompany: multicompaniesCon *  from  lLedgerJournalTable where lLedgerJournalTable.JournalNum == _JournalNum // SKS_FDD_10590
        && lLedgerJournalTable.Posted == NoYes::No;
        //if we didn't find an UNposted journal with our journal number, return
        if(!lLedgerJournalTable)
        {
            return true;
        }

        lSKS_EB_CommProcess = null;

        select firstonly CommID, AutoPost from lSKS_EB_CommProcess where lSKS_EB_CommProcess.CommID == _SKS_EFTAP_File.CommId;

        //In auto create and send situations, we do not want to autopost here due to reselecting the ledger journal.
        //If we did go in this code block, we would get an update conflict later in the process.
        if(lSKS_EB_CommProcess.AutoPost && !_AutoCreateEFT)
        {
            select crosscompany: multicompaniesCon count(RecId) from lLedgerJournalTrans  where
                lLedgerJournalTrans.JournalNum == _JournalNum;

            int64 totalLines = lLedgerJournalTrans.RecId;

            select crosscompany: multicompaniesCon count(Recid) from lLedgerJournalTrans where
                lLedgerJournalTrans.JournalNum == _JournalNum
                && lLedgerJournalTrans.PaymentStatus == CustVendPaymStatus::Rejected;

            int64 rejectedLines = lLedgerJournalTrans.RecId;

            //attempting to post and transfer a journal with all rejected lines will result in
            //the journal being locked by the system so don't post those journals
            if(totalLines == rejectedLines)
            {
                post = false;
            }

            // Only attempt to post if all EFT+ transactions have been marked as Sent.
            // If not Sent then there could be multiple formats being used in the same journal and all have not been processed yet.
            if(post && _SKS_EFTAP_File.EFTFileType == SKS_EFT_Module::AR)
            {
                while select crosscompany:multicompaniesCon
                    PaymentStatus, SKS_EFT_ARPmtSelectionRecId, PaymMode
                from lLedgerJournalTrans
                where
                  lLedgerJournalTrans.JournalNum == _JournalNum &&
                  lLedgerJournalTrans.SKS_EFT_ARPmtSelectionRecId != 0
                {
                    changecompany(lLedgerJournalTable.company())
                    {
                        if(!CustVendPaym::checkPaymStatus(ModuleCustVend::Cust, lLedgerJournalTrans.PaymMode, lLedgerJournalTrans.PaymentStatus))
                        {
                            post = false;
                            break;
                        }
                    }
                }
            }
            else if(post && _SKS_EFTAP_File.EFTFileType == SKS_EFT_Module::BTB)
            {
                while select lLedgerJournalTrans
                    where lLedgerJournalTrans.JournalNum == _JournalNum &&
                      lLedgerJournalTrans.SKS_EFT_BTBPmtSelectionRecId != 0
                {
                    changecompany(lLedgerJournalTable.company())
                    {
                        if(!LedgerJournalTransUpdateBank::checkBankPaymStatus(lLedgerJournalTrans.PaymMode, lLedgerJournalTrans.PaymentStatus))
                        {
                            post = false;
                            break;
                        }
                    }
                }
            }
            else if(post && _SKS_EFTAP_File.EFTFileType == SKS_EFT_Module::CNP)
            {
                while select lLedgerJournalTrans
                    where lLedgerJournalTrans.JournalNum == _JournalNum &&
                      lLedgerJournalTrans.SKS_EFT_CNPPmtSelectionRecId != 0
                {
                    changecompany(lLedgerJournalTable.company())
                    {
                        if(!CustVendPaym::checkPaymStatus(ModuleCustVend::Cust, lLedgerJournalTrans.PaymMode, lLedgerJournalTrans.PaymentStatus))
                        {
                            post = false;
                            break;
                        }
                    }
                }
            }
            else if (post)
            {
                while select crosscompany:multicompaniesCon
                    PaymentStatus, SKS_EFT_APPmtSelectionRecId, PaymMode
                from lLedgerJournalTrans
                where
                  lLedgerJournalTrans.JournalNum == _JournalNum &&
                  lLedgerJournalTrans.SKS_EFT_APPmtSelectionRecId != 0
                {
                    changecompany(lLedgerJournalTable.company())
                    {
                        if(!CustVendPaym::checkPaymStatus(ModuleCustVend::Vend, lLedgerJournalTrans.PaymMode, lLedgerJournalTrans.PaymentStatus))
                        {
                            post = false;
                            break;
                        }
                    }
                }
            }

            if(post)
            {
                try
                {
                    info(strFmt("@SKS3065", _JournalNum));
                   
                    LedgerJournalTable  locLedgerJournalTable = null;//FDD-10590

                    changecompany(_paymCompany)//FDD-10590
                    {
                        select * from locLedgerJournalTable where locLedgerJournalTable.JournalNum == _JournalNum;//FDD-10590
                        LedgerJournalPost::postJournal(locLedgerJournalTable, NoYes::Yes);
                    }

                    locLedgerJournalTable.clear();
                    select crosscompany: multicompaniesCon  * from locLedgerJournalTable where locLedgerJournalTable.JournalNum == _JournalNum;

                    SKS_EFT_FilePmtSelection pmtSelection;
                    SKS_EFTAP_File file;

                    while select crosscompany: multicompaniesCon FileRecId from pmtSelection where pmtSelection.PmtJournalNum == _JournalNum
                    {
                        select FileStatus from file where file.RecId == pmtSelection.FileRecId;

                        if(locLedgerJournalTable.Posted == NoYes::No)
                        {
                            SKS_EFT_Processing::createFileHistory(SKS_EFT_ActionHistory::NotPosted, pmtSelection.FileRecId, '',locLedgerJournalTable.Log , _JournalNum, file.FileStatus);
                        }
                        else
                        {
                            if(locLedgerJournalTable.Log)
                            {
                                SKS_EFT_Processing::createFileHistory(SKS_EFT_ActionHistory::PostedLog, pmtSelection.FileRecId, '', locLedgerJournalTable.Log, _JournalNum, file.FileStatus);
                            }
                            else
                            {
                                SKS_EFT_Processing::createFileHistory(SKS_EFT_ActionHistory::Posted, pmtSelection.FileRecId, '', '', _JournalNum, file.FileStatus);
                            }
                        }
                    }
                    

                    // Look through other EFT+ files and see if any history records need created due to this posting.
                    // If journal was not posted before and it is now being posted, add a history record
                    while select crosscompany: multicompaniesCon * from lSKS_EFT_FileHistory
                        group by lSKS_EFT_FileHistory.OutboundFileRecId, lSKS_EFT_FileHistory.JournalNum, lSKS_EFT_FileHistory.Action
                    where
                    (lSKS_EFT_FileHistory.JournalNum == _JournalNum && lSKS_EFT_FileHistory.Action == SKS_EFT_ActionHistory::NotPosted) &&
                    !(lSKS_EFT_FileHistory.JournalNum == _JournalNum && (lSKS_EFT_FileHistory.Action == SKS_EFT_ActionHistory::Posted || lSKS_EFT_FileHistory.Action == SKS_EFT_ActionHistory::PostedLog))
                    {
                        if(!locLedgerJournalTable.Log)
                        {
                            SKS_EFT_Processing::createFileHistory(SKS_EFT_ActionHistory::Posted, lSKS_EFT_FileHistory.OutboundFileRecId, '', '', _JournalNum);
                        }
                        else
                        {
                            SKS_EFT_Processing::createFileHistory(SKS_EFT_ActionHistory::PostedLog, lSKS_EFT_FileHistory.OutboundFileRecId, '', '', _JournalNum);
                        }
                    }

                    ret = true;
                    //FDD-10590
                }
                catch
                {
                    SKS_EFT_Processing::createFileHistory(SKS_EFT_ActionHistory::NotPosted, _SKS_EFTAP_File.RecId, '', "@SKS3350", _JournalNum);
                    ret =  false;
                }
            }
            else
            {
                if(_SKS_EFTAP_File.EFTFileType == SKS_EFT_Module::AR)
                {
                    info(strFmt("@SKS:SKGARPaymNotPosted", _JournalNum));
                    SKS_EFT_Processing::createFileHistory(SKS_EFT_ActionHistory::NotPosted, _SKS_EFTAP_File.RecId, '',
                        strFmt("@SKS:SKGARPaymNotPosted", _JournalNum), _JournalNum);
                }
                else if(_SKS_EFTAP_File.EFTFileType == SKS_EFT_Module::BTB)
                {
                    info(strFmt('Bank transfer number %1 was not posted. It contains other line that has not been processed', _JournalNum));
                    SKS_EFT_Processing::createFileHistory(SKS_EFT_ActionHistory::NotPosted, _SKS_EFTAP_File.RecId, '',
                        strFmt('Bank transfer number %1 was not posted. It contains other line that has not been processed', _JournalNum), _JournalNum);
                }
                else if(_SKS_EFTAP_File.EFTFileType == SKS_EFT_Module::CNP) //TODO label
                {
                    info(strFmt("@SKS:SKGARPaymNotPosted", _JournalNum));
                    SKS_EFT_Processing::createFileHistory(SKS_EFT_ActionHistory::NotPosted, _SKS_EFTAP_File.RecId, '',
                        strFmt("@SKS:SKGARPaymNotPosted", _JournalNum), _JournalNum);
                }
                else
                {
                    info(strFmt("@SKS3349", _JournalNum));
                    SKS_EFT_Processing::createFileHistory(SKS_EFT_ActionHistory::NotPosted, _SKS_EFTAP_File.RecId, '', strFmt("@SKS3349", _JournalNum), _JournalNum);
                }
                ret =  false;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>BuildBankFields</Name>
				<Source><![CDATA[
    public static server void BuildBankFields(SKS_EFT_FileDetail _sks_eft_FileDetail, SKS_EFT_Bank _sks_eft_bank,
        DataAreaId _pmtCompany = curExt(), BankAccountTable _bankAccountTable = null) // FDD-10590
    {
        // SKS_EFT_Bank fields
        _sks_eft_FileDetail.BankAcctType = _sks_eft_bank.AcctType;
        _sks_eft_FileDetail.BankOrigDFI = _sks_eft_bank.ACHOrigDFI;

        _sks_eft_FileDetail.FileACHImmDest = _sks_eft_bank.ACHImmDest;
        _sks_eft_FileDetail.FileACHImmDestName = _sks_eft_bank.ACHImmDestName;
        _sks_eft_FileDetail.FileACHImmOrigin = _sks_eft_bank.ACHImmOrig;
        _sks_eft_FileDetail.FileACHImmOriginName = _sks_eft_bank.ACHImmOrigName;
        _sks_eft_FileDetail.FileCrLf = _sks_eft_bank.FileCrLf;

        if(_sks_eft_bank.CompanyIDUnique)
        {
            switch(_sks_eft_FileDetail.PaymSpec)
            {
                case 'CCD':
                case 'CCD+':
                case 'ACH-CCD':
                case 'ACH-CCD+':
                    _sks_eft_FileDetail.FileACHCompanyId = _sks_eft_bank.CompanyIDCCD;
                    _sks_eft_FileDetail.FileACHCompanyName = _sks_eft_bank.CompanyNameCCD;
                    break;
                case 'IAT':
                case 'ACH-IAT':
                    _sks_eft_FileDetail.FileACHCompanyId = _sks_eft_bank.CompanyIDIAT;
                    _sks_eft_FileDetail.FileACHCompanyName = _sks_eft_bank.CompanyNameIAT;
                    break;
                case 'PPD':
                case 'PPD+':
                case 'ACH-PPD':
                case 'ACH-PPD+':
                    _sks_eft_FileDetail.FileACHCompanyId = _sks_eft_bank.CompanyIDPPD;
                    _sks_eft_FileDetail.FileACHCompanyName = _sks_eft_bank.CompanyNamePPD;
                    break;
                case 'CTX':
                case 'ACH-CTX':
                    _sks_eft_FileDetail.FileACHCompanyId = _sks_eft_bank.CompanyIDCTX;
                    _sks_eft_FileDetail.FileACHCompanyName = _sks_eft_bank.CompanyNameCTX;
                    break;
                default:
                    _sks_eft_FileDetail.FileACHCompanyId = _sks_eft_bank.ACHCompanyID;
                    _sks_eft_FileDetail.FileACHCompanyName = _sks_eft_bank.ACHCompanyName;
            }
        }

        // If id or name were not set above, set them to the non-unique values
        if(_sks_eft_FileDetail.FileACHCompanyId == '')
        {
            _sks_eft_FileDetail.FileACHCompanyId = _sks_eft_bank.ACHCompanyID;
        }
        if(_sks_eft_FileDetail.FileACHCompanyName == '')
        {
            _sks_eft_FileDetail.FileACHCompanyName = _sks_eft_bank.ACHCompanyName;
        }

        // BankAccountTable fields
        _sks_eft_FileDetail.BankBankAcct = _bankAccountTable.AccountNum;
        _sks_eft_FileDetail.BankAccountId = _bankAccountTable.AccountID;
        _sks_eft_FileDetail.BankBankTransit = _bankAccountTable.RegistrationNum;
        // SKS_FDD_10590 -->
        _sks_eft_FileDetail.BankBankCodeType = _bankAccountTable.BankCodeType;
        _sks_eft_FileDetail.BankBankIBAN = _bankAccountTable.IBAN;
        _sks_eft_FileDetail.BankBankSwiftNo = _bankAccountTable.SWIFTNo;
        _sks_eft_FileDetail.BankBankSortCode = _bankAccountTable.BankSortCode;
        // SKS_FDD_10590 <--
        //FDD-10590 --->
        _sks_eft_FileDetail.CurrencyCode = _bankAccountTable.CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>BuildVendorFields</Name>
				<Source><![CDATA[
    public static server void BuildVendorFields(SKS_EFT_FileDetail _sks_eft_FileDetail, LedgerJournalTrans _ledgerJournalTrans = null) //SKS_FDD_10590
    {
        VendTable vendTable;
        SKS_EFT_VendorPaym sks_eft_vendorpaym;
        VendBankAccount vendBankAccount;
        //9785 SKS pmt upd
        SKS_UPLD_PMT                sks_upld_pmt;
        SKS_EFT_FileFormatPaymSpec  sks_eft_fileformatpaymspec;

        CompanyInfo         companyInfo; //FDD-10590

        //sks_eft_vendorpaym = SKS_EFT_VendorPaym::find(_sks_eft_FileDetail.AccountCompany, _sks_eft_FileDetail.AccountNum, _sks_eft_FileDetail.PaymMode, _sks_eft_FileDetail.PaymSpec, _sks_eft_FileDetail.DepBankAccountId);
        sks_eft_vendorpaym = SKS_EFT_VendorPaym::findByCompany( _ledgerJournalTrans.Company(),
                                                                _ledgerJournalTrans.Company,
                                                                _sks_eft_FileDetail.AccountNum,
                                                                _ledgerJournalTrans.PaymMode,
                                                                _ledgerJournalTrans.PaymSpec,
                                                                _ledgerJournalTrans.CustVendBankAccountId);
        vendTable = VendTable::findByCompany(_sks_eft_FileDetail.AccountCompany, _sks_eft_FileDetail.AccountNum);
        vendBankAccount = VendBankAccount::findByCompany(_sks_eft_FileDetail.AccountCompany, _sks_eft_FileDetail.AccountNum, _sks_eft_FileDetail.DepBankAccountId);

        sks_eft_FileFormatPaymSpec = SKS_EFT_FileFormatPaymSpec::findByCompany(_sks_eft_FileDetail.PaymentCompany ? _sks_eft_FileDetail.PaymentCompany : _sks_eft_FileDetail.DataAreaId,
                                                                               _sks_eft_FileDetail.FormatId, _sks_eft_FileDetail.PaymSpec);

        if(substr(_sks_eft_FileDetail.PaymSpec,1,3) == enum2str(SKS_EFT_CompanyPaymSpec::IAT))
        {
            _sks_eft_FileDetail.DepCountryRegionId = sks_eft_vendorpaym.WBeneCountryRegionId;
        }

        if(sks_eft_fileformatpaymspec.RecordSummary == SKS_EFT_PaymSpecRecordSummary::Payment)
        {
            _sks_eft_FileDetail.DepRecord = SKS_EFT_VendorRecordSummary::Payment;
        }
        else if(sks_eft_fileformatpaymspec.RecordSummary == SKS_EFT_PaymSpecRecordSummary::Invoice)
        {
            _sks_eft_FileDetail.DepRecord = SKS_EFT_VendorRecordSummary::Invoice;
        }
        else
        {
            _sks_eft_FileDetail.DepRecord = sks_eft_vendorpaym.RecordSummary;
        }

        _sks_eft_FileDetail.DepEDIVersion = sks_eft_vendorpaym.EDIVersion;
        _sks_eft_FileDetail.EDI820Layout = sks_eft_vendorpaym.EDI820Layout;//SKS_FDD_10590
        if(_ledgerJournalTrans.SKS_EFT_IsPaymentUpload == NoYes::Yes)
        {
            if (sks_eft_fileformatpaymspec.RecordSummary == SKS_EFT_PaymSpecRecordSummary::AllAllowed)
            {
                _sks_eft_FileDetail.DepRecord = SKS_EFT_VendorRecordSummary::Payment;
            }

            sks_upld_pmt = SKS_UPLD_PMT::findRefRecId(_ledgerJournalTrans.RecId);

            if(sks_upld_pmt)
            {
                _sks_eft_FileDetail.DepBankAcctType = sks_upld_pmt.BenBankAccountType;
                _sks_eft_FileDetail.DepBankAcct = sks_upld_pmt.BenBankAccountNum;
                _sks_eft_FileDetail.DepBankCodeType = sks_upld_pmt.BenBankCodeType;
                _sks_eft_FileDetail.DepBankIBAN = sks_upld_pmt.BenBankIBAN;
                _sks_eft_FileDetail.DepSwiftNo = sks_upld_pmt.BenBankSwiftNo;
                _sks_eft_FileDetail.DepBankTransit = sks_upld_pmt.BenBankRegistrationNum;

                _sks_eft_FileDetail.AccountName = sks_upld_pmt.BeneName;
                _sks_eft_FileDetail.VATNum = sks_upld_pmt.VATNum;
            }
        }
        else
        {
            // Vendor bank account
            _sks_eft_FileDetail.DepBankAcctType = vendBankAccount.BankAccountType;
            _sks_eft_FileDetail.DepBankAcct = vendBankAccount.AccountNum;
            _sks_eft_FileDetail.DepBankCodeType = vendBankAccount.BankCodeType;

            if(subStr(_sks_eft_FileDetail.PaymSpec, 1, 3) == #PaymSpec_QRR)     //DevOps_18528
            {
                _sks_eft_FileDetail.DepBankIBAN = vendBankAccount.QRIBAN_CH;
            }
            else
            {
                _sks_eft_FileDetail.DepBankIBAN = vendBankAccount.BankIBAN;
            }
            _sks_eft_FileDetail.DepSwiftNo = vendBankAccount.SWIFTNo;
            _sks_eft_FileDetail.DepBankTransit = vendBankAccount.RegistrationNum;
            _sks_eft_FileDetail.DepPreNoteDate = vendBankAccount.SKS_EFT_PreNoteDate;
            _sks_eft_FileDetail.DepBankCurrency = vendBankAccount.CurrencyCode; // FDD_10590

            // Vendor
            _sks_eft_FileDetail.AccountName = SKS_EFT_Common::getVendorNameByParty(vendTable.Party);
            _sks_eft_FileDetail.VATNum = vendTable.VATNum;
        }

        _sks_eft_FileDetail.DepPreNoteStatus = SKS_EFT_Processing::GetPreNoteStatus(vendBankAccount.SKS_EFT_PreNoteStatus, vendBankAccount.SKS_EFT_PreNoteDate, _sks_eft_FileDetail.EffectiveDate);

        //FDD-10590 --->
        _sks_eft_FileDetail.VendYourAccountNum = vendTable.YourAccountNum;

        select firstonly Tax1099RegNum, CoRegNum, Rfc_MX from companyInfo where companyInfo.DataArea == _sks_eft_FileDetail.PaymentCompany ;
        _sks_eft_FileDetail.Tax1099RegNum = companyInfo.Tax1099RegNum;
        _sks_eft_FileDetail.CoRegNum = companyInfo.CoRegNum;
        _sks_eft_FileDetail.CompanyRfc_MX = companyInfo.Rfc_MX;
        _sks_eft_FileDetail.PaymSpecName = sks_eft_FileFormatPaymSpec.PaymSpecName;
        _sks_eft_FileDetail.TransactionCode = sks_eft_FileFormatPaymSpec.TransactionCode;
        _sks_eft_FileDetail.UseCheckNumber = sks_eft_FileFormatPaymSpec.UseCheckNumber;
        // <--- FDD-10590
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFileDetailVendAddressFromPostalAddress</Name>
				<Source><![CDATA[
    private static SKS_EFT_FileDetail_VendAddress setFileDetailVendAddressFromPostalAddress(LogisticsPostalAddress lRemittancePostalAddress)
    {
        SKS_EFT_FileDetail_VendAddress      sks_eft_filedetailadress;
        Array                   vendAddrArray = new Array(Types::String);

        vendAddrArray = SKS_PP_50000Bas::StreetToAddressLineArray(lRemittancePostalAddress.Street,3);

        if(vendAddrArray.exists(1))
        {
            sks_eft_filedetailadress.BeneAddr = vendAddrArray.value(1);
            if (vendAddrArray.exists(2))
            {
                sks_eft_filedetailadress.BeneAddr2 = vendAddrArray.value(2);
            }
            if (vendAddrArray.exists(3))
            {
                sks_eft_filedetailadress.BeneAddr3 = vendAddrArray.value(3);
            }
        }
        sks_eft_filedetailadress.BeneBuildingCompliment = lRemittancePostalAddress.BuildingCompliment;
        sks_eft_filedetailadress.BeneCity = lRemittancePostalAddress.City;
        sks_eft_filedetailadress.BeneCountryRegionId = SKS_EFT_Processing::getLogisticsAddressCountryISO(lRemittancePostalAddress.CountryRegionId);
        sks_eft_filedetailadress.BeneCounty = lRemittancePostalAddress.County;
        sks_eft_filedetailadress.BeneState = lRemittancePostalAddress.State;
        sks_eft_filedetailadress.BeneStreet = SKS_PP_StringFormats::strRemoveCRLF(lRemittancePostalAddress.Street);
        sks_eft_filedetailadress.BeneStreetNumber = lRemittancePostalAddress.StreetNumber;
        sks_eft_filedetailadress.BeneZipPostal  = lRemittancePostalAddress.ZipCode;
        sks_eft_filedetailadress.BeneDistrictName = lRemittancePostalAddress.DistrictName;

        return sks_eft_filedetailadress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFileDetailVendAddressFromVendPaym</Name>
				<Source><![CDATA[
    private static SKS_EFT_FileDetail_VendAddress setFileDetailVendAddressFromVendPaym(SKS_EFT_VendorPaym sks_eft_vendorpaym)
    {
        SKS_EFT_FileDetail_VendAddress      sks_eft_filedetailadress;

        sks_eft_filedetailadress.BeneName = sks_eft_vendorpaym.WBeneName;

        sks_eft_filedetailadress.BeneAddr =  sks_eft_vendorpaym.WBeneAddr ;
        sks_eft_filedetailadress.BeneAddr2 = sks_eft_vendorpaym.WBeneAddr2;
        sks_eft_filedetailadress.BeneCity =  sks_eft_vendorpaym.WBeneCity;
        sks_eft_filedetailadress.BeneState = sks_eft_vendorpaym.WBeneState;
        sks_eft_filedetailadress.BeneZipPostal =  sks_eft_vendorpaym.WBeneZipPostal;
        sks_eft_filedetailadress.BeneCountryRegionId =  sks_eft_vendorpaym.WBeneCountryRegionId;

        return sks_eft_filedetailadress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>BuildUploadVendorFields</Name>
				<Source><![CDATA[
    //9785 IHB SKS Pmt upd
    ///for inserting the upload vendor payment data
    public static server void BuildUploadVendorFields(SKS_EFT_FileDetail _sks_eft_FileDetail, LedgerJournalTrans ledgerJournalTrans = null) // SKS_FDD_10590
    {
        SKS_EFT_FileDetail_VendAddress      sks_eft_filedetailadress;
        SKS_EFT_FileDetail_Intermediary     sks_eft_filedetailintermediary;
        SKS_EFT_FileDetail_Extra            sks_eft_filedetailextra;
        SKS_EFT_FileDetail_BenBank          sks_eft_filedetailbenbank;
        SKS_UPLD_PMT                        sks_upld_PMT;
        SKS_UPLD_PMTXTRA                    sks_upld_PMTXTRA;
        SKS_EFT_VendorPaym                  sks_eft_vendorpaym;
        SKS_EFT_FileFormatPaymSpecFields    sks_EFT_FileFormatPaymSpecFields;

        //FDD-10590 --->
        VendBankAccount                 lVendBankAccount;
        LogisticsPostalAddress          lLogisticsPostalAddress;
        SKS_EFT_FileDetail_Addresses    sks_EFT_FileDetail_VendBankAddress;
        SKS_EFT_FileDetail_CreditParty  sKS_EFT_FileDetail_CreditParty;
        SKS_EFT_FileDetail_Instructions sKS_EFT_FileDetail_Instructions;
        VendTable                       lVendTable;
        DirPartyContactInfoview         lDirPartyContactInfoview;
        //<--- FDD-10590

        // SKS_FDD_10590 -->
        LedgerJournalTrans      lLedgerJournalTrans;
        LogisticsLocation       lLogisticsLocation;
        LogisticsPostalAddress  lRemittancePostalAddress;
        Array                   vendAddrArray = new Array(Types::String);
        SKS_EB_Address          addressBldgNb, addressStrtNm;
        container               address;
        // SKS_FDD_10590 <--

        sks_upld_PMT = SKS_UPLD_PMT::findRefRecId(ledgerJournalTrans.RecId);

        sks_eft_vendorpaym = SKS_EFT_VendorPaym::findByCompany(_sks_eft_FileDetail.PaymentCompany ? _sks_eft_FileDetail.PaymentCompany : _sks_eft_FileDetail.DataAreaId,_sks_eft_FileDetail.AccountCompany, _sks_eft_FileDetail.AccountNum,
                                                               _sks_eft_FileDetail.PaymMode, _sks_eft_FileDetail.PaymSpec, _sks_eft_FileDetail.DepBankAccountId); //FDD-10590

        void beneFields()
        {
            if(sks_upld_PMT)
            {
                if(sks_upld_PMT.BeneMailHandling)
                {
                    sks_eft_filedetailextra.FieldName = 'BenMailHandle';
                    sks_eft_filedetailextra.Value = sks_upld_PMT.BeneMailHandling;
                }
                if(sks_upld_PMT.BeneAdvice)
                {
                    sks_eft_filedetailextra.FieldName = 'BenAdvice';
                    sks_eft_filedetailextra.Value = sks_upld_PMT.BeneAdvice;
                }
                if(sks_upld_PMT.ChargesIndic)
                {
                    sks_eft_filedetailextra.FieldName = 'ChargesIndic';
                    sks_eft_filedetailextra.Value = sks_upld_PMT.ChargesIndic;
                }
            }
        }

        if(sks_upld_PMT)
        {
            sks_eft_filedetailadress.BeneAddr =  sks_upld_PMT.BeneAddr ;
            sks_eft_filedetailadress.BeneAddr2 = sks_upld_PMT.BeneAddr2;
            sks_eft_filedetailadress.BeneCity =  sks_upld_PMT.BeneCity;
            sks_eft_filedetailadress.BeneState = sks_upld_PMT.BeneState;
            sks_eft_filedetailadress.BeneZipPostal =  sks_upld_PMT.BeneZipPostal;
            sks_eft_filedetailadress.BeneCountryRegionId =  sks_upld_PMT.BeneCountryRegionId;
            sks_eft_filedetailadress.RefRecId =  _sks_eft_FileDetail.RecId;

            sks_eft_filedetailintermediary.IntBankQualifier = sks_upld_PMT.IntBankQualifier;
            sks_eft_filedetailintermediary.IntBankId = sks_upld_PMT.IntBankId;
            sks_eft_filedetailintermediary.IntBankSwift = sks_upld_PMT.IntBankSwift;
            sks_eft_filedetailintermediary.IntBankAcct = sks_upld_PMT.IntBankAcct;
            sks_eft_filedetailintermediary.IntBankBranch = sks_upld_PMT.IntBankBranch;
            sks_eft_filedetailintermediary.IntBankName = sks_upld_PMT.IntBankName;
            sks_eft_filedetailintermediary.IntBankAddr = sks_upld_PMT.IntBankAddr;
            sks_eft_filedetailintermediary.IntBankAddr2 = sks_upld_PMT.IntBankAddr2;
            sks_eft_filedetailintermediary.IntBankCity = sks_upld_PMT.IntBankCity;
            sks_eft_filedetailintermediary.IntBankCountryRegionId = sks_upld_PMT.IntBankCountryRegionId;
            sks_eft_filedetailintermediary.RefRecId =  _sks_eft_FileDetail.RecId;

            sks_eft_filedetailbenbank.BenBankName = sks_upld_PMT.BenBankName;
            sks_eft_filedetailbenbank.BenBankAddr = sks_upld_PMT.BenBankAddr;
            sks_eft_filedetailbenbank.BenBankBranch = sks_upld_PMT.BenBankBranch;
            sks_eft_filedetailbenbank.BenBankCity = sks_upld_PMT.BenBankCity;
            sks_eft_filedetailbenbank.BenBankCountryRegionId = sks_upld_PMT.BenBankCountryRegionId;
            sks_eft_filedetailbenbank.RefRecId = _sks_eft_FileDetail.RecId;
        }
        else
        {
            SKS_EFT_FileFormatPaymSpec sks_eft_FileFormatPaymSpec = SKS_EFT_FileFormatPaymSpec::findByCompany(_sks_eft_FileDetail.PaymentCompany ? _sks_eft_FileDetail.PaymentCompany : _sks_eft_FileDetail.DataAreaId,
                                                                               _sks_eft_FileDetail.FormatId, _sks_eft_FileDetail.PaymSpec);

            SKS_EFT_FileFormat lSKS_EFT_FileFormat = SKS_EFT_FileFormat::findByCompany(_sks_eft_FileDetail.PaymentCompany, _sks_eft_FileDetail.FormatId);

            if(lSKS_EFT_FileFormat.FormatGroupCodeSource == SKS_EB_CodeSource::BankFabric)
            {
                if(sks_eft_FileFormatPaymSpec.APAddressType == SKS_EFT_APAddressType::PaymentJournalRemit && _sks_eft_FileDetail.PaymentLineRecId)
                {
                    select firstonly crosscompany RemittanceLocation from lLedgerJournalTrans
                          where lLedgerJournalTrans.Recid == _sks_eft_FileDetail.PaymentLineRecId
                      join lRemittancePostalAddress
                          where lRemittancePostalAddress.Location == lLedgerJournalTrans.RemittanceLocation;

                    sks_eft_filedetailadress = SKS_EFT_Processing::setFileDetailVendAddressFromPostalAddress(lRemittancePostalAddress);
                }
                else if(sks_eft_FileFormatPaymSpec.APAddressType == SKS_EFT_APAddressType::SKGEBDOverride && sks_eft_vendorpaym.WBeneRemittanceLocation)
                {
                    select firstonly * from lRemittancePostalAddress
                        where lRemittancePostalAddress.Location == sks_eft_vendorpaym.WBeneRemittanceLocation;

                    sks_eft_filedetailadress = SKS_EFT_Processing::setFileDetailVendAddressFromPostalAddress(lRemittancePostalAddress);
                }
                else
                {
                    sks_eft_filedetailadress = SKS_EFT_Processing::setFileDetailVendAddressFromVendPaym(sks_eft_vendorpaym);
                }

                if(sks_eft_FileFormatPaymSpec.APNameType == SKS_EFT_APNameType::VendorMaster)
                {
                    sks_eft_filedetailadress.BeneName = _sks_eft_FileDetail.AccountName;
                }
                else if(sks_eft_FileFormatPaymSpec.APAddressType == SKS_EFT_APAddressType::PaymentJournalRemit && _sks_eft_FileDetail.PaymentLineRecId)
                {
                    select firstonly crosscompany RemittanceLocation from lLedgerJournalTrans
                          where lLedgerJournalTrans.Recid == _sks_eft_FileDetail.PaymentLineRecId
                      join lRemittancePostalAddress
                          where lRemittancePostalAddress.Location == lLedgerJournalTrans.RemittanceLocation;

                    lLogisticsLocation = LogisticsLocation::find(lRemittancePostalAddress.Location);
                    sks_eft_filedetailadress.BeneName = lLogisticsLocation.Description;
                }
                else if(sks_eft_FileFormatPaymSpec.APAddressType == SKS_EFT_APAddressType::SKGEBDOverride && sks_eft_vendorpaym.WBeneRemittanceLocation)
                {
                    lLogisticsLocation = LogisticsLocation::find(sks_eft_vendorpaym.WBeneRemittanceLocation);
                    sks_eft_filedetailadress.BeneName = lLogisticsLocation.Description;
                }
                else
                {
                    sks_eft_filedetailadress.BeneName = sks_eft_vendorpaym.WBeneName;
                }

            }
            else
            {
                // SKS_FDD_10590 -->
                //vendor address


                if((sks_eft_FileFormatPaymSpec.UseCheckNumber == NoYes::Yes && _sks_eft_FileDetail.PaymentLineRecId) || sks_eft_vendorpaym.WBeneRemittanceLocation)
                {

                    if(sks_eft_FileFormatPaymSpec.UseCheckNumber == NoYes::Yes && _sks_eft_FileDetail.PaymentLineRecId)
                    {
                        select firstonly crosscompany RemittanceLocation from lLedgerJournalTrans
                          where lLedgerJournalTrans.Recid == _sks_eft_FileDetail.PaymentLineRecId
                      join lRemittancePostalAddress
                          where lRemittancePostalAddress.Location == lLedgerJournalTrans.RemittanceLocation;

                        lLogisticsLocation = LogisticsLocation::find(lLedgerJournalTrans.RemittanceLocation);
                    }
                    else // Populate from D365 address specified on vendor ebanking details - payment spec, not specific fields
                    {
                        select firstonly * from lRemittancePostalAddress
                        where lRemittancePostalAddress.Location == sks_eft_vendorpaym.WBeneRemittanceLocation;

                        lLogisticsLocation = LogisticsLocation::find(sks_eft_vendorpaym.WBeneRemittanceLocation);
                    }

                    //Populate Remittance Information
                    sks_eft_filedetailadress.BeneName = lLogisticsLocation.Description;

                    vendAddrArray = SKS_PP_50000Bas::StreetToAddressLineArray(lRemittancePostalAddress.Street,3);

                    if(vendAddrArray.exists(1))
                    {
                        sks_eft_filedetailadress.BeneAddr = vendAddrArray.value(1);
                        if (vendAddrArray.exists(2))
                        {
                            sks_eft_filedetailadress.BeneAddr2 = vendAddrArray.value(2);
                        }
                        if (vendAddrArray.exists(3))
                        {
                            sks_eft_filedetailadress.BeneAddr3 = vendAddrArray.value(3);
                        }
                    }
                    sks_eft_filedetailadress.BeneBuildingCompliment = lRemittancePostalAddress.BuildingCompliment;
                    sks_eft_filedetailadress.BeneCity = lRemittancePostalAddress.City;
                    sks_eft_filedetailadress.BeneCountryRegionId = SKS_EFT_Processing::getLogisticsAddressCountryISO(lRemittancePostalAddress.CountryRegionId);
                    sks_eft_filedetailadress.BeneCounty = lRemittancePostalAddress.County;
                    sks_eft_filedetailadress.BeneState = lRemittancePostalAddress.State;
                    sks_eft_filedetailadress.BeneStreet = SKS_PP_StringFormats::strRemoveCRLF(lRemittancePostalAddress.Street);
                    sks_eft_filedetailadress.BeneStreetNumber = lRemittancePostalAddress.StreetNumber;
                    sks_eft_filedetailadress.BeneZipPostal  = lRemittancePostalAddress.ZipCode;
                    sks_eft_filedetailadress.BeneDistrictName = lRemittancePostalAddress.DistrictName;

                }
                else
                {
                    sks_eft_filedetailadress.BeneName = sks_eft_vendorpaym.WBeneName;

                    // SKS_FDD_10590 <--
                    sks_eft_filedetailadress.BeneAddr =  sks_eft_vendorpaym.WBeneAddr ;
                    sks_eft_filedetailadress.BeneAddr2 = sks_eft_vendorpaym.WBeneAddr2;
                    sks_eft_filedetailadress.BeneCity =  sks_eft_vendorpaym.WBeneCity;
                    sks_eft_filedetailadress.BeneState = sks_eft_vendorpaym.WBeneState;
                    sks_eft_filedetailadress.BeneZipPostal =  sks_eft_vendorpaym.WBeneZipPostal;
                    sks_eft_filedetailadress.BeneCountryRegionId =  sks_eft_vendorpaym.WBeneCountryRegionId;
                }
            }

            lVendTable = VendTable::findByCompany(_sks_eft_FileDetail.AccountCompany, _sks_eft_FileDetail.AccountNum);

            select firstonly * from lDirPartyContactInfoview
                        where lDirPartyContactInfoview.Party == lVendTable.Party && lDirPartyContactInfoview.IsPrimary == true
                            &&  lDirPartyContactInfoview.Type == LogisticsElectronicAddressMethodType::Email;

            sks_eft_filedetailadress.Locator = lDirPartyContactInfoview.Locator;

            select firstonly * from lDirPartyContactInfoview
                        where lDirPartyContactInfoview.Party == lVendTable.Party && lDirPartyContactInfoview.IsPrimary == true
                            &&  lDirPartyContactInfoview.Type == LogisticsElectronicAddressMethodType::Fax;

            sks_eft_filedetailadress.Fax = lDirPartyContactInfoview.Locator;
            
            sks_eft_filedetailadress.LocationName = lDirPartyContactInfoview.LocationName;
            //<--- FDD-10590
            sks_eft_filedetailadress.RefRecId =  _sks_eft_FileDetail.RecId;
            //intermediary bank
            sks_eft_filedetailintermediary.IntBankQualifier = sks_eft_vendorpaym.WIntBankQualifier;
            sks_eft_filedetailintermediary.IntBankId = sks_eft_vendorpaym.WIntBankId;
            sks_eft_filedetailintermediary.IntBankSwift = sks_eft_vendorpaym.WIntBankSwift;
            sks_eft_filedetailintermediary.IntBankAcct = sks_eft_vendorpaym.WIntBankAcct;
            sks_eft_filedetailintermediary.IntBankBranch = sks_eft_vendorpaym.WIntBankBranch;
            sks_eft_filedetailintermediary.IntBankName = sks_eft_vendorpaym.WIntBankName;
            sks_eft_filedetailintermediary.IntBankAddr = sks_eft_vendorpaym.WIntBankAddr;
            sks_eft_filedetailintermediary.IntBankAddr2 = sks_eft_vendorpaym.WIntBankAddr2;
            sks_eft_filedetailintermediary.IntBankCity = sks_eft_vendorpaym.WIntBankCity;
            sks_eft_filedetailintermediary.IntBankCountryRegionId = sks_eft_vendorpaym.WIntBankCountryRegionId;
            sks_eft_filedetailintermediary.RefRecId =  _sks_eft_FileDetail.RecId;
            //vendor beneficiary bank
            sks_eft_filedetailbenbank.BenBankName = sks_eft_vendorpaym.WBenBankName;
            sks_eft_filedetailbenbank.BenBankAddr = sks_eft_vendorpaym.WBenBankAddr;
            sks_eft_filedetailbenbank.BenBankBranch = sks_eft_vendorpaym.WBenBankBranch;
            sks_eft_filedetailbenbank.BenBankCity = sks_eft_vendorpaym.WBenBankCity;
            sks_eft_filedetailbenbank.BenBankAcct = sks_eft_vendorpaym.WBenBankAcct;      //FDD-10590
            sks_eft_filedetailbenbank.BenBankCountryRegionId = sks_eft_vendorpaym.WBenBankCountryRegionId;

            //FDD-10590 --->
            //credit party
            sKS_EFT_FileDetail_CreditParty.CrePartyAcct = sks_eft_vendorpaym.WCrePartyAcct;
            sKS_EFT_FileDetail_CreditParty.CrePartyAddr = sks_eft_vendorpaym.WCrePartyAddr;
            sKS_EFT_FileDetail_CreditParty.CrePartyBankId = sks_eft_vendorpaym.WCrePartyBankId;
            sKS_EFT_FileDetail_CreditParty.CrePartyBankName = sks_eft_vendorpaym.WCrePartyBankName;
            sKS_EFT_FileDetail_CreditParty.CrePartyCity = sks_eft_vendorpaym.WCrePartyCity;
            sKS_EFT_FileDetail_CreditParty.CrePartyCountryRegionId = sks_eft_vendorpaym.WCrePartyCountryRegionId;
            sKS_EFT_FileDetail_CreditParty.CrePartyName = sks_eft_vendorpaym.WCrePartyName;
            sKS_EFT_FileDetail_CreditParty.CrePartySwift = sks_eft_vendorpaym.WCrePartySwift;
            sKS_EFT_FileDetail_CreditParty.RefRecId = _sks_eft_FileDetail.RecId;

            //payment instructions
            sKS_EFT_FileDetail_Instructions.PmtInstText1 = sks_eft_vendorpaym.WPmtInstText1;
            sKS_EFT_FileDetail_Instructions.PmtInstText2 = sks_eft_vendorpaym.WPmtInstText2;
            sKS_EFT_FileDetail_Instructions.PmtInstText3 = sks_eft_vendorpaym.WPmtInstText3;
            sKS_EFT_FileDetail_Instructions.PmtInstText4 = sks_eft_vendorpaym.WPmtInstText4;

            //bank instructions
            sKS_EFT_FileDetail_Instructions.BankInst1 = sks_eft_vendorpaym.WBankInst1;
            sKS_EFT_FileDetail_Instructions.BankInst2 = sks_eft_vendorpaym.WBankInst2;
            sKS_EFT_FileDetail_Instructions.BankInst3 = sks_eft_vendorpaym.WBankInst3;
            sKS_EFT_FileDetail_Instructions.BankInst4 = sks_eft_vendorpaym.WBankInst4;
            sKS_EFT_FileDetail_Instructions.BankInst5 = sks_eft_vendorpaym.WBankInst5;
            sKS_EFT_FileDetail_Instructions.BankInst6 = sks_eft_vendorpaym.WBankInst6;
            sKS_EFT_FileDetail_Instructions.RefRecId = _sks_eft_FileDetail.RecId;

            if(lVendBankAccount.AccountID != _sks_eft_FileDetail.DepBankAccountId || lVendBankAccount.VendAccount != _sks_eft_FileDetail.AccountNum)
            {
                lVendBankAccount = VendBankAccount::findByCompany(_sks_eft_FileDetail.AccountCompany, _sks_eft_FileDetail.AccountNum, _sks_eft_FileDetail.DepBankAccountId);
            }
            select firstonly State, ZipCode, Location, CountryRegionId from lLogisticsPostalAddress where lLogisticsPostalAddress.Location == lVendBankAccount.Location;
            //file detail vendor bank address
            sks_EFT_FileDetail_VendBankAddress.Phone = lVendBankAccount.Phone;
            if(_sks_eft_FileDetail.Module == SKS_EFT_Module::AP)
            {
                sks_EFT_FileDetail_VendBankAddress.BankAccountNameKana_JP = lVendBankAccount.BankAccountNameKana_JP;    //SKS_VSTS_14557
            }
            else
            {
                sks_EFT_FileDetail_VendBankAddress.BankAccountNameKana_JP = '';
            }
            sks_EFT_FileDetail_VendBankAddress.PhoneLocal = lVendBankAccount.PhoneLocal;
            sks_EFT_FileDetail_VendBankAddress.AccountId = LedgerJournalTrans.CustVendBankAccountId;
            sks_EFT_FileDetail_VendBankAddress.City = lLogisticsPostalAddress.City;
            sks_EFT_FileDetail_VendBankAddress.CountryRegionId = lLogisticsPostalAddress.CountryRegionId;
            sks_EFT_FileDetail_VendBankAddress.State = lLogisticsPostalAddress.State;
            sks_EFT_FileDetail_VendBankAddress.ZipCode = lLogisticsPostalAddress.ZipCode;
            sks_EFT_FileDetail_VendBankAddress.Location = lLogisticsPostalAddress.Location;


            if(strScan(lLogisticsPostalAddress.Street, ';', 1, strLen(lLogisticsPostalAddress.Street)))
            {
                address = SKS_EFT_Processing::addressSplit(lLogisticsPostalAddress.Street);
                addressStrtNm = conpeek(address,1);
                addressBldgNb = conpeek(address,2);
            }
            else
            {
                addressStrtNm = lLogisticsPostalAddress.Street;
            }
            sks_EFT_FileDetail_VendBankAddress.Addr = SKS_PP_StringFormats::strRemoveCRLF(addressStrtNm);
            sks_EFT_FileDetail_VendBankAddress.Addr2 = SKS_PP_StringFormats::strRemoveCRLF(addressBldgNb);

            //SKS#DevOps:15254
            /*if(sks_eft_filedetailbenbank.BenBankCountryRegionId == '')
            {
                sks_eft_filedetailbenbank.BenBankCountryRegionId = lLogisticsPostalAddress.CountryRegionId;
            }*/
            sks_EFT_FileDetail_VendBankAddress.AddressType = SKS_EFT_AddressType::VendBankAddress;
            sks_EFT_FileDetail_VendBankAddress.RefRecId =  _sks_eft_FileDetail.RecId;
            sks_EFT_FileDetail_VendBankAddress.insert();
            //<--- FDD-10590
            sks_eft_filedetailbenbank.RefRecId = _sks_eft_FileDetail.RecId;
        }

        sks_upld_PMTXTRA = SKS_UPLD_PMTXTRA::findRefRecId(ledgerJournalTrans.RecId);
        SKS_EFT_FileFormatPaymSpec sks_eft_FileFormatPaymSpec = SKS_EFT_FileFormatPaymSpec::findByCompany
                                                                (_sks_eft_FileDetail.PaymentCompany ? _sks_eft_FileDetail.PaymentCompany : _sks_eft_FileDetail.DataAreaId,
                                                                 _sks_eft_FileDetail.FormatId, _sks_eft_FileDetail.PaymSpec);

        if(sks_upld_PMTXTRA)
        {
            while select FieldName, Value from sks_upld_PMTXTRA
                    where sks_upld_PMTXTRA.RefRecId == ledgerJournalTrans.RecId
            {
                sks_eft_filedetailextra.FieldName = sks_upld_PMTXTRA.FieldName;
                sks_eft_filedetailextra.Value = sks_upld_PMTXTRA.Value;
                sks_eft_filedetailextra.RefRecId  = _sks_eft_FileDetail.RecId;
                beneFields();
                sks_eft_filedetailextra.insert();
            }

        }
        else
        {
            if(sks_eft_vendorpaym)
            {
                container companies;
                companies += sks_eft_FileFormatPaymSpec.company();
                while select crosscompany:companies FormatFieldId, CodeId from sks_EFT_FileFormatPaymSpecFields
                    where sks_EFT_FileFormatPaymSpecFields.FileFormatPaymSpecRecId == sks_eft_FileFormatPaymSpec.RecId
                {
                    sks_eft_filedetailextra.FieldName = sks_EFT_FileFormatPaymSpecFields.FormatFieldId;

                    str codeLookupValue;
                    changecompany (sks_eft_vendorpaym.DataAreaId)
                    {
                        codeLookupValue = sks_eft_format::getValueFromCode(sks_EFT_FileFormatPaymSpecFields.FormatFieldId, sks_eft_FileFormatPaymSpec, sks_eft_vendorpaym.RecId);
                    }
                    sks_eft_filedetailextra.Value = codeLookupValue;
                    sks_eft_filedetailextra.RefRecId  = _sks_eft_FileDetail.RecId;
                    sks_eft_filedetailextra.insert();
                }

            }
        }

        sks_eft_filedetailadress.insert();
        sks_eft_filedetailintermediary.insert();
        sks_eft_filedetailbenbank.insert();
        sKS_EFT_FileDetail_CreditParty.insert();
        sKS_EFT_FileDetail_Instructions.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>BuildMultiCompFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// multi company file detail data insertion
    /// </summary>
    /// <param name = "_sks_eft_FileDetail"></param>
    /// <param name = "_ledgerJournalTrans"></param>
    /// FDD-10590
    public static server void BuildMultiCompFields(SKS_EFT_FileDetail _sks_eft_FileDetail, LedgerJournalTrans _ledgerJournalTrans = null)
    {
        SKS_EFT_FileDetail_BankAccount          sks_eft_fileBankAccount;
        SKS_EFT_FileDetail_PaymentLine          sks_eft_filePaymentLine;
        SKS_EFT_FileDetail_AddendaHeader        sks_eft_fileAddendaHeader;
        SKS_EFT_FileDetail_AddendaDetailConfig  sks_eft_fileAddendaDetailConfig;
        SKS_EFT_FileDetail_CustAddress          sks_eft_fileCustAddress;
        SKS_EFT_AddendaFormats                  sks_eft_addendaFormats;
        SKS_EFT_FileDetail_Mandate              sks_eft_fileMandate;
        SKS_EFT_Bank                            sks_eft_bank;
        SKS_EFTAR_Bank                          sks_eftar_Bank;
        SKS_EFT_AddendaFields                   sks_eft_AddendaFields;
        custDirectDebitMandate                  custDirectDebitMandate;
        VendPaymModeTable                       vendPaymModeTable;
        SKS_EFT_VendorPaym                      sks_eft_vendorpaym;
        LogisticsPostalAddress                  postalAddress;
        SKS_EB_Address                          addressBldgNb, addressStrtNm;
        container                               address;
        CustBankAccount                         lcustBankAccount;
        LogisticsPostalAddress                  lLogisticsPostalAddress,logisticsPostalAddressBank, logisticsPostalAddressVendor;
        SKS_EFT_FileDetail_Addresses            sks_eft_fileBankAddress, sks_eft_fileCustBankAddress, sks_eft_fileVendCountryAddress;
        SKS_EFT_FileDetail_Extra                sks_EFT_FileDetail_Extra;
        BankAccountTable                        bankAccountTable;
        VendTable                               vendTable;
        LedgerJournalTable                      ledgerJournalTable = LedgerJournalTable::find(_ledgerJournalTrans.JournalNum);
        DirPartyTable                           dirPartyTable;
        SKS_EFT_CustomerPaym                    sks_eft_customerpaym;
        SKS_EFT_FilePmtSelection                locSKS_EFT_FilePmtSelection; //SKS_VSTS_12875
        SKS_EFT_FileFormatFields                lSKS_EFT_FileFormatFields;
        container companies;        
        ;


        
        // insert TaxWithHoldTrans and its related data into file detail tables.
        void buildFD_TAXWH_Data()
        {
            SKS_EFT_FileDetail              invSKS_EFT_FileDetail;
            TaxWithholdTrans                taxWithholdTrans;

            select firstonly crosscompany taxWithholdTrans where taxWithholdTrans.journalnum == _sks_eft_FileDetail.paymentjournalnum;

            if (taxWithholdTrans)
            {
                while select InvoiceVoucherNumber, InvoiceNumber, PaymentJournalNum, PaymentVoucher, PaymentLineRecId from invSKS_EFT_FileDetail
                    where invSKS_EFT_FileDetail.PaymentLineRecId == _sks_eft_FileDetail.PaymentLineRecId &&
                    invSKS_EFT_FileDetail.InvoiceNumber  !='' && invSKS_EFT_FileDetail.PaymentJournalNum !='' &&
                    invSKS_EFT_FileDetail.PaymentVoucher !=''
                {
                    SKS_EFT_Processing::build_SKS_EFT_FD_TaxWHTrans(invSKS_EFT_FileDetail.InvoiceVoucherNumber, invSKS_EFT_FileDetail.PaymentJournalNum, invSKS_EFT_FileDetail.PaymentVoucher, _sks_eft_FileDetail);
                }
            }
        }
        // SKS_FDD_10590 <--
        sks_eft_vendorpaym = SKS_EFT_VendorPaym::findbycompany(_sks_eft_FileDetail.PaymentCompany ? _sks_eft_FileDetail.PaymentCompany : _sks_eft_FileDetail.DataAreaId, _sks_eft_FileDetail.AccountCompany, _sks_eft_FileDetail.AccountNum, _sks_eft_FileDetail.PaymMode, _sks_eft_FileDetail.PaymSpec, _sks_eft_FileDetail.DepBankAccountId);

        sks_eft_customerpaym = SKS_EFT_CustomerPaym::findByCompany(_sks_eft_FileDetail.PaymentCompany ? _sks_eft_FileDetail.PaymentCompany: _sks_eft_FileDetail.DataAreaId, _sks_eft_FileDetail.AccountCompany,
                                                                       _sks_eft_FileDetail.AccountNum, _sks_eft_FileDetail.PaymMode,
                                                                       _sks_eft_FileDetail.PaymSpec, _sks_eft_FileDetail.DepBankAccountId);


        SKS_EFT_FileFormatPaymSpec sks_eft_FileFormatPaymSpec = SKS_EFT_FileFormatPaymSpec::findByCompany(_sks_eft_FileDetail.PaymentCompany ? _sks_eft_FileDetail.PaymentCompany : _sks_eft_FileDetail.DataAreaId,
                                                                               _sks_eft_FileDetail.FormatId, _sks_eft_FileDetail.PaymSpec);

        companies += sks_eft_FileFormatPaymSpec.company();

        if(_sks_eft_FileDetail.Module == SKS_EFT_Module::AP)
        {
            sks_eft_bank = SKS_EFT_Bank::findByCompany(_sks_eft_FileDetail.PaymentCompany ? _sks_eft_FileDetail.PaymentCompany : _sks_eft_FileDetail.DataAreaId, _sks_eft_FileDetail.BankAccountId, _sks_eft_FileDetail.PaymMode);
        }
        else
        {
            sks_eftar_Bank = SKS_EFTAR_Bank::findByCompany(_sks_eft_FileDetail.PaymentCompany ? _sks_eft_FileDetail.PaymentCompany : _sks_eft_FileDetail.DataAreaId, _sks_eft_FileDetail.BankAccountId, _sks_eft_FileDetail.PaymMode);
        }

        if(_ledgerJournalTrans.RecId)
        {
            changecompany(_ledgerJournalTrans.OffsetCompany)
            {
                bankAccountTable = null;
                bankAccountTable = BankAccountTable::findByLedgerDimension(_ledgerJournalTrans.OffsetLedgerDimension);
            }
            //SKS_Bug_11976 <--
            changecompany(_ledgerJournalTrans.Company)
            {
                if(ledgerJournalTable.JournalType == LedgerJournalType::Payment)
                {
                    vendTable = null;
                    vendTable = VendTable::findByLedgerDimension(_ledgerJournalTrans.LedgerDimension);
                }
            }
        }
        else//SKS_VSTS_12937--->
        {
            if(_sks_eft_FileDetail.Module == SKS_EFT_Module::AP || _sks_eft_FileDetail.Module == SKS_EFT_Module::APValidation)
            {
                bankAccountTable = null;
                bankAccountTable = BankAccountTable::findByCompany(sks_eft_VendorPaym.company(), sks_eft_VendorPaym.BankAccountId);

                vendTable = null;
                vendTable = VendTable::findByCompany(sks_eft_VendorPaym.VendCompany, sks_eft_VendorPaym.VendAccount);
            }
            else
            {
                bankAccountTable = null;
                bankAccountTable = BankAccountTable::findByCompany(sks_eft_customerpaym.company(), sks_eft_customerpaym.BankAccountId);
            }
        }
        //SKS_VSTS_12937<---

        // Assign BankAddress
        select firstonly State, ZipCode, Location,City, CountryRegionId from logisticsPostalAddressBank
            where logisticsPostalAddressBank.Location == bankAccountTable.Location;

        sks_eft_fileBankAddress.Name = bankAccountTable.Name;       //SKS_VSTS_14068
        sks_eft_fileBankAddress.City = logisticsPostalAddressBank.City;
        sks_eft_fileBankAddress.CountryRegionId = logisticsPostalAddressBank.CountryRegionId;
        sks_eft_fileBankAddress.State = logisticsPostalAddressBank.State;
        sks_eft_fileBankAddress.ZipCode = logisticsPostalAddressBank.ZipCode;
        sks_eft_fileBankAddress.Location = logisticsPostalAddressBank.Location;


        if(strScan(logisticsPostalAddressBank.Street, ';', 1, strLen(logisticsPostalAddressBank.Street)))
        {
            address = SKS_EFT_Processing::addressSplit(logisticsPostalAddressBank.Street);
            addressStrtNm = conpeek(address,1);
            addressBldgNb = conpeek(address,2);
        }
        else
        {
            addressStrtNm = logisticsPostalAddressBank.Street;
        }
        sks_eft_fileBankAddress.Addr = SKS_PP_StringFormats::strRemoveCRLF(addressStrtNm);
        sks_eft_fileBankAddress.Addr2 = SKS_PP_StringFormats::strRemoveCRLF(addressBldgNb);
        sks_eft_fileBankAddress.RefRecId =  _sks_eft_FileDetail.RecId;
        sks_eft_fileBankAddress.AddressType = SKS_EFT_AddressType::BankAddress;
        sks_eft_fileBankAddress.insert();

        // Assign Vendor country for countrycontext validations
        if(vendTable)
        {
            select firstonly PrimaryAddressLocation from dirPartyTable
                where dirPartyTable.RecId == vendTable.Party
            join Location,CountryRegionId from logisticsPostalAddressVendor
                where logisticsPostalAddressVendor.Location == dirPartyTable.PrimaryAddressLocation;

            sks_eft_fileVendCountryAddress.CountryRegionId = logisticsPostalAddressVendor.CountryRegionId;
            sks_eft_fileVendCountryAddress.AddressType = SKS_EFT_AddressType::VendCountryAddress;
            sks_eft_fileVendCountryAddress.RefRecId = _sks_eft_FileDetail.RecId;
            sks_eft_fileVendCountryAddress.insert();
        }
        //file detail bank acocunt
        if(sks_eft_bank)
        {
            sks_eft_fileBankAccount.WOrdPartyId = sks_eft_bank.WOrdPartyId;
            sks_eft_fileBankAccount.WOrdPartyName = sks_eft_bank.WOrdPartyName;
            sks_eft_fileBankAccount.WOrdPartyAddr = sks_eft_bank.WOrdPartyAddr;
            sks_eft_fileBankAccount.WOrdPartyAddr2 = sks_eft_bank.WOrdPartyAddr2;       //SKS_Bug_11785
            sks_eft_fileBankAccount.WOrdPartyCity = sks_eft_bank.WOrdPartyCity;
            sks_eft_fileBankAccount.WOrdPartyState = sks_eft_bank.WOrdPartyState;
            sks_eft_fileBankAccount.WOrdPartyCountryRegionId = sks_eft_bank.WOrdPartyCountryRegionId;
            sks_eft_fileBankAccount.WOrdPartyZipCode = sks_eft_bank.WOrdPartyZipCode;
            sks_eft_fileBankAccount.WOrdPartyCountryName = sks_eft_bank.WOrdPartyCountryName;
            sks_eft_fileBankAccount.WOrdPartySWIFTNo = sks_eft_bank.WOrdPartySWIFTNo;


            sks_eft_fileBankAccount.ACHFileIDModifier = sks_eft_bank.ACHFileIDModifier;
            sks_eft_fileBankAccount.ACHOrigDFI = sks_eft_bank.ACHOrigDFI;
            sks_eft_fileBankAccount.ACHOrigDFIName = sks_eft_bank.ACHOrigDFIName;
            sks_eft_fileBankAccount.APACHInclDR = sks_eft_bank.APACHInclDR;

            sks_eft_fileBankAccount.RefRecId = _sks_eft_FileDetail.recid;

            SKS_EFT_FileFormat lSKS_EFT_FileFormat = SKS_EFT_FileFormat::findByCompany(_sks_eft_FileDetail.PaymentCompany, _sks_eft_FileDetail.FormatId);//DevOps20187

            while select crosscompany:companies FormatFieldId, CodeId from lSKS_EFT_FileFormatFields
                where lSKS_EFT_FileFormatFields.FileFormatRecId == lSKS_EFT_FileFormat.RecId
            {
                sks_EFT_FileDetail_Extra.FieldName = lSKS_EFT_FileFormatFields.FormatFieldId;

                str codeLookupValue;
                changecompany (sks_eft_bank.DataAreaId)
                {
                    codeLookupValue = SKS_EFT_Processing::getBankAccountValueFromCode(lSKS_EFT_FileFormatFields.FormatFieldId, lSKS_EFT_FileFormat, sks_eft_bank.RecId);
                }
                sks_EFT_FileDetail_Extra.Value = codeLookupValue;
                sks_EFT_FileDetail_Extra.RefRecId  = _sks_eft_FileDetail.RecId;
                sks_EFT_FileDetail_Extra.CodeLookupType = SKS_EFT_CodeLookupType::CodeLookupBank;
                sks_EFT_FileDetail_Extra.insert();
            }

            if(_ledgerJournalTrans.RecId)
            {
                changecompany(_ledgerJournalTrans.Company)
                {
                    postalAddress = SKS_EFT_Processing::findPostalAddressLineByPartyLocationRole(CompanyInfo::current(), 'APEFT');
                }
            }
            else //SKS_VSTS_12937--->
            {
                changecompany(sks_eft_vendorpaym.DataAreaId)
                {
                    postalAddress = SKS_EFT_Processing::findPostalAddressLineByPartyLocationRole(CompanyInfo::current(), 'APEFT');
                }
            }
            //SKS_VSTS_12937<---

            if(postalAddress)
            {
                if(strScan(postalAddress.Street, ';', 1, strLen(postalAddress.Street)))
                {
                    address = SKS_EFT_Processing::addressSplit(postalAddress.Street);
                    addressStrtNm = conpeek(address,1);
                    addressBldgNb = conpeek(address,2);
                }
                else
                {
                    addressStrtNm = postalAddress.Street;
                }

                sks_eft_fileBankAccount.Addr = SKS_PP_StringFormats::strRemoveCRLF(addressStrtNm);
                sks_eft_fileBankAccount.Addr2 = SKS_PP_StringFormats::strRemoveCRLF(addressBldgNb);
                sks_eft_fileBankAccount.City = postalAddress.City;
                sks_eft_fileBankAccount.CountryRegionId = postalAddress.CountryRegionId;
                sks_eft_fileBankAccount.State = postalAddress.State;
                sks_eft_fileBankAccount.ZipPostal = postalAddress.ZipCode;
                sks_eft_fileBankAccount.Street = SKS_PP_StringFormats::strRemoveCRLF(postalAddress.Street);
                sks_eft_fileBankAccount.RefRecId = _sks_eft_FileDetail.recid;
            }
            if((_sks_eft_FileDetail.RecordSummary == SKS_EFT_RecordSummary::Invoice && _sks_eft_FileDetail.DepRecord == SKS_EFT_VendorRecordSummary::Invoice) || _sks_eft_FileDetail.RecordSummary == SKS_EFT_RecordSummary::Payment)
            {
                buildFD_TAXWH_Data();
            }

        }
        sks_eft_fileMandate.DirectDebitId = bankAccountTable.DebitDirectId;
        if(sks_eftar_Bank)
        {
            sks_eft_fileBankAccount.ARACHInclCR = sks_eftar_Bank.ARACHInclCR;
            sks_eft_fileBankAccount.ACHFileIDModifier = sks_eftar_Bank.ACHFileIDModifier;
            sks_eft_fileBankAccount.ACHOrigDFI = sks_eftar_Bank.ACHOrigDFI;
            sks_eft_fileBankAccount.ACHOrigDFIName = sks_eftar_Bank.ACHOrigDFIName;
            if(_ledgerJournalTrans.RecId)
            {
                changecompany(_ledgerJournalTrans.Company) //SKS_DevOps_21054
                {
                    //file detail mandate
                    custDirectDebitMandate = CustDirectDebitMandate::findByCompany(_ledgerJournalTrans.Company, CustDirectDebitMandate::getDefaultMandate(_sks_eft_FileDetail.AccountNum));

                    if(!custDirectDebitMandate)//DevOps21009
                    {
                        CustTable custTable = CustTable::find(_sks_eft_FileDetail.AccountNum);

                        select firstonly custDirectDebitMandate
                               order by custDirectDebitMandate.SignatureDate desc
                               where
                               custDirectDebitMandate.CustAccount    == custTable.accountnum &&
                               custDirectDebitMandate.BankAccount    == _ledgerJournalTrans.CustVendBankAccountId &&
                               custDirectDebitMandate.ExpirationDate >= today() &&
                               !custDirectDebitMandate.CancellationDate;
                    }
                }
            }
            else  //SKS_VSTS_12937--->
            {
                custDirectDebitMandate = CustDirectDebitMandate::findByCompany(sks_eft_customerpaym.CustCompany, CustDirectDebitMandate::getDefaultMandate(_sks_eft_FileDetail.AccountNum));
            }
            //SKS_VSTS_12937<---

            
            sks_eft_fileMandate.MandatePaymentType = custDirectDebitMandate.MandatePaymentType;
            sks_eft_fileMandate.MandateReference = custDirectDebitMandate.MandateReference;
            sks_eft_fileMandate.MandateScheme = custDirectDebitMandate.MandateScheme;
            sks_eft_fileMandate.SignatureDate= custDirectDebitMandate.SignatureDate;
            sks_eft_fileMandate.SKS_EB_MandateType = custDirectDebitMandate.SKS_EB_MandateType;

            //SKS#DevOps:16181--->
            if(custDirectDebitMandate)
            {
                if(custDirectDebitMandate.UsageCount == 0)
                {
                    sks_eft_fileMandate.MandateSequenceType = 'FRST';
                }
                else if(custDirectDebitMandate.UsageCount == custDirectDebitMandate.ExpectedUsageCount -1)
                {
                    sks_eft_fileMandate.MandateSequenceType = 'FNAL';
                }
                else if(custDirectDebitMandate.MandatePaymentType == CustMandatePaymentType::OneTime)
                {
                    sks_eft_fileMandate.MandateSequenceType = 'OOFF';
                }
                else
                {
                    sks_eft_fileMandate.MandateSequenceType = 'RCUR';
                }
            }
            //SKS#DevOps:16181<---

            if(_sks_eft_FileDetail.AccountNum && _sks_eft_FileDetail.AccountType == LedgerJournalACType::Cust)
            {
                SKS_EFT_FileFormat sks_eft_fileformat;
                sks_eft_fileformat = SKS_EFT_FileFormat::findByCompany(_sks_eft_FileDetail.PaymentCompany, _sks_eft_FileDetail.FormatId);
                if(sks_eft_fileformat.FormatGroupCodeSource == SKS_EB_CodeSource::BankFabric && sks_eft_fileformatpaymspec.DDAddressType == SKS_EFT_DDAddressType::PrimaryAddress)
                {
                    LogisticsLocation locLogisticsLocationPrimary;
                    DirPartyLocation locDirPartyLocation;
                    DirPartyRecId custParty;

                    custParty = CustTable::findByCompany(_sks_eft_FileDetail.AccountCompany, _sks_eft_FileDetail.AccountNum).Party;

                    Select firstonly Party, IsPostalAddress, IsPrimary from locDirPartyLocation
                        where locDirPartyLocation.Party == custParty
                            && locDirPartyLocation.IsPostalAddress == NoYes::Yes
                            && locDirPartyLocation.IsPrimary == NoYes::Yes
                        join RecId, LocationId, Description from locLogisticsLocationPrimary
                            where locLogisticsLocationPrimary.RecId == locDirPartyLocation.Location;

                    select firstonly * from postalAddress
                        where postalAddress.Location == locLogisticsLocationPrimary.Recid;
                }
                else
                {
                    postalAddress = SKS_EFT_Processing::findPostalAddressLineByPartyLocationRole(CustTable::findByCompany(_sks_eft_FileDetail.AccountCompany, _sks_eft_FileDetail.AccountNum).Party, 'Direct Debit');
                    if(!postalAddress)
                    {
                        postalAddress = SKS_EFT_Processing::findPostalAddressLineByPartyLocationRole(CustTable::findByCompany(_sks_eft_FileDetail.AccountCompany, _sks_eft_FileDetail.AccountNum).Party, 'AREFT');
                    }
                }

                if(postalAddress)
                {
                    if(strScan(postalAddress.Street, ';', 1, strLen(postalAddress.Street)))
                    {
                        address = SKS_EFT_Processing::addressSplit(postalAddress.Street);
                        addressStrtNm = conpeek(address,1);
                        addressBldgNb = conpeek(address,2);
                    }
                    else
                    {
                        addressStrtNm = postalAddress.Street;
                    }

                    sks_eft_fileCustAddress.CustAddr = SKS_PP_StringFormats::strRemoveCRLF(addressStrtNm);
                    sks_eft_fileCustAddress.CustAddr2 = SKS_PP_StringFormats::strRemoveCRLF(addressBldgNb);
                    sks_eft_fileCustAddress.CustCity = postalAddress.City;
                    sks_eft_fileCustAddress.CustCountryRegionId = postalAddress.CountryRegionId;
                    sks_eft_fileCustAddress.CustState = postalAddress.State;
                    sks_eft_fileCustAddress.CustZipPostal = postalAddress.ZipCode;
                }
            }
            postalAddress= null;
            if(_ledgerJournalTrans.RecId)
            {
                changecompany(_ledgerJournalTrans.DataAreaId)//SKS_Bug_11967
                {
                    postalAddress = SKS_EFT_Processing::findPostalAddressLineByPartyLocationRole(CompanyInfo::current(), 'Direct Debit');
                    if(!postalAddress)
                    {
                        postalAddress = SKS_EFT_Processing::findPostalAddressLineByPartyLocationRole(CompanyInfo::current(), 'AREFT');
                    }
                }
            }
            else    //SKS_VSTS_12937--->
            {
                changecompany(sks_eft_customerpaym.DataAreaId)
                {
                    postalAddress = SKS_EFT_Processing::findPostalAddressLineByPartyLocationRole(CompanyInfo::current(), 'Direct Debit');
                    if(!postalAddress)
                    {
                        postalAddress = SKS_EFT_Processing::findPostalAddressLineByPartyLocationRole(CompanyInfo::current(), 'AREFT');
                    }
                }
            }
            //SKS_VSTS_12937<---

            if(postalAddress)
            {
                if(strScan(postalAddress.Street, ';', 1, strLen(postalAddress.Street)))
                {
                    address = SKS_EFT_Processing::addressSplit(postalAddress.Street);
                    addressStrtNm = conpeek(address,1);
                    addressBldgNb = conpeek(address,2);
                }
                else
                {
                    addressStrtNm = postalAddress.Street;
                }

                sks_eft_fileBankAccount.Addr = SKS_PP_StringFormats::strRemoveCRLF(addressStrtNm);
                sks_eft_fileBankAccount.Addr2 = SKS_PP_StringFormats::strRemoveCRLF(addressBldgNb);
                sks_eft_fileBankAccount.City = postalAddress.City;
                sks_eft_fileBankAccount.CountryRegionId = postalAddress.CountryRegionId;
                sks_eft_fileBankAccount.State = postalAddress.State;
                sks_eft_fileBankAccount.ZipPostal = postalAddress.ZipCode;
                sks_eft_fileBankAccount.Street = SKS_PP_StringFormats::strRemoveCRLF(postalAddress.Street);
            }

            if(lcustBankAccount.AccountID != _sks_eft_FileDetail.DepBankAccountId || lcustBankAccount.CustAccount != _sks_eft_FileDetail.AccountNum)
            {
                lcustBankAccount = custBankAccount::findByCompany(_sks_eft_FileDetail.AccountCompany, _sks_eft_FileDetail.AccountNum, _sks_eft_FileDetail.DepBankAccountId);
            }
            select firstonly State, ZipCode, Location,City, CountryRegionId from lLogisticsPostalAddress where lLogisticsPostalAddress.Location == lcustBankAccount.Location;

            //file detail customer bank address
            sks_eft_fileCustBankAddress.Phone = lcustBankAccount.Phone;
            sks_eft_fileCustBankAddress.PhoneLocal = lcustBankAccount.PhoneLocal;
            sks_eft_fileCustBankAddress.AccountId = lcustBankAccount.AccountID;
            sks_eft_fileCustBankAddress.Name = lcustBankAccount.Name;
            sks_eft_fileCustBankAddress.City = lLogisticsPostalAddress.City;
            sks_eft_fileCustBankAddress.CountryRegionId = lLogisticsPostalAddress.CountryRegionId;
            sks_eft_fileCustBankAddress.State = lLogisticsPostalAddress.State;
            sks_eft_fileCustBankAddress.ZipCode = lLogisticsPostalAddress.ZipCode;
            sks_eft_fileCustBankAddress.Location = lLogisticsPostalAddress.Location;
            if(strScan(lLogisticsPostalAddress.Street, ';', 1, strLen(lLogisticsPostalAddress.Street)))
            {
                address = SKS_EFT_Processing::addressSplit(lLogisticsPostalAddress.Street);
                addressStrtNm = conpeek(address,1);
                addressBldgNb = conpeek(address,2);
            }
            else
            {
                addressStrtNm = lLogisticsPostalAddress.Street;
            }
            sks_eft_fileCustBankAddress.Addr = SKS_PP_StringFormats::strRemoveCRLF(addressStrtNm);
            sks_eft_fileCustBankAddress.Addr2 = SKS_PP_StringFormats::strRemoveCRLF(addressBldgNb);
            sks_eft_fileCustBankAddress.RefRecId =  _sks_eft_FileDetail.RecId;
            sks_eft_fileCustBankAddress.AddressType = SKS_EFT_AddressType::CustBankAddress;//SKS_FDD_10590
            sks_eft_fileCustBankAddress.insert();


            sks_eft_fileCustAddress.RefRecId = _sks_eft_FileDetail.RecId;
            sks_eft_fileCustAddress.insert();

            //SKS_FDD_10590 -->
            // populate FD_Extra fileds and values

            SKS_EFT_FileDetail_Extra        sks_EFT_FileDetail_ExtraLoc;
            SKS_EFT_FileFormatPaymSpecFields lSKS_EFT_FileFormatPaymSpecFields;

            SKS_EFT_FileFormat lSKS_EFT_FileFormat = SKS_EFT_FileFormat::findByCompany(_sks_eft_FileDetail.PaymentCompany, _sks_eft_FileDetail.FormatId);//DevOps20187

            while select crosscompany:companies FormatFieldId, CodeId from lSKS_EFT_FileFormatFields
                where lSKS_EFT_FileFormatFields.FileFormatRecId == lSKS_EFT_FileFormat.RecId
            {
                sks_EFT_FileDetail_ExtraLoc.FieldName = lSKS_EFT_FileFormatFields.FormatFieldId;

                str codeLookupValue;
                changecompany (sks_eftar_Bank.DataAreaId)
                {
                    codeLookupValue = SKS_EFT_Processing::getDDBankAccountValueFromCode(lSKS_EFT_FileFormatFields.FormatFieldId, lSKS_EFT_FileFormat, sks_eftar_Bank.RecId);
                }
                sks_EFT_FileDetail_ExtraLoc.Value = codeLookupValue;
                sks_EFT_FileDetail_ExtraLoc.RefRecId  = _sks_eft_FileDetail.RecId;
                sks_EFT_FileDetail_ExtraLoc.CodeLookupType = SKS_EFT_CodeLookupType::CodeLookupBank;
                sks_EFT_FileDetail_ExtraLoc.insert();
            }

            while select crosscompany:companies FormatFieldId, CodeId from lSKS_EFT_FileFormatPaymSpecFields
                where lSKS_EFT_FileFormatPaymSpecFields.FileFormatPaymSpecRecId == SKS_EFT_FileFormatPaymSpec.RecId
            {
                sks_EFT_FileDetail_ExtraLoc = null;
                sks_EFT_FileDetail_ExtraLoc.FieldName = lSKS_EFT_FileFormatPaymSpecFields.FormatFieldId;

                str codeLookupValue;
                changecompany (sks_eft_customerpaym.DataAreaId)
                {
                    codeLookupValue = sks_eft_format::getDDValueFromCode(lSKS_EFT_FileFormatPaymSpecFields.FormatFieldId, SKS_EFT_FileFormatPaymSpec, sks_eft_customerpaym.RecId);
                }
                sks_EFT_FileDetail_ExtraLoc.Value = codeLookupValue;
                sks_EFT_FileDetail_ExtraLoc.RefRecId  = _sks_eft_FileDetail.RecId;
                sks_EFT_FileDetail_ExtraLoc.insert();
            }

            //beneARExtraFields(_sks_eft_FileDetail, sks_eftar_Bank, sks_eft_customerpaym, sks_eft_FileFormatPaymSpec);
            //SKS_FDD_10590 -->

        }

        sks_eft_fileMandate.RefRecId = _sks_eft_FileDetail.RecId;
        sks_eft_fileMandate.insert();

        sks_eft_fileBankAccount.RefRecId = _sks_eft_FileDetail.recid;
        sks_eft_fileBankAccount.insert();

        //file detail payment line
        if(_ledgerJournalTrans.BankCentralBankPurposeCode || _ledgerJournalTrans.Txt)
        {
            sks_eft_filePaymentLine.BankCentralBankPurposeCode = _ledgerJournalTrans.BankCentralBankPurposeCode;
            sks_eft_filePaymentLine.BankCentralBankPurposeText = _ledgerJournalTrans.BankCentralBankPurposeText;
            sks_eft_filePaymentLine.BankCentralBankPurposeName = BankCentralBankPurpose::find(_ledgerJournalTrans.BankCentralBankPurposeCode).Name;
            sks_eft_filePaymentLine.TransactionTxt = strReplace(_ledgerJournalTrans.Txt, '\r', ' ');
            sks_eft_filePaymentLine.RefRecId = _sks_eft_FileDetail.RecId;
            sks_eft_filePaymentLine.insert();
        }

        if(sks_eft_FileFormatPaymSpec.AddendaSpec == NoYes::Yes)
        {
            vendPaymModeTable = VendPaymModeTable::findByCompanySKS(_ledgerJournalTrans.Company, _sks_eft_FileDetail.PaymMode);// SKS_Bug_12453
            select firstonly * from sks_eft_addendaFormats
                where sks_eft_addendaFormats.AddendaCodeID == sks_eft_FileFormatPaymSpec.AddendaCodeID
                  &&  vendPaymModeTable.SKS_EFT_FormatId == sks_eft_FileFormatPaymSpec.FormatId
            join PaymMode from locSKS_EFT_FilePmtSelection                                      //SKS_VSTS_12875
                where locSKS_EFT_FilePmtSelection.PaymMode == vendPaymModeTable.PaymMode;

            //file detail addenda header
            if(sks_eft_addendaFormats.AddendaCodeID)
            {
                sks_eft_fileAddendaHeader.RefRecId = _sks_eft_FileDetail.RecId;
                sks_eft_fileAddendaHeader.AccountIDOvr = sks_eft_addendaFormats.AccountIDOvr;
                sks_eft_fileAddendaHeader.AddendaCodeID = sks_eft_addendaFormats.AddendaCodeID;
                sks_eft_fileAddendaHeader.AddendaType = sks_eft_addendaFormats.AddendaType;
                sks_eft_fileAddendaHeader.CompanyDescription = sks_eft_addendaFormats.CompanyDescription;
                sks_eft_fileAddendaHeader.CompanyDiscretionaryData = sks_eft_addendaFormats.CompanyDiscretionaryData;

                // Override CompanyDiscretionaryData from addenda value 
                if(sks_eft_addendaFormats.CompanyDiscretionaryData != '')
                {
                    SKS_EFT_FileDetail_Extra lSKS_EFT_FileDetail_Extra;
                    select firstonly forupdate lSKS_EFT_FileDetail_Extra  where 
                        lSKS_EFT_FileDetail_Extra.RefRecId == _sks_eft_FileDetail.RecId && 
                        lSKS_EFT_FileDetail_Extra.CodeLookupType == SKS_EFT_CodeLookupType::CodeLookupBank &&
                        lSKS_EFT_FileDetail_Extra.FieldName == 'CompanyDiscretionaryData';
                    if(lSKS_EFT_FileDetail_Extra)
                    {
                        lSKS_EFT_FileDetail_Extra.Value = sks_eft_addendaFormats.CompanyDiscretionaryData;
                        lSKS_EFT_FileDetail_Extra.update();
                    }
                }
                sks_eft_fileAddendaHeader.CompanyID = sks_eft_addendaFormats.CompanyID;
                sks_eft_fileAddendaHeader.CompanyName = sks_eft_addendaFormats.CompanyName;
                sks_eft_fileAddendaHeader.Description = sks_eft_addendaFormats.Description;
                sks_eft_fileAddendaHeader.IdentificationFixedValue = sks_eft_addendaFormats.IdentificationFixedValue;
                sks_eft_fileAddendaHeader.RecCompany = sks_eft_addendaFormats.RecCompany;
                sks_eft_fileAddendaHeader.RecCompanyFixedValue = sks_eft_addendaFormats.RecCompanyFixedValue;
                sks_eft_fileAddendaHeader.insert();

                //file detail addenda configuration
                while select * from sks_eft_AddendaFields where
                    sks_eft_AddendaFields.AddendaCodeID == sks_eft_addendaFormats.AddendaCodeID
                {
                    if(sks_eft_AddendaFields.ValueType != SKS_EFT_AddendaValueType::NotUsed)
                    {
                        sks_eft_fileAddendaDetailConfig.AddendaCodeID = sks_eft_AddendaFields.AddendaCodeID;
                        sks_eft_fileAddendaDetailConfig.DateFormat = sks_eft_AddendaFields.DateFormat;
                        sks_eft_fileAddendaDetailConfig.Description = sks_eft_AddendaFields.Description;
                        sks_eft_fileAddendaDetailConfig.FixedValue = sks_eft_AddendaFields.FixedValue;
                        sks_eft_fileAddendaDetailConfig.FieldNumber = sks_eft_AddendaFields.FieldNumber;
                        sks_eft_fileAddendaDetailConfig.MaxLength = sks_eft_AddendaFields.MaxLength;
                        sks_eft_fileAddendaDetailConfig.PadCharacter = sks_eft_AddendaFields.PadCharacter;
                        sks_eft_fileAddendaDetailConfig.PadField = sks_eft_AddendaFields.PadField;
                        sks_eft_fileAddendaDetailConfig.PadSide = sks_eft_AddendaFields.PadSide;
                        sks_eft_fileAddendaDetailConfig.ValueType = sks_eft_AddendaFields.ValueType;
                        sks_eft_fileAddendaDetailConfig.CustFieldRequired = sks_eft_AddendaFields.CustFieldRequired;
                        sks_eft_fileAddendaDetailConfig.CustomField = sks_eft_AddendaFields.CustomField;
                        sks_eft_fileAddendaDetailConfig.EDIVersion = sks_eft_vendorpaym.EDIVersion;
                        sks_eft_fileAddendaDetailConfig.EDI820Layout = sks_eft_vendorpaym.EDI820Layout;
                        sks_eft_fileAddendaDetailConfig.RefRecId = _sks_eft_FileDetail.RecId;
                        sks_eft_fileAddendaDetailConfig.insert();
                    }
                }
            }
        }
        else if(sks_eft_FileFormatPaymSpec.PaymSpec == 'CCD+' || sks_eft_FileFormatPaymSpec.PaymSpec == 'IATB')
        {
            sks_eft_fileAddendaDetailConfig.AddendaCodeID = '';
            sks_eft_fileAddendaDetailConfig.DateFormat = SKS_EFT_DateFormat::DateClear;
            sks_eft_fileAddendaDetailConfig.Description =sks_eft_FileFormatPaymSpec.PaymSpec;
            sks_eft_fileAddendaDetailConfig.FixedValue = '';
            sks_eft_fileAddendaDetailConfig.FieldNumber = 0;
            sks_eft_fileAddendaDetailConfig.MaxLength = 0;
            sks_eft_fileAddendaDetailConfig.PadCharacter = SKS_PP_FillCharacter::Zero;
            sks_eft_fileAddendaDetailConfig.PadField = NoYes::No;
            sks_eft_fileAddendaDetailConfig.PadSide = SKS_PP_FillSide::Right;
            sks_eft_fileAddendaDetailConfig.ValueType = SKS_EFT_AddendaValueType::Blank;
            sks_eft_fileAddendaDetailConfig.CustFieldRequired = NoYes::No;
            sks_eft_fileAddendaDetailConfig.CustomField = '';

            switch(sks_eft_vendorpaym.EDIVersion)
            {
                case SKS_EFT_EDIVersion::v003010:
                    SKS_EFT_Processing::EDI820_003010(_sks_eft_FileDetail);
                    break;

                default:
                    SKS_EFT_Processing::EDI820_003040(_sks_eft_FileDetail);
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>BuildAddendaCustom</Name>
				<Source><![CDATA[
    /// <summary>
    /// addenda custom file detail data insertion
    /// </summary>
    /// <param name = "_sks_eft_FileDetail"></param>
    /// <param name = "ledgerJournalTrans"></param>
    /// FDD-10590
    public static server void BuildAddendaCustom(SKS_EFT_FileDetail _sks_eft_FileDetail)
    {
        SKS_EFT_FileDetail_AddendaCustom        sks_eft_filAddendaCustom;
        SKS_EFT_AddendaData                     sks_eft_AddendaData;
        SelectableDataArea                      lCompany;
        LedgerJournalTrans                      locForeignLedgerJournalTrans, mLedgerJournalTrans;
        ;

        SKS_EFT_FileFormatPaymSpec sks_eft_FileFormatPaymSpec = SKS_EFT_FileFormatPaymSpec::findByCompany(_sks_eft_FileDetail.PaymentCompany ? _sks_eft_FileDetail.PaymentCompany : _sks_eft_FileDetail.DataAreaId,
                                                                               _sks_eft_FileDetail.FormatId, _sks_eft_FileDetail.PaymSpec);

        if(sks_eft_FileFormatPaymSpec.AddendaSpec == NoYes::Yes)
        {
            //file detail addenda custom
            if(_sks_eft_FileDetail.InvoiceCompany == '')
            {
                lCompany = curext();
            }
            else
            {
                lCompany = _sks_eft_FileDetail.InvoiceCompany;
            }

            mLedgerJournalTrans = null;
            changeCompany(lCompany)
            {
                select firstonly mLedgerJournalTrans where mLedgerJournalTrans.VendTransId == _sks_eft_FileDetail.VendTransRecId;
                //in the envent of intercompany transactions, the needed ledgerjournaltrans is in a foreign company
                //the following IF retrieves the needed ledgerjournaltrans.
                if(mLedgerJournalTrans.ForeignVoucher && mLedgerJournalTrans.ForeignCompany)
                {
                    changeCompany(mLedgerJournalTrans.ForeignCompany)
                    {
                        select firstOnly locForeignLedgerJournalTrans
                        where locForeignLedgerJournalTrans.Voucher == mLedgerJournalTrans.ForeignVoucher
                            && locForeignLedgerJournalTrans.Invoice == mLedgerJournalTrans.Invoice
                            && locForeignLedgerJournalTrans.AmountCurCredit == mLedgerJournalTrans.AmountCurCredit
                            && locForeignLedgerJournalTrans.AmountCurDebit == mLedgerJournalTrans.AmountCurDebit
                            && locForeignLedgerJournalTrans.TransDate == mLedgerJournalTrans.TransDate
                            && locForeignLedgerJournalTrans.LedgerDimension == mLedgerJournalTrans.LedgerDimension;
                    }
                    mLedgerJournalTrans = null;
                    mLedgerJournalTrans = locForeignLedgerJournalTrans;
                }

                //mSKS_EFT_AddendaData = null; //8675 -- because SKS_EFT_AddendaData could be from any company it needs nulled every time.
                if(mLedgerJournalTrans)
                {
                    sks_eft_AddendaData = SKS_EFT_AddendaData::find(mLedgerJournalTrans.RecId);
                }
            }
            if(sks_eft_AddendaData)
            {
                sks_eft_filAddendaCustom.CustomAmt1 = sks_eft_AddendaData.CustomAmt1;
                sks_eft_filAddendaCustom.CustomAmt2 = sks_eft_AddendaData.CustomAmt2;
                sks_eft_filAddendaCustom.CustomAmt3 = sks_eft_AddendaData.CustomAmt3;
                sks_eft_filAddendaCustom.CustomAmt4 = sks_eft_AddendaData.CustomAmt4;
                sks_eft_filAddendaCustom.CustomDate1 = sks_eft_AddendaData.CustomDate1;
                sks_eft_filAddendaCustom.CustomDate2 = sks_eft_AddendaData.CustomDate2;
                sks_eft_filAddendaCustom.CustomStr1 = sks_eft_AddendaData.CustomStr1;
                sks_eft_filAddendaCustom.CustomStr2 = sks_eft_AddendaData.CustomStr2;
                sks_eft_filAddendaCustom.CustomStr3 = sks_eft_AddendaData.CustomStr3;
                sks_eft_filAddendaCustom.CustomStr4 = sks_eft_AddendaData.CustomStr3;
                sks_eft_filAddendaCustom.RefRecId = _sks_eft_FileDetail.RecId;
                sks_eft_filAddendaCustom.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>EDI820_003010</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a string for CCD+ paym spec
    /// </summary>
    /// <param name = "_sks_eft_FileDetail"></param>
    /// <returns></returns>
    /// FDD-10590
    static void EDI820_003010(SKS_EFT_FileDetail _sks_eft_FileDetail)
    {
        sks_eft_filedetail_AddendaDetailConfig sks_eft_filedetail_AddendaDetailConfig;

        sks_eft_filedetail_AddendaDetailConfig.AddendaCodeID = '';
        sks_eft_filedetail_AddendaDetailConfig.RefRecId = _sks_eft_FileDetail.RecId;
        sks_eft_filedetail_AddendaDetailConfig.FieldNumber = 1;
        sks_eft_filedetail_AddendaDetailConfig.ValueType = SKS_EFT_AddendaValueType::Fixed;
        sks_eft_filedetail_AddendaDetailConfig.FixedValue = 'RMT';
        sks_eft_filedetail_AddendaDetailConfig.insert();

        sks_eft_filedetail_AddendaDetailConfig.clear();
        sks_eft_filedetail_AddendaDetailConfig.AddendaCodeID = '';
        sks_eft_filedetail_AddendaDetailConfig.RefRecId = _sks_eft_FileDetail.RecId;
        sks_eft_filedetail_AddendaDetailConfig.FieldNumber = 2;
        sks_eft_filedetail_AddendaDetailConfig.ValueType = SKS_EFT_AddendaValueType::InvoiceOrCredit;
        sks_eft_filedetail_AddendaDetailConfig.insert();

        sks_eft_filedetail_AddendaDetailConfig.clear();
        sks_eft_filedetail_AddendaDetailConfig.AddendaCodeID = '';
        sks_eft_filedetail_AddendaDetailConfig.RefRecId = _sks_eft_FileDetail.RecId;
        sks_eft_filedetail_AddendaDetailConfig.FieldNumber = 3;
        sks_eft_filedetail_AddendaDetailConfig.ValueType = SKS_EFT_AddendaValueType::InvoiceNum;
        sks_eft_filedetail_AddendaDetailConfig.insert();

        sks_eft_filedetail_AddendaDetailConfig.clear();
        sks_eft_filedetail_AddendaDetailConfig.AddendaCodeID = '';
        sks_eft_filedetail_AddendaDetailConfig.IncludeDecimal = true;
        sks_eft_filedetail_AddendaDetailConfig.RefRecId = _sks_eft_FileDetail.RecId;
        sks_eft_filedetail_AddendaDetailConfig.FieldNumber = 4;
        sks_eft_filedetail_AddendaDetailConfig.ValueType = SKS_EFT_AddendaValueType::InvoiceAmtPmtCur;
        sks_eft_filedetail_AddendaDetailConfig.insert();

        sks_eft_filedetail_AddendaDetailConfig.clear();
        sks_eft_filedetail_AddendaDetailConfig.AddendaCodeID = '';
        sks_eft_filedetail_AddendaDetailConfig.RefRecId = _sks_eft_FileDetail.RecId;
        sks_eft_filedetail_AddendaDetailConfig.FieldNumber = 5;
        sks_eft_filedetail_AddendaDetailConfig.ValueType = SKS_EFT_AddendaValueType::InvoiceOrigAmt;
        sks_eft_filedetail_AddendaDetailConfig.insert();

        sks_eft_filedetail_AddendaDetailConfig.clear();
        sks_eft_filedetail_AddendaDetailConfig.AddendaCodeID = '';
        sks_eft_filedetail_AddendaDetailConfig.RefRecId = _sks_eft_FileDetail.RecId;
        sks_eft_filedetail_AddendaDetailConfig.FieldNumber = 6;
        sks_eft_filedetail_AddendaDetailConfig.ValueType = SKS_EFT_AddendaValueType::Fixed;
        sks_eft_filedetail_AddendaDetailConfig.FixedValue = '0';
        sks_eft_filedetail_AddendaDetailConfig.insert();

        sks_eft_filedetail_AddendaDetailConfig.clear();
        sks_eft_filedetail_AddendaDetailConfig.AddendaCodeID = '';
        sks_eft_filedetail_AddendaDetailConfig.RefRecId = _sks_eft_FileDetail.RecId;
        sks_eft_filedetail_AddendaDetailConfig.FieldNumber = 7;
        sks_eft_filedetail_AddendaDetailConfig.ValueType = SKS_EFT_AddendaValueType::Fixed;
        sks_eft_filedetail_AddendaDetailConfig.FixedValue = '0';
        sks_eft_filedetail_AddendaDetailConfig.insert();

        sks_eft_filedetail_AddendaDetailConfig.clear();
        sks_eft_filedetail_AddendaDetailConfig.AddendaCodeID = '';
        sks_eft_filedetail_AddendaDetailConfig.RefRecId = _sks_eft_FileDetail.RecId;
        sks_eft_filedetail_AddendaDetailConfig.FieldNumber = 8;
        sks_eft_filedetail_AddendaDetailConfig.ValueType = SKS_EFT_AddendaValueType::Fixed;
        sks_eft_filedetail_AddendaDetailConfig.FixedValue = '0';
        sks_eft_filedetail_AddendaDetailConfig.insert();

        sks_eft_filedetail_AddendaDetailConfig.clear();
        sks_eft_filedetail_AddendaDetailConfig.AddendaCodeID = '';
        sks_eft_filedetail_AddendaDetailConfig.IncludeDecimal = true;
        sks_eft_filedetail_AddendaDetailConfig.RefRecId = _sks_eft_FileDetail.RecId;
        sks_eft_filedetail_AddendaDetailConfig.FieldNumber = 9;
        sks_eft_filedetail_AddendaDetailConfig.ValueType = SKS_EFT_AddendaValueType::InvoiceAmtPmtCur;
        sks_eft_filedetail_AddendaDetailConfig.insert();

        sks_eft_filedetail_AddendaDetailConfig.clear();
        sks_eft_filedetail_AddendaDetailConfig.AddendaCodeID = '';
        sks_eft_filedetail_AddendaDetailConfig.RefRecId = _sks_eft_FileDetail.RecId;
        sks_eft_filedetail_AddendaDetailConfig.FieldNumber = 10;
        sks_eft_filedetail_AddendaDetailConfig.ValueType = SKS_EFT_AddendaValueType::Fixed;
        sks_eft_filedetail_AddendaDetailConfig.FixedValue = '0';
        sks_eft_filedetail_AddendaDetailConfig.insert();

        sks_eft_filedetail_AddendaDetailConfig.clear();
        sks_eft_filedetail_AddendaDetailConfig.AddendaCodeID = '';
        sks_eft_filedetail_AddendaDetailConfig.RefRecId = _sks_eft_FileDetail.RecId;
        sks_eft_filedetail_AddendaDetailConfig.FieldNumber = 11;
        sks_eft_filedetail_AddendaDetailConfig.ValueType = SKS_EFT_AddendaValueType::InvoiceTxt;
        sks_eft_filedetail_AddendaDetailConfig.MaxLength = 80;
        sks_eft_filedetail_AddendaDetailConfig.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>EDI820_003040</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a string for CCD+ paym spec
    /// </summary>
    /// <param name = "_sks_eft_FileDetail"></param>
    /// <returns></returns>
    /// //FDD-10590
    static void EDI820_003040(SKS_EFT_FileDetail _sks_eft_FileDetail)
    {
        sks_eft_filedetail_AddendaDetailConfig sks_eft_filedetail_AddendaDetailConfig;

        sks_eft_filedetail_AddendaDetailConfig.AddendaCodeID = '';
        sks_eft_filedetail_AddendaDetailConfig.RefRecId = _sks_eft_FileDetail.RecId;
        sks_eft_filedetail_AddendaDetailConfig.FieldNumber = 1;
        sks_eft_filedetail_AddendaDetailConfig.ValueType = SKS_EFT_AddendaValueType::Fixed;
        sks_eft_filedetail_AddendaDetailConfig.FixedValue = 'RMR';
        sks_eft_filedetail_AddendaDetailConfig.insert();

        sks_eft_filedetail_AddendaDetailConfig.clear();
        sks_eft_filedetail_AddendaDetailConfig.AddendaCodeID = '';
        sks_eft_filedetail_AddendaDetailConfig.RefRecId = _sks_eft_FileDetail.RecId;
        sks_eft_filedetail_AddendaDetailConfig.FieldNumber = 2;
        sks_eft_filedetail_AddendaDetailConfig.ValueType = SKS_EFT_AddendaValueType::InvoiceOrCredit;
        sks_eft_filedetail_AddendaDetailConfig.insert();

        sks_eft_filedetail_AddendaDetailConfig.clear();
        sks_eft_filedetail_AddendaDetailConfig.AddendaCodeID = '';
        sks_eft_filedetail_AddendaDetailConfig.RefRecId = _sks_eft_FileDetail.RecId;
        sks_eft_filedetail_AddendaDetailConfig.FieldNumber = 3;
        sks_eft_filedetail_AddendaDetailConfig.ValueType = SKS_EFT_AddendaValueType::InvoiceNum;
        sks_eft_filedetail_AddendaDetailConfig.insert();

        sks_eft_filedetail_AddendaDetailConfig.clear();
        sks_eft_filedetail_AddendaDetailConfig.AddendaCodeID = '';
        sks_eft_filedetail_AddendaDetailConfig.RefRecId = _sks_eft_FileDetail.RecId;
        sks_eft_filedetail_AddendaDetailConfig.FieldNumber = 4;
        sks_eft_filedetail_AddendaDetailConfig.ValueType = SKS_EFT_AddendaValueType::Fixed;
        sks_eft_filedetail_AddendaDetailConfig.FixedValue = '';
        sks_eft_filedetail_AddendaDetailConfig.insert();

        sks_eft_filedetail_AddendaDetailConfig.clear();
        sks_eft_filedetail_AddendaDetailConfig.AddendaCodeID = '';
        sks_eft_filedetail_AddendaDetailConfig.IncludeDecimal = true;
        sks_eft_filedetail_AddendaDetailConfig.RefRecId = _sks_eft_FileDetail.RecId;
        sks_eft_filedetail_AddendaDetailConfig.FieldNumber = 5;
        sks_eft_filedetail_AddendaDetailConfig.ValueType = SKS_EFT_AddendaValueType::InvoiceAmtPmtCur;
        sks_eft_filedetail_AddendaDetailConfig.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPositiveAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a positive amount
    /// </summary>
    /// <param name = "_amount"></param>
    /// <returns></returns>
    /// FDD-10590
    static real getPositiveAmount(real _amount)
    {
        real amount;

        amount = _amount;

        if(amount < 0)
        {
            amount = amount * -1;
        }

        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>CharacterReplacement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a result
    /// </summary>
    /// <param name = "_result"></param>
    /// <returns></returns>
    /// FDD-10590
    static str CharacterReplacement(str _result)
    {
        SKS_EB_CharacterReplacement sks_eb_CharacterReplacement;
        if(_result != '' && sks_eb_CharacterReplacement)
        {
            return sks_eb_CharacterReplacement.ConvertCharacters(_result);
        }
        else
        {
            return _result;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPostalAddressLineByPartyLocationRole</Name>
				<Source><![CDATA[
    /// <summary>
    /// Direct debit address for customer
    /// </summary>
    /// <param name = "_party"></param>
    /// <param name = "_roleName"></param>
    /// <returns></returns>
    /// FDD-10590
    private static LogisticsPostalAddress findPostalAddressLineByPartyLocationRole(
        DirPartyRecId   _party,
        LogisticsLocationRoleName   _roleName)
    {
        DirPartyLocation partyLocation;
        LogisticsLocation logisticsLocation;
        LogisticsLocationRole locationRole;
        LogisticsLocationRoleTranslation locationRoleTransl;
        LogisticsPostalAddress postalAddress;
        UserInfo userInfo;
        SysDictTable dictTable = SysDictTable::newTableId(tablenum(DirPartyLocationRole));
        DirPartyLocationRole entityLocationRole = dictTable.makeRecord();

        select firstonly LocationRole from entityLocationRole
            join Name from locationRole
            join Location from partyLocation
            outer join Description from locationRoleTransl
            exists join userInfo
            order by locationRole.Name
            where partylocation.Party == _party
                && entityLocationRole.LocationRole == locationRole.RecId
                && entityLocationRole.PartyLocation == partyLocation.RecId
                && locationRole.Type != LogisticsLocationRoleType::OneTime
                && locationRoleTransl.LocationRole == locationRole.RecId
                && locationRoleTransl.LanguageId == userInfo.Language
                && userInfo.Id == curUserId()
                && (locationRole.Name == _roleName || locationRoleTransl.Description == _roleName);

        if(partyLocation.Location)
        {
            logisticsLocation = logisticsLocation::find(partyLocation.Location);
            if(logisticsLocation.IsPostalAddress)
            {
                postalAddress = LogisticsPostalAddress::findByLocation(logisticsLocation.RecId);
            }
        }

        return postalAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addressSplit</Name>
				<Source><![CDATA[
    private static container addressSplit(SKS_EB_Address  _address)
    {
        List            strList = new List(Types::String);
        container       address;
        ListIterator    iterator;

        strlist = strSplit(_address,';');
        iterator = new ListIterator(strlist);

        while(iterator.more())
        {
            address += iterator.value();
            iterator.next();
        }

        return address;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFileHistory</Name>
				<Source><![CDATA[
    static server void createFileHistory(SKS_EFT_ActionHistory  _Action,
                                         RecId                  _OutboundFileRecId,
                                         SKS_EFT_InboundFileNbr _InboundFileNbr = '',
                                         SKS_EB_AdditionalData  _AdditionalData = '',
                                         LedgerJournalId        _JournalNum = '',
                                         SKS_EFT_FileStatus     _OutboundStatus = SKS_EFT_FileStatus::NotApplicable,
                                         RefRecId               _OutboundFileDetailRecId = 0   
                                        )
    {
        SKS_EFT_FileHistory lSKS_EFT_FileHistory;

        ttsBegin;

        lSKS_EFT_FileHistory.Action = _Action;
        lSKS_EFT_FileHistory.OutboundFileRecId = _OutboundFileRecId;
        lSKS_EFT_FileHistory.OutboundStatus = _OutboundStatus;
        lSKS_EFT_FileHistory.InboundFileNbr = _InboundFileNbr;
        lSKS_EFT_FileHistory.AdditionalData = _AdditionalData;
        lSKS_EFT_FileHistory.JournalNum = _JournalNum;
        lSKS_EFT_FileHistory.OutboundFileDetailRecId = _OutboundFileDetailRecId;

        lSKS_EFT_FileHistory.insert();
        ttsCommit;

    }

]]></Source>
			</Method>
			<Method>
				<Name>dateWeekendHoliday</Name>
				<Source><![CDATA[
    private static boolean dateWeekendHoliday(Date _date, SKS_EB_BankHolidayGroupID _bankHolidayID = '')
    {
        SKS_EB_BankHolidays sks_eb_bankholidays;
        boolean ret = false;

        if(dayOfWk(_date) >= 6)
        {
            ret = true;
        }
        else if(_bankHolidayID != '')
        {
            select firstOnly HolidayDate, GroupID from sks_eb_bankholidays where
                sks_eb_bankholidays.GroupID == _bankHolidayID &&
                sks_eb_bankholidays.HolidayDate == _date;
            if(sks_eb_bankholidays)
            {
                ret = true;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetOffsetDate</Name>
				<Source><![CDATA[
    public static Date GetOffsetDate(SKS_EFT_EffectiveDateOffset _effDateOffset, Date _currentEffDate, SKS_EB_BankHolidayGroupID _bankHolidayID)
    {
        SKS_EFT_EffectiveDateOffset effDateOffset;
        int counter = 1;
        NoYes  subtract = NoYes::No;
        boolean isHolidayWeekend;

        effDateOffset = _effDateOffset;
        void weekendHolidayLoop()
        {
            isHolidayWeekend = false;
            do
            {
                isHolidayWeekend = SKS_EFT_Processing::dateWeekendHoliday(_currentEffDate, _bankHolidayID);
                if(isHolidayWeekend)
                {
                    if(subtract == NoYes::Yes)
                    {
                        _currentEffDate--;
                    }
                    else
                    {
                        _currentEffDate++;
                    }
                }
            }
            while(isHolidayWeekend);
        }

        if(effDateOffset < 0) //days subtracted from effective date
        {
            effDateOffset = effDateOffset * -1;
            subtract = NoYes::Yes;
        }

        while(counter <= effDateOffset)
        {
            if(subtract == NoYes::Yes)
            {
                _currentEffDate--;
            }
            else
            {
                _currentEffDate++;
            }

            weekendHolidayLoop();

            counter++;
        }

        // Always call outside of counter in case offset is 0
        weekendHolidayLoop();

        return _currentEffDate;

    }

]]></Source>
			</Method>
			<Method>
				<Name>GetPreNoteDate</Name>
				<Source><![CDATA[
    public static Date GetPreNoteDate(SKS_EFT_PreNoteDays _prenoteDays, SKS_EB_BankHolidayGroupID _bankHolidayID)
    {
        ;
        return SKS_EFT_Processing::GetOffsetDate(_prenoteDays, DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()), _bankHolidayID);
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetPreNoteStatus</Name>
				<Source><![CDATA[
    public static SKS_EB_PreNoteStatus GetPreNoteStatus(SKS_EB_PreNoteStatus _preNoteStatus, SKS_EFT_PNDate _preNoteDate, SKS_EFT_PNDate _effectiveDate)
    {
        ;
        switch(_preNoteStatus)
        {
            case SKS_EB_PreNoteStatus::NotApplicable:
                return SKS_EB_PreNoteStatus::NotApplicable;
            case SKS_EB_PreNoteStatus::New:
                return SKS_EB_PreNoteStatus::New;
            case SKS_EB_PreNoteStatus::Approved:
                return SKS_EB_PreNoteStatus::Approved;
            default:
                if(_preNoteDate <= _effectiveDate && _preNoteDate != Global::dateNull())
                {
                    return SKS_EB_PreNoteStatus::Approved;
                }
                else
                {
                    return SKS_EB_PreNoteStatus::Pending;
                }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSKS_EB_CommProcess</Name>
				<Source><![CDATA[
    private static SKS_EB_CommProcess getSKS_EB_CommProcess(SKS_EB_CommProcess _SKS_EB_CommProcess, SKS_EB_CommID _CommID)
    {
        SKS_EB_CommProcess rtnval;
        if(_SKS_EB_CommProcess)
        {
            rtnval = _SKS_EB_CommProcess;
        }
        else
        {
            select crossCompany * from rtnval where rtnval.CommID == _CommID;
        }

        return rtnval;
    }

]]></Source>
			</Method>
			<Method>
				<Name>PostFromAutoCreate</Name>
				<Source><![CDATA[
    public static server boolean PostFromAutoCreate(LedgerJournalTrans _LedgerJournalTrans)
    {
        SKS_EFTAP_File lSKS_EFTAP_File;
        SKS_EFT_FileDetail lSKS_EFT_FileDetail;
        SKS_EB_CommProcess  lSKS_EB_CommProcess;
        boolean ret = true; //assumes posting succeeded or nothing to post until posting fails

        select firstonly lSKS_EFT_FileDetail where lSKS_EFT_FileDetail.PaymentLineRecId == _LedgerJournalTrans.RecId &&
                        lSKS_EFT_FileDetail.PaymentRejected == NoYes::No &&
                        lSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                        lSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary;

        if(lSKS_EFT_FileDetail)
        {
            select * from lSKS_EFTAP_File where lSKS_EFTAP_File.RecId == lSKS_EFT_FileDetail.FileRecId &&
                                                         (lSKS_EFTAP_File.FileStatus == SKS_EFT_FileStatus::CompletedEmailPending ||
                                                          lSKS_EFTAP_File.FileStatus == SKS_EFT_FileStatus::Completed ||
                                                          lSKS_EFTAP_File.FileStatus == SKS_EFT_FileStatus::CompletedNoEmail);
            if(lSKS_EFTAP_File)
            {
                select CommID, AutoPost from lSKS_EB_CommProcess where lSKS_EB_CommProcess.CommID == lSKS_EFTAP_File.CommId;

                //In auto create and send situations, we do not want to autopost here due to reselecting the ledger journal.
                //If we did go in this code block, we would get an update conflict later in the process.
                if(lSKS_EB_CommProcess.AutoPost)
                {
                    ret = SKS_EFT_Processing::AutoPostPaymentJournal(lSKS_EFT_FileDetail.PaymentJournalNum, lSKS_EFTAP_File, false, lSKS_EFT_FileDetail.PaymentCompany);
                }
                else
                {
                    ret = true;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RregenerateOutboundKeys</Name>
				<Source><![CDATA[
    public static void RregenerateOutboundKeys()
    {
        SKS_EFTAP_File locSKS_EFTAP_File;
        SKS_EFT_InboundFile locSKS_EFT_InboundFile;
        SKS_EFT_FileFormat locSKS_EFT_FileFormat;
        SKS_EFT_InboundFileGroups locSKS_EFT_InboundFileGroups;
        ;


        while select forupdate * from locSKS_EFTAP_File
            join InboundFileGroupId from locSKS_EFT_FileFormat
            where locSKS_EFT_FileFormat.FormatId == locSKS_EFTAP_File.FormatId
            join locSKS_EFT_InboundFileGroups
            where locSKS_EFT_InboundFileGroups.InboundFileGroupId == locSKS_EFT_FileFormat.InboundFileGroupId
            notexists join locSKS_EFT_InboundFile
            where locSKS_EFTAP_File.Recid == locSKS_EFT_InboundFile.OutboundFileRecId
        {
            ttsBegin;
            SKS_EFT_Processing::setOutboundFileKeys(locSKS_EFT_InboundFileGroups, locSKS_EFTAP_File);
            locSKS_EFTAP_File.update();
            SKS_EFT_Processing::setOutboundTranskeys(locSKS_EFT_InboundFileGroups, locSKS_EFTAP_File);
            ttsCommit;
        }




    }

]]></Source>
			</Method>
			<Method>
				<Name>setOutboundFileKeys</Name>
				<Source><![CDATA[
    public static void setOutboundFileKeys(SKS_EFT_InboundFileGroups _SKS_EFT_InboundFileGroups, SKS_EFTAP_File _SKS_EFTAP_File)
    {
        str locFormatFieldPrefix;
        str locTempFormatID;
        int locNumberOfFormats;
        str locKeyNumber;
        str locFileName;
        int loci;
        ExecutePermission perm;
        DictClass locDictClass;

        locFormatFieldPrefix = 'INBOUNDFORMATID';
        locNumberOfFormats = SKS_EFT_Common::getNumberOfFormats();
        locFileName = _SKS_EFTAP_File.FileName;
        if(locNumberOfFormats > 0)
        {

            for(loci = 1; loci <= locNumberOfFormats; loci++)
            {
                locTempFormatID = _SKS_EFT_InboundFileGroups.getFieldValue(locFormatFieldPrefix + int2str(loci));
                if(strLen(locTempFormatID) > 0)
                {
                    locTempFormatID = strReplace('SKS_EFT_RF_Format_' + locTempFormatID, '-', '_');
                    perm = new ExecutePermission();
                    perm.assert();
                    locDictClass = new DictClass(className2Id(locTempFormatID));
                    locKeyNumber = locDictClass.callStatic('outboundFileKeyGen', locFileName, _SKS_EFTAP_File);
                    _SKS_EFTAP_File.setFieldValue('INOUTKEYFORMAT' + int2str(loci), locKeyNumber);
                    locDictClass = null;
                    CodeAccessPermission::revertAssert();
                }
            }

        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>setOutboundTranskeys</Name>
				<Source><![CDATA[
    public static void setOutboundTranskeys(SKS_EFT_InboundFileGroups _SKS_EFT_InboundFileGroups, SKS_EFTAP_File _SKS_EFTAP_File)
    {
        int locMaxNumberOFFormats;
        int loci;
        str locFormatFieldPrefix;
        str locFilename;
        SKS_EFT_InOutKey locInOutKey;
        SKS_EFT_InboundFormatId locSKS_EFT_InboundFormatId;
        SKS_EFT_FileDetail locSKS_EFT_FileDetail;

        ExecutePermission perm;
        DictClass locDictClass;

        locMaxNumberOFFormats = SKS_EFT_Common::getNumberOfFormats();
        locFilename = _SKS_EFTAP_File.FileName;
        locFormatFieldPrefix = 'INBOUNDFORMATID';
        if(locMaxNumberOFFormats > 0)
        {
            while select forupdate locSKS_EFT_FileDetail
                    where locSKS_EFT_FileDetail.FileRecId == _SKS_EFTAP_File.RecId
                        && locSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary
                        && locSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments
            {
                for(loci = 1; loci <= locMaxNumberOFFormats; loci++)
                {
                    locSKS_EFT_InboundFormatId = _SKS_EFT_InboundFileGroups.getFieldValue(locFormatFieldPrefix + int2str(loci));
                    if(strLen(locSKS_EFT_InboundFormatId) > 0)
                    {
                        locSKS_EFT_InboundFormatId = strReplace('SKS_EFT_RF_Format_' + locSKS_EFT_InboundFormatId, '-', '_');
                        perm = new ExecutePermission();
                        perm.assert();
                        locDictClass = new DictClass(className2Id(locSKS_EFT_InboundFormatId));
                        locInOutKey = locDictClass.callStatic('outboundTransKeyGen', locFileName, locSKS_EFT_FileDetail, _SKS_EFTAP_File);
                        locSKS_EFT_FileDetail.setFieldValue('INOUTKEYFORMAT' + int2str(loci), locInOutKey);
                        locDictClass = null;
                        CodeAccessPermission::revertAssert();
                    }
                }
                locSKS_EFT_FileDetail.update();
            }

        }



    }

]]></Source>
			</Method>
			<Method>
				<Name>Update_SKS_EFT_VendorPaym_MALStatus</Name>
				<Source><![CDATA[
    public static void Update_SKS_EFT_VendorPaym_MALStatus(SKS_EFT_MALStatus _OrigMALStatus, SKS_EFT_MALStatus _NewMalStatus, PaymMode _PaymMode)
    {
        SKS_EFT_VendorPaym locSKS_EFT_VendorPaym;
        SKS_EFT_FileFormat locSKS_EFT_FileFormat;


        update_recordset locSKS_EFT_VendorPaym
            setting MALStatus = _NewMalStatus
            join locSKS_EFT_FileFormat
            where locSKS_EFT_VendorPaym.FormatID == locSKS_EFT_FileFormat.FormatID
                && locSKS_EFT_VendorPaym.PaymMode == _PaymMode
                && locSKS_EFT_VendorPaym.MALStatus == _OrigMALStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSKS_EFTAP_File</Name>
				<Source><![CDATA[
    /// <summary>
    /// To update the e-mail sent or fail status from executing of batch.
    /// </summary>
    // 9205 CR
    [DataMemberAttribute]
    public SKS_EFTAP_File parmSKS_EFTAP_File(SKS_EFTAP_File _sKS_EFTAP_File = msks_eftap_file)
    {
        msks_eftap_file = _sKS_EFTAP_File;
        return msks_eftap_file;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLogisticsAddressCountryISO</Name>
				<Source><![CDATA[
    // SKS_FDD_10590 -->
    // <summary>
    /// To return ISO country code for the _countryRegion.
    /// </summary>
    public static LogisticsAddressCountryRegionISOCode getLogisticsAddressCountryISO(LogisticsAddressCountryRegionId _countryRegion)
    {
        LogisticsAddressCountryRegion logisticsAddressCountry;
        //------------------------------------------------------------------------------------------------------
        // Load or refresh global mLogisticsAddressCountryRegion
        // Return a 2 digit ISO country code
        //------------------------------------------------------------------------------------------------------
        str value;

        if(_countryRegion != '' && strLen(_countryRegion) > 2)
        {
            if(logisticsAddressCountry.CountryRegionId != _countryRegion)
            {
                logisticsAddressCountry = LogisticsAddressCountryRegion::find(_countryRegion);
            }
            value = logisticsAddressCountry.ISOcode;
        }
        else
        {
            value = _countryRegion;
        }
        return value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSKS_EFT_FileFormat</Name>
				<Source><![CDATA[
    // SKS_FDD_10590 <--

    public SKS_EFT_FileFormat parmSKS_EFT_FileFormat(SKS_EFT_FileFormat _mSKS_EFT_FileFormat = msks_eft_FileFormat)
    {
        msks_eft_FileFormat = _mSKS_EFT_FileFormat;
        return mSKS_EFT_FileFormat;
    }

]]></Source>
			</Method>
			<Method>
				<Name>build_SKS_EFT_FD_TaxWHTrans</Name>
				<Source><![CDATA[
    [SuppressBPWarningAttribute("BPCheckInsertMethodInLoop","The SKS_EFT_FileDetail_TaxWHTrans must be inserted in the while loop")]
    public static void build_SKS_EFT_FD_TaxWHTrans(Voucher _invoiceVoucherNumber, LedgerJournalId _paymentJournalNum, Voucher _paymentVoucher, SKS_EFT_FileDetail _sks_eft_FileDetailTax)
    {
        TaxWithholdTrans                taxWithholdTrans;
        SKS_EFT_FileDetail_TaxWHTrans   sks_EFT_FD_TaxWHTrans;
        TaxWithholdData                 taxWithholdData;
        TaxWithholdItemGroupHeading_TH  taxWithholdItemGroupHeading_TH;
        TaxWithholdTransExtensionTH     taxWithholdTransExtensionTH;
        TaxWithholdRevenueTable_TH      taxWithholdRevenueTable_TH;

        while select crosscompany taxWithholdTrans
                where TaxWithholdTrans.VoucherInvoice     == _invoiceVoucherNumber
                && TaxWithholdTrans.JournalNum            == _paymentJournalNum
                && TaxWithholdTrans.Voucher               == _paymentVoucher
        {
            sks_EFT_FD_TaxWHTrans.TaxWithholdAmount = taxWithholdTrans.TaxWithholdAmount;
            sks_EFT_FD_TaxWHTrans.InvoiceCurrency   = taxWithholdTrans.InvoiceCurrency;
            changecompany(taxWithholdTrans.DataAreaId)
            {
                if(taxWithholdTrans.TaxWithholdCode)
                {
                    select firstonly TaxWithholdValue from taxWithholdData where taxWithholdData.TaxWithholdCode == taxWithholdTrans.TaxWithholdCode;
                }
                taxWithholdItemGroupHeading_TH  = TaxWithholdItemGroupHeading_TH::find(taxWithholdTrans.TaxWithholdItemGroupHeading_TH);
                taxWithholdRevenueTable_TH = TaxWithholdRevenueTable_TH::find(taxWithholdItemGroupHeading_TH.TaxWithholdRevenueTable_TH);

                select firstonly InvoiceCurUpdatedWithholdBaseAmount from taxWithholdTransExtensionTH
                    where taxWithholdTransExtensionTH.TaxWithholdTrans == taxWithholdTrans.RecId;
            }
            sks_EFT_FD_TaxWHTrans.TaxWithholdValue = taxWithholdData.TaxWithholdValue;
            sks_EFT_FD_TaxWHTrans.TWHItemGrpHeading_TH_Name = taxWithholdItemGroupHeading_TH.Name;
            sks_EFT_FD_TaxWHTrans.TaxWithholdRevenueCode =  taxWithholdRevenueTable_TH.TaxWithholdRevenueCode;
            if(taxWithholdTransExtensionTH.InvoiceCurUpdatedWithholdBaseAmount)
            {
                sks_EFT_FD_TaxWHTrans.InvoiceCurUpdatedWithholdBaseAmount = taxWithholdTransExtensionTH.InvoiceCurUpdatedWithholdBaseAmount;
            }
            sks_EFT_FD_TaxWHTrans.RefRecId = _sks_eft_FileDetailTax.RecId;
            sks_EFT_FD_TaxWHTrans.TaxWHTransRecId = taxWithholdTrans.RecId;
            sks_EFT_FD_TaxWHTrans.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIgnoreFile</Name>
				<Source><![CDATA[
    // SKS_Bug_11845 -->
    // If the CheckUserselection(Ap or AR) finds any error it will set as true.
    public boolean parmIgnoreFile(boolean _ignoreUserErrorFile = ignoreUserErrorFile)
    {
        ignoreUserErrorFile = _ignoreUserErrorFile;
        return ignoreUserErrorFile;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileDetailValidate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates payment and invoices for file
    /// </summary>
    /// Bug-11967
    public void fileDetailValidate(LedgerJournalTrans _ledgerJournalTrans, SKS_EFT_Module _module)
    {
        LedgerJournalTrans  ledgerJournalTrans = null;
        SpecTrans           specTrans = null;
        msks_eftap_file = null;

        guid tempGuid = newGuid();
        msks_eftap_fileTmp.FileNbr          = guid2Str(tempGuid); // Assign a value to FileNbr to prevent duplicate key issue table
        msks_eftap_fileTmp.EFTFileType      = _module;

        if(_module == SKS_EFT_Module::AR || _module == SKS_EFT_Module::ARValidation)
        {
            this.GetEFTFIleFormat(_ledgerJournalTrans.PaymMode, SKS_EFT_Module::AR);//SKS_VSTS_14355
        }
        else if(_module == SKS_EFT_Module::BTB || _module == SKS_EFT_Module::BTBValidation)
        {
            this.GetEFTFIleFormat(_ledgerJournalTrans.PaymMode, SKS_EFT_Module::BTB);//SKS_VSTS_14355
        }
        else if(_module == SKS_EFT_Module::CNP || _module == SKS_EFT_Module::CNPValidation)
        {
            this.GetEFTFIleFormat(_ledgerJournalTrans.PaymMode, SKS_EFT_Module::CNP);//SKS_VSTS_14355
        }

        if((msks_eft_FileFormat.PayDateIsEffDate == true && (_module == SKS_EFT_Module::AR || _module == SKS_EFT_Module::ARValidation)) ||
            (msks_eft_FileFormat.BTBPayDateIsEffDate == true && (_module == SKS_EFT_Module::BTB || _module == SKS_EFT_Module::BTBValidation)))
        {
            msks_eftap_fileTmp.EffectiveDate = _ledgerJournalTrans.TransDate;
        }
        else
        {
            msks_eftap_fileTmp.EffectiveDate    = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());
        }
        msks_eftap_fileTmp.insert();
        msks_eftap_file.data(msks_eftap_fileTmp);

        if(_module == SKS_EFT_Module::AP || _module == SKS_EFT_Module::APValidation ||
           _module == SKS_EFT_Module::AR || _module == SKS_EFT_Module::ARValidation ||
           _module == SKS_EFT_Module::CNP || _module == SKS_EFT_Module::CNPValidation)
        {
            while select ledgerJournalTrans
                where ledgerJournalTrans.RecId == _ledgerJournalTrans.RecId
            outer join specTrans
                where specTrans.SpecRecId == ledgerJournalTrans.RecId
                && specTrans.SpecTableId == ledgerJournalTrans.TableId
                && specTrans.SpecCompany == ledgerJournalTrans.DataAreaId
            {
                if(_module == SKS_EFT_Module::AP || _module == SKS_EFT_Module::APValidation)
                {
                    this.CreateVchFileDetail(null, _LedgerJournalTrans, specTrans, true, msks_eftap_file);
                }
                else if(_module == SKS_EFT_Module::CNP || _module == SKS_EFT_Module::CNPValidation)
                {
                    this.CreateCNPInvcFileDetail(null, _LedgerJournalTrans, specTrans, true, msks_eftap_file);
                }
                else
                {
                    this.CreateInvcFileDetail(null, _LedgerJournalTrans, specTrans, true, msks_eftap_file);
                }
            }
        }
        else if(_module == SKS_EFT_Module::BTB || _module == SKS_EFT_Module::BTBValidation)
        {
            while select ledgerJournalTrans
                where ledgerJournalTrans.RecId == _ledgerJournalTrans.RecId
            {
                this.CreateVchBTBFileDetail(null, _LedgerJournalTrans, true, msks_eftap_file);
            }
        }

        this.SumWorkingTable(_module); //SKS_VSTS_13066
    }

]]></Source>
			</Method>
			<Method>
				<Name>deletePaymDataFromFileDetail</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to delete the AP AR Payments data from  file detail tables
    /// <param name="_ledgerJournalTrans">
    /// The Payment data record.
    /// </param>
    /// </summary>
    /// Bug-11967
    public void deletePaymDataFromFileDetail(LedgerJournalTrans _ledgerJournalTrans)
    {
        SKS_EFT_FileDetail                  invsks_EFT_FileDetail;
        SKS_EFT_FileDetail                  pmtsks_EFT_FileDetail;
        SKS_EFTAP_File                      sks_eftap_file;
        ttsbegin;

        //Delete all of the non-summary lines
        //Skip delete and data methods because these records won't have child records.
        invsks_EFT_FileDetail.skipDataMethods(true);
        invsks_EFT_FileDetail.skipDatabaseLog(true);
        invsks_EFT_FileDetail.skipDeleteActions(true);
        invsks_EFT_FileDetail.skipDeleteMethod(true);
        invsks_EFT_FileDetail.skipEvents(true);

        delete_from invsks_EFT_FileDetail
            where invsks_EFT_FileDetail.PaymentLineRecId == _ledgerJournalTrans.RecId &&
            invsks_EFT_FileDetail.RecordType == SKS_EFT_RecordType::FieldValidations &&
            invsks_EFT_FileDetail.RecordSummary == SKS_EFT_RecordSummary::NonSummary;

        //Delete payment lines
        //This will invoke cascade deletes on other file detail tables
        this.deleteRelatedData(msks_eftap_file.RecId, _ledgerJournalTrans); //SKS_FDD_21456

        //Delete file record
        //Skip delete and data methods because the detail has been deleted above
        sks_eftap_file.skipDataMethods(true);
        sks_eftap_file.skipDatabaseLog(true);
        sks_eftap_file.skipDeleteActions(true);
        sks_eftap_file.skipDeleteMethod(true);
        sks_eftap_file.skipEvents(true);

        delete_from sks_eftap_file where sks_eftap_file.RecId == msks_eftap_file.RecId &&
            (sks_eftap_file.EFTFileType == SKS_EFT_Module::APValidation || sks_eftap_file.EFTFileType == SKS_EFT_Module::ARValidation ||
            sks_eftap_file.EFTFileType == SKS_EFT_Module::BTBValidation || sks_eftap_file.EFTFileType == SKS_EFT_Module::CNPValidation) ;
        
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteRelatedData</Name>
				<Source><![CDATA[
    /// <summary>
    /// SKS_FDD_21456 This method is used to delete the AP Payments data from  file detail tables to increase the performance
    /// </summary>
    /// <param name = "_fileRecId">fileRecId</param>
    /// <param name = "_ledgerJournalTrans">LedgerJournalTrans</param>
    public void deleteRelatedData(RefRecId _fileRecId, LedgerJournalTrans _ledgerJournalTrans)
    {
        SKS_EFT_FileDetail fileDetail;

        SKS_EFT_FileDetail_Addresses fileDetailAddress;
        SKS_EFT_FileDetail_Extra filedetailExtra;
        SKS_EFT_FileDetail_BankAccount filedetailBankAccount;
        SKS_EFT_FileDetail_BenBank filedetailBenBank;
        SKS_EFT_FileDetail_CreditParty filedetailCreditParty;
        SKS_EFT_FileDetail_Instructions filedetailInstructions;
        SKS_EFT_FileDetail_Intermediary filedetailIntermediary;
        SKS_EFT_FileDetail_Mandate filedetailMandate;
        SKS_EFT_FileDetail_PaymentLine filedetailPaymentLine;
        SKS_EFT_FileDetail_VendAddress filedetailvendAddress;

        SKS_EFT_FileDetail_AddendaCustom filedetailAddendaCustom;
        SKS_EFT_FileDetail_AddendaDetailConfig filedetailAddendaDetailConfig;
        SKS_EFT_FileDetail_AddendaHeader filedetailAddendaHeader;
        SKS_EFT_FileDetail_CompanyAddress filedetailCompanyAddress;
        SKS_EFT_FileDetail_CustAddress filedetailCustAddress;
        SKS_EFT_FileDetail_TaxWHTrans filedetailTaxWHSTrans;

        fileDetail.skipDataMethods(true);
        fileDetail.skipDatabaseLog(true);
        fileDetail.skipDeleteActions(true);
        fileDetail.skipDeleteMethod(true);
        fileDetail.skipEvents(true);

        fileDetailAddress.skipDataMethods(true);
        fileDetailAddress.skipDatabaseLog(true);
        fileDetailAddress.skipDeleteActions(true);
        fileDetailAddress.skipDeleteMethod(true);
        fileDetailAddress.skipEvents(true);

        filedetailExtra.skipDataMethods(true);
        filedetailExtra.skipDatabaseLog(true);
        filedetailExtra.skipDeleteActions(true);
        filedetailExtra.skipDeleteMethod(true);
        filedetailExtra.skipEvents(true);

        filedetailBankAccount.skipDataMethods(true);
        filedetailBankAccount.skipDatabaseLog(true);
        filedetailBankAccount.skipDeleteActions(true);
        filedetailBankAccount.skipDeleteMethod(true);
        filedetailBankAccount.skipEvents(true);

        filedetailBenBank.skipDataMethods(true);
        filedetailBenBank.skipDatabaseLog(true);
        filedetailBenBank.skipDeleteActions(true);
        filedetailBenBank.skipDeleteMethod(true);
        filedetailBenBank.skipEvents(true);

        filedetailCreditParty.skipDataMethods(true);
        filedetailCreditParty.skipDatabaseLog(true);
        filedetailCreditParty.skipDeleteActions(true);
        filedetailCreditParty.skipDeleteMethod(true);
        filedetailCreditParty.skipEvents(true);

        filedetailInstructions.skipDataMethods(true);
        filedetailInstructions.skipDatabaseLog(true);
        filedetailInstructions.skipDeleteActions(true);
        filedetailInstructions.skipDeleteMethod(true);
        filedetailInstructions.skipEvents(true);

        filedetailIntermediary.skipDataMethods(true);
        filedetailIntermediary.skipDatabaseLog(true);
        filedetailIntermediary.skipDeleteActions(true);
        filedetailIntermediary.skipDeleteMethod(true);
        filedetailIntermediary.skipEvents(true);

        filedetailMandate.skipDataMethods(true);
        filedetailMandate.skipDatabaseLog(true);
        filedetailMandate.skipDeleteActions(true);
        filedetailMandate.skipDeleteMethod(true);
        filedetailMandate.skipEvents(true);

        filedetailPaymentLine.skipDataMethods(true);
        filedetailPaymentLine.skipDatabaseLog(true);
        filedetailPaymentLine.skipDeleteActions(true);
        filedetailPaymentLine.skipDeleteMethod(true);
        filedetailPaymentLine.skipEvents(true);

        filedetailvendAddress.skipDataMethods(true);
        filedetailvendAddress.skipDatabaseLog(true);
        filedetailvendAddress.skipDeleteActions(true);
        filedetailvendAddress.skipDeleteMethod(true);
        filedetailvendAddress.skipEvents(true);

        filedetailAddendaCustom.skipDataMethods(true);
        filedetailAddendaCustom.skipDatabaseLog(true);
        filedetailAddendaCustom.skipDeleteActions(true);
        filedetailAddendaCustom.skipDeleteMethod(true);
        filedetailAddendaCustom.skipEvents(true);

        filedetailAddendaDetailConfig.skipDataMethods(true);
        filedetailAddendaDetailConfig.skipDatabaseLog(true);
        filedetailAddendaDetailConfig.skipDeleteActions(true);
        filedetailAddendaDetailConfig.skipDeleteMethod(true);
        filedetailAddendaDetailConfig.skipEvents(true);

        filedetailAddendaHeader.skipDataMethods(true);
        filedetailAddendaHeader.skipDatabaseLog(true);
        filedetailAddendaHeader.skipDeleteActions(true);
        filedetailAddendaHeader.skipDeleteMethod(true);
        filedetailAddendaHeader.skipEvents(true);

        filedetailCompanyAddress.skipDataMethods(true);
        filedetailCompanyAddress.skipDatabaseLog(true);
        filedetailCompanyAddress.skipDeleteActions(true);
        filedetailCompanyAddress.skipDeleteMethod(true);
        filedetailCompanyAddress.skipEvents(true);

        filedetailCustAddress.skipDataMethods(true);
        filedetailCustAddress.skipDatabaseLog(true);
        filedetailCustAddress.skipDeleteActions(true);
        filedetailCustAddress.skipDeleteMethod(true);
        filedetailCustAddress.skipEvents(true);

        filedetailTaxWHSTrans.skipDataMethods(true);
        filedetailTaxWHSTrans.skipDatabaseLog(true);
        filedetailTaxWHSTrans.skipDeleteActions(true);
        filedetailTaxWHSTrans.skipDeleteMethod(true);
        filedetailTaxWHSTrans.skipEvents(true);
          

        delete_from fileDetailAddress
        exists join fileDetail
            where fileDetailAddress.RefRecId == fileDetail.RecId
            && fileDetail.FileRecId == _fileRecId
            && fileDetail.PaymentLineRecId == _ledgerJournalTrans.RecId
            && (fileDetail.RecordType == SKS_EFT_RecordType::FieldValidations &&
                fileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary);

        delete_from filedetailExtra
        exists join fileDetail
            where filedetailExtra.RefRecId == fileDetail.RecId
             && fileDetail.FileRecId == _fileRecId
             && fileDetail.PaymentLineRecId == _ledgerJournalTrans.RecId
             && (fileDetail.RecordType == SKS_EFT_RecordType::FieldValidations &&
                fileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary);

        delete_from filedetailBankAccount
        exists join fileDetail
            where filedetailBankAccount.RefRecId == fileDetail.RecId
             && fileDetail.FileRecId == _fileRecId
             && fileDetail.PaymentLineRecId == _ledgerJournalTrans.RecId
             && (fileDetail.RecordType == SKS_EFT_RecordType::FieldValidations &&
                fileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary);


        delete_from filedetailBenBank
        exists join fileDetail
            where filedetailBenBank.RefRecId == fileDetail.RecId
             && fileDetail.FileRecId == _fileRecId
             && fileDetail.PaymentLineRecId == _ledgerJournalTrans.RecId
             && (fileDetail.RecordType == SKS_EFT_RecordType::FieldValidations &&
                fileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary);

        delete_from filedetailCreditParty
        exists join fileDetail
            where filedetailCreditParty.RefRecId == fileDetail.RecId
             && fileDetail.FileRecId == _fileRecId
             && fileDetail.PaymentLineRecId == _ledgerJournalTrans.RecId
             && (fileDetail.RecordType == SKS_EFT_RecordType::FieldValidations &&
                fileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary);

        delete_from filedetailInstructions
        exists join fileDetail
            where filedetailInstructions.RefRecId == fileDetail.RecId
             && fileDetail.FileRecId == _fileRecId
             && fileDetail.PaymentLineRecId == _ledgerJournalTrans.RecId
             && (fileDetail.RecordType == SKS_EFT_RecordType::FieldValidations &&
                fileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary);

        delete_from filedetailIntermediary
        exists join fileDetail
            where filedetailIntermediary.RefRecId == fileDetail.RecId
             && fileDetail.FileRecId == _fileRecId
             && fileDetail.PaymentLineRecId == _ledgerJournalTrans.RecId
             && (fileDetail.RecordType == SKS_EFT_RecordType::FieldValidations &&
                fileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary);

        delete_from filedetailMandate
        exists join fileDetail
            where filedetailMandate.RefRecId == fileDetail.RecId
             && fileDetail.FileRecId == _fileRecId
             && fileDetail.PaymentLineRecId == _ledgerJournalTrans.RecId
             && (fileDetail.RecordType == SKS_EFT_RecordType::FieldValidations &&
                fileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary);


        delete_from filedetailPaymentLine
        exists join fileDetail
            where filedetailPaymentLine.RefRecId == fileDetail.RecId
             && fileDetail.FileRecId == _fileRecId
             && fileDetail.PaymentLineRecId == _ledgerJournalTrans.RecId
             && (fileDetail.RecordType == SKS_EFT_RecordType::FieldValidations &&
                fileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary);


        delete_from filedetailvendAddress
        exists join fileDetail
            where filedetailvendAddress.RefRecId == fileDetail.RecId
             && fileDetail.FileRecId == _fileRecId
             && fileDetail.PaymentLineRecId == _ledgerJournalTrans.RecId
             && (fileDetail.RecordType == SKS_EFT_RecordType::FieldValidations &&
                fileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary);


        delete_from filedetailAddendaCustom
        exists join fileDetail
            where filedetailAddendaCustom.RefRecId == fileDetail.RecId
             && fileDetail.FileRecId == _fileRecId
             && fileDetail.PaymentLineRecId == _ledgerJournalTrans.RecId
             && (fileDetail.RecordType == SKS_EFT_RecordType::FieldValidations &&
                fileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary);

        delete_from filedetailAddendaDetailConfig
        exists join fileDetail
            where filedetailAddendaDetailConfig.RefRecId == fileDetail.RecId
             && fileDetail.FileRecId == _fileRecId
             && fileDetail.PaymentLineRecId == _ledgerJournalTrans.RecId
             && (fileDetail.RecordType == SKS_EFT_RecordType::FieldValidations &&
                fileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary);

        delete_from filedetailAddendaHeader
        exists join fileDetail
            where filedetailAddendaHeader.RefRecId == fileDetail.RecId
             && fileDetail.FileRecId == _fileRecId
             && fileDetail.PaymentLineRecId == _ledgerJournalTrans.RecId
             && (fileDetail.RecordType == SKS_EFT_RecordType::FieldValidations &&
                fileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary);

        delete_from filedetailCompanyAddress
        exists join fileDetail
            where filedetailCompanyAddress.RefRecId == fileDetail.RecId
             && fileDetail.FileRecId == _fileRecId
             && fileDetail.PaymentLineRecId == _ledgerJournalTrans.RecId
             && (fileDetail.RecordType == SKS_EFT_RecordType::FieldValidations &&
                fileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary);

        delete_from filedetailCustAddress
        exists join fileDetail
            where filedetailCustAddress.RefRecId == fileDetail.RecId
             && fileDetail.FileRecId == _fileRecId
             && fileDetail.PaymentLineRecId == _ledgerJournalTrans.RecId
             && (fileDetail.RecordType == SKS_EFT_RecordType::FieldValidations &&
                fileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary);

        delete_from filedetailTaxWHSTrans
        exists join fileDetail
            where filedetailTaxWHSTrans.RefRecId == fileDetail.RecId
             && fileDetail.FileRecId == _fileRecId
             && fileDetail.PaymentLineRecId == _ledgerJournalTrans.RecId
             && (fileDetail.RecordType == SKS_EFT_RecordType::FieldValidations &&
                fileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary);

        delete_from fileDetail
            where fileDetail.FileRecId == _fileRecId
            && fileDetail.PaymentLineRecId == _ledgerJournalTrans.RecId
            && (fileDetail.RecordType == SKS_EFT_RecordType::FieldValidations &&
                fileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteFileDetailRelatedData</Name>
				<Source><![CDATA[
    /// <summary>
    /// SKS_FDD_21456 This method is used to delete the AP Payments data from  file detail tables to increase the performance
    /// </summary>
    /// <param name = "_fileRecId">fileRecId</param>
    public void deleteFileDetailRelatedData(RefRecId _fileRecId)
    {
        SKS_EFT_FileDetail fileDetail;

        SKS_EFT_FileDetail_Addresses fileDetailAddress;
        SKS_EFT_FileDetail_Extra filedetailExtra;
        SKS_EFT_FileDetail_BankAccount filedetailBankAccount;
        SKS_EFT_FileDetail_BenBank filedetailBenBank;
        SKS_EFT_FileDetail_CreditParty filedetailCreditParty;
        SKS_EFT_FileDetail_Instructions filedetailInstructions;
        SKS_EFT_FileDetail_Intermediary filedetailIntermediary;
        SKS_EFT_FileDetail_Mandate filedetailMandate;
        SKS_EFT_FileDetail_PaymentLine filedetailPaymentLine;
        SKS_EFT_FileDetail_VendAddress filedetailvendAddress;

        SKS_EFT_FileDetail_AddendaCustom filedetailAddendaCustom;
        SKS_EFT_FileDetail_AddendaDetailConfig filedetailAddendaDetailConfig;
        SKS_EFT_FileDetail_AddendaHeader filedetailAddendaHeader;
        SKS_EFT_FileDetail_CompanyAddress filedetailCompanyAddress;
        SKS_EFT_FileDetail_CustAddress filedetailCustAddress;
        SKS_EFT_FileDetail_TaxWHTrans filedetailTaxWHSTrans;

        fileDetail.skipDataMethods(true);
        fileDetail.skipDatabaseLog(true);
        fileDetail.skipDeleteActions(true);
        fileDetail.skipDeleteMethod(true);
        fileDetail.skipEvents(true);

        fileDetailAddress.skipDataMethods(true);
        fileDetailAddress.skipDatabaseLog(true);
        fileDetailAddress.skipDeleteActions(true);
        fileDetailAddress.skipDeleteMethod(true);
        fileDetailAddress.skipEvents(true);

        filedetailExtra.skipDataMethods(true);
        filedetailExtra.skipDatabaseLog(true);
        filedetailExtra.skipDeleteActions(true);
        filedetailExtra.skipDeleteMethod(true);
        filedetailExtra.skipEvents(true);

        filedetailBankAccount.skipDataMethods(true);
        filedetailBankAccount.skipDatabaseLog(true);
        filedetailBankAccount.skipDeleteActions(true);
        filedetailBankAccount.skipDeleteMethod(true);
        filedetailBankAccount.skipEvents(true);

        filedetailBenBank.skipDataMethods(true);
        filedetailBenBank.skipDatabaseLog(true);
        filedetailBenBank.skipDeleteActions(true);
        filedetailBenBank.skipDeleteMethod(true);
        filedetailBenBank.skipEvents(true);

        filedetailCreditParty.skipDataMethods(true);
        filedetailCreditParty.skipDatabaseLog(true);
        filedetailCreditParty.skipDeleteActions(true);
        filedetailCreditParty.skipDeleteMethod(true);
        filedetailCreditParty.skipEvents(true);

        filedetailInstructions.skipDataMethods(true);
        filedetailInstructions.skipDatabaseLog(true);
        filedetailInstructions.skipDeleteActions(true);
        filedetailInstructions.skipDeleteMethod(true);
        filedetailInstructions.skipEvents(true);

        filedetailIntermediary.skipDataMethods(true);
        filedetailIntermediary.skipDatabaseLog(true);
        filedetailIntermediary.skipDeleteActions(true);
        filedetailIntermediary.skipDeleteMethod(true);
        filedetailIntermediary.skipEvents(true);

        filedetailMandate.skipDataMethods(true);
        filedetailMandate.skipDatabaseLog(true);
        filedetailMandate.skipDeleteActions(true);
        filedetailMandate.skipDeleteMethod(true);
        filedetailMandate.skipEvents(true);

        filedetailPaymentLine.skipDataMethods(true);
        filedetailPaymentLine.skipDatabaseLog(true);
        filedetailPaymentLine.skipDeleteActions(true);
        filedetailPaymentLine.skipDeleteMethod(true);
        filedetailPaymentLine.skipEvents(true);

        filedetailvendAddress.skipDataMethods(true);
        filedetailvendAddress.skipDatabaseLog(true);
        filedetailvendAddress.skipDeleteActions(true);
        filedetailvendAddress.skipDeleteMethod(true);
        filedetailvendAddress.skipEvents(true);

        filedetailAddendaCustom.skipDataMethods(true);
        filedetailAddendaCustom.skipDatabaseLog(true);
        filedetailAddendaCustom.skipDeleteActions(true);
        filedetailAddendaCustom.skipDeleteMethod(true);
        filedetailAddendaCustom.skipEvents(true);

        filedetailAddendaDetailConfig.skipDataMethods(true);
        filedetailAddendaDetailConfig.skipDatabaseLog(true);
        filedetailAddendaDetailConfig.skipDeleteActions(true);
        filedetailAddendaDetailConfig.skipDeleteMethod(true);
        filedetailAddendaDetailConfig.skipEvents(true);

        filedetailAddendaHeader.skipDataMethods(true);
        filedetailAddendaHeader.skipDatabaseLog(true);
        filedetailAddendaHeader.skipDeleteActions(true);
        filedetailAddendaHeader.skipDeleteMethod(true);
        filedetailAddendaHeader.skipEvents(true);

        filedetailCompanyAddress.skipDataMethods(true);
        filedetailCompanyAddress.skipDatabaseLog(true);
        filedetailCompanyAddress.skipDeleteActions(true);
        filedetailCompanyAddress.skipDeleteMethod(true);
        filedetailCompanyAddress.skipEvents(true);

        filedetailCustAddress.skipDataMethods(true);
        filedetailCustAddress.skipDatabaseLog(true);
        filedetailCustAddress.skipDeleteActions(true);
        filedetailCustAddress.skipDeleteMethod(true);
        filedetailCustAddress.skipEvents(true);

        filedetailTaxWHSTrans.skipDataMethods(true);
        filedetailTaxWHSTrans.skipDatabaseLog(true);
        filedetailTaxWHSTrans.skipDeleteActions(true);
        filedetailTaxWHSTrans.skipDeleteMethod(true);
        filedetailTaxWHSTrans.skipEvents(true);
          

        delete_from fileDetailAddress
        exists join fileDetail
            where fileDetailAddress.RefRecId == fileDetail.RecId
            && fileDetail.FileRecId == _fileRecId;

        delete_from filedetailExtra
        exists join fileDetail
            where filedetailExtra.RefRecId == fileDetail.RecId
             && fileDetail.FileRecId == _fileRecId
             && fileDetail.RecordSection != SKS_EFT_RecordSection::FXAllVendor;

        delete_from filedetailBankAccount
        exists join fileDetail
            where filedetailBankAccount.RefRecId == fileDetail.RecId
             && fileDetail.FileRecId == _fileRecId
             && fileDetail.RecordSection != SKS_EFT_RecordSection::FXAllVendor;
             

        delete_from filedetailBenBank
        exists join fileDetail
            where filedetailBenBank.RefRecId == fileDetail.RecId
             && fileDetail.FileRecId == _fileRecId
             && fileDetail.RecordSection != SKS_EFT_RecordSection::FXAllVendor;

        delete_from filedetailCreditParty
        exists join fileDetail
            where filedetailCreditParty.RefRecId == fileDetail.RecId
             && fileDetail.FileRecId == _fileRecId
             && fileDetail.RecordSection != SKS_EFT_RecordSection::FXAllVendor;

        delete_from filedetailInstructions
        exists join fileDetail
            where filedetailInstructions.RefRecId == fileDetail.RecId
             && fileDetail.FileRecId == _fileRecId
             && fileDetail.RecordSection != SKS_EFT_RecordSection::FXAllVendor;

        delete_from filedetailIntermediary
        exists join fileDetail
            where filedetailIntermediary.RefRecId == fileDetail.RecId
             && fileDetail.FileRecId == _fileRecId
             && fileDetail.RecordSection != SKS_EFT_RecordSection::FXAllVendor;

        delete_from filedetailMandate
        exists join fileDetail
            where filedetailMandate.RefRecId == fileDetail.RecId
             && fileDetail.FileRecId == _fileRecId
             && fileDetail.RecordSection != SKS_EFT_RecordSection::FXAllVendor;

        delete_from filedetailPaymentLine
        exists join fileDetail
            where filedetailPaymentLine.RefRecId == fileDetail.RecId
             && fileDetail.FileRecId == _fileRecId
             && fileDetail.RecordSection != SKS_EFT_RecordSection::FXAllVendor;

        delete_from filedetailvendAddress
        exists join fileDetail
            where filedetailvendAddress.RefRecId == fileDetail.RecId
             && fileDetail.FileRecId == _fileRecId
             && fileDetail.RecordSection != SKS_EFT_RecordSection::FXAllVendor;

        delete_from filedetailAddendaCustom
        exists join fileDetail
            where filedetailAddendaCustom.RefRecId == fileDetail.RecId
             && fileDetail.FileRecId == _fileRecId
             && fileDetail.RecordSection != SKS_EFT_RecordSection::FXAllVendor;

        delete_from filedetailAddendaDetailConfig
        exists join fileDetail
            where filedetailAddendaDetailConfig.RefRecId == fileDetail.RecId
             && fileDetail.FileRecId == _fileRecId
             && fileDetail.RecordSection != SKS_EFT_RecordSection::FXAllVendor;

        delete_from filedetailAddendaHeader
        exists join fileDetail
            where filedetailAddendaHeader.RefRecId == fileDetail.RecId
             && fileDetail.FileRecId == _fileRecId
             && fileDetail.RecordSection != SKS_EFT_RecordSection::FXAllVendor;

        delete_from filedetailCompanyAddress
        exists join fileDetail
            where filedetailCompanyAddress.RefRecId == fileDetail.RecId
             && fileDetail.FileRecId == _fileRecId
             && fileDetail.RecordSection != SKS_EFT_RecordSection::FXAllVendor;

        delete_from filedetailCustAddress
        exists join fileDetail
            where filedetailCustAddress.RefRecId == fileDetail.RecId
             && fileDetail.FileRecId == _fileRecId
             && fileDetail.RecordSection != SKS_EFT_RecordSection::FXAllVendor;
        
        delete_from filedetailTaxWHSTrans
        exists join fileDetail
            where filedetailTaxWHSTrans.RefRecId == fileDetail.RecId
             && fileDetail.FileRecId == _fileRecId
             && fileDetail.RecordSection != SKS_EFT_RecordSection::FXAllVendor;

        delete_from fileDetail
            where fileDetail.FileRecId == _fileRecId
             && fileDetail.RecordSection != SKS_EFT_RecordSection::FXAllVendor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>CheckUserSelectionBTB</Name>
				<Source><![CDATA[
    public str CheckUserSelectionBTB(RefRecId _fileRecId, RefRecID _recId = -1, boolean _calledfromAutoCreation = false,
        SKS_EFT_Processing _sks_eft_processingAP = null, DataAreaId _dataAreaId = curext(), LedgerDimensionAccount  _offsetLedgerDimension = 0,
        PaymMode _paymMode = '', PaymSpec _paymSpec = '', TransDate _paymDate = dateNull()) // SKS_Bug_11845
    {
        SKS_EFT_FilePmtSelection sks_eft_filePmtSelection;
        SKS_EFT_FilePmtSelection sks_eft_filePmtSelectionValid;
        LedgerJournalTable ledgerJournalTable;
        SKS_EFT_FormatGroup formatGroup;
        SKS_EB_BankHolidayGroupID msks_eb_bankholidaygroupid;
        SKS_EB_CommID InboundCommID, currInboundCommID; //IHB_3.3.5 SKS 9536 -->
        str InboundFilePath, currInboundFilePath; //IHB_3.3.5 SKS 9536<---
        str fileInfo[8];
        str commInfo;
        str currCommInfo;
        str prevPaymMode;
        str prevFormatId;
        str prevBankId;
        str prevControlName;
        str currControlName;
        str prevControlFormatID;
        str currControlFormatID;

        // SKS_Bug_11845 -->
        str                      fileInfoLoc, controlNameLoc, controlFormatIDLoc,
                                 commInfoLoc, inboundFilePathLoc, formatGroupLoc, companyInfoLoc, fileInfoCur,
                                 outboundFilePath, currOutboundFilePath, outboundFilePathLoc;
        BankAccountTable         bankAccountTable;
        SKS_EFTBTB_Bank sks_eftBTB_bankLoc;
        SKS_BTB_PaymModeTable sks_BTB_PaymModeTable = SKS_BTB_PaymModeTable::find(_paymMode);
        SKS_EFT_FileFormat       sks_eft_FileFormatLoc = SKS_EFT_FileFormat::findByCompany(_dataAreaId, sks_BTB_PaymModeTable.FormatId);
        SKS_EB_CommID            inboundCommIDLoc;
        SKS_EB_BankHolidayGroupID   bankHolidayGroupidLoc;
        boolean                     firstRec = true;
        // SKS_Bug_11845 <--
        SKS_EFTAP_File lSKS_EFTAP_File;
        select firstonly lSKS_EFTAP_File where lSKS_EFTAP_File.RecId == _fileRecId;

        str generateError(str _error,
                          str _ValueKeylabel = '', str _vKeyValue1 = '', str _vKeyValue2 = '',
                          str _Value1label = '', str _v1Value1 = '', str _v1Value2 = '',
                          str _Value2label = '', str _v2Value1 = '', str _v2Value2 = '')
        {
            str ret;

            ret = 'Validation error: ' + _error + ' Record 1: ';

            if(_ValueKeylabel)
            {
                ret += _ValueKeylabel + ': ' + _vKeyValue1;
            }
            if(_Value1label)
            {
                ret += ', ' + _Value1label + ': ' + _v1Value1;
            }
            if(_Value2label)
            {
                ret += ', ' + _Value2label + ': ' + _v2Value1;
            }

            if(_vKeyValue2 || _v1Value2 || _v2Value2)
            {
                ret += '; Record 2: ';

                if(_ValueKeylabel)
                {
                    ret += _ValueKeylabel + ': ' + _vKeyValue2;
                }
                if(_Value1label)
                {
                    ret += ', ' + _Value1label + ': ' + _v1Value2;
                }
                if(_Value2label)
                {
                    ret += ', ' + _Value2label + ': ' + _v2Value2;
                }
            }

            ret += '.';

            return ret;
        }

        while select * from  sks_eft_filePmtSelection order by sks_eft_filePmtSelection.PrimaryFormat desc
            where sks_eft_filePmtSelection.FileRecId == _fileRecId || sks_eft_filePmtSelection.RecId == _recId
        {
            // Check for posted payment journals
            // This is not currently supported.  Once a payment journal is posted, the invoices are removed from SpecTrans
            changecompany(sKS_EFT_FilePmtSelection.Company ? sKS_EFT_FilePmtSelection.Company: sKS_EFT_FilePmtSelection.DataAreaId)
            {
                select JournalNum from ledgerJournalTable where ledgerJournalTable.JournalNum == sks_eft_filePmtSelection.PmtJournalNum
                    && ledgerJournalTable.JournalType == LedgerJournalType::Daily && ledgerJournalTable.Posted == NoYes::Yes;
            }
            if(ledgerJournalTable)
            {
                return(strFmt("@SKS997", sks_eft_filePmtSelection.PmtJournalNum));
            }

            if(!msks_eft_FileFormat)
            {
                this.GetEFTFileFormat(sks_eft_filePmtSelection.PaymMode, SKS_EFT_Module::BTB);
            }

            // Different format group
            if(msks_eftbtb_bank.BankAccountId != sks_eft_filePmtSelection.PmtBankAccountId || msks_eftbtb_bank.PaymMode != sks_eft_filePmtSelection.PaymMode)
            {
                this.GetBTBBank(sks_eft_filePmtSelection.PmtBankAccountId, sks_eft_filePmtSelection.PaymMode, sks_eft_filePmtSelection.Company); // SKS-FDD-10590
            }
            if(msks_eftbtb_bank)
            {
                // SKS_Bug_11845 -->
                if(_calledfromAutoCreation)
                {
                    if(firstRec)
                    {
                        changecompany(_dataAreaId)
                        {
                            bankAccountTable = null;
                            bankAccountTable = BankAccountTable::findByLedgerDimension(_offsetLedgerDimension);
                        }
                        sks_eftbtb_bankLoc  = SKS_EFTBTB_Bank::findByCompany(_dataAreaId, bankAccountTable.AccountID, _paymMode);
                        companyInfoLoc =  sks_eftbtb_bankLoc.ACHCompanyID + sks_eftbtb_bankLoc.ACHCompanyName;
                        fileInfoLoc = sks_eftbtb_bankLoc.ACHImmDest +
                               sks_eftbtb_bankLoc.ACHImmDestName +
                               sks_eftbtb_bankLoc.ACHImmOrig +
                               sks_eftbtb_bankLoc.ACHImmOrigName +
                               enum2str(sks_eftbtb_bankLoc.ACHFileIDModifier) +
                               enum2str(sks_eftbtb_bankLoc.FillBlock) +
                               enum2str(sks_eftbtb_bankLoc.BBHeadTrailID) +
                               enum2str(sks_eftbtb_bankLoc.BBDelete);
                        if(lSKS_EFTAP_File.BFBankIntegration == SKS_BF_BankIntType::BankFabric)
                        {
                            controlNameLoc = sks_eftbtb_bankLoc.BTBBankFabricFileNames;
                        }
                        else
                        {
                            controlNameLoc = sks_eftbtb_bankLoc.BBControlFileName;
                        }
                        controlFormatIDLoc = sks_eftbtb_bankLoc.BBControlFileFormatId;
                        commInfoLoc = sks_eftbtb_bankLoc.BTBCommID;
                        bankHolidayGroupidLoc = sks_eftbtb_bankLoc.BankHolidayGroupId;
                        formatGroupLoc = sks_eft_FileFormatLoc.FormatGroup;
                        if(sks_eft_FileFormatLoc.SKS_BTB_InboundFileGroupId != '')
                        {
                            inboundCommIDLoc    = sks_eftbtb_bankLoc.InboundCommID;
                            if(lSKS_EFTAP_File.BFBankIntegration == SKS_BF_BankIntType::BankFabric)
                            {
                                inboundFilePathLoc  = sks_eftbtb_bankLoc.BTBBankFabricInboundFileLocation;
                            }
                            else
                            {
                                inboundFilePathLoc  = sks_eftbtb_bankLoc.BTBInboundFileLoc;
                            }
                        }

                        if(lSKS_EFTAP_File.BFBankIntegration == SKS_BF_BankIntType::BankFabric)
                        {
                            outboundFilePathLoc = sks_eftbtb_bankLoc.BTBBankFabricFileLocation;
                        }
                        else
                        {
                            outboundFilePathLoc = sks_eftbtb_bankLoc.BBFilePath + '\\' + sks_eftbtb_bankLoc.BBFileName;
                        }

                        firstRec = false;
                    }
                    fileInfoCur = msks_eftbtb_bank.ACHImmDest +
                               msks_eftbtb_bank.ACHImmDestName +
                               msks_eftbtb_bank.ACHImmOrig +
                               msks_eftbtb_bank.ACHImmOrigName +
                               enum2str(msks_eftbtb_bank.ACHFileIDModifier) +
                               enum2str(msks_eftbtb_bank.FillBlock) +
                               enum2str(msks_eftbtb_bank.BBHeadTrailID) +
                               enum2str(msks_eftbtb_bank.BBDelete);
                    if(lSKS_EFTAP_File.BFBankIntegration == SKS_BF_BankIntType::BankFabric)
                    {
                        controlNameLoc = msks_eftbtb_bank.BTBBankFabricFileNames;
                    }
                    else
                    {
                        controlNameLoc = msks_eftbtb_bank.BBControlFileName;
                    }
                    if(strUpr(fileInfoLoc) != strUpr(fileInfoCur))
                    {
                        _sks_eft_processingAP.parmIgnoreFile(true);
                        return '';
                    }

                    // APControlFileInfo and ControlFileFormatId
                    if(comminfo == '') //Check a mandatory field to make sure that we aren't doing a comparison to an entirely empty record
                    {
                        if(lSKS_EFTAP_File.BFBankIntegration == SKS_BF_BankIntType::BankFabric)
                        {
                            currControlName = msks_eftbtb_bank.BTBBankFabricFileNames;
                        }
                        else
                        {
                            currControlName = msks_eftbtb_bank.BBControlFIleName;
                        }
                        currControlFormatID = msks_eftbtb_bank.BBControlFileFormatId;
                    }

                    if(strUpr(controlNameLoc) != strupr(currControlName) || strUpr(controlFormatIDLoc) != strUpr(currControlFormatID))
                    {
                        _sks_eft_processingAP.parmIgnoreFile(true);
                        return '';
                    }
                    // Communincation info

                    comminfo = msks_eftbtb_bank.BTBCommID;
                    if(strUpr(comminfo) != strUpr(commInfoLoc))
                    {
                        _sks_eft_processingAP.parmIgnoreFile(true);
                        return '';
                    }
                    //Holidays
                    msks_eb_bankholidaygroupid = msks_eftbtb_bank.BankHolidayGroupId;
                    if(msks_eb_bankholidaygroupid != bankHolidayGroupidLoc)
                    {
                        _sks_eft_processingAP.parmIgnoreFile(true);
                        return '';
                    }
                    if(msks_eft_FileFormat.SKS_BTB_InboundFileGroupId != '' || sks_eft_FileFormatLoc.SKS_BTB_InboundFileGroupId != '')
                    {
                        InboundCommID = msks_eftbtb_bank.InboundCommID;

                        if(InboundCommID != inboundCommIDLoc)
                        {
                            _sks_eft_processingAP.parmIgnoreFile(true);
                            return '';
                        }
                        // Inbound File Location
                        if(lSKS_EFTAP_File.BFBankIntegration == SKS_BF_BankIntType::BankFabric)
                        {
                            InboundFilePath = msks_eftbtb_bank.BTBBankFabricInboundFileLocation;
                        }
                        else
                        {
                            InboundFilePath = msks_eftbtb_bank.BTBInboundFileLoc;
                        }
                        if(inboundFilePathLoc != InboundFilePath)
                        {
                            _sks_eft_processingAP.parmIgnoreFile(true);
                            return '';
                        }
                    }

                    if(lSKS_EFTAP_File.BFBankIntegration == SKS_BF_BankIntType::BankFabric)
                    {
                        outboundFilePath = msks_eftbtb_bank.BTBBankFabricFileLocation;
                    }
                    else
                    {
                        outboundFilePath = msks_eftbtb_bank.BBFilePath + '\\' + msks_eftbtb_bank.BBFileName;
                    }
                    if(outboundFilePathLoc != outboundFilePath)
                    {
                        _sks_eft_processingAP.parmIgnoreFile(true);
                        return '';
                    }

                }
                // SKS_Bug_11845 <--
                else
                {
                    if(formatGroup == '')
                    {
                        formatGroup = sks_eft_filePmtSelection.FormatGroup;
                        prevPaymMode = sks_eft_filePmtSelection.PaymMode;
                        prevFormatId = sks_eft_filePmtSelection.FormatId;
                    }
                    else
                    {
                        if(formatGroup != sks_eft_filePmtSelection.FormatGroup)
                        {
                            return generateError("@SKS998",
                                             fieldPName(SKS_EFT_FilePmtSelection, PaymMode), prevPaymMode, sks_eft_filePmtSelection.PaymMode,
                                             fieldPName(SKS_EFT_FilePmtSelection, FormatGroup), formatGroup, sks_eft_filePmtSelection.FormatGroup,
                                             fieldPName(SKS_EFT_FilePmtSelection, FormatId), prevFormatId, sks_eft_filePmtSelection.FormatId);
                        }
                    }

                    // File header info
                    if(fileInfo[1] == '')
                    {
                        prevBankId = msks_eftbtb_bank.BankAccountId;
                        fileInfo[1] = msks_eftbtb_bank.ACHImmDest;
                        fileInfo[2] = msks_eftbtb_bank.ACHImmDestName;
                        fileInfo[3] = msks_eftbtb_bank.ACHImmOrig;
                        fileInfo[4] = msks_eftbtb_bank.ACHImmOrigName;
                        fileInfo[5] = enum2str(msks_eftbtb_bank.ACHFileIDModifier);
                        fileInfo[6] = enum2str(msks_eftbtb_bank.FillBlock);
                        fileInfo[7] = enum2str(msks_eftbtb_bank.BBHeadTrailID);
                        fileInfo[8] = enum2str(msks_eftbtb_bank.BBDelete);
                    }
                    else
                    {
                        if(strUpr(fileInfo[1]) != strUpr(msks_eftbtb_bank.ACHImmDest))
                        {
                            return generateError("@SKS1000",
                                             fieldPName(SKS_EFT_Bank, ACHImmDest), fileInfo[1], msks_eftbtb_bank.ACHImmDest);
                        }
                        else if(strUpr(fileInfo[2]) != strUpr(msks_eftbtb_bank.ACHImmDestName))
                        {
                            return generateError("@SKS1000",
                                             fieldPName(SKS_EFT_Bank, ACHImmDestName), fileInfo[2], msks_eftbtb_bank.ACHImmDestName);
                        }
                        else if(strUpr(fileInfo[3]) != strUpr(msks_eftbtb_bank.ACHImmOrig))
                        {
                            return generateError("@SKS1000",
                                             fieldPName(SKS_EFT_Bank, ACHImmOrig), fileInfo[3], msks_eftbtb_bank.ACHImmOrig);
                        }
                        else if(strUpr(fileInfo[4]) != strUpr(msks_eftbtb_bank.ACHImmOrigName))
                        {
                            return generateError("@SKS1000",
                                             fieldPName(SKS_EFT_Bank, ACHImmOrigName), fileInfo[4], msks_eftbtb_bank.ACHImmOrigName);
                        }
                        else if(strUpr(fileInfo[5]) != strUpr(enum2str(msks_eftbtb_bank.ACHFileIDModifier)))
                        {
                            return generateError("@SKS1000",
                                             fieldPName(SKS_EFT_Bank, ACHFileIDModifier), fileInfo[5], enum2str(msks_eftbtb_bank.ACHFileIDModifier));
                        }
                        else if(strUpr(fileInfo[6]) != strUpr(enum2str(msks_eftbtb_bank.FillBlock)))
                        {
                            return generateError("@SKS1000",
                                             fieldPName(SKS_EFT_Bank, FillBlock), fileInfo[6], enum2str(msks_eftbtb_bank.FillBlock));
                        }
                        else if(strUpr(fileInfo[7]) != strUpr(enum2str(msks_eftbtb_bank.BBHeadTrailID)))
                        {
                            return generateError("@SKS1000",
                                             fieldPName(SKS_EFT_Bank, APHeadTrailID), fileInfo[7], enum2str(msks_eftbtb_bank.BBHeadTrailID));
                        }
                        else if(strUpr(fileInfo[8]) != strUpr(enum2str(msks_eftbtb_bank.BBDelete)))
                        {
                            return generateError("@SKS1000",
                                             fieldPName(SKS_EFT_Bank, APDelete), fileInfo[8], enum2str(msks_eftbtb_bank.BBDelete));
                        }
                    }

                    if(prevControlName == '' && currControlFormatID == '')
                    {
                        if(comminfo == '')//Check a mandatory field to make sure that we aren't doing a comparison to an entirely empty record
                        {
                            if(lSKS_EFTAP_File.BFBankIntegration == SKS_BF_BankIntType::BankFabric)
                            {
                                prevControlName = msks_eftbtb_bank.BTBBankFabricFileNames;
                            }
                            else
                            {
                                prevControlName = msks_eftbtb_bank.BBControlFileName;
                            }
                            prevControlFormatID = msks_eftbtb_bank.BBControlFileFormatiD;
                        }
                        else
                        {
                            if(lSKS_EFTAP_File.BFBankIntegration == SKS_BF_BankIntType::BankFabric)
                            {
                                CurrControlName = msks_eftbtb_bank.BTBBankFabricFileNames;
                            }
                            else
                            {
                                CurrControlName = msks_eftbtb_bank.BBControlFileName;
                            }
                            CurrControlFormatID = msks_eftbtb_bank.BBControlFileFormatiD;

                            if(strUpr(prevControlName) != strupr(currControlName) || strUpr(prevControlFormatID) != strUpr(currControlFormatID))
                            {
                                return generateError("@SKS3248",
                                                 fieldPName(SKS_EFTBTB_Bank, BankAccountId), prevBankId, msks_eftbtb_bank.BankAccountId,
                                                 fieldPName(SKS_EFTBTB_Bank, BBControlFileName), prevControlName, currControlName,
                                                 fieldPName(SKS_EFTBTB_Bank, BBControlFileFormatID), prevControlFormatID, currControlFormatID);
                            }
                        }
                    }
                    else
                    {
                        if(lSKS_EFTAP_File.BFBankIntegration == SKS_BF_BankIntType::BankFabric)
                        {
                            currControlName = msks_eftbtb_bank.BTBBankFabricFileNames;
                        }
                        else
                        {
                            currControlName = msks_eftbtb_bank.BBControlFileName;
                        }
                        currControlFormatID = msks_eftbtb_bank.BBControlFileFormatiD;
                        if(strUpr(prevControlName) != strupr(currControlName) || strUpr(prevControlFormatID) != strUpr(currControlFormatID))
                        {
                            return generateError("@SKS3248",
                                                fieldPName(SKS_EFTBTB_Bank, BankAccountId), prevBankId, msks_eftbtb_bank.BankAccountId,
                                                fieldPName(SKS_EFTBTB_Bank, BBControlFileName), prevControlName, currControlName,
                                                fieldPName(SKS_EFTBTB_Bank, BBControlFileFormatID), prevControlFormatID, currControlFormatID);
                        }
                    }

                    // Communincation info
                    if(commInfo == '')
                    {
                        commInfo = msks_eftbtb_bank.BTBCommID;
                    }
                    else
                    {
                        currCommInfo = msks_eftbtb_bank.BTBCommID;

                        if(strUpr(commInfo) != strUpr(currCommInfo))
                        {
                            return generateError("@SKS1001",
                                             fieldPName(SKS_EFTBTB_Bank, BankAccountId), prevBankId, msks_eftbtb_bank.BankAccountId,
                                             fieldPName(SKS_EFTBTB_Bank, BTBCommID), commInfo, currCommInfo);
                        }
                    }

                    // Inbound Communications
                    if(msks_eft_FileFormat.InboundFileGroupId != '' || msks_eft_FileFormat.SKS_DD_InboundFileGroupId != '' || msks_eft_FileFormat.SKS_BTB_InboundFileGroupId)
                    {
                        if(InboundCommID == '')
                        {
                            InboundCommID = msks_eftbtb_bank.InboundCommID;
                        }
                        else
                        {
                            currInboundCommID = msks_eftbtb_bank.InboundCommID;

                            if(strUpr(InboundCommID) != strUpr(currInboundCommID))
                            {
                                return generateError("@SKS2888",
                                                 fieldPName(SKS_EFTBTB_Bank, BankAccountId), prevBankId, msks_eftbtb_bank.BankAccountId,
                                                 fieldPName(SKS_EFTBTB_Bank, InboundCommID), InboundCommID, msks_eftbtb_bank.InboundCommID);
                            }
                        }

                        // Inbound File Location
                        if(InboundFilePath == '')
                        {
                            if(lSKS_EFTAP_File.BFBankIntegration == SKS_BF_BankIntType::BankFabric)
                            {
                                InboundFilePath = msks_eftbtb_bank.BTBBankFabricInboundFileLocation;
                            }
                            else
                            {
                                InboundFilePath = msks_eftbtb_bank.BTBInboundFileLoc;
                            }
                        }
                        else
                        {
                            if(lSKS_EFTAP_File.BFBankIntegration == SKS_BF_BankIntType::BankFabric)
                            {
                                currInboundFilePath = msks_eftbtb_bank.BTBBankFabricInboundFileLocation;
                            }
                            else
                            {
                                currInboundFilePath = msks_eftbtb_bank.BTBInboundFileLoc;
                            }


                            if(strUpr(InboundFilePath) != strUpr(currInboundFilePath))
                            {
                                return generateError("@SKS2889",
                                                 fieldPName(SKS_EFTBTB_Bank, BankAccountId), prevBankId, msks_eftbtb_bank.BankAccountId,
                                                 fieldPName(SKS_EFTBTB_Bank, BTBInboundFileLoc), InboundFilePath, msks_eftbtb_bank.BTBInboundFileLoc);
                            }
                        }
                    }

                    // Outbound File Location
                    if(outboundFilePath == '')
                    {
                        if(lSKS_EFTAP_File.BFBankIntegration == SKS_BF_BankIntType::BankFabric)
                        {
                            outboundFilePath = msks_eftbtb_bank.BTBBankFabricFileLocation;
                        }
                        else
                        {
                            outboundFilePath = msks_eftbtb_bank.BBFilePath + '\\' + msks_eftbtb_bank.BBFileName;
                        }
                    }
                    else
                    {
                        if(lSKS_EFTAP_File.BFBankIntegration == SKS_BF_BankIntType::BankFabric)
                        {
                            currOutboundFilePath = msks_eftbtb_bank.BTBBankFabricFileLocation;
                        }
                        else
                        {
                            currOutboundFilePath = msks_eftbtb_bank.BBFilePath + '\\' + msks_eftbtb_bank.BBFileName;
                        }

                        if(strUpr(outboundFilePath) != strUpr(currOutboundFilePath))
                        {
                            return generateError("@SKS:SKGOutboundFileNameError",
                                                 fieldPName(SKS_EFT_Bank, BankAccountId), prevBankId, msks_eftbtb_bank.BankAccountId,
                                                 fieldPName(SKS_EFT_Bank, APFilePath), outboundFilePath, msks_eftbtb_bank.BBFilePath + '\\' + msks_eftbtb_bank.BBFileName);
                        }
                    }

                    //Holidays
                    if(msks_eb_bankholidaygroupid == '')
                    {
                        msks_eb_bankholidaygroupid = msks_eftbtb_bank.BankHolidayGroupId;
                    }
                    else
                    {
                        if(msks_eb_bankholidaygroupid != msks_eftbtb_bank.BankHolidayGroupId)
                        {
                            return generateError("@SKS2505",
                                             fieldPName(SKS_EFT_Bank, BankAccountId), prevBankId, msks_eftbtb_bank.BankAccountId,
                                             fieldPName(SKS_EFT_Bank, BankHolidayGroupId), msks_eb_bankholidaygroupid, msks_eftbtb_bank.BankHolidayGroupId);
                        }
                    }
                }
            }
            else
            {
                return strFmt("@SKS:SKGBTBBankRecordnotFound");
            }
        }
        // See if any payment selection records require a separate file
        select firstOnly sks_eft_filePmtSelection
         where
         (sks_eft_filePmtSelection.FileRecId == _fileRecId || sks_eft_filePmtSelection.RecId == _recId) &&
         sks_eft_filePmtSelection.PaymSpecSeparateFile == NoYes::Yes;

        // If a record was found, see if other payment specs are selected
        // Other payment specs are not allowed to be in this file
        if(sks_eft_filePmtSelection)
        {
            if(_calledfromAutoCreation)
            {
                select firstOnly sks_eft_filePmtSelectionValid where sks_eft_filePmtSelectionValid.FileRecId == _fileRecId &&
                 !(sks_eft_filePmtSelectionValid.PaymMode == _paymMode &&
                   sks_eft_filePmtSelectionValid.PaymSpec == _paymSpec);

                if(sks_eft_filePmtSelectionValid)
                {
                    _sks_eft_processingAP.parmIgnoreFile(true);
                    return '';
                }
            }
            else
            {
                select firstOnly sks_eft_filePmtSelectionValid where
                 (sks_eft_filePmtSelectionValid.FileRecId == _fileRecId || sks_eft_filePmtSelectionValid.RecId == _recId) &&
                 !(sks_eft_filePmtSelectionValid.PaymMode == sks_eft_filePmtSelection.PaymMode &&
                   sks_eft_filePmtSelectionValid.PaymSpec == sks_eft_filePmtSelection.PaymSpec);

                if(sks_eft_filePmtSelectionValid)
                {
                    return "@SKS1003";
                }
            }
        }

        // See if any payment selection records require the payment date to be the same
        select firstOnly sks_eft_filePmtSelection
         where
         (sks_eft_filePmtSelection.FileRecId == _fileRecId || sks_eft_filePmtSelection.RecId == _recId) &&
         sks_eft_filePmtSelection.PaymSpecSameDate == NoYes::Yes;

        // If a record was found, see if other dates are selected
        // Other payment dates are not allowed to be in this file
        if(sks_eft_filePmtSelection)
        {
            if(_calledfromAutoCreation)
            {
                select firstOnly sks_eft_filePmtSelectionValid where sks_eft_filePmtSelectionValid.FileRecId == _fileRecId &&
                 (sks_eft_filePmtSelectionValid.PmtDate != _paymDate) && (sks_eft_filePmtSelectionValid.PmtDate != DateNull())
                 && (sks_eft_filePmtSelection.PmtDate != DateNull());

                if(sks_eft_filePmtSelectionValid)
                {
                    _sks_eft_processingAP.parmIgnoreFile(true);
                    return '';
                }
            }
            else
            {
                select firstOnly sks_eft_filePmtSelectionValid where
             (sks_eft_filePmtSelectionValid.FileRecId == _fileRecId || sks_eft_filePmtSelectionValid.RecId == _recId) &&
             (sks_eft_filePmtSelectionValid.PmtDate != sks_eft_filePmtSelection.PmtDate) && (sks_eft_filePmtSelectionValid.PmtDate != DateNull())
             && (sks_eft_filePmtSelection.PmtDate != DateNull());

                if(sks_eft_filePmtSelectionValid)
                {
                    return "@SKS1004";
                }
            }
        }
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>BuildBTBUploadBankFields</Name>
				<Source><![CDATA[
    public static server void BuildBTBUploadBankFields(SKS_EFT_FileDetail _sks_eft_FileDetail, LedgerJournalTrans ledgerJournalTrans = null) // SKS_FDD_10590
    {
        SKS_EFT_FileDetail_VendAddress      sks_eft_filedetailadress;
        SKS_EFT_FileDetail_Intermediary     sks_eft_filedetailintermediary;
        SKS_EFT_FileDetail_Extra            sks_eft_filedetailextra;
        SKS_EFT_FileDetail_BenBank          sks_eft_filedetailbenbank;
        SKS_EFT_BanktoBankPaym              sks_eft_banktobankpaym;
        SKS_EFT_FileFormatPaymSpecFields    sks_EFT_FileFormatPaymSpecFields;
        BankAccountTable                    bankAccountTableaccountside;

        //SKS_EFT_FileDetail_Addresses    sks_eft_fileBankAddress;
        SKS_EFT_FileDetail_CreditParty  sKS_EFT_FileDetail_CreditParty;
        SKS_EFT_FileDetail_Instructions sKS_EFT_FileDetail_Instructions;
        SKS_EB_Address          addressBldgNb, addressStrtNm;
        container               address;
        str beneName;
        LogisticsPostalAddress                  logisticsPostalAddressBank;
        DirPartyPostalAddressView  postalAddress;
        // SKS_FDD_10590 <--


        sks_eft_banktobankpaym = SKS_EFT_BanktoBankPaym::find(_sks_eft_FileDetail.AccountCompany, _sks_eft_FileDetail.AccountNum,
                                                               _sks_eft_FileDetail.PaymMode, _sks_eft_FileDetail.PaymSpec); //FDD-10590


        SKS_EFT_FileFormatPaymSpec sks_eft_FileFormatPaymSpec = SKS_EFT_FileFormatPaymSpec::find( _sks_eft_FileDetail.FormatId, _sks_eft_FileDetail.PaymSpec);

        bankAccountTableaccountside = null;
        bankAccountTableaccountside = BankAccountTable::findByCompany(_sks_eft_FileDetail.AccountCompany, _sks_eft_FileDetail.AccountNum);

        // Assign BankAddress
        select firstonly Street, State, ZipCode, Location,City, CountryRegionId from logisticsPostalAddressBank
            where logisticsPostalAddressBank.Location == bankAccountTableaccountside.Location;

        sks_eft_filedetailbenbank.BenBankName = bankAccountTableaccountside.Name;
        sks_eft_filedetailbenbank.BenBankCity = logisticsPostalAddressBank.City;
        sks_eft_filedetailbenbank.BenBankCountryRegionId = logisticsPostalAddressBank.CountryRegionId;


        if(strScan(logisticsPostalAddressBank.Street, ';', 1, strLen(logisticsPostalAddressBank.Street)))
        {
            address = SKS_EFT_Processing::addressSplit(logisticsPostalAddressBank.Street);
            addressStrtNm = conpeek(address,1);
            addressBldgNb = conpeek(address,2);
        }
        else
        {
            addressStrtNm = logisticsPostalAddressBank.Street;
        }
        sks_eft_filedetailbenbank.BenBankAddr = SKS_PP_StringFormats::strRemoveCRLF(addressStrtNm);
        sks_eft_filedetailbenbank.BenBankBranch = SKS_PP_StringFormats::strRemoveCRLF(addressBldgNb);
        sks_eft_filedetailbenbank.RefRecId =  _sks_eft_FileDetail.RecId;

        changecompany(ledgerJournalTrans.Company)
        {
            beneName = CompanyInfo::find().Name();            

            select firstOnly1 postalAddress where postalAddress.IsPrimary == NoYes::Yes && postalAddress.Party == DirPartyTable::findByNum(CompanyInfo::find().PartyNumber).RecId;
        }

        if(strScan(postalAddress.Street, ';', 1, strLen(postalAddress.Street)))
        {
            address = SKS_EFT_Processing::addressSplit(postalAddress.Street);
            addressStrtNm = conpeek(address,1);
            addressBldgNb = conpeek(address,2);
        }
        else
        {
            addressStrtNm = postalAddress.Street;
        }

        sks_eft_filedetailadress.BeneName = beneName;
        sks_eft_filedetailadress.BeneAddr = SKS_PP_StringFormats::strRemoveCRLF(addressStrtNm);
        sks_eft_filedetailadress.BeneAddr2 = SKS_PP_StringFormats::strRemoveCRLF(addressBldgNb);
        sks_eft_filedetailadress.BeneCity = postalAddress.City;
        sks_eft_filedetailadress.BeneCountryRegionId = postalAddress.CountryRegionId;
        sks_eft_filedetailadress.BeneState = postalAddress.State;
        sks_eft_filedetailadress.BeneZipPostal = postalAddress.ZipCode;
        sks_eft_filedetailadress.BeneStreet = SKS_PP_StringFormats::strRemoveCRLF(postalAddress.Street);
                
        sks_eft_filedetailadress.RefRecId = _sks_eft_FileDetail.recid;
            

        if(sks_eft_banktobankpaym)
        {
            container companies;
            companies += sks_eft_FileFormatPaymSpec.company();
            while select crosscompany:companies FormatFieldId, CodeId from sks_EFT_FileFormatPaymSpecFields
                where sks_EFT_FileFormatPaymSpecFields.FileFormatPaymSpecRecId == sks_eft_FileFormatPaymSpec.RecId
            {
                sks_eft_filedetailextra.FieldName = sks_EFT_FileFormatPaymSpecFields.FormatFieldId;

                str codeLookupValue;
                changecompany (sks_eft_banktobankpaym.DataAreaId)
                {
                    codeLookupValue = sks_eft_format::getBTBValueFromCode(sks_EFT_FileFormatPaymSpecFields.FormatFieldId, sks_eft_FileFormatPaymSpec, sks_eft_banktobankpaym.RecId);
                }
                sks_eft_filedetailextra.Value = codeLookupValue;
                sks_eft_filedetailextra.RefRecId  = _sks_eft_FileDetail.RecId;
                sks_eft_filedetailextra.insert();
            }
        }
        sks_eft_filedetailintermediary.RefRecId  = _sks_eft_FileDetail.RecId;
        sKS_EFT_FileDetail_CreditParty.RefRecId = _sks_eft_FileDetail.RecId;
        sKS_EFT_FileDetail_Instructions.RefRecId = _sks_eft_FileDetail.RecId;
        sks_eft_filedetailadress.insert();
        sks_eft_filedetailintermediary.insert();
        sks_eft_filedetailbenbank.insert();
        sKS_EFT_FileDetail_Instructions.insert();
        sKS_EFT_FileDetail_CreditParty.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>BuildBTBMultiCompFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// multi company file detail data insertion
    /// </summary>
    /// <param name = "_sks_eft_FileDetail"></param>
    /// <param name = "ledgerJournalTrans"></param>
    /// FDD-10590
    public static server void BuildBTBMultiCompFields(SKS_EFT_FileDetail _sks_eft_FileDetail, LedgerJournalTrans _ledgerJournalTrans = null)
    {
        SKS_EFT_FileDetail_BankAccount          sks_eft_fileBankAccount;
        SKS_EFT_FileDetail_PaymentLine          sks_eft_filePaymentLine;
        SKS_EFT_FileDetail_CustAddress          sks_eft_fileCustAddress;
        SKS_EFTBTB_Bank                         sks_eftbtb_bank;
        SKS_BTB_PaymModeTable           sks_btb_paymmodeTable;
        SKS_EFT_BanktoBankPaym          sks_eft_banktobankpaym;
        SKS_EB_Address                          addressBldgNb, addressStrtNm;
        container                               address;
        LogisticsPostalAddress                  lLogisticsPostalAddress,logisticsPostalAddressBank;
        SKS_EFT_FileDetail_Addresses            sks_eft_fileBankAddress, sks_eft_fileCustBankAddress;
        SKS_EFT_FileDetail_Extra                sks_EFT_FileDetail_Extra;
        BankAccountTable                        bankAccountTable;
        BankAccountTable                        bankAccountTableAccount;
        DirPartyPostalAddressView  postalAddress;
        ;

        // SKS_FDD_10590 <--
        sks_eft_banktobankpaym = SKS_EFT_BanktoBankPaym::find(_sks_eft_FileDetail.DataAreaId, _sks_eft_FileDetail.AccountNum, _sks_eft_FileDetail.PaymMode, _sks_eft_FileDetail.PaymSpec);

        sks_btb_paymmodeTable = SKS_BTB_PaymModeTable::find(_sks_eft_FileDetail.PaymMode);


        SKS_EFT_FileFormatPaymSpec sks_eft_FileFormatPaymSpec = SKS_EFT_FileFormatPaymSpec::findByCompany(_sks_eft_FileDetail.DataAreaId, _sks_eft_FileDetail.FormatId, _sks_eft_FileDetail.PaymSpec);

        sks_eftbtb_bank = SKS_EFTBTB_Bank::find(_sks_eft_FileDetail.BankAccountId, _sks_eft_FileDetail.PaymMode);
        
        if(sks_btb_paymmodeTable.TransferType == SKS_BTB_TransferType::Transfer_out)
        {
            if(_ledgerJournalTrans.RecId)
            {
                changecompany(_ledgerJournalTrans.OffsetCompany)
                {
                    bankAccountTable = null;
                    bankAccountTable = BankAccountTable::findByLedgerDimension(_ledgerJournalTrans.OffsetLedgerDimension);
                }
            }

            // Assign BankAddress
            select firstonly State, ZipCode, Location,City, CountryRegionId from logisticsPostalAddressBank
                where logisticsPostalAddressBank.Location == bankAccountTable.Location;

            sks_eft_fileBankAddress.Name = bankAccountTable.Name;       //SKS_VSTS_14068
            sks_eft_fileBankAddress.City = logisticsPostalAddressBank.City;
            sks_eft_fileBankAddress.CountryRegionId = logisticsPostalAddressBank.CountryRegionId;
            sks_eft_fileBankAddress.State = logisticsPostalAddressBank.State;
            sks_eft_fileBankAddress.ZipCode = logisticsPostalAddressBank.ZipCode;
            sks_eft_fileBankAddress.Location = logisticsPostalAddressBank.Location;


            if(strScan(logisticsPostalAddressBank.Street, ';', 1, strLen(logisticsPostalAddressBank.Street)))
            {
                address = SKS_EFT_Processing::addressSplit(logisticsPostalAddressBank.Street);
                addressStrtNm = conpeek(address,1);
                addressBldgNb = conpeek(address,2);
            }
            else
            {
                addressStrtNm = logisticsPostalAddressBank.Street;
            }
            sks_eft_fileBankAddress.Addr = SKS_PP_StringFormats::strRemoveCRLF(addressStrtNm);
            sks_eft_fileBankAddress.Addr2 = SKS_PP_StringFormats::strRemoveCRLF(addressBldgNb);
            sks_eft_fileBankAddress.RefRecId =  _sks_eft_FileDetail.RecId;
            sks_eft_fileBankAddress.AddressType = SKS_EFT_AddressType::BankAddress;
            sks_eft_fileBankAddress.insert();

            if(sks_eftbtb_bank)
            {
                sks_eft_fileBankAccount.WOrdPartyId = sks_eftbtb_bank.WOrdPartyId;
                sks_eft_fileBankAccount.WOrdPartyName = sks_eftbtb_bank.WOrdPartyName;
                sks_eft_fileBankAccount.WOrdPartyAddr = sks_eftbtb_bank.WOrdPartyAddr;
                sks_eft_fileBankAccount.WOrdPartyAddr2 = sks_eftbtb_bank.WOrdPartyAddr2;       //SKS_Bug_11785
                sks_eft_fileBankAccount.WOrdPartyCity = sks_eftbtb_bank.WOrdPartyCity;
                sks_eft_fileBankAccount.WOrdPartyState = sks_eftbtb_bank.WOrdPartyState;
                sks_eft_fileBankAccount.WOrdPartyCountryRegionId = sks_eftbtb_bank.WOrdPartyCountryRegionId;
                sks_eft_fileBankAccount.WOrdPartyZipCode = sks_eftbtb_bank.WOrdPartyZipCode;
                sks_eft_fileBankAccount.WOrdPartyCountryName = sks_eftbtb_bank.WOrdPartyCountryName;
                sks_eft_fileBankAccount.WOrdPartySWIFTNo = sks_eftbtb_bank.WOrdPartySWIFTNo;


                sks_eft_fileBankAccount.ACHFileIDModifier = sks_eftbtb_bank.ACHFileIDModifier;
                sks_eft_fileBankAccount.ACHOrigDFI = sks_eftbtb_bank.ACHOrigDFI;
                sks_eft_fileBankAccount.ACHOrigDFIName = sks_eftbtb_bank.ACHOrigDFIName;
                sks_eft_fileBankAccount.APACHInclDR = sks_eftbtb_bank.BBACHInclDR;

                sks_eft_fileBankAccount.RefRecId = _sks_eft_FileDetail.recid;

                SKS_EFT_FileFormat lSKS_EFT_FileFormat = SKS_EFT_FileFormat::findByCompany(_sks_eft_FileDetail.PaymentCompany, _sks_eft_FileDetail.FormatId);//DevOps20187
                SKS_EFT_FileFormatFields    lSKS_EFT_FileFormatFields;
                container companies;
                companies += sks_eft_FileFormatPaymSpec.company();

                while select crosscompany:companies FormatFieldId, CodeId from lSKS_EFT_FileFormatFields
                    where lSKS_EFT_FileFormatFields.FileFormatRecId == lSKS_EFT_FileFormat.RecId
                {
                    sks_EFT_FileDetail_Extra.FieldName = lSKS_EFT_FileFormatFields.FormatFieldId;

                    str codeLookupValue;
                    changecompany (sks_eftbtb_bank.DataAreaId)
                    {
                        codeLookupValue = SKS_EFT_Processing::getBTBBankAccountValueFromCode(lSKS_EFT_FileFormatFields.FormatFieldId, lSKS_EFT_FileFormat, sks_eftbtb_bank.RecId);
                    }
                    sks_EFT_FileDetail_Extra.Value = codeLookupValue;
                    sks_EFT_FileDetail_Extra.RefRecId  = _sks_eft_FileDetail.RecId;
                    sks_EFT_FileDetail_Extra.CodeLookupType = SKS_EFT_CodeLookupType::CodeLookupBank;
                    sks_EFT_FileDetail_Extra.insert();
                }


                if(_ledgerJournalTrans.RecId)
                {
                    changecompany(_ledgerJournalTrans.Company)
                    {
                        select firstOnly1 postalAddress where postalAddress.IsPrimary == NoYes::Yes && postalAddress.Party == DirPartyTable::findByNum(CompanyInfo::find().PartyNumber).RecId;
                    }
                }
                else //SKS_VSTS_12937--->
                {
                    select firstOnly1 postalAddress where postalAddress.IsPrimary == NoYes::Yes && postalAddress.Party == DirPartyTable::findByNum(CompanyInfo::find().PartyNumber).RecId;
                }
                //SKS_VSTS_12937<---

                if(postalAddress)
                {
                    if(strScan(postalAddress.Street, ';', 1, strLen(postalAddress.Street)))
                    {
                        address = SKS_EFT_Processing::addressSplit(postalAddress.Street);
                        addressStrtNm = conpeek(address,1);
                        addressBldgNb = conpeek(address,2);
                    }
                    else
                    {
                        addressStrtNm = postalAddress.Street;
                    }

                    sks_eft_fileBankAccount.Addr = SKS_PP_StringFormats::strRemoveCRLF(addressStrtNm);
                    sks_eft_fileBankAccount.Addr2 = SKS_PP_StringFormats::strRemoveCRLF(addressBldgNb);
                    sks_eft_fileBankAccount.City = postalAddress.City;
                    sks_eft_fileBankAccount.CountryRegionId = postalAddress.CountryRegionId;
                    sks_eft_fileBankAccount.State = postalAddress.State;
                    sks_eft_fileBankAccount.ZipPostal = postalAddress.ZipCode;
                    sks_eft_fileBankAccount.Street = SKS_PP_StringFormats::strRemoveCRLF(postalAddress.Street);
                    sks_eft_fileBankAccount.RefRecId = _sks_eft_FileDetail.recid;
                }

            }
        }
        else
        {
            if(sks_eftbtb_Bank)
            {
                sks_eft_fileBankAccount.ACHFileIDModifier = sks_eftbtb_Bank.ACHFileIDModifier;
                sks_eft_fileBankAccount.ACHOrigDFI = sks_eftbtb_Bank.ACHOrigDFI;
                sks_eft_fileBankAccount.ACHOrigDFIName = sks_eftbtb_Bank.ACHOrigDFIName;

                select firstOnly1 postalAddress where postalAddress.IsPrimary == NoYes::Yes && postalAddress.Party == DirPartyTable::findByNum(CompanyInfo::find().PartyNumber).RecId;
                    
                if(postalAddress)
                {
                    if(strScan(postalAddress.Street, ';', 1, strLen(postalAddress.Street)))
                    {
                        address = SKS_EFT_Processing::addressSplit(postalAddress.Street);
                        addressStrtNm = conpeek(address,1);
                        addressBldgNb = conpeek(address,2);
                    }
                    else
                    {
                        addressStrtNm = postalAddress.Street;
                    }

                    sks_eft_fileCustAddress.CustAddr = SKS_PP_StringFormats::strRemoveCRLF(addressStrtNm);
                    sks_eft_fileCustAddress.CustAddr2 = SKS_PP_StringFormats::strRemoveCRLF(addressBldgNb);
                    sks_eft_fileCustAddress.CustCity = postalAddress.City;
                    sks_eft_fileCustAddress.CustCountryRegionId = postalAddress.CountryRegionId;
                    sks_eft_fileCustAddress.CustState = postalAddress.State;
                    sks_eft_fileCustAddress.CustZipPostal = postalAddress.ZipCode;
                }

                postalAddress= null;
                if(_ledgerJournalTrans.RecId)
                {
                    changecompany(_ledgerJournalTrans.OffsetCompany)
                    {
                        bankAccountTable = null;
                        bankAccountTable = BankAccountTable::findByLedgerDimension(_ledgerJournalTrans.OffsetLedgerDimension);
                    }
                }
                else    //SKS_VSTS_12937--->
                {
                    changecompany(_ledgerJournalTrans.OffsetCompany)
                    {
                        bankAccountTable = null;
                        bankAccountTable = BankAccountTable::findByLedgerDimension(_ledgerJournalTrans.OffsetLedgerDimension);
                    }
                }
                //SKS_VSTS_12937<---

                select firstonly State, ZipCode, Location,City, CountryRegionId from logisticsPostalAddressBank
                    where logisticsPostalAddressBank.Location == bankAccountTable.Location;
                if(strScan(logisticsPostalAddressBank.Street, ';', 1, strLen(logisticsPostalAddressBank.Street)))
                {
                    address = SKS_EFT_Processing::addressSplit(logisticsPostalAddressBank.Street);
                    addressStrtNm = conpeek(address,1);
                    addressBldgNb = conpeek(address,2);
                }
                else
                {
                    addressStrtNm = logisticsPostalAddressBank.Street;
                }

                sks_eft_fileBankAccount.Addr = SKS_PP_StringFormats::strRemoveCRLF(addressStrtNm);
                sks_eft_fileBankAccount.Addr2 = SKS_PP_StringFormats::strRemoveCRLF(addressBldgNb);
                sks_eft_fileBankAccount.City = logisticsPostalAddressBank.City;
                sks_eft_fileBankAccount.CountryRegionId = logisticsPostalAddressBank.CountryRegionId;
                sks_eft_fileBankAccount.State = logisticsPostalAddressBank.State;
                sks_eft_fileBankAccount.ZipPostal = logisticsPostalAddressBank.ZipCode;
                sks_eft_fileBankAccount.Street = SKS_PP_StringFormats::strRemoveCRLF(logisticsPostalAddressBank.Street);

                //SKS_Bug_11976 <--
                changecompany(_ledgerJournalTrans.Company)
                {
                    bankAccountTableAccount = null;
                    bankAccountTableAccount = BankAccountTable::findByLedgerDimension(_ledgerJournalTrans.LedgerDimension);
                }

                
                select firstonly State, ZipCode, Location,City, CountryRegionId from lLogisticsPostalAddress where lLogisticsPostalAddress.Location == bankAccountTableAccount.Location;

                //file detail customer bank address
                sks_eft_fileCustBankAddress.Phone = bankAccountTableAccount.Phone;
                sks_eft_fileCustBankAddress.PhoneLocal = bankAccountTableAccount.PhoneLocal;
                sks_eft_fileCustBankAddress.AccountId = bankAccountTableAccount.AccountID;
                sks_eft_fileCustBankAddress.Name = bankAccountTableAccount.Name;
                sks_eft_fileCustBankAddress.City = lLogisticsPostalAddress.City;
                sks_eft_fileCustBankAddress.CountryRegionId = lLogisticsPostalAddress.CountryRegionId;
                sks_eft_fileCustBankAddress.State = lLogisticsPostalAddress.State;
                sks_eft_fileCustBankAddress.ZipCode = lLogisticsPostalAddress.ZipCode;
                sks_eft_fileCustBankAddress.Location = lLogisticsPostalAddress.Location;
                if(strScan(lLogisticsPostalAddress.Street, ';', 1, strLen(lLogisticsPostalAddress.Street)))
                {
                    address = SKS_EFT_Processing::addressSplit(lLogisticsPostalAddress.Street);
                    addressStrtNm = conpeek(address,1);
                    addressBldgNb = conpeek(address,2);
                }
                else
                {
                    addressStrtNm = lLogisticsPostalAddress.Street;
                }
                sks_eft_fileCustBankAddress.Addr = SKS_PP_StringFormats::strRemoveCRLF(addressStrtNm);
                sks_eft_fileCustBankAddress.Addr2 = SKS_PP_StringFormats::strRemoveCRLF(addressBldgNb);
                sks_eft_fileCustBankAddress.RefRecId =  _sks_eft_FileDetail.RecId;
                sks_eft_fileCustBankAddress.AddressType = SKS_EFT_AddressType::CustBankAddress;//SKS_FDD_10590
                sks_eft_fileCustBankAddress.insert();

                sks_eft_fileCustAddress.RefRecId = _sks_eft_FileDetail.RecId;
                sks_eft_fileCustAddress.insert();

            }
        }

        sks_eft_fileBankAccount.RefRecId = _sks_eft_FileDetail.recid;
        sks_eft_fileBankAccount.insert();

        //file detail payment line
        if(_ledgerJournalTrans.BankCentralBankPurposeCode || _ledgerJournalTrans.Txt)
        {
            sks_eft_filePaymentLine.BankCentralBankPurposeCode = _ledgerJournalTrans.BankCentralBankPurposeCode;
            sks_eft_filePaymentLine.BankCentralBankPurposeText = _ledgerJournalTrans.BankCentralBankPurposeText;
            sks_eft_filePaymentLine.BankCentralBankPurposeName = BankCentralBankPurpose::find(_ledgerJournalTrans.BankCentralBankPurposeCode).Name;
            sks_eft_filePaymentLine.TransactionTxt = strReplace(_ledgerJournalTrans.Txt, '\r', ' ');
            sks_eft_filePaymentLine.RefRecId = _sks_eft_FileDetail.RecId;
            sks_eft_filePaymentLine.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>CreateVchBTBFileDetail</Name>
				<Source><![CDATA[
    public str CreateVchBTBFileDetail(SKS_EFT_FilePmtSelection sks_eft_FilePmtSelection, LedgerJournalTrans ledgerJournalTrans, 
        boolean _calledFromAP = false, SKS_EFTAP_File _sks_eftap_file = null) //Bug-11967
    {
        SKS_EFT_FileDetail sks_eft_FileDetail;

        LedgerJournalAC accountNum;
        Classid locClassid;

        CompanyInfo         companyInfo;
        BankAccountTable        bankAccountTable; //Bug-11967
        ;

        sks_eft_IsPaymentUpload = ledgerJournalTrans.SKS_EFT_IsPaymentUpload;

        if(!msks_eftap_file)
        {
            select msks_eftap_file
                where msks_eftap_file.RecId == sks_eft_FilePmtSelection.FileRecId
                join msks_eft_FileFormat
                where msks_eft_FileFormat.FormatId == msks_eftap_file.FormatId;
        }

        accountNum = SKS_EFT_Common::getAccountNum(ledgerJournalTrans.LedgerDimension);

        // Create file detail record
        sks_eft_FileDetail = null;
        if(_calledFromAP) //Bug-11967 --->
        {
            sks_eft_FileDetail.RecordType = SKS_EFT_RecordType::FieldValidations;
            sks_eft_FileDetail.FileRecId = _sks_eftap_file.RecId;
            sks_eft_FileDetail.PaymentJournalNum = ledgerJournalTrans.JournalNum;
            sks_eft_FileDetail.PaymMode = ledgerJournalTrans.PaymMode;
        }
        else //<--- Bug-11967
        {
            sks_eft_FileDetail.RecordType = SKS_EFT_RecordType::Invoice;
            sks_eft_FileDetail.FileRecId = sks_eft_FilePmtSelection.FileRecId;
            sks_eft_FileDetail.PmtSelectionRecId = sks_eft_FilePmtSelection.RecId;
            sks_eft_FileDetail.PaymentJournalNum = sks_eft_filepmtselection.PmtJournalNum;
            sks_eft_FileDetail.PaymMode = sks_eft_filepmtselection.PaymMode;
        }
        sks_eft_FileDetail.PaymentRejected = NoYes::No;

        sks_eft_FileDetail.AccountNum = accountNum;
        sks_eft_FileDetail.AccountType = ledgerJournalTrans.AccountType;
        sks_eft_FileDetail.AccountCompany = ledgerJournalTrans.Company;
        sks_eft_FileDetail.LedgerTrans_PaymId = ledgerJournalTrans.PaymId;//SKS_FDD_10590
        sks_eft_FileDetail.EFTAP_IHBBankAccount = ledgerJournalTrans.SKS_EFTAP_IHBBankAccount; // SKS 9615

        // For FXAll always use the payment journal transaction date
        if(sks_eft_FileDetail.RecordType != SKS_EFT_RecordType::FieldValidations) //Bug-11967
        {
            if(msks_eft_FileFormat.EffectiveDateMethod != SKS_EFT_EffectiveDateMethod::FormatOffset)
            {
                sks_eft_FileDetail.EffectiveDate = ledgerJournalTrans.TransDate;
            }
            else
            {
                sks_eft_FileDetail.EffectiveDate = msks_eftap_file.EffectiveDate;
            }
        }

        if(LedgerJournalTrans.AmountCurCredit != 0)
        {
            sks_eft_FileDetail.InvoiceSettleAmountPmtCur = LedgerJournalTrans.AmountCurCredit;
        }
        else
        {
            sks_eft_FileDetail.InvoiceSettleAmountPmtCur = LedgerJournalTrans.AmountCurDebit * -1;
        }

        sks_eft_FileDetail.InvoiceSettleAmountCur =  sks_eft_FileDetail.InvoiceSettleAmountPmtCur;
        sks_eft_FileDetail.InvoiceOrigAmountCur =  sks_eft_FileDetail.InvoiceSettleAmountPmtCur;
        sks_eft_FileDetail.InvoiceCurrencyCode = strUpr(LedgerJournalTrans.currencyCode);


        sks_eft_FileDetail.PaymentCurrencyCode = strUpr(LedgerJournalTrans.currencyCode);
        sks_eft_FileDetail.PaymentTransDate = LedgerJournalTrans.TransDate;
        sks_eft_FileDetail.PaymentVoucher = LedgerJournalTrans.Voucher;
        sks_eft_FileDetail.PaymSpec = LedgerJournalTrans.PaymSpec;
        //SKS_FDD_10590 -->
        sks_eft_FileDetail.DocumentNum = LedgerJournalTrans.DocumentNum;
        //SKS_FDD_10590 <--
        select  Rfc_MX from companyInfo where companyInfo.DataArea == sks_eft_FileDetail.InvoiceCompany ;
        sks_eft_FileDetail.Rfc_MX= companyInfo.Rfc_MX;

        sks_eft_FileDetail.PaymentLineRecId = LedgerJournalTrans.RecId;
        sks_eft_FileDetail.PaymentCompany = ledgerJournalTrans.company(); //FDD-10590

        locClassid = classIdGet(this);
        if(sks_eft_FileDetail.RecordType != SKS_EFT_RecordType::FieldValidations) //Bug-11967
        {
            sks_eft_FileDetail.RecordSection = SKS_EFT_RecordSection::Payments;
        }
        else //Bug-11967 --->
        {
            sks_eft_FileDetail.RecordSection = SKS_EFT_RecordSection::EFTValidate;
        }
        //<--- Bug-11967
        sks_eft_FileDetail.RecordSummary = SKS_EFT_RecordSummary::Invoice;

        if(sks_eft_FileDetail.RecordType != SKS_EFT_RecordType::FieldValidations) //Bug-11967
        {
            this.GetEFTFileFormat(ledgerJournalTrans.PaymMode, SKS_EFT_Module::BTB);
            sks_eft_FileDetail.FormatId = msks_eft_FileFormat.FormatId;
        }
        else //Bug-11967 --->
        {
            sks_eft_FileDetail.FormatId = SKS_BTB_PaymModeTable::find(ledgerJournalTrans.paymMode).FormatId;
        }
        //<--- Bug-11967

        sks_eft_FileDetail.FileStatus = SKS_EFT_FileStatus::FileCreated;
        sks_eft_FileDetail.Module = SKS_EFT_Module::BTB;

        // Set Bank fields
        changecompany(ledgerJournalTrans.DataAreaId)
        {
            bankAccountTable = null;
            bankAccountTable = BankAccountTable::findByLedgerDimension(ledgerJournalTrans.OffsetLedgerDimension);
        }

        if(sks_eft_FileDetail.RecordType != SKS_EFT_RecordType::FieldValidations) //Bug-11967
        {
            this.GetBTBBank(sks_eft_filepmtselection.PmtBankAccountId, sks_eft_filepmtselection.PaymMode, sks_eft_filepmtselection.company()); //FDD-10590
        }
        else
        {
            this.GetBTBBank(bankAccountTable.AccountID, ledgerJournalTrans.PaymMode, ledgerJournalTrans.DataAreaId);
        }

        SKS_EFT_Processing::BTBBuildBankFields(sks_eft_FileDetail, msks_eftbtb_bank, ledgerJournalTrans.DataAreaId, bankAccountTable);

        sks_eft_FileDetail.DepBankAccountId = LedgerJournalTrans.CustVendBankAccountId;
        SKS_EFT_Processing::BTBBuildBankAccountFields(sks_eft_FileDetail, ledgerJournalTrans);

        sks_eft_FileDetail.insert();

        if((SKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::EFTValidate && SKS_EFT_FileDetail.DepRecord == SKS_EFT_VendorRecordSummary::Invoice)
            || SKS_EFT_FileDetail.RecordSection != SKS_EFT_RecordSection::EFTValidate)
        {
            SKS_EFT_Processing::BuildBTBUploadBankFields(SKS_EFT_FileDetail, ledgerJournalTrans);
            SKS_EFT_Processing::BuildBTBMultiCompFields(SKS_EFT_FileDetail,ledgerJournalTrans);  //FDD-10590
        }
        return '';

    }

]]></Source>
			</Method>
			<Method>
				<Name>BTBBuildBankAccountFields</Name>
				<Source><![CDATA[
    public static server void BTBBuildBankAccountFields(SKS_EFT_FileDetail _sks_eft_FileDetail, LedgerJournalTrans _ledgerJournalTrans = null) //SKS_FDD_10590
    {
        BankAccountTable bankaccounttable;
        SKS_EFT_BanktoBankPaym sks_eft_banktobankpaym;
        //VendBankAccount vendBankAccount;
        //9785 SKS pmt upd
        //SKS_UPLD_PMT                sks_upld_pmt;
        SKS_EFT_FileFormatPaymSpec  sks_eft_fileformatpaymspec;

        CompanyInfo         companyInfo; //FDD-10590

        sks_eft_banktobankpaym = SKS_EFT_BanktoBankPaym::find(_sks_eft_FileDetail.AccountCompany, _sks_eft_FileDetail.AccountNum, _sks_eft_FileDetail.PaymMode, _sks_eft_FileDetail.PaymSpec);
        
        bankaccounttable = BankAccountTable::findByCompany(_sks_eft_FileDetail.AccountCompany, _sks_eft_FileDetail.AccountNum);
        //vendBankAccount = VendBankAccount::findByCompany(_sks_eft_FileDetail.AccountCompany, _sks_eft_FileDetail.AccountNum, _sks_eft_FileDetail.DepBankAccountId);

        sks_eft_FileFormatPaymSpec = SKS_EFT_FileFormatPaymSpec::findByCompany(_sks_eft_FileDetail.PaymentCompany ? _sks_eft_FileDetail.PaymentCompany : _sks_eft_FileDetail.DataAreaId,
                                                                               _sks_eft_FileDetail.FormatId, _sks_eft_FileDetail.PaymSpec);

        if(_sks_eft_FileDetail.RecordType != SKS_EFT_RecordType::FieldValidations) //Bug-11967
        {
            _sks_eft_FileDetail.DepRecord = SKS_EFT_VendorRecordSummary::Payment;
        }
        else
        {
            _sks_eft_FileDetail.DepRecord = SKS_EFT_VendorRecordSummary::Invoice;
        }

        // Vendor bank account
        //_sks_eft_FileDetail.DepBankAcctType = bankaccounttable.acc;
        _sks_eft_FileDetail.DepBankAcct = bankaccounttable.AccountNum;
        _sks_eft_FileDetail.DepBankCodeType = bankaccounttable.BankCodeType;
        _sks_eft_FileDetail.DepBankIBAN = bankaccounttable.IBAN;
        _sks_eft_FileDetail.DepSwiftNo = bankaccounttable.SWIFTNo;
        _sks_eft_FileDetail.DepBankTransit = bankaccounttable.RegistrationNum;
        _sks_eft_FileDetail.DepBankCurrency = bankaccounttable.CurrencyCode; // FDD_10590

        // Vendor
        _sks_eft_FileDetail.AccountName = bankaccounttable.Name;

        //FDD-10590 --->

        select Tax1099RegNum, CoRegNum, Rfc_MX, VATNum from companyInfo where companyInfo.DataArea == _sks_eft_FileDetail.PaymentCompany ;
        _sks_eft_FileDetail.Tax1099RegNum = companyInfo.Tax1099RegNum;
        _sks_eft_FileDetail.CoRegNum = companyInfo.CoRegNum;
        _sks_eft_FileDetail.CompanyRfc_MX = companyInfo.Rfc_MX;
        _sks_eft_FileDetail.PaymSpecName = sks_eft_FileFormatPaymSpec.PaymSpecName;
        _sks_eft_FileDetail.TransactionCode = sks_eft_FileFormatPaymSpec.TransactionCode;
        _sks_eft_FileDetail.VATNum = companyInfo.VATNum;
        //_sks_eft_FileDetail.UseCheckNumber = sks_eft_FileFormatPaymSpec.UseCheckNumber;
        // <--- FDD-10590
    }

]]></Source>
			</Method>
			<Method>
				<Name>BTBBuildBankFields</Name>
				<Source><![CDATA[
    public static server void BTBBuildBankFields(SKS_EFT_FileDetail _sks_eft_FileDetail, SKS_EFTBTB_Bank _sks_eftbtb_bank,
        DataAreaId _pmtCompany = curExt(), BankAccountTable _bankAccountTable = null) // FDD-10590
    {
        // SKS_EFT_Bank fields
        _sks_eft_FileDetail.BankAcctType = _sks_eftbtb_bank.AcctType;
        _sks_eft_FileDetail.BankOrigDFI = _sks_eftbtb_bank.ACHOrigDFI;

        _sks_eft_FileDetail.FileACHImmDest = _sks_eftbtb_bank.ACHImmDest;
        _sks_eft_FileDetail.FileACHImmDestName = _sks_eftbtb_bank.ACHImmDestName;
        _sks_eft_FileDetail.FileACHImmOrigin = _sks_eftbtb_bank.ACHImmOrig;
        _sks_eft_FileDetail.FileACHImmOriginName = _sks_eftbtb_bank.ACHImmOrigName;
        _sks_eft_FileDetail.FileCrLf = _sks_eftbtb_bank.FileCrLf;

        if(_sks_eftbtb_bank.CompanyIDUnique)
        {
            switch(_sks_eft_FileDetail.PaymSpec)
            {
                case 'CCD':
                case 'CCD+':
                case 'ACH-CCD':
                case 'ACH-CCD+':
                    _sks_eft_FileDetail.FileACHCompanyId = _sks_eftbtb_bank.CompanyIDCCD;
                    _sks_eft_FileDetail.FileACHCompanyName = _sks_eftbtb_bank.CompanyNameCCD;
                    break;
                case 'IAT':
                case 'ACH-IAT':
                    _sks_eft_FileDetail.FileACHCompanyId = _sks_eftbtb_bank.CompanyIDIAT;
                    _sks_eft_FileDetail.FileACHCompanyName = _sks_eftbtb_bank.CompanyNameIAT;
                    break;
                case 'PPD':
                case 'PPD+':
                case 'ACH-PPD':
                case 'ACH-PPD+':
                    _sks_eft_FileDetail.FileACHCompanyId = _sks_eftbtb_bank.CompanyIDPPD;
                    _sks_eft_FileDetail.FileACHCompanyName = _sks_eftbtb_bank.CompanyNamePPD;
                    break;
                case 'CTX':
                case 'ACH-CTX':
                    _sks_eft_FileDetail.FileACHCompanyId = _sks_eftbtb_bank.CompanyIDCTX;
                    _sks_eft_FileDetail.FileACHCompanyName = _sks_eftbtb_bank.CompanyNameCTX;
                    break;
                default:
                    _sks_eft_FileDetail.FileACHCompanyId = _sks_eftbtb_bank.ACHCompanyID;
                    _sks_eft_FileDetail.FileACHCompanyName = _sks_eftbtb_bank.ACHCompanyName;
            }
        }

        // If id or name were not set above, set them to the non-unique values
        if(_sks_eft_FileDetail.FileACHCompanyId == '')
        {
            _sks_eft_FileDetail.FileACHCompanyId = _sks_eftbtb_bank.ACHCompanyID;
        }
        if(_sks_eft_FileDetail.FileACHCompanyName == '')
        {
            _sks_eft_FileDetail.FileACHCompanyName = _sks_eftbtb_bank.ACHCompanyName;
        }

        // BankAccountTable fields
        _sks_eft_FileDetail.BankBankAcct = _bankAccountTable.AccountNum;
        _sks_eft_FileDetail.BankAccountId = _bankAccountTable.AccountID;
        _sks_eft_FileDetail.BankBankTransit = _bankAccountTable.RegistrationNum;
        // SKS_FDD_10590 -->
        _sks_eft_FileDetail.BankBankCodeType = _bankAccountTable.BankCodeType;
        _sks_eft_FileDetail.BankBankIBAN = _bankAccountTable.IBAN;
        _sks_eft_FileDetail.BankBankSwiftNo = _bankAccountTable.SWIFTNo;
        _sks_eft_FileDetail.BankBankSortCode = _bankAccountTable.BankSortCode;
        // SKS_FDD_10590 <--
        //FDD-10590 --->
        _sks_eft_FileDetail.CurrencyCode = _bankAccountTable.CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>CreateCNPInvcFileDetail</Name>
				<Source><![CDATA[
    public str CreateCNPInvcFileDetail(SKS_EFT_FilePmtSelection sks_eft_FilePmtSelection,
        LedgerJournalTrans ledgerJournalTrans, SpecTrans specTrans, boolean _calledFromCNPValidation = false, SKS_EFTAP_File _sks_eftap_file = null) //SKS_Bug_11967
    {
        container virtualCompanyCompanies;
        CustTransOpen custTransOpen;
        CustTrans custTrans;
        SKS_EFT_FileDetail sks_eft_FileDetail;
        CustTable custTable;
        SKS_EFT_CustReimbursementPaym sks_eft_custreimbpaym;
        CustBankAccount custBankAccount;
        BankAccountTable bankAccountTable;
        LedgerJournalAC accountNum;

        //FDD-10590 --->
        SKS_EFT_FileFormatPaymSpec          sks_eft_fileformatpaymspec;
        CompanyInfo                         companyInfo;
        //FDD-10590 --->

        virtualCompanyCompanies = CustVendOpenTransManager::findSharedServiceCompanies(curExt());


        if (specTrans.RefCompany != '' && specTrans.RefRecId != 0)
        {
            virtualCompanyCompanies = [specTrans.RefCompany];

            select firstOnly crosscompany:virtualCompanyCompanies custTransOpen
            where
                custTransOpen.RecId == specTrans.RefRecId
            join AmountCur, TransDate, CurrencyCode, DocumentDate, ExchRate, Invoice, Voucher, Txt, PaymId, RecId from custTrans
            where
                custTrans.RecId == custTransOpen.RefRecId;

            if(!custTransOpen)
            {
                warning(strFmt("@SKS:SKGVoucherInvoiceNotFound", ledgerJournalTrans.Voucher));
                return '';
            }
        }

        accountNum = SKS_EFT_Common::getAccountNum(ledgerJournalTrans.LedgerDimension);
        // Create file detail record
        sks_eft_FileDetail = null;
        //SKS_Bug_11967 -->
        if(_calledFromCNPValidation)
        {
            changecompany(ledgerJournalTrans.DataAreaId)
            {
                bankAccountTable = null;
                bankAccountTable = BankAccountTable::findByLedgerDimension(ledgerJournalTrans.OffsetLedgerDimension);
            }
            sks_eft_FileDetail.FileRecId = _sks_eftap_file.RecId;
            sks_eft_FileDetail.BankAccountId = bankAccountTable.AccountID;
            sks_eft_FileDetail.PaymentJournalNum = ledgerJournalTrans.JournalNum;
            sks_eft_FileDetail.PaymMode = ledgerJournalTrans.PaymMode;
            sks_eft_FileDetail.RecordType = SKS_EFT_RecordType::FieldValidations;
            sks_eft_FileDetail.RecordSection = SKS_EFT_RecordSection::EFTValidate;
            sks_eft_FileDetail.RecordSummary = SKS_EFT_RecordSummary::Invoice;
        }
        //SKS_Bug_11967 <--
        else
        {
            if(!msks_eftap_file)
            {
                select msks_eftap_file where msks_eftap_file.RecId == sks_eft_FilePmtSelection.FileRecId;
            }
            sks_eft_FileDetail.FileRecId = sks_eft_FilePmtSelection.FileRecId;
            sks_eft_FileDetail.BankAccountId = sks_eft_filepmtselection.PmtBankAccountId;
            sks_eft_FileDetail.PaymentJournalNum = sks_eft_filepmtselection.PmtJournalNum;
            sks_eft_FileDetail.PaymMode = sks_eft_filepmtselection.PaymMode;
            sks_eft_FileDetail.RecordType = SKS_EFT_RecordType::Invoice;
            sks_eft_FileDetail.RecordSection = SKS_EFT_RecordSection::Payments;
            sks_eft_FileDetail.RecordSummary = SKS_EFT_RecordSummary::Invoice;
            sks_eft_FileDetail.PmtSelectionRecId = sks_eft_FilePmtSelection.RecId;
        }
        sks_eft_FileDetail.PaymentRejected = NoYes::No;

        sks_eft_FileDetail.AccountNum = accountNum;
        sks_eft_FileDetail.AccountType = ledgerJournalTrans.AccountType;
        sks_eft_FileDetail.AccountCompany = ledgerJournalTrans.Company;

        //sks_eft_FileDetail.EffectiveDate = msks_eftap_file.EffectiveDate;
        //sks_eft_FileDetail.EFTAP_IHBBankAccount = ledgerJournalTrans.SKS_EFTAP_IHBBankAccount; // SKS 9615

        if(sks_eft_FileDetail.RecordType != SKS_EFT_RecordType::FieldValidations) //Bug-20976
        {
            if(msks_eft_FileFormat.EffectiveDateMethod == SKS_EFT_EffectiveDateMethod::PaymentJournalPostingDate)
            {
                sks_eft_FileDetail.EffectiveDate = ledgerJournalTrans.TransDate;
            }
            else if(msks_eft_FileFormat.EffectiveDateMethod == SKS_EFT_EffectiveDateMethod::FormatOffset)
            {
                sks_eft_FileDetail.EffectiveDate = msks_eftap_file.EffectiveDate;
            }
            else if(msks_eft_FileFormat.EffectiveDateMethod == SKS_EFT_EffectiveDateMethod::PaymSpecOffset && msks_eft_FileFormat.SupportsMultipleEffectiveDates == NoYes::No)
            {
                sks_eft_FileDetail.EffectiveDate = msks_eftap_file.EffectiveDate;
            }
            else
            {
                sks_eft_FileDetail.EffectiveDate = sks_eft_filepmtselection.EffectiveDate;
            }
        }

        if(custTransOpen) // Invoice is marked to settle
        {
            if(mlastLedgerJournalTranRecId != ledgerJournalTrans.RecId)
            {
                mManager = null;
                mManager = SKS_EB_CustVendOpenTransManager::construct(ledgerJournalTrans);
                mlastLedgerJournalTranRecId = ledgerJournalTrans.RecId;
            }
            sks_eft_FileDetail.InvoiceCompany = specTrans.RefCompany;
            sks_eft_FileDetail.InvoiceOrigAmountCur = custTrans.AmountCur;
            sks_eft_FileDetail.InvoiceSettleAmountPmtCur = mManager.getSettleAmountPaymCur(custTransOpen);
            sks_eft_FileDetail.InvoiceDiscAmountCur = mManager.getCashDiscAmountToTake(custTransOpen);
            sks_eft_FileDetail.InvoiceDiscAmountPmtCur = mManager.getCashDiscAmountToTakePaymCur(custTransOpen);
            sks_eft_FileDetail.InvoiceSettleAmountCur = mManager.getSettleAmount(custTransOpen);
            sks_eft_FileDetail.PaymId = custTrans.PaymId;//SKS_Bug_11967
            if(!custTrans.DocumentDate)
            {
                sks_eft_FileDetail.InvoiceDate = custTrans.TransDate;
            }
            else
            {
                sks_eft_FileDetail.InvoiceDate = custTrans.DocumentDate;
            }

            sks_eft_FileDetail.InvoiceCurrencyCode = strUpr(custTrans.CurrencyCode);
            sks_eft_FileDetail.InvoiceExchRate = custTrans.ExchRate;
            sks_eft_FileDetail.InvoiceNumber = custTrans.Invoice;
            sks_eft_FileDetail.InvoiceVoucherNumber = custTrans.Voucher;
            sks_eft_FileDetail.InvoiceTransactionTxt = custTrans.Txt;
            sks_eft_FileDetail.VendTransRecId = custTrans.RecId;
        }
        else // No invoice marked on payment journal line
        {
            if(LedgerJournalTrans.AmountCurCredit != 0)
            {
                sks_eft_FileDetail.InvoiceSettleAmountPmtCur = LedgerJournalTrans.AmountCurCredit;
            }
            else
            {
                sks_eft_FileDetail.InvoiceSettleAmountPmtCur = LedgerJournalTrans.AmountCurDebit * -1;
            }
            sks_eft_FileDetail.InvoiceSettleAmountCur =  sks_eft_FileDetail.InvoiceSettleAmountPmtCur;
            sks_eft_FileDetail.InvoiceOrigAmountCur =  sks_eft_FileDetail.InvoiceSettleAmountPmtCur;
            sks_eft_FileDetail.InvoiceCurrencyCode = strUpr(LedgerJournalTrans.currencyCode);
        }

        sks_eft_FileDetail.PaymentCurrencyCode = strUpr(LedgerJournalTrans.currencyCode);
        sks_eft_FileDetail.PaymentTransDate = LedgerJournalTrans.TransDate;
        sks_eft_FileDetail.PaymentVoucher = LedgerJournalTrans.Voucher;
        sks_eft_FileDetail.PaymentLineRecId = LedgerJournalTrans.RecId;
        sks_eft_FileDetail.PaymentCompany = ledgerJournalTrans.company(); //FDD-10590
        sks_eft_FileDetail.DocumentNum = LedgerJournalTrans.DocumentNum; // SKS_FDD_10590
        sks_eft_FileDetail.PaymentNotes = LedgerJournalTrans.PaymentNotes;

        this.GetEFTFileFormat(ledgerJournalTrans.PaymMode, SKS_EFT_Module::CNP);
        sks_eft_FileDetail.FormatId = msks_eft_FileFormat.FormatId;

        sks_eft_FileDetail.FileStatus = SKS_EFT_FileStatus::FileCreated;

        if(_calledFromCNPValidation)
        {
            if(msks_eftcnp_bank.BankAccountId != bankAccountTable.AccountID ||
            msks_eftcnp_bank.PaymMode != ledgerJournalTrans.PaymMode)
            {
                this.GetCNPBank(bankAccountTable.AccountID, ledgerJournalTrans.PaymMode);
            }
        }
        else
        {
            // SKS_EFT_ARBank fields
            if(msks_eftcnp_bank.BankAccountId != sks_eft_filepmtselection.PmtBankAccountId ||
            msks_eftcnp_bank.PaymMode != sks_eft_filepmtselection.PaymMode)
            {
                this.GetCNPBank(sks_eft_filepmtselection.PmtBankAccountId, sks_eft_filepmtselection.PaymMode);
            }
        }

        sks_eft_FileDetail.BankAcctType = msks_eftcnp_bank.AcctType;
        sks_eft_FileDetail.BankOrigDFI = msks_eftcnp_bank.ACHOrigDFI;

        sks_eft_FileDetail.FileACHImmDest = msks_eftcnp_bank.ACHImmDest;
        sks_eft_FileDetail.FileACHImmDestName = msks_eftcnp_bank.ACHImmDestName;
        sks_eft_FileDetail.FileACHImmOrigin = msks_eftcnp_bank.ACHImmOrig;
        sks_eft_FileDetail.FileACHImmOriginName = msks_eftcnp_bank.ACHImmOrigName;
        sks_eft_FileDetail.FileCrLf = msks_eftcnp_bank.FileCrLf;

        if(msks_eftcnp_bank.CompanyIDUnique)
        {
            switch(LedgerJournalTrans.PaymSpec)
            {
                case 'CCD':
                case 'CCD+':
                case 'ACH-CCD':
                case 'ACH-CCD+':
                    sks_eft_FileDetail.FileACHCompanyId = msks_eftcnp_bank.CompanyIDCCD;
                    sks_eft_FileDetail.FileACHCompanyName = msks_eftcnp_bank.CompanyNameCCD;
                    break;
                case 'PPD':
                case 'PPD+':
                case 'ACH-PPD':
                case 'ACH-PPD+':
                    sks_eft_FileDetail.FileACHCompanyId = msks_eftcnp_bank.CompanyIDPPD;
                    sks_eft_FileDetail.FileACHCompanyName = msks_eftcnp_bank.CompanyNamePPD;
                    break;
                default:
                    sks_eft_FileDetail.FileACHCompanyId = msks_eftcnp_bank.ACHCompanyID;//SKS_VSTS_14305
                    sks_eft_FileDetail.FileACHCompanyName = msks_eftcnp_bank.ACHCompanyName;//SKS_VSTS_14305
            }
        }
        else
        {
            sks_eft_FileDetail.FileACHCompanyId = msks_eftcnp_bank.ACHCompanyID;
            sks_eft_FileDetail.FileACHCompanyName = msks_eftcnp_bank.ACHCompanyName;
        }
        if(!_calledFromCNPValidation)
        {
            // BankAccountTable fields
            if(bankAccountTable.AccountID != sks_eft_filepmtselection.PmtBankAccountId)
            {
                bankAccountTable = BankAccountTable::findbycompany(sks_eft_filepmtselection.company(),sks_eft_filepmtselection.PmtBankAccountId);
            }
        }
        sks_eft_FileDetail.BankBankAcct = bankAccountTable.AccountNum;
        sks_eft_FileDetail.BankBankTransit = bankAccountTable.RegistrationNum;
        // SKS_FDD_10590 -->
        sks_eft_FileDetail.BankBankCodeType = bankAccountTable.BankCodeType;
        sks_eft_FileDetail.BankBankIBAN = bankAccountTable.IBAN;
        sks_eft_FileDetail.BankBankSwiftNo = bankAccountTable.SWIFTNo;
        sks_eft_FileDetail.BankBankSortCode = bankAccountTable.BankSortCode;
        // SKS_FDD_10590 <--
        sks_eft_FileDetail.CurrencyCode = bankAccountTable.CurrencyCode; //FDD-10590

        // Customer payment
        if(sks_eft_custreimbpaym.CustCompany!= ledgerJournalTrans.Company ||
            sks_eft_custreimbpaym.CustAccount != accountNum ||
            sks_eft_custreimbpaym.PaymMode != ledgerJournalTrans.PaymMode ||
            sks_eft_custreimbpaym.PaymSpec != ledgerJournalTrans.PaymSpec ||
            sks_eft_custreimbpaym.CustBankAccountId != ledgerJournalTrans.CustVendBankAccountId)
        {
            //sks_eft_customerpaym = SKS_EFT_CustomerPaym::find(ledgerJournalTrans.Company, accountNum, ledgerJournalTrans.PaymMode, ledgerJournalTrans.PaymSpec, ledgerJournalTrans.CustVendBankAccountId);
            sks_eft_custreimbpaym = SKS_EFT_CustReimbursementPaym::find(ledgerJournalTrans.Company,
                                                            accountNum,
                                                            ledgerJournalTrans.PaymMode,
                                                            ledgerJournalTrans.PaymSpec,
                                                            ledgerJournalTrans.CustVendBankAccountId);
            if(!sks_eft_custreimbpaym)
            {
                return strFmt("@SKS1855",
                            accountNum, ledgerJournalTrans.Company, ledgerJournalTrans.PaymMode, ledgerJournalTrans.PaymSpec, ledgerJournalTrans.CustVendBankAccountId);
            }
            custTable = CustTable::findByCompany(ledgerJournalTrans.Company, accountNum);
            custBankAccount = CustBankAccount::findByCompany(ledgerJournalTrans.Company, accountNum, ledgerJournalTrans.CustVendBankAccountId);
        }

        sks_eft_FileDetail.PaymSpec = LedgerJournalTrans.PaymSpec;
        sks_eft_FileFormatPaymSpec = SKS_EFT_FileFormatPaymSpec::findByCompany(sks_eft_FileDetail.PaymentCompany ? sks_eft_FileDetail.PaymentCompany : sks_eft_FileDetail.DataAreaId,
                                                                               sks_eft_FileDetail.FormatId, sks_eft_FileDetail.PaymSpec);//SKS_FDD_10590


        if(sks_eft_fileformatpaymspec.RecordSummary == SKS_EFT_PaymSpecRecordSummary::Payment )
        {
            sks_eft_FileDetail.DepRecord = SKS_EFT_VendorRecordSummary::Payment;
        }
        else if(sks_eft_fileformatpaymspec.RecordSummary == SKS_EFT_PaymSpecRecordSummary::Invoice)
        {
            sks_eft_FileDetail.DepRecord = SKS_EFT_VendorRecordSummary::Invoice;
        }
        else
        {
            sks_eft_FileDetail.DepRecord = sks_eft_custreimbpaym.RecordSummary;
        }

        if(sks_eft_FileDetail.DepRecord == SKS_EFT_VendorRecordSummary::Invoice &&
            sks_eft_FileDetail.InvoiceSettleAmountPmtCur > 0 &&
            LedgerJournalTrans.PaymSpec == 'CCD+') //&&
        // sks_eft_customerpaym.ConvertCCDPtoCCD)
        {
            sks_eft_FileDetail.PaymSpec = 'CCD';
            sks_eft_FileDetail.DepRecord = SKS_EFT_VendorRecordSummary::Payment;
        }

        // sks_eft_FileDetail.DepEDIVersion = sks_eft_customerpaym.EDIVersion;
        // Vendor bank account
        sks_eft_FileDetail.DepBankAccountId = custBankAccount.AccountID;
        sks_eft_FileDetail.DepBankAcctType = custBankAccount.BankAccountType;
        sks_eft_FileDetail.DepBankAcct = custBankAccount.AccountNum;
        sks_eft_FileDetail.DepBankCodeType = custBankAccount.BankCodeType;
        sks_eft_FileDetail.DepBankIBAN = custBankAccount.BankIBAN;
        sks_eft_FileDetail.DepSwiftNo = custBankAccount.SWIFTNo;
        sks_eft_FileDetail.DepBankTransit = custBankAccount.RegistrationNum;
        sks_eft_FileDetail.DepPreNoteDate = custBankAccount.SKS_EFT_PreNoteDate;
        sks_eft_FileDetail.DepPreNoteStatus = SKS_EFT_Processing::GetPreNoteStatus(custBankAccount.SKS_EFT_PreNoteStatus, custBankAccount.SKS_EFT_PreNoteDate, msks_eftap_file.EffectiveDate);

        // Vendor
        sks_eft_FileDetail.AccountName = SKS_EFT_Common::getCustomerNameByParty(custTable.Party);

        sks_eft_FileDetail.Module = SKS_EFT_Module::CNP;

        //FDD-10590 --->
        sks_eft_FileDetail.PaymSpecName = sks_eft_FileFormatPaymSpec.PaymSpecName;
        sks_eft_FileDetail.TransactionCode = sks_eft_FileFormatPaymSpec.TransactionCode;
        sks_eft_FileDetail.UseCheckNumber = sks_eft_FileFormatPaymSpec.UseCheckNumber;

        select Tax1099RegNum, CoRegNum, Rfc_MX from companyInfo where companyInfo.DataArea == sks_eft_FileDetail.InvoiceCompany ;
        sks_eft_FileDetail.Tax1099RegNum = companyInfo.Tax1099RegNum;
        sks_eft_FileDetail.CoRegNum = companyInfo.CoRegNum;
        sks_eft_FileDetail.CompanyRfc_MX= companyInfo.Rfc_MX;
        sks_eft_FileDetail.VATNum = companyInfo.VATNum;
        // <--- FDD-10590
        SKS_EFT_Processing::BuildCNPCustomerFields(sks_eft_FileDetail, ledgerJournalTrans);
        sks_eft_FileDetail.insert();
        //SKS-Bug_11967 -->
        // for AR Validations we always need to call this method to populate values
        if((SKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::EFTValidate && SKS_EFT_FileDetail.DepRecord == SKS_EFT_VendorRecordSummary::Invoice)
                || SKS_EFT_FileDetail.RecordSection != SKS_EFT_RecordSection::EFTValidate)
        {
            
            SKS_EFT_Processing::BuildCNPMultiCompFields(sks_eft_FileDetail, ledgerJournalTrans);
            SKS_EFT_Processing::BuildUploadCNPCustomerFields(sks_eft_FileDetail, ledgerJournalTrans);
        }
        //if(_calledFromCNPValidation)
        //{
        //    SKS_EFT_Processing::BuildMultiCompFields(sks_eft_FileDetail, ledgerJournalTrans);
        //}
        ////SKS-Bug_11967 <--
        //else
        //{
        //    if(sks_eft_FileDetail.DepRecord == SKS_EFT_VendorRecordSummary::Invoice) //FDD-10590 --->
        //    {
        //        SKS_EFT_Processing::BuildMultiCompFields(sks_eft_FileDetail, ledgerJournalTrans);
        //    }
        //    //<--- FDD-10590
        //}

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>BuildUploadCNPCustomerFields</Name>
				<Source><![CDATA[
    public static server void BuildUploadCNPCustomerFields(SKS_EFT_FileDetail _sks_eft_FileDetail, LedgerJournalTrans ledgerJournalTrans = null) // SKS_FDD_10590
    {
        SKS_EFT_FileDetail_VendAddress      sks_eft_filedetailadress;
        SKS_EFT_FileDetail_Intermediary     sks_eft_filedetailintermediary;
        SKS_EFT_FileDetail_Extra            sks_eft_filedetailextra;
        SKS_EFT_FileDetail_BenBank          sks_eft_filedetailbenbank;
        //SKS_UPLD_PMT                        sks_upld_PMT;
        //SKS_UPLD_PMTXTRA                    sks_upld_PMTXTRA;
        SKS_EFT_CustReimbursementPaym       lSKS_EFT_CustReimbursementPaym;
        SKS_EFT_FileFormatPaymSpecFields    sks_EFT_FileFormatPaymSpecFields;

        //FDD-10590 --->
        CustBankAccount                 lCustBankAccount;
        LogisticsPostalAddress          lLogisticsPostalAddress;
        SKS_EFT_FileDetail_Addresses    sks_EFT_FileDetail_VendBankAddress;
        SKS_EFT_FileDetail_CreditParty  sKS_EFT_FileDetail_CreditParty;
        SKS_EFT_FileDetail_Instructions sKS_EFT_FileDetail_Instructions;
        CustTable                       lCustTable;
        DirPartyContactInfoview         lDirPartyContactInfoview;
        //<--- FDD-10590

        // SKS_FDD_10590 -->
        //LedgerJournalTrans      lLedgerJournalTrans;
        //LogisticsLocation       lLogisticsLocation;
        //LogisticsPostalAddress  lRemittancePostalAddress;
        //Array                   vendAddrArray = new Array(Types::String);
        SKS_EB_Address          addressBldgNb, addressStrtNm;
        container               address;
        // SKS_FDD_10590 <--


        lSKS_EFT_CustReimbursementPaym = SKS_EFT_CustReimbursementPaym::find(_sks_eft_FileDetail.AccountCompany, _sks_eft_FileDetail.AccountNum, _sks_eft_FileDetail.PaymMode, _sks_eft_FileDetail.PaymSpec, _sks_eft_FileDetail.DepBankAccountId); //FDD-10590

        // SKS_FDD_10590 -->
        //vendor address
        SKS_EFT_FileFormatPaymSpec sks_eft_FileFormatPaymSpec = SKS_EFT_FileFormatPaymSpec::findByCompany(_sks_eft_FileDetail.PaymentCompany ? _sks_eft_FileDetail.PaymentCompany : _sks_eft_FileDetail.DataAreaId,
                                                                               _sks_eft_FileDetail.FormatId, _sks_eft_FileDetail.PaymSpec);
        
        SKS_EFT_FileFormat lSKS_EFT_FileFormat = SKS_EFT_FileFormat::findByCompany(_sks_eft_FileDetail.PaymentCompany, _sks_eft_FileDetail.FormatId);

        if(lSKS_EFT_FileFormat.FormatGroupCodeSource == SKS_EB_CodeSource::BankFabric && sks_eft_FileFormatPaymSpec.CRNameType == SKS_EFT_CRNameType::CustomerMaster)
        {
            sks_eft_filedetailadress.BeneName = _sks_eft_FileDetail.AccountName;
        }
        else
        {
            sks_eft_filedetailadress.BeneName = lSKS_EFT_CustReimbursementPaym.WBeneName;
        }


        // SKS_FDD_10590 <--
        sks_eft_filedetailadress.BeneAddr =  lSKS_EFT_CustReimbursementPaym.WBeneAddr ;
        sks_eft_filedetailadress.BeneAddr2 = lSKS_EFT_CustReimbursementPaym.WBeneAddr2;
        sks_eft_filedetailadress.BeneCity =  lSKS_EFT_CustReimbursementPaym.WBeneCity;
        sks_eft_filedetailadress.BeneState = lSKS_EFT_CustReimbursementPaym.WBeneState;
        sks_eft_filedetailadress.BeneZipPostal =  lSKS_EFT_CustReimbursementPaym.WBeneZipPostal;
        sks_eft_filedetailadress.BeneCountryRegionId =  lSKS_EFT_CustReimbursementPaym.WBeneCountryRegionId;

        //FDD-10590 --->
        lCustTable = CustTable::findByCompany(_sks_eft_FileDetail.AccountCompany, _sks_eft_FileDetail.AccountNum);

        select * from lDirPartyContactInfoview
            where lDirPartyContactInfoview.Party == lCustTable.Party && lDirPartyContactInfoview.IsPrimary == true
                &&  lDirPartyContactInfoview.Type == LogisticsElectronicAddressMethodType::Email;

        sks_eft_filedetailadress.Locator = lDirPartyContactInfoview.Locator;

        select * from lDirPartyContactInfoview
            where lDirPartyContactInfoview.Party == lCustTable.Party && lDirPartyContactInfoview.IsPrimary == true
                && lDirPartyContactInfoview.Type == LogisticsElectronicAddressMethodType::Fax;

        sks_eft_filedetailadress.Fax = lDirPartyContactInfoview.Locator;
        sks_eft_filedetailadress.LocationName = lDirPartyContactInfoview.LocationName;
        //<--- FDD-10590
        sks_eft_filedetailadress.RefRecId =  _sks_eft_FileDetail.RecId;
        //intermediary bank
        sks_eft_filedetailintermediary.IntBankQualifier = lSKS_EFT_CustReimbursementPaym.WIntBankQualifier;
        sks_eft_filedetailintermediary.IntBankId = lSKS_EFT_CustReimbursementPaym.WIntBankId;
        sks_eft_filedetailintermediary.IntBankSwift = lSKS_EFT_CustReimbursementPaym.WIntBankSwift;
        sks_eft_filedetailintermediary.IntBankAcct = lSKS_EFT_CustReimbursementPaym.WIntBankAcct;
        sks_eft_filedetailintermediary.IntBankBranch = lSKS_EFT_CustReimbursementPaym.WIntBankBranch;
        sks_eft_filedetailintermediary.IntBankName = lSKS_EFT_CustReimbursementPaym.WIntBankName;
        sks_eft_filedetailintermediary.IntBankAddr = lSKS_EFT_CustReimbursementPaym.WIntBankAddr;
        sks_eft_filedetailintermediary.IntBankAddr2 = lSKS_EFT_CustReimbursementPaym.WIntBankAddr2;
        sks_eft_filedetailintermediary.IntBankCity = lSKS_EFT_CustReimbursementPaym.WIntBankCity;
        sks_eft_filedetailintermediary.IntBankCountryRegionId = lSKS_EFT_CustReimbursementPaym.WIntBankCountryRegionId;
        sks_eft_filedetailintermediary.RefRecId =  _sks_eft_FileDetail.RecId;
        //vendor beneficiary bank
        sks_eft_filedetailbenbank.BenBankName = lSKS_EFT_CustReimbursementPaym.WBenBankName;
        sks_eft_filedetailbenbank.BenBankAddr = lSKS_EFT_CustReimbursementPaym.WBenBankAddr;
        sks_eft_filedetailbenbank.BenBankBranch = lSKS_EFT_CustReimbursementPaym.WBenBankBranch;
        sks_eft_filedetailbenbank.BenBankCity = lSKS_EFT_CustReimbursementPaym.WBenBankCity;
        sks_eft_filedetailbenbank.BenBankAcct = lSKS_EFT_CustReimbursementPaym.WBenBankAcct;      //FDD-10590
        sks_eft_filedetailbenbank.BenBankCountryRegionId = lSKS_EFT_CustReimbursementPaym.WBenBankCountryRegionId;

        //FDD-10590 --->
        //credit party
        sKS_EFT_FileDetail_CreditParty.CrePartyAcct = lSKS_EFT_CustReimbursementPaym.WCrePartyAcct;
        sKS_EFT_FileDetail_CreditParty.CrePartyAddr = lSKS_EFT_CustReimbursementPaym.WCrePartyAddr;
        sKS_EFT_FileDetail_CreditParty.CrePartyBankId = lSKS_EFT_CustReimbursementPaym.WCrePartyBankId;
        sKS_EFT_FileDetail_CreditParty.CrePartyBankName = lSKS_EFT_CustReimbursementPaym.WCrePartyBankName;
        sKS_EFT_FileDetail_CreditParty.CrePartyCity = lSKS_EFT_CustReimbursementPaym.WCrePartyCity;
        sKS_EFT_FileDetail_CreditParty.CrePartyCountryRegionId = lSKS_EFT_CustReimbursementPaym.WCrePartyCountryRegionId;
        sKS_EFT_FileDetail_CreditParty.CrePartyName = lSKS_EFT_CustReimbursementPaym.WCrePartyName;
        sKS_EFT_FileDetail_CreditParty.CrePartySwift = lSKS_EFT_CustReimbursementPaym.WCrePartySwift;
        sKS_EFT_FileDetail_CreditParty.RefRecId = _sks_eft_FileDetail.RecId;

        //payment instructions
        sKS_EFT_FileDetail_Instructions.PmtInstText1 = lSKS_EFT_CustReimbursementPaym.WPmtInstText1;
        sKS_EFT_FileDetail_Instructions.PmtInstText2 = lSKS_EFT_CustReimbursementPaym.WPmtInstText2;
        sKS_EFT_FileDetail_Instructions.PmtInstText3 = lSKS_EFT_CustReimbursementPaym.WPmtInstText3;
        sKS_EFT_FileDetail_Instructions.PmtInstText4 = lSKS_EFT_CustReimbursementPaym.WPmtInstText4;

        //bank instructions
        sKS_EFT_FileDetail_Instructions.BankInst1 = lSKS_EFT_CustReimbursementPaym.WBankInst1;
        sKS_EFT_FileDetail_Instructions.BankInst2 = lSKS_EFT_CustReimbursementPaym.WBankInst2;
        sKS_EFT_FileDetail_Instructions.BankInst3 = lSKS_EFT_CustReimbursementPaym.WBankInst3;
        sKS_EFT_FileDetail_Instructions.BankInst4 = lSKS_EFT_CustReimbursementPaym.WBankInst4;
        sKS_EFT_FileDetail_Instructions.BankInst5 = lSKS_EFT_CustReimbursementPaym.WBankInst5;
        sKS_EFT_FileDetail_Instructions.BankInst6 = lSKS_EFT_CustReimbursementPaym.WBankInst6;
        sKS_EFT_FileDetail_Instructions.RefRecId = _sks_eft_FileDetail.RecId;

        if(lCustBankAccount.AccountID != _sks_eft_FileDetail.DepBankAccountId || lCustBankAccount.CustAccount != _sks_eft_FileDetail.AccountNum)
        {
            lCustBankAccount = CustBankAccount::findByCompany(_sks_eft_FileDetail.AccountCompany, _sks_eft_FileDetail.AccountNum, _sks_eft_FileDetail.DepBankAccountId);
        }
        select firstonly State, ZipCode, Location, CountryRegionId from lLogisticsPostalAddress where lLogisticsPostalAddress.Location == lCustBankAccount.Location;
        //file detail vendor bank address
        sks_EFT_FileDetail_VendBankAddress.Phone = lCustBankAccount.Phone;
        //sks_EFT_FileDetail_VendBankAddress.BankAccountNameKana_JP = lCustBankAccount.BankAccountNameKana_JP;    //SKS_VSTS_14557
        sks_EFT_FileDetail_VendBankAddress.PhoneLocal = lCustBankAccount.PhoneLocal;
        sks_EFT_FileDetail_VendBankAddress.AccountId = LedgerJournalTrans.CustVendBankAccountId;
        sks_EFT_FileDetail_VendBankAddress.City = lLogisticsPostalAddress.City;
        sks_EFT_FileDetail_VendBankAddress.CountryRegionId = lLogisticsPostalAddress.CountryRegionId;
        sks_EFT_FileDetail_VendBankAddress.State = lLogisticsPostalAddress.State;
        sks_EFT_FileDetail_VendBankAddress.ZipCode = lLogisticsPostalAddress.ZipCode;
        sks_EFT_FileDetail_VendBankAddress.Location = lLogisticsPostalAddress.Location;


        if(strScan(lLogisticsPostalAddress.Street, ';', 1, strLen(lLogisticsPostalAddress.Street)))
        {
            address = SKS_EFT_Processing::addressSplit(lLogisticsPostalAddress.Street);
            addressStrtNm = conpeek(address,1);
            addressBldgNb = conpeek(address,2);
        }
        else
        {
            addressStrtNm = lLogisticsPostalAddress.Street;
        }
        sks_EFT_FileDetail_VendBankAddress.Addr = SKS_PP_StringFormats::strRemoveCRLF(addressStrtNm);
        sks_EFT_FileDetail_VendBankAddress.Addr2 = SKS_PP_StringFormats::strRemoveCRLF(addressBldgNb);

        if(sks_eft_filedetailbenbank.BenBankCountryRegionId == '')
        {
            sks_eft_filedetailbenbank.BenBankCountryRegionId = lLogisticsPostalAddress.CountryRegionId;
        }
        sks_EFT_FileDetail_VendBankAddress.AddressType = SKS_EFT_AddressType::VendBankAddress;
        sks_EFT_FileDetail_VendBankAddress.RefRecId =  _sks_eft_FileDetail.RecId;
        sks_EFT_FileDetail_VendBankAddress.insert();
        //<--- FDD-10590
        sks_eft_filedetailbenbank.RefRecId = _sks_eft_FileDetail.RecId;
        //}

            
        if(lSKS_EFT_CustReimbursementPaym)
        {
            container companies;
            companies += sks_eft_FileFormatPaymSpec.company();
            while select crosscompany:companies FormatFieldId, CodeId from sks_EFT_FileFormatPaymSpecFields
                    where sks_EFT_FileFormatPaymSpecFields.FileFormatPaymSpecRecId == sks_eft_FileFormatPaymSpec.RecId
            {
                sks_eft_filedetailextra.FieldName = sks_EFT_FileFormatPaymSpecFields.FormatFieldId;

                str codeLookupValue;
                codeLookupValue = sks_eft_format::getCNPValueFromCode(sks_EFT_FileFormatPaymSpecFields.FormatFieldId, sks_eft_FileFormatPaymSpec, lSKS_EFT_CustReimbursementPaym.RecId);

                sks_eft_filedetailextra.Value = codeLookupValue;
                sks_eft_filedetailextra.RefRecId  = _sks_eft_FileDetail.RecId;
                sks_eft_filedetailextra.insert();
            }
        }

        sks_eft_filedetailadress.insert();
        sks_eft_filedetailintermediary.insert();
        sks_eft_filedetailbenbank.insert();
        sKS_EFT_FileDetail_CreditParty.insert();
        sKS_EFT_FileDetail_Instructions.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>BuildCNPMultiCompFields</Name>
				<Source><![CDATA[
    public static server void BuildCNPMultiCompFields(SKS_EFT_FileDetail _sks_eft_FileDetail, LedgerJournalTrans _ledgerJournalTrans = null, SKS_EFT_FilePmtSelection _sks_eft_FilePmtSelection = null)
    {
        SKS_EFT_FileDetail_BankAccount          sks_eft_fileBankAccount;
        SKS_EFT_FileDetail_PaymentLine          sks_eft_filePaymentLine;
        //SKS_EFT_FileDetail_AddendaHeader        sks_eft_fileAddendaHeader;
        //SKS_EFT_FileDetail_AddendaDetailConfig  sks_eft_fileAddendaDetailConfig;
        SKS_EFT_FileDetail_CustAddress          sks_eft_fileCustAddress;
        SKS_EFT_AddendaFormats                  sks_eft_addendaFormats;
        //SKS_EFT_FileDetail_Mandate              sks_eft_fileMandate;
        //SKS_EFT_Bank                            sks_eft_bank;
        SKS_EFTCNP_Bank                          sks_eftcnp_Bank;
        SKS_EFT_AddendaFields                   sks_eft_AddendaFields;
        //custDirectDebitMandate                  custDirectDebitMandate;
        //VendPaymModeTable                       vendPaymModeTable;
        SKS_EFT_CustReimbursementPaym           sks_eft_custreimbpaym;
        DirPartyPostalAddressView               postalAddress;
        SKS_EB_Address                          addressBldgNb, addressStrtNm;
        container                               address;
        CustBankAccount                         lcustBankAccount;
        LogisticsPostalAddress                  lLogisticsPostalAddress,logisticsPostalAddressBank, logisticsPostalAddressVendor;
        SKS_EFT_FileDetail_Addresses            sks_eft_fileBankAddress, sks_eft_fileCustBankAddress, sks_eft_fileVendCountryAddress;
        SKS_EFT_FileDetail_Extra                sks_EFT_FileDetail_Extra;
        BankAccountTable                        bankAccountTable;
        CustTable                               custtable;
        LedgerJournalTable                      ledgerJournalTable = LedgerJournalTable::find(_ledgerJournalTrans.JournalNum);
        DirPartyTable                           dirPartyTable;
        //str                                     addenda;
        //SKS_EFT_CustomerPaym                    sks_eft_customerpaym;
        SKS_EFT_FilePmtSelection                locSKS_EFT_FilePmtSelection; //SKS_VSTS_12875
        


        // insert TaxWithHoldTrans and its related data into file detail tables.
        void buildFD_TAXWH_Data()
        {
            SKS_EFT_FileDetail              invSKS_EFT_FileDetail;

            while select InvoiceVoucherNumber, PaymentJournalNum, PaymentVoucher from invSKS_EFT_FileDetail
                where invSKS_EFT_FileDetail.PaymentLineRecId == _sks_eft_FileDetail.PaymentLineRecId &&
                invSKS_EFT_FileDetail.InvoiceNumber  !='' && invSKS_EFT_FileDetail.PaymentJournalNum !='' &&
                invSKS_EFT_FileDetail.PaymentVoucher !=''
            {
                SKS_EFT_Processing::build_SKS_EFT_FD_TaxWHTrans(invSKS_EFT_FileDetail.InvoiceVoucherNumber, invSKS_EFT_FileDetail.PaymentJournalNum, invSKS_EFT_FileDetail.PaymentVoucher, _sks_eft_FileDetail);
            }
        }
        // SKS_FDD_10590 <--
        //sks_eft_custreimbpaym = SKS_EFT_VendorPaym::findbycompany(_sks_eft_FileDetail.PaymentCompany ? _sks_eft_FileDetail.PaymentCompany : _sks_eft_FileDetail.DataAreaId, _sks_eft_FileDetail.AccountCompany, _sks_eft_FileDetail.AccountNum, _sks_eft_FileDetail.PaymMode, _sks_eft_FileDetail.PaymSpec, _sks_eft_FileDetail.DepBankAccountId);

        sks_eft_custreimbpaym = SKS_EFT_CustReimbursementPaym::find(_sks_eft_FileDetail.AccountCompany, _sks_eft_FileDetail.AccountNum, _sks_eft_FileDetail.PaymMode,_sks_eft_FileDetail.PaymSpec, _sks_eft_FileDetail.DepBankAccountId);


        SKS_EFT_FileFormatPaymSpec sks_eft_FileFormatPaymSpec = SKS_EFT_FileFormatPaymSpec::findByCompany(_sks_eft_FileDetail.PaymentCompany ? _sks_eft_FileDetail.PaymentCompany : _sks_eft_FileDetail.DataAreaId,
                                                                               _sks_eft_FileDetail.FormatId, _sks_eft_FileDetail.PaymSpec);

        sks_eftcnp_Bank = SKS_EFTCNP_Bank::find(_sks_eft_FileDetail.BankAccountId, _sks_eft_FileDetail.PaymMode);

        if(_ledgerJournalTrans.RecId)
        {
            changecompany(_ledgerJournalTrans.OffsetCompany)
            {
                bankAccountTable = null;
                bankAccountTable = BankAccountTable::findByLedgerDimension(_ledgerJournalTrans.OffsetLedgerDimension);
            }
            //SKS_Bug_11976 <--
            changecompany(_ledgerJournalTrans.Company)
            {
                if(ledgerJournalTable.JournalType == LedgerJournalType::Payment)
                {
                    custtable = null;
                    custtable = CustTable::findByLedgerDimension(_ledgerJournalTrans.LedgerDimension);
                }
            }
        }
        else//SKS_VSTS_12937--->
        {
            bankAccountTable = null;
            bankAccountTable = BankAccountTable::findByCompany(sks_eft_custreimbpaym.company(), sks_eft_custreimbpaym.BankAccountId);
        }
        //SKS_VSTS_12937<---

        // Assign BankAddress
        select firstonly State, ZipCode, Location,City, CountryRegionId from logisticsPostalAddressBank
            where logisticsPostalAddressBank.Location == bankAccountTable.Location;

        sks_eft_fileBankAddress.Name = bankAccountTable.Name;       //SKS_VSTS_14068
        sks_eft_fileBankAddress.City = logisticsPostalAddressBank.City;
        sks_eft_fileBankAddress.CountryRegionId = logisticsPostalAddressBank.CountryRegionId;
        sks_eft_fileBankAddress.State = logisticsPostalAddressBank.State;
        sks_eft_fileBankAddress.ZipCode = logisticsPostalAddressBank.ZipCode;
        sks_eft_fileBankAddress.Location = logisticsPostalAddressBank.Location;


        if(strScan(logisticsPostalAddressBank.Street, ';', 1, strLen(logisticsPostalAddressBank.Street)))
        {
            address = SKS_EFT_Processing::addressSplit(logisticsPostalAddressBank.Street);
            addressStrtNm = conpeek(address,1);
            addressBldgNb = conpeek(address,2);
        }
        else
        {
            addressStrtNm = logisticsPostalAddressBank.Street;
        }
        sks_eft_fileBankAddress.Addr = SKS_PP_StringFormats::strRemoveCRLF(addressStrtNm);
        sks_eft_fileBankAddress.Addr2 = SKS_PP_StringFormats::strRemoveCRLF(addressBldgNb);
        sks_eft_fileBankAddress.RefRecId =  _sks_eft_FileDetail.RecId;
        sks_eft_fileBankAddress.AddressType = SKS_EFT_AddressType::BankAddress;
        sks_eft_fileBankAddress.insert();

        // Assign Vendor country for countrycontext validations
        if(custtable)
        {
            select PrimaryAddressLocation from dirPartyTable
                where dirPartyTable.RecId == custtable.Party
            join Location,CountryRegionId from logisticsPostalAddressVendor
                where logisticsPostalAddressVendor.Location == dirPartyTable.PrimaryAddressLocation;

            sks_eft_fileVendCountryAddress.CountryRegionId = logisticsPostalAddressVendor.CountryRegionId;
            sks_eft_fileVendCountryAddress.AddressType = SKS_EFT_AddressType::VendCountryAddress;
            sks_eft_fileVendCountryAddress.RefRecId = _sks_eft_FileDetail.RecId;
            sks_eft_fileVendCountryAddress.insert();
        }
        //file detail bank acocunt
        if(sks_eftcnp_bank)
        {
            sks_eft_fileBankAccount.WOrdPartyId = sks_eftcnp_bank.WOrdPartyId;
            sks_eft_fileBankAccount.WOrdPartyName = sks_eftcnp_bank.WOrdPartyName;
            sks_eft_fileBankAccount.WOrdPartyAddr = sks_eftcnp_bank.WOrdPartyAddr;
            sks_eft_fileBankAccount.WOrdPartyAddr2 = sks_eftcnp_bank.WOrdPartyAddr2;       //SKS_Bug_11785
            sks_eft_fileBankAccount.WOrdPartyCity = sks_eftcnp_bank.WOrdPartyCity;
            sks_eft_fileBankAccount.WOrdPartyState = sks_eftcnp_bank.WOrdPartyState;
            sks_eft_fileBankAccount.WOrdPartyCountryRegionId = sks_eftcnp_bank.WOrdPartyCountryRegionId;
            sks_eft_fileBankAccount.WOrdPartyZipCode = sks_eftcnp_bank.WOrdPartyZipCode;
            sks_eft_fileBankAccount.WOrdPartyCountryName = sks_eftcnp_bank.WOrdPartyCountryName;
            sks_eft_fileBankAccount.WOrdPartySWIFTNo = sks_eftcnp_bank.WOrdPartySWIFTNo;


            sks_eft_fileBankAccount.ACHFileIDModifier = sks_eftcnp_bank.ACHFileIDModifier;
            sks_eft_fileBankAccount.ACHOrigDFI = sks_eftcnp_bank.ACHOrigDFI;
            sks_eft_fileBankAccount.ACHOrigDFIName = sks_eftcnp_bank.ACHOrigDFIName;
            sks_eft_fileBankAccount.APACHInclDR = sks_eftcnp_bank.CNPACHInclDR;

            sks_eft_fileBankAccount.RefRecId = _sks_eft_FileDetail.recid;

            SKS_EFT_FileFormat lSKS_EFT_FileFormat = SKS_EFT_FileFormat::findByCompany(_sks_eft_FileDetail.PaymentCompany, _sks_eft_FileDetail.FormatId);//DevOps20187
            SKS_EFT_FileFormatFields    lSKS_EFT_FileFormatFields;
            container companies;
            companies += sks_eft_FileFormatPaymSpec.company();

            while select crosscompany:companies FormatFieldId, CodeId from lSKS_EFT_FileFormatFields
                    where lSKS_EFT_FileFormatFields.FileFormatRecId == lSKS_EFT_FileFormat.RecId
            {
                sks_EFT_FileDetail_Extra.FieldName = lSKS_EFT_FileFormatFields.FormatFieldId;

                str codeLookupValue;
                changecompany (sks_eftcnp_bank.DataAreaId)
                {
                    codeLookupValue = SKS_EFT_Processing::getCNPBankAccountValueFromCode(lSKS_EFT_FileFormatFields.FormatFieldId, lSKS_EFT_FileFormat, sks_eftcnp_bank.RecId);
                }
                sks_EFT_FileDetail_Extra.Value = codeLookupValue;
                sks_EFT_FileDetail_Extra.RefRecId  = _sks_eft_FileDetail.RecId;
                sks_EFT_FileDetail_Extra.CodeLookupType = SKS_EFT_CodeLookupType::CodeLookupBank;
                sks_EFT_FileDetail_Extra.insert();
            }

            if(_ledgerJournalTrans.RecId)
            {
                select firstOnly1 postalAddress where postalAddress.IsPrimary == NoYes::Yes && postalAddress.Party == DirPartyTable::findByNum(CompanyInfo::find().PartyNumber).RecId;
            }
            else //SKS_VSTS_12937--->
            {
                select firstOnly1 postalAddress where postalAddress.IsPrimary == NoYes::Yes && postalAddress.Party == DirPartyTable::findByNum(CompanyInfo::find().PartyNumber).RecId;
            }
            //SKS_VSTS_12937<---

            if(postalAddress)
            {
                if(strScan(postalAddress.Street, ';', 1, strLen(postalAddress.Street)))
                {
                    address = SKS_EFT_Processing::addressSplit(postalAddress.Street);
                    addressStrtNm = conpeek(address,1);
                    addressBldgNb = conpeek(address,2);
                }
                else
                {
                    addressStrtNm = postalAddress.Street;
                }

                sks_eft_fileBankAccount.Addr = SKS_PP_StringFormats::strRemoveCRLF(addressStrtNm);
                sks_eft_fileBankAccount.Addr2 = SKS_PP_StringFormats::strRemoveCRLF(addressBldgNb);
                sks_eft_fileBankAccount.City = postalAddress.City;
                sks_eft_fileBankAccount.CountryRegionId = postalAddress.CountryRegionId;
                sks_eft_fileBankAccount.State = postalAddress.State;
                sks_eft_fileBankAccount.ZipPostal = postalAddress.ZipCode;
                sks_eft_fileBankAccount.Street = SKS_PP_StringFormats::strRemoveCRLF(postalAddress.Street);
                sks_eft_fileBankAccount.RefRecId = _sks_eft_FileDetail.recid;
            }
            if((_sks_eft_FileDetail.RecordSummary == SKS_EFT_RecordSummary::Invoice && _sks_eft_FileDetail.DepRecord == SKS_EFT_VendorRecordSummary::Invoice) || _sks_eft_FileDetail.RecordSummary == SKS_EFT_RecordSummary::Payment)
            {
                buildFD_TAXWH_Data();
            }

        }
        
        sks_eft_fileBankAccount.RefRecId = _sks_eft_FileDetail.recid;
        sks_eft_fileBankAccount.insert();

        //file detail payment line
        if(_ledgerJournalTrans.BankCentralBankPurposeCode || _ledgerJournalTrans.Txt)
        {
            sks_eft_filePaymentLine.BankCentralBankPurposeCode = _ledgerJournalTrans.BankCentralBankPurposeCode;
            sks_eft_filePaymentLine.BankCentralBankPurposeText = _ledgerJournalTrans.BankCentralBankPurposeText;
            sks_eft_filePaymentLine.BankCentralBankPurposeName = BankCentralBankPurpose::find(_ledgerJournalTrans.BankCentralBankPurposeCode).Name;
            sks_eft_filePaymentLine.TransactionTxt = strReplace(_ledgerJournalTrans.Txt, '\r', ' ');
            sks_eft_filePaymentLine.RefRecId = _sks_eft_FileDetail.RecId;
            sks_eft_filePaymentLine.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>BuildCNPCustomerFields</Name>
				<Source><![CDATA[
    public static server void BuildCNPCustomerFields(SKS_EFT_FileDetail _sks_eft_FileDetail, LedgerJournalTrans _ledgerJournalTrans = null) //SKS_FDD_10590
    {
        CustTable custTable;
        SKS_EFT_CustReimbursementPaym sks_eft_custreimbpaym;
        CustBankAccount custbankaccount;

        SKS_EFT_FileFormatPaymSpec  sks_eft_fileformatpaymspec;

        CompanyInfo         companyInfo; //FDD-10590

        sks_eft_custreimbpaym = SKS_EFT_CustReimbursementPaym::find(_sks_eft_FileDetail.AccountCompany, _sks_eft_FileDetail.AccountNum, _sks_eft_FileDetail.PaymMode, _sks_eft_FileDetail.PaymSpec, _sks_eft_FileDetail.DepBankAccountId);
        
        custTable = CustTable::findByCompany(_sks_eft_FileDetail.AccountCompany, _sks_eft_FileDetail.AccountNum);
        custbankaccount = CustBankAccount::findByCompany(_sks_eft_FileDetail.AccountCompany, _sks_eft_FileDetail.AccountNum, _sks_eft_FileDetail.DepBankAccountId);

        sks_eft_FileFormatPaymSpec = SKS_EFT_FileFormatPaymSpec::findByCompany(_sks_eft_FileDetail.PaymentCompany ? _sks_eft_FileDetail.PaymentCompany : _sks_eft_FileDetail.DataAreaId,
                                                                               _sks_eft_FileDetail.FormatId, _sks_eft_FileDetail.PaymSpec);

        if(substr(_sks_eft_FileDetail.PaymSpec,1,3) == enum2str(SKS_EFT_CompanyPaymSpec::IAT))
        {
            _sks_eft_FileDetail.DepCountryRegionId = sks_eft_custreimbpaym.WBeneCountryRegionId;
        }

        // Vendor
        _sks_eft_FileDetail.AccountName = SKS_EFT_Common::getCustomerNameByParty(custTable.Party);
        _sks_eft_FileDetail.VATNum = custTable.VATNum;
        _sks_eft_FileDetail.Rfc_MX = custTable.Rfc_MX;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankAccountValueFromCode</Name>
				<Source><![CDATA[
    static server str getBankAccountValueFromCode(SKS_EB_CodeId _FormatFieldID, SKS_EFT_FileFormat _SKS_EFT_FileFormat, RefRecId _BankAccountRecId)
    {
        SKS_EFT_FileFormatFields lSKS_EFT_FileFormatFields;
        SKS_EB_BankCodeLookupValues lSKS_EB_BankCodeLookupValues;
        SKS_EFT_BankAccountPaymLookup lSKS_EFT_BankAccountPaymLookup;
        str ret = '';
    
        select FileFormatRecId, FormatFieldID, RecId, FieldType, FixedValue from lSKS_EFT_FileFormatFields
                                                                                   where lSKS_EFT_FileFormatFields.FileFormatRecId == _SKS_EFT_FileFormat.RecId &&
                                                                                         lSKS_EFT_FileFormatFields.FormatFieldID == _FormatFieldID join CodeLookupValuesRecId, FixedValue, FileFormatFieldsRecId
                                                                                    from lSKS_EFT_BankAccountPaymLookup
                                                                                   where lSKS_EFT_BankAccountPaymLookup.FileFormatFieldsRecId == lSKS_EFT_FileFormatFields.RecId
                                                                                      && lSKS_EFT_BankAccountPaymLookup.BankPaymRecId == _BankAccountRecId;

        if(lSKS_EFT_FileFormatFields.FieldType == SKS_EFT_CodeFieldType::CodeLookup)
        {
            select CodeValue, RecId from lSKS_EB_BankCodeLookupValues where lSKS_EB_BankCodeLookupValues.RecId == lSKS_EFT_BankAccountPaymLookup.CodeLookupValuesRecId;
            ret =  lSKS_EB_BankCodeLookupValues.CodeValue;
        }
        else
        {
            ret = lSKS_EFT_BankAccountPaymLookup.FixedValue;
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDDBankAccountValueFromCode</Name>
				<Source><![CDATA[
    static server str getDDBankAccountValueFromCode(SKS_EB_CodeId _FormatFieldID, SKS_EFT_FileFormat _SKS_EFT_FileFormat, RefRecId _BankAccountRecId)
    {
        SKS_EFT_FileFormatFields lSKS_EFT_FileFormatFields;
        SKS_EB_BankCodeLookupValues lSKS_EB_BankCodeLookupValues;
        SKS_EFT_ARBankAccountPaymLookup lSKS_EFT_BankAccountPaymLookup;
        str ret = '';
    
        select FileFormatRecId, FormatFieldID, RecId, FieldType, FixedValue from lSKS_EFT_FileFormatFields
                                                                                   where lSKS_EFT_FileFormatFields.FileFormatRecId == _SKS_EFT_FileFormat.RecId &&
                                                                                         lSKS_EFT_FileFormatFields.FormatFieldID == _FormatFieldID join CodeLookupValuesRecId, FixedValue, FileFormatFieldsRecId
                                                                                    from lSKS_EFT_BankAccountPaymLookup
                                                                                   where lSKS_EFT_BankAccountPaymLookup.FileFormatFieldsRecId == lSKS_EFT_FileFormatFields.RecId
                                                                                      && lSKS_EFT_BankAccountPaymLookup.BankPaymRecId == _BankAccountRecId;

        if(lSKS_EFT_FileFormatFields.FieldType == SKS_EFT_CodeFieldType::CodeLookup)
        {
            select CodeValue, RecId from lSKS_EB_BankCodeLookupValues where lSKS_EB_BankCodeLookupValues.RecId == lSKS_EFT_BankAccountPaymLookup.CodeLookupValuesRecId;
            ret =  lSKS_EB_BankCodeLookupValues.CodeValue;
        }
        else
        {
            ret = lSKS_EFT_BankAccountPaymLookup.FixedValue;
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBTBBankAccountValueFromCode</Name>
				<Source><![CDATA[
    static server str getBTBBankAccountValueFromCode(SKS_EB_CodeId _FormatFieldID, SKS_EFT_FileFormat _SKS_EFT_FileFormat, RefRecId _BankAccountRecId)
    {
        SKS_EFT_FileFormatFields lSKS_EFT_FileFormatFields;
        SKS_EB_BankCodeLookupValues lSKS_EB_BankCodeLookupValues;
        SKS_EFT_BTBBankAccountPaymLookup lSKS_EFT_BankAccountPaymLookup;
        str ret = '';
    
        select FileFormatRecId, FormatFieldID, RecId, FieldType, FixedValue from lSKS_EFT_FileFormatFields
                                                                                   where lSKS_EFT_FileFormatFields.FileFormatRecId == _SKS_EFT_FileFormat.RecId &&
                                                                                         lSKS_EFT_FileFormatFields.FormatFieldID == _FormatFieldID join CodeLookupValuesRecId, FixedValue, FileFormatFieldsRecId
                                                                                    from lSKS_EFT_BankAccountPaymLookup
                                                                                   where lSKS_EFT_BankAccountPaymLookup.FileFormatFieldsRecId == lSKS_EFT_FileFormatFields.RecId
                                                                                      && lSKS_EFT_BankAccountPaymLookup.BankPaymRecId == _BankAccountRecId;

        if(lSKS_EFT_FileFormatFields.FieldType == SKS_EFT_CodeFieldType::CodeLookup)
        {
            select CodeValue, RecId from lSKS_EB_BankCodeLookupValues where lSKS_EB_BankCodeLookupValues.RecId == lSKS_EFT_BankAccountPaymLookup.CodeLookupValuesRecId;
            ret =  lSKS_EB_BankCodeLookupValues.CodeValue;
        }
        else
        {
            ret = lSKS_EFT_BankAccountPaymLookup.FixedValue;
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCNPBankAccountValueFromCode</Name>
				<Source><![CDATA[
    static server str getCNPBankAccountValueFromCode(SKS_EB_CodeId _FormatFieldID, SKS_EFT_FileFormat _SKS_EFT_FileFormat, RefRecId _BankAccountRecId)
    {
        SKS_EFT_FileFormatFields lSKS_EFT_FileFormatFields;
        SKS_EB_BankCodeLookupValues lSKS_EB_BankCodeLookupValues;
        SKS_EFT_CNPBankAccountPaymLookup lSKS_EFT_BankAccountPaymLookup;
        str ret = '';
    
        select FileFormatRecId, FormatFieldID, RecId, FieldType, FixedValue from lSKS_EFT_FileFormatFields
                                                                                   where lSKS_EFT_FileFormatFields.FileFormatRecId == _SKS_EFT_FileFormat.RecId &&
                                                                                         lSKS_EFT_FileFormatFields.FormatFieldID == _FormatFieldID join CodeLookupValuesRecId, FixedValue, FileFormatFieldsRecId
                                                                                    from lSKS_EFT_BankAccountPaymLookup
                                                                                   where lSKS_EFT_BankAccountPaymLookup.FileFormatFieldsRecId == lSKS_EFT_FileFormatFields.RecId
                                                                                      && lSKS_EFT_BankAccountPaymLookup.BankPaymRecId == _BankAccountRecId;

        if(lSKS_EFT_FileFormatFields.FieldType == SKS_EFT_CodeFieldType::CodeLookup)
        {
            select CodeValue, RecId from lSKS_EB_BankCodeLookupValues where lSKS_EB_BankCodeLookupValues.RecId == lSKS_EFT_BankAccountPaymLookup.CodeLookupValuesRecId;
            ret =  lSKS_EB_BankCodeLookupValues.CodeValue;
        }
        else
        {
            ret = lSKS_EFT_BankAccountPaymLookup.FixedValue;
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUseCheckNumber</Name>
				<Source><![CDATA[
    //SKS_DEvOps_17119--->
    public NoYes getUseCheckNumber(SKS_EFT_FileDetail _SKS_EFT_FileDetail, NoYes _usechecknum)
    {
        return _usechecknum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>Update_SKS_EFTAP_File_ResponseType</Name>
				<Source><![CDATA[
    //SKS_DEvOps_17119<---
                                                                                       
    private void Update_SKS_EFTAP_File_ResponseType(SKS_EFT_APIResponseType _responseType)
    {           
        if(msks_eftap_file)
        {
            ttsbegin;
            msks_eftap_file.selectForUpdate(true);
            msks_eftap_file.ResponseType = _responseType;

            msks_eftap_file.update();
            ttscommit;
        }        
    }

]]></Source>
			</Method>
			<Method>
				<Name>Update_SKS_EFT_FileDetail_Response</Name>
				<Source><![CDATA[
    private void Update_SKS_EFT_FileDetail_Response(SKS_EFT_FileDetail _sks_eft_FleDetail, SKS_EFT_APIResponseType _responseStatus, SKS_APIResponseTableTmp _responseTable)
    {
        ttsbegin;
        _sks_eft_FleDetail.selectForUpdate(true);
        if(_responseStatus != SKS_EFT_APIResponseType::None)
        {
            _sks_eft_FleDetail.APIResponseStatus = _responseStatus;
            _sks_eft_FleDetail.APIReasonCode =  _responseTable.ReasonCode;
            _sks_eft_FleDetail.APIAdditionalInfo = _responseTable.AdditionalInfo;
            _sks_eft_FleDetail.APIPaymentId = _responseTable.Identification;
            _sks_eft_FleDetail.update();

            // receive
            SKS_EFT_Processing::ApprovePaymentJournalLines(mSKS_EFTAP_File.RecId, CustVendPaymStatus::Recieved);

            // update ledgerjournaltrans.paymentstatus status              
            if(_responseStatus == SKS_EFT_APIResponseType::Received)
            {
                changecompany(_sks_eft_FleDetail.PaymentCompany)
                {                    
                    ttsbegin;
                    LedgerJournalTrans ledgerJournalTransLoc = LedgerJournalTrans::findRecId(_sks_eft_FleDetail.PaymentLineRecId, true);                    
                    ledgerJournalTransLoc.PaymentStatus = CustVendPaymStatus::Recieved;
                    ledgerJournalTransLoc.doUpdate();
                    ttscommit;
                }
            }
            
        }
        else    
        {
            SKS_EFT_APIResponseType responseType;
            if(_responseTable.Status ==  SKS_EFT_APIPaymentStatus::None)
            {
                responseType =  SKS_EFT_APIResponseType::None;
            }
            else if(_responseTable.Status ==  SKS_EFT_APIPaymentStatus::Received)
            {
                responseType =  SKS_EFT_APIResponseType::Received;
            }
            else if(_responseTable.Status ==  SKS_EFT_APIPaymentStatus::Rejected)
            {
                responseType =  SKS_EFT_APIResponseType::Rejected;
            }
            else if(_responseTable.Status ==  SKS_EFT_APIPaymentStatus::CommFailed)
            {
                responseType =  SKS_EFT_APIResponseType::CommFailed;
            }

            _sks_eft_FleDetail.APIResponseStatus = responseType;
            _sks_eft_FleDetail.APIReasonCode =  _responseTable.ReasonCode;
            _sks_eft_FleDetail.APIAdditionalInfo = _responseTable.AdditionalInfo;
            _sks_eft_FleDetail.APIPaymentId = _responseTable.Identification;
            _sks_eft_FleDetail.update();

            changecompany(_sks_eft_FleDetail.PaymentCompany)
            {
                // update ledgerjournaltrans.paymentstatus status
                LedgerJournalTrans ledgerJournalTransLoc = LedgerJournalTrans::findRecId(_sks_eft_FleDetail.PaymentLineRecId, true);

                if(_responseTable.Status == SKS_EFT_APIPaymentStatus::Rejected || _responseTable.Status == SKS_EFT_APIPaymentStatus::CommFailed)
                {
                    SKS_CustVendPaymReconciliationSetStatus locSKS_CustVendPaymReconciliationSetStatus = new SKS_CustVendPaymReconciliationSetStatus();
                    ttsbegin;
                    ledgerJournalTransLoc.selectForUpdate(true);
                    ledgerJournalTransLoc.PaymentStatus = CustVendPaymStatus::Rejected;
                    locSKS_CustVendPaymReconciliationSetStatus.rejectNegInst(ledgerJournalTransLoc);                  
                    ledgerJournalTransLoc.update();
                    ttscommit;
                }
                else
                {
                    // receive
                    ttsbegin;
                    ledgerJournalTransLoc.selectForUpdate(true);
                    ledgerJournalTransLoc.PaymentStatus = CustVendPaymStatus::Recieved;
                    ledgerJournalTransLoc.doUpdate();
                    ttscommit;
                }
            }

        }       
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parseResponse</Name>
				<Source><![CDATA[
    // parse response json
    SKS_APIResponseTableTmp parseResponse(str _response)
    {
        SKS_APIResponseTableTmp     responseTable;

        if(!System.String::IsNullOrEmpty(_response))
        {               
            Newtonsoft.Json.Linq.JArray paymentStatusResponses = Newtonsoft.Json.JsonConvert::DeserializeObject(_response);
          
            for(int counter = 0; counter < paymentStatusResponses.Count; counter++)
            {
                Newtonsoft.Json.Linq.JObject resObj = paymentStatusResponses.get_item(counter);
                Newtonsoft.Json.Linq.JValue identification = resObj.GetValue('Identification');
                Newtonsoft.Json.Linq.JValue paymentReference = resObj.GetValue('PaymentReference');
                Newtonsoft.Json.Linq.JValue status = resObj.GetValue('Status');
                Newtonsoft.Json.Linq.JValue reasonCode = resObj.GetValue('ReasonCode');
                Newtonsoft.Json.Linq.JValue additionalInfo = resObj.GetValue('AdditionalInfo');

                // populate temp table
                responseTable.PaymentReference  = paymentReference.ToString();
                responseTable.Identification    = identification.ToString();
                
                SKS_EFT_APIPaymentStatus            paymentStatus;
                if(status.ToString() == '0')
                {
                    paymentStatus = SKS_EFT_APIPaymentStatus::Received;
                }
                else if(status.ToString() == '1')
                {
                    paymentStatus = SKS_EFT_APIPaymentStatus::Rejected;
                }
                else if(status.ToString() == '2')
                {
                    paymentStatus = SKS_EFT_APIPaymentStatus::CommFailed;
                }
                else
                {
                    paymentStatus = SKS_EFT_APIPaymentStatus::None;
                }
                responseTable.Status            = paymentStatus; //str2Enum(paymentStatus, status.ToString());
                responseTable.ReasonCode        = reasonCode.ToString();
                responseTable.AdditionalInfo    = additionalInfo.ToString();
                responseTable.insert();
            }
        }

        return responseTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>responseCount</Name>
				<Source><![CDATA[
    int responseCount(SKS_APIResponseTableTmp _responseTable, SKS_EFT_APIPaymentStatus _paymentStatus)
    {
        select count(RecId) from _responseTable where _responseTable.Status == _paymentStatus;

        return int642int(_responseTable.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processRemitDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// FDD 21456 Seperate remit detail processing
    /// </summary>
    /// <param name = "_fileRecId">RefRecId</param>
    /// <returns></returns>
    boolean processRemitDetails(RefRecId _fileRecId)
    {
        #xppTexts
        SKS_EFT_FilePmtSelection    lSKS_EFT_FilePmtSelection;
        LedgerJournalTrans          ledgerJournalTrans;
        SpecTrans                   specTrans;
        Counter                     recordCount;
        container                   companiesCon;
        SKS_PP_Setup                locSKS_PP_Setup;
        SKS_EFTAP_File              locSKS_EFTAP_File;
        str mErrorText, result;
        SKS_EFT_FileDetail          mSKS_EFT_FileDetail;

       
        Select DataAreaId, modMCFAPDD, RecId, RegMCFAPDD from locSKS_PP_Setup
            join EFTFileType from locSKS_EFTAP_File where locSKS_EFTAP_File.RecId == _fileRecId;

        If(locSKS_PP_Setup.modMCFAPDD && locSKS_PP_Setup.RegMCFAPDD)
        {
            companiesCon = SKS_EB_VirtualCompany::getEFT_APMultiCompanies();
        }
        else
        {
            companiesCon += curExt();
        }

        select mSKS_EFT_FileDetail
            where mSKS_EFT_FileDetail.FileRecId == _fileRecId &&
                mSKS_EFT_FileDetail.NeedsRebuilt == NoYes::Yes &&
                mSKS_EFT_FileDetail.RecordSummary == SKS_EFT_RecordSummary::NonSummary;

        while(mSKS_EFT_FileDetail)
        {
            try
            {
                select crosscompany:companiesCon ledgerJournalTrans where 
                    ledgerJournalTrans.RecId == mSKS_EFT_FileDetail.PaymentLineRecId
                    outer join specTrans
                    where specTrans.SpecRecId == ledgerJournalTrans.RecId
                        && specTrans.SpecTableId == ledgerJournalTrans.TableId
                        && specTrans.SpecCompany == ledgerJournalTrans.DataAreaId;

                
                select lSKS_EFT_FilePmtSelection where lSKS_EFT_FilePmtSelection.FileRecId == _fileRecId &&
                        lSKS_EFT_FilePmtSelection.RecId == ledgerJournalTrans.SKS_EFT_APPmtSelectionRecId;
                
                ttsbegin;
                While(ledgerJournalTrans)
                {
                    recordCount++;

                    result = this.CreateVchFileDetail(lSKS_EFT_FilePmtSelection, ledgerJournalTrans, specTrans, NoYes::No, null, NoYes::No, NoYes::Yes);

                    if(result)
                    {
                        mErrorText += result;
                        throw Error("@SKS:SKGRemitProcessError" + result);
                    }
                    next ledgerJournalTrans;
                }
                ttscommit;
            }
            catch(Exception::Error)
            {
                ttsAbort;
            }

            next mSKS_EFT_FileDetail;
        }

        SKS_EFT_FileDetail lSKS_EFT_FileDetail, lSKS_EFT_FileDetail_1, totSKS_EFT_FileDetail;

        while select totSKS_EFT_FileDetail where totSKS_EFT_FileDetail.FileRecId == _fileRecId &&
            totSKS_EFT_FileDetail.NeedsRebuilt == NoYes::Yes &&
            totSKS_EFT_FileDetail.RecordSummary == SKS_EFT_RecordSummary::NonSummary
        {
            select count(RecId) from lSKS_EFT_FileDetail where 
                lSKS_EFT_FileDetail.PaymentLineRecId == totSKS_EFT_FileDetail.PaymentLineRecId
                && lSKS_EFT_FileDetail.RecordSummary == SKS_EFT_RecordSummary::Invoice
                && lSKS_EFT_FileDetail.RecordSummaryRecId == 0;

            if(lSKS_EFT_FileDetail.RecId > 0)
            {
                update_recordset lSKS_EFT_FileDetail_1 setting 
                    RecordSummary = SKS_EFT_RecordSummary::NonSummary,
                    RecordSummaryRecId = totSKS_EFT_FileDetail.RecordSummaryRecId
                    where lSKS_EFT_FileDetail_1.FileRecId == _fileRecId
                    && lSKS_EFT_FileDetail_1.PaymentLineRecId == totSKS_EFT_FileDetail.PaymentLineRecId
                    && lSKS_EFT_FileDetail_1.RecordSummary == SKS_EFT_RecordSummary::Invoice;

                lSKS_EFT_FileDetail.skipDataMethods(true);
                lSKS_EFT_FileDetail.skipDatabaseLog(true);
                lSKS_EFT_FileDetail.skipDeleteActions(true);
                lSKS_EFT_FileDetail.skipDeleteMethod(true);
                lSKS_EFT_FileDetail.skipEvents(true);

                delete_from lSKS_EFT_FileDetail where lSKS_EFT_FileDetail.FileRecId == _fileRecId
                    && lSKS_EFT_FileDetail.PaymentLineRecId == totSKS_EFT_FileDetail.PaymentLineRecId
                    && lSKS_EFT_FileDetail.NeedsRebuilt == NoYes::Yes;
            }
        }

        if (mErrorText != '')
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>