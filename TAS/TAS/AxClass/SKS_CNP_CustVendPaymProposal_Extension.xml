<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_CNP_CustVendPaymProposal_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(CustVendPaymProposal))]
final class SKS_CNP_CustVendPaymProposal_Extension
{
    public PaymMode paymMode;
    public PaymSpec paymSpec;
    public int minDayToReimburse;
    public boolean isReimbusementJournal;
    public boolean includeCustDebitBalnace;
    public date dueDateDays;
        
    #define.CurrentVersion(1)
    #localmacro.CurrentList
        paymMode,
        paymSpec,
        minDayToReimburse,
        isReimbusementJournal,
        includeCustDebitBalnace,
        dueDateDays
    #endmacro
        
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmIncludeCustDebitBalnace</Name>
				<Source><![CDATA[
    public boolean parmIncludeCustDebitBalnace(boolean _includeCustDebitBalnace = includeCustDebitBalnace)
    {
        includeCustDebitBalnace = _includeCustDebitBalnace;

        return includeCustDebitBalnace;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMinDayToReimburse</Name>
				<Source><![CDATA[
    public int parmMinDayToReimburse(int _minDayToReimburse = minDayToReimburse)
    {
        minDayToReimburse = _minDayToReimburse;

        return minDayToReimburse;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReimbursement</Name>
				<Source><![CDATA[
    public boolean parmReimbursement(boolean _isReimbusementJournal = isReimbusementJournal)
    {
        isReimbusementJournal = _isReimbusementJournal;

        return isReimbusementJournal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDueDate</Name>
				<Source><![CDATA[
    public date parmDueDate(date _dueDateDays = dueDateDays)
    {
        dueDateDays = _dueDateDays;
        
        return dueDateDays;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPaymMode</Name>
				<Source><![CDATA[
    public PaymMode parmPaymMode(PaymMode _paymMode = paymMode)
    {
        paymMode = _paymMode;
        return paymMode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPaymSpec</Name>
				<Source><![CDATA[
    public PaymMode parmPaymSpec(PaymMode _paymSpec = paymSpec)
    {
        paymSpec = _paymSpec;
        return paymSpec;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        container packedClass = next pack();
        return SysPackExtensions::appendExtension(packedClass, classStr(SKS_CNP_CustVendPaymProposal_Extension), this.cnpPack());
    }

]]></Source>
			</Method>
			<Method>
				<Name>cnpPack</Name>
				<Source><![CDATA[
    private container cnpPack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>cnpUnpack</Name>
				<Source><![CDATA[
    private boolean cnpUnpack(container packedClass)
    {
        Integer version = RunBase::getVersion(packedClass);
        switch (version)
        {
            case #CurrentVersion:
                [version, #currentList] = packedClass;
                break;
            default:
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        boolean result = next unpack(_packedClass);

        if (result)
        {
            container myState = SysPackExtensions::findExtension(_packedClass, classStr(SKS_CNP_CustVendPaymProposal_Extension));
            //Also unpack the extension
            if (!this.cnpUnpack(myState))
            {
                result = false;
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildPaymProposalLine</Name>
				<Source><![CDATA[
    public CustVendPaymProposalLine buildPaymProposalLine(
        CustVendTransOpen   _custVendTransOpen,
        TransDate           _paymDate,
        CurrencyCode        _paymCurrency)
    {
        CustVendPaymProposalLine custVendPaymProposalLine = next buildPaymProposalLine(_custVendTransOpen, _paymDate, _paymCurrency);

        if(this.parmPaymMode())
        {
            custVendPaymProposalLine.PaymMode = this.parmPaymMode();
        }

        return custVendPaymProposalLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateProposalLine</Name>
				<Source><![CDATA[
    protected CustVendPaymProposalLine populateProposalLine(CustVendPaymProposalLine _paymProposalLine)
    {
        CustVendPaymProposalLine paymProposalLine = next populateProposalLine(_paymProposalLine);

        if(this.parmPaymMode())
        {
            paymProposalLine.PaymMode = this.parmPaymMode();
        }

        if(this.parmPaymSpec())
        {
            paymProposalLine.PaymSpec = this.parmPaymSpec();
        }

        return paymProposalLine;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>