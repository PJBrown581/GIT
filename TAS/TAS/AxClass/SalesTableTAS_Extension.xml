<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesTableTAS_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(tableStr(SalesTable))]
final class SalesTableTAS_Extension
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>sKS_CC_IsCreditCardPaymMode</Name>
				<Source><![CDATA[
    public boolean sKS_CC_IsCreditCardPaymMode()
    {
        boolean ret;
        CustPaymModeTable custPaymModeTableCheck;
        
        if (SKS_PP_Setup::find().ModCC == NoYes::No)
        {
            return true;
        }
            
        if (!this.PaymMode)
        {
            return true;
        }

        if (this.mcrIsCallCenter() && RetailMCRChannelTable::mcrEnableOrderCompletion(this))
        {
            return true;
        }

        if (this.payment().CreditCardPaymentType == CreditCardPaymentType::CreditCard)
        {
            custPaymModeTableCheck = CustPaymModeTable::find(this.PaymMode);
            if (custPaymModeTableCheck.PaymentType == CustPaymentType::CreditCard &&
                custPaymModeTableCheck.PaymStatus == CustVendPaymStatus::None)
            {
                ret = true;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sKS_CC_CreditCardDoPreAuthorize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Authorizes a credit card for a sales order.
    /// </summary>
    /// <param name="_presentExtraMsg">
    /// true to display extra messages; otherwise, false.
    /// </param>
    /// <returns>
    /// true if the authorization process was sucessful or not needed; otherwise, false.
    /// </returns>
    /// <remarks>
    /// Authorization is required for a sales order if:
    /// 1) the credit cards feature is configured,
    /// 2) the payment type of the sales order is card card
    /// 3) credit card processing is configured to require authorization and
    /// 4) the total amount is greater than zero
    /// </remarks>
    public boolean sKS_CC_CreditCardDoPreAuthorize(boolean _presentExtraMsg = true
        //SKS-Begin
        , str _sKS_CC_CustConfirmJourDocNum = ''        
        //SKS-End
        )
    {
        // Only pre-authorization credit card when needed
        if (SKS_PP_Setup::find().ModCC == NoYes::Yes)
        {
            if (this.isCreditCardPaymentType() && CustParameters::find().CreditCardPreAuthorization &&
                SalesTotals_Sales::construct(this, SalesUpdate::All).totalAmount() > 0)
            {
                return SKS_CC_CreditCardProcess::sKS_CC_DoPreAuth(this, _presentExtraMsg, _sKS_CC_CustConfirmJourDocNum);
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sKS_CC_SetDefaultCreditCard</Name>
				<Source><![CDATA[
    /// <summary>
    /// If customer has a default credit card then use it to set
    /// field <c>CreditCardCustRefId</c> in <c>SalesTable</c> record.
    /// </summary>
    public void sKS_CC_SetDefaultCreditCard()
    {        
        if (SKS_PP_Setup::find().ModCC == NoYes::No || this.ProjId)
        {
            return;
        }

        CreditCardCust creditCardCustSKS;
        NoYes mcrEnableOrderCompletionSKS;

        if (this.mcrIsCallCenter())
        {
            if (this)
            {
                mcrEnableOrderCompletionSKS = RetailMCRChannelTable::mcrEnableOrderCompletion(this);
            }
            else
            {
                mcrEnableOrderCompletionSKS = RetailMCRChannelTable::mcrEnableOrderCompletionFindByUser();
            }
        }

        if (mcrEnableOrderCompletionSKS)
        {
            return;
        }

        boolean isCreditCardPaymentTypeSKS = this.isCreditCardPaymentType();
        if (!this.CreditCardCustRefId && this.InvoiceAccount)
        {
            if ((this.SalesType == SalesType::Sales || this.SalesType == SalesType::Journal) && isCreditCardPaymentTypeSKS)
            {
                creditCardCustSKS = CreditCardCust::sKS_CC_FindDefaultCardForCust(this.InvoiceAccount, this.TableId, this.RecId);
                if (creditCardCustSKS)
                {
                    this.CreditCardCustRefId = creditCardCustSKS.RecId;
                }
            }
        }

        if (this.CreditCardCustRefId && !isCreditCardPaymentTypeSKS)
        {
            this.CreditCardCustRefId = 0;
        }

        // Refresh to update any other form controls displaying this field.
        if (FormDataUtil::isFormDataSource(this))
        {
            FormDataUtil::getFormDataSource(this).research(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCreditCard</Name>
				<Source><![CDATA[
    public boolean checkCreditCard()
    {
        boolean retValue, mustResetCreditCardCustRefIdSKS;
        SKS_PP_Setup sksParmsLoc = SKS_PP_Setup::find();

        if (CustParameters::useCreditCardModule() && sksParmsLoc.ModCC == NoYes::Yes)
        {
            if (!RetailMCRChannelTable::mcrEnableOrderCompletion(this))
            {
                if (this.payment().CreditCardPaymentType == CreditCardPaymentType::CreditCard)
                {
                    if (!this.CreditCardCustRefId && sksParmsLoc.CCPLEnablePayLinks == NoYes::Yes)
                    {
                        String50 payFabricCustomerNbr;
                        if (this.custTable_InvoiceAccount().OneTimeCustomer)
                        {
                            payFabricCustomerNbr = SKS_CC_PayFabricWalletHandler::getPayFabricCustomerNbrForOneTimeCust(
                                this.TableId,
                                this.RecId,
                                this.InvoiceAccount);
                        }
                        else
                        {
                            payFabricCustomerNbr = this.InvoiceAccount;
                        }
                        
                        SKS_CC_PayLinkQueue payLinkQueueCheck = SKS_CC_PayLinkQueue::FindByRefWithTypeAndStatus(
                            this.TableId,
                            this.RecId,
                            SKS_CC_PayLinkProcessStatus::Pending,
                            SKS_CC_PayLinkTransactionType::PayLink,
                            payFabricCustomerNbr);

                        if (payLinkQueueCheck)
                        {
                            // Credit card ref Id forced to an invalid number to bypass validation
                            // since pending PayLink exists for this sales order.
                            this.CreditCardCustRefId = 999;
                            mustResetCreditCardCustRefIdSKS = true;
                        }
                    }
                }
            }
        }

        retValue = next checkCreditCard();

        if (mustResetCreditCardCustRefIdSKS)
        {
            this.CreditCardCustRefId = 0;
        }

        return retValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custLastWalletLinkStatus</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethod]
    public display SKS_CC_PayLinkProcessStatus custLastWalletLinkStatus()
    {
        SKS_CC_PayLinkProcessStatus lastWalletLinkStatus = SKS_CC_PayLinkProcessStatus::NA;
        
        if (this.InvoiceAccount)
        {
            SKS_CC_PayLinkQueue payLinkQueue;

            select firstonly1 RecId, Status from payLinkQueue
                order by RecId desc
                where payLinkQueue.AccountNum == this.InvoiceAccount
                && payLinkQueue.TransType == SKS_CC_PayLinkTransactionType::WalletLink;

            if (payLinkQueue.RecId)
            {
                lastWalletLinkStatus = payLinkQueue.Status;
            }
        }
          
        return lastWalletLinkStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custHasActivePFCreditCard</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethod]
    public display NoYes custHasActivePFCreditCard()
    {
        NoYes hasActivePFCreditCard;
        
        if (this.InvoiceAccount)
        {
            CreditCardCust creditCardCust_SKS;

            while select ExpiryDate from creditCardCust_SKS
                order by RecId desc
                where creditCardCust_SKS.CustAccount == this.InvoiceAccount
            {
                if (creditCardCust_SKS.ExpiryDate && CreditCard::checkExpireDate(creditCardCust_SKS.ExpiryDate))
                {
                    hasActivePFCreditCard = NoYes::Yes;
                    break;
                }
            }
        }
          
        return hasActivePFCreditCard;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>