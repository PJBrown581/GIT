<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_ZA_STANDARD_XML</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_ZA_STANDARD_XML extends SKS_EFT_Format_ISO_20022_001001003_FD
/// </summary>
class SKS_EFT_Format_ZA_STANDARD_XML extends SKS_EFT_Format_ISO_20022_001001003_FD
{
    #define.FormatVersion('20230313')
    #define.SSVS('SSVS')
    #define.ICM('ICM')
    #define.ENCR('ENCR')
    #define.DOM_URGP('DOM-URGP')
    #define.DOM_NURG('DOM-NURG')
    int BOPCatgyTp=0;
    str BOPCtgyCd;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf()
    {
        //------------------------------------------------------------------------------------------------------
        //      2.27: CdtTrfTxInf
        //          2.28: PmtId
        //          2.31: PmtTpInf
        //          2.42: Amt
        //          2.51: ChrgBr
        //          2.52: ChqInstr
        //          2.77: CdtrAgt
        //          2.79: Cdtr
        //          2.80: CdtrAcct
        //          2.98: RmtInf
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeCdtTrfTxInf;       


        //      2.27: CdtTrfTxInf
        nodeCdtTrfTxInf = nodePmtInf.appendChild(xmlDoc.createElement('CdtTrfTxInf'));
    
        //          2.28: PmtId
        this.node_CdtTrfTxInf_PmtId(nodeCdtTrfTxInf);
    
        //          2.31 PmtTpInf
        this.node_CdtTrfTxInf_PmtTpInf(nodeCdtTrfTxInf);
    
        //          2.42: Amt
        this.node_CdtTrfTxInf_Amt(nodeCdtTrfTxInf);
    
        this.node_CdtTrfTxInf_XchgRateInf(nodeCdtTrfTxInf);

        //          2.51: ChrgBr
        this.node_CdtTrfTxInf_ChrgBr(nodeCdtTrfTxInf);
    
        //          2.52 ChqInstr
        if(mSKS_EFT_FileFormatPaymSpec.UseCheckNumber == NoYes::Yes || subStr(mSKS_EFT_FileDetail.PaymSpec, 1, 3) == 'CHK')
        {
            this.node_CdtTrfTxInf_ChqInstr(nodeCdtTrfTxInf);
        }
    
        if(mSKS_EFT_FileDetail.FormatId != 'ZA-STANDARD-XML-MZ')
        {
            //          2.71: IntrmyAgt1
            this.node_CdtTrfTxInf_IntrmyAgt1(nodeCdtTrfTxInf);
        }
    
        //          2.77: CdtrAgt
        this.node_CdtTrfTxInf_CdtrAgt(nodeCdtTrfTxInf);
    
        //          2.79: Cdtr
        this.node_CdtTrfTxInf_Cdtr(nodeCdtTrfTxInf);
    
        //          2.80: CdtrAcct
        this.node_CdtTrfTxInf_CdtrAcct(nodeCdtTrfTxInf);
    
        //          2.82: InstrForCdtrAgt
        this.node_CdtTrfTxInf_InstrForCdtrAgt(nodeCdtTrfTxInf);
    
        //          2.86: Purp
        this.node_CdtTrfTxInf_Purp(nodeCdtTrfTxInf);
    
        //          2.89: RgltryRptg
        this.node_CdtTrfTxInf_RgltryRptg(nodeCdtTrfTxInf);
    
        //          2.91: RltdRmtInf
        this.node_CdtTrfTxInf_RltdRmtInf(nodeCdtTrfTxInf);
    
        //          2.98: RmtInf
        this.node_CdtTrfTxInf_RmtInf(nodeCdtTrfTxInf);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_XchgRateInf</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_CdtTrfTxInf_XchgRateInf
    /// </summary>
    /// <param name = "_nodeCdtTrfTxInf">_nodeCdtTrfTxInf</param>
    protected void node_CdtTrfTxInf_XchgRateInf(XmlElement _nodeCdtTrfTxInf)
    {
        XmlElement nodeXchgRateInf;
        str value       = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('XchgRateInf', mSKS_EFT_FileDetail.RecId));
        str ctrctId       = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('XchgRateInfCtrctId', mSKS_EFT_FileDetail.RecId));

        if(value || ctrctId)
        {
            nodeXchgRateInf= _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('XchgRateInf'));

            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeXchgRateInf, 'RateTp', value);

            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeXchgRateInf, 'CtrctId', ctrctId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_InstrForCdtrAgt</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_InstrForCdtrAgt(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.82: InstrForCdtrAgt
        //              InstrInf
        //------------------------------------------------------------------------------------------------------

        XmlElement nodeInstrForCdtrAgtId;
        str        value,Ent;

        value       = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('CustomsControlNumber', mSKS_EFT_FileDetail.RecId));
        Ent         = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('ENT', mSKS_EFT_FileDetail.RecId));            
       

        //           InstrForCdtrAgt
        if(mSKS_EFT_FileDetail_VendAddress.BeneName && mSKS_EFT_FileDetail.PaymSpec != 'SSVS' && mSKS_EFT_FileDetail.PaymSpec != #DOM_URGP && mSKS_EFT_FileDetail.PaymSpec != #DOM_NURG)
        {
            nodeInstrForCdtrAgtId= _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('InstrForCdtrAgt'));
    
            //               InstrInf
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeInstrForCdtrAgtId, 'InstrInf', 'ENT' +'|' + Ent+ '|'+ mSKS_EFT_FileDetail_VendAddress.BeneName);
        }

        //           InstrForCdtrAgt
            
        if(value)
        {
            nodeInstrForCdtrAgtId= _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('InstrForCdtrAgt'));
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeInstrForCdtrAgtId, 'InstrInf', 'CCN|' + value);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_Cdtr_Id</Name>
				<Source><![CDATA[
    protected void node_PmtInf_Cdtr_Id(XmlElement _nodeCdtr)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.79: Cdtr
        //          Id
        //------------------------------------------------------------------------------------------------------
    
        XmlElement nodeId;
        XmlElement nodePrvtId;
        XmlElement nodeOther;
        XmlElement nodeScheNm;
        str Gender,Status,CountryParBenType,Ent, cdtrId;

        Status            = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('ResStatus', mSKS_EFT_FileDetail.RecId));
        Gender            = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('Gender', mSKS_EFT_FileDetail.RecId));
        CountryParBenType = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('CounterPartyBenType', mSKS_EFT_FileDetail.RecId));
        Ent               = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('ENT', mSKS_EFT_FileDetail.RecId));
        cdtrId            = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('CreditorId', mSKS_EFT_FileDetail.RecId));


        if(status||CountryParBenType || CdtrId)
        {
            //          9.1.12: Id
            nodeId = _nodeCdtr.appendChild(xmlDoc.createElement('Id'));
    
            //              9.1.13: OrgId
            nodePrvtId = nodeId.appendChild(xmlDoc.createElement('PrvtId'));
    
            //                  9.1.15: Other
            nodeOther = nodePrvtId.appendChild(xmlDoc.createElement('Othr'));
    
            if(status && Gender && Ent == 'I') // For Individual
            {
                //                      9.1.1.16: Id
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeOther, 'Id', Status+'|'+Gender, 3);
            }
            else if(Status)//For Entity
            {
                //                      9.1.1.16: Id
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeOther, 'Id', Status); // DevOps19318
            }
            else if(cdtrId)
            {
                //                      9.1.1.16: Id
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeOther, 'Id', cdtrId); // SKS#DevOps:21032
            }

            if(CountryParBenType || cdtrId)
            {
                //                        ScheNm
                nodeScheNm = nodeOther.appendChild(xmlDoc.createElement('SchmeNm'));

                if(CountryParBenType)
                {
                    //                              Cd
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeScheNm, 'Cd', CountryParBenType, 1);
                }
                else if(cdtrId)
                {
                    //                              Cd
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeScheNm, 'Prtry', 'CDI');
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_GrpHdr_InitgPty_Id</Name>
				<Source><![CDATA[
    protected void node_GrpHdr_InitgPty_Id(XmlElement _nodeInitgPty)
    {
        //------------------------------------------------------------------------------------------------------
        //      1.8: InitgPty
        //          9.1.12: Id
        //              9.1.13: OrgId
        //                  9.1.15: Othr
        //                      9.1.1.16: Id
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeId;
        XmlElement nodeOrgId;
        XmlElement nodeOther;
        str        InitgPtyId;
    
        InitgPtyId = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('InitgPtyId', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank));

        if(InitgPtyId)
        {
            //          9.1.12: Id
            nodeId = _nodeInitgPty.appendChild(xmlDoc.createElement('Id'));
    
            //              9.1.13: OrgId
            nodeOrgId = nodeId.appendChild(xmlDoc.createElement('OrgId'));
    
            //                  9.1.15: Other
            nodeOther = nodeOrgId.appendChild(xmlDoc.createElement('Othr'));
    
            //                      9.1.1.16: Id
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeOther, 'Id', InitgPtyId, 35);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_BtchBookg</Name>
				<Source><![CDATA[
    protected void node_PmtInf_BtchBookg(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.23 BtchBookg
        //------------------------------------------------------------------------------------------------------
        str BtchBookg;
        boolean printBatchBooking = true;

        BtchBookg = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('BtchBookg', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank));
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #SSVS:
            case #ICM:
                printBatchBooking = false;
                break;
        }
        if(printBatchBooking)
        {
            if(BtchBookg == 'Y')
            {
                //              2.3: BtchBookg
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodePmtInf, 'BtchBookg', 'true');
            }
            else
            {
                //              2.3: BtchBookg
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodePmtInf, 'BtchBookg', 'false');
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_Cdtr_Nm</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_Cdtr_Nm(XmlElement _nodeCdtr)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.79: Cdtr
        //              Nm
        //------------------------------------------------------------------------------------------------
        //          Nm
        int len;
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #SSVS)
        {
            len = 70;
        }
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #ICM          ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #DOM_URGP     ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #DOM_NURG)
        {
            len = 66;
        }
        else
        {
            len = 35;
        }

        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeCdtr, 'Nm', mRemittanceName, len, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_CdtrAcct</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_CdtrAcct(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.80: CdtrAcct
        //              Id
        //                  Othr
        //                      Id
        //---------------------------------------------------------------------------------------
        XmlElement nodeCdtrAcct;
        XmlElement nodeCdtrAcctId;
        XmlElement nodeOther;
        str        iban, acctNum;        
        int acclen =34, ibanlen =35;

        iban    = mSKS_EFT_FileDetail.DepBankIBAN;
        acctNum = mSKS_EFT_FileDetail.DepBankAcct;

        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #SSVS:
                if(acctNum)
                {
                    iban = '';
                }
                break;
            case #DOM_URGP:
            case #DOM_NURG:
                acclen = 35;
                ibanlen =34;
                break;
        }
        if(iban || acctNum)
        {
            //          2.80: CdtrAcct
            nodeCdtrAcct = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('CdtrAcct'));
    
            //              Id
            nodeCdtrAcctId = nodeCdtrAcct.appendChild(xmlDoc.createElement('Id'));

            if(iban)
            {
                //                  IBAN
                nodeCdtrAcctId = SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdtrAcctId, 'IBAN', iban, ibanlen);
            }
            else if(acctNum)
            {
                //                  Othr
                nodeOther = nodeCdtrAcctId.appendChild(xmlDoc.createElement('Othr'));

                //                      Id
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeOther, 'Id', acctNum, acclen);
            }

            

            
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdtrAcct, 'Ccy', mSKS_EFT_FileDetail.PaymentCurrencyCode);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_CdtrAgt</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_CdtrAgt(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.77: CdtrAgt
        //              FinInstnId
        //                  ClrSysMmbId
        //                      MmbId
        //                  BrnchId
        //                      Id
        //                  BIC
        //                  Nm
        //                  PstlAdr
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeCdtrAgt;
        XmlElement nodeFinInstnId;
        XmlElement nodeClrSysMmbId;
        XmlElement nodeBrnchId;
        str swift, rtg, branchId;
        int len;
        boolean printBranchId;
        boolean printBIC, printMmbid;


        swift       = mSKS_EFT_FileDetail.DepSwiftNo;
        rtg         = mSKS_EFT_FileDetail.DepBankTransit;
        branchId    = mSKS_EFT_FileDetail_BenBank.BenBankBranch;

        if(branchId == '') //SKS#DevOps:21362
        {
            branchId =  mSKS_EFT_FileDetail.DepBankTransit;
        }

        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #SSVS:
                swift = '';
                printMmbid=true;
                printBranchId = true;
                len = 8;
                break;
            case #ICM:
                len = 11;
                if(swift)
                {
                    printBIC = true;
                }
                else if(rtg)
                {
                    printMmbid=true;
                }
                printBranchId = true;
                break;
            case #DOM_URGP:
            case #DOM_NURG:
                printBIC = true;
                printMmbid=true;
                len = 15;
                break;
            default:
                if(swift)
                {
                    printBIC = true;
                }
                else if(rtg)
                {
                    printMmbid=true;
                    len = 15;
                    break;
                }
        }

        if(printBIC || printMmbid ||
           mSKS_EFT_FileDetail_BenBank.BenBankName || mSKS_EFT_FileDetail_BenBank.BenBankCountryRegionId)
        {
            //          2.77: CdtrAgt
            nodeCdtrAgt = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('CdtrAgt'));
    
            //              FinInstnId
            nodeFinInstnId = nodeCdtrAgt.appendChild(xmlDoc.createElement('FinInstnId'));

            if(printBIC)
            {
                //                  BIC
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeFinInstnId, 'BIC', swift, 0, false);
            }
            if(printMmbid)
            {
                //                  ClrSysMmbId
                nodeClrSysMmbId = nodeFinInstnId.appendChild(xmlDoc.createElement('ClrSysMmbId'));

                //                      MmbId
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeClrSysMmbId, 'MmbId', rtg, len);
            }

            //                  Nm
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeFinInstnId, 'Nm', this.CharacterReplacement(mSKS_EFT_FileDetail_BenBank.BenBankName), 0, false);
            
            if(mSKS_EFT_FileDetail_BenBank.BenBankCountryRegionId)
            {
                //                  PstlAdr
                this.node_PstlAdr(nodeFinInstnId, mSKS_EFT_FileDetail_BenBank.BenBankCountryRegionId, '', '', '', 0, '', '', true);
            }
            if(branchId && printBranchId)//SKS_VSTS_14085
            {
                //                  BrnchId
                nodeBrnchId = nodeCdtrAgt.appendChild(xmlDoc.createElement('BrnchId'));

                //                      Id
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeBrnchId, 'Id', branchId, 4);//SKS_VSTS_14085
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_ChrgBr</Name>
				<Source><![CDATA[
    protected void node_PmtInf_ChrgBr(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.24 ChrgBr
        //------------------------------------------------------------------------------------------------------
        
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode != #SSVS)
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodePmtInf, 'ChrgBr', this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('ChrgBr', mSKS_EFT_FileDetail.RecId)), 0, false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>SplitPurposeCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// method to split the purpose code based on the -
    /// </summary>
    /// <param name = "value">value</param>
    /// <returns>container</returns>
    protected container SplitPurposeCode(str value)//DevOps19957
    {
        List            strList = new List(Types::String);
        container       PurposeCode;
        ListIterator    iterator;
    
        strlist = strSplit(value,'-');
        iterator = new ListIterator(strlist);
    
        while(iterator.more())
        {
            PurposeCode += iterator.value();
            iterator.next();
        }
    
        return PurposeCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_RgltryRptg</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_RgltryRptg(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.89: RgltryRptg
        //              Dtls
        //                  Inf
        //------------------------------------------------------------------------------------------------------
    
        XmlElement      nodeRgltryRptg;
        XmlElement      nodeDtls;
        XmlElement      currentElement;
        str  BOPSubCtgyCd;
        container CategoryPurpose;
        BOPCatgyTp =1;

        msks_EFT_FileDetail_PaymentLine = sks_EFT_FileDetail_PaymentLine::find(mSKS_EFT_FileDetail.RecId);
        CategoryPurpose = this.SplitPurposeCode(msks_EFT_FileDetail_PaymentLine.BankCentralBankPurposeCode);//DevOps19957
        BOPCtgyCd = conpeek(CategoryPurpose,1);
        BOPSubCtgyCd = conpeek(CategoryPurpose,2);


        Switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #ICM:

                if(BOPCtgyCd || BOPSubCtgyCd)
                {
                    nodeRgltryRptg = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('RgltryRptg'));

                    nodeDtls = nodeRgltryRptg.appendChild(xmlDoc.createElement('Dtls'));

                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeDtls, 'Tp', int2Str(BOPCatgyTp));
                    
                    if(BOPCtgyCd)
                    {
                        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeDtls, 'Cd', BOPCtgyCd);
                    }
                    currentElement = SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeDtls, 'Amt', num2str(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1,0,2,1,0));
                
                    SKS_EFT_Format::xmlsetAttributeText(currentElement, 'Ccy', mSKS_EFT_FileDetail.PaymentCurrencyCode, 0, false);

                    if(BOPSubCtgyCd)
                    {
                        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeDtls, 'Inf', BOPSubCtgyCd);
                    }
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_RmtInf</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_RmtInf(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.98: RmtInf
        //              2.99: Ustrd
        //------------------------------------------------------------------------------------------------------
        SKS_EFT_FileDetail invSKS_EFT_FileDetail;
        XmlElement nodeRmtInf;       
        boolean firstRec = true;
        str invoiceString,invoiceStr;
        str        value,invoicePeriod;
        boolean    paymid=true;
        
        invoicePeriod = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('InvoicePeriod', mSKS_EFT_FileDetail.RecId));//DevOps20743
        
        value = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('AltRmtInf', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank));

        while select invSKS_EFT_FileDetail where invSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId
                    && invSKS_EFT_FileDetail.InvoiceNumber != ''
        {
            if(invSKS_EFT_FileDetail.PaymId && mSKS_EFT_FileDetail.FormatId != 'ZA-STANDARD-XML-MZ')
            {
                if(firstRec)
                {
                    //          2.98: RmtInf
                    nodeRmtInf = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('RmtInf'));
                    firstRec = false;
                }
  
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRmtInf, 'Ustrd', this.CharacterReplacement(invSKS_EFT_FileDetail.PaymId), 35, false);
                paymid = false;
            }
            else if(mSKS_EFT_FileDetail.PaymSpec == #SSVS && invoicePeriod == 'Total')//DevOps20031//DevOps20743
            {
                invoiceStr += strFmt('%1,', invSKS_EFT_FileDetail.InvoiceNumber);
            }
            else
            {
                invoiceString += strFmt('%1, ', invSKS_EFT_FileDetail.InvoiceNumber);
            }
        }
        if(mSKS_EFT_FileDetail.PaymSpec == #DOM_URGP || mSKS_EFT_FileDetail.PaymSpec == #DOM_NURG)
        {
            if(invoiceString)
            {
                //          2.98: RmtInf
                nodeRmtInf = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('RmtInf'));

                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRmtInf, 'Ustrd', this.CharacterReplacement(substr(invoiceString, 1, strLen(invoiceString)-2)), 35, false);
            }
            else if(mSKS_EFT_FileDetail_BankAccount.WOrdPartyName)
            {
                //          2.98: RmtInf
                nodeRmtInf = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('RmtInf'));

                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRmtInf, 'Ustrd', this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyName), 35, false);
            }
        }
        else if(value && paymid)
        {
            //          2.98: RmtInf
            nodeRmtInf = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('RmtInf'));

            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRmtInf, 'Ustrd', value, 35);
        }
        else if(invoiceStr)//DevOps20031
        {
            //          2.98: RmtInf
            nodeRmtInf = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('RmtInf'));

            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRmtInf, 'Ustrd', this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyName+' '+mSKS_EFT_FileDetail.PaymentReference+','+subStr(invoiceStr, 1, strLen(invoiceStr)-1)));
        }
        else if(invoiceString)
        {
            //          2.98: RmtInf
            nodeRmtInf = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('RmtInf'));

            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRmtInf, 'Ustrd', this.CharacterReplacement(subStr(invoiceString, 1, strLen(invoiceString)-2)));
        }
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_Cdtr_PstlAdr</Name>
				<Source><![CDATA[
    protected void node_PmtInf_Cdtr_PstlAdr(XmlElement _nodeCdtr)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.19: Cdtr
        //          PstlAdr
        //----------------------------------------------------------------------------------------------
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #ENCR:
                this.node_PstlAdr(_nodeCdtr, mRemittanceCountryRegionId, mRemittanceAdrLine1, mRemittanceZipCode, mRemittanceCity, 0, mRemittanceAdrLine2, mRemittanceState, true);
                break;
            case #ICM:
                this.node_PstlAdr(_nodeCdtr, mRemittanceCountryRegionId, mRemittanceAdrLine1, mRemittanceZipCode, mRemittanceCity, 0, mRemittanceAdrLine2, mRemittanceState);
                break;
           
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_Dbtr_Nm</Name>
				<Source><![CDATA[
    protected void node_PmtInf_Dbtr_Nm(XmlElement _nodeDbtr)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.19: Dbtr
        //          Nm
        //------------------------------------------------------------------------------------------------------
        int len;

        //          Nm
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #SSVS:
                len = 30;
                break;
            case #ICM:
                len = 70;
                break;
            default:
                len = 140;
                break;
        }
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeDbtr, 'Nm', this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyName), len, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_Dbtr_PstlAdr</Name>
				<Source><![CDATA[
    protected void node_PmtInf_Dbtr_PstlAdr(XmlElement _nodeDbtr)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.19: Dbtr
        //          PstlAdr
        //------------------------------------------------------------------------------------------------

        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #ENCR:
                this.node_PstlAdr(_nodeDbtr, mSKS_EFT_FileDetail_BankAccount.WOrdPartyCountryRegionId, mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr, mSKS_EFT_FileDetail_BankAccount.WOrdPartyZipCode, mSKS_EFT_FileDetail_BankAccount.WOrdPartyCity, 0, mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr2, mSKS_EFT_FileDetail_BankAccount.WOrdPartyState, true);
                break;
            case #ICM:
            case #DOM_NURG:
            case #DOM_URGP:
                this.node_PstlAdr(_nodeDbtr, mSKS_EFT_FileDetail_BankAccount.WOrdPartyCountryRegionId, '', '', '', 0, '', '');
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_DbtrAcct</Name>
				<Source><![CDATA[
    protected void node_PmtInf_DbtrAcct(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.20: DbtrAcct
        //          Id
        //              IBAN
        //              Othr
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeDbtrAcct;
        XmlElement nodeDbtrAcctId;
        XmlElement nodeOthr;
        XmlElement nodeDbtrAcctTp;
        str value, iban, acctNum;
        boolean printDbtrAcctType = true;
        int     acctNumlen = 34;

        iban    = mSKS_EFT_FileDetail.BankBankIBAN;
        acctNum = mSKS_EFT_FileDetail.BankBankAcct;

        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #SSVS:
                if(acctNum)
                {
                    iban = '';
                }
                printDbtrAcctType = false;
                break;
            case #ICM:
                iban        = '';
                acctNumlen  = 13;
                break;
            case #DOM_URGP:
            case #DOM_NURG:
                acctNumlen=35;
                break;
        }
        if(iban || acctNum)
        {
            //      2.20: DbtrAcct
            nodeDbtrAcct = nodePmtInf.appendChild(xmlDoc.createElement('DbtrAcct'));
    
            //          Id
            nodeDbtrAcctId = nodeDbtrAcct.appendChild(xmlDoc.createElement('Id'));
    
            if(iban)
            {
                //              IBAN
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeDbtrAcctId, 'IBAN', iban, 35);
            }
            else if(acctNum)
            {
                //          Othr
                nodeOthr = nodeDbtrAcctId.appendChild(xmlDoc.createElement('Othr'));
    
                //              Id
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeOthr, 'Id', acctNum, acctNumlen);
            }
    
            if(printDbtrAcctType)
            {
                //          Tp
                if(mSKS_EFT_FileDetail.BankAcctType == BankAccountType::CheckingAccount) // Checking
                {
                    value = 'CACC';
                }
                else  // Savings
                {
                    value = 'SVGS';
                }
    
                nodeDbtrAcctTp = nodeDbtrAcct.appendChild(xmlDoc.createElement('Tp'));

                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeDbtrAcctTp, 'Cd', value);
            }
            //          Ccy
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeDbtrAcct, 'Ccy', mSKS_EFT_FileDetail.CurrencyCode);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_DbtrAgt</Name>
				<Source><![CDATA[
    protected void node_PmtInf_DbtrAgt(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.21: DbtrAgt
        //          FinInstnId
        //              ClrSysMmbId
        //                  MmbId
        //              BIC (base class)
        //              PstlAdr
        //                  Ctry
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeDbtrAgt;
        XmlElement nodeFinInstnId;
        XmlElement nodeClrSysMmbId;
        XmlElement nodePstlAdr;
        str swift, rtg;
        int len;

        swift = mSKS_EFT_FileDetail.BankBankSwiftNo;
        rtg   = mSKS_EFT_FileDetail.BankBankTransit;

        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #SSVS:
            case #ICM:
                swift = '';
                len = 8;
                break;
            default:
                len = 15;
                break;
        }

        if(swift  ||
           rtg    ||
           mSKS_EFT_FileDetail_BankAccount.WOrdPartyCountryRegionId)
        {
            //      2.21: DbtrAgt
            nodeDbtrAgt = nodePmtInf.appendChild(xmlDoc.createElement('DbtrAgt'));
    
            //          FinInstnId
            nodeFinInstnId = nodeDbtrAgt.appendChild(xmlDoc.createElement('FinInstnId'));
            
            if(swift)
            {
                //              BIC
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeFinInstnId, 'BIC', swift, 11, false);
            }
            if(rtg)
            {
                //              ClrSysMmbId
                nodeClrSysMmbId = nodeFinInstnId.appendChild(xmlDoc.createElement('ClrSysMmbId'));
               
                //                  MmbId
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeClrSysMmbId, 'MmbId', rtg, len, false);
            }

            //              PstlAdr
            nodePstlAdr = nodeFinInstnId.appendChild(xmlDoc.createElement('PstlAdr'));
    
            //                  Ctry
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePstlAdr, 'Ctry', this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_BankAccount.WOrdPartyCountryRegionId), 0, false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_PmtTpInf</Name>
				<Source><![CDATA[
    protected void node_PmtInf_PmtTpInf(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.6: PmtTpInf
        //          2.7: InstrPrty
        //          2.8: SvcLvl
        //          2.11: LclInstrm
        //          2.14: CtgyPurp
        //------------------------------------------------------------------------------------------------------
        XmlElement nodePmftTpInf;        
    
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode != #ICM)
        {
            //      2.6: PmtTpInf
            nodePmftTpInf = _nodePmtInf.appendChild(xmlDoc.createElement('PmtTpInf'));
    
            //          2.7: InstrPrty
            this.node_PmtInf_PmtTpInf_InstrPrty(nodePmftTpInf);

            //          2.8: SvcLvl
            this.node_PmtInf_PmtTpInf_SvcLvl_Cd(nodePmftTpInf);
    
            //          2.11: LclInstrm
            this.node_PmtInf_PmtTpInf_LclInstrm(nodePmftTpInf);
    
            //          2.14: CtgyPurp
            this.node_PmtInf_PmtTpInf_CtgyPurp(nodePmftTpInf);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_PmtTpInf_SvcLvl_Cd</Name>
				<Source><![CDATA[
    protected void node_PmtInf_PmtTpInf_SvcLvl_Cd(XmlElement _nodePmftTpInf)
    {
        //------------------------------------------------------------------------------------------------------
        //              2.9: Cd
        //------------------------------------------------------------------------------------------------------
        str value;
        XmlElement nodeSvcLvl;
        SKS_EFT_FileDetail tmpSKS_EFT_FileDetail;
    
        //SKS_DevOps_17638--->
        boolean over5Miln = true;

        while select tmpSKS_EFT_FileDetail
            order by tmpSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur
            where
                tmpSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                tmpSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                tmpSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary &&
                tmpSKS_EFT_FileDetail.BankAccountId == mSKS_EFT_FileDetail.BankAccountId &&
                tmpSKS_EFT_FileDetail.EffectiveDate == mSKS_EFT_FileDetail.EffectiveDate &&
                tmpSKS_EFT_FileDetail.PaymMode == mSKS_EFT_FileDetail.PaymMode &&
                tmpSKS_EFT_FileDetail.PaymSpec == mSKS_EFT_FileDetail.PaymSpec &&
                tmpSKS_EFT_FileDetail.PaymentCurrencyCode == mSKS_EFT_FileDetail.PaymentCurrencyCode
        {
            if(tmpSKS_EFT_FileDetail.TransactionCode == #ENCR && tmpSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1 < 5000000)
            {
                over5Miln = false;
            }
        }
        //SKS_DevOps_17638<---
       

        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)     //SKS#DevOps:17638
        {
            case #ENCR:
                if(over5Miln)
                {
                    value = 'URGP';
                }
                else
                {
                    value = 'NORM';
                }
                break;
            case #DOM_NURG:
                value = 'NURG';
                break;
            case #DOM_URGP:
                value = 'URGP';
                break;
        }
        if(value)
        {
             
            //          2.8: SvcLvl
            nodeSvcLvl = _nodePmftTpInf.appendChild(xmlDoc.createElement('SvcLvl'));

            //              2.9: Cd
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeSvcLvl, 'Cd', value);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_Purp</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_Purp(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.86: Purp
        //              Prtry
        //------------------------------------------------------------------------------------------------------
        XmlElement nodePurp;
        str        value;
    
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #SSVS:
                value = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('Purp', mSKS_EFT_FileDetail.RecId));
                break;
        }
                
        if(value)
        {
            //          2.86: Purp
            nodePurp = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('Purp'));

            //              2.88: Prtry
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePurp, 'Prtry', value, 20);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_PmtTpInf_InstrPrty</Name>
				<Source><![CDATA[
    protected void node_PmtInf_PmtTpInf_InstrPrty(XmlElement _nodePmftTpInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.7: InstrPrty
        //------------------------------------------------------------------------------------------------------
        str     value;

        value = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('InstrPrty', mSKS_EFT_FileDetail.RecId));
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #DOM_URGP:
                value = 'HIGH';
                break;
            case #DOM_NURG:
                value = 'NORM';
                break;
        }
        if(value)
        {
            //          InstrPrty
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodePmftTpInf, 'InstrPrty', value); 
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_PmtTpInf_LclInstrm</Name>
				<Source><![CDATA[
    protected void node_PmtInf_PmtTpInf_LclInstrm(XmlElement _nodePmftTpInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.11: LclInstrm
        //------------------------------------------------------------------------------------------------------
        XmlElement  nodeLclInstrm;
        str         value;
        
        value = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('LclInstrm', mSKS_EFT_FileDetail.RecId));

        if(value && mSKS_EFT_FileFormatPaymSpec.TransactionCode != #SSVS)
        {
            //          2.11: LclInstrm
            nodeLclInstrm = _nodePmftTpInf.appendChild(xmlDoc.createElement('LclInstrm'));
    
            //              Prtry
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeLclInstrm, 'Prtry', value);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_PmtTpInf_CtgyPurp</Name>
				<Source><![CDATA[
    protected void node_PmtInf_PmtTpInf_CtgyPurp(XmlElement _nodePmftTpInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.14: CtgyPurp
        //------------------------------------------------------------------------------------------------------
        XmlElement  nodeCtgyPurp;
        str value;

        value = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('CtgyPurp', mSKS_EFT_FileDetail.RecId));

        if(value)
        {
            //          2.12: CtgyPurp
            nodeCtgyPurp = _nodePmftTpInf.appendChild(xmlDoc.createElement('CtgyPurp'));
    
            //              Prtry
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCtgyPurp, 'Prtry', value);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>