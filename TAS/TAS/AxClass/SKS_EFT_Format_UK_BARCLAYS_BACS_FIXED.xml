<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_UK_BARCLAYS_BACS_FIXED</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_UK_BARCLAYS_BACS_FIXED Extends SKS_EFT_Format
/// </summary>
class SKS_EFT_Format_UK_BARCLAYS_BACS_FIXED Extends SKS_EFT_Format
{
    #define.FormatVersion('20220603')

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    protected void formatStructure()
    {
        while(mSKS_EFT_FileDetail)
        {
            // Get SKS_EFT_FileFormatPaymSpec
            this.getSKS_EFT_FileFormatPaymSpec();

            mSKS_EFT_FileDetail_BankAccount = SKS_EFT_FileDetail_BankAccount::find(mSKS_EFT_FileDetail.RecId);

            this.rec_Detail();

            next mSKS_EFT_FileDetail;

        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Detail</Name>
				<Source><![CDATA[
    boolean rec_Detail()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        str paymentDate;

        //1 Destination sort code
        sb.Append(SKS_PP_StringFormats::strFill(6, this.CharacterReplacement(mSKS_EFT_FileDetail.DepBankTransit), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //2 Destination account number
        sb.Append(SKS_PP_StringFormats::strFill(8, this.CharacterReplacement(mSKS_EFT_FileDetail.DepBankAcct), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //3 Destination account type
        sb.Append(SKS_PP_StringFormats::strFill(1, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //4 Bacs code
        sb.Append(SKS_PP_StringFormats::strFill(2, '99', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //5 Debit sort code
        sb.Append(SKS_PP_StringFormats::strFill(6, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //6 Debit account number
        sb.Append(SKS_PP_StringFormats::strFill(8, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //7 Free format
        sb.Append(SKS_PP_StringFormats::strFill(4, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //  8       Amount
        sb.Append(SKS_PP_StringFormats::strMoney(this.getPositiveAmount(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur), 11));

        //9 originator name
        sb.Append(SKS_PP_StringFormats::strFill(18, this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyName), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //10 payment reference
        sb.Append(SKS_PP_StringFormats::strFill(18, this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //11 destination account name
        sb.Append(SKS_PP_StringFormats::strFill(18, this.CharacterReplacement(mSKS_EFT_FileDetail.AccountName), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //12 posting date
        paymentDate = SKS_PP_StringFormats::strDateYYMMDD(mSKS_EFT_FileDetail.PaymentTransDate);
        sb.Append(SKS_PP_StringFormats::strFill(6, paymentDate, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectPaymentRecords</Name>
				<Source><![CDATA[
    protected void selectPaymentRecords()
    {
        //------------------------------------------------------------------------------------------------------
        // Standard payment selction
        // Override if different selection is need for a format
        //------------------------------------------------------------------------------------------------------
    
        //Order by clause must match the clause in the SKS_EFT_Processing.SumByPayment
        select * from mSKS_EFT_FileDetail
            join mSKS_EFT_FileDetail_VendAddress
                order by mSKS_EFT_FileDetail.PaymentCompany, //SKS_VSTS_12809
                   mSKS_EFT_FileDetail.RecordSection,
                   mSKS_EFT_FileDetail.PaymMode,
                   mSKS_EFT_FileDetail.BankAccountId,
                   mSKS_EFT_FileDetail.PaymentCurrencyCode,
                   mSKS_EFT_FileDetail.PaymSpec,
                   mSKS_EFT_FileDetail.EffectiveDate,
                   mSKS_EFT_FileDetail.DepCountryRegionId,
                   mSKS_EFT_FileDetail.RecordType,
                   mSKS_EFT_FileDetail.AccountNum,
                   mSKS_EFT_FileDetail.PaymentReference,
                   mSKS_EFT_FileDetail.RecId
          where mSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                mSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                mSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_VendAddress.RefRecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>