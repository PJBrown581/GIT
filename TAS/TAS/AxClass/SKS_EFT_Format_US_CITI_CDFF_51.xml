<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_US_CITI_CDFF_51</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_US_CITI_CDFF_51 extends SKS_EFT_Format
/// </summary>
class SKS_EFT_Format_US_CITI_CDFF_51 extends SKS_EFT_Format
{
    #define.FormatVersion('20221027')
    #define.CCD('ACH-CCD')
    #define.FT('FT')
    #define.BKT('BKT')    
    #define.HATCH('#')

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    protected void formatStructure()
    {
        ;
    
        while(mSKS_EFT_FileDetail)
        {
            // Get SKS_EFT_Bank
            this.getSKS_EFT_Bank();
    
            // Get SKS_EFT_VendorPaym
            this.getSKS_EFT_VendorPaym();
    
            //Details
            this.rec_Main();
    
            next mSKS_EFT_FileDetail;
        }
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Main</Name>
				<Source><![CDATA[
    //1        Placeholder
    //2        Country Code
    //3        Payment Method
    //4        Value Date
    //5        Priority Flag
    //6        PreFormat Group Code
    //7        PreFormat Code
    //8        Payment Type
    //9        Payment Currency
    //10    Payment Amount
    //11    Debit Party Account or Other ID Type
    //12    Debit Account / Debit Party Account
    //13    Debit Party Name
    //14    Debit Party Advice Type
    //15    Debit Bank Routing Code
    //16    Debit Bank Name
    //17    Debit Bank Address Line 1
    //18    Debit Bank Address Line 2
    //19    Debit Bank Address Line 3
    //20    Placeholder
    //21    Number of Credit Parties
    //22    Charges Indicator
    //23    Processing Date
    //24    Debit Account Currency
    //25    Transaction Reference Number
    //26    Beneficiary Reference
    //27    Confidential
    //28    Intra-Company
    //29    Placeholder
    //30    Transaction Type
    //31    Entry Description
    //32    Individual Company ID
    //33    Pre-Note
    //34    Funds Type
    //35    Ordering Party ID Type
    //36    Ordering Party ID
    //37    Ordering Party Name
    //38    Ordering Party Address – Line 1
    //39    Ordering Party Address – Line 2
    //40    Ordering Party Address – Line 3
    //41    Credit Account
    //42    Beneficiary Is
    //43    Beneficiary Account or Other ID Type
    //44    Beneficiary Account or Other ID
    //45    Beneficiary Name
    //46    Beneficiary Advice Type
    //47    Beneficiary Address Line 1
    //48    Beneficiary Address Line 2
    //49    Beneficiary Address Line 3
    //50    Beneficiary Bank Routing Method
    //51    Beneficiary Bank Routing Code
    //52    Beneficiary Bank Account or Other ID Type
    //53    Beneficiary Bank Account or Other ID
    //54    Beneficiary Bank Advice Type
    //55    Beneficiary Bank Name
    //56    Beneficiary Bank Address Line 1
    //57    Beneficiary Bank Address Line 2
    //58    Beneficiary Bank Address Line 3
    //59    First Intermediary Bank Routing Method
    //60    First Intermediary Bank Routing Code
    //61    First Intermediary Bank Name
    //62    First Intermediary Bank Address Line 1
    //63    First Intermediary Bank Address Line 2
    //64    First Intermediary Bank Address Line 3
    //65    Second Intermediary Bank Account or Other ID Type
    //66    Second Intermediary Bank Account or Other ID
    //67    Second Intermediary Bank Advice Type
    //68    Second Intermediary Bank Name
    //69    Second Intermediary Bank Address – Line 1
    //70    Second Intermediary Bank Address – Line 2
    //71    Second Intermediary Bank Address – Line 3
    //72    Payment Details Line 1
    //73    Payment Details Line 2
    //74    Payment Details Line 3
    //75    Payment Details Line 4
    //76    Bank Details Line 1
    //77    Bank Details Line 2
    //78    Bank Details Line 3
    //79    Bank Details Line 4
    //80    Bank Details Line 5
    //81    Bank Details Line 6
    //82    Pre-Advice Flag
    //83    Pre-Advice Details
    //84    Addenda Information
    //85    Memo Details
    boolean rec_Main()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        boolean isdebit;
        boolean isSWIFT;
        str charges;
        ;
        //If CCD, determine if Credit or Debit
        switch(mSKS_EFT_FileDetail.PaymSpec)
        {
            Case #CCD:
                if(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur > 0)
                {
                    isdebit = true;
                }
                break;
            case #FT:
                //Check for Routing number/swift number
                if(mSKS_EFT_FileDetail.DepBankTransit == '')
                {
                    isSWIFT = true;
                }
                break;
            default:
                isdebit = false;
                isSWIFT = false;
                break;
        }
    
        //1        Placeholder
        sb.Append(this.wrapField()); //CCD-Credit/Debit, FT
    
        //2        Country Code
        sb.Append(this.wrapField('US')); //CCD-Credit/Debit, FT
    
        //3        Payment Method
        switch(mSKS_EFT_FileDetail.PaymSpec)
        {
            Case #CCD:
                if(isdebit)
                {
                    sb.Append(this.wrapField('ACHI')); //CCD-Debit
                }
                else
                {
                    sb.Append(this.wrapField('ACH')); //CCD-Credit
                }
                break;
            case #BKT:
                sb.Append(this.wrapField('BKT'));
                break;
            default:
                sb.Append(this.wrapField('FT')); //FT
                break;
        }
    
        //4        Value Date
        switch(mSKS_EFT_FileDetail.PaymSpec)
        {
            Case #CCD:
                sb.Append(this.wrapField('')); //CCD-Credit/Debit
                break;
            default:
                sb.Append(this.wrapField(SKS_PP_StringFormats::strDateYYYYMMDD(mSKS_EFT_FileDetail.EffectiveDate, DateSeparator::None))); //FT
                break;
        }
    
        //5        Priority Flag
        sb.Append(this.wrapField('')); //CCD-Credit/Debit, FT
    
        //6        PreFormat Group Code
        sb.Append(this.wrapField('')); //CCD-Credit/Debit, FT
    
        //7        PreFormat Code
        sb.Append(this.wrapField('')); //CCD-Credit/Debit, FT
    
        //8        Payment Type
        sb.Append(this.wrapField('')); //CCD-Credit/Debit, FT
    
        //9        Payment Currency
        sb.Append(this.wrapField('')); //CCD-Credit/Debit, FT
    
        //10    Payment Amount
        switch(mSKS_EFT_FileDetail.PaymSpec)
        {
            Case #CCD:
                sb.Append(this.wrapField(subStr(num2str(this.getPositiveAmount(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur),0,2,1,0),1,11))); //CCD-Credit/Debit
                break;
            default:
                sb.Append(this.wrapField(subStr(num2str(this.getPositiveAmount(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur),0,2,1,0),1,13))); //CCD-Credit/Debit
                break;
        }
    
        //11    Debit Party Account or Other ID Type
        sb.Append(this.wrapField('')); //CCD-Credit/Debit, FT
    
        //12    Debit Account / Debit Party Account
        switch(mSKS_EFT_FileDetail.PaymSpec)
        {
            Case #CCD:
                if(isdebit)
                {
                    sb.Append(this.wrapField(subStr(mSKS_EFT_FileDetail.DepBankAcct,1,17))); //CCD-Debit
                }
                else
                {
                    sb.Append(this.wrapField(subStr(mSKS_EFT_FileDetail.BankBankAcct,1,8))); //CCD-Credit
                }
                break;
            case #BKT:
                sb.Append(this.wrapField(subStr(mSKS_EFT_FileDetail.BankBankAcct, 1, 8)));
                break;
            default:
                sb.Append(this.wrapField(subStr(mSKS_EFT_FileDetail.BankBankAcct,1,35))); //FT
                break;
        }
    
        //13    Debit Party Name
        switch(mSKS_EFT_FileDetail.PaymSpec)
        {
            Case #CCD:
                if(isdebit)
                {
                    sb.Append(this.wrapField(subStr(this.CharacterReplacement(mSKS_EFT_FileDetail.AccountName),1,30))); //CCD-Debit
                }
                else
                {
                    sb.Append(this.wrapField('')); //CCD-Credit
                }
                break;
            default:
                sb.Append(this.wrapField('')); //FT
                break;
        }
    
        //14    Debit Party Advice Type
        sb.Append(this.wrapField('')); //CCD-Credit/Debit, FT
    
        //15    Debit Bank Routing Code
        switch(mSKS_EFT_FileDetail.PaymSpec)
        {
            Case #CCD:
                if(isdebit)
                {
                    sb.Append(this.wrapField(subStr(mSKS_EFT_FileDetail.DepBankTransit,1,9))); //CCD-Debit
                }
                else
                {
                    sb.Append(this.wrapField('')); //CCD-Credit
                }
                break;
            default:
                sb.Append(this.wrapField('')); //FT
                break;
        }
    
        //16    Debit Bank Name
        sb.Append(this.wrapField('')); //CCD-Credit/Debit, FT
    
        //17    Debit Bank Address Line 1
        sb.Append(this.wrapField('')); //CCD-Credit/Debit, FT
    
        //18    Debit Bank Address Line 2
        sb.Append(this.wrapField('')); //CCD-Credit/Debit, FT
    
        //19    Debit Bank Address Line 3
        sb.Append(this.wrapField('')); //CCD-Credit/Debit, FT
    
        //20    Placeholder
        sb.Append(this.wrapField('')); //CCD-Credit/Debit, FT
    
        //21    Number of Credit Parties
        sb.Append(this.wrapField('')); //CCD-Credit/Debit, FT
    
        //22    Charges Indicator

        charges = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('Charges', mSKS_EFT_FileDetail.RecId));

        switch(mSKS_EFT_FileDetail.PaymSpec)
        {
            Case #FT:
            case #BKT:
                if(charges)
                {
                    sb.Append(this.wrapField(charges)); //FT
                }
                else
                {
                    sb.Append(this.wrapField('OUR')); //FT
                }
                break;
            default:
                sb.Append(this.wrapField('')); //CCD-Credit/Debit
                break;
        }
    
        //23    Processing Date
        switch(mSKS_EFT_FileDetail.PaymSpec)
        {
            Case #CCD:
                sb.Append(this.wrapField(SKS_PP_StringFormats::strDateYYYYMMDD(mSKS_EFT_FileDetail.EffectiveDate, DateSeparator::None))); //CCD-Credit/Debit
                break;
            default:
                sb.Append(this.wrapField('')); //FT
                break;
        }
    
        //24    Debit Account Currency
        sb.Append(this.wrapField('')); //CCD-Credit/Debit, FT
    
        //25    Transaction Reference Number
        sb.Append(this.wrapField(subStr(this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference),1,16))); //CCD-Credit/Debit, FT
    
        //26    Beneficiary Reference
        sb.Append(this.wrapField('')); //CCD-Credit/Debit, FT
    
        //27    Confidential
        sb.Append(this.wrapField('')); //CCD-Credit/Debit, FT
    
        //28    Intra-Company
        sb.Append(this.wrapField('')); //CCD-Credit/Debit, FT
    
        //29    Placeholder
        sb.Append(this.wrapField('')); //CCD-Credit/Debit, FT
    
        //30    Transaction Type
        switch(mSKS_EFT_FileDetail.PaymSpec)
        {
            Case #CCD:
                sb.Append(this.wrapField('CCD')); //CCD-Credit/Debit
                break;
            default:
                sb.Append(this.wrapField('')); //FT
                break;
        }
    
        //31    Entry Description
        sb.Append(this.wrapField('')); //CCD-Credit/Debit, FT
    
        //32    Individual Company ID
        sb.Append(this.wrapField('')); //CCD-Credit/Debit, FT
    
        //33    Pre-Note
        sb.Append(this.wrapField('')); //CCD-Credit/Debit, FT
    
        //34    Funds Type
        sb.Append(this.wrapField('')); //CCD-Credit/Debit, FT
    
        //35    Ordering Party ID Type
        sb.Append(this.wrapField('')); //CCD-Credit/Debit, FT
    
        //36    Ordering Party ID
        sb.Append(this.wrapField('')); //CCD-Credit/Debit, FT
    
        //37    Ordering Party Name
        switch(mSKS_EFT_FileDetail.PaymSpec)
        {
            Case #FT:
            case #BKT:
                sb.Append(this.wrapField(subStr(this.CharacterReplacement(mSKS_EFT_Bank.WOrdPartyName),1,35))); //FT
                break;
            default:
                sb.Append(this.wrapField('')); //CCD-Credit/Debit
                break;
        }
    
        //38    Ordering Party Address – Line 1
        sb.Append(this.wrapField('')); //CCD-Credit/Debit, FT
    
        //39    Ordering Party Address – Line 2
        sb.Append(this.wrapField('')); //CCD-Credit/Debit, FT
    
        //40    Ordering Party Address – Line 3
        sb.Append(this.wrapField('')); //CCD-Credit/Debit, FT
    
        //41    Credit Account
        switch(mSKS_EFT_FileDetail.PaymSpec)
        {
            Case #CCD:
                if(isdebit)
                {
                    sb.Append(this.wrapField(subStr(mSKS_EFT_FileDetail.BankBankAcct,1,8))); //CCD-Debit
                }
                else
                {
                    sb.Append(this.wrapField('')); //CCD-Credit
                }
                break;
            default:
                sb.Append(this.wrapField('')); //FT
                break;
        }
    
        //42    Beneficiary Is
        switch(mSKS_EFT_FileDetail.PaymSpec)
        {
            Case #FT:
            case #BKT:
                sb.Append(this.wrapField('NOT A BANK')); //FT
                break;
            default:
                sb.Append(this.wrapField('')); //CCD-Credit/Debit
                break;
        }
    
        //43    Beneficiary Account or Other ID Type
        switch(mSKS_EFT_FileDetail.PaymSpec)
        {
            Case #FT:
            case #BKT:
                sb.Append(this.wrapField('/ACCT/')); //FT
                break;
            default:
                sb.Append(this.wrapField('')); //CCD-Credit/Debit
                break;
        }
    
        //44    Beneficiary Account or Other ID
        switch(mSKS_EFT_FileDetail.PaymSpec)
        {
            Case #FT:
            case #BKT:
                sb.Append(this.wrapField(subStr(mSKS_EFT_FileDetail.DepBankAcct,1,34))); //FT
                break;
            default:
                if(isdebit)
                {
                    sb.Append(this.wrapField('')); //CCD-Debit
                }
                else
                {
                    sb.Append(this.wrapField(subStr(mSKS_EFT_FileDetail.DepBankAcct,1,17))); //CCD-Credit
                }
                break;
        }
    
        //45    Beneficiary Name
        switch(mSKS_EFT_FileDetail.PaymSpec)
        {
            Case #FT:
            case #BKT:
                sb.Append(this.wrapField(subStr(this.CharacterReplacement(mSKS_EFT_VendorPaym.WBeneName),1,35))); //FT
                break;
            default:
                if(isdebit)
                {
                    sb.Append(this.wrapField('')); //CCD-Debit
                }
                else
                {
                    if(mModule == SKS_EFT_Module::AP)
                    {
                        sb.Append(this.wrapField(subStr(this.CharacterReplacement(mSKS_EFT_VendorPaym.WBeneName),1,30))); //CCD-Credit
                    }
                    else
                    {
                        sb.Append(this.wrapField(subStr(this.CharacterReplacement(mSKS_EFT_FileDetail.AccountName),1,30))); //CCD-Credit
                    }
                }
                break;
        }
    
        //46    Beneficiary Advice Type
        sb.Append(this.wrapField(''));      //CCD-Credit/Debit, FT
    
        if(mSKS_EFT_FileDetail.PaymSpec == #BKT)
        {
            //47    Beneficiary Address Line 1
            sb.Append(this.wrapField(strLRTrim(subStr(this.CharacterReplacement(mSKS_EFT_VendorPaym.WBeneAddr + ' ' + mSKS_EFT_VendorPaym.WBeneAddr2),1,35))));   //SKS#DevOps:16329 //CCD-Credit/Debit, FT
            
            //48    Beneficiary Address Line 2
            sb.Append(this.wrapField(strLRTrim(subStr(this.CharacterReplacement(mSKS_EFT_VendorPaym.WBeneZipPostal + ' ' + mSKS_EFT_VendorPaym.WBeneCity),1,35))));   //SKS#DevOps:16329 //CCD-Credit/Debit, FT
    
            //49    Beneficiary Address Line 3
            sb.Append(this.wrapField(strLRTrim(subStr(this.CharacterReplacement(mSKS_EFT_VendorPaym.WBeneState + ' ' + this.getLogisticsAddressCountryISO(mSKS_EFT_VendorPaym.WBeneCountryRegionId)),1,35))));   //SKS#DevOps:16329 //CCD-Credit/Debit, FT
        }
        else
        {
            //47    Beneficiary Address Line 1
            sb.Append(this.wrapField(''));
            
            //48    Beneficiary Address Line 2
            sb.Append(this.wrapField(''));
    
            //49    Beneficiary Address Line 3
            sb.Append(this.wrapField(''));
        }
    
        //50    Beneficiary Bank Routing Method
        switch(mSKS_EFT_FileDetail.PaymSpec)
        {
            Case #FT:
                if(isSWIFT)
                {
                    sb.Append(this.wrapField('IS')); //FT
                }
                else
                {
                    sb.Append(this.wrapField('FW')); //FT
                }
                break;
            case #BKT:
                sb.Append(this.wrapField(''));
                break;
            default:
                sb.Append(this.wrapField('')); //CCD-Credit/Debit
                break;
        }
    
        //51    Beneficiary Bank Routing Code
        switch(mSKS_EFT_FileDetail.PaymSpec)
        {
            Case #FT:
                //Check for Routing number/swift number
                if(isSWIFT)
                {
                    sb.Append(this.wrapField(subStr(mSKS_EFT_FileDetail.DepSwiftNo,1,11))); //FT
                }
                else
                {
                    sb.Append(this.wrapField(subStr(mSKS_EFT_FileDetail.DepBankTransit,1,11))); //FT
                }
    
                break;
            case #BKT:
                sb.Append(this.wrapField(''));
                break;
            default:
                if(isdebit)
                {
                    sb.Append(this.wrapField('')); //CCD-Debit
                }
                else
                {
                    sb.Append(this.wrapField(subStr(mSKS_EFT_FileDetail.DepBankTransit,1,9))); //CCD-Credit
                }
                break;
        }
    
        //52    Beneficiary Bank Account or Other ID Type
        sb.Append(this.wrapField('')); //CCD-Credit/Debit, FT
    
        //53    Beneficiary Bank Account or Other ID
        sb.Append(this.wrapField('')); //CCD-Credit/Debit, FT
    
        //54    Beneficiary Bank Advice Type
        sb.Append(this.wrapField('')); //CCD-Credit/Debit, FT
    
        //55    Beneficiary Bank Name
        sb.Append(this.wrapField('')); //CCD-Credit/Debit, FT
    
        if(mSKS_EFT_FileDetail.PaymSpec == #BKT)
        {
            //56    Beneficiary Bank Address Line 1
            sb.Append(this.wrapField(subStr(this.CharacterReplacement(mSKS_EFT_VendorPaym.WBenBankAddr),1,35)));   //SKS#DevOps:16329 //CCD-Credit/Debit, FT
    
            //57    Beneficiary Bank Address Line 2
            sb.Append(this.wrapField(subStr(this.CharacterReplacement(mSKS_EFT_VendorPaym.WBenBankCity),1,35)));   //SKS#DevOps:16329 //CCD-Credit/Debit, FT
    
            //58    Beneficiary Bank Address Line 3
            sb.Append(this.wrapField(subStr(this.getLogisticsAddressCountryISO(mSKS_EFT_VendorPaym.WBenBankCountryRegionId),1,35)));   //SKS#DevOps:16329 //CCD-Credit/Debit, FT
    
            //59    First Intermediary Bank Routing Method
            //60    First Intermediary Bank Routing Code
            if(mSKS_EFT_VendorPaym.WIntBankSwift)          //SKS#DevOps:16329
            {
                sb.Append(this.wrapField('IS')); //CCD-Credit/Debit, FT
                
                sb.Append(this.wrapField(mSKS_EFT_VendorPaym.WIntBankSwift)); //CCD-Credit/Debit, FT
            }
            else if(mSKS_EFT_VendorPaym.WIntBankId)
            {
                sb.Append(this.wrapField('FW')); //CCD-Credit/Debit, FT
                
                sb.Append(this.wrapField(mSKS_EFT_VendorPaym.WIntBankId)); //CCD-Credit/Debit, FT
            }
            else
            {
                sb.Append(this.wrapField('')); //CCD-Credit/Debit, FT

                sb.Append(this.wrapField('')); //CCD-Credit/Debit, FT
            }
    
            //61    First Intermediary Bank Name
            sb.Append(this.wrapField(subStr(this.CharacterReplacement(mSKS_EFT_VendorPaym.WIntBankName),1,35)));   //SKS#DevOps:16329 //CCD-Credit/Debit, FT
    
            //62    First Intermediary Bank Address Line 1
            sb.Append(this.wrapField(subStr(this.CharacterReplacement(mSKS_EFT_VendorPaym.WIntBankAddr),1,35)));   //SKS#DevOps:16329 //CCD-Credit/Debit, FT
    
            //63    First Intermediary Bank Address Line 2
            sb.Append(this.wrapField(subStr(this.CharacterReplacement(mSKS_EFT_VendorPaym.WIntBankAddr2),1,35)));   //SKS#DevOps:16329 //CCD-Credit/Debit, FT
    
            //64    First Intermediary Bank Address Line 3
            sb.Append(this.wrapField(strLRTrim(subStr(this.CharacterReplacement(mSKS_EFT_VendorPaym.WIntBankCity + ' ' + this.getLogisticsAddressCountryISO(mSKS_EFT_VendorPaym.WIntBankCountryRegionId)),1,35))));   //SKS#DevOps:16329 //CCD-Credit/Debit, FT
        }
        else
        {
            //56    Beneficiary Bank Address Line 1
            sb.Append(this.wrapField(''));
    
            //57    Beneficiary Bank Address Line 2
            sb.Append(this.wrapField(''));
    
            //58    Beneficiary Bank Address Line 3
            sb.Append(this.wrapField(''));
    
            //59    First Intermediary Bank Routing Method            
            sb.Append(this.wrapField('')); //CCD-Credit/Debit, FT

            //60    First Intermediary Bank Routing Code
            sb.Append(this.wrapField(''));
    
            //61    First Intermediary Bank Name
            sb.Append(this.wrapField(''));
    
            //62    First Intermediary Bank Address Line 1
            sb.Append(this.wrapField(''));
    
            //63    First Intermediary Bank Address Line 2
            sb.Append(this.wrapField(''));
    
            //64    First Intermediary Bank Address Line 3
            sb.Append(this.wrapField(''));
        }
    
        //65    Second Intermediary Bank Account or Other ID Type
        sb.Append(this.wrapField('')); //CCD-Credit/Debit, FT
    
        //66    Second Intermediary Bank Account or Other ID
        sb.Append(this.wrapField('')); //CCD-Credit/Debit, FT
    
        //67    Second Intermediary Bank Advice Type
        sb.Append(this.wrapField('')); //CCD-Credit/Debit, FT
    
        //68    Second Intermediary Bank Name
        sb.Append(this.wrapField('')); //CCD-Credit/Debit, FT
    
        //69    Second Intermediary Bank Address – Line 1
        sb.Append(this.wrapField('')); //CCD-Credit/Debit, FT
    
        //70    Second Intermediary Bank Address – Line 2
        sb.Append(this.wrapField('')); //CCD-Credit/Debit, FT
    
        //71    Second Intermediary Bank Address – Line 3
        sb.Append(this.wrapField('')); //CCD-Credit/Debit, FT
    
        //72    Payment Details Line 1
        if(mSKS_EFT_FileDetail.PaymSpec == #BKT)
        {
            sb.Append(this.wrapField(strLRTrim(subStr(this.getInvoiceNbrs(), 1, 35)))); //CCD-Credit/Debit, FT
        }
        else
        {
            sb.Append(this.wrapField('')); //CCD-Credit/Debit, FT
        }
    
        //73    Payment Details Line 2
        sb.Append(this.wrapField('')); //CCD-Credit/Debit, FT
    
        //74    Payment Details Line 3
        sb.Append(this.wrapField('')); //CCD-Credit/Debit, FT
    
        //75    Payment Details Line 4
        sb.Append(this.wrapField('')); //CCD-Credit/Debit, FT
    
        //76    Bank Details Line 1
        sb.Append(this.wrapField('')); //CCD-Credit/Debit, FT
    
        //77    Bank Details Line 2
        sb.Append(this.wrapField('')); //CCD-Credit/Debit, FT
    
        //78    Bank Details Line 3
        sb.Append(this.wrapField('')); //CCD-Credit/Debit, FT
    
        //79    Bank Details Line 4
        sb.Append(this.wrapField('')); //CCD-Credit/Debit, FT
    
        //80    Bank Details Line 5
        sb.Append(this.wrapField('')); //CCD-Credit/Debit, FT
    
        //81    Bank Details Line 6
        sb.Append(this.wrapField('')); //CCD-Credit/Debit, FT
    
        //82    Pre-Advice Flag
        sb.Append(this.wrapField('')); //CCD-Credit/Debit, FT
    
        //83    Pre-Advice Details
        sb.Append(this.wrapField('')); //CCD-Credit/Debit, FT
    
        //84    Addenda Information
        if (mSKS_EFT_FileDetail.TransactionCode == #BKT ||
            mSKS_EFT_FileDetail.TransactionCode == #FT  ||          //SKS_VSTS_13664
            mSKS_EFT_FileDetail.TransactionCode == #HATCH)          //SKS_VSTS_13664
        {
            sb.Append(this.wrapField(''));
        }
        else
        {
            sb.Append(this.wrapField('/REF/' + subStr(this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference),1,16)));
        }
    
        //85    Memo Details
        sb.Append(this.wrapField('', false)); //CCD-Credit/Debit, FT
    
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceNbrs</Name>
				<Source><![CDATA[
    protected str getInvoiceNbrs()
    {
        SKS_EFT_FileDetail invSKS_EFT_FileDetail;
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        str invString;
    
        select InvoiceNumber from invSKS_EFT_FileDetail where invSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId;
    
        while(invSKS_EFT_FileDetail)
        {
            if(invSKS_EFT_FileDetail.InvoiceNumber == '')
            {
                // If no invoice number, go to next record
                next invSKS_EFT_FileDetail;
                continue;
            }
            sb.Append(invSKS_EFT_FileDetail.InvoiceNumber);
    
            next invSKS_EFT_FileDetail;
    
            if(invSKS_EFT_FileDetail)
            {
                sb.Append(' ');
            }
        }
    
        invString = this.CharacterReplacement(sb.ToString());
        return invString;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wrapField</Name>
				<Source><![CDATA[
    private str wrapField(str _field = '', boolean _addhatch = true)
    {
        str text;
        ;
    
        text = _field;
        if(_addHatch)
        {
            text += #HATCH;
        }
    
    
        return text;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>