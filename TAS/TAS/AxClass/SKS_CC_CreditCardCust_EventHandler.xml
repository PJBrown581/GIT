<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_CC_CreditCardCust_EventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_CC_CreditCardCust_EventHandler
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>CreditCard_Post_addCreditCard</Name>
				<Source><![CDATA[
    /// <summary>
    /// PostHandler event method for <c>addCreditCard</c> method to set
    /// additional fields in <c>CreditCardCust</c> record.
    /// </summary>
    /// <param name="_ppArgs"></param>
    [PostHandlerFor(classStr(CreditCard), staticMethodStr(CreditCard, addCreditCard))]
    public static void CreditCard_Post_addCreditCard(XppPrePostArgs _ppArgs)
    {
        if (SKS_PP_Setup::find().ModCC == NoYes::No)
        {
            return;
        }

        str xmlString = _ppArgs.getArg(identifierStr(_xmlString));
        CreditCardCust creditCardCust = _ppArgs.getReturnValue();

        CreditCardPaymentProperty property;
        var properties = CreditCardPaymentProperties::fromXmlString(xmlString);
        str ns = Microsoft.Dynamics.Retail.PaymentSDK.Portable.Constants.GenericNamespace::get_PaymentCard();
        str isSKSDefaultCardStr;
        NoYes isSKSDefaultCard;
        
        property = properties.find(ns, 'IsDefaultCard');
        isSKSDefaultCardStr = property ? property.parmStringValue() : '';

        creditCardCust.selectForUpdate(true);

        ttsbegin;
        if (isSKSDefaultCardStr == 'Yes')
        {
            isSKSDefaultCard = NoYes::Yes;
            creditCardCust.SKS_CC_CardPriority = SKS_CC_CardPriority::One;
        }
        else
        {
            creditCardCust.SKS_CC_CardPriority = SKS_CC_CardPriority::None;
        }
        creditCardCust.SKS_CC_DefaultCard = isSKSDefaultCard;
        creditCardCust.update();
        ttscommit;

        if (isSKSDefaultCard && creditCardCust)
        {
            SKS_CC_PayFabricSetCardPriority::removeDefaultFromAnyOtherCard(creditCardCust);
        }

        _ppArgs.setReturnValue(creditCardCust);
    }

]]></Source>
			</Method>
			<Method>
				<Name>CreditCard_Post_sameCard</Name>
				<Source><![CDATA[
    /// <summary>
    /// PostHandler event method for <c>sameCard</c> method.
    /// Determines if the same credit card was used in a credit card operation as was specified
    /// on sales order or credit card payment generated from a payment journal.
    /// </summary>
    /// <param name="_ppArgs"></param>
    [PostHandlerFor(classStr(CreditCard), staticMethodStr(CreditCard, sameCard))]
    public static void CreditCard_Post_sameCard(XppPrePostArgs _ppArgs)
    {
        if (SKS_PP_Setup::find().ModCC == NoYes::No)
        {
            return;
        }

        CreditCardAuthTrans creditCardAuthTrans = _ppArgs.getArg(identifierStr(_creditCardAuthTrans));
        CreditCardCust creditCardCust;
        boolean ret = _ppArgs.getReturnValue();

        if (creditCardAuthTrans.SKS_CC_CustPaymTable)
        {
            creditCardCust = CreditCardCust::find(SKS_CC_CustPaymTable::findByRecID(creditCardAuthTrans.SKS_CC_CustPaymTable).CreditCardCustRefId);
            if (creditCardCust)
            {
                ret = creditCardCust && creditCardCust.UniqueCardId == creditCardAuthTrans.UniqueCardId && creditCardAuthTrans.UniqueCardId;
            }
        }

        _ppArgs.setReturnValue(ret);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>