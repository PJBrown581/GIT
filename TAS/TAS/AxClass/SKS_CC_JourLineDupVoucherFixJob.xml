<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_CC_JourLineDupVoucherFixJob</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_CC_JourLineDupVoucherFixJob
{        
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Used to fix issue with customer payment journal line voucher
    /// for multiple customers for payment journal line credit card payments.
    /// </summary>
    /// <param name = "_args">The specified arguments.</param>
    public static void main(Args _args)
    {
        Dialog dialog = new Dialog("CCA journal line voucher for multiple customers fix");
                
        DialogField dialogPaymJourLineRecIdWithIssue = dialog.addField(extendedTypeStr(RefRecId), "RecId of payment journal line with issue");
        DialogField dialogPaymJourLineRecIdNew = dialog.addField(extendedTypeStr(RefRecId), "RecId of payment journal line to move CC payment to");

        dialog.run();
        if (!dialog.closedOk())
        {
            return;
        }
        
        RefRecId paymJourLineRecIdWithIssue = dialogPaymJourLineRecIdWithIssue.value();
        RefRecId paymJourLineRecIdNew = dialogPaymJourLineRecIdNew.value();

        if (!paymJourLineRecIdWithIssue || !paymJourLineRecIdNew)
        {
            throw error("Both RecId fields must be specified");
        }

        LedgerJournalTrans journalLineWithIssue, journalLineNew;

        select firstonly1 journalLineWithIssue
            where journalLineWithIssue.RecId == paymJourLineRecIdWithIssue;

        if (!journalLineWithIssue)
        {
            throw error(strFmt("Unable to find payment journal line with issue with specified RecId: %1", paymJourLineRecIdWithIssue));
        }

        select firstonly1 journalLineNew
            where journalLineNew.RecId == paymJourLineRecIdNew;

        if (!journalLineNew)
        {
            throw error(strFmt("Unable to find payment journal line to move CC payment to with specified RecId: %1", paymJourLineRecIdNew));
        }

        SKS_CC_CustPaymTable custPaymentTableUpd;

        
        ttsbegin;
        while select forupdate custPaymentTableUpd
            where custPaymentTableUpd.RefTableId == tableNum(LedgerJournalTrans)
            && custPaymentTableUpd.RefRecId == paymJourLineRecIdWithIssue
        {
            custPaymentTableUpd.RefRecId = journalLineNew.RecId;
            custPaymentTableUpd.doUpdate();
        }

        journalLineNew.selectForUpdate(true);
        journalLineNew.PaymReference = journalLineWithIssue.PaymReference;
        journalLineNew.PaymentStatus = CustVendPaymStatus::Confirmed;
        journalLineNew.doUpdate();
        ttscommit;

        info("CC payment records successfully transferred.");
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>