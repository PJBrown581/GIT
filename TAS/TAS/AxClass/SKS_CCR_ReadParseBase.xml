<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_CCR_ReadParseBase</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class SKS_CCR_ReadParseBase
{
    SKS_CCR_InboundFile gSKS_CCR_InboundFile;
    SKS_CCR_InboundStmt gSKS_CCR_InboundStmt;
    SKS_CCR_InboundTran gSKS_CCR_InboundTran;
    SKS_EB_FilePathName gSKS_EB_FilePathName;
    SKS_EB_FileHub gSKS_EB_FileHub;
    SKS_PP_CommBRPreImportScriptPath gBRPreReadScript;
    str gBRPreReadScriptParams;
    SKS_PP_CommBRPostImportScriptPath gBRPostReadScript;
    str gBRPostReadScriptParams;
    SKS_BR_FileFormat gSKS_BR_FileFormat;
    str gFieldDelimiter;
    SKS_CCR_ReadFileClassesCustomActionsBase gSKS_CCR_ReadFileClassesCustomActionsBase;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>setPreReadScript</Name>
				<Source><![CDATA[
    public void setPreReadScript(SKS_PP_CommBRPreImportScriptPath _preReadScript){gBRPreReadScript = _preReadScript;}

]]></Source>
			</Method>
			<Method>
				<Name>setPreReadScriptParams</Name>
				<Source><![CDATA[
    public void setPreReadScriptParams(str _preReadScriptParams){gBRPreReadScriptParams = _preReadScriptParams;}

]]></Source>
			</Method>
			<Method>
				<Name>setPostReadScript</Name>
				<Source><![CDATA[
    public void setPostReadScript(SKS_PP_CommBRPostImportScriptPath _postReadScript){gBRPostReadScript = _postReadScript;}

]]></Source>
			</Method>
			<Method>
				<Name>setPostReadScriptParams</Name>
				<Source><![CDATA[
    public void setPostReadScriptParams(str _postReadScriptParams){gBRPostReadScriptParams = _postReadScriptParams;}

]]></Source>
			</Method>
			<Method>
				<Name>getPreReadScriptParams</Name>
				<Source><![CDATA[
    public str getPreReadScriptParams(){return gBRPreReadScriptParams;}

]]></Source>
			</Method>
			<Method>
				<Name>getPreReadScript</Name>
				<Source><![CDATA[
    public SKS_PP_CommBRPreImportScriptPath getPreReadScript(){return gBRPreReadScript;}

]]></Source>
			</Method>
			<Method>
				<Name>getPostReadScriptParams</Name>
				<Source><![CDATA[
    public str getPostReadScriptParams(){return gBRPostReadScriptParams;}

]]></Source>
			</Method>
			<Method>
				<Name>getPostReadScript</Name>
				<Source><![CDATA[
    public SKS_PP_CommBRPostImportScriptPath getPostReadScript(){return gBRPostReadScript;}

]]></Source>
			</Method>
			<Method>
				<Name>GetInboundFile</Name>
				<Source><![CDATA[
    Abstract SKS_CCR_InboundFile GetInboundFile(SKS_EB_FilePathName _FilePathAndName, SKS_BF_BankIntType _SKS_BF_BankIntType)
    {        
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCustomActions</Name>
				<Source><![CDATA[
    public void setCustomActions(SKS_CCR_ReadFileClassesCustomActionsBase _SKS_CCR_ReadFileClassesCustomActionsBase)
    {
        gSKS_CCR_ReadFileClassesCustomActionsBase = _SKS_CCR_ReadFileClassesCustomActionsBase;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDelimiter</Name>
				<Source><![CDATA[
    public void setDelimiter(str _FieldDelimiter){gFieldDelimiter = _FieldDelimiter;}

]]></Source>
			</Method>
			<Method>
				<Name>setFormat</Name>
				<Source><![CDATA[
    public void setFormat(SKS_BR_FormatID _SKS_BR_FormatID)
    {
        select firstonly gSKS_BR_FileFormat where gSKS_BR_FileFormat.FormatID == _SKS_BR_FormatID
            && gSKS_BR_FileFormat.CCR_IsCCRFormat == NoYes::Yes;    /// SKS_FDD_13903 - To make sure that its picking only CCR format
    }

]]></Source>
			</Method>
			<Method>
				<Name>InitializeFileInfo</Name>
				<Source><![CDATA[
    public void InitializeFileInfo(SKS_EB_FilePathName _FilePathAndName, SKS_BF_BankIntType _SKS_BF_BankIntType)
    {
        gSKS_EB_FileHub = SKS_EB_FileHub::construct(_SKS_BF_BankIntType);
        gSKS_EB_FileHub.runFileInquire(_FilePathAndName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>FormatSupportsDecimalPlaces</Name>
				<Source><![CDATA[
    //if your format might be used with varying numbers of decimal places, override this to to "True" so your user can create instances of the format with the appropriate number of decimal places.
    public boolean FormatSupportsDecimalPlaces(){return false;}

]]></Source>
			</Method>
			<Method>
				<Name>FormatSupportsUpdatingEndingBalance</Name>
				<Source><![CDATA[
    //If your format needs to support updating the statement's ending balance, override this to "True"
    public boolean FormatSupportsUpdatingEndingBalance(){return false;}

]]></Source>
			</Method>
			<Method>
				<Name>FormatSupportsBalanceTypeCodes</Name>
				<Source><![CDATA[
    //if your format has some non-constant qualifier for ending balances, that string that may vary depedning on user needs, overide this to "true"
    public boolean FormatSupportsBalanceTypeCodes(){return false;}

]]></Source>
			</Method>
			<Method>
				<Name>FormatSupportTransTypeCreditDebitFlag</Name>
				<Source><![CDATA[
    //if your format uses a  transaction type flag to differentiate between an credit and a debit.
    public boolean FormatSupportTransTypeCreditDebitFlag(){return false;}

]]></Source>
			</Method>
			<Method>
				<Name>FormatSupportTransTypeMapping</Name>
				<Source><![CDATA[
    //if your bank utilizes transaction types that can be mapped to an AX transaction type, overrride this to true;
    public boolean FormatSupportTransTypeMapping(){return false;}

]]></Source>
			</Method>
			<Method>
				<Name>FormatIsCSV</Name>
				<Source><![CDATA[
    //for CUSTOM CSVs and Fixed.
    public boolean FormatIsCSV(){return false;}

]]></Source>
			</Method>
			<Method>
				<Name>FormatISFixed</Name>
				<Source><![CDATA[
    public boolean FormatISFixed(){return false;}

]]></Source>
			</Method>
			<Method>
				<Name>str2date</Name>
				<Source><![CDATA[
    protected date str2date(str _text, int _sequence)
    {
        date rtnval;
        str value = _text;
    
        if(SKS_PP_StringFormats::strIndexOf(value,' '))
            value = SKS_PP_StringFormats::strSub(value,1,SKS_PP_StringFormats::strIndexOf(value,' ') - 1);
        else if(SKS_PP_StringFormats::strIndexOf(value,'T'))
            value = SKS_PP_StringFormats::strSub(value,1,SKS_PP_StringFormats::strIndexOf(value,'T') - 1);
        else if(SKS_PP_StringFormats::strIndexOf(value,'t'))
            value = SKS_PP_StringFormats::strSub(value,1,SKS_PP_StringFormats::strIndexOf(value,'t') - 1);
    
        rtnval = str2date(value, _sequence);
    
        return rtnval;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parseRefernceNumber</Name>
				<Source><![CDATA[
    protected str parseRefernceNumber(str _ReferenceNumber)
    {
        SKS_BR_FileFormat locSKS_BR_FileFormat;
        
        select firstonly DataAreaID, RecID, RemoveLeadingZeros from locSKS_BR_FileFormat where locSKS_BR_FileFormat.FormatID == gSKS_BR_FileFormat.FormatID;
        if(locSKS_BR_FileFormat)
        {
            if(locSKS_BR_FileFormat.RemoveLeadingZeros)
                return SKS_PP_StringFormats::strLTrimZeroes(global::strLRTrim(_ReferenceNumber));
            else
                return global::strLRTrim(_ReferenceNumber);
        }
        else
            return SKS_PP_StringFormats::strLTrimZeroes(global::strLRTrim(_ReferenceNumber));


    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>