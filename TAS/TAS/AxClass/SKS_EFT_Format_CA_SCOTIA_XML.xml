<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_CA_SCOTIA_XML</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_CA_SCOTIA_XML extends SKS_EFT_Format_ISO_20022_001001003
/// </summary>
class SKS_EFT_Format_CA_SCOTIA_XML extends SKS_EFT_Format_ISO_20022_001001003
{
    #define.FormatVersion('20230504')
    #define.ACH('ACH')
    #define.CHK('CHK')
    #define.WPY('WPY')
    #define.EFT('EFT')
    #define.ACH_IAT('ACH-IAT')
    #define.SACH('SACH')
    #define.DOMLV('DOM-LV')
    #define.FSTR_PMT('FSTR-PMT')
  
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_GrpHdr_Authstn</Name>
				<Source><![CDATA[
    protected void node_GrpHdr_Authstn(XmlElement _nodeGrpHdr)
    {
        //------------------------------------------------------------------------------------------------------
        //      1.3: Authstn
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeLclInstrm;
        str testFileIndic;

        //          2.11: Authstn
        nodeLclInstrm = _nodeGrpHdr.appendChild(xmlDoc.createElement('Authstn'));

        //                      Prtry
        testFileIndic = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('TestFileIndic', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank));
        if(testFileIndic == 'Y')
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeLclInstrm, 'Prtry', 'T');
        }
        else
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeLclInstrm, 'Prtry', 'P');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_GrpHdr_InitgPty</Name>
				<Source><![CDATA[
    protected void node_GrpHdr_InitgPty(XmlElement _nodeGrpHdr)
    {
        //------------------------------------------------------------------------------------------------------
        //      1.8: InitgPty
        //          9.1.12: Id
        //              9.1.13: OrgId
        //                          Othr
        //                              Id
        //------------------------------------------------------------------------------------------------------

        XmlElement nodeInitgPty;
        XmlElement nodeId;
        XmlElement nodeOrgId;
        XmlElement nodeOther;
        str initiatingprtyId;

        initiatingprtyId = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('InitiatingprtyId', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank));
        if(initiatingprtyId)
        {
            //      1.8: InitgPty
            nodeInitgPty = _nodeGrpHdr.appendChild(xmlDoc.createElement('InitgPty'));

            //          9.1.12: Id
            nodeId = nodeInitgPty.appendChild(xmlDoc.createElement('Id'));

            //              9.1.13: OrgId
            nodeOrgId = nodeId.appendChild(xmlDoc.createElement('OrgId'));

            //                  9.1.15: Other
            nodeOther = nodeOrgId.appendChild(xmlDoc.createElement('Othr'));

            //                      9.1.1.16: Id
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeOther, 'Id', this.CharacterReplacement(initiatingprtyId), 35);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_PmtTpInf</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_PmtInf_PmtTpInf
    /// </summary>
    /// <param name = "_nodePmtInf">_nodePmtInf</param>
    protected void node_PmtInf_PmtTpInf(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.31 PmtTpInf
        //                  InstrPrty
        //                  LclInstrm
        //                      Prtry
        //------------------------------------------------------------------------------------------------------

        XmlElement nodePmtTpInf;
        XmlElement nodeLclInstrm;
        str value;

        //          2.31 PmtTpInf
        nodePmtTpInf = _nodePmtInf.appendChild(xmlDoc.createElement('PmtTpInf'));

        //              InstrPrty
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #WPY)
        {
            value = SKS_EFT_Format::getValueFromCode('InstrPrty', mSKS_EFT_FileFormatPaymSpec, mSKS_EFT_VendorPaym.RecId);

            if(value)
            {
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtTpInf, 'InstrPrty', this.CharacterReplacement(value));
            }
        }

        //          2.11: LclInstrm
        nodeLclInstrm = nodePmtTpInf.appendChild(xmlDoc.createElement('LclInstrm'));

        switch (mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #ACH:
                value = 'ACH';
                break;
            case #CHK:
                value = 'CHK';
                break;
            case #WPY:
                value = 'WPY';
                break;
            case #EFT:
                value = 'EFT';
                break;
            case #ACH_IAT:
                value = 'IAT';
                break;
            case #SACH:
                value = 'SACH';
                break;
        }
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #ACH_IAT)
        {
            //                  Cd
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeLclInstrm, 'Cd', value);
        }
        else
        {
            //                  Prtry
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeLclInstrm, 'Prtry', value);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_Dbtr</Name>
				<Source><![CDATA[
    protected void node_PmtInf_Dbtr(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.19: Dbtr
        //          Nm
        //          PstlAdr
        //          Id
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeDbtr;

        //      2.19: Dbtr
        nodeDbtr = nodePmtInf.appendChild(xmlDoc.createElement('Dbtr'));

        //           Nm
        this.node_PmtInf_Dbtr_Nm(nodeDbtr);

        //          PstlAdr
        this.node_PstlAdr_Structured(nodeDbtr, mSKS_EFT_Bank.WOrdPartyCountryRegionId, mSKS_EFT_Bank.WOrdPartyAddr, mSKS_EFT_Bank.WOrdPartyZipCode, mSKS_EFT_Bank.WOrdPartyCity, 35, mSKS_EFT_Bank.WOrdPartyAddr2, mSKS_EFT_Bank.WOrdPartyState);

        //          Id
        this.node_PmtInf_Dbtr_Id(nodeDbtr);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_Dbtr_Id</Name>
				<Source><![CDATA[
    protected void node_PmtInf_Dbtr_Id(XmlElement _nodeDbtr)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.19: Dbtr
        //          9.1.12: Id
        //              9.1.13: OrgId
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeId;
        XmlElement nodeOrgId;
        XmlElement nodeOther;

        if(mSKS_EFT_Bank.WOrdPartyId != '')
        {
            //          9.1.12: Id
            nodeId = _nodeDbtr.appendChild(xmlDoc.createElement('Id'));

            //              9.1.13: OrgId
            nodeOrgId = nodeId.appendChild(xmlDoc.createElement('OrgId'));

            //                  9.1.15: Othr
            nodeOther = nodeOrgId.appendChild(xmlDoc.createElement('Othr'));

            //                      9.1.16: Id
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeOther, 'Id', mSKS_EFT_Bank.WOrdPartyId, 35);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_DbtrAcct</Name>
				<Source><![CDATA[
    protected void node_PmtInf_DbtrAcct(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.20: DbtrAcct
        //          Id
        //              IBAN
        //              Othr
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeDbtrAcct;
        XmlElement nodeDbtrAcctId;
        XmlElement nodeOthr;
        XmlElement nodeDbtrAcctTp;
        str value;

        if(mSKS_EFT_FileDetail.BankBankAcct)
        {
            //      2.20: DbtrAcct
            nodeDbtrAcct = nodePmtInf.appendChild(xmlDoc.createElement('DbtrAcct'));

            //          Id
            nodeDbtrAcctId = nodeDbtrAcct.appendChild(xmlDoc.createElement('Id'));

            //              Othr
            nodeOthr = nodeDbtrAcctId.appendChild(xmlDoc.createElement('Othr'));

            //                  Id
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeOthr, 'Id', mSKS_EFT_FileDetail.BankBankAcct,34);
             
            if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #ACH  ||
               mSKS_EFT_FileFormatPaymSpec.TransactionCode == #SACH ||
               mSKS_EFT_FileFormatPaymSpec.TransactionCode == #EFT  ||
               mSKS_EFT_FileFormatPaymSpec.TransactionCode == #ACH_IAT)
            {
                //              Tp
                nodeDbtrAcctTp = nodeDbtrAcct.appendChild(xmlDoc.createElement('Tp'));

                if(mSKS_EFT_Bank.AcctType == BankAccountType::SavingsAccount)
                {
                    value = 'SVGS';
                }
                else
                {
                    value = 'CACC';
                }

                //                      Cd
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeDbtrAcctTp, 'Cd', value);
            }
            //                      Ccy
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeDbtrAcct, 'Ccy', mBankAccountTable.CurrencyCode);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_DbtrAgt</Name>
				<Source><![CDATA[
    protected void node_PmtInf_DbtrAgt(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.21: DbtrAgt
        //          FinInstnId
        //              ClrSysMmbId
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeDbtrAgt;
        XmlElement nodeFinInstnId;
        XmlElement nodeClrSysMmBId;
        XmlElement nodePstlAdr;
        int length;
        str value;

        select msks_EFT_FileDetail_BankAddress where
                msks_EFT_FileDetail_BankAddress.RefRecId == mSKS_EFT_FileDetail.RecID
            && msks_EFT_FileDetail_BankAddress.AddressType == SKS_EFT_AddressType::BankAddress;

        value = 'CACPA';

        //      2.21: DbtrAgt
        nodeDbtrAgt = nodePmtInf.appendChild(xmlDoc.createElement('DbtrAgt'));

        //          FinInstnId
        nodeFinInstnId = nodeDbtrAgt.appendChild(xmlDoc.createElement('FinInstnId'));

        //              ClrSysMmbId
        nodeClrSysMmBId = nodeFinInstnId.appendChild(xmlDoc.createElement('ClrSysMmbId'));

        //                  MmbId
        if(mSKS_EFT_FileDetail.BankBankTransit)
        {
            length = 40;
            if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #ACH ||     //SKS#DevOps:17097
               mSKS_EFT_FileFormatPaymSpec.TransactionCode == #SACH)      //SKS#DevOps:17097
            {

                if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #SACH && this.getLogisticsAddressCountryISO(msks_EFT_FileDetail_BankAddress.CountryRegionId) =='CA')
                {
                    value = 'CACPA';
                }
                else if (mSKS_EFT_FileDetail.CurrencyCode == 'USD')
                {
                    value = 'USABA';
                }

            }

            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeClrSysMmBId, 'MmbId', value + mSKS_EFT_FileDetail.BankBankTransit, length, false);
        }
        if((mSKS_EFT_FileFormatPaymSpec.TransactionCode == #ACH     ||
            mSKS_EFT_FileFormatPaymSpec.TransactionCode == #SACH    ||
            mSKS_EFT_FileFormatPaymSpec.TransactionCode == #ACH_IAT ||
            mSKS_EFT_FileFormatPaymSpec.TransactionCode == #EFT)&&
            mSKS_EFT_Bank.WOrdPartyCountryRegionId)
        {
            //             PstlAdr
            nodePstlAdr = nodeFinInstnId.appendChild(xmlDoc.createElement('PstlAdr'));

            //                  Ctry
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePstlAdr, 'Ctry', this.getLogisticsAddressCountryISO(msks_EFT_FileDetail_BankAddress.CountryRegionId), 0, false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_PmtId</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_PmtId(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.28: PmtId
        //              2.29: InstrId
        //              2.30: EndToEndId
        //------------------------------------------------------------------------------------------------------

        XmlElement nodePmtId;

        //          2.28: PmtId
        nodePmtId = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('PmtId'));

        //              2.29: InstrId
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtId, 'InstrId', this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference), 35);

        //              2.30: EndToEndId
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtId, 'EndToEndId', this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference), 35);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_ChqInstr</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_ChqInstr(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.52 ChqInstr
        //              2.65 ChqNb
        //              2.69: DlvryMtd
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeChqInstr;
        XmlElement nodeDlvryMtd;
        str value;

        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CHK)
        {
            //          2.52 ChqInstr
            nodeChqInstr = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('ChqInstr'));

            //              2.53 ChqNb
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeChqInstr, 'ChqNb', SKS_PP_StringFormats::strFill(10, subStr(mSKS_EFT_FileDetail.PaymentReference, strLen(mSKS_EFT_FileDetail.PaymentReference), -6), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

            value = SKS_EFT_Format::getValueFromCode('DlvryMtdCd', mSKS_EFT_FileFormatPaymSpec, mSKS_EFT_VendorPaym.RecId);

            if(value != '')
            {
                //              2.69: DlvryMtd
                nodeDlvryMtd = nodeChqInstr.appendChild(xmlDoc.createElement('DlvryMtd'));

                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeDlvryMtd, 'Cd', this.CharacterReplacement(value), 0, false);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_CdtrAgt</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_CdtrAgt(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.77: CdtrAgt
        //              FinInstnId
        //                  PstlAdr
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeCdtrAgt;
        XmlElement nodeFinInstnId;
        XmlElement nodeClrSysMmbId;
        XmlElement nodeCdtrAgtOthr;
        int length;
        str value;

        value = 'CACPA';

        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode != #CHK)
        {
            //          2.77: CdtrAgt
            nodeCdtrAgt = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('CdtrAgt'));

            //              FinInstnId
            nodeFinInstnId = nodeCdtrAgt.appendChild(xmlDoc.createElement('FinInstnId'));

           

            //                      MmbId
            if(mSKS_EFT_FileDetail.DepBankTransit != '')
            {
                
                //                  ClrSysMmbId
                nodeClrSysMmbId = nodeFinInstnId.appendChild(xmlDoc.createElement('ClrSysMmbId'));

                length = 40;

                if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #ACH ||         //SKS#DevOps:17097
                       mSKS_EFT_FileFormatPaymSpec.TransactionCode == #SACH ||
                        mSKS_EFT_FileFormatPaymSpec.TransactionCode == #ACH_IAT)
                {
                    if(mRemittanceCountryRegionId == 'US')
                    {
                        value = 'USABA';
                    }
                }
                else if(mSKS_EFT_FileFormatPaymSpec.TransactionCode== #WPY)
                {
                    if(mSKS_EFT_FileDetail_BenBank.BenBankCountryRegionId =='USA')
                    {
                        value='USABA';
                    }
                }

                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeClrSysMmbId, 'MmbId', value + mSKS_EFT_FileDetail.DepBankTransit, length, false);
            }
            
        }
            

        //              Nm
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeFinInstnId, 'Nm', this.CharacterReplacement(mSKS_EFT_VendorPaym.WBenBankName), 0,  false);

        //                  PstlAdr
        this.node_CdtrAgt_PstlAdr(nodeFinInstnId, mSKS_EFT_VendorPaym.WBenBankCountryRegionId, mSKS_EFT_VendorPaym.WBenBankAddr, mSKS_EFT_VendorPaym.WBenBankCity);

        if(mSKS_EFT_FileDetail.DepBankTransit == '' && mSKS_EFT_FileDetail.DepSwiftNo && mSKS_EFT_FileFormatPaymSpec.TransactionCode == #WPY)
        {
            //                  Othr
            nodeCdtrAgtOthr = nodeFinInstnId.appendChild(xmlDoc.createElement('Othr'));

            //                      Id
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdtrAgtOthr, 'Id', mSKS_EFT_FileDetail.DepSwiftNo, 34, false);

            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdtrAgtOthr, 'Issr', '02');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtrAgt_PstlAdr</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_CdtrAgt_PstlAdr
    /// </summary>
    /// <param name = "_nodeFinInstnId">_nodeFinInstnId</param>
    /// <param name = "_countryId">_countryId</param>
    /// <param name = "_address">_address</param>
    /// <param name = "_city">_city</param>
    protected void node_CdtrAgt_PstlAdr(XmlElement _nodeFinInstnId, AddressCountryRegionId _countryId, SKS_EB_Address _address, AddressCity _city)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.77: CdtrAgent
        //          PstlAdr
        //------------------------------------------------------------------------------------------------------

        XmlElement nodePstlAdr;

        //      PstlAdr
        nodePstlAdr = _nodeFinInstnId.appendChild(xmlDoc.createElement('PstlAdr'));

        //          TwnNm
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePstlAdr, 'TwnNm', this.CharacterReplacement(_city), 35, false);

        //          Ctry
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePstlAdr, 'Ctry', _countryId, 2, false);

        //          AdrLine
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePstlAdr, 'AdrLine', this.CharacterReplacement(_address), 70, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_Cdtr</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_Cdtr(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.79: Cdtr
        //              Nm
        //              PstlAdr
        //              Id
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeCdtr;

        //          2.79: Cdtr
        nodeCdtr = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('Cdtr'));

        //              Nm
        this.node_CdtTrfTxInf_Cdtr_Nm(nodeCdtr);

        //              PstlAdr
        this.node_PstlAdr_Structured(nodeCdtr, mRemittanceCountryRegionId, mRemittanceAdrline1, mRemittanceZipCode, mRemittanceCity, 35, mRemittanceAdrline2, mRemittanceState);

        //              Id
        this.node_PmtInf_Cdtr_Id(nodeCdtr);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_Cdtr_Id</Name>
				<Source><![CDATA[
    protected void node_PmtInf_Cdtr_Id(XmlElement _nodeCdtr)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.79: Cdtr
        //          Id
        //              OrgId
        //                  Othr
        //                      Id

        XmlElement nodeId;
        XmlElement nodeOrgId;
        XmlElement nodeOthr;
        VendTable lVendTable;
        str taxID;

        lVendTable = VendTable::findByCompany(mSKS_EFT_VendorPaym.VendCompany, mSKS_EFT_VendorPaym.VendAccount);
        taxID = lVendTable.VATNum;
        if(taxID != '')
        {
            //          Id
            nodeId = _nodeCdtr.appendChild(xmlDoc.createElement('Id'));

            //              OrgId
            nodeOrgId = nodeId.appendChild(xmlDoc.createElement('OrgId'));


            //                  Othr
            nodeOthr = nodeOrgId.appendChild(xmlDoc.createElement('Othr'));

            //                      Id
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeOthr, 'Id', taxID, 35);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_CdtrAcct</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_CdtrAcct(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.80: CdtrAcct
        //                  Id
        //                  IBAN
        //------------------------------------------------------------------------------------------------------

        XmlElement nodeCdtrAcct;
        XmlElement nodeCdtrAcctId;
        XmlElement nodeCdtrAcctIdOthr;
        XmlElement nodeCdtrAcctTp;
        str value;

        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode != #CHK)
        {
            //          2.80: CdtrAcct
            nodeCdtrAcct = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('CdtrAcct'));

            //              Id
            nodeCdtrAcctId = nodeCdtrAcct.appendChild(xmlDoc.createElement('Id'));

            if(mSKS_EFT_FileDetail.DepBankIBAN)
            {
                //                  IBAN
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdtrAcctId, 'IBAN', mSKS_EFT_FileDetail.DepBankIBAN, 34);
            }
            else
            {
                //                  Othr
                nodeCdtrAcctIdOthr = nodeCdtrAcctId.appendChild(xmlDoc.createElement('Othr'));

                //                      Id
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdtrAcctIdOthr, 'Id', mSKS_EFT_FileDetail.DepBankAcct, 34, false);
            }

            if(mSKS_EFT_FileDetail.DepBankAcctType == BankAccountType::SavingsAccount)
            {
                value = 'SVGS';
            }
            else
            {
                value = 'CACC';
            }

            //                      Tp
            nodeCdtrAcctTp = nodeCdtrAcct.appendChild(xmlDoc.createElement('Tp'));

            //                  Cd/Ptry
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdtrAcctTp, 'Cd', value);

            //                      Ccy
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdtrAcct, 'Ccy', mSKS_EFT_FileDetail.PaymentCurrencyCode);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_Purp</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_Purp(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.88: Purp
        //              Prtry
        //------------------------------------------------------------------------------------------------------

        XmlElement nodeId;
        str value;
    
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #ACH  ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #SACH ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #ACH_IAT)
        {
            value = this.CharacterReplacement(SKS_EFT_Format::getValueFromCode('Purp', mSKS_EFT_FileFormatPaymSpec, mSKS_EFT_VendorPaym.RecId));
        }
        else if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CHK)
        {
            value= 'AP';
        }
        else if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #EFT)
        {
            value = this.CharacterReplacement(SKS_EFT_Format::getValueFromCode('CPA', mSKS_EFT_FileFormatPaymSpec, mSKS_EFT_VendorPaym.RecId));
        }       
        if(value)
        {
            // Purp
            nodeId = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('Purp'));

            //  Prtry
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeId, 'Prtry', value);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_RmtInf</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_RmtInf(XmlElement _nodeCdtTrfTxInf)//SKS_VSTS_14465
    {
        //------------------------------------------------------------------------------------------------------
        //          2.98: RmtInf
        //              Strd
        //------------------------------------------------------------------------------------------------------
        
        this.node_CdtTrfTxInf_RmtInf_Ustrd(_nodeCdtTrfTxInf);
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_RmtInf_Ustrd</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_RmtInf_Ustrd(XmlElement _nodeCdtTrfTxInf)
    {
        
        //------------------------------------------------------------------------------------------------------
        //          2.98: RmtInf
        //              2.99: Ustrd
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeRmtInf;
        str invNumbers;
        boolean invDetails;
    
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #WPY || mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CHK || mSKS_EFT_FileFormatPaymSpec.TransactionCode==#EFT )
        {
            invNumbers = this.getInvoiceDetails();
            invDetails = true;
        }
        else
        {
            invNumbers = this.getInvoiceNbrs();
        }
        if(invNumbers)
        {
            //          2.98: RmtInf
            nodeRmtInf = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('RmtInf'));
    
            if(invDetails)
            {
                //              2.99: Ustrd
           
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRmtInf, 'Ustrd','0009 '+ invNumbers, 140);
            }
            else
            {
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRmtInf, 'Ustrd', invNumbers, 140);
            }
        
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceDetails</Name>
				<Source><![CDATA[
    private str getInvoiceDetails()
    {
        SKS_EFT_FileDetail invSKS_EFT_FileDetail;
        str invDetailsString;

        while select InvoiceNumber, InvoiceTransactionTxt, InvoiceSettleAmountPmtCur, PaymentCurrencyCode from invSKS_EFT_FileDetail
        where invSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId
        && invSKS_EFT_FileDetail.InvoiceNumber != ''
        {
            invDetailsString += strFmt('%1 %2 %3 %4, ', invSKS_EFT_FileDetail.InvoiceNumber, invSKS_EFT_FileDetail.InvoiceTransactionTxt, num2str(invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1,0,2,1,0), invSKS_EFT_FileDetail.PaymentCurrencyCode);
        }

        invDetailsString = subStr(invDetailsString, 1, strLen(invDetailsString)-2);

        return this.CharacterReplacement(invDetailsString);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_RmtInf_Amt</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_RmtInf_Amt
    /// </summary>
    /// <param name = "_nodeRfrdDocAmt">_nodeRfrdDocAmt</param>
    /// <param name = "_invSKS_EFT_FileDetail">_invSKS_EFT_FileDetail</param>

    protected void node_RmtInf_Amt(XmlElement _nodeRfrdDocAmt, SKS_EFT_FileDetail _invSKS_EFT_FileDetail)//SKS_VSTS_14465
    {
        //------------------------------------------------------------------------------------------------------
        //          2.42: Amt
        //              DuePyblAmt
        //              DscntApldAmt
        //              CdtNoteAmt
        //              RmtdAmt
        //------------------------------------------------------------------------------------------------------
        XmlElement  currentElement;
        AmountMST   gross = _invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur + _invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur;
        AmountMST   discount = _invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur;
        AmountMST   remitted;
        AmountMST   creditNote;

        if(_invSKS_EFT_FileDetail.InvoiceSettleAmountCur > 0)
        {
            remitted = 0;
            creditNote = _invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur;

            //      2.110
            currentElement = SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeRfrdDocAmt, 'DuePyblAmt', num2str(gross * 1,0,2,1,0));
            SKS_EFT_Format::xmlsetAttributeText(currentElement, 'Ccy', _invSKS_EFT_FileDetail.PaymentCurrencyCode);
            
            //      2.111
            currentElement = SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeRfrdDocAmt, 'DscntApldAmt', num2str(discount * 1,0,2,1,0));
            SKS_EFT_Format::xmlsetAttributeText(currentElement, 'Ccy', _invSKS_EFT_FileDetail.PaymentCurrencyCode);
        }
        else
        {
            remitted = _invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1;
            creditNote = 0;

            //      2.110
            currentElement = SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeRfrdDocAmt, 'DuePyblAmt', num2str(gross * -1,0,2,1,0));
            SKS_EFT_Format::xmlsetAttributeText(currentElement, 'Ccy', _invSKS_EFT_FileDetail.PaymentCurrencyCode);
            
            //      2.111
            currentElement = SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeRfrdDocAmt, 'DscntApldAmt', num2str(discount * -1,0,2,1,0));
            SKS_EFT_Format::xmlsetAttributeText(currentElement, 'Ccy', _invSKS_EFT_FileDetail.PaymentCurrencyCode);
        }

        if(remitted != 0)
        {
            //      RmtdAmt
            currentElement = SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeRfrdDocAmt, 'RmtdAmt', num2str(remitted,0,2,1,0));
            SKS_EFT_Format::xmlsetAttributeText(currentElement, 'Ccy', _invSKS_EFT_FileDetail.PaymentCurrencyCode);
        }
        else
        {
            //      CdtNoteAmt
            currentElement = SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeRfrdDocAmt, 'RmtdAmt', num2str(creditNote,0,2,1,0));
            SKS_EFT_Format::xmlsetAttributeText(currentElement, 'Ccy', _invSKS_EFT_FileDetail.PaymentCurrencyCode);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_RltdRmtInf</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_RltdRmtInf(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.91: RltdRmtInf
        //              2.93: RmtLctnMtd
        //              2.94: RmtLctnElctrncAdr
        //------------------------------------------------------------------------------------------------------
        XmlElement              nodeRltdRmtInf;
        VendTable               vendorTable;
        DirPartyContactInfoview DirPartyContactInfoview;
        str value, address;

        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #EFT)
        {
            value = SKS_EFT_Format::getCodelookupvalue('RmtLctnMtd', mSKS_EFT_FileDetail.RecId);

            vendorTable = VendTable::findByCompany(mSKS_EFT_FileDetail.AccountCompany, mSKS_EFT_FileDetail.AccountNum);

            if(value == 'FAXI')
            {
                select firstonly DirPartyContactInfoview where DirPartyContactInfoview.Party == vendorTable.Party && DirPartyContactInfoview.IsPrimary == true
                &&  DirPartyContactInfoview.Type == LogisticsElectronicAddressMethodType::Fax;
            }
            else if(value == 'EMAL')
            {
                select firstonly DirPartyContactInfoview where DirPartyContactInfoview.Party == vendorTable.Party && DirPartyContactInfoview.IsPrimary == true
                &&  DirPartyContactInfoview.Type == LogisticsElectronicAddressMethodType::Email;
            }
            if(DirPartyContactInfoView.Locator)
            {
                address = this.CharacterReplacement(DirPartyContactInfoView.Locator);
            }

            if(address != '' || value != '')
            {
                //          2.91: RltdRmtInf
                nodeRltdRmtInf = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('RltdRmtInf'));

                //              2.93: RmtLctnMtd
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRltdRmtInf, 'RmtLctnMtd', value, 0, false);

                //              2.94: RmtLctnElctrncAdr
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRltdRmtInf, 'RmtLctnElctrncAdr', address, 0, false);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf</Name>
				<Source><![CDATA[
    protected void node_PmtInf()
    {
        //------------------------------------------------------------------------------------------------------
        //  2.0: PmtInf
        //      2.1: PmtInfId
        //      2.2: PmtMtd
        //      2.4: NbOfTxs
        //      2.5: CtrlSum
        //      2.6: PmtTpInf
        //      2.17: ReqdExctnDt
        //      2.19: Dbtr
        //      2.20: DbtrAcct
        //      2.21: DbtrAgt
        //      2.24 ChrgBr
        //------------------------------------------------------------------------------------------------------
        SKS_EFT_FileDetail tmpSKS_EFT_FileDetail;

        batchCount++;

        // Select count and sum for this bank account
        select COUNT(InvoiceOrigAmountCur), SUM(InvoiceSettleAmountPmtCur) from tmpSKS_EFT_FileDetail
        where
            tmpSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
            tmpSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
            tmpSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary &&
            tmpSKS_EFT_FileDetail.BankAccountId == mSKS_EFT_FileDetail.BankAccountId &&
            tmpSKS_EFT_FileDetail.EffectiveDate == mSKS_EFT_FileDetail.EffectiveDate &&
            tmpSKS_EFT_FileDetail.PaymMode == mSKS_EFT_FileDetail.PaymMode &&
            tmpSKS_EFT_FileDetail.PaymSpec == mSKS_EFT_FileDetail.PaymSpec &&
            tmpSKS_EFT_FileDetail.PaymentCurrencyCode == mSKS_EFT_FileDetail.PaymentCurrencyCode;


        //  2.0: PmtInf
        nodePmtInf = nodeRoot.appendChild(xmlDoc.createElement('PmtInf'));

        //      2.1: PmtInfId
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtInf, 'PmtInfId', SKS_PP_StringFormats::strRight(mSKS_EFT_File.FileNbr + '-' + int2str(batchCount),35));

        //      2.2: PmtMtd
        if(mSKS_EFT_FileDetail.Module == SKS_EFT_Module::AR)
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtInf, 'PmtMtd', 'DD');
        }
        else
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtInf, 'PmtMtd', 'TRF');
        }

        //      2.3: BtchBookg
        this.node_PmtInf_BtchBookg(nodePmtInf);

        //      2.4: NbOfTxs
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtInf, 'NbOfTxs', num2str(tmpSKS_EFT_FileDetail.InvoiceOrigAmountCur,0,0,0,0));

        if(mSKS_EFT_FileDetail.Module == SKS_EFT_Module::AP)
        {
            //      2.5: CtrlSum
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtInf, 'CtrlSum', num2str(tmpSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1,0,2,1,0));
        }
        else
        {
            //      2.5: CtrlSum
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtInf, 'CtrlSum', num2str(tmpSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur,0,2,1,0));
        }

        //      2.6: PmtTpInf
        this.node_PmtInf_PmtTpInf(nodePmtInf);

        if(mSKS_EFT_FileDetail.Module == SKS_EFT_Module::AR)
        {
            //      2.18: ReqdColltnDt
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtInf, 'ReqdColltnDt', SKS_PP_StringFormats::strDateYYYYMMDD(mSKS_EFT_FileDetail.EffectiveDate, DateSeparator::Hyphen));
        }
        else
        {
            //      2.17: ReqdExctnDt
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtInf, 'ReqdExctnDt', SKS_PP_StringFormats::strDateYYYYMMDD(mSKS_EFT_FileDetail.EffectiveDate, DateSeparator::Hyphen));
        }

        if(mSKS_EFT_FileDetail.Module == SKS_EFT_Module::AP)
        {
            this.node_PmtInf_DbtrNodes(nodePmtInf);
        }
        else
        {
            this.node_PmtInf_CdtrNodes(nodePmtInf);
        }

        //      2.24 ChrgBr
        this.node_PmtInf_ChrgBr(nodePmtInf);
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectPaymentRecords</Name>
				<Source><![CDATA[
    [SuppressBPWarning('BPErrorSelectUsingFirstOnly', 'The buffer is used in next statement or in a datasource query loop.')]
    protected void selectPaymentRecords()
    {
        //------------------------------------------------------------------------------------------------------
        // Standard payment selction
        // Override if different selection is need for a format
        //------------------------------------------------------------------------------------------------------
    
        //Order by clause must match the clause in the SKS_EFT_Processing.SumByPayment
        select * from mSKS_EFT_FileDetail
            join mSKS_EFT_FileDetail_VendAddress
            join mSKS_EFT_FileDetail_BenBank
            join mSKS_EFT_FileDetail_Intermediary
            join mSKS_EFT_FileDetail_CreditParty
            join msKS_EFT_FileDetail_Instructions
                order by mSKS_EFT_FileDetail.PaymentCompany, //SKS_VSTS_12809
                   mSKS_EFT_FileDetail.RecordSection,
                   mSKS_EFT_FileDetail.PaymMode,
                   mSKS_EFT_FileDetail.BankAccountId,
                   mSKS_EFT_FileDetail.PaymentCurrencyCode,
                   mSKS_EFT_FileDetail.PaymSpec,
                   mSKS_EFT_FileDetail.EffectiveDate,
                   mSKS_EFT_FileDetail.DepCountryRegionId,
                   mSKS_EFT_FileDetail.RecordType,
                   mSKS_EFT_FileDetail.AccountNum,
                   mSKS_EFT_FileDetail.PaymentReference,
                   mSKS_EFT_FileDetail.RecId
          where mSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                mSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                mSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_VendAddress.RefRecId &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_BenBank.RefRecId &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_Intermediary.RefRecId &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_CreditParty.RefRecId &&
                mSKS_EFT_FileDetail.RecId == msKS_EFT_FileDetail_Instructions.RefRecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>