<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_PP_Format_RBS_CITIZEN_180</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class SKS_PP_Format_RBS_CITIZEN_180
/// </summary>
class SKS_PP_Format_RBS_CITIZEN_180 Extends SKS_PP_Format_BankGroup
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>txtDetail</Name>
				<Source><![CDATA[
    //RBS Citizens
    //Standard Positive Pay
    //             1-10    10      Account Number, left zero filled
    //            11-20    10      Serial Number, left zero filled
    //            21-30    10      Amount, Omit decimal and commas
    //            31-36     6      Issue Date MMDDYY, Current date if Void
    //            37-37    1       Record Type
    //            38-52    15      Additional Data 1, Not Used
    //            53-112   60      Payee Name
    //           113-172   68      Not to be used
    //           173-180    8      Stop reason   Not Used
    protected str txtDetail()
    {
        //BP Deviation Documented
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        int Mult;
        str ItemType;
        str issuedate;
        str amount;
        SKS_PP_FileFormat bFileFormat;
    
        ;
    
    
        select LastEffDate from bFileFormat where bFileFormat.FormatId == mSKS_PP_FileDetail.FormatId;
        //Convert negative void numbers to positives
        Mult = 1;
        if(mSKS_PP_FileDetail.ChkType != SKS_PP_ChequeType::Cheque)
        {
            issuedate = SKS_PP_StringFormats::strDateMMDDYY(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()));
            ItemType = 'V';
            if(mSKS_PP_FileDetail.chkcuryamt < 0)
            {
                Mult = -1;
            }
        }
        else
        {
            issuedate = SKS_PP_StringFormats::strDateMMDDYY(mSKS_PP_FileDetail.ChkDocDate);
            ItemType = 'I';
        }
    
        amount =  strRem(amount, ',');
        If (mSKS_PP_FileDetail.RecSection == SKS_PP_RecSection::Payments)
        {
            sb.Append(SKS_PP_StringFormats::strFill(10, mSKS_PP_FileDetail.BnkBankAcct, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
            sb.Append(SKS_PP_StringFormats::strFill(10, mSKS_PP_FileDetail.ChkRefNbr, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
            sb.Append(SKS_PP_StringFormats::strMoney(Mult * mSKS_PP_FileDetail.ChkCuryAmt, 10));
            sb.Append(issuedate);
            sb.Append(ItemType);
            sb.Append(SKS_PP_StringFormats::strFill(15, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
            sb.Append(SKS_PP_StringFormats::strFill(60, mSKS_PP_FileDetail.VendName, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
            sb.Append(SKS_PP_StringFormats::strFill(68, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
        Else
        {
            sb.Append('');
        }
    
    
        return sb.ToString();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>