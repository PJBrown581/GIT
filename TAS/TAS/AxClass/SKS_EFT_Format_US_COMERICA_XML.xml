<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_US_COMERICA_XML</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_US_COMERICA_XML extends SKS_EFT_Format
/// </summary>
class SKS_EFT_Format_US_COMERICA_XML extends SKS_EFT_Format
{
    #define.FormatVersion('20221116')
    XmlDocument xmlDoc;
    XmlElement  nodeRoot;
    XmlElement  nodeBankSvcRq;
    #define.CHKUS('CHK-US')
    #define.FWT('FWT')
    #define.IWT('IWT')
    #define.CCD('ACH-CCD')
    #define.PPD('ACH-PPD')
    #define.CTX('ACH-CTX')
    #define.CCP('CCP')
    #define.CHK('CHK')//SKS_VSTS_13686
    int recCount;
    BankAccountTable mBankAccountTable;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>BatchHeader</Name>
				<Source><![CDATA[
    protected void BatchHeader()
    {
        //------------------------------------------------------------------------------------------------------
        //<BATCHHEADER>
        //------------------------------------------------------------------------------------------------------
        str locFileName;
        int pos;
    
        // Extract header from filename
        pos = strScan(mSKS_EFT_File.FileName, 'BATCH', 0, strLen(mSKS_EFT_File.FileName));
        locFileName = substr(mSKS_EFT_File.FileName, pos, strLen(mSKS_EFT_File.FileName));
    
        // Search from right to left looking for a period.
        // The period will indicate where the extension starts
        pos = strFind(locFileName, '.', 80, -80);
        if (pos != 0)
        {
            locFileName = substr(locFileName, 0,pos-1);
        }
    
        this.fileWrite('<BATCHHEADER>' + locFileName + '</BATCHHEADER>');
    }

]]></Source>
			</Method>
			<Method>
				<Name>BatchTrailer</Name>
				<Source><![CDATA[
    protected void BatchTrailer()
    {
        //------------------------------------------------------------------------------------------------------
        //<BATCHTRAILER>
        //------------------------------------------------------------------------------------------------------
        this.fileWrite('<BATCHTRAILER>' + int2str(recCount) + '</BATCHTRAILER>');
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPostalAddressLineByPartyLocationRole</Name>
				<Source><![CDATA[
    protected LogisticsPostalAddress findPostalAddressLineByPartyLocationRole(
        DirPartyRecId   _party,
        LogisticsLocationRoleName   _roleName)
    {
        DirPartyLocation        partyLocation;
        LogisticsLocation       logisticsLocation;
        LogisticsPostalAddress  postalAddress;
    
        while select partyLocation
            where partyLocation.Party == _party
        {
            if(strScan(partyLocation.locationRoleNames(), _roleName, 1, strLen(partyLocation.locationRoleNames())))
            {
                logisticsLocation = logisticsLocation::find(partyLocation.Location);
                if(logisticsLocation.IsPostalAddress)
                {
                    postalAddress = LogisticsPostalAddress::findByLocation(logisticsLocation.RecId);
                    break;
                }
            }
        }
    
        return postalAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    protected void formatStructure()
    {
        //------------------------------------------------------------------------------------------------------
        //<BATCHHEADER>
        //<?xml version="1.0" encoding="UTF-8"?>
        //  <CMA>
        //      <BankSvcRq>
        //          <RqUID>
        //          <XferAddRq>
        //              <RqUID>
        //              <PmtRefId>
        //              <ChkNum>
        //              <CustId>
        //                  <SPName>
        //                  <CustPermId>
        //              <XferInfo>
        //                  <DepAcctIdFrom>
        //                      <AcctId>
        //                      <AcctType>
        //                      <Name>
        //                      <BankInfo>
        //                          <BankIdType>
        //                          <BankId>
        //                  <CustPayeeInfo>
        //                      <PayeeName1>
        //                      <PostAddr>
        //                          <Addr1>
        //                          <Addr2>
        //                          <City>
        //                          <StateProv>
        //                          <PostalCode>
        //                          <Country>
        //                  <DepAcctIdTo>
        //                      <AcctId>
        //                      <AcctType>
        //                      <Name>
        //                      <BankInfo>
        //                          <BankIdType>
        //                          <BankId>
        //                          <Name>
        //                          <PostAddr>
        //                  <CurAmt>
        //                      <Amt>
        //                      <CurCode>
        //                  <DueDt>
        //                  <Category>
        //                  <MailInfo>
        //                      <MailType>
        //                  <PmtInstruction>
        //<BATCHTRAILER>
        //------------------------------------------------------------------------------------------------------
        recCount = 0;
    
        this.BatchHeader();
    
        while(mSKS_EFT_FileDetail)
        {
            //Initialize XML
            xmlDoc = XmlDocument::newBlank();
    
            if(mModule == SKS_EFT_Module::AP)
            {
                // Get SKS_EFT_Bank
                this.getSKS_EFT_Bank();
    
                // Get SKS_EFT_VendorPaym
                this.getSKS_EFT_VendorPaym();
            }
            else
            {
                // Get SKS_EFTAR_Bank
                this.getSKS_EFTAR_Bank();
    
                // Get SKS_EFT_CustomerPaym
                this.getSKS_EFT_CustomerPaym();
            }
    
            // Get SKS_EFT_FileFormatPaymSpec
            this.getSKS_EFT_FileFormatPaymSpec();
    
            // Get Remittance information
            this.getRemittanceAddress(mSKS_EFT_FileFormatPaymSpec.UseCheckNumber);
    
            if(mBankAccountTable.AccountID != mSKS_EFT_FileDetail.BankAccountId)
            {
                // Get Bank Account Table
                mBankAccountTable = BankAccountTable::find(mSKS_EFT_FileDetail.BankAccountId);
            }
    
            this.node_CMA();
            this.node_XferAddRq();
    
            this.fileWrite(xmlDoc.toString());
            recCount++;
            next mSKS_EFT_FileDetail;
        }
    
        this.BatchTrailer();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceDetails</Name>
				<Source><![CDATA[
    private str getInvoiceDetails(XmlElement _nodeXferAddRq)
    {
        XmlElement  nodeCardInfo;
        SKS_EFT_FileDetail sks_EFT_FileDetail;
        str invDetails, reminfo, remValues, remHeading, invNumbers, invInfo;
        str cons = '{crlf}';
        boolean first = true,firstInvInfo = true;
    
        while select InvoiceNumber, InvoiceDate, InvoiceSettleAmountPmtCur, InvoiceTransactionTxt from SKS_EFT_FileDetail where
                sks_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId
        {
            if(strLen(invNumbers) != 0)
            {
                invNumbers += ',';
            }
            invNumbers += sks_EFT_FileDetail.InvoiceNumber;

            if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CHK && 
                (sks_EFT_FileDetail.InvoiceNumber || 
                sks_EFT_FileDetail.InvoiceSettleAmountPmtCur))//SKS_VSTS_13686
            {
                if(firstInvInfo)
                {
                    invInfo = 'InvNo';
                    firstInvInfo = false;
                }

                if(invInfo)
                {
                    invInfo = invInfo + ' ';
                }
                if(sks_EFT_FileDetail.InvoiceNumber)
                {
                    invInfo += sks_EFT_FileDetail.InvoiceNumber + ' ';
                }
                if(sks_EFT_FileDetail.InvoiceSettleAmountPmtCur)
                {
                    invInfo += num2str(sks_EFT_FileDetail.InvoiceSettleAmountPmtCur,0,2,1,0);
                }
                
            }
            else if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CHKUS)
            {
                if(invNumbers)
                {
                    remValues = SKS_PP_StringFormats::strFill(15, sks_EFT_FileDetail.InvoiceNumber, SKS_PP_FillCharacter::Space,SKS_PP_FillSide::Right) + '  ' +
                                    SKS_PP_StringFormats::strDateMMDDYY(sks_EFT_FileDetail.InvoiceDate, DateSeparator::Slash) + '  ' +
                                    SKS_PP_StringFormats::strFill(41, sks_EFT_FileDetail.InvoiceTransactionTxt, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right) + '  ' +
                                    SKS_PP_StringFormats::strFill(10, num2str(sks_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1,0,2,1,0), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right);
        
                    if(first)
                    {
                        remHeading = SKS_PP_StringFormats::strFill(15,'Invoice Number', SKS_PP_FillCharacter::Space,SKS_PP_FillSide::Right) + '  ' +
                                           SKS_PP_StringFormats::strFill(8,'Date', SKS_PP_FillCharacter::Space,SKS_PP_FillSide::Right) + '  ' +
                                           SKS_PP_StringFormats::strFill(41, 'Description', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right) + '  ' +
                                           SKS_PP_StringFormats::strFill(10, 'Amount', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right);
        
                        reminfo += remHeading;
        
                        first = false;
                    }
        
                    reminfo += cons + remValues;
                }
            }
            else
            {
                invDetails += strFmt('{%1{%2{%3}', sks_EFT_FileDetail.InvoiceNumber, SKS_PP_StringFormats::strDateYYYYMMDD(sks_EFT_FileDetail.InvoiceDate, DateSeparator::Hyphen), num2str(sks_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1,0,2,1,0));
            }

        }
    
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CHKUS)
        {
            //              <RemittanceInfo>
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeXferAddRq, 'RemittanceInfo', reminfo + cons);
        }
        else if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CHK && invInfo)//SKS_VSTS_13686
        {
            //              <RemittanceInfo>
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeXferAddRq, 'RemittanceInfo', invInfo);
        }
        else if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CCP && invNumbers)
        {
            //              <CardInfo>
            nodeCardInfo = _nodeXferAddRq.appendChild(xmlDoc.createElement('CardInfo'));
    
            //              <InvNumber>
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCardInfo, 'InvNumber', invNumbers);
    
            //              <CardRefId>
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCardInfo, 'CardRefId', invDetails);
        }
        
        return this.CharacterReplacement(invNumbers);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CMA</Name>
				<Source><![CDATA[
    private void node_CMA()
    {
        //------------------------------------------------------------------------------------------------------
        //  <CMA>
        //      <BankSvcRq>
        //          <RqUID>
        //------------------------------------------------------------------------------------------------------
    
        //CMA Request
        //  <CMA>
        nodeRoot = xmlDoc.appendChild(xmlDoc.createElement('CMA'));
    
        //      <BankSvcRq>
        nodeBankSvcRq = nodeRoot.appendChild(xmlDoc.createElement('BankSvcRq'));
    
        //          <RqUID>
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeBankSvcRq, 'RqUID', '00000000-0000-0000-0000-000000000001');
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PostAddr</Name>
				<Source><![CDATA[
    private void node_PostAddr(XmlElement  _node,
                               str _Addr1 = '',
                               str _Addr2 = '',
                               str _City = '',
                               str _StateProv = '',
                               str _PostalCode = '',
                               str _Country = '')
    {
        //------------------------------------------------------------------------------------------------------
        //                      <PostAddr>
        //                          <Addr1>
        //                          <Addr2>
        //                          <City>
        //                          <StateProv>
        //                          <PostalCode>
        //                          <Country>
        //------------------------------------------------------------------------------------------------------
        XmlElement nodePostAddr;
        LogisticsAddressCountryRegion lLogisticsAddressCountryRegion;
        LogisticsAddressCountryRegionISOCode ISOCode;
    
        if(strLen(_Country) == 2)
        {
            ISOCode = _Country;
    
            select CountryRegionId, ISOcode from lLogisticsAddressCountryRegion where lLogisticsAddressCountryRegion.ISOcode == ISOCode;
    
            _Country = lLogisticsAddressCountryRegion.CountryRegionId;
        }
    
        if(_Addr1 != '' || _Addr2 != '' || _City != '' || _StateProv != '' || _PostalCode != '' || _Country != '')
        {
            //                      <PostAddr>
            nodePostAddr = _node.appendChild(xmlDoc.createElement('PostAddr'));
    
            //                          <Addr1>
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePostAddr, 'Addr1', this.CharacterReplacement(_Addr1), 0,false);
    
            //                          <Addr2>
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePostAddr, 'Addr2', this.CharacterReplacement(_Addr2), 0,false);
    
            //                          <City>
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePostAddr, 'City',  this.CharacterReplacement(_City), 0,false);
    
            //                          <StateProv>
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePostAddr, 'StateProv', this.CharacterReplacement(_StateProv), 0,false);
    
            //                          <PostalCode>
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePostAddr, 'PostalCode', this.CharacterReplacement(_PostalCode), 0,false);
    
            //                          <Country>
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePostAddr, 'Country', _Country, 0,false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_XferAddRq</Name>
				<Source><![CDATA[
    private void node_XferAddRq()
    {
        //------------------------------------------------------------------------------------------------------
        //      <BankSvcRq>
        //          <XferAddRq>
        //              <RqUID>
        //              <PmtRefId>
        //              <ChkNum>
        //              <CustId>
        //              <XferInfo>
        //------------------------------------------------------------------------------------------------------
        XmlElement  nodeXferAddRq;
    
        //          <XferAddRq>
        nodeXferAddRq = nodeBankSvcRq.appendChild(xmlDoc.createElement('XferAddRq'));
    
        //              <RqUID>
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeXferAddRq, 'RqUID', '00000000-0000-0000-0000-000000000001');
    
        //              <PmtRefId>
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeXferAddRq, 'PmtRefId', this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference));
    
        if(mSKS_EFT_FileFormatPaymSpec.UseCheckNumber)
        {
            //              <ChkNum>
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeXferAddRq, 'ChkNum', SKS_PP_StringFormats::strFill(10, this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        }
    
        //              <CustId>
        this.node_XferAddRq_CustId(nodeXferAddRq);
    
        //              <XferInfo>
        this.node_XferAddRq_XferInfo(nodeXferAddRq);
    
        this.getInvoiceDetails(nodeXferAddRq);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_XferAddRq_CustId</Name>
				<Source><![CDATA[
    private void node_XferAddRq_CustId(XmlElement _nodeXferAddRq)
    {
        //------------------------------------------------------------------------------------------------------
        //              <CustId>
        //                  <SPName>
        //                  <CustPermId>
        //------------------------------------------------------------------------------------------------------
        XmlElement  nodeCustId;
        str value;

        value = SKS_EFT_Format::getCodelookupvalue('CustomerId', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank);
    
        //              <CustId>
        nodeCustId = _nodeXferAddRq.appendChild(xmlDoc.createElement('CustId'));
    
        //                  <SPName>
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCustId, 'SPName', 'Comerica');
    
        //                  <CustPermId>
        if(mModule == SKS_EFT_Module::AR && mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CCD && value)
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCustId, 'CustPermId', this.CharacterReplacement(value));
        }
        else
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCustId, 'CustPermId', mSKS_EFT_Bank.WOrdPartyId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_XferAddRq_XferInfo</Name>
				<Source><![CDATA[
    private void node_XferAddRq_XferInfo(XmlElement _XferAddRq)
    {
        //------------------------------------------------------------------------------------------------------
        //          <XferInfo>
        //              <DepAcctIdFrom>
        //              <CustPayeeInfo>
        //              <DepAcctIdTo>
        //              <CurAmt>
        //              <DueDt>
        //              <Category>
        //              <MailInfo>
        //                  <MailType>
        //              <PmtInstruction>
        //------------------------------------------------------------------------------------------------------
        XmlElement  nodeXferInfo;
        XmlElement  nodeMailInfo;
        XmlElement  nodeCardAcctId;
        SKS_EB_Date effectivDate;
        str value;

        value = SKS_EFT_Format::getCodelookupvalue('CorporationNumber', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank);
    
        //          <XferInfo>
        nodeXferInfo = _XferAddRq.appendChild(xmlDoc.createElement('XferInfo'));
    
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CCP)
        {
            //              <CardAcctId>
            nodeCardAcctId = nodeXferInfo.appendChild(xmlDoc.createElement('CardAcctId'));
    
            if(value)
            {
                //              <CorpNo>
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCardAcctId, 'CorpNo', this.CharacterReplacement(value));
            }
            //              <CompanyNo>
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCardAcctId, 'CompanyNo', mSKS_EFT_FileDetail.FileACHCompanyId);
    
            //              <VendorId>
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCardAcctId, 'VendorId', mSKS_EFT_VendorPaym.VendAccount);
        }
        else
        {
            //              <DepAcctIdFrom>
            this.node_XferInfo_DepAcctIdFrom(nodeXferInfo);
        }
    
        if(mSKS_EFT_FileFormatPaymSpec.UseCheckNumber)
        {
            //              <CustPayeeInfo>
            this.node_XferInfo_CustPayeeInfo(nodeXferInfo);
        }
        else if(mSKS_EFT_FileFormatPaymSpec.TransactionCode != #CCP)
        {
            //              <DepAcctIdTo>
            this.node_XferInfo_DepAcctIdTo(nodeXferInfo);
    
            if(mSKS_EFT_VendorPaym.WIntBankSwift || mSKS_EFT_VendorPaym.WIntBankId)
            {
                //              <IntermediaryDepAcct>
                this.node_XferInfo_IntermediaryDepAcct(nodeXferInfo);
            }
        }
    
        //              <CurAmt>
        this.node_XferInfo_CurAmt(nodeXferInfo);

        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #IWT)
        {
            //              <SendDt>
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeXferInfo, 'SendDt', SKS_PP_StringFormats::strDateYYYYMMDD(mSKS_EFT_FileDetail.EffectiveDate, DateSeparator::Hyphen));
            
            if(mSKS_EFT_FileDetail.PaymentCurrencyCode == 'USD' ||
               mSKS_EFT_FileDetail.PaymentCurrencyCode == 'CAD' ||
               mSKS_EFT_FileDetail.PaymentCurrencyCode == 'MXN')
            {
                //              <DueDt>
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeXferInfo, 'DueDt', SKS_PP_StringFormats::strDateYYYYMMDD(mSKS_EFT_FileDetail.EffectiveDate, DateSeparator::Hyphen));                
            }
            else
            {
                effectivDate = SKS_EFT_Processing::GetOffsetDate(1, mSKS_EFT_FileDetail.EffectiveDate, mSKS_EFT_Bank.BankHolidayGroupId);
                //              <DueDt>
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeXferInfo, 'DueDt', SKS_PP_StringFormats::strDateYYYYMMDD(effectivDate, DateSeparator::Hyphen));                
            }
        }
        else        
        {
            //              <DueDt>
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeXferInfo, 'DueDt', SKS_PP_StringFormats::strDateYYYYMMDD(mSKS_EFT_FileDetail.EffectiveDate, DateSeparator::Hyphen));            
        }

        //              <Category>
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #CHKUS:
            case #CHK:          //SKS_VSTS_13896
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeXferInfo, 'Category', 'Check');
                break;
            case #FWT:
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeXferInfo, 'Category', 'Fedwire');
                break;
            case #IWT:
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeXferInfo, 'Category', 'International');
                break;
            case #CCP:
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeXferInfo, 'Category', 'Card');
                break;
            default:
                if(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur > 0)
                {
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeXferInfo, 'Category', 'ACH Debit');
                }
                else
                {
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeXferInfo, 'Category', 'ACH Credit');
                }
                break;
        }
    
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CHKUS)
        {
            //              <MailInfo>
            nodeMailInfo = nodeXferInfo.appendChild(xmlDoc.createElement('MailInfo'));
    
            //                  <MailType>
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeMailInfo, 'MailType', 'US');
        }
    
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CCD ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #PPD ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CTX)
        {
            //              <PmtInstruction>
            this.node_XferInfo_PmtInstruction(nodeXferInfo);
        }
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CHKUS)
        {
            //              <RemittanceInfo>
            this.getInvoiceDetails(nodeXferInfo);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_XferInfo_CurAmt</Name>
				<Source><![CDATA[
    private void node_XferInfo_CurAmt(XmlElement  _nodeXferInfo)
    {
        //------------------------------------------------------------------------------------------------------
        //              <CurAmt>
        //                  <Amt>
        //                  <CurCode>
        //                  <CurRate>
        //------------------------------------------------------------------------------------------------------
        LedgerJournalTrans  lLedgerJournalTrans;
        XmlElement  nodeCurAmt;
    
        //              <CurAmt>
        nodeCurAmt = _nodeXferInfo.appendChild(xmlDoc.createElement('CurAmt'));
    
        //                  <Amt>
        if(mModule == SKS_EFT_Module::AR)
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCurAmt, 'Amt', num2str(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur,0,2,1,0));
        }
        else
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCurAmt, 'Amt', num2str((mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1),0,2,1,0));
        }
    
        //                  <CurCode>
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCurAmt, 'CurCode', mSKS_EFT_FileDetail.PaymentCurrencyCode);
    
        //                  <CurRate>
        if(mSKS_EFT_FileDetail.PaymentCurrencyCode != 'USD' && !mSKS_EFT_FileFormatPaymSpec.UseCheckNumber)
        {
            select firstonly ExchRate from lLedgerJournalTrans where lLedgerJournalTrans.RecId == mSKS_EFT_FileDetail.PaymentLineRecId;
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCurAmt, 'CurRate', num2str((lLedgerJournalTrans.ExchRate),0,2,1,0));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_XferInfo_CustPayeeInfo</Name>
				<Source><![CDATA[
    private void node_XferInfo_CustPayeeInfo(XmlElement _nodeXferInfo)
    {
        //------------------------------------------------------------------------------------------------------
        //              <CustPayeeInfo>
        //                  <PayeeName1>
        //                  <PostAddr>
        //                      <Addr1>
        //                      <Addr2>
        //                      <City>
        //                      <StateProv>
        //                      <PostalCode>
        //                      <Country>
        //------------------------------------------------------------------------------------------------------
        XmlElement  nodeCustPayeeInfo;
    
        //              <CustPayeeInfo>
        nodeCustPayeeInfo = _nodeXferInfo.appendChild(xmlDoc.createElement('CustPayeeInfo'));
    
        //                  <PayeeName1>
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCustPayeeInfo, 'PayeeName1', mRemittanceName);
    
        //                  <PostAddr>
        this.node_PostAddr(nodeCustPayeeInfo, mRemittanceAdrLine1, mRemittanceAdrLine2, mRemittanceCity, mRemittanceState, mRemittanceZipCode, mRemittanceCountryRegionId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_XferInfo_DepAcctIdFrom</Name>
				<Source><![CDATA[
    private void node_XferInfo_DepAcctIdFrom(XmlElement  _nodeXferInfo)
    {
        //------------------------------------------------------------------------------------------------------
        //              <DepAcctIdFrom>
        //                  <AcctId>
        //                  <AcctType>
        //                  <Name>
        //                  <BankInfo>
        //                      <BankIdType>
        //                      <BankId>
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeDepAcctIdFrom;
        XmlElement nodeBankInfo;
    
        //              <DepAcctIdFrom>
        nodeDepAcctIdFrom = _nodeXferInfo.appendChild(xmlDoc.createElement('DepAcctIdFrom'));
    
        //                  <AcctId>
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeDepAcctIdFrom, 'AcctId', mSKS_EFT_FileDetail.BankBankAcct);
    
        //                  <AcctType>
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeDepAcctIdFrom, 'AcctType', 'DDA');
    
        if(mModule == SKS_EFT_Module::AR && mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CCD)
        {
            //                  <Name>
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeDepAcctIdFrom, 'Name', this.CharacterReplacement(mSKS_EFT_FileDetail.FileACHCompanyName));
        }
        else
        {
            //                  <Name>
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeDepAcctIdFrom, 'Name', this.CharacterReplacement(mSKS_EFT_Bank.WOrdPartyName));
        }
        //                  <BankInfo>
        nodeBankInfo = nodeDepAcctIdFrom.appendChild(xmlDoc.createElement('BankInfo'));
    
        //                      <BankIdType>
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeBankInfo, 'BankIdType', 'BIC');
    
        //                      <BankId>
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeBankInfo, 'BankId', mBankAccountTable.SWIFTNo);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_XferInfo_DepAcctIdTo</Name>
				<Source><![CDATA[
    private void node_XferInfo_DepAcctIdTo(XmlElement  _nodeXferInfo)
    {
        //------------------------------------------------------------------------------------------------------
        //              <DepAcctIdTo>
        //                  <AcctId>
        //                  <AcctType>
        //                  <Name>
        //                  <PostAddr>
        //                  <BankInfo>
        //                      <BankIdType>
        //                      <BankId>
        //                      <Name>
        //                      <PostAddr>
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeDepAcctIdTo;
        XmlElement nodeBankInfo;
        LogisticsPostalAddress  postaladdress,address;
        int length;
    
        //              <DepAcctIdTo>
        nodeDepAcctIdTo = _nodeXferInfo.appendChild(xmlDoc.createElement('DepAcctIdTo'));
    
        //                  <AcctId>
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeDepAcctIdTo, 'AcctId', mSKS_EFT_FileDetail.DepBankAcct);
    
        //                  <AcctType>
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeDepAcctIdTo, 'AcctType', 'DDA');
    
        //                  <Name>
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #CCD:
            case #PPD:
                length = 22;
                break;
            case #CTX:
                length = 16;
                break;
            default:
                length = 35;
                break;
        }
    
        if(mModule == SKS_EFT_Module::AR && mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CCD)
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeDepAcctIdTo, 'Name', this.CharacterReplacement(mSKS_EFT_FileDetail.AccountName), length);
    
            if(mSKS_EFT_FileDetail.AccountNum && mSKS_EFT_FileDetail.AccountType == LedgerJournalACType::Cust)
            {
                postalAddress = this.findPostalAddressLineByPartyLocationRole(CustTable::findByCompany(mSKS_EFT_FileDetail.AccountCompany, mSKS_EFT_FileDetail.AccountNum).Party, 'AREFT');
                if(postalAddress)
                {
                    //                      <PostAddr>
                    this.node_PostAddr(nodeDepAcctIdTo, postalAddress.BuildingCompliment, postalAddress.Street, postalAddress.City, postalAddress.State, postalAddress.ZipCode, postalAddress.CountryRegionId);
                }
            }
        }
        else
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeDepAcctIdTo, 'Name', mSKS_EFT_VendorPaym.WBeneName, length);
    
            //                  <PostAddr>
            this.node_PostAddr(nodeDepAcctIdTo, mRemittanceAdrLine1, mRemittanceAdrLine2, mRemittanceCity, mRemittanceState, mRemittanceZipCode, mRemittanceCountryRegionId);
        }
    
        //                  <BankInfo>
        nodeBankInfo = nodeDepAcctIdTo.appendChild(xmlDoc.createElement('BankInfo'));
    
        if(mSKS_EFT_FileDetail.DepSwiftNo && mSKS_EFT_FileFormatPaymSpec.TransactionCode == #IWT)
        {
            //                      <BankIdType>
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeBankInfo, 'BankIdType', 'BIC');
    
            //                      <BankId>
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeBankInfo, 'BankId', mSKS_EFT_FileDetail.DepSwiftNo);
        }
        else
        {
            //                      <BankIdType>
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeBankInfo, 'BankIdType', 'ABA');
    
             //                      <BankId>
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeBankInfo, 'BankId', mSKS_EFT_FileDetail.DepBankTransit);
        }
    
        if(mModule == SKS_EFT_Module::AR && mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CCD)
        {
            //                      <Name>
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeBankInfo, 'Name', this.CharacterReplacement(CustBankAccount::findByCompany(mSKS_EFT_FileDetail.AccountCompany, mSKS_EFT_CustomerPaym.CustAccount, mSKS_EFT_CustomerPaym.CustBankAccountId).Name));
    
            select address where address.Location == CustBankAccount::findByCompany(mSKS_EFT_FileDetail.AccountCompany, mSKS_EFT_CustomerPaym.CustAccount, mSKS_EFT_CustomerPaym.CustBankAccountId).Location;
            //                      <PostAddr>
            this.node_PostAddr(nodeBankInfo, address.Street,address.City, '', '', '', this.getLogisticsAddressCountryISO(address.CountryRegionId));
    
        }
        else
        {
            //                      <Name>
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeBankInfo, 'Name', this.CharacterReplacement(mSKS_EFT_VendorPaym.WBenBankName));
    
            //                      <PostAddr>
            this.node_PostAddr(nodeBankInfo, mSKS_EFT_VendorPaym.WBenBankAddr, mSKS_EFT_VendorPaym.WBenBankCity, '', '', '', this.getLogisticsAddressCountryISO(mSKS_EFT_VendorPaym.WBenBankCountryRegionId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_XferInfo_IntermediaryDepAcct</Name>
				<Source><![CDATA[
    private void node_XferInfo_IntermediaryDepAcct(XmlElement  _nodeXferInfo)
    {
        //------------------------------------------------------------------------------------------------------
        //              <IntermediaryDepAcct>
        //                  <BankInfo>
        //                      <BankIdType>
        //                      <BankId>
        //                      <Name>
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeIntermediaryDepAcct;
        XmlElement nodeBankInfo;
    
        //              <IntermediaryDepAcct>
        nodeIntermediaryDepAcct = _nodeXferInfo.appendChild(xmlDoc.createElement('IntermediaryDepAcct'));
    
        //                  <BankInfo>
        nodeBankInfo = nodeIntermediaryDepAcct.appendChild(xmlDoc.createElement('BankInfo'));
    
        if(mSKS_EFT_VendorPaym.WIntBankSwift)
        {
            //                      <BankIdType>
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeBankInfo, 'BankIdType', 'BIC');
    
            //                      <BankId>
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeBankInfo, 'BankId', mSKS_EFT_VendorPaym.WIntBankSwift);
        }
        else
        {
            //                      <BankIdType>
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeBankInfo, 'BankIdType', 'ABA');
    
            //                      <BankId>
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeBankInfo, 'BankId', mSKS_EFT_VendorPaym.WIntBankId);
        }
        //                      <Name>
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeBankInfo, 'Name', this.CharacterReplacement(mSKS_EFT_VendorPaym.WIntBankName));
    
        //                      <PostAddr>
        this.node_PostAddr(nodeBankInfo, mSKS_EFT_VendorPaym.WIntBankAddr, mSKS_EFT_VendorPaym.WIntBankAddr2, '', '', '', this.getLogisticsAddressCountryISO(mSKS_EFT_VendorPaym.WIntBankCountryRegionId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_XferInfo_PmtInstruction</Name>
				<Source><![CDATA[
    private void node_XferInfo_PmtInstruction(XmlElement  _nodeXferInfo)
    {
        //------------------------------------------------------------------------------------------------------
        //              <PmtInstruction>
        //                  <PmtFormat>
        //                  <CompanyEntryDescription>
        //                  <CompanyDiscretionaryData>
        //                  <Transaction Code>
        //------------------------------------------------------------------------------------------------------
        XmlElement  nodePmtInstruction;
    
        //              <PmtInstruction>
        nodePmtInstruction = _nodeXferInfo.appendChild(xmlDoc.createElement('PmtInstruction'));
    
        //                  <PmtFormat>
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #PPD:
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtInstruction, 'PmtFormat', 'PPD');
                break;
            case #CCD:
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtInstruction, 'PmtFormat', 'CCD');
                break;
            case #CTX:
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtInstruction, 'PmtFormat', 'CTX');
                break;
        }
    
        //                  <CompanyEntryDescription>
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtInstruction, 'CompanyEntryDescription', subStr(this.CharacterReplacement(mSKS_EFT_FileDetail.FileACHCompanyName),1,10));
    
        //                  <Transaction Code>
        switch(mSKS_EFT_FileDetail.DepBankAcctType)
        {
            case BankAccountType::CheckingAccount:
                if(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur > 0)
                {
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtInstruction, 'TransactionCode', '27');
                }
                else
                {
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtInstruction, 'TransactionCode', '22');
                }
                break;
            default: //SavingsAccount
                if(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur > 0)
                {
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtInstruction, 'TransactionCode', '37');
                }
                else
                {
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtInstruction, 'TransactionCode', '32');
                }
                break;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>