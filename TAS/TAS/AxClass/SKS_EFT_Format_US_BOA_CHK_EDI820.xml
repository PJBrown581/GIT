<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_US_BOA_CHK_EDI820</Name>
	<SourceCode>
		<Declaration><![CDATA[
// BOA Outsourced check printing using EDI820
//
// Supports transaction types:
//
// Structure:

/// <summary>
/// SKS_EFT_Format_US_BOA_CHK_EDI820 extends SKS_EFT_Format
/// </summary>
class SKS_EFT_Format_US_BOA_CHK_EDI820 extends SKS_EFT_Format
{
    #define.LineEnd('~')
    #define.Separator('*')
    #define.CheckStandard('CHK-S')
    #define.CheckOvernightPayor('CHK-O-PR')
    #define.CheckOvernightPayee('CHK-O-PE')
    int mRMRCount;
    int mTranSetCount;
    int mSegmentCount;
    str mInvTextWrap;
    str mIntControlNbr;
    str mGroupControlNbr;
    AmountMST mPaymentAmount;
    str mCurrentTime;
    SKS_EFT_EDI mSKS_EFT_EDI;
    #define.FormatVersion('20221121')

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    [SuppressBPWarningAttribute("BPCheckNestedLoopinCode","Selecting a local table buffer based on a global table buffer attribute)")]
    protected void formatStructure()
    {
        SKS_EFT_FileDetail invSKS_EFT_FileDetail;
        boolean firstRec = true;
        ;
    
        while(mSKS_EFT_FileDetail)
        {
            // Get SKS_EFT_Bank
            this.getSKS_EFT_Bank();
    
            // Get SKS_EFT_VendorPaym
            this.getSKS_EFT_VendorPaym();
    
            // Initialize EDI class
            mSKS_EFT_EDI = new SKS_EFT_EDI(mSKS_EFT_File.FormatId, mSKS_EFT_FileDetail.PaymSpec, mSKS_EFT_VendorPaym.EDI820Layout, mSKS_EFT_File.RecId);
            mSKS_EFT_EDI.setEFTFileId(num2str(mSKS_EFT_FileFormat.NextFileId,0,0,0,0));
    
            if(firstRec)
            {
                firstRec = false;
    
                this.rec_ISA();
                this.rec_GS();
            }
    
            // Detail lines
            this.rec_ST();
            this.rec_BPR();
            this.rec_TRN();
            this.rec_REFZZ();
            this.rec_REFCK();
            this.rec_N1();
            this.rec_N3();
            this.rec_N4();
            this.rec_ENT();
    
            while select invSKS_EFT_FileDetail where invSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId
            {
                this.rec_RMR();
                this.rec_REF0001(invSKS_EFT_FileDetail);
                this.rec_REF0002(invSKS_EFT_FileDetail);
                this.rec_REF0003(invSKS_EFT_FileDetail);
                this.rec_REF0004(invSKS_EFT_FileDetail);
                this.rec_REF0005(invSKS_EFT_FileDetail);
                this.rec_REF0006(invSKS_EFT_FileDetail);
    
                if(mInvTextWrap != '')
                {
                    this.rec_RMR();
                    this.rec_REF0007(invSKS_EFT_FileDetail);
                }
            }
    
            this.rec_SE();
    
            mSegmentCount = 0;
            mRMRCount = 0;
    
            next mSKS_EFT_FileDetail;
        }
    
        this.rec_GE();
        this.rec_IEA();
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_BPR</Name>
				<Source><![CDATA[
    //Nbr   Description                                         Max     Type    Comment
    //01    Trans. Handling Code                                1       ID
    //02    Monetary Amount                                     10      R
    //03    Credit/Debit Flag Code                              1       ID
    //04    Payment Method Code                                 3       ID
    //05    Payment Format                                      3       ID
    //06    DFI ID No. Qualifier                                2       ID
    //07    DFI ID Number                                       9       AN
    //08    Acct. No. Qual. Code                                2       ID
    //09    Account Number                                      12      AN
    //10    Orig. Co. ID                                        10      AN
    //11    Orig. Co. Code                                      9       AN
    //12    DFI ID No. Qualifier                                2       ID
    //13    DFI ID Number                                       9       N
    //14    Acct. No. Qual Code                                 2       ID
    //15    Account Number                                      35      AN
    //16    Effective Entry Date                                8       DT
    boolean rec_BPR()
    {
        //BP Deviation Documented
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        AmountMST amt;
        ;
        mSegmentCount++;
    
        sb.Append('BPR');
        sb.Append(#Separator);
    
        //01    Trans. Handling Code
        sb.Append('C');
        sb.Append(#Separator);
    
        //02    Monetary Amount
        amt = this.getPositiveAmount(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur);
        sb.Append(num2str((amt),0,2,0,0));
        sb.Append(#Separator);
    
        //03    Credit/Debit Flag Code
        sb.Append('C');
        sb.Append(#Separator);
    
        //04    Payment Method Code
        sb.Append('CHK');
        sb.Append(#Separator);
    
        //05    Payment Format
        sb.Append('PBC');
        sb.Append(#Separator);
    
        //06    DFI ID No. Qualifier
        sb.Append('01');
        sb.Append(#Separator);
    
        //07    DFI ID Number
        sb.Append(mSKS_EFT_FileDetail.BankBankTransit);
        sb.Append(#Separator);
    
        //08    Acct. No. Qual. Code
        sb.Append('DA');
        sb.Append(#Separator);
    
        //09    Account Number
        sb.Append(mSKS_EFT_FileDetail.BankBankAcct);
        sb.Append(#Separator);
    
        //10    Orig. Co. ID
        sb.Append(#Separator);
    
        //11    Orig. Co. Code
        sb.Append(#Separator);
    
        //12    DFI ID No. Qualifier
        sb.Append(#Separator);
    
        //13    DFI ID Number
        sb.Append(#Separator);
    
        //14    Acct. No. Qual Code
        sb.Append(#Separator);
    
        //15    Account Number
        sb.Append(#Separator);
    
        //16    Effective Entry Date
        sb.Append(SKS_PP_StringFormats::strDateYYMMDD(mSKS_EFT_File.EffectiveDate));
    
        sb.Append(#LineEnd);
    
        this.fileWrite(sb.ToString());
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_ENT</Name>
				<Source><![CDATA[
    //Nbr   Description                                         Max     Type    Comment
    //01    Assigned Number                                     6       N0
    boolean rec_ENT()
    {
        //BP Deviation Documented
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        ;
        mSegmentCount++;
    
        sb.Append('ENT');
        sb.Append(#Separator);
    
        //01    Assigned Number
        sb.Append('1');
    
        sb.Append(#LineEnd);
    
        this.fileWrite(sb.ToString());
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_GE</Name>
				<Source><![CDATA[
    //Nbr   Description                                         Max     Type    Comment
    //1     Number of Transaction Sets Included                 6       N
    //2     Group Control Number                                9       AN
    boolean rec_GE()
    {
        str value;
        ;
        mSKS_EFT_EDI.setTranSetCount(mTranSetCount);
        value = mSKS_EFT_EDI.buildGE();
    
        this.fileWrite(value);
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_GS</Name>
				<Source><![CDATA[
    //Nbr   Description                                         Max     Type    Comment
    //1     Functional ID Code                                  2       AN
    //2     Application Sender's Code                           15      AN
    //3     Application Receiver's Code                         15      AN
    //4     Date                                                8       D
    //5     Time                                                8       T
    //6     Group Control Number                                9       AN
    //7     Responsible Agency Code                             2       AN
    //8     Version/Release ID Code                             12      AN
    
    boolean rec_GS()
    {
        str value;
        ;
        value = mSKS_EFT_EDI.buildGS();
    
        this.fileWrite(value);
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_IEA</Name>
				<Source><![CDATA[
    //Nbr   Description                                         Max     Type    Comment
    //1     Number of Included Functional Group                 5       N
    //2     Interchange Control Number                          9       AN
    boolean rec_IEA()
    {
        str value;
        ;
        mSKS_EFT_EDI.setFunctionalGroupCount(1);
        value = mSKS_EFT_EDI.buildIEA();
    
        this.fileWrite(value);
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_ISA</Name>
				<Source><![CDATA[
    //Nbr   Description                                         Max     Type    Comment
    //01    Authorization Information Qualifier                 2       AN      00
    //02    Authorization Information                           10      AN      Blank fill
    //03    Security Information Qualifier                      2       AN      00
    //04    Security Information                                10      AN      Blank fill
    //05    Interchange ID Qualifier                            2       AN      ZZ
    //06    Interchange Sender ID                               15      AN      Fed Tax Id
    //07    Interchange ID Qualifier                            2       AN      ZZ
    //08    Interchange Receiver ID                             15      AN      ABA Bank
    //09    Interchange Date                                    6       D       YYMMDD
    //10    Interchange Time                                    4       T       HHMM
    //11    Interchange Control Standards Identifier            1       AN      U
    //12    Interchange Control Version Number                  5       AN      00200
    //13    Interchange Control Number                          9       N       Control number (Zero padded)
    //14    Acknowledgement Requested                           1       N       0
    //15    Test Indicator                                      1       AN      P
    //16    Subelement Separator                                1       AN      ~
    boolean rec_ISA()
    {
        str value;
        ;
        value = mSKS_EFT_EDI.buildISA();
    
        this.fileWrite(value);
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N1</Name>
				<Source><![CDATA[
    //Nbr   Description                                         Max     Type    Comment
    //01    Entity ID Code                                      3       ID
    //02    Name                                                35      AN      Payee Name (Line 1) Domestic and Foreign
    boolean rec_N1()
    {
        //BP Deviation Documented
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        ;
        mSegmentCount++;
    
        sb.Append('N1');
        sb.Append(#Separator);
    
        //01     Entity ID Code
        sb.Append('PE');
        sb.Append(#Separator);
    
        //02     Name
        if(mSKS_EFT_VendorPaym.WBeneName != '')
        {
            sb.Append(substr(this.CharacterReplacement(mSKS_EFT_VendorPaym.WBeneName),1,35));
        }
        else
        {
            sb.Append(substr(this.CharacterReplacement(mSKS_EFT_FileDetail.AccountName),1,35));
        }
    
        sb.Append(#LineEnd);
    
        this.fileWrite(sb.ToString());
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N3</Name>
				<Source><![CDATA[
    //Nbr   Description                                         Max     Type    Comment
    //01    Address Information                                 35      AN      Payee Address (Line 1) Domestic and Foreign
    //02    Address Information                                 35      AN      Payee Address (Line 2) Domestic and Foreign
    boolean rec_N3()
    {
        //BP Deviation Documented
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        ;
        mSegmentCount++;
    
        sb.Append('N3');
        sb.Append(#Separator);
    
        //01    Address Information
        sb.Append(substr(this.CharacterReplacement(mSKS_EFT_VendorPaym.WBeneAddr),1,35));
    
        //02    Address Information
        if(mSKS_EFT_VendorPaym.WBeneAddr2 != '')
        {
            sb.Append(#Separator);
            sb.Append(substr(this.CharacterReplacement(mSKS_EFT_VendorPaym.WBeneAddr2),1,35));
        }
    
        sb.Append(#LineEnd);
    
        this.fileWrite(sb.ToString());
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N4</Name>
				<Source><![CDATA[
    //Nbr   Description                                         Max     Type    Comment
    //01    City Address                                        19      AN
    //02    State or Province Code                              2       ID
    //03    Postal Code                                         9       ID
    //04    Country Code                                        3       ID
    //05    Location Qualifier                                  2       ID
    //06    Location Identifier                                 30      AN
    boolean rec_N4()
    {
        //BP Deviation Documented
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        ;
        mSegmentCount++;
    
        sb.Append('N4');
        sb.Append(#Separator);
    
        //01    City Address
        sb.Append(substr(this.CharacterReplacement(mSKS_EFT_VendorPaym.WBeneCity), 1, 19));
        sb.Append(#Separator);
    
        //02    State or Province Code
        sb.Append(substr(this.CharacterReplacement(mSKS_EFT_VendorPaym.WBeneState), 1, 2));
        sb.Append(#Separator);
    
        //03    Postal Code
        sb.Append(substr(this.CharacterReplacement(mSKS_EFT_VendorPaym.WBeneZipPostal),1,9));
        sb.Append(#Separator);
    
        //04    Country Code
        sb.Append(substr(mSKS_EFT_VendorPaym.WBeneCountryRegionId,1,3));
    
        //05    Location Qualifier
        //06    Location Identifier
    
        sb.Append(#LineEnd);
    
        this.fileWrite(sb.ToString());
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_REF0001</Name>
				<Source><![CDATA[
    //Nbr   Description                                         Max     Type    Comment
    //01    Reference No. Qualifier                             3       ID
    //02    Reference Number                                    4       AN
    //03    Description                                         80      AN      invoice description (1st 36 characters)
    boolean rec_REF0001(SKS_EFT_FileDetail invSKS_EFT_FileDetail)
    {
        //BP Deviation Documented
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        str invText, invTextFirst;
        int spaceLoc, stringlen;
        ;
        mSegmentCount++;
    
        sb.Append('REF');
        sb.Append(#Separator);
    
        //01     Reference No. Qualifier
        sb.Append('ZZ');
        sb.Append(#Separator);
    
        //02     Reference Number
        sb.Append('0001');
        sb.Append(#Separator);
    
        invText = this.CharacterReplacement(invSKS_EFT_FileDetail.InvoiceTransactionTxt);
    
        stringlen = strLen(invText);
    
        if (stringlen > 36)
        {
            spaceLoc = strScan(invText, ' ', 37, -37);
            if (spaceLoc > 0)
            {
                invTextFirst = subStr(invText, 1, spaceLoc - 1);
            }
            else
            {
                invTextFirst = '';
            }
            if (spaceLoc != stringlen)
            {
                mInvTextWrap = subStr(invText, spaceLoc + 1, stringlen);
            }
            else
            {
                mInvTextWrap = '';
            }
        }
        else
        {
            invTextFirst = invText;
            mInvTextWrap = '';
        }
    
        //03    Description
        sb.Append(invTextFirst);
    
        sb.Append(#LineEnd);
    
        this.fileWrite(sb.ToString());
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_REF0002</Name>
				<Source><![CDATA[
    //Nbr   Description                                         Max     Type    Comment
    //01    Reference No. Qualifier                             3       ID
    //02    Reference Number                                    4       AN
    //03    Description                                         80      AN      Invoice description (1st 36 characters)
    boolean rec_REF0002(SKS_EFT_FileDetail invSKS_EFT_FileDetail)
    {
        //BP Deviation Documented
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        ;
        mSegmentCount++;
    
        sb.Append('REF');
        sb.Append(#Separator);
    
        //01     Reference No. Qualifier
        sb.Append('ZZ');
        sb.Append(#Separator);
    
        //02     Reference Number
        sb.Append('0002');
        sb.Append(#Separator);
    
        //03    Description
        sb.Append(SKS_PP_StringFormats::strDateMMDDYY(invSKS_EFT_FileDetail.InvoiceDate, DateSeparator::Slash));
    
        sb.Append(#LineEnd);
    
        this.fileWrite(sb.ToString());
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_REF0003</Name>
				<Source><![CDATA[
    //Nbr   Description                                         Max     Type    Comment
    //01    Reference No. Qualifier                             3       ID
    //02    Reference Number                                    4       AN
    //03    Description                                         80      AN      Invoice number
    boolean rec_REF0003(SKS_EFT_FileDetail invSKS_EFT_FileDetail)
    {
        //BP Deviation Documented
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        ;
        mSegmentCount++;
    
        sb.Append('REF');
        sb.Append(#Separator);
    
        //01     Reference No. Qualifier
        sb.Append('ZZ');
        sb.Append(#Separator);
    
        //02     Reference Number
        sb.Append('0003');
        sb.Append(#Separator);
    
        //03    Description
        sb.Append(invSKS_EFT_FileDetail.InvoiceNumber);
    
        sb.Append(#LineEnd);
    
        this.fileWrite(sb.ToString());
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_REF0004</Name>
				<Source><![CDATA[
    //Nbr   Description                                         Max     Type    Comment
    //01    Reference No. Qualifier                             3       ID
    //02    Reference Number                                    4       AN
    //03    Description                                         80      AN      Net payable
    boolean rec_REF0004(SKS_EFT_FileDetail invSKS_EFT_FileDetail)
    {
        //BP Deviation Documented
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        AmountMST amt;
        ;
        mSegmentCount++;
    
        sb.Append('REF');
        sb.Append(#Separator);
    
        //01     Reference No. Qualifier
        sb.Append('ZZ');
        sb.Append(#Separator);
    
        //02     Reference Number
        sb.Append('0004');
        sb.Append(#Separator);
    
        //03    Description
        amt = this.getPositiveAmount(invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur + invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur);
        sb.Append(num2str(this.getPositiveAmount(amt),0,2,0,0));
    
        sb.Append(#LineEnd);
    
        this.fileWrite(sb.ToString());
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_REF0005</Name>
				<Source><![CDATA[
    //Nbr   Description                                         Max     Type    Comment
    //01    Reference No. Qualifier                             3       ID
    //02    Reference Number                                    4       AN
    //03    Description                                         80      AN      Discount
    boolean rec_REF0005(SKS_EFT_FileDetail invSKS_EFT_FileDetail)
    {
        //BP Deviation Documented
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        AmountMST amt;
        ;
        mSegmentCount++;
    
        sb.Append('REF');
        sb.Append(#Separator);
    
        //01     Reference No. Qualifier
        sb.Append('ZZ');
        sb.Append(#Separator);
    
        //02     Reference Number
        sb.Append('0005');
        sb.Append(#Separator);
    
        //03    Description
        amt = this.getPositiveAmount(invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur);
        sb.Append(num2str(this.getPositiveAmount(amt),0,2,0,0));
    
        sb.Append(#LineEnd);
    
        this.fileWrite(sb.ToString());
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_REF0006</Name>
				<Source><![CDATA[
    //Nbr   Description                                         Max     Type    Comment
    //01    Reference No. Qualifier                             3       ID
    //02    Reference Number                                    4       AN
    //03    Description                                         80      AN      Net amount
    boolean rec_REF0006(SKS_EFT_FileDetail invSKS_EFT_FileDetail)
    {
        //BP Deviation Documented
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        AmountMST amt;
        ;
        mSegmentCount++;
    
        sb.Append('REF');
        sb.Append(#Separator);
    
        //01     Reference No. Qualifier
        sb.Append('ZZ');
        sb.Append(#Separator);
    
        //02     Reference Number
        sb.Append('0006');
        sb.Append(#Separator);
    
        //03    Description
        amt = this.getPositiveAmount(invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur);
        sb.Append(num2str(this.getPositiveAmount(amt),0,2,0,0));
    
        sb.Append(#LineEnd);
    
        this.fileWrite(sb.ToString());
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_REF0007</Name>
				<Source><![CDATA[
    //Nbr   Description                                         Max     Type    Comment
    //01    Reference No. Qualifier                             3       ID
    //02    Reference Number                                    4       AN
    //03    Description                                         80      AN      Invoice description - if more than fit in 0001
    boolean rec_REF0007(SKS_EFT_FileDetail invSKS_EFT_FileDetail)
    {
        //BP Deviation Documented
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        ;
        mSegmentCount++;
    
        sb.Append('REF');
        sb.Append(#Separator);
    
        //01     Reference No. Qualifier
        sb.Append('ZZ');
        sb.Append(#Separator);
    
        //02     Reference Number
        sb.Append('0007');
        sb.Append(#Separator);
    
        //03    Description
        sb.Append(mInvTextWrap);
    
        sb.Append(#LineEnd);
    
        this.fileWrite(sb.ToString());
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_REFCK</Name>
				<Source><![CDATA[
    //Nbr   Description                                         Max     Type    Comment
    //01    Reference No. Qualifier                             3       ID
    //02    Reference Number                                    30      AN      Check Number
    //03    Description                                         80      AN      Not Used
    boolean rec_REFCK()
    {
        //BP Deviation Documented
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        ;
        mSegmentCount++;
    
        sb.Append('REF');
        sb.Append(#Separator);
    
        //01     Reference No. Qualifier
        sb.Append('CK');
        sb.Append(#Separator);
    
        //02     Check Number
        sb.Append(this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference));
    
        //03    Description
        sb.Append(#LineEnd);
    
        this.fileWrite(sb.ToString());
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_REFZZ</Name>
				<Source><![CDATA[
    //Nbr   Description                                         Max     Type    Comment
    //01    Reference No. Qualifier                             3       ID
    //02    Reference Number                                    30      AN      Check Printing Codes
    //03    Description                                         80      AN      Not Used
    boolean rec_REFZZ()
    {
        //BP Deviation Documented
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        ;
        mSegmentCount++;
    
        sb.Append('REF');
        sb.Append(#Separator);
    
        //01     Reference No. Qualifier
        sb.Append('ZZ');
        sb.Append(#Separator);
    
        //02     Reference Number
        sb.Append(substr(this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('CheckPintingCodes', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank)),1,16));
        if(mSKS_EFT_FileDetail.PaymSpec == #CheckOvernightPayor)
        {
            sb.Append('D ');
        }
        else if(mSKS_EFT_FileDetail.PaymSpec == #CheckOvernightPayee)
        {
            sb.Append('P ');
        }
        else
        {
            sb.Append('S ');
        }
        sb.Append(substr(this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('CheckPintingCodes', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank)),19,25));
    
        //03    Description
        sb.Append(#LineEnd);
    
        this.fileWrite(sb.ToString());
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_RMR</Name>
				<Source><![CDATA[
    //Nbr   Description                                         Max     Type    Comment
    //01    Reference No. Qualifier                             3       ID
    //02    Reference Number                                    9       AN      Remittance Line Number (6 positions) and Remittance Line Type (3 positions)
    boolean rec_RMR()
    {
        //BP Deviation Documented
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        ;
        mSegmentCount++;
        mRMRCount++;
    
        sb.Append('RMR');
        sb.Append(#Separator);
    
        //01     Reference No. Qualifier
        sb.Append('ZZ');
        sb.Append(#Separator);
    
        //02     Reference Number
        sb.Append(SKS_PP_StringFormats::strFill(6, num2str(mRMRCount,0,0,0,0), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        if(mInvTextWrap == '')
        {
            sb.Append('001');
        }
        else
        {
            sb.Append('002');
        }
    
        sb.Append(#LineEnd);
    
        this.fileWrite(sb.ToString());
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_SE</Name>
				<Source><![CDATA[
    //Nbr   Description                                         Max     Type    Comment
    //1     Number of Included Segments                         10      NO
    //2     Trans. Set Cont. Number                             9       AN
    boolean rec_SE()
    {
        //BP Deviation Documented
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        ;
        mSegmentCount++;
    
        sb.Append('SE');
        sb.Append(#Separator);
    
        //1     Number of Included Segments
        sb.Append(num2str(mSegmentCount,0,0,0,0));
        sb.Append(#Separator);
    
        //2     Trans. Set Cont. Number
        sb.Append(this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference));
        sb.Append(#LineEnd);
    
        this.fileWrite(sb.ToString());
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_ST</Name>
				<Source><![CDATA[
    //Nbr   Description                                         Max     Type    Comment
    //1     Transaction Set ID Code                             3       ID
    //2     Trans. Set Cont. Number                             9       AN
    boolean rec_ST()
    {
        //BP Deviation Documented
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        ;
        mSegmentCount++;
        mTranSetCount++;
    
        sb.Append('ST');
        sb.Append(#Separator);
    
        //1     Transaction Set ID Code
        sb.Append('820');
        sb.Append(#Separator);
    
        //2     Trans. Set Cont. Number
        sb.Append(this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference));
        sb.Append(#LineEnd);
    
        this.fileWrite(sb.ToString());
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_TRN</Name>
				<Source><![CDATA[
    //Nbr   Description                                         Max     Type    Comment
    //01    Trace Type Code                                     2       ID
    //02    Reference Identification                            30      AN      Payment Trace No
    //03    Orig. Co. ID                                        10      AN      Not used
    //04    Reference Number                                    30      AN      Customer-supplied descriptive data to be used by ARP
    boolean rec_TRN()
    {
        //BP Deviation Documented
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        ;
        mSegmentCount++;
    
        sb.Append('TRN');
        sb.Append(#Separator);
    
        //01     Trace Type Code
        sb.Append('1');
        sb.Append(#Separator);
    
        //02     Reference Identification
        sb.Append(this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference));
        sb.Append(#Separator);
    
        //03    Orig. Co. ID
        sb.Append(#Separator);
    
        //04    Reference Number
        sb.Append(substr(this.CharacterReplacement(mSKS_EFT_FileDetail.AccountName),1,10));
    
        sb.Append(#LineEnd);
    
        this.fileWrite(sb.ToString());
    
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>