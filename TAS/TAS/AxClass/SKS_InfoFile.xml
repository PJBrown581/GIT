<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_InfoFile</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_InfoFile
{
    CommaStreamIo io;
    str serialNumber = '';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        SKS_InfoFile csv = new SKS_InfoFile();

        csv.buildCSV();
        csv.sendCSV(args.parmEnum());
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        SKS_PP_Setup setup;
        select firstonly regcustomerid from setup;

        serialNumber = setup.regcustomerid;

        io = CommaStreamIo::constructForWrite();
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildCSV</Name>
				<Source><![CDATA[
    public void buildCSV()
    {
        CompanyInfo companies;

        while select DataArea from companies
        {
            changecompany(companies.DataArea)
            {
                this.createRegistration();
                this.createPositivePay();
                this.createBankRec();
                this.createAReSettlement();
                this.createAPEFT();
                this.createFX();
                this.createDirectDebit();
                this.createMandateAutomation();
                this.createInboundFile();
                this.createPaymentFactoryAutomation();
                this.createInHouseBank();
                this.createCreditCard();
                this.createEPay();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendCSV</Name>
				<Source><![CDATA[
    public void sendCSV(NoYes _clicked)
    {
        str fileDate = date2str(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()),
                            321,
                            DateDay::Digits2,
                            DateSeparator::None,
                            DateMonth::Digits2,
                            DateSeparator::None,
                            DateYear::Digits4,
                            DateFlags::None);

        SKS_PP_Setup setup;
        select firstonly RegAuthorizedUsers from setup;

        str filename = strFmt('%1-%2-%3-%4-%5.csv', xInfo::licenseName(), serialNumber, int2Str(setup.RegAuthorizedUsers), SKS_PP_Sys::getSKSVersion(), fileDate);

        System.IO.Stream stream = io.getStream();
        Stream.position = 0;

        if(_clicked)
        {
            if(Box::yesNo("@SKS:SKGInfoFileProdConfig", DialogButton::No) == DialogButton::Yes)
            {
                System.IO.StreamReader reader = new System.IO.StreamReader(stream);
                str csvContent = reader.ReadToEnd();
                File::SendStringAsFileToUser(csvContent, Filename);
            }
        }
        else
        {
            str subject = strFmt('Info file for: %1 (%2)', xInfo::licenseName(), serialNumber);
            SysMailerMessageBuilder messageBuilder = new SysMailerMessageBuilder();
            messageBuilder.addTo("@SKS:SKGSalesEmail");
            messageBuilder.setSubject(subject);
            messageBuilder.setPriority(System.Net.Mail.MailPriority::Normal);
            messageBuilder.setBody(subject);
            messageBuilder.addAttachment(stream, Filename);

            SysEmailParameters emailParameters = SysEmailParameters::find();

            if((emailParameters.MailerNonInteractive == 'SMTP'
                && emailParameters.SMTPPortNumber != 0
                && emailParameters.SMTPRelayServerName != ''
                && emailParameters.SMTPUsername != '')
            || emailParameters.MailerNonInteractive == 'Exchange')
            {
                try
                {
                    if(emailParameters.MailerNonInteractive == 'SMTP')
                    {
                        messageBuilder.setFrom(emailParameters.SMTPUsername);
                    }
                    else
                    {
                        UserInfo userInfo;
                        select networkAlias from userInfo where userInfo.Id == curUserId();
                        messageBuilder.setFrom(userInfo.networkAlias);
                    }

                    if(SysMailerFactory::sendNonInteractive(messageBuilder.getMessage()))
                    {
                        info("@SKS:SKGDataEmailed");
                    }
                    else
                    {
                        SysMailerFactory::sendInteractive(messageBuilder.getMessage());
                    }
                }
                catch
                {
                    SysMailerFactory::sendInteractive(messageBuilder.getMessage());
                    Box::info("@SKS:SKGUnableToSendEmail");
                }
            }
            else
            {
                SysMailerFactory::sendInteractive(messageBuilder.getMessage());
                Box::info("@SKS:SKGUnableToSendEmail");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRegistration</Name>
				<Source><![CDATA[
    public void createRegistration()
    {
        SKS_PP_Setup setup;
        SKS_EFT_Setup eft_setup;

        select firstonly
              regcustomerid
            , regpp
            , modpospay
            , regbr
            , modbr
            , ModCCReconciliationExtensions
            , RegCCReconciliationExtensions
            , reglb
            , modlockbox
            , regapeft
            , regpaymfactoryautomation
            , modpfa
            , reginhousebank
            , ihb_active
            , regfx
            , regareft
            , regmandateautomation
            , regmcfapdd
            , modmcfapdd
            , eftlicensedformats
            , modcc
            , modepay
            , regbtb
        from setup;

        select firstonly
            modapeft
            , modareft
            , modfx
            , modbtb
        from eft_setup;

        str area = 'REG';

        if(setup.regpp)
        {
            this.writeLine(area, 'PP', setup.modpospay ? 'Active' : '', 0, 0);
        }

        if(setup.regbr)
        {
            this.writeLine(area, 'BR', setup.modbr ? 'Active' : '', 0, 0);
        }

        if(setup.RegCCReconciliationExtensions)
        {
            this.writeLine(area, 'CCR', setup.ModCCReconciliationExtensions ? 'Active' : '', 0, 0);
        }

        if(setup.reglb)
        {
            this.writeLine(area, 'ARES', setup.modlockbox ? 'Active' : '', 0, 0);
        }

        if(setup.regapeft)
        {
            this.writeLine(area, 'APEFT',  eft_setup.modapeft ? 'Active' : '', 0, 0);
        }

        if(setup.regfx)
        {
            this.writeLine(area, 'FX', eft_setup.modfx ? 'Active' : '', 0, 0);
        }

        if(setup.regareft)
        {
            this.writeLine(area, 'AREFT', eft_setup.modareft ? 'Active' : '', 0, 0);
        }
        
        if(setup.RegBTB)
        {
            this.writeLine(area, 'BB', eft_setup.ModBTB ? 'Active' : '', 0, 0);
        }


        if(setup.regmandateautomation)
        {
            SKS_EB_BankTable bank;

            select firstonly RecId from bank where bank.LeverandOrService == NoYes::Yes || bank.BetalingsService == NoYes::Yes;

            this.writeLine(area, 'MA', Bank.RecId ? 'Active' : '', 0, 0);
        }

        if(setup.regmcfapdd)
        {
            this.writeLine(area, 'MCF', setup.modmcfapdd ? 'Active' : '', 0, 0);
        }

        if(setup.regpaymfactoryautomation)
        {
            this.writeLine(area, 'PFA', setup.modpfa ? 'Active' : '', 0, 0);
        }

        if(setup.reginhousebank)
        {
            this.writeLine(area, 'IHB', setup.ihb_active ? 'Active' : '', 0, 0);
        }

        if(setup.modcc)
        {
            this.writeLine(area, 'CCA', 'Active', 0, 0);
        }

        if(setup.modepay)
        {
            this.writeLine(area, 'EPAY', 'Active', 0, 0);
        }

        if(setup.eftlicensedformats)
        {
            this.writeLine(area + '-FL', '', '', setup.eftlicensedformats, 0);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPositivePay</Name>
				<Source><![CDATA[
    public void createPositivePay()
    {
        SKS_PP_FileFormat format;
        SKS_PP_Bank bank;

        while select FormatId from format
            group by format.formatId
            where format.Selected == NoYes::Yes
            outer join count(RecId) from bank where bank.PPFormatId == format.formatid
        {
            this.writeLine('PP', format.formatid, '', 0, bank.recid);
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>createBankRec</Name>
				<Source><![CDATA[
    public void createBankRec()
    {
        SKS_BR_FileFormat format;
        SKS_BR_FileFormatTranMapping tranType;
        SKS_PP_Bank bank;

        while select FormatId, FileType from format
            group by format.formatId, format.FileType
            outer join count(RecId) from tranType where tranType.FormatID == format.formatid
        {
            select firstonly count(RecId) from bank where bank.BRFormatID == format.formatid;

            this.writeLine('BR', format.formatid, enum2Str(format.FileType), tranType.recid, bank.recid);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAReSettlement</Name>
				<Source><![CDATA[
    public void createAReSettlement()
    {
        SKS_LB_FileFormat format;
        SKS_LB_Bank bank;

        while select FormatId, FileType from format
            group by format.formatId, format.FileType
            outer join count(RecId) from bank where bank.LBFormatId == format.formatid
        {
            this.writeLine('ARES', format.formatid, enum2Str(format.FileType), 0, bank.recid);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAPEFT</Name>
				<Source><![CDATA[
    public void createAPEFT()
    {
        SKS_EFT_FileFormat format;
        SKS_EFT_FileFormatPaymSpec spec;
        SKS_EFT_Bank bank;
        VendPaymModeTable payment;

        while select FormatId from format
            where format.Selected == NoYes::Yes
                && format.UseWithVendors == NoYes::Yes
        {
            int counter = 0;
            while select BankAccountId from bank
                group by bank.BankAccountId
                exists join PaymMode from payment
                where payment.SKS_EFT_FormatId == format.FormatId
                && bank.PaymMode == payment.PaymMode
            {
                Counter += 1;
            }

            this.writeLine('APEFT', format.formatid, '', 0, counter);

            while select PaymSpec from spec
                where spec.formatid == format.formatid
                    && spec.Selected == NoYes::Yes
                    && spec.UseWithVendors == NoYes::Yes
            {
                this.writeLine('APEFT', format.formatid, spec.PaymSpec, 0, 0);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFX</Name>
				<Source><![CDATA[
    public void createFX()
    {
        SKS_FXA_CounterPartyTable counterParty;

        select firstonly count(RecId) from counterParty;

        if(counterParty.RecId)
        {
            this.writeLine('FX', 'COUNTERPARTY', '', counterparty.Recid, 0);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDirectDebit</Name>
				<Source><![CDATA[
    public void createDirectDebit()
    {
        SKS_EFT_FileFormat format;
        SKS_EFT_FileFormatPaymSpec spec;
        SKS_EFTAR_Bank bank;
        CustPaymModeTable payment;

        while select FormatId from format
            where format.Selected == NoYes::Yes
                && format.UseWithCustomers == NoYes::Yes
        {
            int counter = 0;
            while select BankAccountId from bank
                group by bank.BankAccountId
                exists join PaymMode from payment
                where payment.SKS_EFT_FormatId == format.FormatId
                && bank.PaymMode == payment.PaymMode
            {
                Counter += 1;
            }

            this.writeLine('DD', format.formatid, '', 0, counter);

            while select PaymSpec from spec
                where spec.formatid == format.formatid
                    && spec.Selected == NoYes::Yes
                    && spec.UseWithCustomers == NoYes::Yes
            {
                this.writeLine('DD', format.formatid, spec.PaymSpec, 0, 0);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createMandateAutomation</Name>
				<Source><![CDATA[
    public void createMandateAutomation()
    {
        SKS_EB_BankTable bank;

        select firstonly RecId from bank where bank.LeverandOrService == NoYes::Yes || bank.BetalingsService == NoYes::Yes;

        if(bank.RecId != 0)
        {
            this.writeLine('MA', 'NOTIFICATION', '', 0, 0);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInboundFile</Name>
				<Source><![CDATA[
    public void createInboundFile()
    {
        SKS_EFT_InboundFileFormat format;

        while select FormatId, SKS_DD_Modules from format where format.Selected == NoYes::Yes
        {
            str spec = '';

            switch (format.SKS_DD_Modules)
            {
                case SKS_DD_Modules::APEFT:
                    spec = 'AP';
                    break;
                case SKS_DD_Modules::Directdebit:
                    spec = 'DD';
                    break;
                case SKS_DD_Modules::APEFT_DDSharedPath:
                    spec = 'BOTH-SHARED';
                    break;
                case SKS_DD_Modules::APEFT_DDSeparatePath:
                    spec = 'BOTH-SAME';
                    break;
            }

            this.writeLine('IBF', format.formatid, spec, 0, 0);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPaymentFactoryAutomation</Name>
				<Source><![CDATA[
    public void createPaymentFactoryAutomation()
    {
        SKS_EFTAP_PaymentCalendar paymCalendar;
        SKS_EFTAP_SwitchboardInHouseBank ihbSwitchboard;
        SKS_EFTAP_SwitchboardExternalBank extSwitchboard;

        
        utcdatetime startDate = DateTimeUtil::parse(int2Str(Year(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()))) + '-01-01T00:00:00');
        
        select firstonly PaymentCompany from paymCalendar
            where paymCalendar.RunDateUTC >= startDate
                && paymCalendar.PaymentCompany == curExt();

        if(paymCalendar.PaymentCompany)
        {
            this.writeLine('PFA', 'CALENDAR', 'YES', 0, 0);
        }

        select firstonly count(RecId) from ihbSwitchboard;

        if(ihbSwitchboard.Recid)
        {
            this.writeLine('PFA', 'SWB-IHB', '', ihbSwitchboard.Recid, 0);
        }

        select firstonly count(RecId) from extSwitchboard;

        if(extSwitchboard.Recid)
        {
            this.writeLine('PFA', 'SWB-EXT', '', extSwitchboard.Recid, 0);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInHouseBank</Name>
				<Source><![CDATA[
    public void createInHouseBank()
    {
        SKS_PP_Bank bank;

        select firstonly count(RecId) from bank where Bank.SKS_IHBInhouseBank == NoYes::Yes;

        if(Bank.RecId)
        {
            this.writeLine('IHB', '', '', 0, bank.recid);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCreditCard</Name>
				<Source><![CDATA[
    public void createCreditCard()
    {
        CreditCardAccountSetup ccAccountSetup;

        select firstonly CONNECTORNAME from ccAccountSetup where ccAccountSetup.ConnectorName == 'SK Global PayFabric Connector';

        if(ccAccountSetup.ConnectorName != '')
        {
            this.writeLine('CCA', '', '', 0, 0);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createEPay</Name>
				<Source><![CDATA[
    public void createEPay()
    {
        SKS_EPY_Setup setup;

        select firstonly Activated from setup;

        if(setup.Activated == SKS_EPY_Activated::Activated)
        {
            this.writeLine('EPAY', '', '', 0, 0);
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>writeLine</Name>
				<Source><![CDATA[
    public void writeLine(str _area, str _format, str _spec, int64 _fmtCount, int64 _bankCount)
    {
        io.writeExp([xInfo::licenseName(), serialNumber, _area, curExt(), _format, _spec, int642Str(_fmtCount), int642Str(_bankCount)]);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>