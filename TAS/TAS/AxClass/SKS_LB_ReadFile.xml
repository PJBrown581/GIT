<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_LB_ReadFile</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///This is copied from SKS_BR_ReadFile.  If you change one of these,
///consider changing the other.
/// </summary>
public class SKS_LB_ReadFile
{
    str FileName;
    SKS_EB_Date FileDate;
    SKS_LB_FormatId FormatId;
    int OmitHeaderRecsNbr;
    int OmitTrailerRecsNbr;
    SKS_LB_CreditPaymentIndicator   NegPaymIndicator;
    SKS_LB_CreditIndicator          invCreditIndicator;
    int ImportCount;
    boolean                         isColombia;
    RefRecId    ExternalJournalARRecord ;

    //LB-specific
    TmpSKS_LB_Importing importing;
    SKS_LB_Importing    dbimporting;
    SKS_PP_Setup setup;
    SKS_LB_FieldType FieldType;
    SKS_LB_FileFormat Fileformat;
    SKS_LB_FileFormatDet FieldFormat;
    SKS_LB_FileFormatDet BankAcctFieldFormat;
    int fieldFormatCount;
    str  batchSequence;
    str  lastIndicator;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>openFile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Open file
    /// </summary>
    void openFile()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>PaymentTypeMOPMatch</Name>
				<Source><![CDATA[
    private CustPaymMode PaymentTypeMOPMatch(str value)
    {
        SKS_LB_MOPImportSetup   MOPImportSetup;
    
        while select MOPImportSetup
        {
            if(strscan(value, MOPImportSetup.SKS_LB_MOPType, 0, strLen(value)) != 0)
            {
                return MOPImportSetup.CustPaymMode;
            }
        }
    
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>readFile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Read file
    /// </summary>
    /// <returns>tmp table </returns>
    TmpSKS_LB_Importing readFile()
    {
        throw error(Error::missingOverload(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>ReadOneField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Read One Field
    /// </summary>
    /// <param name = "value">value</param>
    /// <param name = "field">field</param>
    void ReadOneField(str value, SKS_LB_FieldType field)
    {
        date holdDate;
    
        switch(field)
        {
            case SKS_LB_FieldType::DoNotImport:
                //Speaks for itself
                break;
            case SKS_LB_FieldType::BankAccountNumber:
                //Customers bank account from MICR line of check
                importing.CustBankAccountNum = strRem(value,' ');
                dbimporting.CustBankAccountNum = strRem(value,' ');

                //<ISSUE-19612 remove line break where it can't>
                importing.CustBankAccountNum = strRem(importing.CustBankAccountNum, '\n');
                dbimporting.CustBankAccountNum = strRem(dbimporting.CustBankAccountNum, '\n');
                //</19612>
                break;
            case SKS_LB_FieldType::BankTransit_RoutingNumber:
                //Customers bank Routing Transit Number (RTN) from MICR line of check
                importing.CustBankRegNum =  strRem(value, ' ');
                dbimporting.CustBankRegNum =  strRem(value, ' ');

                //<ISSUE-19612 remove line break where it can't>
                importing.CustBankRegNum = strRem(importing.CustBankRegNum, '\n');
                dbimporting.CustBankRegNum = strRem(dbimporting.CustBankRegNum, '\n');
                //</19612>
                break;
            case SKS_LB_FieldType::CheckAmount:
                if(Fileformat.DecimalSeparator == '')
                {
                    importing.CheckAmount = SKS_PP_StringFormats::CurrStr2CurrNum(this.removeCurrGrpSep(value));
                    dbimporting.CheckAmount = SKS_PP_StringFormats::CurrStr2CurrNum(this.removeCurrGrpSep(value));
                }
                else
                {
                    importing.CheckAmount = SKS_PP_StringFormats::CurrStr2CurrNum(this.removeSeparator(value));
                    dbimporting.CheckAmount = SKS_PP_StringFormats::CurrStr2CurrNum(this.removeSeparator(value));
                }
    
                if (Fileformat.DecPl > 0)
                {
                    importing.CheckAmount = importing.CheckAmount / power(10, Fileformat.DecPl);
                    dbimporting.CheckAmount = dbimporting.CheckAmount / power(10, Fileformat.DecPl);
                }
                break;
            case SKS_LB_FieldType::CheckNumber:
                importing.CheckNumber = global::strLRTrim(value);
                dbimporting.CheckNumber = global::strLRTrim(value);
                break;
            case SKS_LB_FieldType::CustomerId:
                importing.CustAccount = global::strLRTrim(value);
                dbimporting.CustAccount = global::strLRTrim(value);
                break;
            case SKS_LB_FieldType::CustomerName:
                importing.CustName = value;
                dbimporting.CustName = value;
                break;
            case SKS_LB_FieldType::DayDD:
                importing.DateDay = str2int(value);
                dbimporting.DateDay = str2int(value);
                break;
            case SKS_LB_FieldType::DiscAmt:
                if(Fileformat.DecimalSeparator == '')
                {
                    importing.DiscAmount = SKS_PP_StringFormats::CurrStr2CurrNum(this.removeCurrGrpSep(value));
                    dbimporting.DiscAmount = SKS_PP_StringFormats::CurrStr2CurrNum(this.removeCurrGrpSep(value));
                }
                else
                {
                    importing.DiscAmount = SKS_PP_StringFormats::CurrStr2CurrNum(this.removeSeparator(value));
                    dbimporting.DiscAmount = SKS_PP_StringFormats::CurrStr2CurrNum(this.removeSeparator(value));
                }
                if (Fileformat.DecPl > 0)
                {
                    importing.DiscAmount = importing.DiscAmount / power(10, Fileformat.DecPl);
                    dbimporting.DiscAmount = dbimporting.DiscAmount / power(10, Fileformat.DecPl);
                }
                break;
            case SKS_LB_FieldType::DocumentType://invoice credit indicator
                if (value == invCreditIndicator)
                {
                    importing.InvSettleType = SKS_LB_Invoicesettletype::Credit;
                    dbimporting.InvSettleType = SKS_LB_Invoicesettletype::Credit;
                }
                else
                {
                    importing.InvSettleType = SKS_LB_Invoicesettletype::Debit;
                    dbimporting.InvSettleType = SKS_LB_Invoicesettletype::Debit;
                }
                break;
            case SKS_LB_FieldType::NegPaymIndic://negative payment indicator
                if (value == NegPaymIndicator)
                {
                    importing.PaymentType = SKS_LB_PaymentType::CreditMemo;
                    dbimporting.PaymentType = SKS_LB_PaymentType::CreditMemo;
                }
                else
                {
                    importing.PaymentType = SKS_LB_PaymentType::Check;
                    dbimporting.PaymentType = SKS_LB_PaymentType::Check;
                }
                break;
            case SKS_LB_FieldType::InvAmt:
                if(Fileformat.DecimalSeparator == '')
                {
                    importing.InvAmount = SKS_PP_StringFormats::CurrStr2CurrNum(this.removeCurrGrpSep(value));
                    dbimporting.InvAmount = SKS_PP_StringFormats::CurrStr2CurrNum(this.removeCurrGrpSep(value));
                }
                else
                {
                    importing.InvAmount = SKS_PP_StringFormats::CurrStr2CurrNum(this.removeSeparator(value));
                    dbimporting.InvAmount = SKS_PP_StringFormats::CurrStr2CurrNum(this.removeSeparator(value));
                }
                if (Fileformat.DecPl > 0)
                {
                    importing.InvAmount = importing.InvAmount / power(10, Fileformat.DecPl);
                    dbimporting.InvAmount = dbimporting.InvAmount / power(10, Fileformat.DecPl);
                }
                break;
            case SKS_LB_FieldType::MonthMM:
                importing.DateMonth = str2int(value);
                dbimporting.DateMonth = str2int(value);
                break;
            case SKS_LB_FieldType::RecordType:
                break;
            case SKS_LB_FieldType::YearYY:
                importing.DateYear = str2int(value);
                dbimporting.DateYear = str2int(value);
                break;
            case SKS_LB_FieldType::YearYYYY:
                importing.DateYear = str2int(value);
                dbimporting.DateYear = str2int(value);
                break;
            case SKS_LB_FieldType::DateMM_DD_YY,
                  SKS_LB_FieldType::DateMM_DD_YYYY,
                  SKS_LB_FieldType::DateMMDDYY,
                  SKS_LB_FieldType::DateMMDDYYYY:
    
                holdDate = str2date(value, 213);
    
                importing.DateDay = dayOfMth(holdDate);
                importing.DateMonth = mthofyr(holdDate);
                importing.DateYear = year(holdDate);

                dbimporting.DateDay = dayOfMth(holdDate);
                dbimporting.DateMonth = mthofyr(holdDate);
                dbimporting.DateYear = year(holdDate);
                break;
            case SKS_LB_FieldType::DateYY_MM_DD,
                  SKS_LB_FieldType::DateYYMMDD,
                  SKS_LB_FieldType::DateYYYY_MM_DD,
                  SKS_LB_FieldType::DateYYYYMMDD:
    
                holdDate = str2date(value, 321);
    
                importing.DateDay = dayOfMth(holdDate);
                importing.DateMonth = mthofyr(holdDate);
                importing.DateYear = year(holdDate);

                dbimporting.DateDay = dayOfMth(holdDate);
                dbimporting.DateMonth = mthofyr(holdDate);
                dbimporting.DateYear = year(holdDate);
    
                break;
            case SKS_LB_FieldType::DateDD_MM_YY,
                  SKS_LB_FieldType::DateDD_MM_YYYY,
                  SKS_LB_FieldType::DateDDMMYY,
                  SKS_LB_FieldType::DateDDMMYYYY:
    
                holdDate = str2date(value, 123);
    
                importing.DateDay = dayOfMth(holdDate);
                importing.DateMonth = mthofyr(holdDate);
                importing.DateYear = year(holdDate);

                dbimporting.DateDay = dayOfMth(holdDate);
                dbimporting.DateMonth = mthofyr(holdDate);
                dbimporting.DateYear = year(holdDate);
                break;
            case SKS_LB_FieldType::HeadDateYYMMDD,
                 SKS_LB_FieldType::HeadDateYYYYMMDD,
                 SKS_LB_FieldType::HeadDateYY_MM_DD,
                 SKS_LB_FieldType::HeadDateYYYY_MM_DD:
    
                holdDate = str2date(value, 321);
    
                importing.HeadDateDay = dayOfMth(holdDate);
                importing.HeadDateMonth = mthofyr(holdDate);
                importing.HeadDateYear = year(holdDate);

                dbimporting.HeadDateDay = dayOfMth(holdDate);
                dbimporting.HeadDateMonth = mthofyr(holdDate);
                dbimporting.HeadDateYear = year(holdDate);
    
                break;

            case SKS_LB_FieldType::HeadDateMM_DD_YY,
                 SKS_LB_FieldType::HeadDateMM_DD_YYYY,
                 SKS_LB_FieldType::HeadDateMMDDYY,
                 SKS_LB_FieldType::HeadDateMMDDYYYY:
                
                holdDate = str2date(value, 213);
                
                importing.HeadDateDay = dayOfMth(holdDate);
                importing.HeadDateMonth = mthofyr(holdDate);
                importing.HeadDateYear = year(holdDate);

                dbimporting.HeadDateDay = dayOfMth(holdDate);
                dbimporting.HeadDateMonth = mthofyr(holdDate);
                dbimporting.HeadDateYear = year(holdDate);
                
                break;
            case SKS_LB_FieldType::HeadDateDDMMYYYY,
                 SKS_LB_FieldType::HeadDateDD_MM_YY,
                 SKS_LB_FieldType::HeadDateDD_MM_YYYY,
                 SKS_LB_FieldType::HeadDateDDMMYY:
    
                holdDate = str2Date(value, 123);
    
                importing.HeadDateDay = dayOfMth(holdDate);
                importing.HeadDateMonth = mthofyr(holdDate);
                importing.HeadDateYear = year(holdDate);
    
                dbimporting.HeadDateDay = dayOfMth(holdDate);
                dbimporting.HeadDateMonth = mthofyr(holdDate);
                dbimporting.HeadDateYear = year(holdDate);
                break;
            case SKS_LB_FieldType::TxnDescription:
                importing.Description += value;
                dbimporting.Description += value;
                break;
    
            case SKS_LB_FieldType::InvNumber:
                value = global::strLRTrim(value);
                int i = strFind(value, '0', 1, strLen(value));
               
                if(i == 1)
                {
                    str value1 = value;                    
                    str str2 = strRem(value1, '0');

                    if(strLen(str2) == 0)
                    {
                        value = '';
                    }
                }
                importing.InvoiceNumber = strrem(global::strLRTrim(value), '\r\n');
                importing.LBInvoice = global::strLRTrim(value);

                dbimporting.InvoiceNumber = strrem(global::strLRTrim(value), '\r\n');
                dbimporting.LBInvoice = global::strLRTrim(value);
                break;
    
            case SKS_LB_FieldType::BatchNumber:
                importing.BatchNum = value;
                dbimporting.BatchNum = value;
                break;
    
            case SKS_LB_FieldType::BatchSequence:
                batchSequence = value;
                break;
    
            case SKS_LB_FieldType::LastIndicator:
                lastIndicator = value;
                break;
            case SKS_LB_FieldType::ImageIdentifierFront:
                importing.ImageIdentifierFront = Global::strLRTrim(value);
                dbimporting.ImageIdentifierFront = Global::strLRTrim(value);
                break;
            case SKS_LB_FieldType::ImageIdentifierBack:
                importing.ImageIdentifierBack = Global::strLRTrim(value);
                dbimporting.ImageIdentifierBack = Global::strLRTrim(value);
                break;
            case SKS_LB_FieldType::LBBankAccount:
                importing.LBBankAcctNum = global::strLRTrim(value);
                dbimporting.LBBankAcctNum = global::strLRTrim(value);
                break;
    
            case SKS_LB_Fieldtype::FeeAmount:
                if(Fileformat.DecimalSeparator == '')
                {
                    importing.FeeValue = SKS_PP_StringFormats::CurrStr2CurrNum(this.removeCurrGrpSep(value));
                    dbimporting.FeeValue = SKS_PP_StringFormats::CurrStr2CurrNum(this.removeCurrGrpSep(value));
                }
                else
                {
                    importing.FeeValue = SKS_PP_StringFormats::CurrStr2CurrNum(this.removeSeparator(value));
                    dbimporting.FeeValue = SKS_PP_StringFormats::CurrStr2CurrNum(this.removeSeparator(value));
                }
                if (Fileformat.DecPl > 0)
                {
                    importing.FeeValue = importing.FeeValue / power(10, Fileformat.DecPl);
                    dbimporting.FeeValue = dbimporting.FeeValue / power(10, Fileformat.DecPl);
                }
                break;
    
            case SKS_LB_FieldType::BankPmtCnt:
                importing.BankPmtCnt = str2int(value);
                dbimporting.BankPmtCnt = str2int(value);
                break;
    
            case SKS_LB_FieldType::BankPmtTotal:
                if (Fileformat.DecPl > 0)
                {
                    importing.BankPmtTotal = SKS_PP_StringFormats::CurrStr2CurrNum(value) / power(10, Fileformat.DecPl);
                    dbimporting.BankPmtTotal = SKS_PP_StringFormats::CurrStr2CurrNum(value) / power(10, Fileformat.DecPl);
                }
                else if(Fileformat.DecimalSeparator != '')
                {
                    importing.BankPmtTotal = SKS_PP_StringFormats::CurrStr2CurrNum(this.removeSeparator(value));
                    dbimporting.BankPmtTotal = SKS_PP_StringFormats::CurrStr2CurrNum(this.removeSeparator(value));
                }
                break;
    
            //Remittance payment information
            case SKS_LB_FieldType::Note:
                if(importing.PaymNote != '')
                {
                    importing.PaymNote += ' ' + value;
                    dbimporting.PaymNote += ' ' + value;
                }
                else
                {
                    importing.PaymNote += value;
                    dbimporting.PaymNote += value;
                }
                break;
    
            case SKS_LB_FieldType::OffsetDim:
                importing.OffsetDimension = SKS_LB_ImportValidation::ESDimensionValidation(value, FormatID);
                importing.OffsetDimensionReference = value;

                dbimporting.OffsetDimension = SKS_LB_ImportValidation::ESDimensionValidation(value, FormatID);
                dbimporting.OffsetDimensionReference = value;
                break;
    
            case SKS_LB_FieldType::Prepayment:
                if (strLRTrim(value) == strLRTrim(Fileformat.PrepayIndicator))
                {
                    importing.prepayment = NoYes::Yes;
                    dbimporting.prepayment = NoYes::Yes;
                }
                else
                {
                    importing.prepayment = NoYes::No;
                    dbimporting.prepayment = NoYes::No;
                }
                break;
            case SKS_LB_FieldType::PaymentType:
                if(value != '')
                {
                    importing.PaymentMOP = this.PaymentTypeMOPMatch(value);
                    dbimporting.PaymentMOP = this.PaymentTypeMOPMatch(value);
                }
                break;
            case SKS_LB_FieldType::DeductionID:
                importing.TAMDeductionType = SKS_LB_DedTypeMap::find(strLRTrim(value)).TAMDeductionType;
                dbimporting.TAMDeductionType = SKS_LB_DedTypeMap::find(strLRTrim(value)).TAMDeductionType;
                break;
            case SKS_LB_FieldType::TRMDedCat:
                importing.TRMDeductionCategory = global::strLRTrim(value);                 
                dbimporting.TRMDeductionCategory = global::strLRTrim(value);                
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeCurrGrpSep</Name>
				<Source><![CDATA[
    /// <summary>
    /// Remove currency group separator
    /// </summary>
    /// <param name = "AmtAsStr">AmtAsStr</param>
    /// <returns>string</returns>
    str removeCurrGrpSep(str AmtAsStr)
    {
        str remComma;
        ;
    
        remComma = strRem(AmtAsStr, ',');
    
        return strRem(remComma, '.');
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeSeparator</Name>
				<Source><![CDATA[
    /// <summary>
    /// Remove separator
    /// </summary>
    /// <param name = "amountstr">amountstr</param>
    /// <returns>string</returns>
    str removeSeparator(str amountstr)
    {
        str sepRemoved;
        str sepReplaced;
        ;
    
        if(Fileformat.DecimalSeparator == '.')
        {
            sepRemoved = strRem(amountstr, ',');
            return sepRemoved;
        }
        else
        {
            sepRemoved = strRem(amountstr, '.');
            sepReplaced = strReplace(sepRemoved, ',', '.');
            return sepreplaced;
        }
    
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFileDateTime</Name>
				<Source><![CDATA[
    void setFileDateTime(SKS_EB_Date _fileDate)
    {
        ;
        FileDate = _fileDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFileName</Name>
				<Source><![CDATA[
    void setFileName(str _fileName)
    {
        ;
        FileName = _fileName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFormatId</Name>
				<Source><![CDATA[
    void setFormatId(SKS_LB_FormatId _formatId)
    {
        ;
        FormatId = _formatId;
    
        // Read the record from the database and set the other properties
        // Omit headers
        // Omit trailers
    
        select firstonly * from FileFormat where FileFormat.FormatId == _formatId;
        if(Fileformat.FileType == SKS_LB_FileType::Colombia)
        {
            isColombia = true;
        }
        this.setOmitHeaderRecsNbr(FileFormat.OmitHeaderRecs);
        this.setOmitTrailerRecsNbr(FileFormat.OmitTrailerRecs);
        this.setNegPaymIndicator(Fileformat.NegPaymIndic);
        this.setInvCreditIndicator(Fileformat.InvCredIndic);
    
        //Select the number of field formats for this file format
        select count(FieldStart) from FieldFormat
            order by FieldStart asc
            where FieldFormat.FormatId == FileFormat.FormatId;
        fieldFormatCount = FieldFormat.FieldStart;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInvCreditIndicator</Name>
				<Source><![CDATA[
    void setInvCreditIndicator(SKS_LB_CreditIndicator _InvCreditIndicator)
    {
        ;
        InvCreditIndicator = _InvCreditIndicator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setNegPaymIndicator</Name>
				<Source><![CDATA[
    void setNegPaymIndicator(SKS_LB_CreditPaymentIndicator _NegPaymIndicator)
    {
        ;
        NegPaymIndicator = _NegPaymIndicator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setOmitHeaderRecsNbr</Name>
				<Source><![CDATA[
    void setOmitHeaderRecsNbr(int _omitHeaderRecsNbr)
    {
        ;
        OmitHeaderRecsNbr = _omitHeaderRecsNbr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setOmitTrailerRecsNbr</Name>
				<Source><![CDATA[
    void setOmitTrailerRecsNbr(int _omitTrailerRecsNbr)
    {
        ;
        OmitTrailerRecsNbr = _omitTrailerRecsNbr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ValidatePathAcctCombo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate the combination of path and acct
    /// </summary>
    /// <param name = "lbpath">lbpath</param>
    /// <returns>boolean</returns>
    public boolean ValidatePathAcctCombo(SKS_EB_FilePath lbpath)
    {
        SKS_LB_FileFormat   localSKS_LB_FileFormat;
        BankAccountTable    BankAccountTable;
        SKS_LB_Bank         SKS_LB_Bank;
        boolean ret;
    
        //determines whether or not the file specifies to verify the lockbox bank account number with the lockbox file path
        select firstonly verifyacct from localSKS_LB_FileFormat where localSKS_LB_FileFormat.FormatID == FormatID;
    
        if(localSKS_LB_FileFormat.verifyacct == NoYes::Yes)
        {
            SKS_EB_BankIntegOptWithNoLicense bankIntOption = SKS_EB_FileStorage::find().StorageOption_LB;
            SKS_BF_BankIntType SKS_BF_BankIntType = SKS_BF_BankIntType::FileHubLocal;

            if(bankIntOption == SKS_EB_BankIntegOptWithNoLicense::BankFabricEnumValue)
            {
                SKS_BF_BankIntType = SKS_BF_BankIntType::BankFabric;          
            }
          
            //"verify the lockbox account number" is turned on
            //Finds the bank account that uses the lockbox path
            if(SKS_BF_BankIntType == SKS_BF_BankIntType::BankFabric)
            {
                select firstOnly AltLBAcctLookup, BankAccountID from SKS_LB_Bank where SKS_LB_Bank.LBBankFabricLocation == lbpath && SKS_LB_Bank.LBFormatId != '';
            }
            else
            {
                select firstOnly AltLBAcctLookup, BankAccountID from SKS_LB_Bank where SKS_LB_Bank.LBPath == lbpath && SKS_LB_Bank.LBFormatId != '';
            }

            if(SKS_LB_Bank.AltLBAcctLookup != '')
            {
                //if the lockbox bank account uses an alternate bank id then we will attempt to match it to the value in the lockbox bank account
                //mapped field and keep the record if a match is found
                if(SKS_LB_Bank.AltLBAcctLookup == strLRTrim(importing.LBBankAcctNum))
                {
                    ret = true;
                }
                else
                {
                    ret = false;
                }
            }
            
            if (!ret)
            {
                //if no alternate bank id exists for the bank account we will attempt to match the value in the lockbox bank account
                //mapped field to the account number in the bankaccounttable so that we will have the bank account id
                select firstOnly AccountNum from bankaccounttable where BankAccountTable.accountid == SKS_LB_Bank.bankaccountid;
    
                //if the bank account id matches the bank account id that uses the lockbox path then we will keep the record
                if(SKS_PP_StringFormats::strLTrimZeroes(bankaccounttable.AccountNum) == SKS_PP_StringFormats::strLTrimZeroes(Importing.LBBankAcctNum))
                {
                    ret = true;
                }
                else
                {
                    ret = false;
                }
            }
        }
        else
        {
            ret = true;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetSetExternalJournalARRecord</Name>
				<Source><![CDATA[
    RefRecId GetSetExternalJournalARRecord(RefRecId _ExternalJournalARRecord = ExternalJournalARRecord)
    {
        ;
        if (!prmIsDefault(_ExternalJournalARRecord))
        {
            ExternalJournalARRecord = _ExternalJournalARRecord;
        }
        return ExternalJournalARRecord;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>