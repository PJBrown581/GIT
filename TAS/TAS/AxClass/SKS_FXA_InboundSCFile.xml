<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_FXA_InboundSCFile</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_FXA_InboundSCFile extends SKS_EFT_RF_Format
{
    ExchRate gExchageRate; //This is the rate returned from FXAll
    amountCur gBoughtAmt, gSoldAmt;
    SKS_FXA_CounterPartyName gCounterPartyName;  //This is the value reported by FXAll for the Settlement entity.
    SKS_EB_Date gValueDate;//This defaults to the EFT+ effective date, but the inbound trade can change it, and finally so can the Settlement Center
    SKS_FXA_TradeID gSettlementConfID;
    SKS_FXA_AllocationID gCustAllocationID;
    Filename gFileName;
    str gErrorMessage;
    boolean gEndProcessing;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getErrorMessage</Name>
				<Source><![CDATA[
    public str getErrorMessage()
    {
        return gErrorMessage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ImportFile</Name>
				<Source><![CDATA[
    public void ImportFile(SKS_EB_FileHub _SKS_EB_File)
    {
        System.Xml.XmlDocument locXmlDocument;
        System.Xml.XmlNode locXMLNode;
        str locTempTagName;
        locXmlDocument = new System.Xml.XmlDocument();
        _SKS_EB_File.runFileLoad(_SKS_EB_File.fileName());
        locXmlDocument.LoadXML(_SKS_EB_File.fileBody());
        gFileName = _SKS_EB_File.fileName();
    
        gEndProcessing = false;
        if(locXmlDocument.get_HasChildNodes())
        {
            locXMLNode = locXmlDocument.get_FirstChild(); //<?XML ... node.
            locXMLNode = locXMLNode.get_NextSibling();//<Document xmlns...
            locTempTagName = locXMLNode.get_Name();
            this.processNode(locXMLNode);
            //cleanup an pending nodes
            if(mSKS_EFT_RF_Transaction != null)
                mSKS_EFT_RF_SentFile.addTransaction(mSKS_EFT_RF_Transaction);
            if(mSKS_EFT_RF_SentFile != null)
                mSKS_EFT_RF_File.addSentFile(mSKS_EFT_RF_SentFile);
        }
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>processNode</Name>
				<Source><![CDATA[
    private void processNode(System.Xml.XmlNode _XmlNode)
    {
        System.Xml.XmlNode locXMLNode;
        System.Xml.XmlNode locParentXMLNode;
        System.Xml.XmlNodeList locXMLNodeList;
        System.Collections.IEnumerator locXMLNodeListEnum;
    
        str locNodeName;
        str locTempNodeName, locTempParentNodeName;
    
        locParentXMLNode = _XmlNode.get_ParentNode();
        if(locParentXMLNode != null)
        {
            locTempParentNodeName = locParentXMLNode.get_Name();
            locTempParentNodeName = strUpr(locTempParentNodeName);
        }
    
        locTempNodeName = _XmlNode.get_Name();
        switch(strUpr(locTempNodeName))
        {
            case strUpr('ID'):
                gSettlementConfId = strLRTrim(_XmlNode.get_InnerText());
                break;
            case strUpr('partyB'):
                gCounterPartyName = strLRTrim(_XmlNode.get_InnerText());
                break;
            case strUpr('BoughtAmt'):
                    gBoughtAmt = str2num(strLRTrim(_XmlNode.get_InnerText()));
                break;
            case strUpr('SoldAmt'):
                    gSoldAmt = str2num(strLRTrim(_XmlNode.get_InnerText()));
                break;
    
            case strUpr('ValueDate'):
                gValueDate = mkDate(str2int(SKS_PP_StringFormats::strSub(strLRTrim(_XmlNode.get_InnerText()), 7)),
                                    str2int(SKS_PP_StringFormats::strSub(strLRTrim(_XmlNode.get_InnerText()), 5,2)),
                                    str2int(SKS_PP_StringFormats::strSub(strLRTrim(_XmlNode.get_InnerText()), 1,4)));
                break;
            case strUpr('Rate'):
                gExchageRate = str2num(strLRTrim(_XmlNode.get_InnerText()));
                break;
            case strUpr('ref'):
                    gCustAllocationID = strLRTrim(_XmlNode.get_InnerText());
                break;
        }
        if(gExchageRate != 0
            &&  gBoughtAmt != 0
            &&  gSoldAmt != 0
            &&  strLen(gCounterPartyName) > 0
            &&  gValueDate != dateNull()
            &&  strLen(gSettlementConfID) > 0
            &&  strLen(gCustAllocationID) > 0 )
        {
            this.updateSKS_FXA_Det();
            gEndProcessing = true;
            return;
        }
        else if(_XmlNode.get_HasChildNodes())
        {
            //priming read
            locXMLNodeList = _XmlNode.get_ChildNodes();
            locXMLNodeListEnum = locXMLNodeList.GetEnumerator();
            locXMLNodeListEnum.Reset();
            while(locXMLNodeListEnum.MoveNext())
            {
                locXMLNode = locXMLNodeListEnum.get_Current();
                locNodeName = locXMLNode.get_Name();
                if(strUpr(locNodeName) != '#TEXT')
                    this.processNode(locXMLNode);
                if(gEndProcessing)
                    return;
            }
        }
    
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSKS_FXA_Det</Name>
				<Source><![CDATA[
    private void updateSKS_FXA_Det()
    {
        SKS_FXA_Details locSKS_FXA_Details;
    
        select firstonly forupdate crossCompany
            locSKS_FXA_Details
                where locSKS_FXA_Details.SKS_FXA_AllocationID == gCustAllocationID;
    
        if(!locSKS_FXA_Details)
        {
            warning(strFmt("@SKS3701", gCustAllocationID, gFileName));
            gErrorMessage = 'UNMATCHED';
        }
        else if(locSKS_FXA_Details.SettlementConfFileRcvd != dateNull())
        {
            error(strFmt("@SKS3609",gCustAllocationID)) ;
            throw Exception::Error;
        }
        else
        {
            changeCompany(locSKS_FXA_Details.company())
            {
                if(locSKS_FXA_Details.ExchRate != gExchageRate)
                {
                    error(strFmt("@SKS3725",gCustAllocationID, gExchageRate, locSKS_FXA_Details.ExchRate, "@SYS4955")) ;
                    throw Exception::Error;
                }
                if(locSKS_FXA_Details.SKS_FXA_BuySell == SKS_FXA_BuySell::Buy)
                {
                    if(locSKS_FXA_Details.SKS_FXA_ContraAmount != gSoldAmt)
                    {
                        error(strFmt("@SKS3725",gCustAllocationID, gSoldAmt, locSKS_FXA_Details.SKS_FXA_ContraAmount, "@SKS3605")) ;
                        throw Exception::Error;
                    }
                }
                else
                {
                    if(locSKS_FXA_Details.SKS_FXA_ContraAmount != gBoughtAmt)
                    {
                        error(strFmt("@SKS3725",gCustAllocationID, gBoughtAmt, locSKS_FXA_Details.SKS_FXA_ContraAmount, "@SKS3605")) ;
                        throw Exception::Error;
                    }
                }
    
                if(locSKS_FXA_Details.SKS_FXA_CounterPartyName != gCounterPartyName)
                {
                    error(strFmt("@SKS3725",gCustAllocationID, gCounterPartyName, locSKS_FXA_Details.SKS_FXA_CounterPartyName, "@SKS3621")) ;
                    throw Exception::Error;
                }
    
                if(locSKS_FXA_Details.ValueDate != gValueDate)
                {
                    error(strFmt("@SKS3725",gCustAllocationID, gValueDate, locSKS_FXA_Details.ValueDate, "@SKS3112")) ;
                    throw Exception::Error;
                }
    
                locSKS_FXA_Details.SKS_FXA_SettlementId = gSettlementConfID;
                locSKS_FXA_Details.SettlementConfFileRcvd = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());
                ttsBegin;
                locSKS_FXA_Details.update();
                ttsCommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSCFile</Name>
				<Source><![CDATA[
    public static boolean isSCFile(str _filename, boolean _serverPath, SKS_BF_BankIntType _bankIntType = SKS_BF_BankIntType::FileHubLocal)
    {
        boolean rtnval = false;
        //BEGIN VALIDATION VARIABLES
        //BEGIN QUALIFIERS
        boolean locXMlTagFound = false;
        boolean locRefFound = false;
        boolean locIDFound = false;
        boolean locFXAllRefFound = false;
        boolean locscDownloadFound = false;
        //BEGIN DISQUALIFIER VARIABLES
        //none
        //END VALIDATION VARIABLES
        SKS_EB_FileHub locSKS_EB_FileHub = SKS_EB_FileHub::construct(_bankIntType);
        System.String locString;
        System.IO.StreamReader locStreamReader;
    
        //Setup filestream
        locSKS_EB_FileHub.setFileName(_filename);
        locSKS_EB_FileHub.runFileInquire();
        if(!locSKS_EB_FileHub.attrFileExists())
        {
            // The file %1 does not exist.
            error(strfmt("@SYS62207", _filename));
            return false;
        }
        locSKS_EB_FileHub.setFileName(_filename);
        locSKS_EB_FileHub.runFileLoad();
        locSKS_EB_FileHub.StreamInit();
        locStreamReader = new System.IO.StreamReader(locSKS_EB_FileHub.streamGet());
    
        //priming read
        locString = locStreamReader.ReadLine();
        locString = locString.ToUpper();
        while(locString != null)
        {
            locString = locString.Trim();
            locString = locString.ToUpper();
            if(!System.String::IsNullOrWhiteSpace(locString))
            {
                if(!locXMLTagFound)
                {
                    if(locString.StartsWith(strUpr('<?xml')))
                        locXmlTagFound = true;
                    else
                    {
                        //NOT AN XML DOCUMENT
                        break;
                    }
                }
                if(locString.Contains(strUpr('<Ref>')))
                {
                   locRefFound = true;
                }
                if(locString.Contains(strUpr('<ID>')))
                {
                   locIDFound = true;
                }
                if(locString.Contains(strUpr('<FXAllRef>')))
                {
                   locFXAllRefFound = true;
                }
                if(locString.Contains(strUpr('<scDownload>')))
                {
                   locscDownloadFound = true;
                }
            }
            locString = locStreamReader.ReadLine();
            if(!System.String::IsNullOrEmpty(locString))
            {
                locString = locString.ToUpper();
            }
        }
        if(locXMlTagFound &&
            locscDownloadFound &&
            locIDFound &&
            locscDownloadFound&&
            locRefFound)
        {
            rtnval = true;
        }
        locStreamReader.Close();
        return rtnval;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>