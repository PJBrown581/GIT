<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_DE_COMMERZBANK_XML</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_DE_COMMERZBANK_XML extends SKS_EFT_Format_ISO_20022_001001003_FD
/// </summary>
class SKS_EFT_Format_DE_COMMERZBANK_XML extends SKS_EFT_Format_ISO_20022_001001003_FD
{
    #define.FormatVersion('20230117')
    #define.DOM('DOM')
    #define.CB_PMT('CB-PMT')
    #define.SEPA('SEPA')
    #define.INTL('INTL')            //SKS#DevOps:14831
    #define.SEPA_URGP('SEPA-URGP')
    
    str bankCode;
    str bankCodeText;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_CdtrAcct</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_CdtrAcct(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.80: CdtrAcct
        //              Id
        //                  Othr
        //                  Id
        //              Tp/Ptry
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeCdtrAcct;
        XmlElement nodeCdtrAcctId;
        XmlElement nodeCdtrAcctIdOthr;
        XmlElement nodeCdtrAcctTp;
        str iban, acctNum;
        str value;
        boolean printAccTp;
        int     length=34;
    
        iban    =   mSKS_EFT_FileDetail.DepBankIBAN;
        acctNum =   mSKS_EFT_FileDetail.DepBankAcct;

        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'DE-COMMERZBANK-XML':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #SEPA:
                        acctNum = '';
                        break;
                    default:
                        length  =   10;
                        break;
                }
                break;
            case 'DE-COMMERZBANK-XML-JP':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #DOM:
                        iban    =   '';
                        length  =   35;
                        printAccTp = true;
                        break;
                    default:
                        length  =   10;
                        break;
                }
                break;
            case 'DE-COMMERZBANK-XML-SG':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {                   
                    case #DOM:
                        iban    = '';
                        length  =34;
                        break;
                    default:
                        length  =34;
                        break;
                }
                break;
            case 'DE-COMMERZBANK-XML-NL':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {                   
                    case #SEPA_URGP:
                        acctNum = '';                        
                        break;
                }
                break;
        }
        if(iban || acctNum)
        {
            //          2.80: CdtrAcct
            nodeCdtrAcct = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('CdtrAcct'));
    
            //              Id
            nodeCdtrAcctId = nodeCdtrAcct.appendChild(xmlDoc.createElement('Id'));

            if(iban)
            {
                //                  IBAN
                nodeCdtrAcctId = SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdtrAcctId, 'IBAN', iban);
            }
            else if(acctNum)
            {
                //                  Othr
                nodeCdtrAcctIdOthr = nodeCdtrAcctId.appendChild(xmlDoc.createElement('Othr'));
                    
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdtrAcctIdOthr, 'Id', acctNum, length);
            }
            if(printAccTp)
            {
                if(mSKS_EFT_FileDetail.DepBankAcctType == BankAccountType::SavingsAccount)
                {
                    value = 'SVGS';
                }
                else
                {
                    value = 'CACC';
                }
                nodeCdtrAcctTp = nodeCdtrAcct.appendChild(xmlDoc.createElement('Tp'));
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdtrAcctTp, 'Prtry', value);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf()
    {
        //------------------------------------------------------------------------------------------------------
        //      2.27: CdtTrfTxInf
        //          2.28: PmtId
        //          2.42: Amt
        //          2.51: ChrgBr
        //          2.52: ChqInstr
        //          2.77: CdtrAgt
        //          2.79: Cdtr
        //          2.80: CdtrAcct
        //          2.98: RmtInf
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeCdtTrfTxInf;
        
        //      2.27: CdtTrfTxInf
        nodeCdtTrfTxInf = nodePmtInf.appendChild(xmlDoc.createElement('CdtTrfTxInf'));
        
        //          2.28: PmtId
        this.node_CdtTrfTxInf_PmtId(nodeCdtTrfTxInf);
        
        //          2.42: Amt
        this.node_CdtTrfTxInf_Amt(nodeCdtTrfTxInf);

        //          2.51: ChrgBr
        this.node_CdtTrfTxInf_ChrgBr(nodeCdtTrfTxInf);
        
        //          XchgRateInf
        this.node_CdtTrfTxInf_XchgRateInf(nodeCdtTrfTxInf);         //SKS#DevOps:14831
        
        //          2.71: IntrmyAgt1
        this.node_CdtTrfTxInf_IntrmyAgt1(nodeCdtTrfTxInf);
        
        //          2.77: CdtrAgt
        this.node_CdtTrfTxInf_CdtrAgt(nodeCdtTrfTxInf);
        
        //          2.79: Cdtr
        this.node_CdtTrfTxInf_Cdtr(nodeCdtTrfTxInf);
        
        //          2.80: CdtrAcct
        this.node_CdtTrfTxInf_CdtrAcct(nodeCdtTrfTxInf);

        //          2.86: Purp
        this.node_CdtTrfTxInf_Purp(nodeCdtTrfTxInf);
        
        //          2.89: RgltryRptg
        this.node_CdtTrfTxInf_RgltryRptg(nodeCdtTrfTxInf);
        
        //          2.98: RmtInf

        this.node_CdtTrfTxInf_RmtInf(nodeCdtTrfTxInf);

    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_RmtInf</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_RmtInf(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.98: RmtInf
        //------------------------------------------------------------------------------------------------------           
       
        switch(mSKS_EFT_FileDetail.FormatId)
        {
            case 'DE-COMMERZBANK-XML-NL':
                switch(mSKS_EFT_FileDetail.PaymSpec)
                {
                    case #SEPA:
                    case #SEPA_URGP:
                        this.node_CdtTrfTxInf_RmtInf_Strd(_nodeCdtTrfTxInf);
                        break;
                    case #CB_PMT:
                        this.node_CdtTrfTxInf_RmtInf_Ustrd(_nodeCdtTrfTxInf);
                        break;
                }
                break;
            default:
                this.node_CdtTrfTxInf_RmtInf_Ustrd(_nodeCdtTrfTxInf);
                break;
        }        
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_RmtInf_Strd</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_RmtInf_Strd(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.98: RmtInf
        //              2.100: Strd
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeRmtInf,nodeUstrd,nodeCdtrRefInf,nodeTp,nodeCdOrPrtry;
        SKS_EFT_FileDetail invSKS_EFT_FileDetail;
        boolean firstRec = true;
       
        while select invSKS_EFT_FileDetail where invSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId  
            && invSKS_EFT_FileDetail.InvoiceNumber != ''
        {
            if(invSKS_EFT_FileDetail.PaymId)
            {
                if(firstRec)
                {
                    //          2.98: RmtInf
                    nodeRmtInf = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('RmtInf'));
                    firstRec = false;
                }
    
                //               Strd
                nodeUstrd = nodeRmtInf.appendChild(xmlDoc.createElement('Strd'));

                //              CdtrRefInf
                nodeCdtrRefInf=nodeUstrd.appendChild(xmlDoc.createElement('CdtrRefInf'));

                //               Tp
                nodeTp=nodeCdtrRefInf.appendChild(xmlDoc.createElement('Tp'));

                //               CdOrPrtry
                nodeCdOrPrtry=nodeTp.appendChild(xmlDoc.createElement('CdOrPrtry'));

                //               Cd
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdOrPrtry, 'Cd', 'SCOR');
               
                //               Ref
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdtrRefInf, 'Ref', invSKS_EFT_FileDetail.PaymId, 16);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_Purp</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_Purp(XmlElement _nodeCdtTrfTxInf)
    {
        //----------------------------------------------------------------------------------------------------        
        //          2.86: Purp
        //              Cd
        //------------------------------------------------------------------------------------------------------
        XmlElement nodePurp;
            
        switch(mSKS_EFT_FileDetail.FormatId)
        {
            case 'DE-COMMERZBANK-XML-SG':
                switch(mSKS_EFT_FileDetail.PaymSpec)
                {
                    case #DOM:                
                        this.getBankPurposeCode();                
                        break;
                }
                break;        
        }
    
        if(bankCode != '')
        {
            //          2.86: Purp
            nodePurp = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('Purp'));
    
            //              Cd
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePurp, 'Cd', bankCode);
        }        
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankPurposeCode</Name>
				<Source><![CDATA[
    private void getBankPurposeCode()
    {
        msks_EFT_FileDetail_PaymentLine = sks_EFT_FileDetail_PaymentLine::find(mSKS_EFT_FileDetail.RecId);
    
        bankCode     = this.CharacterReplacement(msks_EFT_FileDetail_PaymentLine.BankCentralBankPurposeCode);
        bankCodeText = this.CharacterReplacement(msks_EFT_FileDetail_PaymentLine.BankCentralBankPurposeText);
    
        return;
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_XchgRateInf</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_CdtTrfTxInf_XchgRateInf
    /// </summary>
    /// <param name = "_nodeCdtTrfTxInf">_nodeCdtTrfTxInf</param>
    protected void node_CdtTrfTxInf_XchgRateInf(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.47: XchgRateInf
        //          2.48: XchgRate
        //          2.50: CtrctId
        //------------------------------------------------------------------------------------------------------
        XmlElement  nodeXchgRateInf;
        boolean     printXchgRateInf;
        str         xchgRate,CtrctId;

        xchgRate = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('XchgRate', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank));
        CtrctId = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('CtrctId', mSKS_EFT_FileDetail.RecId));
        
        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'DE-COMMERZBANK-XML-JP':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #INTL:
                        printXchgRateInf = true;
                        break;
                }
                break;
        }
        if(printXchgRateInf &&
           (xchgRate != '' || CtrctId != ''))
        {
            //      2.47 XchgRateInf
            nodeXchgRateInf = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('XchgRateInf'));
    
            //          XchgRate
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeXchgRateInf, 'XchgRate', this.CharacterReplacement(XchgRate), 11,false);
    
            //          2.50: CtrctId
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeXchgRateInf, 'CtrctId', this.CharacterReplacement(CtrctId), 35,false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_RgltryRptg</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_RgltryRptg(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.89: RgltryRptg
        //              Dtls
        //                  Inf
        //------------------------------------------------------------------------------------------------------
    
        XmlElement  nodeRgltryRptg;
        XmlElement  nodeDtls;
        str         value;
        boolean     printRgltryRptg;
    
        value = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('RgltryRptg', mSKS_EFT_FileDetail.RecId));

        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'DE-COMMERZBANK-XML-JP':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #INTL:
                        printRgltryRptg = true;
                        break;
                }
                break;
            case 'DE-COMMERZBANK-XML-SG':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #INTL:
                        printRgltryRptg = true;
                        break;
                }
                break;
        }
        
        if(printRgltryRptg  && value)
        {
            //          RgltryRptg
            nodeRgltryRptg = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('RgltryRptg'));

            //              Dtls
            nodeDtls = nodeRgltryRptg.appendChild(xmlDoc.createElement('Dtls'));
            
            //                  Inf
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeDtls, 'Inf', value);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_IntrmyAgt1</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_IntrmyAgt1(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.71: IntrmyAgt1
        //              FinInstnId
        //                  BIC
        //                  ClrSysMmbId
        //                      MmbId
        //                  Nm
        //                  PstlAdr
        //              BrnchId
        //                  Id
        //------------------------------------------------------------------------------------------------------
    
        XmlElement  nodeIntrmyAgt1;
        XmlElement  nodeFinInstnId;
        boolean     printIntrmyAgt1;
    
        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'DE-COMMERZBANK-XML-JP':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #INTL:
                        printIntrmyAgt1 = true;
                        break;
                }
                break;
        }
        if(printIntrmyAgt1  &&  mSKS_EFT_FileDetail_Intermediary.IntBankSwift != '')
        {
            //          2.71: IntrmyAgt1
            nodeIntrmyAgt1 = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('IntrmyAgt1'));
    
            //              FinInstnId
            nodeFinInstnId = nodeIntrmyAgt1.appendChild(xmlDoc.createElement('FinInstnId'));
    
            //                  BIC
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeFinInstnId, 'BIC', mSKS_EFT_FileDetail_Intermediary.IntBankSwift, 0, false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_CdtrAgt</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_CdtrAgt(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.77: CdtrAgt
        //              FinInstnId
        //                  BIC
        //                  ClrSysMmbId
        //                  Nm
        //                  PstlAdr
        //              BrnchId
        //                  Id
        //------------------------------------------------------------------------------------------------------    
        XmlElement nodeCdtrAgt;
        XmlElement nodeFinInstnId;
        boolean printCdtrAgt = true;
        str     swift, rtg;

        swift   =   mSKS_EFT_FileDetail.DepSwiftNo;
        rtg     =   mSKS_EFT_FileDetail.DepBankTransit;
    
        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'DE-COMMERZBANK-XML':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #SEPA:
                        printCdtrAgt  = false;
                        break;
                    case #CB_PMT:                        
                        if(rtg)
                        {
                            swift = '';
                        }
                        break;
                }
                break;
            case 'DE-COMMERZBANK-XML-JP':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #DOM:
                        swift  = '';
                        break;
                }
                break;
            case 'DE-COMMERZBANK-XML-SG':
                if(strLen(swift) ==8)
                {
                    swift = swift + 'XXX';
                }                
                break;
            case 'DE-COMMERZBANK-XML-NL':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {                   
                    case #CB_PMT:
                        rtg  = '';
                        break;
                    case #SEPA:
                    case #SEPA_URGP:
                        if(rtg)
                        {
                            swift ='';
                        }
                        break;
                }
                break;
        }

        if((swift || rtg) && printCdtrAgt)
        {
            //          2.77: CdtrAgt
            nodeCdtrAgt = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('CdtrAgt'));

            //              FinInstnId
            nodeFinInstnId = nodeCdtrAgt.appendChild(xmlDoc.createElement('FinInstnId'));
    
            if(swift)
            {
                //           BIC
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeFinInstnId, 'BIC', swift, 0, false);
            }
            else if(rtg)
            {
                //       ClrSysMmbId
                this.node_CdtTrfTxInf_CdtrAgt_MmbId(nodeFinInstnId);
            }
        }        
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_CdtrAgt_MmbId</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_CdtTrfTxInf_CdtrAgt_MmbId
    /// </summary>
    /// <param name = "_nodeFinInstnId">_nodeFinInstnId</param>
    protected void node_CdtTrfTxInf_CdtrAgt_MmbId(XmlElement _nodeFinInstnId)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.77: CdtrAgt
        //          MmbId
        //------------------------------------------------------------------------------------------------------
        XmlElement  nodeClrSysMmbId;
        XmlElement  nodeClrSysId;
        int         length;
        str         clrSysId;
        boolean     printPrtry;
        boolean     printCd;


        clrSysId = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('ClrSysId', mSKS_EFT_FileDetail.RecId));

        select firstonly * from msks_EFT_FileDetail_BankAddress where msks_EFT_FileDetail_BankAddress.RefRecId == mSKS_EFT_FileDetail.RecId &&
            msks_EFT_FileDetail_BankAddress.AddressType == SKS_EFT_AddressType::VendBankAddress;

        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'DE-COMMERZBANK-XML':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #DOM:
                        length      = 13;
                        printPrtry  = true;
                        break;
                    case #CB_PMT:                  
                        if(mSKS_EFT_FileDetail_BenBank.BenBankCountryRegionId == 'USA' || msks_EFT_FileDetail_BankAddress.CountryRegionId == 'USA')
                        {
                            clrSysId    =   'USABA';
                        }
                        length      =   14;
                        printCd     =   true;
                        break;
                    default:
                        length = 35;
                        break;
                }
                break;
            case 'DE-COMMERZBANK-XML-JP':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #DOM:
                        length      = 7;
                        printPrtry  = true;
                        break;
                    case #INTL:
                        printCd = true;
                        length = 7;
                        break;
                    default:
                        length = 35;
                        break;
                }
                break;
            case 'DE-COMMERZBANK-XML-SG':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    
                    case #INTL:
                        printCd = true;
                        break;
                    default:
                        length = 35;
                        break;
                }
                break;
            default: 
                length = 35;
                break;
        }
    
        if(mSKS_EFT_FileDetail.DepBankTransit)
        {
            nodeClrSysMmbId = _nodeFinInstnId.appendChild(xmlDoc.createElement('ClrSysMmbId'));

            if(clrSysId )     //SKS#DevOps:14831
            {
                nodeClrSysId = nodeClrSysMmbId.appendChild(xmlDoc.createElement('ClrSysId'));

                if(printCd)
                {
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeClrSysId, 'Cd', clrSysId, 0, false);
                }
                else if(printPrtry)
                {
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeClrSysId, 'Prtry', clrSysId, 0, false);
                }
            }
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeClrSysMmbId, 'MmbId', mSKS_EFT_FileDetail.DepBankTransit, length, false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_BtchBookg</Name>
				<Source><![CDATA[
    protected void node_PmtInf_BtchBookg(XmlElement _BtchBookg)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.3: BtchBookg
        //------------------------------------------------------------------------------------------------------
        str     btchbkg;
        boolean printBatchBooking = true;

        btchbkg = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('Btchbkg', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank));

        switch(mSKS_EFT_FileFormatPaymSpec.FormatID)
        {
            case 'DE-COMMERZBANK-XML-SG':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #INTL:
                        printBatchBooking = false;
                        break;
                }
                break;
        }
        if(printBatchBooking)
        {
            if(strUpr(btchbkg) == 'Y')
            {
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _BtchBookg, 'BtchBookg', 'true');
            }
            else
            {
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _BtchBookg, 'BtchBookg', 'false');
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_PmtTpInf_SvcLvl</Name>
				<Source><![CDATA[
    protected void node_PmtInf_PmtTpInf_SvcLvl(XmlElement _nodePmftTpInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.8: SvcLvl
        //              2.9: Cd
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeSvcLvl;
        str value;
    
        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'DE-COMMERZBANK-XML':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #SEPA:
                        value   = 'SEPA';
                        break;
                }
                break;

            case 'DE-COMMERZBANK-XML-NL':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #SEPA:
                    case #SEPA_URGP:
                        value      = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('SvcLvlCd', mSKS_EFT_FileDetail.RecId));
                        break;
                    case #CB_PMT:
                        value ='URGP';
                        break;                    
                }
                break;
        }
        if(value)
        {
            //          2.8: SvcLvl
            nodeSvcLvl = _nodePmftTpInf.appendChild(xmlDoc.createElement('SvcLvl'));
    
            //              2.9: Cd
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeSvcLvl, 'Cd', value);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_Cdtr_PstlAdr</Name>
				<Source><![CDATA[
    protected void node_PmtInf_Cdtr_PstlAdr(XmlElement _nodeCdtr)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.19: Cdtr
        //          PstlAdr
        //------------------------------------------------------------------------------------------------------

        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'DE-COMMERZBANK-XML':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #SEPA:                        
                        break;
                    case #CB_PMT:
                        this.node_PstlAdr(_nodeCdtr, mRemittanceCountryRegionId, mRemittanceAdrline1, mRemittanceZipCode, mRemittanceCity, 35, mRemittanceAdrLine2, mRemittanceState, true);
                        break;
                    default:
                        this.node_PstlAdr(_nodeCdtr, mRemittanceCountryRegionId, mRemittanceAdrline1, mRemittanceZipCode, mRemittanceCity, 35);
                        break;
                }
                break;
            case 'DE-COMMERZBANK-XML-JP':
                this.node_PstlAdr(_nodeCdtr, mRemittanceCountryRegionId, mRemittanceAdrline1, mRemittanceZipCode, mRemittanceCity, 35, '', '', true);
                break;

            case 'DE-COMMERZBANK-XML-SG':
                this.node_PstlAdr(_nodeCdtr, mRemittanceCountryRegionId, mRemittanceAdrline1, mRemittanceZipCode, mRemittanceCity, 35, '', '', true);
                break;

            case 'DE-COMMERZBANK-XML-NL':       //SKS#DevOps:18065
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #SEPA:
                    case #SEPA_URGP:
                        this.node_PstlAdr(_nodeCdtr, mRemittanceCountryRegionId, mRemittanceAdrline1, mRemittanceZipCode, mRemittanceCity, 35, '', '');
                        break;
                    case #CB_PMT:
                        this.node_PstlAdr(_nodeCdtr, mRemittanceCountryRegionId, mRemittanceAdrline1, mRemittanceZipCode, mRemittanceCity, 35, mRemittanceAdrline2, mRemittanceState, true);
                        break;
                }
                break;
               
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_Dbtr_PstlAdr</Name>
				<Source><![CDATA[
    protected void node_PmtInf_Dbtr_PstlAdr(XmlElement _nodeDbtr)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.19: Dbtr
        //          PstlAdr
        //------------------------------------------------------------------------------------------------------
        str address;

        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'DE-COMMERZBANK-XML':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #SEPA:
                        break;
                    case #CB_PMT:
                        this.node_PstlAdr(_nodeDbtr, mSKS_EFT_FileDetail_BankAccount.WOrdPartyCountryRegionId, mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr, mSKS_EFT_FileDetail_BankAccount.WOrdPartyZipCode, mSKS_EFT_FileDetail_BankAccount.WOrdPartyCity, 35, mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr2, mSKS_EFT_FileDetail_BankAccount.WOrdPartyState, true);
                        break;
                    default:
                        address = mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr;
    
                        if(mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr2)
                        {
                            address += ' ' + mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr2;
                        }
    
                        this.node_PstlAdr(_nodeDbtr, mSKS_EFT_FileDetail_BankAccount.WOrdPartyCountryRegionId, address, mSKS_EFT_FileDetail_BankAccount.WOrdPartyZipCode, mSKS_EFT_FileDetail_BankAccount.WOrdPartyCity, 35);
                        break;
                }
                break;
            case 'DE-COMMERZBANK-XML-JP':
            case 'DE-COMMERZBANK-XML-SG':
            case 'DE-COMMERZBANK-XML-NL':
                this.node_PstlAdr(_nodeDbtr, mSKS_EFT_FileDetail_BankAccount.WOrdPartyCountryRegionId, mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr, mSKS_EFT_FileDetail_BankAccount.WOrdPartyZipCode, mSKS_EFT_FileDetail_BankAccount.WOrdPartyCity, 35, '', '', true);
                break;

           

        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_DbtrAcct</Name>
				<Source><![CDATA[
    protected void node_PmtInf_DbtrAcct(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.20: DbtrAcct
        //          Id
        //              IBAN
        //              Othr
    
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeDbtrAcct;
        XmlElement nodeDbtrAcctId;
        XmlElement nodeOthr;
        str iban, acctNum;

        iban    = mSKS_EFT_FileDetail.BankBankIBAN;
        acctNum = mSKS_EFT_FileDetail.BankBankAcct;

        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'DE-COMMERZBANK-XML-JP':           
                if(acctNum)
                {
                    iban = '';
                }
                else
                {
                    acctNum = '';
                }
                break;
            case 'DE-COMMERZBANK-XML':
                acctNum = '';
                break;
            case 'DE-COMMERZBANK-XML-SG':
                iban = '';
                break;
            case 'DE-COMMERZBANK-XML-NL': 
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {                    
                    case #SEPA_URGP:
                    case #CB_PMT:
                        acctNum = '';
                        break;
                }
                break;
        }

        if(iban || acctNum)
        {
            //      2.20: DbtrAcct
            nodeDbtrAcct = _nodePmtInf.appendChild(xmlDoc.createElement('DbtrAcct'));
    
            //          Id
            nodeDbtrAcctId = nodeDbtrAcct.appendChild(xmlDoc.createElement('Id'));

            if(iban)
            {
                //              IBAN
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeDbtrAcctId, 'IBAN', iban, 0, false);
            }
            else if(acctNum)
            {
                //          Othr
                nodeOthr = nodeDbtrAcctId.appendChild(xmlDoc.createElement('Othr'));

                //              Id
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeOthr, 'Id', acctNum, 35);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_DbtrAgt</Name>
				<Source><![CDATA[
    protected void node_PmtInf_DbtrAgt(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.21: DbtrAgt
        //          FinInstnId
        //              BIC
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeDbtrAgt;
        XmlElement nodeFinInstnId;
        str swift;

        swift = mSKS_EFT_FileDetail.BankBankSwiftNo;

        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'DE-COMMERZBANK-XML-SG':
                if(strLen(swift) == 8)
                {
                    swift = swift + 'XXX';
                }
                break;
        }

        if(swift)             //SKS#DevOps:14831
        {
            //      2.21: DbtrAgt
            nodeDbtrAgt = nodePmtInf.appendChild(xmlDoc.createElement('DbtrAgt'));
    
            //          FinInstnId
            nodeFinInstnId = nodeDbtrAgt.appendChild(xmlDoc.createElement('FinInstnId'));
    
            //              BIC
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeFinInstnId, 'BIC', swift, 0, false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_PmtTpInf</Name>
				<Source><![CDATA[
    protected void node_PmtInf_PmtTpInf(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.6: PmtTpInf
        //          2.7: InstrPrty
        //          2.8: SvcLvl
        //          2.11: LclInstrm
        //          2.14: CtgyPurp
        //------------------------------------------------------------------------------------------------------
        XmlElement  nodePmftTpInf;
        XmlElement  nodeCtgyPurp;
        boolean     printSvcLvl;
        str         value;
    
        value = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('CtgyPurp', mSKS_EFT_FileDetail.RecId));
        
        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'DE-COMMERZBANK-XML':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #SEPA:
                        printSvcLvl = true;
                        break;
                }
                break;

            case 'DE-COMMERZBANK-XML-SG':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #INTL:                        
                        value = '';
                        break;                        
                }
                break;


            case 'DE-COMMERZBANK-XML-NL':                
                printSvcLvl = true;
                
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #SEPA:
                    case #SEPA_URGP:
                        value = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('NLCtgyPurp', mSKS_EFT_FileDetail.RecId));
                        break;
                    case #CB_PMT:
                        value ='INTC';
                        break;                                    
                }                
                break;
        }
       
        if(value || printSvcLvl)       //SKS#DevOps:14827
        {
            //      2.6: PmtTpInf
            nodePmftTpInf = _nodePmtInf.appendChild(xmlDoc.createElement('PmtTpInf'));

            this.node_PmtInf_PmtTpInf_InstrPrty(nodePmftTpInf);

            if(printSvcLvl)
            {
                //          2.8: SvcLvl
                this.node_PmtInf_PmtTpInf_SvcLvl(nodePmftTpInf);        //SKS#DevOps:14827
            }
        
            if(value)                               //SKS#DevOps:14874
            {
                //              2.15: CtgyPurp
                nodeCtgyPurp = nodePmftTpInf.appendChild(xmlDoc.createElement('CtgyPurp'));
                
                //                  2.16: Prtry
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCtgyPurp, 'Cd', value);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_PmtTpInf_InstrPrty</Name>
				<Source><![CDATA[
    protected void node_PmtInf_PmtTpInf_InstrPrty(XmlElement _nodePmftTpInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.7: InstrPrty
        //------------------------------------------------------------------------------------------------------
        str value;
        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            
            
            case 'DE-COMMERZBANK-XML-SG':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #DOM:
                        value = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('InstrPrty', mSKS_EFT_FileDetail.RecId));
                        break;
                }
                break;
        }       

        if(value)
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodePmftTpInf, 'InstrPrty', value);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_ChrgBr</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_ChrgBr(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.51: ChrgBr
        //------------------------------------------------------------------------------------------------------
        str value;

        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'DE-COMMERZBANK-XML':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #SEPA:
                        value = 'SLEV';
                        break;
                    case #CB_PMT:
                    case #DOM:
                        value = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('ChrgBr',mSKS_EFT_FileDetail.RecId));
                        break;
                    default:
                        value = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('ChrgBr',mSKS_EFT_FileDetail.RecId));
                        break;
                }
                break;
            case 'DE-COMMERZBANK-XML-SG':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #DOM:                        
                    case #INTL:
                        value = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('ChrgBr',mSKS_EFT_FileDetail.RecId));
                        break;                           
                }
                break;
            default:
                value = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('ChrgBr',mSKS_EFT_FileDetail.RecId));
                break;
        }
        if(value)
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeCdtTrfTxInf, 'ChrgBr', value, 0, false);             //SKS#DevOps;14831
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_Dbtr</Name>
				<Source><![CDATA[
    protected void node_PmtInf_Dbtr(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.19: Dbtr
        //          Nm
        //          PstlAdr
        //          Id
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeDbtr;
        //      2.19: Dbtr
        nodeDbtr = nodePmtInf.appendChild(xmlDoc.createElement('Dbtr'));
    
        //          Nm
        this.node_PmtInf_Dbtr_Nm(nodeDbtr);

        if(mSKS_EFT_FileDetail_BankAccount.WOrdPartyName || mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr || mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr2 ||
           mSKS_EFT_FileDetail_BankAccount.WOrdPartyCity || mSKS_EFT_FileDetail_BankAccount.WOrdPartyState || mSKS_EFT_FileDetail_BankAccount.WOrdPartyZipCode || mSKS_EFT_FileDetail_BankAccount.WOrdPartyCountryRegionId)
        {
            //          PstlAdr
            this.node_PmtInf_Dbtr_PstlAdr(nodeDbtr);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRemoveBOM</Name>
				<Source><![CDATA[
    protected boolean getRemoveBOM()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_MessageRoot</Name>
				<Source><![CDATA[
    protected void node_MessageRoot()
    {
        nodeRoot = xmlDoc.appendChild(xmlDoc.createElement('Document'));

        SKS_EFT_Format::xmlsetAttributeText(nodeRoot, 'xmlns:schemaLocation', 'urn:iso:std:iso:20022:tech:xsd:pain.001.001.03 pain.001.001.03.xsd');
        SKS_EFT_Format::xmlsetAttributeText(nodeRoot, 'xmlns:xsi', 'http://www.w3.org/2001/XMLSchema-instance');
        SKS_EFT_Format::xmlsetAttributeText(nodeRoot, 'xmlns', 'urn:iso:std:iso:20022:tech:xsd:pain.001.001.03');
        nodeRoot = nodeRoot.appendChild(xmlDoc.createElement('CstmrCdtTrfInitn'));
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectPaymentRecords</Name>
				<Source><![CDATA[
    [SuppressBPWarning('BPErrorSelectUsingFirstOnly', 'The buffer is used in next statement or in a datasource query loop.')]

    protected void selectPaymentRecords()
    {
        //------------------------------------------------------------------------------------------------------
        // Standard payment selction
        // Override if different selection is need for a format
        //------------------------------------------------------------------------------------------------------
    
        //Order by clause must match the clause in the SKS_EFT_Processing.SumByPayment
        select * from mSKS_EFT_FileDetail
            join mSKS_EFT_FileDetail_VendAddress
            join mSKS_EFT_FileDetail_BenBank
          order by mSKS_EFT_FileDetail.RecordSection,
                   mSKS_EFT_FileDetail.PaymMode,
                   mSKS_EFT_FileDetail.BankAccountId,
                   mSKS_EFT_FileDetail.PaymentCurrencyCode,
                   mSKS_EFT_FileDetail.PaymSpec,
                   mSKS_EFT_FileDetail.EffectiveDate,
                   mSKS_EFT_FileDetail.DepCountryRegionId,
                   mSKS_EFT_FileDetail.RecordType,
                   mSKS_EFT_FileDetail.AccountNum,
                   mSKS_EFT_FileDetail.PaymentReference,
                   mSKS_EFT_FileDetail.RecId
          where mSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                mSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                mSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_VendAddress.RefRecId &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_BenBank.RefRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRemittanceAddress</Name>
				<Source><![CDATA[
    void getRemittanceAddress(boolean UseCheckNum)
    {
        mRemittanceName = this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneName);
        mRemittanceAdrLine1 = this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneAddr);
        mRemittanceAdrLine2 = this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneAddr2);
        mRemittanceCity = this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneCity);
        mRemittanceState = this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneState);
        mRemittanceZipCode = this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneZipPostal);
        mRemittanceCountryRegionId = this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_VendAddress.BeneCountryRegionId);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>