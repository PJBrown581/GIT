<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_Table_LedgerJournalTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_Table_LedgerJournalTrans
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>AllowFXAllReject</Name>
				<Source><![CDATA[
    /// <summary>
    /// allox FX ALl reject
    /// </summary>
    /// <param name = "_ledgerJournalTrans">_ledgerJournalTrans</param>
    /// <returns>boolean</returns>
    public static server boolean AllowFXAllReject(LedgerJournalTrans _ledgerJournalTrans)
    {
        SKS_EFT_FilePmtSelection lSKS_EFT_FilePmtSelection;
        SKS_EFTAP_File lSKS_EFTAP_File;
        DialogButton diagBut;

        if(_ledgerJournalTrans.SKS_EFT_APPmtSelectionRecId) // Only check if it has been transferred to EFT+
        {
            select firstonly FileStatus, FXAProcessing, RecId from lSKS_EFTAP_File
              join FileRecId, recid from lSKS_EFT_FilePmtSelection
                 where
                   lSKS_EFTAP_File.RecId == lSKS_EFT_FilePmtSelection.FileRecId &&
                   lSKS_EFT_FilePmtSelection.recid == _ledgerJournalTrans.SKS_EFT_APPmtSelectionRecId;

            if(lSKS_EFTAP_File.FXAProcessing)
            {
                if(lSKS_EFTAP_File.FileStatus == SKS_EFT_FileStatus::Completed ||
                   lSKS_EFTAP_File.FileStatus == SKS_EFT_FileStatus::CompletedNoEmail ||
                   lSKS_EFTAP_File.FileStatus == SKS_EFT_FileStatus::Transmitted)
                {
                    error("@SKS3601");
                    return false;
                }
                else
                {
                    diagBut = Box::yesNo(
                        "@SKS3602",
                        DialogButton::No, // Initial focus is on the No button.
                        "@SKS311");

                    if (diagBut == DialogButton::No)
                    {
                        return false;
                    }
                }
            }
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>CustomerCheck</Name>
				<Source><![CDATA[
    private server static void CustomerCheck(LedgerJournalTrans _ledgerJournalTrans)
    {
        SKS_LB_Depositor sks_lb_Depositor;
        CustTable custTable;
        ;
        if(_ledgerJournalTrans.AccountType == LedgerJournalACType::Cust && _ledgerJournalTrans.LedgerDimension != 0)
        {
            changeCompany(_ledgerJournalTrans.Company)
            {
                custTable = CustTable::findByLedgerDimension(_ledgerJournalTrans.LedgerDimension);
            }

            // See if Vendor exists in EFT+ and if they can change the method of payment/payemnt spec/vendor bank account
            select firstonly PaymCanChange from sks_lb_Depositor where sks_lb_Depositor.CustomerCompany == _ledgerJournalTrans.Company && sks_lb_Depositor.AccountNum == custTable.AccountNum;
            if(sks_lb_Depositor && !sks_lb_Depositor.PaymCanChange)
            {
                // If can't change, detect if values are the vendor defaults
                // If not vendor defaults, change to vendor defaults and display warning
                if(custTable.PaymMode != _ledgerJournalTrans.PaymMode ||
                   custTable.PaymSpec != _ledgerJournalTrans.PaymSpec ||
                   custTable.BankAccount != _ledgerJournalTrans.CustVendBankAccountId)
                {
                    // do not change in case of dd reversal
                    if(LedgerJournalTable::find(_ledgerJournalTrans.JournalNum).JournalName != SKS_EFT_Setup::find().SKS_DD_RevJournalName)
                    {
                        _ledgerJournalTrans.PaymMode = custTable.PaymMode;
                        _ledgerJournalTrans.PaymSpec = custTable.PaymSpec;
                        _ledgerJournalTrans.CustVendBankAccountId = custTable.BankAccount;
                        warning(strFmt("@SKS1869", custTable.AccountNum, _ledgerJournalTrans.PaymMode, _ledgerJournalTrans.PaymSpec, _ledgerJournalTrans.CustVendBankAccountId));
                    }
                }
            }
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>DeleteAPCheck</Name>
				<Source><![CDATA[
    // Purpose: If a journal has already been transferred to EFT+, lines with an EFT+ payment selction recid
    //          cannot be deleted.
    private server static boolean DeleteAPCheck(LedgerJournalTrans _ledgerJournalTrans)
    {
        boolean ret = true;
        ;

        // check if payment selction recid
        if (_ledgerJournalTrans.SKS_EFT_APPmtSelectionRecId != 0)
        {
            //EFT+ information cannot be changed or deleted from a payment journal after the payment journal is in a Transferred state.
            ret = checkfailed("@SKS1208");
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DeleteBTBCheck</Name>
				<Source><![CDATA[
    // Purpose: If a journal has already been transferred to EFT+, lines with an EFT+ payment selction recid
    //          cannot be deleted.
    private server static boolean DeleteBTBCheck(LedgerJournalTrans _ledgerJournalTrans)
    {
        boolean ret = true;
        ;

        // check if payment selction recid
        if (_ledgerJournalTrans.SKS_EFT_BTBPmtSelectionRecId != 0)
        {
            //EFT+ information cannot be changed or deleted from a payment journal after the payment journal is in a Transferred state.
            ret = checkfailed("@SKS1208");
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DeleteCNPCheck</Name>
				<Source><![CDATA[
    private server static boolean DeleteCNPCheck(LedgerJournalTrans _ledgerJournalTrans)
    {
        boolean ret = true;
        ;

        // check if payment selction recid
        if (_ledgerJournalTrans.SKS_EFT_CNPPmtSelectionRecId != 0)
        {
            //EFT+ information cannot be changed or deleted from a payment journal after the payment journal is in a Transferred state.
            ret = checkfailed("@SKS1208");
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DeleteARCheck</Name>
				<Source><![CDATA[
    private server static boolean DeleteARCheck(LedgerJournalTrans _ledgerJournalTrans)
    {
        boolean ret = true;
        ;

        // check if payment selction recid
        if (_ledgerJournalTrans.SKS_EFT_ARPmtSelectionRecId != 0)
        {
            //EFT+ information cannot be changed or deleted from a payment journal after the payment journal is in a Transferred state.
            ret = checkfailed("@SKS1208");
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>EH_delete_post</Name>
				<Source><![CDATA[
    /// <summary>
    /// ledgerJournalTrans event handler post
    /// </summary>
    /// <param name = "_args">_args</param>
    [PostHandlerFor(tableStr(LedgerJournalTrans), tableMethodStr(LedgerJournalTrans, delete))]
    public server static void EH_delete_post(XppPrePostArgs _args)
    {
        LedgerJournalTrans ledgerJournalTrans;
        SKS_EFT_Module      EFTModule;
        ;
        ledgerJournalTrans = _args.getThis();
        EFTModule = SKS_Table_LedgerJournalTable::GetEFTModule(ledgerJournalTrans.JournalNum);
                  
        if(EFTModule == SKS_EFT_Module::BTB)
        {
            SKS_Table_LedgerJournalTrans::SetBTBEFTState(ledgerJournalTrans);
        }
        else if(EFTModule == SKS_EFT_Module::CNP)
        {
            SKS_Table_LedgerJournalTrans::SetCNPEFTState(ledgerJournalTrans);
        }
        else
        {
            if(ledgerJournalTrans.PaymentStatus == CustVendPaymStatus::None || ledgerJournalTrans.PaymentStatus == CustVendPaymStatus::Rejected)
            {
                LedgerJournalTrans  ledgerJournalTransLoc;
                
                select count(RecId)
                    from ledgerJournalTransLoc
                    where ledgerJournalTransLoc.JournalNum == ledgerJournalTrans.JournalNum
                        && (ledgerJournalTransLoc.PaymentStatus == CustVendPaymStatus::None
                        || ledgerJournalTransLoc.PaymentStatus == CustVendPaymStatus::Rejected);
                if(!ledgerJournalTransLoc.RecId)
                {
                    LedgerJournalTable  ledgerJournalTable = LedgerJournalTable::find(ledgerJournalTrans.JournalNum);

                    if(ledgerJournalTable)
                    {
                        // do not change the journal status if there are no other payment lines
                        select count(RecId)
                        from ledgerJournalTransLoc
                        where ledgerJournalTransLoc.JournalNum == ledgerJournalTrans.JournalNum;
                    
                        if(ledgerJournalTable && ledgerJournalTransLoc.RecId && SKS_Table_LedgerJournalTable::EFTMOPExists(ledgerJournalTable))
                        {
                            ttsbegin;
                            ledgerJournalTable.selectForUpdate(true);
                            ledgerJournalTable.SKS_EFT_JournalState = SKS_EFT_JournalState::Transferred;
                            ledgerJournalTable.doUpdate();
                            ttscommit;
                        }
                        else if(!ledgerJournalTransLoc.RecId)
                        {
                            // if there are no lines, change journal status to Not applicable
                            ttsbegin;
                            ledgerJournalTable.selectForUpdate(true);
                            ledgerJournalTable.SKS_EFT_JournalState = SKS_EFT_JournalState::NotApplicable;
                            ledgerJournalTable.doUpdate();
                            ttscommit;
                        }
                    }
                }
            }
            else
            {
                if (EFTModule == SKS_EFT_Module::AP)
                {
                    SKS_Table_LedgerJournalTrans::SetAPEFTState(ledgerJournalTrans);
                }
                else if (EFTModule == SKS_EFT_Module::AR)
                {
                    SKS_Table_LedgerJournalTrans::SetAREFTState(ledgerJournalTrans);
                }
            }
        }

        // clear mandate
        SKS_DD_CustTransMandApplied custMandApplied;        
        CustTable custTable = CustTable::findByLedgerDimension(ledgerJournalTrans.LedgerDimension);
        
        if(custTable)
        {
            delete_from custMandApplied 
                where custMandApplied.PaymentDate == ledgerJournalTrans.TransDate
                    && custMandApplied.CustAccount == custTable.AccountNum;
        }

        //CCA-Begin
        SKS_Table_LedgerJournalTrans::Delete_CC_CustPaymTable(ledgerJournalTrans);
        //CCA-End
    }

]]></Source>
			</Method>
			<Method>
				<Name>EH_insert_post</Name>
				<Source><![CDATA[
    [PostHandlerFor(tableStr(LedgerJournalTrans), tableMethodStr(LedgerJournalTrans, insert))]
    public server static void EH_insert_post(XppPrePostArgs _args)
    {
        LedgerJournalTrans ledgerJournalTrans;
        SKS_EFT_Module      EFTModule;
        ;
        ledgerJournalTrans = _args.getThis();
        EFTModule = SKS_Table_LedgerJournalTable::GetEFTModule(ledgerJournalTrans.JournalNum);

        if(EFTModule == SKS_EFT_Module::AP)
        {
            SKS_Table_LedgerJournalTrans::InsertAPEFTState(ledgerJournalTrans, true);
        }
        else if(EFTModule == SKS_EFT_Module::AR)
        {
            SKS_Table_LedgerJournalTrans::InsertAREFTState(ledgerJournalTrans, true);
        }
        else if(EFTModule == SKS_EFT_Module::BTB)
        {
            SKS_Table_LedgerJournalTrans::InsertBTBEFTState(ledgerJournalTrans, true);
        }
        else if(EFTModule == SKS_EFT_Module::CNP)
        {
            SKS_Table_LedgerJournalTrans::InsertCNPEFTState(ledgerJournalTrans, true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>EH_insert_pre</Name>
				<Source><![CDATA[
    /// <summary>
    /// Ledger journal trans pre insert event handler
    /// </summary>
    /// <param name = "_args">_args</param>
    [PreHandlerFor(tableStr(LedgerJournalTrans), tableMethodStr(LedgerJournalTrans, insert))]
    public server static void EH_insert_pre(XppPrePostArgs _args)
    {
        LedgerJournalTrans ledgerJournalTrans;
        SKS_EFT_Module      EFTModule;
        ;
        ledgerJournalTrans = _args.getThis();
        EFTModule = SKS_Table_LedgerJournalTable::GetEFTModule(ledgerJournalTrans.JournalNum);

        if(EFTModule == SKS_EFT_Module::AP)
        {
            SKS_Table_LedgerJournalTrans::VendorCheck(ledgerJournalTrans);
            SKS_Table_LedgerJournalTrans::SetAPOffsetAccount(ledgerJournalTrans);
        }
        else if(EFTModule == SKS_EFT_Module::AR)
        {
            SKS_Table_LedgerJournalTrans::CustomerCheck(ledgerJournalTrans);
            SKS_Table_LedgerJournalTrans::SetAROffsetAccount(ledgerJournalTrans);

        }
        else if(EFTModule == SKS_EFT_Module::CNP)
        {
            SKS_Table_LedgerJournalTrans::CustomerCheck(ledgerJournalTrans);
            SKS_Table_LedgerJournalTrans::SetCNPOffsetAccount(ledgerJournalTrans);

        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>EH_update_pre</Name>
				<Source><![CDATA[
    /// <summary>
    /// Ledger Journal Trans update pre event handler
    /// </summary>
    /// <param name = "_args">_args</param>
    [PreHandlerFor(tableStr(LedgerJournalTrans), tableMethodStr(LedgerJournalTrans, update))]
    public server static void EH_update_pre(XppPrePostArgs _args)
    {
        
        LedgerJournalTrans ledgerJournalTrans = _args.getThis();
        LedgerJournalTrans locOrigLedgerJournalTrans = ledgerJournalTrans.orig();
        SKS_EFT_Module module = SKS_Table_LedgerJournalTable::GetEFTModule(ledgerJournalTrans.JournalNum);

        if(module == SKS_EFT_Module::AP)
        {
            SKS_Table_LedgerJournalTrans::UpdateAPPre(ledgerJournalTrans);
        }
        else if(module == SKS_EFT_Module::AR)
        {
            SKS_Table_LedgerJournalTrans::UpdateARPre(ledgerJournalTrans);
        }
        else if(module == SKS_EFT_Module::BTB)
        {
            SKS_Table_LedgerJournalTrans::UpdateBTBPre(ledgerJournalTrans);
        }
        else if(module == SKS_EFT_Module::CNP)
        {
            SKS_Table_LedgerJournalTrans::UpdateCNPPre(ledgerJournalTrans);
        }

        if(SKS_PP_Setup::find(false).ModPosPay)
        {
            if (ledgerJournalTrans.BankChequeNum != locOrigLedgerJournalTrans.BankChequeNum
            && locOrigLedgerJournalTrans.BankChequeNum == '')
            {
                LedgerJournalAC locDimensionDynamicAccount =  LedgerDynamicAccountHelper::getAccountNumberFromDynamicAccount(ledgerJournalTrans.OffsetLedgerDimension);
                BankChequeTable locBankChequeTable;
                select firstonly forupdate locBankChequeTable
                where locBankChequeTable.Voucher == ledgerJournalTrans.Voucher
                    && locBankChequeTable.ChequeNum == ledgerJournalTrans.BankChequeNum
                    && locBankChequeTable.AccountID == locDimensionDynamicAccount;
                ttsbegin;
                locBankChequeTable.SKS_PP_PaymMode = ledgerJournalTrans.PaymMode;
                locBankChequeTable.doUpdate();//there no behaviors related to this field changing, so DoUpdate is desired for performance reasons
                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>EH_validateDelete_post</Name>
				<Source><![CDATA[
    /// <summary>
    /// Ledger journal trans delete validation event handler
    /// </summary>
    /// <param name = "_args">_args</param>
    [PostHandlerFor(tableStr(LedgerJournalTrans), tableMethodStr(LedgerJournalTrans, validateDelete))]
    public server static void EH_validateDelete_post(XppPrePostArgs _args)
    {
        LedgerJournalTrans ledgerJournalTrans;
        SKS_EFT_Module      EFTModule;
        boolean ret;
        ;
        ret = _args.getReturnValue();

        if(ret)
        {
            ledgerJournalTrans = _args.getThis();
            EFTModule = SKS_Table_LedgerJournalTable::GetEFTModule(ledgerJournalTrans.JournalNum);

            if(EFTModule == SKS_EFT_Module::AP)
            {
                ret = SKS_Table_LedgerJournalTrans::DeleteAPCheck(ledgerJournalTrans);
            }
            else if(EFTModule == SKS_EFT_Module::AR)
            {
                ret = SKS_Table_LedgerJournalTrans::DeleteARCheck(ledgerJournalTrans);
            }
            else if(EFTModule == SKS_EFT_Module::BTB)
            {
                ret = SKS_Table_LedgerJournalTrans::DeleteBTBCheck(ledgerJournalTrans);
            }
            else if(EFTModule == SKS_EFT_Module::CNP)
            {
                ret = SKS_Table_LedgerJournalTrans::DeleteCNPCheck(ledgerJournalTrans);
            }

            //CCA-Begin
            ret = ret && SKS_Table_LedgerJournalTrans::DeleteCCACheck(ledgerJournalTrans);
            //CCA-End
        }
        _args.setReturnValue(ret);
    }

]]></Source>
			</Method>
			<Method>
				<Name>EH_validateWrite_post</Name>
				<Source><![CDATA[
    /// <summary>
    /// LedgerJournalTrans validate write post event handler
    /// </summary>
    /// <param name = "_args">_args</param>
    [PostHandlerFor(tableStr(LedgerJournalTrans), tableMethodStr(LedgerJournalTrans, validateWrite))]
    public server static void EH_validateWrite_post(XppPrePostArgs _args)
    {
        LedgerJournalTrans ledgerJournalTrans;
        SKS_EFT_Module      EFTModule;
        boolean ret;
        ;
        ret = _args.getReturnValue();
        if(ret)
        {
            ledgerJournalTrans = _args.getThis();
            EFTModule = SKS_Table_LedgerJournalTable::GetEFTModule(ledgerJournalTrans.JournalNum);

            if(EFTModule == SKS_EFT_Module::AP)
            {
                ret = SKS_Table_LedgerJournalTrans::FieldAPModCheck(ledgerJournalTrans);
            }
            else if(EFTModule == SKS_EFT_Module::AR)
            {
                ret = SKS_Table_LedgerJournalTrans::FieldARModCheck(ledgerJournalTrans);
            }
            else if(EFTModule == SKS_EFT_Module::BTB)
            {
                ret = SKS_Table_LedgerJournalTrans::FieldBTBModCheck(ledgerJournalTrans);
            }
            else if(EFTModule == SKS_EFT_Module::CNP)
            {
                ret = SKS_Table_LedgerJournalTrans::FieldCNPModCheck(ledgerJournalTrans);
            }
        }
        _args.setReturnValue(ret);
    }

]]></Source>
			</Method>
			<Method>
				<Name>LedgerJournalTrans_onUpdated</Name>
				<Source><![CDATA[
    /// <summary>
    /// LedgerJournalTrans update event handler
    /// </summary>
    /// <param name="sender">sender</param>
    /// <param name="e">e</param>
    [DataEventHandler(tableStr(LedgerJournalTrans), DataEventType::Updated)]
    public static void LedgerJournalTrans_onUpdated(Common sender, DataEventArgs e)
    {
        LedgerJournalTrans ledgerJournalTrans = sender;
        SKS_EFT_Module module = SKS_Table_LedgerJournalTable::GetEFTModule(ledgerJournalTrans.JournalNum);


        if(module == SKS_EFT_Module::AP)
        {
            SKS_Table_LedgerJournalTrans::InsertAPEFTState(ledgerJournalTrans);
        }
        else if(module == SKS_EFT_Module::AR)
        {
            SKS_Table_LedgerJournalTrans::InsertAREFTState(ledgerJournalTrans);
        }
        else if(module == SKS_EFT_Module::BTB)
        {
            SKS_Table_LedgerJournalTrans::InsertBTBEFTState(ledgerJournalTrans);
        }
        else if(module == SKS_EFT_Module::CNP)
        {
            SKS_Table_LedgerJournalTrans::InsertCNPEFTState(ledgerJournalTrans);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>FieldAPModCheck</Name>
				<Source><![CDATA[
    // Purpose: If a journal has already been transferred to EFT+, make sure that
    //          relevant fields do not change. This only applies to lines with an EFT+ Payment method
    private server static boolean FieldAPModCheck(LedgerJournalTrans _ledgerJournalTrans)
    {
        LedgerJournalTrans thisOrig = _ledgerJournalTrans.orig();
        boolean ret = true;
        ;

        if (_ledgerJournalTrans.SKS_EFT_APPmtSelectionRecId != 0)
        {
            // did relevant fields change.
            if (thisOrig.Company != _ledgerJournalTrans.Company ||
                thisOrig.LedgerDimension != _ledgerJournalTrans.LedgerDimension ||
                thisOrig.CustVendBankAccountId != _ledgerJournalTrans.CustVendBankAccountId ||
                thisOrig.OffsetLedgerDimension != _ledgerJournalTrans.OffsetLedgerDimension ||
                thisOrig.Voucher != _ledgerJournalTrans.Voucher ||
                _ledgerJournalTrans.SKS_EFT_AllowTransDateModifications ? false : thisOrig.TransDate != _ledgerJournalTrans.TransDate ||
                thisOrig.CurrencyCode != _ledgerJournalTrans.CurrencyCode ||
                thisOrig.AmountCurCredit != _ledgerJournalTrans.AmountCurCredit ||
                thisOrig.AmountCurDebit != _ledgerJournalTrans.AmountCurDebit ||
                thisOrig.PaymSpec != _ledgerJournalTrans.PaymSpec ||
                thisOrig.PaymMode != _ledgerJournalTrans.PaymMode)
            {
                //EFT+ information cannot be changed or deleted from a payment journal after the payment journal line has been transferred to EFT+.
                ret = checkfailed("@SKS1208");
            }
            if(ret && _ledgerJournalTrans.SKS_EFT_AllowTransDateModifications)
            {
                //SKS_EFT_AllowTransDateModifications is used only by the CreateSend AP EFT > Select View Payments > View Payment Details form
                //it should never be stored in the YES(allow) state.  It's only use it to bypass the validation when someone modifies the record in this form.
                //IF we passed the checks, then set this back to no so it isn't stored in the wrong state, allowing other forms to change this field when they
                //should not be able to.
                _ledgerJournalTrans.SKS_EFT_AllowTransDateModifications = NoYes::No;

            }
        }
        return ret;

    }

]]></Source>
			</Method>
			<Method>
				<Name>FieldBTBModCheck</Name>
				<Source><![CDATA[
    // Purpose: If a journal has already been transferred to EFT+, make sure that
    //          relevant fields do not change. This only applies to lines with an EFT+ Payment method
    private server static boolean FieldBTBModCheck(LedgerJournalTrans _ledgerJournalTrans)
    {
        LedgerJournalTrans thisOrig = _ledgerJournalTrans.orig();
        boolean ret = true;
        ;

        if (_ledgerJournalTrans.SKS_EFT_BTBPmtSelectionRecId != 0)
        {
            // did relevant fields change.
            if (thisOrig.Company != _ledgerJournalTrans.Company ||
                thisOrig.LedgerDimension != _ledgerJournalTrans.LedgerDimension ||
                thisOrig.CustVendBankAccountId != _ledgerJournalTrans.CustVendBankAccountId ||
                thisOrig.OffsetLedgerDimension != _ledgerJournalTrans.OffsetLedgerDimension ||
                thisOrig.Voucher != _ledgerJournalTrans.Voucher ||
                _ledgerJournalTrans.SKS_EFT_AllowTransDateModifications ? false : thisOrig.TransDate != _ledgerJournalTrans.TransDate ||
                thisOrig.CurrencyCode != _ledgerJournalTrans.CurrencyCode ||
                thisOrig.AmountCurCredit != _ledgerJournalTrans.AmountCurCredit ||
                thisOrig.AmountCurDebit != _ledgerJournalTrans.AmountCurDebit ||
                thisOrig.PaymSpec != _ledgerJournalTrans.PaymSpec ||
                thisOrig.PaymMode != _ledgerJournalTrans.PaymMode)
            {
                //EFT+ information cannot be changed or deleted from a payment journal after the payment journal line has been transferred to EFT+.
                ret = checkfailed("@SKS1208");
            }
            if(ret && _ledgerJournalTrans.SKS_EFT_AllowTransDateModifications)
            {
                //SKS_EFT_AllowTransDateModifications is used only by the CreateSend AP EFT > Select View Payments > View Payment Details form
                //it should never be stored in the YES(allow) state.  It's only use it to bypass the validation when someone modifies the record in this form.
                //IF we passed the checks, then set this back to no so it isn't stored in the wrong state, allowing other forms to change this field when they
                //should not be able to.
                _ledgerJournalTrans.SKS_EFT_AllowTransDateModifications = NoYes::No;

            }
        }
        return ret;

    }

]]></Source>
			</Method>
			<Method>
				<Name>FieldARModCheck</Name>
				<Source><![CDATA[
    // Purpose: If a journal has already been transferred to EFT+, make sure that
    //          relevant fields do not change. This only applies to lines with an EFT+ Payment method
    private server static boolean FieldARModCheck(LedgerJournalTrans _ledgerJournalTrans)
    {
        LedgerJournalTrans thisOrig = _ledgerJournalTrans.orig();
        boolean ret = true;
        ;

        if (_ledgerJournalTrans.SKS_EFT_ARPmtSelectionRecId != 0)
        {
            // did relevant fields change.
            if (thisOrig.Company != _ledgerJournalTrans.Company ||
                thisOrig.LedgerDimension != _ledgerJournalTrans.LedgerDimension ||
                thisOrig.CustVendBankAccountId != _ledgerJournalTrans.CustVendBankAccountId ||
                thisOrig.OffsetLedgerDimension != _ledgerJournalTrans.OffsetLedgerDimension ||
                thisOrig.Voucher != _ledgerJournalTrans.Voucher ||
                thisOrig.TransDate != _ledgerJournalTrans.TransDate ||
                thisOrig.CurrencyCode != _ledgerJournalTrans.CurrencyCode ||
                thisOrig.ExchRate != _ledgerJournalTrans.ExchRate ||
                thisOrig.ExchRateSecond != _ledgerJournalTrans.ExchRateSecond ||
                thisOrig.Triangulation != _ledgerJournalTrans.Triangulation ||
                thisOrig.AmountCurCredit != _ledgerJournalTrans.AmountCurCredit ||
                thisOrig.AmountCurDebit != _ledgerJournalTrans.AmountCurDebit ||
                thisOrig.PaymSpec != _ledgerJournalTrans.PaymSpec ||
                thisOrig.PaymMode != _ledgerJournalTrans.PaymMode)
            {
                //EFT+ information cannot be changed or deleted from a payment journal after the payment journal line has been transferred to EFT+.
                ret = checkfailed("@SKS1208");
            }
        }
        return ret;

    }

]]></Source>
			</Method>
			<Method>
				<Name>FieldCNPModCheck</Name>
				<Source><![CDATA[
    private server static boolean FieldCNPModCheck(LedgerJournalTrans _ledgerJournalTrans)
    {
        LedgerJournalTrans thisOrig = _ledgerJournalTrans.orig();
        boolean ret = true;
        ;

        if (_ledgerJournalTrans.SKS_EFT_CNPPmtSelectionRecId != 0)
        {
            /*
            // did relevant fields change.
            if (thisOrig.Company != _ledgerJournalTrans.Company ||
                thisOrig.LedgerDimension != _ledgerJournalTrans.LedgerDimension ||
                thisOrig.CustVendBankAccountId != _ledgerJournalTrans.CustVendBankAccountId ||
                thisOrig.OffsetLedgerDimension != _ledgerJournalTrans.OffsetLedgerDimension ||
                thisOrig.Voucher != _ledgerJournalTrans.Voucher ||
                thisOrig.TransDate != _ledgerJournalTrans.TransDate ||
                thisOrig.CurrencyCode != _ledgerJournalTrans.CurrencyCode ||
                thisOrig.ExchRate != _ledgerJournalTrans.ExchRate ||
                thisOrig.ExchRateSecond != _ledgerJournalTrans.ExchRateSecond ||
                thisOrig.Triangulation != _ledgerJournalTrans.Triangulation ||
                thisOrig.AmountCurCredit != _ledgerJournalTrans.AmountCurCredit ||
                thisOrig.AmountCurDebit != _ledgerJournalTrans.AmountCurDebit ||
                thisOrig.PaymSpec != _ledgerJournalTrans.PaymSpec ||
                thisOrig.PaymMode != _ledgerJournalTrans.PaymMode)
            {
                //EFT+ information cannot be changed or deleted from a payment journal after the payment journal line has been transferred to EFT+.
                ret = checkfailed("@SKS1208");
            }*/

            // did relevant fields change.
            if (thisOrig.Company != _ledgerJournalTrans.Company ||
                thisOrig.LedgerDimension != _ledgerJournalTrans.LedgerDimension ||
                thisOrig.CustVendBankAccountId != _ledgerJournalTrans.CustVendBankAccountId ||
                thisOrig.OffsetLedgerDimension != _ledgerJournalTrans.OffsetLedgerDimension ||
                thisOrig.Voucher != _ledgerJournalTrans.Voucher ||
                _ledgerJournalTrans.SKS_EFT_AllowTransDateModifications ? false : thisOrig.TransDate != _ledgerJournalTrans.TransDate ||
                thisOrig.CurrencyCode != _ledgerJournalTrans.CurrencyCode ||
                thisOrig.AmountCurCredit != _ledgerJournalTrans.AmountCurCredit ||
                thisOrig.AmountCurDebit != _ledgerJournalTrans.AmountCurDebit ||
                thisOrig.PaymSpec != _ledgerJournalTrans.PaymSpec ||
                thisOrig.PaymMode != _ledgerJournalTrans.PaymMode)
            {
                //EFT+ information cannot be changed or deleted from a payment journal after the payment journal line has been transferred to EFT+.
                ret = checkfailed("@SKS1208");
            }
            if(ret && _ledgerJournalTrans.SKS_EFT_AllowTransDateModifications)
            {
                //SKS_EFT_AllowTransDateModifications is used only by the CreateSend AP EFT > Select View Payments > View Payment Details form
                //it should never be stored in the YES(allow) state.  It's only use it to bypass the validation when someone modifies the record in this form.
                //IF we passed the checks, then set this back to no so it isn't stored in the wrong state, allowing other forms to change this field when they
                //should not be able to.
                _ledgerJournalTrans.SKS_EFT_AllowTransDateModifications = NoYes::No;

            }
        }
        return ret;

    }

]]></Source>
			</Method>
			<Method>
				<Name>InsertAPEFTState</Name>
				<Source><![CDATA[
    private server static void InsertAPEFTState(LedgerJournalTrans _ledgerJournalTrans, boolean _isInsert = false)
    {
        if(VendPaymModeTable::SKS_EFT_PaymModeOn(_ledgerJournalTrans.PaymMode))
        {
            // 21232
            // checks this event is triggered by the process automation of vendor payment proposal
            // if so, skips the update of the EFT journal state. because the EFT journal state will be updated end of the process automation
            // this validation was added to prevent update conflict errors during the process automation.
            // because the automation works as a multi-thread batch and "update conflict" errors cause duplicate lines in the vend payment journal.
            boolean isCalledFromVendProcessAutomation;

            if (Global::isRunningOnBatch())
            {
                CustVendPaymProposalLine proposalLine;

                select firstonly RecId from proposalLine
                where proposalLine.JournalId == _ledgerJournalTrans.JournalNum;

                isCalledFromVendProcessAutomation = proposalLine.RecId != 0;
            }

            if (!isCalledFromVendProcessAutomation)
            {
                if(SKS_Table_LedgerJournalTable::getEFTState(_ledgerJournalTrans.JournalNum) == SKS_EFT_JournalState::NotApplicable)
                {
                    SKS_Table_LedgerJournalTrans::SetEFTJournalState(SKS_EFT_JournalState::Ready, _ledgerJournalTrans);
                }
                else if(SKS_Table_LedgerJournalTable::getEFTState(_ledgerJournalTrans.JournalNum) == SKS_EFT_JournalState::Transferred && _isInsert)
                {
                    SKS_Table_LedgerJournalTrans::SetEFTJournalState(SKS_EFT_JournalState::PartiallyTransferred, _ledgerJournalTrans);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>InsertAREFTState</Name>
				<Source><![CDATA[
    private server static void InsertAREFTState(LedgerJournalTrans _ledgerJournalTrans, boolean _isInsert = false)
    {
        // If journal state is not applicable and adding EFT+, need to set state to Ready
        if(CustPaymModeTable::SKS_EFT_PaymModeOn(_ledgerJournalTrans.PaymMode))
        {
            if(SKS_Table_LedgerJournalTable::getEFTState(_ledgerJournalTrans.JournalNum) == SKS_EFT_JournalState::NotApplicable)
            {
                SKS_Table_LedgerJournalTrans::SetEFTJournalState(SKS_EFT_JournalState::Ready, _ledgerJournalTrans);
            }
            else if(SKS_Table_LedgerJournalTable::getEFTState(_ledgerJournalTrans.JournalNum) == SKS_EFT_JournalState::Transferred && _isInsert)
            {
                SKS_Table_LedgerJournalTrans::SetEFTJournalState(SKS_EFT_JournalState::PartiallyTransferred, _ledgerJournalTrans);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>InsertCNPEFTState</Name>
				<Source><![CDATA[
    private server static void InsertCNPEFTState(LedgerJournalTrans _ledgerJournalTrans, boolean _isInsert = false)
    {
        // If journal state is not applicable and adding EFT+, need to set state to Ready
        if(CustPaymModeTable::SKS_CNP_PaymModeOn(_ledgerJournalTrans.PaymMode))
        {
            if(SKS_Table_LedgerJournalTable::getEFTState(_ledgerJournalTrans.JournalNum) == SKS_EFT_JournalState::NotApplicable)
            {
                SKS_Table_LedgerJournalTrans::SetEFTJournalState(SKS_EFT_JournalState::Ready, _ledgerJournalTrans);
            }
            else if(SKS_Table_LedgerJournalTable::getEFTState(_ledgerJournalTrans.JournalNum) == SKS_EFT_JournalState::Transferred && _isInsert)
            {
                SKS_Table_LedgerJournalTrans::SetEFTJournalState(SKS_EFT_JournalState::PartiallyTransferred, _ledgerJournalTrans);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>InsertBTBEFTState</Name>
				<Source><![CDATA[
    private server static void InsertBTBEFTState(LedgerJournalTrans _ledgerJournalTrans, boolean _isInsert = false)
    {
        if(_ledgerJournalTrans.SKS_BTB_TransferMethod != '' && SKS_Table_LedgerJournalTable::checkBTBTransferJournal(LedgerJournalTable::find(_ledgerJournalTrans.JournalNum)))
        {
            if(SKS_Table_LedgerJournalTable::getEFTState(_ledgerJournalTrans.JournalNum) == SKS_EFT_JournalState::NotApplicable)
            {
                SKS_Table_LedgerJournalTrans::SetEFTJournalState(SKS_EFT_JournalState::Ready, _ledgerJournalTrans);
            }
            else if(SKS_Table_LedgerJournalTable::getEFTState(_ledgerJournalTrans.JournalNum) == SKS_EFT_JournalState::Transferred && _isInsert)
            {
                SKS_Table_LedgerJournalTrans::SetEFTJournalState(SKS_EFT_JournalState::PartiallyTransferred, _ledgerJournalTrans);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>SetAPEFTState</Name>
				<Source><![CDATA[
    private server static void SetAPEFTState(LedgerJournalTrans _ledgerJournalTrans, boolean _rejectedLine = false)
    {
        LedgerJournalTrans ledgerJournalTransCount;
        LedgerJournalTable ledgerJournalTable;
        VendPaymModeTable vendPaymModeTable;
        real eftCount;
        real eftTranferredCount;
        ;

        select firstonly SKS_EFT_JournalState, JournalNum from ledgerJournalTable
            where ledgerJournalTable.JournalNum == _ledgerJournalTrans.JournalNum;

        // If current state is not applicable, don't need to check anything else
        if(((ledgerJournalTable.SKS_EFT_JournalState == SKS_EFT_JournalState::NotApplicable)
            || (ledgerJournalTable.SKS_EFT_JournalState == SKS_EFT_JournalState::Transferred))
            && !_rejectedLine)
        {
            return;
        }

        select count(AmountCurCredit) from ledgerJournalTransCount
            where ledgerJournalTransCount.JournalNum == _ledgerJournalTrans.JournalNum
                  && ledgerJournalTransCount.RecId != _ledgerJournalTrans.RecId
                join SKS_EFT_PaymMode from vendPaymModeTable
                where vendPaymModeTable.PaymMode == ledgerJournalTransCount.PaymMode
                    && vendPaymModeTable.SKS_EFT_PaymMode == NoYes::Yes;

        eftCount = ledgerJournalTransCount.AmountCurCredit;
        if(eftCount)
        {
            // If current status is errors, leave as is
            // User will need to re-validate to remove errors
            if(ledgerJournalTable.SKS_EFT_JournalState == SKS_EFT_JournalState::Errors)
            {
                return;
            }

            // Count number of transferred lines
            select count(AmountCurCredit) from ledgerJournalTransCount
                where ledgerJournalTransCount.JournalNum == _ledgerJournalTrans.JournalNum
                    && ledgerJournalTransCount.SKS_EFT_APPmtSelectionRecId != 0
                    && ledgerJournalTransCount.RecId != _ledgerJournalTrans.RecId
                    join SKS_EFT_PaymMode from vendPaymModeTable
                    where vendPaymModeTable.PaymMode == ledgerJournalTransCount.PaymMode
                        && vendPaymModeTable.SKS_EFT_PaymMode == NoYes::Yes;

            eftTranferredCount = ledgerJournalTransCount.AmountCurCredit;

            // Determine status by comparing EFT lines to EFT transferred lines
            if(eftTranferredCount == 0)
            {
                // ready
                if(ledgerJournalTable.SKS_EFT_JournalState != SKS_EFT_JournalState::Ready)
                {
                    SKS_Table_LedgerJournalTrans::SetEFTJournalState(SKS_EFT_JournalState::Ready, _ledgerJournalTrans);
                }
            }
            else if(eftCount == eftTranferredCount && !_rejectedLine)
            {
                // transferred
                if(ledgerJournalTable.SKS_EFT_JournalState != SKS_EFT_JournalState::Transferred)
                {
                    SKS_Table_LedgerJournalTrans::SetEFTJournalState(SKS_EFT_JournalState::Transferred, _ledgerJournalTrans);
                }
            }
            else
            {
                // partially transferred
                if(ledgerJournalTable.SKS_EFT_JournalState != SKS_EFT_JournalState::PartiallyTransferred)
                {
                    SKS_Table_LedgerJournalTrans::SetEFTJournalState(SKS_EFT_JournalState::PartiallyTransferred, _ledgerJournalTrans);
                }
            }

        }
        else
        {
            // not applicable
            if(ledgerJournalTable.SKS_EFT_JournalState != SKS_EFT_JournalState::NotApplicable)
            {
                SKS_Table_LedgerJournalTrans::SetEFTJournalState(SKS_EFT_JournalState::NotApplicable, _ledgerJournalTrans);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>SetBTBEFTState</Name>
				<Source><![CDATA[
    private server static void SetBTBEFTState(LedgerJournalTrans _ledgerJournalTrans, boolean _rejectedLine = false)
    {
        LedgerJournalTrans ledgerJournalTransCount;
        LedgerJournalTable ledgerJournalTable;
        //VendPaymModeTable vendPaymModeTable;
        SKS_BTB_PaymModeTable lSKS_BTB_PaymModeTable;
        real eftCount;
        real eftTranferredCount;
        ;

        select firstonly SKS_EFT_JournalState, JournalNum from ledgerJournalTable
            where ledgerJournalTable.JournalNum == _ledgerJournalTrans.JournalNum;

        // If current state is not applicable, don't need to check anything else
        if(((ledgerJournalTable.SKS_EFT_JournalState == SKS_EFT_JournalState::NotApplicable)
            || (ledgerJournalTable.SKS_EFT_JournalState == SKS_EFT_JournalState::Transferred))
            && !_rejectedLine)
        {
            return;
        }

        select count(AmountCurCredit) from ledgerJournalTransCount
            where ledgerJournalTransCount.JournalNum == _ledgerJournalTrans.JournalNum
                  && ledgerJournalTransCount.RecId != _ledgerJournalTrans.RecId
                join lSKS_BTB_PaymModeTable
                where lSKS_BTB_PaymModeTable.PaymMode == ledgerJournalTransCount.PaymMode;

        eftCount = ledgerJournalTransCount.AmountCurCredit;
        if(eftCount)
        {
            // If current status is errors, leave as is
            // User will need to re-validate to remove errors
            if(ledgerJournalTable.SKS_EFT_JournalState == SKS_EFT_JournalState::Errors)
            {
                return;
            }

            // Count number of transferred lines
            select count(AmountCurCredit) from ledgerJournalTransCount
                where ledgerJournalTransCount.JournalNum == _ledgerJournalTrans.JournalNum
                    && ledgerJournalTransCount.SKS_EFT_BTBPmtSelectionRecId != 0
                    && ledgerJournalTransCount.RecId != _ledgerJournalTrans.RecId
                    join lSKS_BTB_PaymModeTable
                    where lSKS_BTB_PaymModeTable.PaymMode == ledgerJournalTransCount.PaymMode;

            eftTranferredCount = ledgerJournalTransCount.AmountCurCredit;

            // Determine status by comparing EFT lines to EFT transferred lines
            if(eftTranferredCount == 0)
            {
                // ready
                if(ledgerJournalTable.SKS_EFT_JournalState != SKS_EFT_JournalState::Ready)
                {
                    SKS_Table_LedgerJournalTrans::SetEFTJournalState(SKS_EFT_JournalState::Ready, _ledgerJournalTrans);
                }
            }
            else if(eftCount == eftTranferredCount && !_rejectedLine)
            {
                // transferred
                if(ledgerJournalTable.SKS_EFT_JournalState != SKS_EFT_JournalState::Transferred)
                {
                    SKS_Table_LedgerJournalTrans::SetEFTJournalState(SKS_EFT_JournalState::Transferred, _ledgerJournalTrans);
                }
            }
            else
            {
                // partially transferred
                if(ledgerJournalTable.SKS_EFT_JournalState != SKS_EFT_JournalState::PartiallyTransferred)
                {
                    SKS_Table_LedgerJournalTrans::SetEFTJournalState(SKS_EFT_JournalState::PartiallyTransferred, _ledgerJournalTrans);
                }
            }

        }
        else
        {
            // not applicable
            if(ledgerJournalTable.SKS_EFT_JournalState != SKS_EFT_JournalState::NotApplicable)
            {
                SKS_Table_LedgerJournalTrans::SetEFTJournalState(SKS_EFT_JournalState::NotApplicable, _ledgerJournalTrans);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>SetAPOffsetAccount</Name>
				<Source><![CDATA[
    private server static void SetAPOffsetAccount(LedgerJournalTrans _ledgerJournalTrans)
    {
        companyBankAccountId offsetAccount;
        VendTable vendTable;
        DimensionDynamicAccount dimensionDynamicAccount;
        ;
        if(_ledgerJournalTrans.OffsetLedgerDimension == 0
            && _ledgerJournalTrans.AccountType == LedgerJournalACType::Vend
            && _ledgerJournalTrans.ledgerJournalTable().JournalType == LedgerJournalType::Payment)
        {
            changeCompany(_ledgerJournalTrans.Company)
            {
                vendTable = VendTable::findByLedgerDimension(_ledgerJournalTrans.LedgerDimension);
            }
            offsetAccount = SKS_EFT_VendorPaym::getBankAccountId
                                (_ledgerJournalTrans.Company,
                                vendTable.AccountNum,
                                _ledgerJournalTrans.PaymMode,
                                _ledgerJournalTrans.PaymSpec,
                                _ledgerJournalTrans.CustVendBankAccountId);

            if (offsetAccount)
            {
                dimensionDynamicAccount = LedgerDynamicAccountHelper::getDynamicAccountFromAccountNumber(offsetAccount, LedgerJournalACType::Bank);
                _ledgerJournalTrans.OffsetLedgerDimension = dimensionDynamicAccount;
                _ledgerJournalTrans.OffsetDefaultDimension = SKS_EB_LedgerJournalEngine::initOffsetDefaultDimensionServer(_ledgerJournalTrans);
                _ledgerJournalTrans.OffsetAccountType = LedgerJournalACType::Bank;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>SetAREFTState</Name>
				<Source><![CDATA[
    private server static void SetAREFTState(LedgerJournalTrans _ledgerJournalTrans, boolean _rejectedLine = false)
    {
        LedgerJournalTrans ledgerJournalTransCount;
        LedgerJournalTable ledgerJournalTable;
        CustPaymModeTable custPaymModeTable;
        real eftCount;
        real eftTranferredCount;
        ;

        select firstonly SKS_EFT_JournalState, JournalNum from ledgerJournalTable
            where ledgerJournalTable.JournalNum == _ledgerJournalTrans.JournalNum;

        // If current state is not applicable, don't need to check anything else
        if(((ledgerJournalTable.SKS_EFT_JournalState == SKS_EFT_JournalState::NotApplicable)
            || (ledgerJournalTable.SKS_EFT_JournalState == SKS_EFT_JournalState::Transferred))
            && !_rejectedLine)
        {
            return;
        }

        select count(AmountCurCredit) from ledgerJournalTransCount
            where ledgerJournalTransCount.JournalNum == _ledgerJournalTrans.JournalNum
                  && ledgerJournalTransCount.RecId != _ledgerJournalTrans.RecId
                join SKS_EFT_PaymMode from custPaymModeTable
                where custPaymModeTable.PaymMode == ledgerJournalTransCount.PaymMode
                    && custPaymModeTable.SKS_EFT_PaymMode == NoYes::Yes;

        eftCount = ledgerJournalTransCount.AmountCurCredit;
        if(eftCount)
        {
            // If current status is errors, leave as is
            // User will need to re-validate to remove errors
            if(ledgerJournalTable.SKS_EFT_JournalState == SKS_EFT_JournalState::Errors)
            {
                return;
            }

            // Count number of transferred lines
            select count(AmountCurCredit) from ledgerJournalTransCount
                where ledgerJournalTransCount.JournalNum == _ledgerJournalTrans.JournalNum
                    && ledgerJournalTransCount.SKS_EFT_ARPmtSelectionRecId != 0
                    && ledgerJournalTransCount.RecId != _ledgerJournalTrans.RecId
                    join SKS_EFT_PaymMode from custPaymModeTable
                    where custPaymModeTable.PaymMode == ledgerJournalTransCount.PaymMode
                        && custPaymModeTable.SKS_EFT_PaymMode == NoYes::Yes;

            eftTranferredCount = ledgerJournalTransCount.AmountCurCredit;

            // Determine status by comparing EFT lines to EFT transferred lines
            if(eftTranferredCount == 0)
            {
                // ready
                if(ledgerJournalTable.SKS_EFT_JournalState != SKS_EFT_JournalState::Ready)
                {
                    SKS_Table_LedgerJournalTrans::SetEFTJournalState(SKS_EFT_JournalState::Ready, _ledgerJournalTrans);
                }
            }
            else if(eftCount == eftTranferredCount && !_rejectedLine)
            {
                // transferred
                if(ledgerJournalTable.SKS_EFT_JournalState != SKS_EFT_JournalState::Transferred)
                {
                    SKS_Table_LedgerJournalTrans::SetEFTJournalState(SKS_EFT_JournalState::Transferred, _ledgerJournalTrans);
                }
            }
            else
            {
                // partially transferred
                if(ledgerJournalTable.SKS_EFT_JournalState != SKS_EFT_JournalState::PartiallyTransferred)
                {
                    SKS_Table_LedgerJournalTrans::SetEFTJournalState(SKS_EFT_JournalState::PartiallyTransferred, _ledgerJournalTrans);
                }
            }

        }
        else
        {
            // not applicable
            if(ledgerJournalTable.SKS_EFT_JournalState != SKS_EFT_JournalState::NotApplicable)
            {
                SKS_Table_LedgerJournalTrans::SetEFTJournalState(SKS_EFT_JournalState::NotApplicable, _ledgerJournalTrans);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>SetCNPEFTState</Name>
				<Source><![CDATA[
    private server static void SetCNPEFTState(LedgerJournalTrans _ledgerJournalTrans, boolean _rejectedLine = false)
    {
        LedgerJournalTrans ledgerJournalTransCount;
        LedgerJournalTable ledgerJournalTable;
        CustPaymModeTable custPaymModeTable;
        real eftCount;
        real eftTranferredCount;
        ;

        select firstonly SKS_EFT_JournalState, JournalNum from ledgerJournalTable
            where ledgerJournalTable.JournalNum == _ledgerJournalTrans.JournalNum;

        // If current state is not applicable, don't need to check anything else
        if(((ledgerJournalTable.SKS_EFT_JournalState == SKS_EFT_JournalState::NotApplicable)
            || (ledgerJournalTable.SKS_EFT_JournalState == SKS_EFT_JournalState::Transferred))
            && !_rejectedLine)
        {
            return;
        }

        select count(AmountCurCredit) from ledgerJournalTransCount
            where ledgerJournalTransCount.JournalNum == _ledgerJournalTrans.JournalNum
                  && ledgerJournalTransCount.RecId != _ledgerJournalTrans.RecId
                join SKS_CNP_PaymMode from custPaymModeTable
                where custPaymModeTable.PaymMode == ledgerJournalTransCount.PaymMode
                    && custPaymModeTable.SKS_CNP_PaymMode == NoYes::Yes;

        eftCount = ledgerJournalTransCount.AmountCurCredit;
        if(eftCount)
        {
            // If current status is errors, leave as is
            // User will need to re-validate to remove errors
            if(ledgerJournalTable.SKS_EFT_JournalState == SKS_EFT_JournalState::Errors)
            {
                return;
            }

            // Count number of transferred lines
            select count(AmountCurCredit) from ledgerJournalTransCount
                where ledgerJournalTransCount.JournalNum == _ledgerJournalTrans.JournalNum
                    && ledgerJournalTransCount.SKS_EFT_CNPPmtSelectionRecId != 0
                    && ledgerJournalTransCount.RecId != _ledgerJournalTrans.RecId
                    join SKS_CNP_PaymMode from custPaymModeTable
                    where custPaymModeTable.PaymMode == ledgerJournalTransCount.PaymMode
                        && custPaymModeTable.SKS_EFT_PaymMode == NoYes::Yes;

            eftTranferredCount = ledgerJournalTransCount.AmountCurCredit;

            // Determine status by comparing EFT lines to EFT transferred lines
            if(eftTranferredCount == 0)
            {
                // ready
                if(ledgerJournalTable.SKS_EFT_JournalState != SKS_EFT_JournalState::Ready)
                {
                    SKS_Table_LedgerJournalTrans::SetEFTJournalState(SKS_EFT_JournalState::Ready, _ledgerJournalTrans);
                }
            }
            else if(eftCount == eftTranferredCount && !_rejectedLine)
            {
                // transferred
                if(ledgerJournalTable.SKS_EFT_JournalState != SKS_EFT_JournalState::Transferred)
                {
                    SKS_Table_LedgerJournalTrans::SetEFTJournalState(SKS_EFT_JournalState::Transferred, _ledgerJournalTrans);
                }
            }
            else
            {
                // partially transferred
                if(ledgerJournalTable.SKS_EFT_JournalState != SKS_EFT_JournalState::PartiallyTransferred)
                {
                    SKS_Table_LedgerJournalTrans::SetEFTJournalState(SKS_EFT_JournalState::PartiallyTransferred, _ledgerJournalTrans);
                }
            }

        }
        else
        {
            // not applicable
            if(ledgerJournalTable.SKS_EFT_JournalState != SKS_EFT_JournalState::NotApplicable)
            {
                SKS_Table_LedgerJournalTrans::SetEFTJournalState(SKS_EFT_JournalState::NotApplicable, _ledgerJournalTrans);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>SetAROffsetAccount</Name>
				<Source><![CDATA[
    private server static void SetAROffsetAccount(LedgerJournalTrans _ledgerJournalTrans)
    {
        companyBankAccountId offsetAccount;
        CustTable custTable;
        DimensionDynamicAccount dimensionDynamicAccount;
        ;
        if(_ledgerJournalTrans.OffsetLedgerDimension == 0
            && _ledgerJournalTrans.AccountType == LedgerJournalACType::Cust
            && _ledgerJournalTrans.ledgerJournalTable().JournalType == LedgerJournalType::CustPayment)
        {
            changeCompany(_ledgerJournalTrans.Company)
            {
                custTable = CustTable::findByLedgerDimension(_ledgerJournalTrans.LedgerDimension);
            }
            offsetAccount = SKS_EFT_CustomerPaym::getBankAccountId
                                (_ledgerJournalTrans.Company,
                                custTable.AccountNum,
                                _ledgerJournalTrans.PaymMode,
                                _ledgerJournalTrans.PaymSpec,
                                _ledgerJournalTrans.CustVendBankAccountId);

            if (offsetAccount)
            {
                dimensionDynamicAccount = LedgerDynamicAccountHelper::getDynamicAccountFromAccountNumber(offsetAccount, LedgerJournalACType::Bank);
                _ledgerJournalTrans.OffsetLedgerDimension = dimensionDynamicAccount;
                _ledgerJournalTrans.OffsetAccountType = LedgerJournalACType::Bank;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>SetCNPOffsetAccount</Name>
				<Source><![CDATA[
    private server static void SetCNPOffsetAccount(LedgerJournalTrans _ledgerJournalTrans)
    {
        companyBankAccountId offsetAccount;
        CustTable custTable;
        DimensionDynamicAccount dimensionDynamicAccount;
        ;
        if(_ledgerJournalTrans.OffsetLedgerDimension == 0
            && _ledgerJournalTrans.AccountType == LedgerJournalACType::Cust
            && _ledgerJournalTrans.ledgerJournalTable().JournalType == LedgerJournalType::CustPayment)
        {
            changeCompany(_ledgerJournalTrans.Company)
            {
                custTable = CustTable::findByLedgerDimension(_ledgerJournalTrans.LedgerDimension);
            }
            offsetAccount = SKS_EFT_CustReimbursementPaym::getBankAccountId
                                (_ledgerJournalTrans.Company,
                                custTable.AccountNum,
                                _ledgerJournalTrans.PaymMode,
                                _ledgerJournalTrans.PaymSpec,
                                _ledgerJournalTrans.CustVendBankAccountId);

            if (offsetAccount)
            {
                dimensionDynamicAccount = LedgerDynamicAccountHelper::getDynamicAccountFromAccountNumber(offsetAccount, LedgerJournalACType::Bank);
                _ledgerJournalTrans.OffsetLedgerDimension = dimensionDynamicAccount;
                _ledgerJournalTrans.OffsetAccountType = LedgerJournalACType::Bank;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>SetEFTJournalState</Name>
				<Source><![CDATA[
    private server static void SetEFTJournalState(SKS_EFT_JournalState _journalState, LedgerJournalTrans _ledgerJournalTrans)
    {
        LedgerJournalTable ledgerJournalTable;
        ;
        ttsbegin;
        select firstonly forupdate ledgerJournalTable where
            ledgerJournalTable.JournalNum == _ledgerJournalTrans.JournalNum &&
            ledgerJournalTable.SKS_EFT_JournalState != _journalState;

        if(ledgerJournalTable)
        {
            ledgerJournalTable.SKS_EFT_JournalState = _journalState;
            ledgerJournalTable.update();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>UpdateAPEFTState</Name>
				<Source><![CDATA[
    private server static boolean UpdateAPEFTState(LedgerJournalTrans _ledgerJournalTrans)
    {
        SKS_EFT_JournalState journalState;
        boolean eftPaymMode;
        boolean orig_eftPaymMode;

        ;

        // If method of payment was changed, set EFT+ status
        if(_ledgerJournalTrans.orig().PaymMode != _ledgerJournalTrans.PaymMode)
        {
            orig_eftPaymMode = VendPaymModeTable::SKS_EFT_PaymModeOn(_ledgerJournalTrans.orig().PaymMode);
            eftPaymMode = VendPaymModeTable::SKS_EFT_PaymModeOn(_ledgerJournalTrans.PaymMode);
            journalState = SKS_Table_LedgerJournalTable::getEFTState(_ledgerJournalTrans.JournalNum);

            // Changing to EFT+ and current jouranl state is Not Applicable
            if(journalState == SKS_EFT_JournalState::NotApplicable
                && eftPaymMode && !orig_eftPaymMode)
            {
                SKS_Table_LedgerJournalTrans::SetEFTJournalState(SKS_EFT_JournalState::Ready, _ledgerJournalTrans);
            }
            // Changing from EFT+ to non EFT+
            else if(!eftPaymMode && orig_eftPaymMode)
            {
                return true;
            }
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>UpdateAPPre</Name>
				<Source><![CDATA[
    private server static void UpdateAPPre(LedgerJournalTrans ledgerJournalTrans)
    {
        boolean rejectLine = false;
        boolean mopChange = false;
        ;
        ttsBegin;

        // Determine if line is being rejected
        rejectLine = SKS_Table_LedgerJournalTrans::UpdateAPRejectedLine(ledgerJournalTrans);

        // If not rejecting line, see if method of payment changed
        if(!rejectLine)
        {
            mopChange = SKS_Table_LedgerJournalTrans::UpdateAPEFTState(ledgerJournalTrans);
        }

        SKS_Table_LedgerJournalTrans::VendorCheck(ledgerJournalTrans);

        if(rejectLine)
        {
            SKS_Table_LedgerJournalTrans::SetAPEFTState(ledgerJournalTrans, true);
        }
        else if(mopChange)
        {
            SKS_Table_LedgerJournalTrans::SetAPEFTState(ledgerJournalTrans);
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>UpdateAPRejectedLine</Name>
				<Source><![CDATA[
    private server static boolean UpdateAPRejectedLine(LedgerJournalTrans _ledgerJournalTrans)
    {
        SKS_EFT_FilePmtSelection sks_eft_FilePmtSelection;
        SKS_EFT_FileDetail sks_eft_FileDetail;
        SKS_EFTAP_File sks_eftap_File;
        Amount calcDebitMST, calcCreditMST;// SKS_FDD_10590
        //VSTS_11618 -->
        SKS_EFT_FilePmtSelection sks_eft_FilePmtSelectionLoc, sks_eft_FilePmtSelectionPrimary;
        //VSTS_11618 <--
        ;
        // If this is an EFT+ line and it is being rejected, need to update
        if(_ledgerJournalTrans.PaymentStatus == CustVendPaymStatus::Rejected
            && _ledgerJournalTrans.orig().PaymentStatus != _ledgerJournalTrans.PaymentStatus
            && _ledgerJournalTrans.SKS_EFT_APPmtSelectionRecId != 0)
        {
            // remove payment reference if the line gets rejected
            _ledgerJournalTrans.PaymReference = '';

            // SKS_FDD_10590 -->
            changecompany(_ledgerJournalTrans.DataAreaId)// SKS_FDD_10590
            {
                calcDebitMST = _ledgerJournalTrans.calcDebitMST();
                calcCreditMST =  _ledgerJournalTrans.calcCreditMST();
            }
            // SKS_FDD_10590 <--
            // Determine if in AP EFT File and then reduce payment total
            select firstonly forupdate crosscompany sks_eft_FilePmtSelection where sks_eft_FilePmtSelection.RecId == _ledgerJournalTrans.SKS_EFT_APPmtSelectionRecId; //FDD-10590
            if(sks_eft_FilePmtSelection)
            {
                while select forupdate crosscompany sks_eft_FileDetail //FDD-10590
                    where sks_eft_FileDetail.PmtSelectionRecId == _ledgerJournalTrans.SKS_EFT_APPmtSelectionRecId
                        && sks_eft_FileDetail.PaymentLineRecId == _ledgerJournalTrans.RecId
                {
                    changecompany(sks_eft_FileDetail.DataAreaId) //FDD-10590
                    {
                        sks_eft_FileDetail.PaymentRejected = NoYes::Yes;
                        sks_eft_FileDetail.PmtSelectionRecId = 0;
                        sks_eft_FileDetail.InvoiceDiscAmountCur = 0;
                        sks_eft_FileDetail.InvoiceSettleAmountCur = 0;
                        sks_eft_FileDetail.InvoiceSettleAmountMST = 0;
                        sks_eft_FileDetail.InvoiceSettleAmountPmtCur = 0;
                        sks_eft_FileDetail.update();
                    }
                }

                // Reduce payment selection count and amount
                sks_eft_FilePmtSelection.PmtCount = sks_eft_FilePmtSelection.PmtCount - 1;
                sks_eft_FilePmtSelection.PmtTotal = sks_eft_FilePmtSelection.PmtTotal - calcDebitMST + calcCreditMST;
                if(sks_eft_FilePmtSelection.PmtCount == 0 || sks_eft_FilePmtSelection.PmtTotal == 0)
                {
                    changecompany(sks_eft_FilePmtSelectionLoc.Company ? sks_eft_FilePmtSelectionLoc.Company : sks_eft_FilePmtSelectionLoc.DataAreaId)// SKS_FDD_10590
                    {
                        ttsbegin;
                        sks_eft_FilePmtSelection.delete();
                        ttscommit;
                    }

                    select firstonly forupdate crosscompany sks_eftap_File where sks_eftap_File.RecId == sks_eft_FilePmtSelection.FileRecId;// SKS_FDD_10590
                    if(sks_eftap_File)
                    {
                        changecompany(sks_eftap_File.DataAreaId)// SKS_FDD_10590
                        {
                            sks_eftap_File.PmtTotal = sks_eftap_File.PmtTotal - calcDebitMST + calcCreditMST;
                            sks_eftap_File.PmtCount = sks_eftap_File.PmtCount - 1;
                            sks_eftap_File.update();
                        }
                    }
                    //VSTS_11618 -->
                    // check whether the PrimaryFormat is exists for the File
                    select crosscompany count(RecId) from sks_eft_FilePmtSelectionPrimary
                            where sks_eft_FilePmtSelectionPrimary.FileRecId  == sks_eftap_File.RecId &&// SKS_FDD_10590
                            sks_eft_FilePmtSelectionPrimary.PrimaryFormat == NoYes::Yes &&
                            sks_eft_FilePmtSelectionPrimary.RecId !=sks_eft_FilePmtSelection.RecId;

                    // if PrimaryFormat is not in the file
                    if(sks_eft_FilePmtSelectionPrimary.RecId == 0 && sks_eftap_File.RecId)
                    {
                        select firstonly forupdate crosscompany sks_eft_FilePmtSelectionLoc// SKS_FDD_10590
                            where sks_eft_FilePmtSelectionLoc.FileRecId == sks_eftap_File.RecId &&
                            sks_eft_FilePmtSelectionLoc.PrimaryFormat == NoYes::No &&
                            sks_eft_FilePmtSelectionLoc.RecId != sks_eft_FilePmtSelection.RecId;
                        ;
                        // make PrimaryFormat as yes
                        if(sks_eft_FilePmtSelectionLoc.RecId)
                        {
                            changecompany(sks_eft_FilePmtSelectionLoc.Company ? sks_eft_FilePmtSelectionLoc.Company : sks_eft_FilePmtSelectionLoc.DataAreaId)// SKS_FDD_10590
                            {
                                ttsbegin;
                                sks_eft_FilePmtSelectionLoc.PrimaryFormat = NoYes::Yes;
                                sks_eft_FilePmtSelectionLoc.update();
                                ttscommit;
                            }
                        }

                    }
                    //VSTS_11618 <--
                }
                else
                {
                    changecompany(sks_eft_FilePmtSelection.Company ? sks_eft_FilePmtSelection.Company : sks_eft_FilePmtSelection.DataAreaId)// SKS_FDD_10590
                    {
                        ttsbegin;
                        sks_eft_FilePmtSelection.update();
                        ttscommit;
                    }

                    select firstonly forupdate crosscompany sks_eftap_File where sks_eftap_File.RecId == sks_eft_FilePmtSelection.FileRecId;// SKS_FDD_10590
                    if(sks_eftap_File)
                    {
                        changecompany(sks_eftap_File.DataAreaId)// SKS_FDD_10590
                        {
                            sks_eftap_File.PmtTotal = sks_eftap_File.PmtTotal - calcDebitMST + calcCreditMST;
                            sks_eftap_File.update();
                        }
                    }
                }
            }
            // Delete FXAll details
            SKS_FXA_Details::deleteByLedgerJournalTransRecid(_ledgerJournalTrans.RecId);
            _ledgerJournalTrans.SKS_EFT_APPmtSelectionRecId = 0;

            return true; // Returning true causes journal state to be updated
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>UpdateBTBPre</Name>
				<Source><![CDATA[
    private server static void UpdateBTBPre(LedgerJournalTrans ledgerJournalTrans)
    {
        boolean rejectLine = false;
        boolean mopChange = false;
        ;
        ttsBegin;

        // Determine if line is being rejected
        rejectLine = SKS_Table_LedgerJournalTrans::UpdateBTBRejectedLine(ledgerJournalTrans);

        // If not rejecting line, see if method of payment changed
        if(!rejectLine)
        {
            mopChange = SKS_Table_LedgerJournalTrans::UpdateBTBEFTState(ledgerJournalTrans);
        }

        //SKS_Table_LedgerJournalTrans::VendorCheck(ledgerJournalTrans);

        if(rejectLine)
        {
            SKS_Table_LedgerJournalTrans::SetBTBEFTState(ledgerJournalTrans, true);
        }
        else if(mopChange)
        {
            SKS_Table_LedgerJournalTrans::SetBTBEFTState(ledgerJournalTrans);
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>UpdateBTBRejectedLine</Name>
				<Source><![CDATA[
    private server static boolean UpdateBTBRejectedLine(LedgerJournalTrans _ledgerJournalTrans)
    {
        SKS_EFT_FilePmtSelection sks_eft_FilePmtSelection;
        SKS_EFT_FileDetail sks_eft_FileDetail;
        SKS_EFTAP_File sks_eftap_File;
        Amount calcDebitMST, calcCreditMST;// SKS_FDD_10590
        //VSTS_11618 -->
        SKS_EFT_FilePmtSelection sks_eft_FilePmtSelectionLoc, sks_eft_FilePmtSelectionPrimary;
        //VSTS_11618 <--
        ;
        // If this is an EFT+ line and it is being rejected, need to update
        if(_ledgerJournalTrans.PaymentStatus == CustVendPaymStatus::Rejected
            && _ledgerJournalTrans.orig().PaymentStatus != _ledgerJournalTrans.PaymentStatus
            && _ledgerJournalTrans.SKS_EFT_BTBPmtSelectionRecId != 0)
        {
            // SKS_FDD_10590 -->
            changecompany(_ledgerJournalTrans.DataAreaId)// SKS_FDD_10590
            {
                calcDebitMST = _ledgerJournalTrans.calcDebitMST();
                calcCreditMST =  _ledgerJournalTrans.calcCreditMST();
            }
            // SKS_FDD_10590 <--
            // Determine if in AP EFT File and then reduce payment total
            select firstonly forupdate crosscompany sks_eft_FilePmtSelection where sks_eft_FilePmtSelection.RecId == _ledgerJournalTrans.SKS_EFT_BTBPmtSelectionRecId; //FDD-10590
            if(sks_eft_FilePmtSelection)
            {
                while select forupdate crosscompany sks_eft_FileDetail //FDD-10590
                    where sks_eft_FileDetail.PmtSelectionRecId == _ledgerJournalTrans.SKS_EFT_BTBPmtSelectionRecId
                        && sks_eft_FileDetail.PaymentLineRecId == _ledgerJournalTrans.RecId
                {
                    changecompany(sks_eft_FileDetail.DataAreaId) //FDD-10590
                    {
                        sks_eft_FileDetail.PaymentRejected = NoYes::Yes;
                        sks_eft_FileDetail.PmtSelectionRecId = 0;
                        sks_eft_FileDetail.InvoiceDiscAmountCur = 0;
                        sks_eft_FileDetail.InvoiceSettleAmountCur = 0;
                        sks_eft_FileDetail.InvoiceSettleAmountMST = 0;
                        sks_eft_FileDetail.InvoiceSettleAmountPmtCur = 0;
                        sks_eft_FileDetail.update();
                    }
                }

                // Reduce payment selection count and amount
                sks_eft_FilePmtSelection.PmtCount = sks_eft_FilePmtSelection.PmtCount - 1;

                if(SKS_BTB_PaymModeTable::find(sks_eft_FilePmtSelection.PaymMode).TransferType == SKS_BTB_TransferType::Transfer_out)
                {
                    sks_eft_FilePmtSelection.PmtTotal = sks_eft_FilePmtSelection.PmtTotal - calcDebitMST + calcCreditMST;
                }
                else
                {
                    sks_eft_FilePmtSelection.PmtTotal = sks_eft_FilePmtSelection.PmtTotal + calcDebitMST - calcCreditMST;
                }

                if(sks_eft_FilePmtSelection.PmtCount == 0 || sks_eft_FilePmtSelection.PmtTotal == 0)
                {
                    changecompany(sks_eft_FilePmtSelectionLoc.Company ? sks_eft_FilePmtSelectionLoc.Company : sks_eft_FilePmtSelectionLoc.DataAreaId)// SKS_FDD_10590
                    {
                        ttsbegin;
                        sks_eft_FilePmtSelection.delete();
                        ttscommit;
                    }

                    select firstonly forupdate crosscompany sks_eftap_File where sks_eftap_File.RecId == sks_eft_FilePmtSelection.FileRecId;// SKS_FDD_10590
                    if(sks_eftap_File)
                    {
                        changecompany(sks_eftap_File.DataAreaId)// SKS_FDD_10590
                        {
                            if(sks_eftap_File.TransferDirection == SKS_BTB_TransferType::Transfer_out)
                            {
                                sks_eftap_File.PmtTotal = sks_eftap_File.PmtTotal - calcDebitMST + calcCreditMST;
                            }
                            else
                            {
                                sks_eftap_File.PmtTotal = sks_eftap_File.PmtTotal + calcDebitMST - calcCreditMST;
                            }
                            sks_eftap_File.PmtCount = sks_eftap_File.PmtCount - 1;
                            sks_eftap_File.update();
                        }
                    }
                    //VSTS_11618 -->
                    // check whether the PrimaryFormat is exists for the File
                    select crosscompany count(RecId) from sks_eft_FilePmtSelectionPrimary
                            where sks_eft_FilePmtSelectionPrimary.FileRecId  == sks_eftap_File.RecId &&// SKS_FDD_10590
                            sks_eft_FilePmtSelectionPrimary.PrimaryFormat == NoYes::Yes &&
                            sks_eft_FilePmtSelectionPrimary.RecId !=sks_eft_FilePmtSelection.RecId;

                    // if PrimaryFormat is not in the file
                    if(sks_eft_FilePmtSelectionPrimary.RecId == 0 && sks_eftap_File.RecId)
                    {
                        select firstonly forupdate crosscompany sks_eft_FilePmtSelectionLoc// SKS_FDD_10590
                            where sks_eft_FilePmtSelectionLoc.FileRecId == sks_eftap_File.RecId &&
                            sks_eft_FilePmtSelectionLoc.PrimaryFormat == NoYes::No &&
                            sks_eft_FilePmtSelectionLoc.RecId != sks_eft_FilePmtSelection.RecId;
                        ;
                        // make PrimaryFormat as yes
                        if(sks_eft_FilePmtSelectionLoc.RecId)
                        {
                            changecompany(sks_eft_FilePmtSelectionLoc.Company ? sks_eft_FilePmtSelectionLoc.Company : sks_eft_FilePmtSelectionLoc.DataAreaId)// SKS_FDD_10590
                            {
                                ttsbegin;
                                sks_eft_FilePmtSelectionLoc.PrimaryFormat = NoYes::Yes;
                                sks_eft_FilePmtSelectionLoc.update();
                                ttscommit;
                            }
                        }

                    }
                    //VSTS_11618 <--
                }
                else
                {
                    changecompany(sks_eft_FilePmtSelection.Company ? sks_eft_FilePmtSelection.Company : sks_eft_FilePmtSelection.DataAreaId)// SKS_FDD_10590
                    {
                        ttsbegin;
                        sks_eft_FilePmtSelection.update();
                        ttscommit;
                    }

                    select firstonly forupdate crosscompany sks_eftap_File where sks_eftap_File.RecId == sks_eft_FilePmtSelection.FileRecId;// SKS_FDD_10590
                    if(sks_eftap_File)
                    {
                        changecompany(sks_eftap_File.DataAreaId)// SKS_FDD_10590
                        {
                            sks_eftap_File.PmtTotal = sks_eftap_File.PmtTotal - calcDebitMST + calcCreditMST;
                            sks_eftap_File.update();
                        }
                    }
                }
            }
            // Delete FXAll details
            //SKS_FXA_Details::deleteByLedgerJournalTransRecid(_ledgerJournalTrans.RecId);
            _ledgerJournalTrans.SKS_EFT_BTBPmtSelectionRecId = 0;

            return true; // Returning true causes journal state to be updated
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>UpdateBTBEFTState</Name>
				<Source><![CDATA[
    private server static boolean UpdateBTBEFTState(LedgerJournalTrans _ledgerJournalTrans)
    {
        SKS_EFT_JournalState journalState;
        boolean eftPaymMode;
        boolean orig_eftPaymMode;

        ;

        // If method of payment was changed, set EFT+ status
        if(_ledgerJournalTrans.orig().PaymMode != _ledgerJournalTrans.PaymMode)
        {
            orig_eftPaymMode = VendPaymModeTable::SKS_EFT_PaymModeOn(_ledgerJournalTrans.orig().PaymMode);
            eftPaymMode = VendPaymModeTable::SKS_EFT_PaymModeOn(_ledgerJournalTrans.PaymMode);
            journalState = SKS_Table_LedgerJournalTable::getEFTState(_ledgerJournalTrans.JournalNum);

            // Changing to EFT+ and current jouranl state is Not Applicable
            if(journalState == SKS_EFT_JournalState::NotApplicable)
            {
                SKS_Table_LedgerJournalTrans::SetEFTJournalState(SKS_EFT_JournalState::Ready, _ledgerJournalTrans);
            }
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>UpdateAREFTState</Name>
				<Source><![CDATA[
    private server static boolean UpdateAREFTState(LedgerJournalTrans _ledgerJournalTrans)
    {
        SKS_EFT_JournalState journalState;
        boolean eftPaymMode;
        boolean orig_eftPaymMode;

        ;

        // If method of payment was changed, set EFT+ status
        if(_ledgerJournalTrans.orig().PaymMode != _ledgerJournalTrans.PaymMode)
        {
            orig_eftPaymMode = CustPaymModeTable::SKS_EFT_PaymModeOn(_ledgerJournalTrans.orig().PaymMode);
            eftPaymMode = CustPaymModeTable::SKS_EFT_PaymModeOn(_ledgerJournalTrans.PaymMode);
            journalState = SKS_Table_LedgerJournalTable::getEFTState(_ledgerJournalTrans.JournalNum);

            // Changing to EFT+ and current jouranl state is Not Applicable
            if(journalState == SKS_EFT_JournalState::NotApplicable
                && eftPaymMode && !orig_eftPaymMode)
            {
                SKS_Table_LedgerJournalTrans::SetEFTJournalState(SKS_EFT_JournalState::Ready, _ledgerJournalTrans);
            }
            // Changing from EFT+ to non EFT+
            else if(!eftPaymMode && orig_eftPaymMode)
            {
                return true;
            }
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>UpdateCNPEFTState</Name>
				<Source><![CDATA[
    private server static boolean UpdateCNPEFTState(LedgerJournalTrans _ledgerJournalTrans)
    {
        SKS_EFT_JournalState journalState;
        boolean eftPaymMode;
        boolean orig_eftPaymMode;

        ;

        // If method of payment was changed, set EFT+ status
        if(_ledgerJournalTrans.orig().PaymMode != _ledgerJournalTrans.PaymMode)
        {
            orig_eftPaymMode = CustPaymModeTable::SKS_CNP_PaymModeOn(_ledgerJournalTrans.orig().PaymMode);
            eftPaymMode = CustPaymModeTable::SKS_CNP_PaymModeOn(_ledgerJournalTrans.PaymMode);
            journalState = SKS_Table_LedgerJournalTable::getEFTState(_ledgerJournalTrans.JournalNum);

            // Changing to EFT+ and current jouranl state is Not Applicable
            if(journalState == SKS_EFT_JournalState::NotApplicable
                && eftPaymMode && !orig_eftPaymMode)
            {
                SKS_Table_LedgerJournalTrans::SetEFTJournalState(SKS_EFT_JournalState::Ready, _ledgerJournalTrans);
            }
            // Changing from EFT+ to non EFT+
            else if(!eftPaymMode && orig_eftPaymMode)
            {
                return true;
            }
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>UpdateARPre</Name>
				<Source><![CDATA[
    private server static void UpdateARPre(LedgerJournalTrans ledgerJournalTrans)
    {
        boolean rejectLine = false;
        boolean mopChange = false;
        ;
        ttsBegin;

        // Determine if line is being rejected
        rejectLine = SKS_Table_LedgerJournalTrans::UpdateARRejectedLine(ledgerJournalTrans);

        // If not rejecting line, see if method of payment changed
        if(!rejectLine)
        {
            mopChange = SKS_Table_LedgerJournalTrans::UpdateAREFTState(ledgerJournalTrans);
        }

        SKS_Table_LedgerJournalTrans::CustomerCheck(ledgerJournalTrans);

        if(rejectLine)
        {
            SKS_Table_LedgerJournalTrans::SetAREFTState(ledgerJournalTrans, true);
        }
        else if(mopChange)
        {
            SKS_Table_LedgerJournalTrans::SetAREFTState(ledgerJournalTrans);
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>UpdateCNPPre</Name>
				<Source><![CDATA[
    private server static void UpdateCNPPre(LedgerJournalTrans ledgerJournalTrans)
    {
        boolean rejectLine = false;
        boolean mopChange = false;
        ;
        ttsBegin;

        // Determine if line is being rejected
        rejectLine = SKS_Table_LedgerJournalTrans::UpdateCNPRejectedLine(ledgerJournalTrans);

        // If not rejecting line, see if method of payment changed
        if(!rejectLine)
        {
            mopChange = SKS_Table_LedgerJournalTrans::UpdateCNPEFTState(ledgerJournalTrans);
        }

        SKS_Table_LedgerJournalTrans::CustomerCheck(ledgerJournalTrans);

        if(rejectLine)
        {
            SKS_Table_LedgerJournalTrans::SetCNPEFTState(ledgerJournalTrans, true);
        }
        else if(mopChange)
        {
            SKS_Table_LedgerJournalTrans::SetCNPEFTState(ledgerJournalTrans);
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>UpdateARRejectedLine</Name>
				<Source><![CDATA[
    private server static boolean UpdateARRejectedLine(LedgerJournalTrans _ledgerJournalTrans)
    {
        SKS_EFT_FilePmtSelection sks_eft_FilePmtSelection;
        SKS_EFT_FileDetail sks_eft_FileDetail;
        SKS_EFTAP_File sks_eftap_File;
        Amount calcDebitMST, calcCreditMST;// SKS_FDD_10590
        //VSTS_11618 -->
        SKS_EFT_FilePmtSelection sks_eft_FilePmtSelectionLoc, sks_eft_FilePmtSelectionPrimary;
        //VSTS_11618 <--
        ;

        // If this is an EFT+ line and it is being rejected, need to update
        if(_ledgerJournalTrans.PaymentStatus == CustVendPaymStatus::Rejected
            && _ledgerJournalTrans.orig().PaymentStatus != _ledgerJournalTrans.PaymentStatus
            && _ledgerJournalTrans.SKS_EFT_ARPmtSelectionRecId != 0)
        {
            // SKS_FDD_10590 -->
            changecompany(_ledgerJournalTrans.DataAreaId)
            {
                calcDebitMST = _ledgerJournalTrans.calcDebitMST();
                calcCreditMST =  _ledgerJournalTrans.calcCreditMST();
            }
            // SKS_FDD_10590 <--
            // Determine if in AR EFT File and then reduce payment total
            select firstonly forupdate crosscompany sks_eft_FilePmtSelection where sks_eft_FilePmtSelection.RecId == _ledgerJournalTrans.SKS_EFT_ARPmtSelectionRecId; //FDD-10590
            if(sks_eft_FilePmtSelection)
            {
                while select forupdate crosscompany sks_eft_FileDetail //FDD-10590
                where sks_eft_FileDetail.PmtSelectionRecId == _ledgerJournalTrans.SKS_EFT_ARPmtSelectionRecId
                        && sks_eft_FileDetail.PaymentLineRecId == _ledgerJournalTrans.RecId
                {
                    changecompany(sks_eft_FileDetail.DataAreaId) //FDD-10590
                    {
                        sks_eft_FileDetail.PaymentRejected = NoYes::Yes;
                        sks_eft_FileDetail.PmtSelectionRecId = 0;
                        sks_eft_FileDetail.InvoiceDiscAmountCur = 0;
                        sks_eft_FileDetail.InvoiceSettleAmountCur = 0;
                        sks_eft_FileDetail.InvoiceSettleAmountMST = 0;
                        sks_eft_FileDetail.InvoiceSettleAmountPmtCur = 0;
                        sks_eft_FileDetail.update();
                    }
                    // FDD-10590
                }


                // Reduce payment selection count and amount
                sks_eft_FilePmtSelection.PmtCount = sks_eft_FilePmtSelection.PmtCount - 1;
                sks_eft_FilePmtSelection.PmtTotal = sks_eft_FilePmtSelection.PmtTotal + calcDebitMST - calcCreditMST;
                if(sks_eft_FilePmtSelection.PmtCount == 0 || sks_eft_FilePmtSelection.PmtTotal == 0)
                {
                    changecompany(sks_eft_FilePmtSelection.Company ? sks_eft_FilePmtSelection.Company: sks_eft_FilePmtSelection.DataAreaId)// SKS_FDD_10590
                    {
                        ttsbegin;
                        sks_eft_FilePmtSelection.delete();
                        ttscommit;
                    }

                    select firstonly forupdate crosscompany sks_eftap_File where sks_eftap_File.RecId == sks_eft_FilePmtSelection.FileRecId;// SKS_FDD_10590
                    if(sks_eftap_File)
                    {
                        changecompany(sks_eftap_File.DataAreaId)
                        {
                            sks_eftap_File.PmtTotal = sks_eftap_File.PmtTotal + calcDebitMST - calcCreditMST;
                            sks_eftap_File.PmtCount = sks_eftap_File.PmtCount - 1;
                            sks_eftap_File.update();
                        }
                    }
                    //VSTS_11618 -->
                    // check whether the PrimaryFormat is exists for the File
                    select crosscompany count(RecId) from sks_eft_FilePmtSelectionPrimary// SKS_FDD_10590
                            where sks_eft_FilePmtSelectionPrimary.FileRecId  == sks_eftap_File.RecId &&
                            sks_eft_FilePmtSelectionPrimary.PrimaryFormat == NoYes::Yes &&
                            sks_eft_FilePmtSelectionPrimary.RecId !=sks_eft_FilePmtSelection.RecId;

                    // if PrimaryFormat is not in the file
                    if(sks_eft_FilePmtSelectionPrimary.RecId == 0 && sks_eftap_File.RecId)
                    {
                        select firstonly forupdate crosscompany sks_eft_FilePmtSelectionLoc
                            where sks_eft_FilePmtSelectionLoc.FileRecId == sks_eftap_File.RecId &&
                            sks_eft_FilePmtSelectionLoc.PrimaryFormat == NoYes::No &&
                            sks_eft_FilePmtSelectionLoc.RecId != sks_eft_FilePmtSelection.RecId;
                        ;
                        // make PrimaryFormat as yes
                        if(sks_eft_FilePmtSelectionLoc.RecId)
                        {
                            changecompany(sks_eft_FilePmtSelectionLoc.Company ? sks_eft_FilePmtSelectionLoc.Company : sks_eft_FilePmtSelectionLoc.DataAreaId)// SKS_FDD_10590
                            {
                                ttsbegin;
                                sks_eft_FilePmtSelectionLoc.PrimaryFormat = NoYes::Yes;
                                sks_eft_FilePmtSelectionLoc.update();
                                ttscommit;
                            }
                        }

                    }
                    //VSTS_11618 <--
                }
                else
                {
                    changecompany(sks_eft_FilePmtSelection.Company ? sks_eft_FilePmtSelection.Company: sks_eft_FilePmtSelection.DataAreaId)// SKS_FDD_10590
                    {
                        ttsbegin;
                        sks_eft_FilePmtSelection.update();
                        ttscommit;
                    }

                    select firstonly forupdate crosscompany sks_eftap_File  where sks_eftap_File.RecId == sks_eft_FilePmtSelection.FileRecId;// SKS_FDD_10590
                    if(sks_eftap_File)
                    {
                        changecompany(sks_eftap_File.DataAreaId)// SKS_FDD_10590
                        {
                            sks_eftap_File.PmtTotal = sks_eftap_File.PmtTotal + calcDebitMST - calcCreditMST;
                            sks_eftap_File.update();
                        }
                    }
                }
            }
            _ledgerJournalTrans.SKS_EFT_ARPmtSelectionRecId = 0;

            return true; // Returning true causes journal state to be updated
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>UpdateCNPRejectedLine</Name>
				<Source><![CDATA[
    private server static boolean UpdateCNPRejectedLine(LedgerJournalTrans _ledgerJournalTrans)
    {
        SKS_EFT_FilePmtSelection sks_eft_FilePmtSelection;
        SKS_EFT_FileDetail sks_eft_FileDetail;
        SKS_EFTAP_File sks_eftap_File;
        Amount calcDebitMST, calcCreditMST;// SKS_FDD_10590
        //VSTS_11618 -->
        SKS_EFT_FilePmtSelection sks_eft_FilePmtSelectionLoc, sks_eft_FilePmtSelectionPrimary;
        //VSTS_11618 <--
        ;

        // If this is an EFT+ line and it is being rejected, need to update
        if(_ledgerJournalTrans.PaymentStatus == CustVendPaymStatus::Rejected
            && _ledgerJournalTrans.orig().PaymentStatus != _ledgerJournalTrans.PaymentStatus
            && _ledgerJournalTrans.SKS_EFT_CNPPmtSelectionRecId != 0)
        {
            // SKS_FDD_10590 -->
            changecompany(_ledgerJournalTrans.DataAreaId)
            {
                calcDebitMST = _ledgerJournalTrans.calcDebitMST();
                calcCreditMST =  _ledgerJournalTrans.calcCreditMST();
            }
            // SKS_FDD_10590 <--
            // Determine if in AR EFT File and then reduce payment total
            select firstonly forupdate crosscompany sks_eft_FilePmtSelection where sks_eft_FilePmtSelection.RecId == _ledgerJournalTrans.SKS_EFT_CNPPmtSelectionRecId; //FDD-10590
            if(sks_eft_FilePmtSelection)
            {
                while select forupdate crosscompany sks_eft_FileDetail //FDD-10590
                where sks_eft_FileDetail.PmtSelectionRecId == _ledgerJournalTrans.SKS_EFT_CNPPmtSelectionRecId
                        && sks_eft_FileDetail.PaymentLineRecId == _ledgerJournalTrans.RecId
                {
                    changecompany(sks_eft_FileDetail.DataAreaId) //FDD-10590
                    {
                        sks_eft_FileDetail.PaymentRejected = NoYes::Yes;
                        sks_eft_FileDetail.PmtSelectionRecId = 0;
                        sks_eft_FileDetail.InvoiceDiscAmountCur = 0;
                        sks_eft_FileDetail.InvoiceSettleAmountCur = 0;
                        sks_eft_FileDetail.InvoiceSettleAmountMST = 0;
                        sks_eft_FileDetail.InvoiceSettleAmountPmtCur = 0;
                        sks_eft_FileDetail.update();
                    }
                    // FDD-10590
                }


                // Reduce payment selection count and amount
                sks_eft_FilePmtSelection.PmtCount = sks_eft_FilePmtSelection.PmtCount - 1;
                sks_eft_FilePmtSelection.PmtTotal = sks_eft_FilePmtSelection.PmtTotal - calcDebitMST + calcCreditMST;
                if(sks_eft_FilePmtSelection.PmtCount == 0 || sks_eft_FilePmtSelection.PmtTotal == 0)
                {
                    changecompany(sks_eft_FilePmtSelection.Company ? sks_eft_FilePmtSelection.Company: sks_eft_FilePmtSelection.DataAreaId)// SKS_FDD_10590
                    {
                        ttsbegin;
                        sks_eft_FilePmtSelection.delete();
                        ttscommit;
                    }

                    select firstonly forupdate crosscompany sks_eftap_File where sks_eftap_File.RecId == sks_eft_FilePmtSelection.FileRecId;// SKS_FDD_10590
                    if(sks_eftap_File)
                    {
                        changecompany(sks_eftap_File.DataAreaId)
                        {
                            sks_eftap_File.PmtTotal = sks_eftap_File.PmtTotal - calcDebitMST + calcCreditMST;
                            sks_eftap_File.PmtCount = sks_eftap_File.PmtCount - 1;
                            sks_eftap_File.update();
                        }
                    }
                    //VSTS_11618 -->
                    // check whether the PrimaryFormat is exists for the File
                    select crosscompany count(RecId) from sks_eft_FilePmtSelectionPrimary// SKS_FDD_10590
                            where sks_eft_FilePmtSelectionPrimary.FileRecId  == sks_eftap_File.RecId &&
                            sks_eft_FilePmtSelectionPrimary.PrimaryFormat == NoYes::Yes &&
                            sks_eft_FilePmtSelectionPrimary.RecId !=sks_eft_FilePmtSelection.RecId;

                    // if PrimaryFormat is not in the file
                    if(sks_eft_FilePmtSelectionPrimary.RecId == 0 && sks_eftap_File.RecId)
                    {
                        select firstonly forupdate crosscompany sks_eft_FilePmtSelectionLoc
                            where sks_eft_FilePmtSelectionLoc.FileRecId == sks_eftap_File.RecId &&
                            sks_eft_FilePmtSelectionLoc.PrimaryFormat == NoYes::No &&
                            sks_eft_FilePmtSelectionLoc.RecId != sks_eft_FilePmtSelection.RecId;
                        ;
                        // make PrimaryFormat as yes
                        if(sks_eft_FilePmtSelectionLoc.RecId)
                        {
                            changecompany(sks_eft_FilePmtSelectionLoc.Company ? sks_eft_FilePmtSelectionLoc.Company : sks_eft_FilePmtSelectionLoc.DataAreaId)// SKS_FDD_10590
                            {
                                ttsbegin;
                                sks_eft_FilePmtSelectionLoc.PrimaryFormat = NoYes::Yes;
                                sks_eft_FilePmtSelectionLoc.update();
                                ttscommit;
                            }
                        }

                    }
                    //VSTS_11618 <--
                }
                else
                {
                    changecompany(sks_eft_FilePmtSelection.Company ? sks_eft_FilePmtSelection.Company: sks_eft_FilePmtSelection.DataAreaId)// SKS_FDD_10590
                    {
                        ttsbegin;
                        sks_eft_FilePmtSelection.update();
                        ttscommit;
                    }

                    select firstonly forupdate crosscompany sks_eftap_File  where sks_eftap_File.RecId == sks_eft_FilePmtSelection.FileRecId;// SKS_FDD_10590
                    if(sks_eftap_File)
                    {
                        changecompany(sks_eftap_File.DataAreaId)// SKS_FDD_10590
                        {
                            sks_eftap_File.PmtTotal = sks_eftap_File.PmtTotal - calcDebitMST + calcCreditMST;
                            sks_eftap_File.update();
                        }
                    }
                }
            }
            _ledgerJournalTrans.SKS_EFT_CNPPmtSelectionRecId = 0;

            return true; // Returning true causes journal state to be updated
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>VendorCheck</Name>
				<Source><![CDATA[
    private server static void VendorCheck(LedgerJournalTrans _ledgerJournalTrans)
    {
        SKS_EB_Vendor sks_eb_Vendor;
        VendTable vendTable;
        ;
        if(_ledgerJournalTrans.AccountType == LedgerJournalACType::Vend && _ledgerJournalTrans.LedgerDimension != 0)
        {
            changeCompany(_ledgerJournalTrans.Company)
            {
                vendTable = VendTable::findByLedgerDimension(_ledgerJournalTrans.LedgerDimension);
            }

            // See if Vendor exists in EFT+ and if they can change the method of payment/payemnt spec/vendor bank account
            select firstonly PaymCanChange from sks_eb_Vendor where sks_eb_Vendor.VendCompany == _ledgerJournalTrans.Company && sks_eb_Vendor.VendAccount == vendTable.AccountNum;
            if(sks_eb_Vendor && !sks_eb_Vendor.PaymCanChange)
            {
                // If can't change, detect if values are the vendor defaults
                // If not vendor defaults, change to vendor defaults and display warning
                if(vendTable.PaymMode != _ledgerJournalTrans.PaymMode ||
                   vendTable.PaymSpec != _ledgerJournalTrans.PaymSpec ||
                   vendTable.BankAccount != _ledgerJournalTrans.CustVendBankAccountId)
                {
                    _ledgerJournalTrans.PaymMode = vendTable.PaymMode;
                    _ledgerJournalTrans.PaymSpec = vendTable.PaymSpec;
                    _ledgerJournalTrans.CustVendBankAccountId = vendTable.BankAccount;
                    warning(strFmt("@SKS1209", vendTable.AccountNum, _ledgerJournalTrans.PaymMode, _ledgerJournalTrans.PaymSpec, _ledgerJournalTrans.CustVendBankAccountId));
                }
            }
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>LedgerJournalTrans_Post_validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check mandate limit if is is called from proposal.
    /// </summary>
    /// <param name="args">args</param>
    // Sks_Bug_7416
    [PostHandlerFor(tableStr(LedgerJournalTrans), tableMethodStr(LedgerJournalTrans, validateWrite))]
    public static void LedgerJournalTrans_Post_validateWrite(XppPrePostArgs args)
    {
        LedgerJournalTrans  ledgerJournalTrans;
        ledgerJournalTrans = args.getThis();
        if(ledgerJournalTrans.RecId)
        {
            SKS_Table_LedgerJournalTrans::checkIsCallFromProposalLine(ledgerJournalTrans);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIsCallFromProposalLine</Name>
				<Source><![CDATA[
    // Sks_Bug_7416
    // This method is apply direct debit mandate limit for manually selected invoices.
    private server static void checkIsCallFromProposalLine(LedgerJournalTrans _ledgerJournalTrans)
    {
        ledgerjournaltable                  ledgerJournalTable;
        CustVendPaymProposalLine            custVendPaymProposalLine;
        SKS_DD_CustVendPaymExceptionList    custVendPaymExceptionList;
        CustTransOpen                       custTransOpen;
        SpecTrans                           specTrans;
        CustPaymModeTable                   custPaymModeTable;
        SKS_DD_CustVendPaymExceptionList    custVendPaymExceptionListLoc;
        SKS_DD_CustVendMandPaymValidate     custVendMandPaymValidate = new SKS_DD_CustVendMandPaymValidate();
        LedgerJournalTrans                  ledgerJournalTrans;
        SKS_DD_CustTransMandApplied         custTransMandApplied;

        ledgerJournalTable = _ledgerJournalTrans.ledgerJournalTable();

        select firstonly JournalId,AccountNum,RecId from custVendPaymProposalLine
            where custVendPaymProposalLine.JournalId    == ledgerJournalTable.JournalNum
                && custVendPaymProposalLine.AccountNum  == LedgerDynamicAccountHelper::getAccountNumberFromDynamicAccount(_ledgerJournalTrans.LedgerDimension);

        custPaymModeTable = CustPaymModeTable::find(_ledgerJournalTrans.PaymMode);

        if(!custVendPaymProposalLine.RecId &&
            custPaymModeTable.SKS_EFT_PaymMode &&
            custPaymModeTable.IsSEPA        == NoYes::Yes &&
            _ledgerJournalTrans.AccountType == LedgerJournalACType::Cust &&
            ledgerJournalTable.JournalType  == LedgerJournalType::CustPayment)
        {
            while select crosscompany ledgerJournalTrans
                order by TransDate asc
                    where ledgerJournalTrans.JournalNum == ledgerJournalTable.JournalNum
                    join specTrans
                        group by RefCompany
                            where specTrans.SpecTableId == tableNum(LedgerJournalTrans)
                                && specTrans.SpecRecId  == ledgerJournalTrans.RecId
            {
                custTransMandApplied.clear();
                //SKS_Bug_8704 -->
                if(specTrans.RefCompany)
                {
                    //SKS_Bug_8704 <--
                    changecompany(specTrans.RefCompany)
                    {
                        ttsBegin;
                        while select custTransMandApplied
                        where custTransMandApplied.JournalNum == ledgerJournalTable.JournalNum
                            && custTransMandApplied.company == specTrans.RefCompany
                        {
                            custTransMandApplied.selectForUpdate(true);
                            custTransMandApplied.delete();
                        }
                        ttsCommit;
                    }
                    //SKS_Bug_8704 -->
                }
                //SKS_Bug_8704 <--
            }
            ttsbegin;
          
            custVendMandPaymValidate.init(ledgerJournalTable.JournalNum);
            custVendMandPaymValidate.updateCustTransMandApplied_LJTrans();
          
            while select  crosscompany specTrans
                group by RefCompany
                    where specTrans.SpecTableId == tableNum(ledgerJournalTrans)
                        && specTrans.SpecRecId  == _ledgerJournalTrans.RecId
                    join  custTransOpen
                        where custTransOpen.TableId == specTrans.RefTableId
                            && custTransOpen.RecId  == specTrans.RefRecId
            {
                //SKS_DD_ARPaymentValidation
                if(specTrans.RefCompany)
                {
                    SKS_Table_LedgerJournalTrans::validateCustPaymentJournal(_ledgerJournalTrans.PaymMode,
                                                            LedgerDynamicAccountHelper::getAccountNumberFromDynamicAccount(_ledgerJournalTrans.LedgerDimension),
                                                            _ledgerJournalTrans.TransDate,
                                                            _ledgerJournalTrans.amount(),
                                                            _ledgerJournalTrans,
                                                            specTrans.RefCompany,
                                                            false);
                }
            }
            ttscommit;
            select firstonly RecId from custVendPaymExceptionList
                    where custVendPaymExceptionList.JournalId == ledgerJournalTable.JournalNum;

            if(custVendPaymExceptionList.RecId)
            {
                select firstonly RecId from custVendPaymExceptionListLoc
                        where custVendPaymExceptionListLoc.JournalId == ledgerJournalTable.JournalNum
                        && custVendPaymExceptionListLoc.ErrorWarning == SKS_DD_ErrorWarning::Error;

                if(custVendPaymExceptionList.RecId)
                {
                    error("@SKS6183");
                }
                else
                {
                    warning("@SKS6183");
                }
            }
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCustPaymentJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calidate customer payment journals
    /// </summary>
    /// <param name = "_paymMode">_paymMode</param>
    /// <param name = "_custAccount">_custAccount</param>
    /// <param name = "_paymDate">_paymDate</param>
    /// <param name = "_amountCur">_amountCur</param>
    /// <param name = "_buffer">_buffer</param>
    /// <param name = "_company">_company</param>
    /// <param name = "_enableLog">_enableLog</param>
    /// <returns>boolean</returns>
    public static boolean validateCustPaymentJournal(PaymMode   _paymMode,
                                     CustAccount                _custAccount,
                                     TransDate                  _paymDate,
                                     AmountCur                  _amountCur,
                                     Common                     _buffer,
                                     DataAreaId                 _company,
                                     boolean                    _enableLog = false)
    {
        CustTable                           custTable;
        CustDirectDebitMandate              custDirectDebitMandate;
        CustDirectDebitMandate              custDirectDebitMandateExisting;
        CustPaymModeTable                   custPaymModeTable;
        SKS_DD_PaymError                    dd_PaymError;

        // SKS_EB_FDD-DD-NETS integration -->
        SKS_EB_BankTable                sKS_EB_BankTable;
        LedgerJournalTrans              ledgerJournalTrans;
        boolean                         addMessage;
        // SKS_EB_FDD-DD-NETS integration <--

        SKS_DD_CustVendMandPaymValidate     custVendMandPaymValidate = new SKS_DD_CustVendMandPaymValidate();

        custPaymModeTable = CustPaymModeTable::find(_paymMode);
        //SKS_Bug_8704 -->
        if(_company)
        {
            //SKS_Bug_8704 <--
            changecompany (_company)
            {
                custTable = CustTable::find(_custAccount);
            }

            if (custPaymModeTable.SKS_EFT_PaymMode)
            {
                //check customer available limit
                changecompany (_company)
                {
                    custDirectDebitMandate = CustDirectDebitMandate::find(custTable.DefaultDirectDebitMandate);
                }
                //Sks_Bug_7471 --->
                if (custDirectDebitMandate.Status == CustMandateStatus::Canceled ||
                custDirectDebitMandate.Status     == CustMandateStatus::Expired  ||
                custDirectDebitMandate.Status     == CustMandateStatus::Incomplete)
                {
                    changecompany (_company)
                    {
                        custDirectDebitMandateExisting =  custVendMandPaymValidate.findActiveMandate(custTable.AccountNum);
                        if(custDirectDebitMandateExisting)
                        {
                            custDirectDebitMandate = custDirectDebitMandateExisting;
                        }
                    }
                }
                //Sks_Bug_7471 <---
                if (custPaymModeTable.IsSEPA == NoYes::Yes)
                {
                    ttsBegin;
                    _buffer.selectForUpdate(true);

                    if (custDirectDebitMandate.RecId)
                    {
                        //As we have mandate limit - start consider invoice transactions for validation
                        //a.    Payment date is before the expiration date insert record into exception list
                        //b.    Mandate is cancelled
                        //c.    Method of payment is different from default method of payment
                        //d.    Active mandate but field Blocked for mandate is checked insert record into exception list

                        if (custDirectDebitMandate.Status == CustMandateStatus::Incomplete)
                        {
                            dd_PaymError = strFmt("@SKS6177",_company);
                            SKS_EFT_JournalValidate::errorLog(dd_PaymError, _buffer, _enableLog, _amountCur);
                            ttscommit;
                            return false;
                        }
                        if (custDirectDebitMandate.Status == CustMandateStatus::Canceled)
                        {
                            dd_PaymError = strFmt("@SKS6178",_company);
                            SKS_EFT_JournalValidate::errorLog(dd_PaymError, _buffer, _enableLog, _amountCur);
                            ttscommit;
                            return false;
                        }

                        if (custDirectDebitMandate.Status == CustMandateStatus::Expired || _paymDate  > custDirectDebitMandate.ExpirationDate)
                        {
                            dd_PaymError = strFmt("@SKS6179",_company);
                            SKS_EFT_JournalValidate::errorLog(dd_PaymError, _buffer, _enableLog, _amountCur);
                        }


                        if (custDirectDebitMandate.SKS_DD_IsBlocked == NoYes::Yes)
                        {
                            dd_PaymError = strFmt("@SKS6180",_company);
                            SKS_EFT_JournalValidate::errorLog(dd_PaymError, _buffer, _enableLog, _amountCur);                            
                            Error(dd_PaymError);
                        }
                        // SKS_EB_FDD-DD-NETS integration -->
                        // Validation check for mandate scheme b2b
                        if ((custDirectDebitMandate.MandateScheme == CustMandateScheme::B2B
                                && custDirectDebitMandate.SKS_EB_MandateType == SKS_EB_MandateType::Standard)
                                    && (custDirectDebitMandate.Status == CustMandateStatus::Expired
                                        || custDirectDebitMandate.Status == CustMandateStatus::Canceled
                                        || custDirectDebitMandate.Status == CustMandateStatus::Incomplete))
                        {
                            dd_PaymError = strFmt("@SKS:SKGMandateSchemeStatusValidation", custDirectDebitMandate.Status);
                            SKS_EFT_JournalValidate::errorLog(dd_PaymError, _buffer, _enableLog, _amountCur);
                        }

                        // Validation check for mandate scheme core
                        if ((custDirectDebitMandate.MandateScheme == CustMandateScheme::CORE
                                && custDirectDebitMandate.SKS_EB_MandateType == SKS_EB_MandateType::Standard)
                                    && (custDirectDebitMandate.Status == CustMandateStatus::Expired
                                        || custDirectDebitMandate.Status == CustMandateStatus::Canceled
                                        || custDirectDebitMandate.Status == CustMandateStatus::Incomplete))
                        {
                            dd_PaymError = strFmt("@SKS:SKGMandateSchemeStatusValidation", custDirectDebitMandate.Status);
                            SKS_EFT_JournalValidate::errorLog(dd_PaymError, _buffer, _enableLog, _amountCur);
                        }

                        // Validation check for mandate scheme Leverander
                        if ((custDirectDebitMandate.SKS_EB_MandateType == SKS_EB_MandateType::Leverander)
                                && (custDirectDebitMandate.Status == CustMandateStatus::Expired
                                    || custDirectDebitMandate.Status == CustMandateStatus::Canceled
                                    || custDirectDebitMandate.Status == CustMandateStatus::Incomplete))
                        {
                            dd_PaymError = strFmt("@SKS:SKGMandateSchemeStatusValidation", custDirectDebitMandate.Status);
                            SKS_EFT_JournalValidate::errorLog(dd_PaymError, _buffer, _enableLog, _amountCur);
                        }

                        // Validation check for mandate scheme Betalings
                        if ((custDirectDebitMandate.SKS_EB_MandateType == SKS_EB_MandateType::Betalings || custDirectDebitMandate.SKS_EB_MandateType == SKS_EB_MandateType::Auddis) //Ash DevOps#15157
                                && (custDirectDebitMandate.Status == CustMandateStatus::Expired
                                    || custDirectDebitMandate.Status == CustMandateStatus::Canceled
                                    || custDirectDebitMandate.Status == CustMandateStatus::Incomplete))
                        {
                            dd_PaymError = strFmt("@SKS:SKGMandateSchemeStatusValidation", custDirectDebitMandate.Status);
                            SKS_EFT_JournalValidate::errorLog(dd_PaymError, _buffer, _enableLog, _amountCur);
                        }
                        ledgerJournalTrans =  _buffer;
                        sKS_EB_BankTable = SKS_EB_BankTable::find(SKS_PP_Bank::find(custDirectDebitMandate.CreditorBankAccount).BankID);

                        // Validation check for mandate scheme leverander
                        if ((custDirectDebitMandate.SKS_EB_MandateType == SKS_EB_MandateType::Leverander
                               && (custDirectDebitMandate.Status == CustMandateStatus::New
                                    || custDirectDebitMandate.Status == CustMandateStatus::Modified
                                    || custDirectDebitMandate.Status == CustMandateStatus::Active)))
                        {
                            if ((sKS_EB_BankTable.LeverandOrServicePaymMode != _paymMode || sKS_EB_BankTable.LeverandOrServicePaymSpec != ledgerJournalTrans.PaymSpec))
                            {
                                addMessage = true;
                            }
                        }

                        // Validation check for mandate scheme betalings
                        if (custDirectDebitMandate.SKS_EB_MandateType == SKS_EB_MandateType::Betalings
                             && (custDirectDebitMandate.Status == CustMandateStatus::New
                                    || custDirectDebitMandate.Status == CustMandateStatus::Modified
                                    || custDirectDebitMandate.Status == CustMandateStatus::Active))
                        {
                            if ((sKS_EB_BankTable.BetalingsServicePaymMode != _paymMode || sKS_EB_BankTable.BetalingsServicePaymSpec != ledgerJournalTrans.PaymSpec))
                            {
                                addMessage = true;
                            }
                        }

                        // Validation check for mandate scheme betalings total
                        if (custDirectDebitMandate.SKS_EB_MandateType == SKS_EB_MandateType::BetalingsTotal
                             && (custDirectDebitMandate.Status == CustMandateStatus::New
                                    || custDirectDebitMandate.Status == CustMandateStatus::Modified
                                    || custDirectDebitMandate.Status == CustMandateStatus::Active))
                        {
                            if ((sKS_EB_BankTable.BetalingsServiceTotalPaymMode != _paymMode || sKS_EB_BankTable.BetalingsServiceTotalPaymSpec != ledgerJournalTrans.PaymSpec))
                            {
                                addMessage = true;
                            }
                        }
                        if (addMessage)
                        {
                            dd_PaymError = "@SKS:SKGMandateStatusMessage";
                            SKS_EFT_JournalValidate::errorLog(dd_PaymError, _buffer, _enableLog, _amountCur);
                        }
                        // SKS_EB_FDD-DD-NETS integration <--
                    }
                    else
                    {
                        dd_PaymError = strFmt("@SKS6181",_company);
                        SKS_EFT_JournalValidate::errorLog(dd_PaymError, _buffer, _enableLog, _amountCur);
                    }
                    ttscommit;
                }
            }
            //SKS_Bug_8704 -->
        }
        //SKS_Bug_8704 <--

        ttsbegin;
        if (_paymMode != custTable.PaymMode)
        {
            //<Issue21650>
            if(!ledgerJournalTrans)
            {
                ledgerJournalTrans = _buffer;
            }

            if(!SKS_EFT_CustomerPaym::find(custTable.company(), custTable.AccountNum, ledgerJournalTrans.PaymMode, ledgerJournalTrans.PaymSpec, ledgerJournalTrans.CustVendBankAccountId).RecId)
            {
                dd_PaymError = strFmt("@SKS6182",_company);
                SKS_EFT_JournalValidate::errorLog(dd_PaymError, _buffer, _enableLog, _amountCur);
            }
            //</Issue21650>
        }
        ttscommit;

        if(dd_PaymError != '')
        {
            return false;
        }
        else
        {
            return true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertAppliedMandate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Insert applied Mandate
    /// </summary>
    /// <param name = "_ledgerJournalTrans">_ledgerJournalTrans</param>
    /// <param name = "_specTrans">_specTrans</param>
    /// <param name = "_specBalance">_specBalance</param>
    public static void insertAppliedMandate(LedgerJournalTrans _ledgerJournalTrans,SpecTrans _specTrans,AmountCur _specBalance)
    {
        CustDirectDebitMandate              custDirectDebitMandate;
        CustDirectDebitMandate              custDirectDebitMandateExisting;
        SKS_DD_CustVendMandPaymValidate     custVendMandPaymValidate = new SKS_DD_CustVendMandPaymValidate();
        SKS_DD_CustTransMandApplied         custTransMandApplied;
        CustAccount                         custAccount;

        //SKS_Bug_8704 -->
        if(_specTrans.Refcompany)
        {
            //SKS_Bug_8704 <--
            changecompany(_specTrans.Refcompany)
            {
                custTransMandApplied.clear();
                custAccount = LedgerDynamicAccountHelper::getAccountNumberFromDynamicAccount(_ledgerJournalTrans.parmLedgerDimension());

                custDirectDebitMandate = CustDirectDebitMandate::find(CustTable::find(custAccount).DefaultDirectDebitMandate);
                //Sks_Bug_7471 --->
                if(custDirectDebitMandate.Status == CustMandateStatus::Canceled ||
                custDirectDebitMandate.Status    == CustMandateStatus::Expired  ||
                custDirectDebitMandate.Status    == CustMandateStatus::Incomplete)
                {
                    custDirectDebitMandateExisting =  custVendMandPaymValidate.findActiveMandate(custDirectDebitMandate.CustAccount);
                    if(custDirectDebitMandateExisting)
                    {
                        custDirectDebitMandate = custDirectDebitMandateExisting;
                    }
                }
                if (custDirectDebitMandate.SKS_DD_Limitamount && _specTrans.Balance01 > 0)
                {
                    ttsbegin;
                    custTransMandApplied = SKS_DD_CustTransMandApplied::find(custAccount, _ledgerJournalTrans.TransDate,_specTrans.Refcompany, true);
                    custTransMandApplied.AppliedMandateLimit += _specBalance;
                    custTransMandApplied.JournalNum  = _ledgerJournalTrans.JournalNum;
                    custTransMandApplied.PaymentDate = _ledgerJournalTrans.TransDate;
                    custTransMandApplied.company     = _specTrans.Refcompany;
                    custTransMandApplied.CustAccount = custAccount;

                    if (custTransMandApplied.RecId)
                    {
                        custTransMandApplied.update();
                    }
                    else
                    {
                        custTransMandApplied.insert();
                    }
                    ttscommit;
                }
            }
            //SKS_Bug_8704 -->
        }
        //SKS_Bug_8704 <--
    }

]]></Source>
			</Method>
			<Method>
				<Name>Delete_CC_CustPaymTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Used to delete CC payments when related journal line is deleted.
    /// </summary>
    /// <param name = "_ledgerJournalTrans">_ledgerJournalTrans</param>
    private server static void Delete_CC_CustPaymTable(LedgerJournalTrans _ledgerJournalTrans)
    {
        SKS_CC_CustPaymTable custPaymTable;

        delete_from custPaymTable
            where custPaymTable.RefTableId == _ledgerJournalTrans.TableId
               && custPaymTable.RefRecId == _ledgerJournalTrans.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DeleteCCACheck</Name>
				<Source><![CDATA[
    /// <summary>
    /// Used to validate if journal line can be delete when approved CC payments exist.
    /// </summary>
    /// <param name = "_ledgerJournalTrans">Ledger journal trans record</param>
    /// <returns>boolean</returns>
    private server static boolean DeleteCCACheck(LedgerJournalTrans _ledgerJournalTrans)
    {
        boolean ret = true;

        if (SKS_CC_CustPaymTable::hasApprovedCreditCardPayments(_ledgerJournalTrans.TableId, _ledgerJournalTrans.RecId))
        {
            ret = checkFailed(strFmt("@SKS6438", _ledgerJournalTrans.Voucher));
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findIHBReference</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Used to get the IHB reference jouranl line
    /// </summary>
    /// <param name = "_ledgerJournalTransIHBRefRecId">_ledgerJournalTransIHBRefRecId</param>
    /// <param name = "_ledgerTransIHBRefCompany">_ledgerTransIHBRefCompany</param>
    /// <param name = "_foUpdate">_foUpdate</param>
    /// <returns>LedgerJournalTrans</returns>
    public static LedgerJournalTrans findIHBReference(RecId _ledgerJournalTransIHBRefRecId,
        DataAreaId _ledgerTransIHBRefCompany, boolean _foUpdate)
    {
        LedgerJournalTrans ledgerJournalTrans;

        if(_ledgerTransIHBRefCompany)
        {
            changecompany(_ledgerTransIHBRefCompany)
            {
                ledgerJournalTrans = LedgerJournalTrans::findRecId(_ledgerJournalTransIHBRefRecId, _foUpdate);
            }
        }

        return ledgerJournalTrans;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>