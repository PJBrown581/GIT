<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_CCR_ReadParseAdyen</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_CCR_ReadParseAdyen extends SKS_CCR_ReadParseBase
{
    //*********
    //*** do NOT use :CommaStreamIo
    //*** do NOT use :CommaTextStreamIo
    //*** implments a broken fields parse and malfuctions on non-comma separated files(like semi-colon delimited) with empty fields.
    //*** use TextStreamIO this implements it's own classes and will fucntion with any infielddelimiter
    //*** Referce link: https://www.yammer.com/dynamicsaxfeedbackprograms/#/threads/show?threadId=396866031673344
    //*********
    TextStreamIo locTextStreamIO;
    container FieldFormat[];
    int maxFieldFormats;
    str Fields[];
    str Raw_Fields[];

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>GetInboundFile</Name>
				<Source><![CDATA[
    public SKS_CCR_InboundFile GetInboundFile(SKS_EB_FilePathName _FilePathAndName, SKS_BF_BankIntType _SKS_BF_BankIntType)
    {


        this.InitializeFileInfo(_FilePathAndName, _SKS_BF_BankIntType);
        if (!this.openFile())
        {
            return null;
        }

        return this.parseFile();
    }

]]></Source>
			</Method>
			<Method>
				<Name>openFile</Name>
				<Source><![CDATA[
    boolean openFile()
    {
        if (!gSKS_EB_FileHub.attrfileExists())
        {
            throw error((strfmt("@SYS62207",gSKS_EB_FileHub.fileName())));
        }
        gSKS_EB_FileHub.runFileLoad(gSKS_EB_FileHub.getSKS_BF_BankIntType() == SKS_BF_BankIntType::FileHubLocal ? gSKS_EB_FileHub.fileName() : strFmt(@'%1\%2', gSKS_EB_FileHub.getBFFilePath(),gSKS_EB_FileHub.fileName())
                                    ,gBRPreReadScript,gBRPreReadScriptParams
                                    ,gBRPostReadScript
                                    ,gBRPostReadScriptParams);
        gSKS_EB_FileHub.streamInit();
        locTextStreamIO = TextStreamIo::constructForRead(gSKS_EB_FileHub.streamGet());
        if (locTextStreamIO)
        {
            locTextStreamIO.inFieldDelimiter(',');
            locTextStreamIO.inRecordDelimiter('\n');
        }
        if (!locTextStreamIO || locTextStreamIO.status() != IO_Status::Ok )
        {
            //file could not be opened
            throw error((strfmt("@SYS19312",gSKS_EB_FileHub.fileName())));
        }
        
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parseFile</Name>
				<Source><![CDATA[
    protected SKS_CCR_InboundFile parseFile()
    {
        str notes;
        str firstrecord;
        CommaStreamIo locCommaIo;
        boolean first = true;
        str transType;
        container locRecord;
        str currentStmtnum;
        str prevStmtnum;
        str prevdate;
        str prevacctnum;
        str prevBatchnum;
        if (!this.openFile())
        {
            return null;
        }

        gSKS_EB_FileHub.StreamInit();
        locCommaIo = CommaStreamIo::ConstructForRead(gSKS_EB_FileHub.StreamGet());
        locCommaIo.inFieldDelimiter(',');
        locCommaIo.inRecordDelimiter('\n');

        while(locCommaIo.status() == IO_Status::Ok)
        {
            locRecord = locCommaIo.read();
            firstrecord = strLRTrim(conPeek(locRecord, 1));
            if(firstrecord != 'Company Account')
            {
                if(conLen(locRecord) > 0)
                {                   

                    currentStmtnum = strLRTrim(conPeek(locRecord, 23)) + strLRTrim(conPeek(locRecord, 2));

                    if(currentStmtnum != prevStmtnum && !first)
                    {
                        gSKS_CCR_InboundStmt.SetDate(prevdate);
                        gSKS_CCR_InboundStmt.SetNbr(prevBatchnum);
                        gSKS_CCR_InboundStmt.SetAccount(prevacctnum);
                        gSKS_CCR_InboundFile.PushStmt(gSKS_CCR_InboundStmt);
                        gSKS_CCR_InboundStmt = null;
                        gSKS_CCR_InboundStmt = new SKS_CCR_InboundStmt();
                        gSKS_CCR_InboundStmt.SetDate(SKS_PP_StringFormats::strDateYYYYMMDD(this.str2date(strLRTrim(conPeek(locRecord, 6)) ,this.getDateFormat())));
                        gSKS_CCR_InboundStmt.SetNbr(strLRTrim(conPeek(locRecord, 23)));
                        gSKS_CCR_InboundStmt.SetAccount(strLRTrim(conPeek(locRecord, 2)));
                    }
                    else if(currentStmtnum == prevStmtnum)
                    {
                        gSKS_CCR_InboundStmt.SetDate(SKS_PP_StringFormats::strDateYYYYMMDD(this.str2date(strLRTrim(conPeek(locRecord, 6)) ,this.getDateFormat())));
                        gSKS_CCR_InboundStmt.SetNbr(strLRTrim(conPeek(locRecord, 23)));
                        gSKS_CCR_InboundStmt.SetAccount(strLRTrim(conPeek(locRecord, 2)));
                    }
                    else
                    {
                        gSKS_CCR_InboundFile = new SKS_CCR_InboundFile();

                        gSKS_CCR_InboundStmt = new SKS_CCR_InboundStmt();

                        gSKS_CCR_InboundStmt.SetDate(SKS_PP_StringFormats::strDateYYYYMMDD(this.str2date(strLRTrim(conPeek(locRecord, 6)) ,this.getDateFormat())));
                        if(gSKS_CCR_InboundStmt.GetDate() == dateNull())
                        {
                            Error(strFmt("@SKS:SKGCcrAdyenDateFmtDoesNotMatchFileDate", enum2Str(gSKS_BR_FileFormat.CCR_Adyen_DateFormatInFiles), strLRTrim(conPeek(locRecord, 6))));
                        }
                        gSKS_CCR_InboundStmt.SetNbr(strLRTrim(conPeek(locRecord, 23)));
                        gSKS_CCR_InboundStmt.SetAccount(strLRTrim(conPeek(locRecord, 2)));

                        first = false;
                    }

                    prevStmtnum = strLRTrim(conPeek(locRecord, 23)) + strLRTrim(conPeek(locRecord, 2));
                    prevdate = SKS_PP_StringFormats::strDateYYYYMMDD(this.str2date(strLRTrim(conPeek(locRecord, 6)) ,this.getDateFormat()));
                    prevacctnum = strLRTrim(conPeek(locRecord, 2));
                    prevBatchnum = strLRTrim(conPeek(locRecord, 23));

                    if(!gSKS_CCR_InboundTran)
                        gSKS_CCR_InboundTran = new SKS_CCR_InboundTran();

                    gSKS_CCR_InboundTran.SetDate(SKS_PP_StringFormats::strDateYYYYMMDD(this.str2date(strLRTrim(conPeek(locRecord, 6)) ,this.getDateFormat())));

                    transType = strLRTrim(conPeek(locRecord, 8));
                    gSKS_CCR_InboundTran.SetTranType(transType);
                    gSKS_CCR_InboundTran.SetBankRefNbr(strLRTrim(conPeek(locRecord, 3)));
                    gSKS_CCR_InboundTran.SetCustRefNbr(strLRTrim(conPeek(locRecord, 4)));
                    notes = "@SKS:SKGCCRAdyenMerchantRef" + strLRTrim(conPeek(locRecord, 4)) + ' ' + "@SKS:SKGCCRAdyenPaymMtd" + strLRTrim(conPeek(locRecord, 5));
                    gSKS_CCR_InboundTran.SetDesc(notes);
                    gSKS_CCR_InboundTran.setImportAsPositive(true);
                    if (transType == "@SKS:SKGCCRAdyenMerchantPayout" || transType == "@SKS:SKGCCRAdyenBalanceTransfer" || transType == "@SKS:SKGCCRAdyenBankInstReturn" ||
                        transType == "@SKS:SKGCCRAdyenDepositCorrection" || transType == "@SKS:SKGCCRAdyenFee" || transType == "@SKS:SKGCCRAdyenInvoiceDeduction" ||
                        transType == "@SKS:SKGCCRAdyenManualCorrected" || transType == "@SKS:SKGCCRAdyenPaymentCost" || transType == "@SKS:SKGCCRAdyenReserveAdjustment")
                    {
                        gSKS_CCR_InboundTran.SetCurrency(strLRTrim(conPeek(locRecord, 14)));
                        gSKS_CCR_InboundTran.SetAmt((SKS_PP_StringFormats::CurrStr2CurrNum(strLRTrim(conPeek(locRecord, 16)))) - (SKS_PP_StringFormats::CurrStr2CurrNum(strLRTrim(conPeek(locRecord, 15)))));
                    }
                    else
                    {
                        gSKS_CCR_InboundTran.SetCurrency(strLRTrim(conPeek(locRecord, 10)));
                        gSKS_CCR_InboundTran.SetAmt((SKS_PP_StringFormats::CurrStr2CurrNum(strLRTrim(conPeek(locRecord, 12)))) - (SKS_PP_StringFormats::CurrStr2CurrNum(strLRTrim(conPeek(locRecord, 11)))));
                    }
                    gSKS_CCR_InboundTran.addToFeeSum((SKS_PP_StringFormats::CurrStr2CurrNum(strLRTrim(conPeek(locRecord, 17))) + (SKS_PP_StringFormats::CurrStr2CurrNum(strLRTrim(conPeek(locRecord, 19)))) + (SKS_PP_StringFormats::CurrStr2CurrNum(strLRTrim(conPeek(locRecord, 20)))) ));
                    gSKS_CCR_InboundTran.addToMarkupSum(SKS_PP_StringFormats::CurrStr2CurrNum(strLRTrim(conPeek(locRecord, 18))));
                    gSKS_CCR_InboundStmt.PushTrans(gSKS_CCR_InboundTran);
                    gSKS_CCR_InboundTran = null;
                    //gSKS_CCR_InboundStmt = null;
                }
            }
        }


        this.closeFile();

        if(gSKS_CCR_InboundStmt)
        {
            gSKS_CCR_InboundFile.PushStmt(gSKS_CCR_InboundStmt);
            gSKS_CCR_InboundStmt = null;
        }

        return gSKS_CCR_InboundFile;
    }

]]></Source>
			</Method>
			<Method>
				<Name>closeFile</Name>
				<Source><![CDATA[
    void closeFile()
    {
        if(locTextStreamIO)
        {
            locTextStreamIO.finalize();
            locTextStreamIO = null;
            gSKS_EB_fileHub.streamClose();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDateFormat</Name>
				<Source><![CDATA[
    /// <summary>
    /// method checks the SKS_BR_FileFormat for the proper formatting of dates in the Adyen file format.
    /// </summary>
    /// <returns>The three digit integer representing the date format DMY(123) MDY(213) YMD(321)</returns>
    private int getDateFormat()
    {
        int rtnval;
        switch(gSKS_BR_FileFormat.CCR_Adyen_DateFormatInFiles)
        {
            case SKS_EB_DateFormat::DMY:
                rtnval = 123;
                break;
            case SKS_EB_DateFormat::MDY:
                rtnval = 213;
                break;
            default:
                rtnval = 321;
        }
        return rtnval;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>