<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_US_PNC_XML</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_US_PNC_XML extends SKS_EFT_Format_EU_SEPA_CREDIT
/// </summary>
class SKS_EFT_Format_US_PNC_XML extends SKS_EFT_Format_EU_SEPA_CREDIT
{
    //------------------------------------------------------------------------------------------------------
    /// <summary>
    /// This is extending the SEPA_Credit Format
    /// </summary>
    //------------------------------------------------------------------------------------------------------
    #define.FormatVersion('20221107')
    #define.CHK('CHK')
    #define.FWT('FWT')
    #define.BOP('BOP')
    #define.CCD('ACH-CCD')
    #define.PPD('ACH-PPD')
    #define.CTX('ACH-CTX')

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceJournalDocumentDate</Name>
				<Source><![CDATA[
    private date getInvoiceJournalDocumentDate(SKS_EFT_FileDetail _invSKS_EFT_FileDetail)
    {
        LedgerJournalTrans ledgerJournalTrans;
    
        select crossCompany DocumentDate from ledgerJournalTrans where
            ledgerJournalTrans.VendTransId == _invSKS_EFT_FileDetail.VendTransRecId;
    
        if(!ledgerJournalTrans.DocumentDate)
        {
            return _invSKS_EFT_FileDetail.InvoiceDate;
        }
        else
        {
            return ledgerJournalTrans.DocumentDate;
        }
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf()
    {
        //------------------------------------------------------------------------------------------------------
        //      2.27: CdtTrfTxInf
        //          2.28: PmtId
        //              2.30: EndToEndId
        //          2.31 PmtTpInf
        //              LclInstrm
        //                  Cd
        //          2.42: Amt
        //              2.43: InstdAmt
        //          2.51: ChrgBr
        //          2.52 ChqInstr
        //          2.77: CdtrAgt
        //              FinInstnId
        //                  BIC
        //          2.79: Cdtr
        //              Nm
        //          2.80: CdtrAcct
        //              Id
        //                  IBAN
        //          2.98: RmtInf
        //              2.99: Ustrd
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeCdtTrfTxInf;
    
        //      2.27: CdtTrfTxInf
        nodeCdtTrfTxInf = nodePmtInf.appendChild(xmlDoc.createElement('CdtTrfTxInf'));
    
        //          2.28: PmtId
        this.node_CdtTrfTxInf_PmtId(nodeCdtTrfTxInf);
    
        //          2.31 PmtTpInf
        this.node_CdtTrfTxInf_PmtInf_PmtTpInf(nodeCdtTrfTxInf);
    
        //          2.42: Amt
        this.node_CdtTrfTxInf_Amt(nodeCdtTrfTxInf);
    
        //          2.52 ChqInstr
        if(mSKS_EFT_FileFormatPaymSpec.UseCheckNumber == NoYes::Yes || subStr(mSKS_EFT_FileDetail.PaymSpec, 1, 3) == 'CHK')
        {
            this.node_CdtTrfTxInf_ChqInstr(nodeCdtTrfTxInf);
        }
    
        //          2.71: IntrmyAgt1
        if((mSKS_EFT_VendorPaym.WIntBankSwift != '' || mSKS_EFT_VendorPaym.WIntBankId != '') &&
           (mSKS_EFT_FileFormatPaymSpec.TransactionCode == #BOP || mSKS_EFT_FileFormatPaymSpec.TransactionCode == #FWT))
        {
            this.node_CdtTrfTxInf_IntrmyAgt1(nodeCdtTrfTxInf);
        }
    
        //          2.77: CdtrAgt
        if(mSKS_EFT_FileFormatPaymSpec.UseCheckNumber == NoYes::No &&
                                       subStr(mSKS_EFT_FileFormatPaymSpec.TransactionCode, 1, 3) != 'CHK')
        {
            this.node_CdtTrfTxInf_CdtrAgt(nodeCdtTrfTxInf);
        }
    
        //          2.79: Cdtr
        this.node_CdtTrfTxInf_Cdtr(nodeCdtTrfTxInf);
    
        //          2.80: CdtrAcct
        this.node_CdtTrfTxInf_CdtrAcct(nodeCdtTrfTxInf);
    
        //          2.98: RmtInf
        this.node_CdtTrfTxInf_RmtInf(nodeCdtTrfTxInf);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_Cdtr</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_Cdtr(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.79: Cdtr
        //              Nm
        //              PstlAdr
        //              Id
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeCdtr;
    
        //          2.79: Cdtr
        nodeCdtr = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('Cdtr'));
    
        //              Nm
        this.node_CdtTrfTxInf_Cdtr_Nm(nodeCdtr);
    
        //              PstlAdr
        this.node_CdtTrfTxInf_Cdtr_PstlAdr(nodeCdtr);

        //              Id
        this.node_PmtInf_Cdtr_Id(nodeCdtr);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_Cdtr_Id</Name>
				<Source><![CDATA[
    protected void node_PmtInf_Cdtr_Id(XmlElement _nodeCdtr)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.79: Cdtr
        //          Id
        //              OrgId
        //                  Othr
        //                      Id
        //                      SchemeName
        //------------------------------------------------------------------------------------------------------

        XmlElement nodeId;
        XmlElement nodeOrgPvtId;
        XmlElement nodeOthr;
        XmlElement nodeSchmeNm;

        if(mSKS_EFT_Filedetail.AccountNum != '' && (mSKS_EFT_FileFormatPaymSpec.TransactionCode== #CHK || mSKS_EFT_FileFormatPaymSpec.TransactionCode== #CCD ||
            mSKS_EFT_FileFormatPaymSpec.TransactionCode== #PPD || mSKS_EFT_FileFormatPaymSpec.TransactionCode== #CTX))
        {
            //          Id
            nodeId = _nodeCdtr.appendChild(xmlDoc.createElement('Id'));

            nodeOrgPvtId = nodeId.appendChild(xmlDoc.createElement('OrgId'));

            nodeOthr = nodeOrgPvtId.appendChild(xmlDoc.createElement('Othr'));

            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeOthr, 'Id', mSKS_EFT_Filedetail.AccountNum);

            //                          SchmeNm
            nodeSchmeNm = nodeOthr.appendChild(xmlDoc.createElement('SchmeNm'));            //SKS#DevOps:17356
    
            //                      Prtry
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeSchmeNm, 'Prtry', 'VN');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_Cdtr_Nm</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_Cdtr_Nm(XmlElement _nodeCdtr)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.79: Cdtr
        //              Nm
        //------------------------------------------------------------------------------------------------------
        LogisticsPostalAddress  postalAddress;
      
        str value = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('UseCdtrAddressPurpose', mSKS_EFT_FileDetail.RecId));//DevOps19641
    
        postalAddress = this.findPostalAddressLineByPartyLocationRole(VendTable::findByCompany(mSKS_EFT_FileDetail.AccountCompany, mSKS_EFT_FileDetail.AccountNum).Party, value);//DevOps19641
        
        //              Nm
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CTX)
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeCdtr, 'Nm', mRemittanceName, 16);
        }
        else if(postalAddress && mSKS_EFT_FileFormatPaymSpec.TransactionCode=='CHK')
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeCdtr, 'Nm', LogisticsLocation::find(postalAddress.Location).description, 70,false);
        }
        else
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeCdtr, 'Nm', mRemittanceName, 70);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_Cdtr_PstlAdr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creditor Postal Address
    /// </summary>
    /// <param name = "_nodeCdtr">Cdtr_PstlAd</param>
    protected void node_CdtTrfTxInf_Cdtr_PstlAdr(XmlElement _nodeCdtr)
    {
        //------------------------------------------------------------------------------------------------------
        //      PstlAdr
        //          PstCd
        //          TwnNm
        //          CtrySubDvsn
        //          Ctry
        //          AdrLine
        //          AdrLine2
        //------------------------------------------------------------------------------------------------------
        XmlElement nodePstlAdr;
        LogisticsPostalAddress  postalAddress;
      
        str value = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('UseCdtrAddressPurpose', mSKS_EFT_FileDetail.RecId));//DevOps19641
    
        postalAddress = this.findPostalAddressLineByPartyLocationRole(VendTable::findByCompany(mSKS_EFT_FileDetail.AccountCompany, mSKS_EFT_FileDetail.AccountNum).Party, value);//DevOps19641
        if(postalAddress && mSKS_EFT_FileFormatPaymSpec.TransactionCode=='CHK')
        {
            //      PstlAdr
            nodePstlAdr = _nodeCdtr.appendChild(xmlDoc.createElement('PstlAdr'));
    
            if(postalAddress.ZipCode)
            {
                //          PstCd
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePstlAdr, 'PstCd', strRem(postalAddress.ZipCode,'-'), 16, false);
            }
            if(postalAddress.City)
            {
                //          TwnNm
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePstlAdr, 'TwnNm', postalAddress.City, 27, false);
            }
            if(postalAddress.State)
            {
                //          CtrySubDvsn
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePstlAdr, 'CtrySubDvsn', postalAddress.State, 3, false);
            }
            if(postalAddress.CountryRegionId)
            {
                //          Ctry
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePstlAdr, 'Ctry', postalAddress.CountryRegionId, 2, false);
            }
            if(postalAddress.Address)
            {
                //          AdrLine
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePstlAdr, 'AdrLine', postalAddress.Address, 35, false);
            }
        }
    
        else if(mSKS_EFT_FileFormatPaymSpec.TransactionCode != #BOP || mSKS_EFT_FileFormatPaymSpec.TransactionCode != #FWT)
        {
            if(mRemittanceZipCode != '' ||
               mRemittanceCity != '' ||
               mRemittanceState != '' ||
               mRemittanceCountryRegionId != '' ||
               mRemittanceAdrLine1 != '' ||
               mRemittanceAdrLine2 != '')
            {
                //      PstlAdr
                nodePstlAdr = _nodeCdtr.appendChild(xmlDoc.createElement('PstlAdr'));
    
                if(mRemittanceZipCode)
                {
                    //          PstCd
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePstlAdr, 'PstCd', mRemittanceZipCode, 16, false);
                }
                if(mRemittanceCity)
                {
                    //          TwnNm
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePstlAdr, 'TwnNm', mRemittanceCity, 35, false);
                }
                if(mRemittanceState)
                {
                    //          CtrySubDvsn
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePstlAdr, 'CtrySubDvsn', mRemittanceState, 35, false);
                }
                if(mRemittanceCountryRegionId && mSKS_EFT_FileFormatPaymSpec.TransactionCode != #CTX)
                {
                    //          Ctry
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePstlAdr, 'Ctry', mRemittanceCountryRegionId, 2, false);
                }
                if(mRemittanceAdrLine1)
                {
                    //          AdrLine
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePstlAdr, 'AdrLine', mRemittanceAdrLine1, 35, false);
                }
                if(mRemittanceAdrLine2)
                {
                    //          AdrLine 2
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePstlAdr, 'AdrLine', mRemittanceAdrLine2, 35, false);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_CdtrAcct</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_CdtrAcct(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.80: CdtrAcct
        //              Id
        //                  Othr
        //                  Id
        //              Tp/Ptry
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeCdtrAcct;
        XmlElement nodeCdtrAcctId;
        XmlElement nodeCdtrAcctIdOthr;
        XmlElement nodeCdtrAcctTp;
        str value;
    
        if(mSKS_EFT_FileFormatPaymSpec.UseCheckNumber == NoYes::No && subStr(mSKS_EFT_FileDetail.PaymSpec, 1, 3) != 'CHK')
        {
            //          2.80: CdtrAcct
            nodeCdtrAcct = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('CdtrAcct'));
    
            //              Id
            nodeCdtrAcctId = nodeCdtrAcct.appendChild(xmlDoc.createElement('Id'));
    
            if(mSKS_EFT_FileDetail.DepBankIBAN != '' && mSKS_EFT_FileFormatPaymSpec.TransactionCode == #BOP)
            {
                //                  IBAN
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdtrAcctId, 'IBAN', mSKS_EFT_FileDetail.DepBankIBAN);
            }
            else
            {
                if(strLen(mSKS_EFT_FileDetail.DepBankAcct) > 17)
                {
                    //Requested by PNC as a work around for overlong Account numbers.
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdtrAcctId, 'IBAN', mSKS_EFT_FileDetail.DepBankAcct);
                }
                else
                {
                    //                  Othr
                    nodeCdtrAcctIdOthr = nodeCdtrAcctId.appendChild(xmlDoc.createElement('Othr'));
    
                    //                      Id
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdtrAcctIdOthr, 'Id', mSKS_EFT_FileDetail.DepBankAcct);
                }
            }
    
            //              Tp
            //                  Cd/Ptry
            if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CCD || 
               mSKS_EFT_FileFormatPaymSpec.TransactionCode == #PPD ||
               mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CTX)
            {
                if(mSKS_EFT_FileDetail.BankAcctType == BankAccountType::CheckingAccount) // Checking
                {
                    if (mSKS_EFT_FileDetail.RecordType == SKS_EFT_RecordType::PreNote)
                    {
                        value = '23'; // checking/credit/prenote
                    }
                    else
                    {
                        value = '22'; // checking/credit/regular
                    }
                }
                else if(mSKS_EFT_FileDetail.BankAcctType) // Savings
                {
                    if(mSKS_EFT_FileDetail.RecordType == SKS_EFT_RecordType::PreNote)
                    {
                        value = '33'; // savings/credit/prenote
                    }
                    else
                    {
                        value = '32'; // savings/credit/regular
                    }
                }
    
                nodeCdtrAcctTp = nodeCdtrAcct.appendChild(xmlDoc.createElement('Tp'));
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdtrAcctTp, 'Prtry', value);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_CdtrAgt</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_CdtrAgt(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.77: CdtrAgt
        //              FinInstnId
        //                  BIC
        //                  ClrSysMmbId
        //                  PstlAdr
        //              BrnchId
        //                  Id
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeCdtrAgt;
        XmlElement nodeFinInstnId;
        XmlElement nodePstlAdr;
    
        //          2.77: CdtrAgt
        nodeCdtrAgt = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('CdtrAgt'));
    
        //              FinInstnId
        nodeFinInstnId = nodeCdtrAgt.appendChild(xmlDoc.createElement('FinInstnId'));
    
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #BOP)
        {
            //                  BIC
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeFinInstnId, 'BIC', mSKS_EFT_FileDetail.DepSwiftNo, 0, false);
        }
        else
        {
            //                  ClrSysMmbId
            this.node_CdtTrfTxInf_CdtrAgt_MmbId(nodeFinInstnId);
        }
    
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #FWT || mSKS_EFT_FileFormatPaymSpec.TransactionCode == #BOP)
        {
            //              Nm
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeFinInstnId, 'Nm', this.CharacterReplacement(mSKS_EFT_VendorPaym.WBenBankName));
    
        }
    
        if(mSKS_EFT_VendorPaym.WBenBankCity || mSKS_EFT_VendorPaym.WBenBankAddr)
        {
            //      PstlAdr
            nodePstlAdr = nodeFinInstnId.appendChild(xmlDoc.createElement('PstlAdr'));
    
            if(mSKS_EFT_VendorPaym.WBenBankCity)
            {
                //          TwnNm
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePstlAdr, 'TwnNm', this.CharacterReplacement(mSKS_EFT_VendorPaym.WBenBankCity), 35, false);
            }
            if(mSKS_EFT_VendorPaym.WBenBankAddr)
            {
                //          AdrLine
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePstlAdr, 'AdrLine', this.CharacterReplacement(mSKS_EFT_VendorPaym.WBenBankAddr), 35, false);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_CdtrAgt_MmbId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creditor Agent 
    /// </summary>
    /// <param name = "_nodeFinInstnId">CdtrAgt_MmbId</param>
    protected void node_CdtTrfTxInf_CdtrAgt_MmbId(XmlElement _nodeFinInstnId)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.77: CdtrAgent
        //          MmbId
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeClrSysMmbId;
    
        if(mSKS_EFT_FileDetail.DepBankTransit != '')
        {
            nodeClrSysMmbId = _nodeFinInstnId.appendChild(xmlDoc.createElement('ClrSysMmbId'));
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeClrSysMmbId, 'MmbId', mSKS_EFT_FileDetail.DepBankTransit, 0, false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_ChqInstr</Name>
				<Source><![CDATA[
    //          2.52 ChqInstr
    //              2.54 ChqNb
    //          2.58 DlvryMtd
    //              2.60: Prtry
    //          2.61 DlvrTo
    //              2.62 Name
    //              2.63 Address
    //                  PstCd
    //                  TwnNm
    protected void node_CdtTrfTxInf_ChqInstr(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //                  CtrySubDvsn
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeChqInstr;
        XmlElement nodeDlvryMtd;
        XmlElement nodeDlvryTo;
        XmlElement nodePstlAdr;
        XmlElement nodeAdr;
        str MailInstr;
        str ChqNb;
        LogisticsPostalAddress  postalAddress;
    
        //          2.52 ChqInstr
        nodeChqInstr = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('ChqInstr'));
    
        //              2.54 ChqNb
        if(mSKS_EFT_FileFormatPaymSpec.UseCheckNumber)
        {
            ChqNb = mSKS_EFT_FileDetail.PaymentReference;
        }
        else
        {
            ChqNb = SKS_PP_StringFormats::strFill(10, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Right);
        }
    
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeChqInstr, 'ChqNb', ChqNb, 0, false);
    
        //          2.58 DlvryMtd
        nodeDlvryMtd = nodeChqInstr.appendChild(xmlDoc.createElement('DlvryMtd'));
    
        //              2.60: Prtry
        MailInstr = SKS_EFT_Format::getCodelookupvalue('DlvryMtd', mSKS_EFT_FileDetail.RecId);
    
        if(MailInstr == 'BM')
        {
            MailInstr += this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('AddrCd', mSKS_EFT_FileDetail.RecId));
        }
        if(MailInstr == '')
        {
            MailInstr = 'UM';           //SKS#DevOps:17046
        }
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeDlvryMtd, 'Prtry', MailInstr, 0, false);

        str value = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('UseCdtrAddressPurpose', mSKS_EFT_FileDetail.RecId));//DevOps19641
    
        postalAddress = this.findPostalAddressLineByPartyLocationRole(VendTable::findByCompany(mSKS_EFT_FileDetail.AccountCompany, mSKS_EFT_FileDetail.AccountNum).Party, value);//DevOps19641
        if(postalAddress)//DevOps19641
        {
            //              2.61 DlvrTo
            nodeDlvryTo = nodeChqInstr.appendChild(xmlDoc.createElement('DlvrTo'));

            //              2.62 Nm
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeDlvryTo, 'Nm', this.CharacterReplacement(mRemittanceName));
            //              2.63 Adr
            nodeAdr = nodeDlvryTo.appendChild(xmlDoc.createElement('Adr'));

            
            if(mRemittanceZipCode != '' ||
               mRemittanceCity != '' ||
               mRemittanceState != '' ||
               mRemittanceAdrLine1 != '' ||
               mRemittanceAdrLine2 != '')
            {
                //      PstlAdr
                nodePstlAdr = nodeAdr.appendChild(xmlDoc.createElement('PstlAdr'));
    
                if(mRemittanceZipCode)
                {
                    //          PstCd
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePstlAdr, 'PstCd', strRem(mRemittanceZipCode,'-'), 16, false);
                }
                if(mRemittanceCity)
                {
                    //          TwnNm
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePstlAdr, 'TwnNm', mRemittanceCity, 27, false);
                }
                if(mRemittanceState)
                {
                    //          CtrySubDvsn
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePstlAdr, 'CtrySubDvsn', mRemittanceState, 2, false);
                }
                if(mRemittanceAdrLine1)
                {
                    //          AdrLine
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePstlAdr, 'AdrLine', mRemittanceAdrLine1, 35, false);
                }
                if(mRemittanceAdrLine2)
                {
                    //          AdrLine 2
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePstlAdr, 'AdrLine', mRemittanceAdrLine2, 35, false);
                }
            }
        } 
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPostalAddressLineByPartyLocationRole</Name>
				<Source><![CDATA[
    /// <summary>
    /// findPostalAddressLineByPartyLocationRole
    /// </summary>
    /// <param name = "_party">_party</param>
    /// <param name = "_roleName">_roleName</param>
    /// <returns>LogisticsPostalAddress</returns>
    protected LogisticsPostalAddress findPostalAddressLineByPartyLocationRole(
        DirPartyRecId   _party,
        LogisticsLocationRoleName   _roleName)
    {
        DirPartyLocation        partyLocation;
        LogisticsLocation       logisticsLocation;
        LogisticsPostalAddress  postalAddress;
    
        while select partyLocation
            where partyLocation.Party == _party
        {
            if(strScan(partyLocation.locationRoleNames(),_roleName,1,strLen(partyLocation.locationRoleNames())))
            {
                logisticsLocation = logisticsLocation::find(partyLocation.Location);
                if(logisticsLocation.IsPostalAddress)
                {
                    postalAddress = LogisticsPostalAddress::findByLocation(logisticsLocation.RecId);
                    break;
                }
            }
        }
    
        return postalAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_IntrmyAgt1</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_IntrmyAgt1(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.71: IntrmyAgt1
        //              FinInstnId
        //                  BIC
        //                  ClrSysMmbId
        //                  Nm
        //                  PstlAdr
        //              BrnchId
        //                  Id
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeIntrmyAgt1;
        XmlElement nodeFinInstnId;
        XmlElement nodeClrSysMmbId;
    
        //          2.71: IntrmyAgt1
        nodeIntrmyAgt1 = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('IntrmyAgt1'));
    
        //              FinInstnId
        nodeFinInstnId = nodeIntrmyAgt1.appendChild(xmlDoc.createElement('FinInstnId'));
    
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #BOP && mSKS_EFT_VendorPaym.WIntBankSwift != '')
        {
            //                  BIC
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeFinInstnId, 'BIC', mSKS_EFT_VendorPaym.WIntBankSwift, 0, false);
        }
    
        //                  ClrSysMmbId
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #FWT && mSKS_EFT_VendorPaym.WIntBankId != '')
        {
    
            nodeClrSysMmbId = nodeFinInstnId.appendChild(xmlDoc.createElement('ClrSysMmbId'));
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeClrSysMmbId, 'MmbId', mSKS_EFT_VendorPaym.WIntBankId, 0, false);
        }
    
        if(mSKS_EFT_VendorPaym.WIntBankName != '')
        {
            //                  Nm
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeFinInstnId, 'Nm', this.CharacterReplacement(mSKS_EFT_VendorPaym.WIntBankName), 0, false);
        }
    
        //                  PstlAdr
        this.node_PstlAdr(nodeFinInstnId, this.getLogisticsAddressCountryISO(mSKS_EFT_VendorPaym.WIntBankCountryRegionId), mSKS_EFT_VendorPaym.WIntBankAddr + '' + mSKS_EFT_VendorPaym.WIntBankAddr2, '', mSKS_EFT_VendorPaym.WIntBankCity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_PmtInf_PmtTpInf</Name>
				<Source><![CDATA[
    /// <summary>
    /// PmtTpInf
    /// </summary>
    /// <param name = "_nodePmtInf">PmtTpInf</param>
    protected void node_CdtTrfTxInf_PmtInf_PmtTpInf(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.31: PmtTpInf
        //          2.36: LclInstrm
        //              2.37: Cd
        //          2.39 CtgyPurp
        //              2.41: Prtry
        //------------------------------------------------------------------------------------------------------
        XmlElement nodePmftTpInf;
        XmlElement nodeLclInstrm;
        XmlElement nodeCtgyPurp;
        str value;
    
        nodePmftTpInf = _nodePmtInf.appendChild(xmlDoc.createElement('PmtTpInf'));

        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #PPD:
                value = 'PPD';
                break;
            case #CCD:
                value = 'CCD';
                break;
            case #CTX:
                value = 'CTX';
                break;
            default:
                value = '';
                break;
        }
    
        if(value != '')
        {
            //              LclInstrm
            nodeLclInstrm = nodePmftTpInf.appendChild(xmlDoc.createElement('LclInstrm'));
    
            //                  Cd
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeLclInstrm, 'Cd', value, 0, false);
    
            value = '';
        }
    
        if(mSKS_EFT_FileFormatPaymSpec.UseCheckNumber || subStr(mSKS_EFT_FileDetail.PaymSpec, 1, 3) == 'CHK')
        {
            //          2.39 CtgyPurp
            nodeCtgyPurp = nodePmftTpInf.appendChild(xmlDoc.createElement('CtgyPurp'));
    
            //                  Prtry
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCtgyPurp, 'Prtry', 'X', 0, false);
        }
        else if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #FWT)
        {
            value = 'FWT';
        }
        else if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #BOP)
        {
            value = 'BOP';
        }
    
        if(value != '')
        {
            //          2.39: CtgyPurp
            nodeCtgyPurp = nodePmftTpInf.appendChild(xmlDoc.createElement('CtgyPurp'));
    
            //              2.41: Prtry
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCtgyPurp, 'Prtry', value, 0, false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_RmtInf</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_RmtInf(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.98: RmtInf
        //              2.99: Strd
        //                  2.101: RfrdDocInf
        //                      2.107: Number
        //                      2.108: RltdDt
        //                  2.109 RfrdDocAmt
        //                  2.129: AddtlRmtInf
        //------------------------------------------------------------------------------------------------------
        SKS_EFT_FileDetail invSKS_EFT_FileDetail;
        XmlElement nodeRmtInf;
        XmlElement nodeStrd;
        Boolean firstRec = true;
    
        while select invSKS_EFT_FileDetail where invSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId
        {
            if(invSKS_EFT_FileDetail.InvoiceNumber != '' ||
              (mSKS_EFT_FileFormatPaymSpec.UseCheckNumber == NoYes::Yes || subStr(mSKS_EFT_FileDetail.PaymSpec, 1, 3) == 'CHK') ||
              (mSKS_EFT_VendorPaym.WPmtInstText1 != '' || mSKS_EFT_VendorPaym.WPmtInstText2 != '' ||
               mSKS_EFT_VendorPaym.WPmtInstText3 != '' || mSKS_EFT_VendorPaym.WPmtInstText4 != ''))
            {
                if(firstRec)
                {
                    //          2.98: RmtInf
                    nodeRmtInf = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('RmtInf'));
                    firstRec = false;
                }
    
                //              2.100: Strd
                nodeStrd = nodeRmtInf.appendChild(xmlDoc.createElement('Strd'));
    
                this.node_CdtTrfTxInf_RmtInf_RfrdDocInf(nodeStrd, invSKS_EFT_FileDetail);
                
                if(mSKS_EFT_FileFormatPaymSpec.TransactionCode != #CTX)
                {
                    //              2.129: AddtlRmtInf
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeStrd, 'AddtlRmtInf', this.CharacterReplacement(mSKS_EFT_VendorPaym.WPmtInstText1), 0, false);
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeStrd, 'AddtlRmtInf', this.CharacterReplacement(mSKS_EFT_VendorPaym.WPmtInstText2), 0, false);
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeStrd, 'AddtlRmtInf', this.CharacterReplacement(mSKS_EFT_VendorPaym.WPmtInstText3), 0, false);
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeStrd, 'AddtlRmtInf', this.CharacterReplacement(mSKS_EFT_VendorPaym.WPmtInstText4), 0, false);
                }    
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_RmtInf_RfrdDocInf</Name>
				<Source><![CDATA[
    /// <summary>
    /// RfrdDocInf
    /// </summary>
    /// <param name = "_nodeStrd">nodeStrd</param>
    /// <param name = "_invSKS_EFT_FileDetail">invSKS_EFT_FileDetail</param>
    protected void node_CdtTrfTxInf_RmtInf_RfrdDocInf(XmlElement _nodeStrd, SKS_EFT_FileDetail _invSKS_EFT_FileDetail)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.98: RmtInf
        //              2.99: Strd
        //                  2.101: RfrdDocInf
        //                      2.107: Number
        //                      2.108: RltdDt
        //                  2.109 RfrdDocAmt
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeRfrdDocInf;
        XmlElement nodeRfrdDocAmt;
        XmlElement  nodeTp;
        XmlElement nodeCdOrPrtry;       //SKS#DevOps:17165
    
        if(_invSKS_EFT_FileDetail.InvoiceNumber != '' || (mSKS_EFT_FileFormatPaymSpec.UseCheckNumber == NoYes::Yes || subStr(mSKS_EFT_FileDetail.PaymSpec, 1, 3) == 'CHK'))
        {
            //              2.101: RfrdDocInf
            nodeRfrdDocInf = _nodeStrd.appendChild(xmlDoc.createElement('RfrdDocInf'));    
    
            if(mSKS_EFT_FileFormatPaymSpec.TransactionCode != #FWT && mSKS_EFT_FileFormatPaymSpec.TransactionCode != #BOP)
            {
                //                  2.102: Tp
                nodeTp = nodeRfrdDocInf.appendChild(xmlDoc.createElement('Tp'));
    
                //                      2.103: CdOrPrtry
                nodeCdOrPrtry = nodeTp.appendChild(xmlDoc.createElement('CdOrPrtry'));
    
                if(mSKS_EFT_FileFormatPaymSpec.TransactionCode != #FWT &&
                   mSKS_EFT_FileFormatPaymSpec.TransactionCode != #BOP)
                {
                    if(_invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur <= 0)           //SKS#DevOps:17165
                    {
                        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdOrPrtry, 'Cd', 'CINV');

                        //                  2.107: Number
                        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRfrdDocInf, 'Nb', this.CharacterReplacement(_invSKS_EFT_FileDetail.InvoiceNumber));

                        //                  2.108: RltdDt
                        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRfrdDocInf, 'RltdDt', SKS_PP_StringFormats::strDateYYYYMMDD(this.getInvoiceJournalDocumentDate(_invSKS_EFT_FileDetail), DateSeparator::Hyphen));
                    }
                    else
                    {
                        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdOrPrtry, 'Cd', 'CREN');

                        //                  2.107: Number
                        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRfrdDocInf, 'Nb', this.CharacterReplacement(_invSKS_EFT_FileDetail.InvoiceNumber));

                        //                  2.108: RltdDt
                        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRfrdDocInf, 'RltdDt', SKS_PP_StringFormats::strDateYYYYMMDD(this.getInvoiceJournalDocumentDate(_invSKS_EFT_FileDetail), DateSeparator::Hyphen));
                    }
    
                    //              2.109 RfrdDocAmt
                    nodeRfrdDocAmt = _nodeStrd.appendChild(xmlDoc.createElement('RfrdDocAmt'));
    
                    this.node_RmtInf_Amt(nodeRfrdDocAmt, _invSKS_EFT_FileDetail);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_GrpHdr_InitgPty_Id</Name>
				<Source><![CDATA[
    protected void node_GrpHdr_InitgPty_Id(XmlElement _nodeInitgPty)
    {
        //------------------------------------------------------------------------------------------------------
        //      1.8: InitgPty
        //          Id
        //              OrgId
        //                  Othr
        //                      Id
        //      SchmeNm
        //          Prtry
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeInitgPtyId;
        XmlElement nodeOrgId;
        XmlElement nodeSchmeNm;
        XmlElement nodeOthr;
        str value;
        
        //          Id
        nodeInitgPtyId = _nodeInitgPty.appendChild(xmlDoc.createElement('Id'));
    
        //              OrgId
        nodeOrgId = nodeInitgPtyId.appendChild(xmlDoc.createElement('OrgId'));
    
        //                  Othr
        nodeOthr = nodeOrgId.appendChild(xmlDoc.createElement('Othr'));
    
        //                      Id
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeOthr, 'Id', mSKS_EFT_FileDetail.FileACHCompanyId);
    
        //                      SchmeNm
        nodeSchmeNm = nodeOthr.appendChild(xmlDoc.createElement('SchmeNm'));
    
        //                      Prtry
        value = SKS_EFT_Format::getCodelookupvalue('InitgPtySchm', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank);

        if(value)
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeSchmeNm, 'Prtry', this.CharacterReplacement(value));
        }
        else if(mSKS_EFT_FileDetail.PaymSpec == 'ACH-CTX')
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeSchmeNm, 'Prtry', 'AP0');
        }
        else
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeSchmeNm, 'Prtry', 'AP2');
        }
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_ChrgBr</Name>
				<Source><![CDATA[
    protected void node_PmtInf_ChrgBr(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.24 ChrgBr
        //------------------------------------------------------------------------------------------------------
    
            //Override
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_DbtrAcct_Id_Othr</Name>
				<Source><![CDATA[
    protected void node_PmtInf_DbtrAcct_Id_Othr(XmlElement _nodeAcctId)
    {
        //------------------------------------------------------------------------------------------------------
        //              Othr
        //                  Id
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeOthr;
    
        //              Othr
        nodeOthr = _nodeAcctId.appendChild(xmlDoc.createElement('Othr'));
    
        //                  Id
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeOthr, 'Id', mSKS_EFT_FileDetail.BankBankAcct);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_DbtrAgt</Name>
				<Source><![CDATA[
    protected void node_PmtInf_DbtrAgt(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.21: DbtrAgt
        //          FinInstnId
        //              BIC
        //              Name
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeDbtrAgt;
        XmlElement nodeFinInstnId;
        XmlElement nodeClrSysMmBId;
    
        //      2.21: DbtrAgt
        nodeDbtrAgt = nodePmtInf.appendChild(xmlDoc.createElement('DbtrAgt'));
    
        //          FinInstnId
        nodeFinInstnId = nodeDbtrAgt.appendChild(xmlDoc.createElement('FinInstnId'));
    
        if(mBankAccountTable.SWIFTNo != '')
        {
            //                  BIC
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeFinInstnId, 'BIC', mBankAccountTable.SWIFTNo, 0, false);
        }
    
        if(mSKS_EFT_FileDetail.BankBankTransit)
        {
            //              ClrSysMmbId
            nodeClrSysMmBId = nodeFinInstnId.appendChild(xmlDoc.createElement('ClrSysMmbId'));
    
            //                  MmbId
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeClrSysMmBId, 'MmbId', mSKS_EFT_FileDetail.BankBankTransit, 0, false);
        }
    
        //              Name
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeFinInstnId, 'Nm', 'PNC BANK', 0, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_PmtTpInf</Name>
				<Source><![CDATA[
    protected void node_PmtInf_PmtTpInf(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.6: PmtTpInf
        //          2.8: SvcLvl
        //              2.9: Cd
        //------------------------------------------------------------------------------------------------------
        XmlElement nodePmftTpInf;
        XmlElement nodeSvcLvl;
    
        if(!mSKS_EFT_FileFormatPaymSpec.UseCheckNumber && subStr(mSKS_EFT_FileDetail.PaymSpec, 1, 3) != 'CHK')
        {
            //      2.6: PmtTpInf
            nodePmftTpInf = _nodePmtInf.appendChild(xmlDoc.createElement('PmtTpInf'));
    
            //          2.8: SvcLvl
            nodeSvcLvl = nodePmftTpInf.appendChild(xmlDoc.createElement('SvcLvl'));
    
            //              2.9: Cd
            this.node_PmtInf_PmtTpInf_SvcLvl_Cd(nodeSvcLvl);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_PmtTpInf_SvcLvl_Cd</Name>
				<Source><![CDATA[
    protected void node_PmtInf_PmtTpInf_SvcLvl_Cd(XmlElement _nodeSvcLvl)
    {
        //------------------------------------------------------------------------------------------------------
        //  2.0: PmtInf
        //      2.6: PmtTpInf
        //          2.8: SvcLvl
        //              2.9: Cd
        //------------------------------------------------------------------------------------------------------
        str value;
    
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #CCD:
            case #PPD:
            case #CTX:
                value = 'NURG';
                break;
            case #FWT:
            case #BOP:
                value = 'URGP';
                break;
        }
    
        //              2.9: Cd
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeSvcLvl, 'Cd', value);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_RmtInf_Amt</Name>
				<Source><![CDATA[
    /// <summary>
    /// RmtInf_Amt
    /// </summary>
    /// <param name = "_nodeRfrdDocAmt">nodeRfrdDocAmt</param>
    /// <param name = "_invSKS_EFT_FileDetail">invSKS_EFT_FileDetail</param>
    protected void node_RmtInf_Amt(XmlElement _nodeRfrdDocAmt, SKS_EFT_FileDetail _invSKS_EFT_FileDetail)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.42: Amt
        //              2.43: InstdAmt
        //------------------------------------------------------------------------------------------------------
        XmlElement  currentElement;
        AmountMST   gross = _invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur + _invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur;
        AmountMST   Remitted;
        AmountMST   CreditNote;

        if(_invSKS_EFT_FileDetail.InvoiceSettleAmountCur > 0)
        {
            Remitted = 0;
            CreditNote = _invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur;
            //      2.110
            currentElement = SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeRfrdDocAmt, 'DuePyblAmt', num2str(gross * 1,0,2,1,0));
            SKS_EFT_Format::xmlsetAttributeText(currentElement, 'Ccy', _invSKS_EFT_FileDetail.PaymentCurrencyCode);

            //      2.111
            currentElement = SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeRfrdDocAmt, 'DscntApldAmt', num2str(_invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur * 1,0,2,1,0));
            SKS_EFT_Format::xmlsetAttributeText(currentElement, 'Ccy', _invSKS_EFT_FileDetail.PaymentCurrencyCode);
        }
        else
        {
            Remitted = _invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1;
            CreditNote = 0;
            //      2.110
            currentElement = SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeRfrdDocAmt, 'DuePyblAmt', num2str(gross * -1,0,2,1,0));
            SKS_EFT_Format::xmlsetAttributeText(currentElement, 'Ccy', _invSKS_EFT_FileDetail.PaymentCurrencyCode);

            //      2.111
            currentElement = SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeRfrdDocAmt, 'DscntApldAmt', num2str(_invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur * -1,0,2,1,0));
            SKS_EFT_Format::xmlsetAttributeText(currentElement, 'Ccy', _invSKS_EFT_FileDetail.PaymentCurrencyCode);
        }
        
        if(Remitted != 0)
        {
            //      RmtdAmt
            currentElement = SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeRfrdDocAmt, 'RmtdAmt', num2str(Remitted,0,2,1,0));
            SKS_EFT_Format::xmlsetAttributeText(currentElement, 'Ccy', _invSKS_EFT_FileDetail.PaymentCurrencyCode);
        }
        else
        {
            //      CdtNoteAmt
            currentElement = SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeRfrdDocAmt, 'CdtNoteAmt', num2str(CreditNote,0,2,1,0));
            SKS_EFT_Format::xmlsetAttributeText(currentElement, 'Ccy', _invSKS_EFT_FileDetail.PaymentCurrencyCode);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_DbtrAcct</Name>
				<Source><![CDATA[
    protected void node_PmtInf_DbtrAcct(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.20: DbtrAcct
        //          Id
        //              IBAN
        //              Othr
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeDbtrAcct;
        XmlElement nodeDbtrAcctId;
    
        //      2.20: DbtrAcct
        nodeDbtrAcct = nodePmtInf.appendChild(xmlDoc.createElement('DbtrAcct'));
    
        //          Id
        nodeDbtrAcctId = nodeDbtrAcct.appendChild(xmlDoc.createElement('Id'));
    
        if(mBankAccountTable.IBAN && mSKS_EFT_FileFormatPaymSpec.TransactionCode != #CTX)
        {
            //              IBAN
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeDbtrAcctId, 'IBAN', mBankAccountTable.IBAN);
        }
        else
        {
            //              Othr
            this.node_PmtInf_DbtrAcct_Id_Othr(nodeDbtrAcctId);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>