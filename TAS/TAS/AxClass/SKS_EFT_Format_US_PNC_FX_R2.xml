<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_US_PNC_FX_R2</Name>
	<SourceCode>
		<Declaration><![CDATA[
// Pinacle FX File Upload
//
// Supports transaction types: Wire 103/Multi-currency VOS
//
// Structure:
//  Payments
// Trailer
/// <summary>
/// SKS_EFT_Format_US_PNC_FX_R2 extends SKS_EFT_Format
/// </summary>
class SKS_EFT_Format_US_PNC_FX_R2 extends SKS_EFT_Format
{
    #define.FormatVersion('20220705')
    int mRecordCount;
    AmountMST mPaymentAmount;
    str mTimeStamp;
    #define.W103('103')
    #define.MCVOS('VOS')
    #define.MCDDA('DDA')

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    protected void formatStructure()
    {
        ;
    
        while(mSKS_EFT_FileDetail)
        {
            // Get SKS_EFT_Bank
            this.getSKS_EFT_Bank();
    
            // Get SKS_EFT_VendorPaym
            this.getSKS_EFT_VendorPaym();
    
            mTimeStamp = SKS_PP_StringFormats::strDateYYYYMMDD(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone())) + SKS_PP_StringFormats::strTimeHHMMSS();
    
            // Detail lines
            this.rec_Payment(#W103);
            if(mSKS_EFT_FileDetail.PaymSpec == 'W103-MCDDA')
            {
                this.rec_Payment(#MCDDA);
            }
            else
            {
                this.rec_Payment(#MCVOS);
            }
    
            next mSKS_EFT_FileDetail;
        }
    
        // Format trailer
        this.rec_Trailer();
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Payment</Name>
				<Source><![CDATA[
    //Nbr   Description                                         Max     Start   Type    Comment
    //1     Transaction Reference Number                        9       1       AN
    //2     Timestamp                                           14      10      D       yyyymmddhhmmss
    //3     Payment Type                                        1       24      AN      C or D
    //4     Instruction Type                                    3       25      AN
    //5     Value Date                                          8       28      D       yyyymmdd
    //6     Currency Code                                       3       36      AN
    //7     Amount                                              15      39      AN
    //8     Customer Short Code                                 35      54      AN
    //9     Customer Address1                                   35      89      AN
    //10    Customer Address2                                   35      124     AN
    //11    Customer Address3                                   35      159     AN
    //12    Beneficiary Bank SWIFT BIC                          12      194     AN
    //13    Beneficiary Bank Clearing Code                      15      206     AN
    //14    Beneficiary Bank Clearing ID                        21      221     AN
    //15    Beneficiary Bank Address1                           35      242     AN
    //16    Beneficiary Bank Address2                           35      277     AN
    //17    Beneficiary Bank Address3                           35      312     AN
    //18    Beneficiary Bank Address4                           35      347     AN
    //19    Intermediary Bank SWIFT BIC                         12      382     AN
    //20    Intermediary Bank Clearing Code                     15      394     AN
    //21    Intermediary Bank Clearing ID                       21      409     AN
    //22    Intermediary Bank Address1                          35      430     AN
    //23    Intermediary Bank Address2                          35      465     AN
    //24    Intermediary Bank Address3                          35      500     AN
    //25    Intermediary Bank Address4                          35      535     AN
    //26    Beneficiary Short Name                              15      570     AN
    //27    Beneficiary Account #                               35      585     AN
    //28    Beneficiary Name / Payment Set Instructions Name    50      620     AN      Vendor account num + company id or Bank account number
    //29    Beneficiary Address1                                35      670     AN
    //30    Beneficiary Address2                                35      705     AN
    //31    Beneficiary Address3                                35      740     AN
    //32    Details of Payment1                                 35      775     AN      Payment reference number
    //33    Details of Payment2                                 35      810     AN
    //34    Details of Payment3                                 35      845     AN
    //35    Details of Payment4                                 35      880     AN
    //36    Details of Charges                                  3       915     AN      Do not use
    //37    Internal Reference1                                 35      918     AN
    //38    Internal Reference2                                 35      953     AN
    //39    Internal Reference3                                 35      988     AN
    //40    Internal Reference4                                 35      1023    AN
    boolean rec_Payment(str insType)
    {
        //BP Deviation Documented
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        AmountMST amt;
        str idValue = '';
        ;
    
        //1     Transaction Reference Number
        sb.Append(SKS_PP_StringFormats::strFill(9, this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
    
        //2     Timestamp
        sb.Append(mTimeStamp);
    
        //3     Payment Type
        //4     Instruction Type
        if(insType == #W103)
        {
            sb.Append('C');
            sb.Append(#W103);
        }
        else if(insType == #MCVOS)
        {
            sb.Append('D');
            sb.Append(#MCVOS);
        }
        else if(insType == #MCDDA)
        {
            sb.Append('D');
            sb.Append(#MCDDA);
        }
    
        //5     Value Date
        sb.Append(SKS_PP_StringFormats::strDateYYYYMMDD(mSKS_EFT_File.EffectiveDate));
    
        //6     Currency Code
        sb.Append(SKS_PP_StringFormats::strFill(3, mSKS_EFT_FileDetail.PaymentCurrencyCode, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //7     Amount
        if(insType == #W103)
        {
            amt = 0;
        }
        else if(insType == #MCVOS || insType == #MCDDA)
        {
            amt = this.getPositiveAmount(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur);
        }
        sb.Append(SKS_PP_StringFormats::strFill(15, num2str(amt,0,2,0,0), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
    
        //8     Customer Short Code
        sb.Append(SKS_PP_StringFormats::strFill(35, this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('CustShortCd', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank)), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //9     Customer Address1
        sb.Append(SKS_PP_StringFormats::strFill(35, this.CharacterReplacement(mSKS_EFT_Bank.WOrdPartyName), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //10    Customer Address2
        sb.Append(SKS_PP_StringFormats::strFill(35, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //11    Customer Address3
        sb.Append(SKS_PP_StringFormats::strFill(35, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //12    Beneficiary Bank SWIFT BIC
        sb.Append(SKS_PP_StringFormats::strFill(12, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //13    Beneficiary Bank Clearing Code
        sb.Append(SKS_PP_StringFormats::strFill(15, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //14    Beneficiary Bank Clearing ID
        sb.Append(SKS_PP_StringFormats::strFill(21, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //15    Beneficiary Bank Address1
        sb.Append(SKS_PP_StringFormats::strFill(35, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //16    Beneficiary Bank Address2
        sb.Append(SKS_PP_StringFormats::strFill(35, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //17    Beneficiary Bank Address3
        sb.Append(SKS_PP_StringFormats::strFill(35, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //18    Beneficiary Bank Address4
        sb.Append(SKS_PP_StringFormats::strFill(35, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //19    Intermediary Bank SWIFT BIC
        sb.Append(SKS_PP_StringFormats::strFill(12, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //20    Intermediary Bank Clearing Code
        sb.Append(SKS_PP_StringFormats::strFill(15, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //21    Intermediary Bank Clearing ID
        sb.Append(SKS_PP_StringFormats::strFill(21, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //22    Intermediary Bank Address1
        sb.Append(SKS_PP_StringFormats::strFill(35, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //23    Intermediary Bank Address2
        sb.Append(SKS_PP_StringFormats::strFill(35, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //24    Intermediary Bank Address3
        sb.Append(SKS_PP_StringFormats::strFill(35, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //25    Intermediary Bank Address4
        sb.Append(SKS_PP_StringFormats::strFill(35, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //26    Beneficiary Short Name
        sb.Append(SKS_PP_StringFormats::strFill(15, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //27    Beneficiary Account #
        sb.Append(SKS_PP_StringFormats::strFill(35, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //28    Beneficiary Name / Payment Set Instructions Name
        if(insType == #W103)
        {
            // Vendor account number + company id
            sb.Append(SKS_PP_StringFormats::strFill(50, mSKS_EFT_FileDetail.AccountNum + mSKS_EFT_VendorPaym.VendCompany, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
        else if(insType == #MCVOS || insType == #MCDDA)
        {
            sb.Append(SKS_PP_StringFormats::strFill(50, this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('PmtInstructionName', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank)), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
    
        //29    Beneficiary Address1
        sb.Append(SKS_PP_StringFormats::strFill(35, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //30    Beneficiary Address2
        sb.Append(SKS_PP_StringFormats::strFill(35, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //31    Beneficiary Address3
        sb.Append(SKS_PP_StringFormats::strFill(35, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //32    Details of Payment1
        if(insType == #W103)
        {
            sb.Append(SKS_PP_StringFormats::strFill(35, this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
        else if(insType == #MCVOS || insType == #MCDDA)
        {
            sb.Append(SKS_PP_StringFormats::strFill(35, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
    
        //33    Details of Payment2
        sb.Append(SKS_PP_StringFormats::strFill(35, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //34    Details of Payment3
        sb.Append(SKS_PP_StringFormats::strFill(35, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //35    Details of Payment4
        sb.Append(SKS_PP_StringFormats::strFill(35, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //36    Details of Charges
        sb.Append(SKS_PP_StringFormats::strFill(3, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //37    Internal Reference1
        sb.Append(SKS_PP_StringFormats::strFill(35, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //38    Internal Reference2
        sb.Append(SKS_PP_StringFormats::strFill(35, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //39    Internal Reference3
        sb.Append(SKS_PP_StringFormats::strFill(35, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //40    Internal Reference4
        sb.Append(SKS_PP_StringFormats::strFill(35, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        this.fileWrite(sb.ToString());
    
        mPaymentAmount += amt;
        mRecordCount++;
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Trailer</Name>
				<Source><![CDATA[
    //Nbr   Description                                         Max     Start   Type    Comment
    //1     Transaction Reference Number                        9       1       AN      999999999
    //2     Timestamp                                           14      10      D       yyyymmddhhmmss
    //3     Type                                                4       24      AN      TTRL
    //4     Value Date                                          8       28      D       99999999
    //5     Currency Code                                       3       36      AN      999
    //6     Amount Total                                        15      39      AN
    //7     Recour Count                                        35      54      AN
    boolean rec_Trailer()
    {
        //BP Deviation Documented
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        ;
        //1     Transaction Reference Number
        sb.Append(SKS_PP_StringFormats::strFill(9, '', SKS_PP_FillCharacter::Nine, SKS_PP_FillSide::Left));
    
        //2     Timestamp
        sb.Append(mTimeStamp);
    
        //3     Type
        sb.Append('TTRL');
    
        //4     Value Date
        sb.Append(SKS_PP_StringFormats::strFill(8, '', SKS_PP_FillCharacter::Nine, SKS_PP_FillSide::Left));
    
        //5     Currency Code
        sb.Append(SKS_PP_StringFormats::strFill(3, '', SKS_PP_FillCharacter::Nine, SKS_PP_FillSide::Left));
    
        //6     Amount Total
        sb.Append(SKS_PP_StringFormats::strFill(15, num2str(mPaymentAmount,0,2,0,0), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
    
        //7     Recour Count
        sb.Append(SKS_PP_StringFormats::strFill(35, num2str(mRecordCount,0,0,0,0), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        this.fileWrite(sb.ToString());
    
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>