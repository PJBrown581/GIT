<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_Table_LedgerJournalTransEvent</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_Table_LedgerJournalTransEvent
{
    

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>Pre_deleteForLedgerJournalTable</Name>
				<Source><![CDATA[
    [PreHandlerFor(tableStr(LedgerJournalTrans), tableStaticMethodStr(LedgerJournalTrans, deleteForLedgerJournalTable))]
    public static void Pre_deleteForLedgerJournalTable(XppPrePostArgs args)
    {
        LedgerJournalTable              ledgerJournalTable;
    
        ledgerJournalTable = Args.getArg('_ledgerJournalTable');
    
        SKS_DD_CustTransMandApplied::deleteCustTransMandApplied_JournalNum(LedgerJournalTable.JournalNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>Pre_deleteTransFromVoucher</Name>
				<Source><![CDATA[
    [PreHandlerFor(tableStr(LedgerJournalTrans), tableStaticMethodStr(LedgerJournalTrans, deleteTransFromVoucher))]
    /// <summary>
    /// Delete the <c>SKS_DD_CustTransMandApplied</c> table.
    /// </summary>
    /// <param name="args">
    /// It contains the <c>LedgerJournalTrans</c> record.
    /// </param>
    public static void Pre_deleteTransFromVoucher(XppPrePostArgs args)
    {
        LedgerJournalTrans              ledgerJournalTrans;
        LedgerJournalId                 journalNum;
        Voucher                         voucher;
    
        ledgerJournalTrans = args.getThis();
    
        journalNum = Args.getArg('_journalNum');
        voucher = Args.getArg('_voucher');
    
        while select ledgerJournalTrans
            index hint NumVoucherIdx
            where ledgerJournalTrans.JournalNum == journalNum &&
                    ledgerJournalTrans.Voucher    == voucher  // TAS CAR
        {
            SKS_DD_CustTransMandApplied::deleteCustTransMandApplied(ledgerJournalTrans);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>LedgerJournalTrans_Post_delete</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="args"></param>
    [PostHandlerFor(tableStr(LedgerJournalTrans), tableMethodStr(LedgerJournalTrans, delete))]
    public static void LedgerJournalTrans_Post_delete(XppPrePostArgs args)
    {
        LedgerJournalTrans  ledgerJournalTrans = args.getThis();

        SKS_EFTAP_VendPmtSubmitLegerJournalTrans    vendPmtSubmitLegerJournalTrans;

        select crosscompany vendPmtSubmitLegerJournalTrans where vendPmtSubmitLegerJournalTrans.PaymentVoucher == ledgerJournalTrans.Voucher;
        if(vendPmtSubmitLegerJournalTrans)
        {
            changecompany(vendPmtSubmitLegerJournalTrans.DataAreaId)
            {
                ttsbegin;
                SKS_EFTAP_VendPmtSubmitLegerJournalTrans    vendPmtSubmitLegerJournalTransDel;               
                vendPmtSubmitLegerJournalTransDel = vendPmtSubmitLegerJournalTrans;
                vendPmtSubmitLegerJournalTransDel.selectForUpdate(true);
                vendPmtSubmitLegerJournalTransDel.delete();      
                ttscommit;
            }
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>LedgerJournalTrans_onInserted</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [DataEventHandler(tableStr(LedgerJournalTrans), DataEventType::Inserted)]
    public static void LedgerJournalTrans_onInserted(Common sender, DataEventArgs e)
    {
        LedgerJournalTrans trans = sender as LedgerJournalTrans;
                
        if(trans.SKS_BTB_TransferMethod)
        {
            ttsbegin;
            trans.selectForUpdate(true);
            trans.PaymMode = trans.SKS_BTB_TransferMethod;
            trans.PaymSpec = trans.SKS_BTB_TransferSpec;
            trans.doUpdate();
            ttscommit;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>