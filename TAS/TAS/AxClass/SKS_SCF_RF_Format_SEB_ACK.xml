<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_SCF_RF_Format_SEB_ACK</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_SCF_RF_Format_SEB_ACK extends SKS_SCF_RF_Format
{
    //primities
    boolean gErrorsExist;
    str mFileName;
    str mFileID;
    str mFieldDelimiter;
    str mReferenceNum;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFile</Name>
				<Source><![CDATA[
    public SKS_SCF_RF_File getFile(str _filename, boolean _serverPath)
    {
        SKS_EB_FileHub locSKS_EB_FileHub = SKS_EB_FileHub::construct();
        System.String locString;
        System.IO.StreamReader locStreamReader;
    
        //Setup filestream
        locSKS_EB_FileHub.setFileName(_filename);
        locSKS_EB_FileHub.runFileInquire();
        if(!locSKS_EB_FileHub.attrFileExists())
        {
            // The file %1 does not exist.
            error(strfmt("@SYS62207", _filename));
            return null;
        }
        locSKS_EB_FileHub.runFileLoad();
        locSKS_EB_FileHub.StreamInit();
        locStreamReader = new System.IO.StreamReader(locSKS_EB_FileHub.streamGet());

        //priming read
        locString = locStreamReader.ReadLine();

        if(!mSKS_SCF_RF_File)
        {
            mSKS_SCF_RF_File = new SKS_SCF_RF_File();
        }

        mSKS_SCF_RF_SentFile = new SKS_SCF_RF_SentFile();

        while(locString != null)
        {
            if(!System.String::IsNullOrEmpty(locString))
            {
                this.processNode(locString);
            }
            locString = locStreamReader.ReadLine();
        }

        //must use the getSKS_EFT_RF_File() method becuase, if any pending mSKS_EFT_RF_SentFile have yet to be pushed into the list, this will do it.
        locStreamReader.Close();
        if(gErrorsExist)
        {
            mSKS_SCF_RF_File = null;
        }

        return this.getSKS_SCF_RF_File();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFormatId</Name>
				<Source><![CDATA[
    public str getFormatId(str _filename, boolean _serverPath)
    {

        str rtnval = '';
        int classId;
        int locRecLen;
        //BEGIN VALIDATION VARIABLES
        //BEGIN QUALIFIERS
        boolean pos1to2RecordTypecode = false;
        boolean pos21to35InvoiceNumber = false;
        boolean pos57to66InvoiceDuedate = false;
        //BEGIN DISQUALIFIER VARIABLES
        //none

        //END VALIDATION VARIABLES
        SKS_EB_FileHub locSKS_EB_FileHub = SKS_EB_FileHub::construct();
        System.String locString;
        System.IO.StreamReader locStreamReader;
    
        //Setup filestream
        locSKS_EB_FileHub.setFileName(_filename);
        locSKS_EB_FileHub.runFileInquire();
        if(!locSKS_EB_FileHub.attrFileExists())
        {
            // The file %1 does not exist.
            error(strfmt("@SYS62207", _filename));
            return null;
        }
        locSKS_EB_FileHub.runFileLoad();
        locSKS_EB_FileHub.StreamInit();
        locStreamReader = new System.IO.StreamReader(locSKS_EB_FileHub.streamGet());
        //priming read
   
        while(!locStreamReader.get_EndOfStream())
        {
            locString = locStreamReader.ReadLine();

            if(!System.String::IsNullOrEmpty(locString))
            {
                //a valid Bankgirot file has records of length 80
                locRecLen = locString.get_Length();

                if(!System.String::IsNullOrWhiteSpace(locString))
                {

                    if(SKS_PP_StringFormats::strSub(locString, 1, 2) == 'FA' ||
                        SKS_PP_StringFormats::strSub(locString, 1, 2) == 'CN')
                    {
                        pos1to2RecordTypecode = true;
                    }
                    if(SKS_PP_StringFormats::strSub(locString, 21, 15) != '')
                    {
                        pos21to35InvoiceNumber = true;
                    }

                    if(SKS_PP_StringFormats::strSub(locString, 57, 10) != '')
                    {
                        pos57to66InvoiceDuedate = true;
                    }
                }
            }
        }
        if(pos1to2RecordTypecode
        && pos21to35InvoiceNumber
        && pos57to66InvoiceDuedate)
        {
            classId = classIdGet(this);
            rtnval = classId2Name(ClassId);
        }
        locStreamReader.Close();

        return rtnval;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSKS_SCF_RF_File</Name>
				<Source><![CDATA[
    public SKS_SCF_RF_File getSKS_SCF_RF_File()
    {

        if(mSKS_SCF_RF_SentFile != null)
        {
            mSKS_SCF_RF_File.addSentFile(mSKS_SCF_RF_SentFile);
            mSKS_SCF_RF_SentFile = null;
        }

        return mSKS_SCF_RF_File;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processNode</Name>
				<Source><![CDATA[
    private void processNode(str locString)
    {
        str amount;
        str errorcode;
        str reasoncode;

        if(SKS_PP_StringFormats::strSub(locString, 1, 2) == 'FA' ||
            SKS_PP_StringFormats::strSub(locString, 1, 2) == 'CN')
        {
            mSKS_SCF_RF_Transaction = new SKS_SCF_RF_Transaction();

            if(mSKS_SCF_RF_Transaction != null)
            {
                mSKS_SCF_RF_SentFile.addTransaction(mSKS_SCF_RF_Transaction);
            }

            if(SKS_PP_StringFormats::strSub(locString, 1, 2) == 'FA')
            {
                mSKS_SCF_RF_Transaction.GetInvoiceType('PO');
            }
            else
            {
                mSKS_SCF_RF_Transaction.GetInvoiceType('CM');
            }

            mSKS_SCF_RF_Transaction.GetClientNum(SKS_PP_StringFormats::strSub(locString, 4, 7));

            mSKS_SCF_RF_Transaction.GetInvoiceNum(SKS_PP_StringFormats::strSub(locString, 21, 15));

            mSKS_SCF_RF_Transaction.GetDueDate(str2Date(SKS_PP_StringFormats::strSub(locString, 57, 10), 321));

            mSKS_SCF_RF_Transaction.GetFundedCurr(SKS_PP_StringFormats::strSub(locString, 67, 3));

            amount = SKS_PP_StringFormats::strSub(locString, 36, 11);
            amount = subStr(amount, 1, 9) + '.' + subStr(amount, 10,2);

            mSKS_SCF_RF_Transaction.GetInvoiceAmount(str2Num(amount));

            errorcode = SKS_PP_StringFormats::strSub(locString, 70, 106);

            if(subStr(errorcode, 1,2))
            {
                switch(subStr(errorcode, 1,2))
                {
                    case '02':
                        mSKS_SCF_RF_Transaction.GetInvoiceStatus('0');
                        reasoncode = "02 - Unknown debtor id or currency is not associated with the supplier's invoices";
                        mSKS_SCF_RF_Transaction.GetStatusReason(reasoncode);
                        break;
                    case '03':
                        mSKS_SCF_RF_Transaction.GetInvoiceStatus('0');
                        reasoncode = '03 - Invoice number already exists (duplicate)';
                        mSKS_SCF_RF_Transaction.GetStatusReason(reasoncode);
                        break;
                    case '04':
                        mSKS_SCF_RF_Transaction.GetInvoiceStatus('0');
                        reasoncode = '04 - Incorrect invoice date';
                        mSKS_SCF_RF_Transaction.GetStatusReason(reasoncode);
                        break;
                    case '05':
                        mSKS_SCF_RF_Transaction.GetInvoiceStatus('0');
                        reasoncode = '05 - Incorrect due date';
                        mSKS_SCF_RF_Transaction.GetStatusReason(reasoncode);
                        break;
                    case '07':
                        mSKS_SCF_RF_Transaction.GetInvoiceStatus('0');
                        reasoncode = '07 - Amount is not numeric';
                        mSKS_SCF_RF_Transaction.GetStatusReason(reasoncode);
                        break;
                    case '11':
                        mSKS_SCF_RF_Transaction.GetInvoiceStatus('0');
                        reasoncode = '11 - Missing document number';
                        mSKS_SCF_RF_Transaction.GetStatusReason(reasoncode);
                        break;
                    case '99':
                        mSKS_SCF_RF_Transaction.GetInvoiceStatus('0');
                        reasoncode = '99 - Unknown error';
                        mSKS_SCF_RF_Transaction.GetStatusReason(reasoncode);
                        break;
                    case '15':
                        reasoncode = '15 - The due date has passed';
                        mSKS_SCF_RF_Transaction.GetStatusReason(reasoncode);
                        mSKS_SCF_RF_Transaction.GetInvoiceStatus('1');
                        break;
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>