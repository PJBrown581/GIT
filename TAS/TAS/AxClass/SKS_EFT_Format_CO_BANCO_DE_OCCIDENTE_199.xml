<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_CO_BANCO_DE_OCCIDENTE_199</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_CO_BANCO_DE_OCCIDENTE_199 extends SKS_EFT_Format
/// </summary>
class SKS_EFT_Format_CO_BANCO_DE_OCCIDENTE_199 extends SKS_EFT_Format
{
    #define.FormatVersion('20220405')
    System.Text.StringBuilder msb;
    real totRec;
    real totVal;
    int counter;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    protected void formatStructure()
    {
        msb = new System.Text.StringBuilder();

        //  Header logging
        this.rec_HeaderLog();

        while(mSKS_EFT_FileDetail)
        {
            // Get SKS_EFT_FileFormatPaymSpec
            this.getSKS_EFT_FileFormatPaymSpec();

            // Get SKS_EFT_VendorPaym
            this.getSKS_EFT_VendorPaym();

            //  Payment Log
            this.rec_PaymentLog();

            next mSKS_EFT_FileDetail;
        }

        //  Totals Registration
        this.rec_Total();

        // Write to file
        this.fileWrite(msb.ToString());
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_HeaderLog</Name>
				<Source><![CDATA[
    public boolean rec_HeaderLog()
    {

        //------------------------------------------------------------------------------------------------------
        //Nbr   Description                                                     Length      Position
        // 1    Type of record                                                   1          (  1 -   2)
        // 2    Consecutive                                                      4          (  2 -   5)
        // 3    Payment Date                                                     8          (  6 -  13)
        // 4    Number of records                                                4          ( 14 -  17)
        // 5    Total value                                                      18         ( 18 -  35)
        // 6    Main account                                                     16         ( 36 -  51)
        // 7    File identification                                              6          ( 52 -  57)
        // 8    Zeros                                                            142        ( 58 - 199)        
        //------------------------------------------------------------------------------------------------------
        SKS_EFT_FileDetail  tmpSKS_EFT_FileDetail;

        // 1    Type of record                                                   1          (  1 -   2)
        msb.Append('1');

        // 2    Consecutive                                                      4          (  2 -   5)
        msb.Append(SKS_PP_StringFormats::strFill(4, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        // 3    Payment Date                                                     8          (  6 -  13)
        msb.Append(SKS_PP_StringFormats::strDateYYYYMMDD(mSKS_EFT_FileDetail.EffectiveDate));

        // 4    Number of records                                                4          ( 14 -  17)
        
        // Select count and sum for this file
        select COUNT(InvoiceOrigAmountCur), SUM(InvoiceSettleAmountPmtCur) from tmpSKS_EFT_FileDetail
            where
                tmpSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                tmpSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                tmpSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary;

        msb.Append(SKS_PP_StringFormats::strFill(4, num2Str(tmpSKS_EFT_FileDetail.InvoiceOrigAmountCur, 0,0,0,0), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        totRec = tmpSKS_EFT_FileDetail.InvoiceOrigAmountCur;

        // 5    Total value                                                      18         ( 18 -  35)
        msb.Append(SKS_PP_StringFormats::strMoney(-1 * tmpSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur, 18));
        
        totVal = tmpSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur;

        // 6    Main account                                                     16         ( 36 -  51)
        str mainAccnt;

        mainAccnt = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('MainAccnt', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank));
        msb.Append(SKS_PP_StringFormats::strFill(16, this.CharacterReplacement(mainAccnt), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        // 7    File identification                                              6          ( 52 -  57)
        msb.Append(SKS_PP_StringFormats::strFill(6, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        // 8    Zeros                                                            142        ( 58 - 199)
        msb.Append(SKS_PP_StringFormats::strFill(142, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        msb.Append('\n');
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_PaymentLog</Name>
				<Source><![CDATA[
    public boolean rec_PaymentLog()
    {

        //------------------------------------------------------------------------------------------------------
        //Nbr   Description                                                     Length      Position
        // 1    Type of record                                                   1          (  1 -   2)
        // 2    Consecutive                                                      4          (  2 -   5)
        // 3    Source Account                                                   16         (  6 -  21)
        // 4    Beneficiary                                                      30         ( 22 -  51)
        // 5    NIT/CC                                                           11         ( 52 -  62)
        // 6    Bank Code                                                        4          ( 63 -  66)
        // 7    Payment Date                                                     8          ( 67 -  74)
        // 8    Form of payment                                                  1          ( 75 -  75)
        // 9    Value                                                            15         ( 76 -  90)
        //10    Target Account                                                   16         ( 91 - 106)
        //11    Proof                                                            12         (107 - 118)
        //12    Target Account Type                                              1          (119 - 119)
        //13    Concept                                                          80         (120 - 199)
        //------------------------------------------------------------------------------------------------------
        str value;

        counter++;

        // 1    Type of record                                                   1          (  1 -   2)
        msb.Append('2');

        // 2    Consecutive                                                      4          (  2 -   5)
        msb.Append(SKS_PP_StringFormats::strFill(4, num2Str(counter, 0,0,0,0), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        // 3    Source Account                                                   16         (  6 -  21)
        msb.Append(SKS_PP_StringFormats::strFill(16, mSKS_EFT_FileDetail.BankBankAcct, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        // 4    Beneficiary                                                      30         ( 22 -  51)
        msb.Append(SKS_PP_StringFormats::strFill(30, this.CharacterReplacement(mSKS_EFT_VendorPaym.WBeneName), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 5    NIT/CC                                                           11         ( 52 -  62)
        msb.Append(SKS_PP_StringFormats::strFill(11, (SKS_EFT_Format::getValueFromCode('NIT/CC', mSKS_EFT_FileFormatPaymSpec, mSKS_EFT_VendorPaym.RecId)), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        // 6    Bank Code                                                        4          ( 63 -  66)
        msb.Append(SKS_PP_StringFormats::strFill(4, (SKS_EFT_Format::getValueFromCode('BankCode', mSKS_EFT_FileFormatPaymSpec, mSKS_EFT_VendorPaym.RecId)), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        // 7    Payment Date                                                     8          ( 67 -  74)
        msb.Append(SKS_PP_StringFormats::strDateYYYYMMDD(mSKS_EFT_FileDetail.EffectiveDate));

        // 8    Form of payment                                                  1          ( 75 -  75)
        value = SKS_EFT_Format::getValueFromCode('FormsOfPmt', mSKS_EFT_FileFormatPaymSpec, mSKS_EFT_VendorPaym.RecId);
        msb.Append(SKS_PP_StringFormats::strFill(1, value, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        // 9    Value                                                            15         ( 76 -  90)
        msb.Append(SKS_PP_StringFormats::strMoney(-1 * mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur, 15));

        //10    Target Account                                                   16         ( 91 - 106)
        msb.Append(SKS_PP_StringFormats::strFill(16, mSKS_EFT_FileDetail.DepBankAcct, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //11    Proof                                                            12         (107 - 118)
        msb.Append(SKS_PP_StringFormats::strFill(12, mSKS_EFT_FileDetail.InvoiceNumber, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //12    Target Account Type                                              1          (119 - 119)
        if(mSKS_EFT_FileDetail.DepBankAcctType == BankAccountType::SavingsAccount)
        {
            msb.Append('A');
        }
        else
        {
            msb.Append('C');
        }

        //13    Concept                                                          80         (120 - 199)
        msb.Append(SKS_PP_StringFormats::strFill(80, 'PAGOS' + mSKS_EFT_Bank.ACHCompanyName, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        msb.Append('\n');
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Total</Name>
				<Source><![CDATA[
    public boolean rec_Total()
    {

        //------------------------------------------------------------------------------------------------------
        //Nbr   Description                                                     Length      Position
        // 1    Type of record                                                   1          (  1 -   2)
        // 2    Sequence                                                         4          (  2 -   5)
        // 3    Number of records                                                4          (  6 -   9)
        // 4    Total value                                                      18         ( 10 -  27)
        // 5    Zeros                                                            172        ( 28 - 199)
        //------------------------------------------------------------------------------------------------------

        // 1    Type of record                                                   1          (  1 -   2)
        msb.Append('3');

        // 2    Sequence                                                         4          (  2 -   5)
        msb.Append('9999');

        // 3    Number of records                                                4          (  6 -   9)
        msb.Append(SKS_PP_StringFormats::strFill(4, num2Str(totRec, 0,0,0,0), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        // 4    Total value                                                      18         ( 10 -  27)
        msb.Append(SKS_PP_StringFormats::strMoney(-1 * totVal, 18));

        // 5    Zeros                                                            172       ( 28 - 199)
        msb.Append(SKS_PP_StringFormats::strFill(172, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>