<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_US_CHASE_SUA_23</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_US_CHASE_SUA_23 extends SKS_EFT_Format
/// </summary>
class SKS_EFT_Format_US_CHASE_SUA_23 extends SKS_EFT_Format
{
    #define.FormatVersion('20230419')
    #define.Separator(',')
    #define.DoubleQuotes('"')
        
    int mPayCount;    
    int remitLine;
    SKS_EB_Vendor mSKS_EB_Vendor;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    [SuppressBPWarningAttribute("BPCheckNestedLoopinCode","Necessary to allow the processing of every invoice(inner loop) for every relevant parent file detail record(outer loop)")]
    protected void formatStructure()
    {
        SKS_EFT_FileDetail invSKS_EFT_FileDetail;       

        // Header Record
        this.rec_Header();

        while(mSKS_EFT_FileDetail)
        {
            // Get SKS_EFT_Bank
            this.getSKS_EFT_Bank();

            // Get SKS_EFT_VendorPaym
            this.getSKS_EFT_VendorPaym();

            // Get SKS_EFT_FileFormatPaymSpec();
            this.getSKS_EFT_FileFormatPaymSpec();

            //SKS_EB_Vendor
            this.getSKS_EB_Vendor();//SKS_VSTS_13107

            // Payment Record
            this.rec_Payment();

            while select invSKS_EFT_FileDetail where invSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId
            {
                if(invSKS_EFT_FileDetail.InvoiceNumber != '')
                {
                    // Remittance Record
                    this.rec_Remit(invSKS_EFT_FileDetail);
                }
            }
            remitLine  = 0;
            next mSKS_EFT_FileDetail;
        }

        // Trailer Record
        this.rec_Trailer();
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Header</Name>
				<Source><![CDATA[
    public boolean rec_Header()
    {
        //---------------------------------------------------------------------
        //1 	Header Record Identifier
        //2 	File Version Number
        //3 	Organization ID
        //4 	File Creation Date
        //5 	Response File Date
        //---------------------------------------------------------------------er

        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        str value;

        //1 	Header Record Identifier
        sb.Append(this.wrapField('1000'));

        //2 	File Version Number
        sb.Append(this.wrapField('1.0'));

        //3 	Organization ID
        sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_Bank.ACHCompanyID), 7));

        //4 	File Creation Date
        value = strFmt('%1%2', SKS_PP_StringFormats::strDateMMDDYYYY(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()), DateSeparator::None), SKS_PP_StringFormats::strTimeHHMMSS());
        sb.Append(this.wrapField(value));

        //5 	Response File Date
        sb.Append(this.wrapField('',0,false));
                
        this.fileWrite(sb.ToString());
        
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Payment</Name>
				<Source><![CDATA[
    public boolean rec_Payment()
    {
        //-----------------------------------------------------------------------------------------------
        //1 	SUA Payable Record  Identifier
        //2 	Record Version Number
        //3 	Unique Payable Identifier
        //4 	Payment Group
        //5 	Total Payable Amount
        //6 	Settlement Currency Code
        //7 	Payable Begin Date
        //8 	Payable End Date
        //9 	Merchant Category Code Group
        //10 	Under Tolerance Percentage
        //11 	Over Tolerance Percentage
        //12 	Daily Transaction Limit Number
        //13 	Monthly Transaction Limit Number
        //14 	Single Transaction Limit Amount
        //15 	Daily Transaction Limit Amount
        //16 	Exact-Auth/Single-Transaction Indicator
        //17 	Payable Notes
        //18 	Future Use 1
        //19 	Future Use 2
        //20 	Future Use 3
        //21 	Vendor Identifier 1 (Vendor ID)
        //22 	Vendor Identifier 2 (Set ID)
        //23 	Vendor Identifier 3 (Site ID)
        //24 	Vendor Identifier 4 (Not Used)
        //25 	Vendor Identifier 5 (Not Used)
        //26 	Payee Name
        //27 	Payee Email Address 1
        //28 	Payee Email Address 2
        //29 	Payee Email Address 3
        //30 	Payee Email Address 4
        //31 	Payee Email Address 5
        //32 	Future Use 1
        //33 	Future Use 2
        //34 	Future Use 3
        //35 	Transaction Custom Field Names
        //36 	Transaction Custom Field Values
        //37 	Payable Custom Field Names
        //38    Payable Custom Field Values
        //39    Future Use
        //------------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        str endDate, transIndicator;
        container               locPrimaryEmail;
        DirPartyContactInfoview mDirPartyContactInfoview;
        Amount amt;
        
        mPayCount++;

        //1 	SUA Payable Record  Identifier
        sb.Append(this.wrapField('2100'));

        //2 	Record Version Number
        sb.Append(this.wrapField('1.0'));

        //3 	Unique Payable Identifier
        sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference), 36));

        //4 	Payment Group
        sb.Append(this.wrapField(this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('PmtGroup', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank)), 25));

        //5 	Total Payable Amount
        sb.Append(this.wrapField(num2str(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1, 0, 2, 1, 0)));

        //6 	Settlement Currency Code
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.PaymentCurrencyCode));

        //7 	Payable Begin Date
        sb.Append(this.wrapField(SKS_PP_StringFormats::strDateMMDDYYYY(mSKS_EFT_FileDetail.EffectiveDate, DateSeparator::None)));

        //8 	Payable End Date
        endDate = SKS_EFT_Format::getValueFromCode('PayableEndDate', mSKS_EFT_FileFormatPaymSpec, mSKS_EFT_VendorPaym.RecId);
        sb.Append(this.wrapField(SKS_PP_StringFormats::strDateMMDDYYYY(mSKS_EFT_FileDetail.EffectiveDate + str2Num(endDate), DateSeparator::None)));

        //9 	Merchant Category Code Group
        sb.Append(this.wrapField(this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('MerchCdGroup', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank)), 25));

        //10 	Under Tolerance Percentage
        sb.Append(this.wrapField(''));

        //11 	Over Tolerance Percentage
        sb.Append(this.wrapField(''));

        //12 	Daily Transaction Limit Number
        sb.Append(this.wrapField(''));

        //13 	Monthly Transaction Limit Number
        sb.Append(this.wrapField(''));

        //14 	Single Transaction Limit Amount
        sb.Append(this.wrapField(''));

        //15 	Daily Transaction Limit Amount
        sb.Append(this.wrapField(''));

        //16 	Exact-Auth/Single-Transaction Indicator
        sb.Append(this.wrapField(this.CharacterReplacement(SKS_EFT_Format::getValueFromCode('TransIndicator', mSKS_EFT_FileFormatPaymSpec, mSKS_EFT_VendorPaym.RecId))));

        //17 	Payable Notes
        sb.Append(this.wrapField(this.CharacterReplacement(this.getJournaltxt()), 4000));

        //18 	Future Use 1
        sb.Append(this.wrapField(''));

        //19 	Future Use 2
        sb.Append(this.wrapField(''));

        //20 	Future Use 3
        sb.Append(this.wrapField(''));

        //21 	Vendor Identifier 1 (Vendor ID)
        sb.Append(this.wrapField(''));

        //22 	Vendor Identifier 2 (Set ID)
        sb.Append(this.wrapField(''));

        //23 	Vendor Identifier 3 (Site ID)
        sb.Append(this.wrapField(''));

        //24 	Vendor Identifier 4 (Not Used)
        sb.Append(this.wrapField(''));

        //25 	Vendor Identifier 5 (Not Used)
        sb.Append(this.wrapField(''));

        //26 	Payee Name
        sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_VendorPaym.WBeneName), 100));

        //27 	Payee Email Address 1
        locPrimaryEmail = SKS_EFT_VendorLoad::primaryEmail(mSKS_EFT_VendorPaym.VendCompany, mSKS_EFT_VendorPaym.VendAccount, mSKS_EFT_VendorPaym.WBeneRemittanceLocation);
        mDirPartyContactInfoview = conPeek(locPrimaryEmail,2);      //SKS#DevOps:20266

        if(mDirPartyContactInfoview.Locator)                   //SKS#DevOps:20266
        {
            sb.Append(this.wrapField(mDirPartyContactInfoview.Locator, 50));
        }
        else
        {
            sb.Append(this.wrapField(''));
        }

        //28 	Payee Email Address 2
        sb.Append(this.wrapField(''));

        //29 	Payee Email Address 3
        sb.Append(this.wrapField(''));

        //30 	Payee Email Address 4
        sb.Append(this.wrapField(''));

        //31 	Payee Email Address 5
        sb.Append(this.wrapField(''));

        //32 	Future Use 1
        sb.Append(this.wrapField(''));

        //33 	Future Use 2
        sb.Append(this.wrapField(''));

        //34 	Future Use 3
        sb.Append(this.wrapField(''));

        if(SKS_PP_Setup::find().RegCustomerID == '1443a3')
        {
            //35 	Transaction Custom Field Names
            sb.Append(this.wrapField('Legal Entity|Genus Bank Account'));

            //36 	Transaction Custom Field Values
            sb.Append(this.wrapField(curExt() + '|' + mSKS_EFT_FileDetail.BankBankAcct));
        }
        else
        {
            //35 	Transaction Custom Field Names
            sb.Append(this.wrapField(''));

            //36 	Transaction Custom Field Values
            sb.Append(this.wrapField(''));
        }

        //37 	Payable Custom Field Names
        sb.Append(this.wrapField(''));

        //38 Payable Custom Field Values
        sb.Append(this.wrapField(''));

        //39 Future Use
        sb.Append(this.wrapField('',0,false));

        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Remit</Name>
				<Source><![CDATA[
    boolean rec_Remit(SKS_EFT_FileDetail invSKS_EFT_FileDetail)
    {
        //---------------------------------------------------------------------------------
        //1 	Remittance Record Identifier
        //2 	Record Version Number
        //3 	Unique Payable Identifier
        //4 	Remittance Line Number
        //5 	Invoice Number
        //6 	Invoice Date
        //7 	PO Number
        //8 	Invoice Total Amount
        //9 	Discount Amount
        //10 	Total Amount Paid
        //11 	Remittance Comments
        //12 	Adjustment Amount
        //13 	Future Use 1
        //14 	Future Use 2
        //15 	Future Use 3
        //---------------------------------------------------------------------------------

        Amount amt;
        System.Text.StringBuilder sb = new System.Text.StringBuilder();

        remitLine++;
        //1 	Remittance Record Identifier
        sb.Append(this.wrapField('3000'));

        //2 	Record Version Number
        sb.Append(this.wrapField('1.0'));

        //3 	Unique Payable Identifier
        sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference), 36));

        //4 	Remittance Line Number
        sb.Append(this.wrapField(num2Str(remitLine, 0,0,0,0), 4));

        //5 	Invoice Number
        sb.Append(this.wrapField(this.CharacterReplacement(invSKS_EFT_FileDetail.InvoiceNumber), 50));

        //6 	Invoice Date
        sb.Append(this.wrapField(SKS_PP_StringFormats::strDateMMDDYYYY(invSKS_EFT_FileDetail.InvoiceDate, DateSeparator::None)));

        //7 	PO Number
        sb.Append(this.wrapField(''));

        //8 	Invoice Total Amount
        sb.Append(this.wrapField(num2str(invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1, 0, 2, 1, 0)));

        //9 	Discount Amount
        sb.Append(this.wrapField(num2str(invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur * -1, 0, 2, 1, 0)));

        //10 	Total Amount Paid
        amt = invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur + invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur;
        sb.Append(this.wrapField(num2str(amt * -1, 0, 2, 1, 0)));

        //11 	Remittance Comments
        sb.Append(this.wrapField(''));

        //12 	Adjustment Amount
        sb.Append(this.wrapField(''));

        //13 	Future Use 1
        sb.Append(this.wrapField(''));

        //14 	Future Use 2
        sb.Append(this.wrapField(''));

        //15 	Future Use 3
        sb.Append(this.wrapField('',0,false));

        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Trailer</Name>
				<Source><![CDATA[
    public boolean rec_Trailer()
    {
        //-------------------------------------------------------------------------
        //1 	Footer Record Identifier
        //2 	Count Submitted Payable Requests
        //3 	Count Successfully Processed
        //4 	Count Failed
        //---------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();

        //1 	Footer Record Identifier
        sb.Append(this.wrapField('5000'));

        //2 	Count Submitted Payable Requests
        sb.Append(this.wrapField(num2Str(mPayCount, 0, 0, 0, 0), 6));

        //3 	Count Successfully Processed
        sb.Append(this.wrapField(''));

        //4 	Count Failed
        sb.Append(this.wrapField('',0,false));
        
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJournaltxt</Name>
				<Source><![CDATA[
    private str getJournaltxt()
    {
        LedgerJournalTrans ledgerJournalTrans;
    
        select crossCompany Txt from ledgerJournalTrans where
            ledgerJournalTrans.RecId == mSKS_EFT_FileDetail.PaymentLineRecId;
    
        return ledgerJournalTrans.Txt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wrapField</Name>
				<Source><![CDATA[
    private str wrapField(str _field = '', int _fieldLength = 0, boolean _addSeparator = true)
    {
        str text;
        ;

        if(_fieldLength > 0)
        {
            text = subStr(_field, 1, _fieldLength);
        }
        else
        {
            text = _field;
        }
        if(strContains(text, ','))
        {
            text = #DoubleQuotes + text + #DoubleQuotes;
        }
        if(_addSeparator)
        {
            text += #Separator;
        }
        return text;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSKS_EB_Vendor</Name>
				<Source><![CDATA[
    void getSKS_EB_Vendor()//SKS_VSTS_13107
    {
        if(mSKS_EB_Vendor.VendAccount != mSKS_EFT_FileDetail.AccountNum || mSKS_EB_Vendor.VendCompany != mSKS_EFT_FileDetail.AccountCompany)
        {
            mSKS_EB_Vendor = SKS_EB_Vendor::find(mSKS_EFT_FileDetail.AccountCompany, mSKS_EFT_FileDetail.AccountNum);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>