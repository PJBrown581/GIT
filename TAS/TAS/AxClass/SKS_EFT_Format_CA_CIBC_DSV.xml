<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_CA_CIBC_DSV</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_CA_CIBC_DSV Class
/// </summary>
class SKS_EFT_Format_CA_CIBC_DSV extends SKS_EFT_Format
{
    #define.FormatVersion('20230501')
    #define.CHK('CHK')
    #define.Separator('|')
    SKS_EFT_FileDetail invSKS_EFT_FileDetail;
    str gSenderId;
    int gCountOfPmt;
    AmountMST gTotPmtAmt;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
        protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    /// <summary>
    /// formatStructure
    /// </summary>
    [SuppressBPWarningAttribute("BPCheckNestedLoopinCode","Necessary to allow the processing of every invoice(inner loop) for every relevant parent file detail record(outer loop)")]
    protected void formatStructure()
    {
        while(mSKS_EFT_FileDetail)
        {
            
            while select invSKS_EFT_FileDetail where invSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId
            {

       
                this.rec_Details(invSKS_EFT_FileDetail);
            }
        
            gSenderId = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('SenderId', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank));

            next mSKS_EFT_FileDetail;
        }
       
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Details</Name>
				<Source><![CDATA[
   /// <summary>
    /// rec_Details
   /// </summary>
    /// <param name = "_invSKS_EFT_FileDetail">_invSKS_EFT_FileDetail</param>
   /// <returns>true or false</returns>
    public boolean rec_Details(SKS_EFT_FileDetail _invSKS_EFT_FileDetail)
    {
        
        str SenderId,AppFormat,ChkIns,Mailns,RetAddCode;
        AmountMST amt,DisAmt,Gross,PayAmt;

        SenderId = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('SenderId', mSKS_EFT_FileDetail.RecId,SKS_EFT_CodeLookupType::CodeLookupBank));
        AppFormat= this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('AppFormat', mSKS_EFT_FileDetail.RecId,SKS_EFT_CodeLookupType::CodeLookup));
        ChkIns= this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('ChkIns', mSKS_EFT_FileDetail.RecId,SKS_EFT_CodeLookupType::CodeLookup));
        Mailns= this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('MailIns', mSKS_EFT_FileDetail.RecId,SKS_EFT_CodeLookupType::CodeLookup));
        RetAddCode= this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('RetAddCode', mSKS_EFT_FileDetail.RecId,SKS_EFT_CodeLookupType::CodeLookupBank));


        System.Text.StringBuilder sb = new System.Text.StringBuilder();

        gTotPmtAmt += this.getPositiveAmount( _invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur);
        gCountOfPmt++;

        //Payment Type
        sb.Append(this.wrapField('CHK'));

        //Sender ID
        sb.Append(this.wrapField(SenderId,15));

        //Application Format
        if(AppFormat)
        {
            sb.Append(this.wrapField(AppFormat,3));
        }
        else
        {
            sb.Append('AP0');
        }

        //Transaction NUmber
        sb.Append(this.wrapField(SKS_PP_StringFormats::strRight(mSKS_EFT_FileDetail.PaymentReference, 5)));

        //Check Instruction
        if(ChkIns)
        {
            sb.Append(this.wrapField(ChkIns,1));
        }
        else
        {
            sb.Append('X');
        }

        //Mail Instruction
        if(Mailns)
        {
            sb.Append(this.wrapField(Mailns,2));
        }
        else
        {
            sb.Append('UM');

        }

        //Return Address Code
        sb.Append(this.wrapField(RetAddCode,2));

        //Effective Date
        sb.Append(this.wrapField(SKS_PP_StringFormats::strDateYYYYMMDD(mSKS_EFT_FileDetail.EffectiveDate, DateSeparator::None)));

        //Payment Amount
        PayAmt = this.getPositiveAmount(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur);
        sb.Append(strRem(num2str(PayAmt,0,2,0,0),'.'));
        sb.Append(#Separator);


        if (strLen(mSKS_EFT_FileDetail_VendAddress.BeneName) > 35)
        {
            //Payee Name 1
            sb.Append(this.wrapField(subStr(mSKS_EFT_FileDetail_VendAddress.BeneName,1,35)));

            //Payee Name 2
            sb.Append(this.wrapField(subStr(mSKS_EFT_FileDetail_VendAddress.BeneName,36,70)));
        }
        else
        {
            //Payee NAme 1
            sb.Append(this.wrapField(SKS_PP_StringFormats::strRight(mSKS_EFT_FileDetail_VendAddress.BeneName, 35)));
       
            //Payee Name2
            sb.Append(this.wrapField('', 35));
        }

        //    Payee Address 1
        sb.Append(this.wrapField(subStr(this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneAddr), 1, 35)));

        //    Payee Address 2
        sb.Append(this.wrapField(subStr(this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneAddr2), 1, 35)));

        //    Payee Address 3
        sb.Append(this.wrapField(subStr(this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneAddr3), 1, 35)));

        //    Payee City
        sb.Append(this.wrapField(subStr(this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneCity), 1, 27)));

        //    Payee State
        sb.Append(this.wrapField(subStr(this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneState), 1, 2)));

        
        //    Payee zipCode
        sb.Append(this.wrapField(subStr(this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneZipPostal), 1, 9)));

        //    Payee Country
        sb.Append(this.wrapField(this.CharacterReplacement(LogisticsAddressCountryRegion::findByISOCode(mSKS_EFT_FileDetail_VendAddress.BeneCountryRegionId).CountryRegionId)));

        //  Check Serial number
        sb.Append(this.wrapField(SKS_PP_StringFormats::strRight(mSKS_EFT_FileDetail.PaymentReference ,10)));


        Gross = this.getPositiveAmount(_invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur + _invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur);
        amt =this.getPositiveAmount( _invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur);
        DisAmt = this.getPositiveAmount(_invSKS_EFT_FileDetail.InvoiceDiscAmountCur *-1);

        // Invoice Gross Amount
        sb.Append(strRem(num2str(Gross,0,2,0,0),'.'));
        sb.Append(#Separator);

        //Amount Paid
        sb.Append(strRem(num2str(amt,0,2,0,0),'.'));
        sb.Append(#Separator);

             
        //         Adjusted Amount
        sb.Append(strRem(num2str(DisAmt,0,2,0,0),'.'));
        sb.Append(#Separator);

        // Net amount
        
        sb.Append(strRem(num2str(amt, 0, 2, 0, 0),'.'));
        sb.Append(#Separator);

        //Currency Type
        sb.Append(this.wrapField(SKS_PP_StringFormats::strRight(mSKS_EFT_FileDetail.CurrencyCode ,3)));

        //Payment Data
        sb.Append(this.wrapField('',50));

        //Invoice date
        sb.Append(this.wrapField(SKS_PP_StringFormats::strDateYYYYMMDD(invSKS_EFT_FileDetail.InvoiceDate, DateSeparator::None)));

        //Invoice Number
        sb.Append(this.wrapField(SKS_PP_StringFormats::strRight(_invSKS_EFT_FileDetail.InvoiceNumber ,17)));

        //Description Text
        sb.Append(this.wrapField('',30));

        //Vendor Number
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.AccountNum,10,false));


        this.fileWrite(sb.ToString());
               
     
        return true ;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wrapField</Name>
				<Source><![CDATA[
    /// <summary>
    /// wrapField
    /// </summary>
    /// <param name = "_field">_field</param>
    /// <param name = "_fieldLength">_fieldLength</param>
    /// <param name = "_addSeparator">_addSeparator</param>
    /// <returns>string</returns>
    private str wrapField(str _field = '', int _fieldLength = 0, boolean _addSeparator = true)
    {
        str text;

        if(_fieldLength > 0)
        {
            text = subStr(_field, 1, _fieldLength);
        }
        else
        {
            text = _field;
        }
        if(_addSeparator)
        {
            text += #Separator;
        }
        return text;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectPaymentRecords</Name>
				<Source><![CDATA[
    [SuppressBPWarning('BPErrorSelectUsingFirstOnly', 'The buffer is used in next statement or in a datasource query loop.')]
    protected void selectPaymentRecords()
    {
        //------------------------------------------------------------------------------------------------------
        // Standard payment selction
        // Override if different selection is need for a format
        //------------------------------------------------------------------------------------------------------
    
        //Order by clause must match the clause in the SKS_EFT_Processing.SumByPayment
        select * from mSKS_EFT_FileDetail
            join mSKS_EFT_FileDetail_VendAddress
            join mSKS_EFT_FileDetail_BenBank
            join mSKS_EFT_FileDetail_Intermediary
              order by mSKS_EFT_FileDetail.PaymentCompany, //SKS_VSTS_12798
                   mSKS_EFT_FileDetail.RecordSection,
                   mSKS_EFT_FileDetail.PaymMode,
                   mSKS_EFT_FileDetail.BankAccountId,
                   mSKS_EFT_FileDetail.PaymentCurrencyCode,
                   mSKS_EFT_FileDetail.PaymSpec,
                   mSKS_EFT_FileDetail.EffectiveDate,
                   mSKS_EFT_FileDetail.DepCountryRegionId,
                   mSKS_EFT_FileDetail.RecordType,
                   mSKS_EFT_FileDetail.AccountNum,
                   mSKS_EFT_FileDetail.PaymentReference,
                   mSKS_EFT_FileDetail.RecId
          where mSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                mSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                mSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_VendAddress.RefRecId &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_BenBank.RefRecId &&
            mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_Intermediary.RefRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>controlfilespecific</Name>
				<Source><![CDATA[
    protected void controlfilespecific(SysDictClass _obj, Object _classInstance)
    {
        _obj.callObject('setPmtCount', _classInstance, gCountOfPmt);
        _obj.callObject('setPmtAmt', _classInstance, gTotPmtAmt);
        _obj.callObject('setSenderId', _classInstance, gSenderId);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>