<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_US_USBANK_EDI820</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_US_USBANK_EDI820 extends SKS_EFT_Format
/// </summary>
class SKS_EFT_Format_US_USBANK_EDI820 extends SKS_EFT_Format
{
    #define.FormatVersion('20220928')
    #define.LineEnd('~')
    #define.Separator('*')
    #define.ACHCCP('ACH-CCP')
    #define.ACHCTX('ACH-CTX')
    #define.FWT('FWT')
    #define.SWT('SWT')
    #define.CHKPBCFC('CHK-PBC-FC')
    #define.CC('CC')
    #define.UBP('USBankPay')
    SKS_EFT_EDI mSKS_EFT_EDI;
    System.Text.StringBuilder msb;
    str mSenderControlNbr;
    str mTimestamp;
    str mDataSeparator;
    int mSCN;
    int mTranSetCount;
    int mSegmentCount;
    int mCtrlQuantity;
    int entCount;
    AmountMST mAMTTotal;
    SKS_EB_Vendor mSKS_EB_Vendor;
    str req831;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>appendField</Name>
				<Source><![CDATA[
    private void appendField(str _value)
    {
        str value;
    
        //Strip tabs
        value = strRem(_value, '\t');
    
        //Trim white spaces
        value = strRTrim(value);
    
        msb.Append(value);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildString</Name>
				<Source><![CDATA[
    boolean buildString()
    {
        System.Text.StringBuilder sb;
        str record = msb.ToString();
        int pos = 1;
        int length;
        int recMod;
        int lineCount;
        str value;
        int totalCount = 1;
    
        length = strLen(record);
        lineCount = length div 80;
        recMod = length mod 80;
    
        if(recMod > 0)
        {
            lineCount++;
        }
    
        // Create the compressed records
        while(lineCount >= totalCount)
        {
            sb = new System.Text.StringBuilder();
            value = subStr(record, pos, 80);
            pos = pos + 80;
    
            // Pmt Related Info 04-83
            sb.Append(value);
            this.fileWrite(sb.ToString());
            totalCount++;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>CtrlFile831</Name>
				<Source><![CDATA[
    private void CtrlFile831()
    {
        //------------------------------------------------------------------------------------------------------
        //Format Structure
        //ID    Req     Max
        //ISA   M       1
        //GS    M       1
        //ST    M       1
        //BGN   M       1
        //DTM   O       2
        //N9    O      >1
        //TRN   O      >1
        //AMT   O       1
        //QTY   O       1
        //SE    M       1
        //GE    M       1
        //IEA   M       1
        //------------------------------------------------------------------------------------------------------
    
        //GS    M       1
        this.rec_GS831();
    
        //ST    M       1
        this.rec_ST('831');
    
        //BGN   M       1
        this.rec_BGN();
    
        //DTM   O       2
        this.rec_DTM831();
    
        //DTM   O       2
        this.rec_DTM831(true);
    
        //N9    O      >1
        //TRN   O      >1
        this.rec_TRN831();
    
        //AMT   O       1
        this.rec_AMT();
    
        //QTY   O       1
        this.rec_QTY();
    
        //SE    M       1
        this.rec_SE(mSegmentCount);
    
        //GE    M       1
        this.rec_GE(1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    protected void formatStructure()
    {
        SKS_EFT_FileDetail invSKS_EFT_FileDetail;
        boolean firstRec = true;
    
        msb = new System.Text.StringBuilder();
    
        //Set Control Number
        mSCN = 0;
    
        while(mSKS_EFT_FileDetail)
        {
            mCtrlQuantity++;
    
            // Get SKS_EFT_Bank
            this.getSKS_EFT_Bank();
    
            // Get SKS_EB_Vendor
            this.getSKS_EB_Vendor();
    
            // Get SKS_EFT_VendorPaym
            this.getSKS_EFT_VendorPaym();
    
            // Get SKS_EFT_FileFormatPaymSpec
            this.getSKS_EFT_FileFormatPaymSpec();
    
            //Get Remittance Information
            this.getRemittanceAddress((mSKS_EFT_FileFormatPaymSpec.UseCheckNumber||mSKS_EFT_FileFormatPaymSpec.TransactionCode==#CC));
    
            //Get Separator
            this.getEDIDataSeparator();
    
            // Initialize EDI class
            mSKS_EFT_EDI = new SKS_EFT_EDI(mSKS_EFT_File.FormatId, mSKS_EFT_FileDetail.PaymSpec, mSKS_EFT_VendorPaym.EDI820Layout, mSKS_EFT_File.RecId);
            mSKS_EFT_EDI.setEFTFileId(num2str(mSKS_EFT_FileFormat.NextFileId,0,0,0,0));
    
            if(firstRec)
            {
                firstRec = false;
                this.rec_ISA();
                this.rec_GS();
            }
    
            // Heading
            this.rec_ST('820');
            this.rec_BPR();
    
            switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
            {
                Case #FWT:
                Case #SWT:
                    this.rec_NTEOTH1();
                    this.rec_NTEOTH2();
                    this.rec_NTEOTH3();
                    this.rec_NTEOTH4();
                    break;
            }
    
            switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
            {
                Case #CC:
                    break;
                Default:
                    this.rec_TRN();
                    break;
            }
    
            switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
            {
                Case #SWT:
                Case #FWT:
                    this.rec_CUR();
                    if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #SWT)
                    {
                        this.rec_REF('02');
                    }
                    this.rec_REF('93');
                    break;
                Case #CHKPBCFC:
                    if(mSKS_EFT_FileFormatPaymSpec.FormatId != #UBP)
                    {
                        this.rec_REF('CK');
                        this.rec_REF('S5');
                    }
                    break;
                Case #ACHCTX:
                Case #ACHCCP:
                    if(mSKS_EFT_FileFormatPaymSpec.FormatId != #UBP)
                    {
                        this.rec_REF('CK');
                    }
                    break;
                Case #CC:
                    this.rec_REF('CK');
                    this.rec_REF('8M');
                    break;
            }
    
            if(mSKS_EFT_FileFormatPaymSpec.TransactionCode != #CC)
            {
                this.rec_N1PR();
            }
    
            if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #FWT ||
               mSKS_EFT_FileFormatPaymSpec.TransactionCode == #SWT)
            {
                this.rec_N1RB();
                if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #SWT && mSKS_EFT_VendorPaym.WIntBankSwift)
                {
                    this.rec_N1BK();
                    this.rec_N3BK();
                    this.rec_N4BK();
                }
            }
    
            this.rec_N1PE();
    
            if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CHKPBCFC || mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CC ||
               mSKS_EFT_FileFormatPaymSpec.TransactionCode == #FWT || mSKS_EFT_FileFormatPaymSpec.TransactionCode == #SWT)
            {
                this.rec_N3PE();
                this.rec_N4PE();
            }
    
            if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CC)
            {
                this.rec_REF('ZA');
                this.rec_PER();
            }
    
            if(mSKS_EFT_FileFormatPaymSpec.TransactionCode != #FWT && mSKS_EFT_FileFormatPaymSpec.TransactionCode != #SWT)
            {
                entCount = 1;
                this.rec_ENT();
    
                if(mSKS_EFT_FileDetail.RecordSummary == SKS_EFT_RecordSummary::Invoice)
                {
                    entCount++;
                    this.rec_RMRIV(mSKS_EFT_FileDetail);
                    this.rec_DTM(mSKS_EFT_FileDetail);
                }
                else
                {
                    while select invSKS_EFT_FileDetail where invSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId
                    {
                        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CC && entCount == 1)
                        {
                            this.rec_RMR4C(invSKS_EFT_FileDetail);
                            this.rec_DTM036(invSKS_EFT_FileDetail);
                            this.rec_IT1();
                            this.rec_SAC();
                            this.rec_TXI(invSKS_EFT_FileDetail);
                            this.rec_RMR8X(invSKS_EFT_FileDetail);
                        }
    
                        entCount++;
    
                        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CC)
                        {
                            this.rec_ENT();
                        }
    
                        this.rec_RMRIV(invSKS_EFT_FileDetail);
    
                        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CHKPBCFC)
                        {
                            this.rec_REFPO(invSKS_EFT_FileDetail);
                            this.rec_REFVV(invSKS_EFT_FileDetail);
                        }
    
                        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CC)
                        {
                            this.rec_NTEADD(invSKS_EFT_FileDetail);
                        }
                        else
                        {
                            this.rec_DTM(invSKS_EFT_FileDetail);
                        }
                    }
                }
            }
    
            this.rec_SE(mSegmentCount);
    
            mSegmentCount = 0;

            req831 = SKS_EFT_Format::getValueFromCode('ExcludeControlRecord', mSKS_EFT_FileFormatPaymSpec, mSKS_EFT_VendorPaym.RecId);  //SKS#DevOps:16412
    
            next mSKS_EFT_FileDetail;
        }
    
        this.rec_GE(mTranSetCount);
    
        if(req831 == 'N')
        {
            this.CtrlFile831();
        }
        this.rec_IEA();
    
        this.buildString();
    }

]]></Source>
			</Method>
			<Method>
				<Name>get_POInfo</Name>
				<Source><![CDATA[
    private str get_POInfo(SKS_EFT_FileDetail _invSKS_EFT_FileDetail)
    {
        VendInvoiceJour vendInvoiceJour;
        Container companyInfo;
        str value = '';
    
        companyInfo += _invSKS_EFT_FileDetail.InvoiceCompany;
    
        // See if PO exists
        if(conPeek(companyInfo, 1) != '')
        {
            select firstOnly crossCompany:companyInfo PurchId, InvoiceAccount, InvoiceDate, InvoiceId from vendInvoiceJour where
                vendInvoiceJour.InvoiceAccount == _invSKS_EFT_FileDetail.AccountNum &&
                vendInvoiceJour.InvoiceDate == _invSKS_EFT_FileDetail.InvoiceDate &&
                vendInvoiceJour.InvoiceId == _invSKS_EFT_FileDetail.InvoiceNumber &&
                vendInvoiceJour.PurchId != '';
    
            if(vendInvoiceJour)
            {
                value = vendInvoiceJour.PurchId;
            }
        }
        return this.CharacterReplacement(value);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEDIDataSeparator</Name>
				<Source><![CDATA[
    private void getEDIDataSeparator()
    {
        SKS_EFT_EDI820 lSKS_EFT_EDI820;
    
        if(!mDataSeparator)
        {
            select firstonly DataElementSeparator, FormatId, PaymSpec, CompanyName from lSKS_EFT_EDI820
            order by CompanyName desc, PaymSpec desc, FormatId desc
            where
                (lSKS_EFT_EDI820.FormatId == mSKS_EFT_FileDetail.FormatId && lSKS_EFT_EDI820.PaymSpec == mSKS_EFT_FileDetail.PaymSpec && lSKS_EFT_EDI820.CompanyName == mSKS_EFT_VendorPaym.EDI820Layout) ||
                (lSKS_EFT_EDI820.FormatId == mSKS_EFT_FileDetail.FormatId && lSKS_EFT_EDI820.PaymSpec == '' && lSKS_EFT_EDI820.CompanyName == mSKS_EFT_VendorPaym.EDI820Layout);
    
            mDataSeparator = lSKS_EFT_EDI820.DataElementSeparator;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSegment</Name>
				<Source><![CDATA[
    private str getSegment(SKS_EFT_EDI820_Segment _SKS_EFT_EDI820_Segment, int _pos)
    {
        SKS_EFT_EDI820_Data lSKS_EFT_EDI820_Data;
        str value;
        UserId lUserId;
        xSession session;
    
        session = new xSession();
        lUserId = session.userId();
    
        select firstonly FileRecId, UserId, Segment, FieldNbr, DataValue from lSKS_EFT_EDI820_Data where
                                                 lSKS_EFT_EDI820_Data.FileRecId == mSKS_EFT_File.RecId &&
                                                 lSKS_EFT_EDI820_Data.UserId == lUserId &&
                                                 lSKS_EFT_EDI820_Data.Segment == _SKS_EFT_EDI820_Segment &&
                                                 lSKS_EFT_EDI820_Data.FieldNbr == _pos;
    
        value = SKS_EFT_EDI::getDbValue(lSKS_EFT_EDI820_Data.DataValue);
        return value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSKS_EB_Vendor</Name>
				<Source><![CDATA[
    void getSKS_EB_Vendor()
    {
        //------------------------------------------------------------------------------------------------------
        // Load or refresh global mVendBankAccount
        //------------------------------------------------------------------------------------------------------
        if(mSKS_EB_Vendor.VendAccount != mSKS_EFT_FileDetail.AccountNum || mSKS_EB_Vendor.VendCompany != mSKS_EFT_FileDetail.AccountCompany)
        {
            mSKS_EB_Vendor = SKS_EB_Vendor::find(mSKS_EFT_FileDetail.AccountCompany, mSKS_EFT_FileDetail.AccountNum);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyRecord</Name>
				<Source><![CDATA[
    private str modifyRecord(str _parseString, int _pos, str _replace)
    {
        int startPos;
        int tempPos;
        int findCounter;
        int valLength = strLen(_replace);
        str newVal;
        TextBuffer textBuffer;
    
        textBuffer = new TextBuffer();
        textBuffer.setText(_parseString);
        textBuffer.regularExpressions(false);
        textBuffer.ignoreCase(true);
    
        // Search for string
        while (textBuffer.find(mDataSeparator, tempPos))
        {
            tempPos = textBuffer.matchPos() + strLen(mDataSeparator);
            findCounter++;
    
            // If found check to see if the correct occurrence
            if(findCounter == _pos)
            {
                // Set start position to current poisition plus the length of the string so it starts after the found string
                startPos = tempPos;
                break;
            }
        }
    
        // If string occurrence was not found leave value as empty
        if(startPos != 0)
        {
            newVal = subStr(_parseString, 1, startPos-1) + _replace + subStr(_parseString, startPos + valLength, strLen(_parseString));
            return newVal;
        }
        else
        {
            return _parseString;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_AMT</Name>
				<Source><![CDATA[
    boolean rec_AMT()
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Description                    Max     Type    Comment
        //01    Amount Qualifier Code           3       ID
        //02    Monetary Amount                 18      R
        //03    Credit/Debit Flag Code          1       ID
        //------------------------------------------------------------------------------------------------------
        this.appendField('AMT');
        this.appendField(#Separator);
    
        //01    Amount Qualifier Code
        this.appendField('OP');
        this.appendField(#Separator);
    
        //02    Monetary Amount
        this.appendField(num2str((mAMTTotal),0,2,0,0));
        this.appendField(#Separator);
    
        //03    Credit/Debit Flag Code
        this.appendField('C');
        this.appendField(#LineEnd);
    
        mSegmentCount++;
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_BGN</Name>
				<Source><![CDATA[
    boolean rec_BGN()
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Transaction Set Purpose Code                        2       ID
        //02    Reference Identification                            30      AN      Payment currency
        //03    Date                                                8       DT
        //------------------------------------------------------------------------------------------------------
    
        this.appendField('BGN');
        this.appendField(#Separator);
    
        //01    Transaction Set Purpose Code
        this.appendField('00');
        this.appendField(#Separator);
    
        //02    Reference Identification
        this.appendField(SKS_PP_StringFormats::strRight(mSKS_EFT_File.FileNbr,30));
        this.appendField(#Separator);
    
        //03    Date
        this.appendField(SKS_PP_StringFormats::strDateYYYYMMDD(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone())));
        this.appendField(#Separator);
    
        //04    Time
        this.appendField(mTimestamp);
    
        this.appendField(#LineEnd);
    
        mSegmentCount++;
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_BPR</Name>
				<Source><![CDATA[
    boolean rec_BPR()
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Trans. Handling Code                                1       ID
        //02    Monetary Amount                                     10      R
        //03    Credit/Debit Flag Code                              1       ID
        //04    Payment Method Code                                 3       ID
        //05    Payment Format                                      3       ID
        //06    DFI ID No. Qualifier                                2       ID
        //07    DFI ID Number                                       9       AN
        //08    Acct. No. Qual. Code                                2       ID
        //09    Account Number                                      12      AN
        //10    Orig. Co. ID                                        10      AN
        //11    Orig. Co. Code                                      9       AN
        //12    RDFI ID No. Qualifier                               2       ID
        //13    RDFI ID Number                                      9       N
        //14    Acct. No. Qual Code                                 2       ID
        //15    Account Number                                      35      AN
        //16    Effective Entry Date                                8       DT
        //------------------------------------------------------------------------------------------------------
        AmountMST amt;
        date effectivDate;
    
        mSegmentCount++;
    
        this.appendField('BPR');
        this.appendField(#Separator);
    
        //01    Trans. Handling Code
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            Case #FWT:
            Case #SWT:
                this.appendField('D');
                break;
            Default:
                this.appendField('C');
                break;
        }
        this.appendField(#Separator);
    
        //02    Monetary Amount
        amt = -1 * mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur;
        mAMTTotal += amt;
        this.appendField(num2str(amt,0,2,0,0));
        this.appendField(#Separator);
    
        //03    Credit/Debit Flag Code
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            Case #CC:
                this.appendField('D');
                break;
            Default:
                this.appendField('C');
                break;
        }
        this.appendField(#Separator);
    
        //04    Payment Method Code
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            Case #ACHCCP:
            Case #ACHCTX:
                this.appendField('ACH');
                break;
            Case #FWT:
                this.appendField('FWT');
                break;
            Case #SWT:
                this.appendField('SWT');
                break;
            Case #CHKPBCFC:
                this.appendField('CHK');
                break;
            Case #CC:
                this.appendField('CDA');
                break;
        }
        this.appendField(#Separator);
    
        //05    Payment Format
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            Case #ACHCCP:
                this.appendField('CCP');
                break;
            Case #ACHCTX:
                this.appendField('CTX');
                break;
            Case #CHKPBCFC:
                this.appendField('PBC');
                break;
        }
        this.appendField(#Separator);
    
        //06    DFI ID No. Qualifier
        this.appendField('01');
        this.appendField(#Separator);
    
        //07    DFI ID Number
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            Case #ACHCCP:
            Case #ACHCTX:
                if(mSKS_EFT_FileFormatPaymSpec.PaymSpec == #UBP)
                {
                    this.appendField(mSKS_EFT_FileDetail.DepBankTransit);
                }
                else if(mSKS_EFT_FileDetail.BankOrigDFI != '')
                {
                    this.appendField(mSKS_EFT_FileDetail.BankOrigDFI);
                }
                else
                {
                    this.appendField(mSKS_EFT_FileDetail.BankBankTransit);
                }
                break;
            case #CC:
                this.appendField('091000022');
                break;
            default:
                this.appendField(mSKS_EFT_FileDetail.BankBankTransit);
                break;
        }
        this.appendField(#Separator);
    
        //08    Acct. No. Qual. Code
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            Case #FWT:
            Case #SWT:
                if(mSKS_EFT_FileDetail.BankAcctType == BankAccountType::SavingsAccount)
                {
                    this.appendField('SG');
                }
                else
                {
                    this.appendField('DA');
                }
                break;
            Case #CC:
                this.appendField('CC');
                break;
            default:
                this.appendField('DA');
                break;
        }
        this.appendField(#Separator);
    
        //09    Account Number
        switch(mSKS_EFT_FileFormatPaymSpec.PaymSpec)
        {
            Case #UBP:
                this.appendField(mSKS_EFT_FileDetail.DepBankAcct);
                break;
            Case #CC:
                this.appendField('1111111111111111');
                break;
            default:
                this.appendField(mSKS_EFT_FileDetail.BankBankAcct);
                break;
        }
        this.appendField(#Separator);
    
        //10    Orig. Co. ID
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            Case #ACHCCP:
            Case #ACHCTX:
                this.appendField(substr(mSKS_EFT_FileDetail.FileACHCompanyId,1,10));
                break;
        }
        this.appendField(#Separator);
    
        //11    Orig. Co. Code
        this.appendField(#Separator);
    
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            Case #CHKPBCFC:
            Case #CC:
                this.appendField(#Separator);
                this.appendField(#Separator);
                break;
            case #SWT:
                //12    DFI ID No. Qualifier
                this.appendField('02');
                this.appendField(#Separator);
    
                //13    DFI ID Number
                this.appendField(mSKS_EFT_FileDetail.DepSwiftNo);
                this.appendField(#Separator);
                break;
            default:
                //12    DFI ID No. Qualifier
                this.appendField('01');
                this.appendField(#Separator);
    
                //13    DFI ID Number
                this.appendField(mSKS_EFT_FileDetail.DepBankTransit);
                this.appendField(#Separator);
                break;
        }
    
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            Case #CHKPBCFC:
            Case #CC:
                this.appendField(#Separator);
                this.appendField(#Separator);
                break;
            default:
                //14    Acct. No. Qual Code
                if(mSKS_EFT_FileDetail.DepBankAcctType == BankAccountType::SavingsAccount)
                {
                    this.appendField('SG');
                }
                else
                {
                    this.appendField('DA');
                }
                this.appendField(#Separator);
    
                //15    Account Number
                this.appendField(mSKS_EFT_FileDetail.DepBankAcct);
                this.appendField(#Separator);
                break;
        }
    
        //16    Effective Entry Date
        effectivDate = SKS_EFT_Processing::GetOffsetDate(0, mSKS_EFT_File.EffectiveDate, mSKS_EFT_Bank.BankHolidayGroupId);
        this.appendField(SKS_PP_StringFormats::strDateYYYYMMDD(effectivDate));
        this.appendField(#LineEnd);
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_CUR</Name>
				<Source><![CDATA[
    boolean rec_CUR()
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Entity ID Code                                      3       ID
        //02    Currency Code                                       3       ID      Payment currency
        //03    Exchange Rate                                       10      R
        //04    Entity ID Code                                      3       ID
        //05    Currency Code                                       3       ID      Payment currency
        //------------------------------------------------------------------------------------------------------
        mSegmentCount++;
    
        this.appendField('CUR');
        this.appendField(#Separator);
    
        //01     Entity ID Code
        this.appendField('PR');
        this.appendField(#Separator);
    
        //02    Currency Code
        this.appendField(mSKS_EFT_FileDetail.PaymentCurrencyCode);
    
        //03    Exchange Rate
        this.appendField(#LineEnd);
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_DTM</Name>
				<Source><![CDATA[
    boolean rec_DTM(SKS_EFT_FileDetail invSKS_EFT_FileDetail)
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Date/Time Qualifier                                 3       ID
        //02    Date                                                4       Date    CCYYMMDD
        //------------------------------------------------------------------------------------------------------
        this.appendField('DTM');
        this.appendField(#Separator);
    
        //01     Date/Time Qualifier
        this.appendField('003');
        this.appendField(#Separator);
    
        //03    Date
        if(!invSKS_EFT_FileDetail.InvoiceDate)
        {
            this.appendField(SKS_PP_StringFormats::strDateYYYYMMDD(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone())));
        }
        else
        {
            this.appendField(SKS_PP_StringFormats::strDateYYYYMMDD(invSKS_EFT_FileDetail.InvoiceDate));
        }
    
        this.appendField(#LineEnd);
    
        mSegmentCount++;
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_DTM036</Name>
				<Source><![CDATA[
    boolean rec_DTM036(SKS_EFT_FileDetail invSKS_EFT_FileDetail)
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Date/Time Qualifier                                 3       ID
        //02    Date                                                4       Date    CCYYMMDD
        //------------------------------------------------------------------------------------------------------
        int exDays = date2num(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()));
    
        this.appendField('DTM');
        this.appendField(#Separator);
    
    
        //01     Date/Time Qualifier
        this.appendField('036');
        this.appendField(#Separator);
    
        //03    Date
        //Client uses 90 days from file generation date as the expiration date
        this.appendField(SKS_PP_StringFormats::strDateYYYYMMDD(num2date(exDays + 90)));
        this.appendField(#LineEnd);
    
        mSegmentCount++;
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_DTM831</Name>
				<Source><![CDATA[
    boolean rec_DTM831(boolean _end = false)
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Date/Time Qualifier                                 3       ID
        //02    Date                                                4       Date    CCYYMMDD
        //03    Time                                                6       Time
        //------------------------------------------------------------------------------------------------------
        this.appendField('DTM');
        this.appendField(#Separator);
    
        //01     Date/Time Qualifier
        if(_end)
        {
            this.appendField('194');
        }
        else
        {
            this.appendField('193');
        }
        this.appendField(#Separator);
    
        //02    Date
        this.appendField(SKS_PP_StringFormats::strDateYYYYMMDD(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone())));
    
        this.appendField(#Separator);
    
        //03    Time
        this.appendField(mTimestamp);
        this.appendField(#LineEnd);
    
        mSegmentCount++;
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_ENT</Name>
				<Source><![CDATA[
    boolean rec_ENT()
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Assigned Number                                     6       N0
        //------------------------------------------------------------------------------------------------------
        mSegmentCount++;
    
        this.appendField('ENT');
        this.appendField(#Separator);
    
        //01    Assigned Number
        this.appendField(int2str(entCount));
    
        this.appendField(#LineEnd);
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_GE</Name>
				<Source><![CDATA[
    boolean rec_GE(int _count)
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //1     Number of Transaction Sets Included                 6       N
        //2     Group Control Number                                9       AN
        //------------------------------------------------------------------------------------------------------
        str value;
    
        mSKS_EFT_EDI.setTranSetCount(_count);
        value = mSKS_EFT_EDI.buildGE();
    
        this.appendField(value);
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_GS</Name>
				<Source><![CDATA[
    boolean rec_GS()
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //1     Functional ID Code                                  2       AN
        //2     Application Sender's Code                           15      AN
        //3     Application Receiver's Code                         15      AN
        //4     Date                                                8       D
        //5     Time                                                8       T
        //6     Group Control Number                                9       AN
        //7     Responsible Agency Code                             2       AN
        //8     Version/Release ID Code                             12      AN
        //------------------------------------------------------------------------------------------------------
        str value;
    
        value = mSKS_EFT_EDI.buildGS();
    
        this.appendField(value);
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_GS831</Name>
				<Source><![CDATA[
    boolean rec_GS831()
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //1     Functional ID Code                                  2       AN
        //2     Application Sender's Code                           15      AN
        //3     Application Receiver's Code                         15      AN
        //4     Date                                                8       D
        //5     Time                                                8       T
        //6     Group Control Number                                9       AN
        //7     Responsible Agency Code                             2       AN
        //8     Version/Release ID Code                             12      AN
        //------------------------------------------------------------------------------------------------------
        str value;
    
        value = mSKS_EFT_EDI.buildGS();
        value = this.modifyRecord(value, 1, 'CT');
        value = this.modifyRecord(value, 5, mTimestamp);
    
        this.appendField(value);
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_IEA</Name>
				<Source><![CDATA[
    boolean rec_IEA()
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //1     Number of Included Functional Group                 5       N
        //2     Interchange Control Number                          9       AN
        //------------------------------------------------------------------------------------------------------
        str value;
    
        mSKS_EFT_EDI.setFunctionalGroupCount(2);
        value = mSKS_EFT_EDI.buildIEA();
    
        this.appendField(value);
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_ISA</Name>
				<Source><![CDATA[
    boolean rec_ISA()
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Authorization Information Qualifier                 2       AN      00
        //02    Authorization Information                           10      AN      Blank fill
        //03    Security Information Qualifier                      2       AN      00
        //04    Security Information                                10      AN      Blank fill
        //05    Interchange ID Qualifier                            2       AN      ZZ
        //06    Interchange Sender ID                               15      AN      Fed Tax Id
        //07    Interchange ID Qualifier                            2       AN      ZZ
        //08    Interchange Receiver ID                             15      AN      ABA Bank
        //09    Interchange Date                                    6       D       YYMMDD
        //10    Interchange Time                                    4       T       HHMM
        //11    Interchange Control Standards Identifier            1       AN      U
        //12    Interchange Control Version Number                  5       AN      00200
        //13    Interchange Control Number                          9       N       Control number (Zero padded)
        //14    Acknowledgement Requested                           1       N       0
        //15    Test Indicator                                      1       AN      P
        //16    Subelement Separator                                1       AN      ~
        //------------------------------------------------------------------------------------------------------
        str value;
    
        value = mSKS_EFT_EDI.buildISA();
    
        mTimestamp = this.getSegment(SKS_EFT_EDI820_Segment::H0050ISA, 10);
    
        this.appendField(value);
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_IT1</Name>
				<Source><![CDATA[
    boolean rec_IT1()
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Assigned Identification                             20      ID
        //------------------------------------------------------------------------------------------------------
        this.appendField('IT1');
        this.appendField(#Separator);
    
        //01    Assigned Identification                             20      ID
        this.appendField('1');
        this.appendField(#LineEnd);
    
        mSegmentCount++;
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N1BK</Name>
				<Source><![CDATA[
    boolean rec_N1BK()
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Entity ID Code                                      3       ID
        //02    Name                                                60      AN      Beneficiary Bank Name
        //03    Identification Code Qualifier                       2       ID
        //------------------------------------------------------------------------------------------------------
        this.appendField('N1');
        this.appendField(#Separator);
    
        //01     Entity ID Code
        this.appendField('BK');
        this.appendField(#Separator);
    
        //02     Name
        this.appendField(substr(this.CharacterReplacement(mSKS_EFT_VendorPaym.WBenBankName),1,60));
        this.appendField(#LineEnd);
    
        mSegmentCount++;
    
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N1PE</Name>
				<Source><![CDATA[
    boolean rec_N1PE()
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Entity ID Code                                      3       ID
        //02    Name                                                60      AN      Payee Name (Line 1) Domestic and Foreign
        //03    Identification Code Qualifier                       2       ID
        //04    Identification Code                                 80      AN      Vendor number
        //------------------------------------------------------------------------------------------------------
        str vendName;
        str vendNameBase = '';
        str vendNameOverflow = '';
        int spaceLoc;
        int stringLen;
        mSegmentCount++;
    
        this.appendField('N1');
        this.appendField(#Separator);
    
        //01     Entity ID Code
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            Case #FWT:
            case #SWT:
                this.appendField('BE');
                break;
            Case #CC:
                this.appendField('BU');
                break;
            default:
                this.appendField('PE');
                break;
        }
        this.appendField(#Separator);
    
        //02     Name
        if(mRemittanceName != '')
        {
            vendName = mRemittanceName;
        }
        else
        {
            vendName = this.CharacterReplacement(mSKS_EFT_FileDetail.AccountName);
        }
    
        stringlen = strLen(vendName);
    
        if (mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CHKPBCFC && stringlen > 35)
        {
            spaceLoc = strScan(vendName, ' ', 36, -36);
    
            if (spaceLoc > 0)
            {
                vendNameBase = subStr(vendName, 1, spaceLoc - 1);
            }
            else
            {
                vendNameBase = subStr(vendName, 1, 35);
                spaceLoc = 35;
            }
    
            if (spaceLoc != stringlen)
            {
                vendNameOverflow = subStr(vendName, spaceLoc + 1, stringlen);
            }
            else
            {
                vendNameOverflow = '';
            }
        }
        else
        {
            vendNameBase = vendName;
            vendNameOverflow = '';
        }
    
        this.appendField(substr(vendNameBase,1,60));
    
        //03    Identification Code Qualifier
        //04    Identification Code
        this.appendField(#LineEnd);
    
        if(vendNameOverflow != '')
        {
            this.rec_N2PE(vendNameOverflow);
        }
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N1PR</Name>
				<Source><![CDATA[
    boolean rec_N1PR()
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Entity ID Code                                      3       ID
        //02    Name                                                35      AN      Payer Name
        //03    Identification Code Qualifier                       02      ID      PI - Used by ePayables
        //04    Identification Code                                 80      AN
        //------------------------------------------------------------------------------------------------------
        mSegmentCount++;
    
        this.appendField('N1');
        this.appendField(#Separator);
    
        //01     Entity ID Code
        this.appendField('PR');
        this.appendField(#Separator);
    
        //02     Name
        this.appendField(substr(this.CharacterReplacement(mSKS_EFT_Bank.WOrdPartyName),1,60));
    
        //03    Identification Code Qualifier
        //04    Identification Code
    
        this.appendField(#LineEnd);
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N1RB</Name>
				<Source><![CDATA[
    boolean rec_N1RB()
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Entity ID Code                                      3       ID
        //02    Name                                                60      AN      Receiving Bank Name
        //03    Identification Code Qualifier                       2       ID
        //------------------------------------------------------------------------------------------------------
        str name;
    
        if(!mSKS_EFT_VendorPaym.WIntBankSwift)
        {
            name = this.CharacterReplacement(mSKS_EFT_VendorPaym.WBenBankName);
        }
        else
        {
            name = this.CharacterReplacement(mSKS_EFT_VendorPaym.WIntBankName);
        }
    
        this.appendField('N1');
        this.appendField(#Separator);
    
        //01     Entity ID Code
        this.appendField('RB');
        this.appendField(#Separator);
    
        //02     Name
        this.appendField(substr(name,1,60));
    
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode != #SWT)
        {
            this.appendField(#Separator);
    
            //03    Identification Code Qualifier
            this.appendField('13');
            this.appendField(#Separator);
    
            //04    Identification Code
            this.appendField(mSKS_EFT_FileDetail.DepBankTransit);
        }
        this.appendField(#LineEnd);
    
        mSegmentCount++;
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N2PE</Name>
				<Source><![CDATA[
    boolean rec_N2PE(str _vendNameOverflow)
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Name 2                                              60      AN      Additional name
        //02    Name                                                60      AN      Not used
        //------------------------------------------------------------------------------------------------------
    
        this.appendField('N2');
        this.appendField(#Separator);
    
        //01    Name 2
        this.appendField(_vendNameOverflow);
    
        this.appendField(#LineEnd);
    
        mSegmentCount++;
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N3PE</Name>
				<Source><![CDATA[
    boolean rec_N3PE()
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Address Information                                 35      AN      Payee Address (Line 1) Domestic and Foreign
        //02    Address Information                                 35      AN      Payee Address (Line 2) Domestic and Foreign
        //------------------------------------------------------------------------------------------------------
        if(mRemittanceAdrLine1 != '' || mRemittanceAdrLine2 != '')
        {
            this.appendField('N3');
            this.appendField(#Separator);
    
            //01    Address Information
            this.appendField(substr(mRemittanceAdrLine1, 1, 35));
    
            //02    Address Information
            if(mRemittanceAdrLine2 != '')
            {
                this.appendField(#Separator);
                this.appendField(substr(mRemittanceAdrLine2, 1,35));
            }
    
            this.appendField(#LineEnd);
            mSegmentCount++;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N3BK</Name>
				<Source><![CDATA[
    boolean rec_N3BK()
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Beneficiary Bank Address                            35      AN      Vendor eBanking Details > Payment specification > Wire transfer/IAT-1--address
        //------------------------------------------------------------------------------------------------------
        if(mSKS_EFT_VendorPaym.WBenBankAddr != '')
        {
            this.appendField('N3');
            this.appendField(#Separator);
    
            //01    Address Information
            this.appendField(substr(mSKS_EFT_VendorPaym.WBenBankAddr, 1, 35));
    
            this.appendField(#LineEnd);
            mSegmentCount++;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N4BK</Name>
				<Source><![CDATA[
    boolean rec_N4BK()
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Beneficiary Bank City                            35      AN      Vendor eBanking Details > Payment specification > Wire transfer/IAT-1--City
        //------------------------------------------------------------------------------------------------------
        if(mSKS_EFT_VendorPaym.WBenBankCity != '')
        {
            this.appendField('N4');
            this.appendField(#Separator);
    
            //01    Address Information
            this.appendField(substr(mSKS_EFT_VendorPaym.WBenBankCity, 1, 35));
    
            this.appendField(#LineEnd);
            mSegmentCount++;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N4PE</Name>
				<Source><![CDATA[
    boolean rec_N4PE()
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    City Address                                        19      AN
        //02    State or Province Code                              2       ID
        //03    Postal Code                                         9       ID
        //04    Country Code                                        3       ID
        //05    Location Qualifier                                  2       ID
        //06    Location Identifier                                 30      AN
        //------------------------------------------------------------------------------------------------------
        if(mRemittanceCity != '' || mRemittanceState != '' || mRemittanceZipCode != '' || mRemittanceCountryRegionId != '')
        {
            this.appendField('N4');
            this.appendField(#Separator);
    
            if(mRemittanceCity != '')
            {
                //01    City Address
                this.appendField(strRTrim(substr(mRemittanceCity, 1, 23)));
            }
    
            if(mRemittanceState != '' || mRemittanceZipCode != '' || mRemittanceCountryRegionId != '')
            {
                this.appendField(#Separator);
    
                if(mRemittanceState != '')
                {
                    //02    State or Province Code
                    this.appendField(strRTrim(substr(mRemittanceState, 1, 2)));
                }
    
                if(mRemittanceZipCode != '' || mRemittanceCountryRegionId != '')
                {
                    this.appendField(#Separator);
    
                    if(mRemittanceZipCode != '')
                    {
                        //03    Postal Code
                        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CC)
                        {
                            this.appendField('84121');
                        }
                        else
                        {
                            this.appendField(strRTrim(substr(mRemittanceZipCode,1,10)));
                        }
                        // end mod July 13, 2015
                    }
    
                    if(mRemittanceCountryRegionId != '')
                    {
                        this.appendField(#Separator);
    
                        //04    Country Code
                        this.appendField(mRemittanceCountryRegionId);
                    }
                }
            }
            //05    Location Qualifier
            //06    Location Identifier
    
            this.appendField(#LineEnd);
    
            mSegmentCount++;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_NTEADD</Name>
				<Source><![CDATA[
    boolean rec_NTEADD(SKS_EFT_FileDetail invSKS_EFT_FileDetail)
    {
        //------------------------------------------------------------------------------------------------------
        //Note/Special Instruction
        //Nbr   Description                                         Max     Type    Comment
        //01    Note Reference                                      3       ID
        //02    Description                                         35      AN
        //------------------------------------------------------------------------------------------------------
        mSegmentCount++;
    
        this.appendField('NTE');
        this.appendField(#Separator);
    
        //01     Note Reference
        this.appendField('ADD');
        this.appendField(#Separator);
    
        //02     Description
        this.appendField(date2str(invSKS_EFT_FileDetail.InvoiceDate, 213, DateDay::Digits2, DateSeparator::Slash, DateMonth::Digits2, DateSeparator::Slash, DateYear::Digits4, DateFlags::None));
    
        this.appendField(#LineEnd);
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_NTEOTH1</Name>
				<Source><![CDATA[
    boolean rec_NTEOTH1()
    {
        //------------------------------------------------------------------------------------------------------
        // Beneficiary Bank Information
        //Nbr   Description                                         Max     Type    Comment
        //01    Note Reference                                      3       ID
        //02    Description                                         35      AN
        //------------------------------------------------------------------------------------------------------
        if(mSKS_EFT_VendorPaym.WBankInst1 != '')
        {
            mSegmentCount++;
    
            this.appendField('NTE');
            this.appendField(#Separator);
    
            //01     Note Reference
            this.appendField('OTH');
            this.appendField(#Separator);
    
            //02     Description
            this.appendField(substr(this.CharacterReplacement(mSKS_EFT_VendorPaym.WBankInst1),1,35));
    
            this.appendField(#LineEnd);
        }
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_NTEOTH2</Name>
				<Source><![CDATA[
    boolean rec_NTEOTH2()
    {
        //------------------------------------------------------------------------------------------------------
        // Beneficiary Bank Information
        //Nbr   Description                                         Max     Type    Comment
        //01    Note Reference                                      3       ID
        //02    Description                                         35      AN
        //------------------------------------------------------------------------------------------------------
        if(mSKS_EFT_VendorPaym.WBankInst2 != '')
        {
            mSegmentCount++;
    
            this.appendField('NTE');
            this.appendField(#Separator);
    
            //01     Note Reference
            this.appendField('OTH');
            this.appendField(#Separator);
    
            //02     Description
            this.appendField(substr(this.CharacterReplacement(mSKS_EFT_VendorPaym.WBankInst2),1,35));
    
            this.appendField(#LineEnd);
        }
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_NTEOTH3</Name>
				<Source><![CDATA[
    boolean rec_NTEOTH3()
    {
        //------------------------------------------------------------------------------------------------------
        // Beneficiary Bank Information
        //Nbr   Description                                         Max     Type    Comment
        //01    Note Reference                                      3       ID
        //02    Description                                         35      AN
        //------------------------------------------------------------------------------------------------------
        if(mSKS_EFT_VendorPaym.WBankInst3 != '')
        {
            mSegmentCount++;
    
            this.appendField('NTE');
            this.appendField(#Separator);
    
            //01     Note Reference
            this.appendField('OTH');
            this.appendField(#Separator);
    
            //02     Description
            this.appendField(substr(this.CharacterReplacement(mSKS_EFT_VendorPaym.WBankInst3),1,35));
    
            this.appendField(#LineEnd);
        }
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_NTEOTH4</Name>
				<Source><![CDATA[
    boolean rec_NTEOTH4()
    {
        //------------------------------------------------------------------------------------------------------
        // Beneficiary Bank Information
        //Nbr   Description                                         Max     Type    Comment
        //01    Note Reference                                      3       ID
        //02    Description                                         35      AN
        //------------------------------------------------------------------------------------------------------
        if(mSKS_EFT_VendorPaym.WBankInst4 != '')
        {
            mSegmentCount++;
    
            this.appendField('NTE');
            this.appendField(#Separator);
    
            //01     Note Reference
            this.appendField('OTH');
            this.appendField(#Separator);
    
            //02     Description
            this.appendField(substr(this.CharacterReplacement(mSKS_EFT_VendorPaym.WBankInst4),1,35));
    
            this.appendField(#LineEnd);
        }
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_PER</Name>
				<Source><![CDATA[
    boolean rec_PER()
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Contact Function Code                               2       ID
        //02    Name                                                60      AN
        //03    Communication Number Qualifier                      2       ID
        //04    Communication Number                                80      AN
        //05    Communication Number Qualifier                      2       ID
        //06    Communication Number                                80      AN
        //------------------------------------------------------------------------------------------------------
        mSegmentCount++;
        this.appendField('PER');
        this.appendField(#Separator);
    
        //01    Contact Function Code                               2       ID
        this.appendField('SU');
        this.appendField(#Separator);
    
        //02    Name                                                60      AN
        this.appendField(#Separator);
    
        if(SKS_EFT_Format::getCodelookupvalue('Merchantemail', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank) != '')
        {
            //03    Communication Number Qualifier                      2       ID
            this.appendField('EM');
            this.appendField(#Separator);
    
            //04    Communication Number                                80      AN
            this.appendField(this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('Merchantemail', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank)));
        }
    
        if(SKS_EFT_Format::getCodelookupvalue('MerchantCCemail', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank) != '')
        {
            if(SKS_EFT_Format::getCodelookupvalue('Merchantemail', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank) == '')
            {
                this.appendField(#Separator);
            }
            this.appendField(#Separator);
    
            //05    Communication Number Qualifier                      2       ID
            this.appendField('TM');
            this.appendField(#Separator);
    
            //06    Communication Number                                80      AN
            this.appendField(this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('MerchantCCemail', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank)));
        }
        this.appendField(#LineEnd);
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_QTY</Name>
				<Source><![CDATA[
    boolean rec_QTY()
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Quantity Qualifier                                   2      ID
        //02    Quantity                                            15      AN
        //------------------------------------------------------------------------------------------------------
        this.appendField('QTY');
        this.appendField(#Separator);
    
        //01     Entity ID Code
        this.appendField('53');
        this.appendField(#Separator);
    
        //02     Quantity
        this.appendField(substr(int2str(mCtrlQuantity),1,15));
        this.appendField(#LineEnd);
    
        mSegmentCount++;
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_REF</Name>
				<Source><![CDATA[
    boolean rec_REF(str RefTag = '93')
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Reference No. Qualifier                             3       ID
        //02    Reference Number                                    30      AN      Check Printing Codes
        //03    Description                                         80      AN      Not Used
        //------------------------------------------------------------------------------------------------------
        mSegmentCount++;
    
        this.appendField('REF');
        this.appendField(#Separator);
    
        //01     Reference No. Qualifier
        this.appendField(RefTag);
        this.appendField(#Separator);
    
        //02     Reference Identification
        switch(RefTag)
        {
            case '93':
                this.appendField(substr(this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('PersonalId', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank)),1,30));
                break;
            case 'CK':
                this.appendField(SKS_PP_StringFormats::strFill(10, this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference),SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
                break;
            case '8M':
                this.appendField(substr(this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('ShortName', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank)),1,30));
                break;
            case 'ZA':
                this.appendField(substr(mSKS_EFT_VendorPaym.VendAccount,1,30));
                break;
            case '02':
                if(mSKS_EFT_VendorPaym.WIntBankSwift != '')
                {
                    this.appendField(substr(mSKS_EFT_VendorPaym.WIntBankSwift,1,30));
                }
                else
                {
                    this.appendField(substr(mSKS_EFT_FileDetail.DepSwiftNo,1,30));
                }
                break;
            case 'S5':
                if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CHKPBCFC)
                {
                    this.appendField('1');
                }
                break;
        }
    
        this.appendField(#LineEnd);
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_REFPO</Name>
				<Source><![CDATA[
    boolean rec_REFPO(SKS_EFT_FileDetail _invSKS_EFT_FileDetail)
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Reference No. Qualifier                             3       ID
        //02    Reference Number                                    30      AN      Check Printing Codes
        //03    Description                                         80      AN      Not Used
        //------------------------------------------------------------------------------------------------------
        str value = this.get_POInfo(_invSKS_EFT_FileDetail);
    
        if(value != '')
        {
            mSegmentCount++;
            this.appendField('REF');
            this.appendField(#Separator);
    
            //01     Reference No. Qualifier
            this.appendField('PO');
            this.appendField(#Separator);
    
            //02     Reference Identification
            this.appendField(substr(value, 1, 30));
            this.appendField(#LineEnd);
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_REFVV</Name>
				<Source><![CDATA[
    boolean rec_REFVV(SKS_EFT_FileDetail _invSKS_EFT_FileDetail)
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Reference No. Qualifier                             3       ID
        //02    Reference Number                                    30      AN      Check Printing Codes
        //03    Description                                         80      AN      Not Used
        //------------------------------------------------------------------------------------------------------
        LedgerJournalTrans lLedgerJournalTrans = null;
    
    
        select crossCompany PaymId from lLedgerJournalTrans where lLedgerJournalTrans.VendTransId == _invSKS_EFT_FileDetail.VendTransRecId;
    
        if(lLedgerJournalTrans.PaymId)
        {
            mSegmentCount++;
            this.appendField('REF');
            this.appendField(#Separator);
    
            //01     Reference No. Qualifier
            this.appendField('VV');
            this.appendField(#Separator);
    
            //02     Reference Identification
            this.appendField(substr(lLedgerJournalTrans.PaymId,1,30));
            this.appendField(#LineEnd);
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_RMR4C</Name>
				<Source><![CDATA[
    boolean rec_RMR4C(SKS_EFT_FileDetail invSKS_EFT_FileDetail)
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Reference Identification Qualifier                  3       ID
        //02    Reference Identification                            30      AN
        //03    Payment Action Code                                 2       ID
        //04    Monetary Amount                                     18      R
        //05    Monetary Amount                                     18      R
        //06    Monetary Amount                                     18      R
        //------------------------------------------------------------------------------------------------------
        mSegmentCount++;
    
        this.appendField('RMR');
        this.appendField(#Separator);
    
        //01     Reference No. Qualifier
        this.appendField('4C');
        this.appendField(#Separator);
    
        //02     Reference Identification
        this.appendField('X');
        this.appendField(#Separator);
    
        //03    Payment Action Code
        this.appendField('PO');
        this.appendField(#Separator);
    
        //04    Monetary Amount                                     18      R
        this.appendField('0');
        this.appendField(#Separator);
    
        //05    Monetary Amount                                     18      R
        this.appendField('0');
        this.appendField(#Separator);
    
        //06    Monetary Amount                                     18      R
        this.appendField('0');
        this.appendField(#LineEnd);
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_RMR8X</Name>
				<Source><![CDATA[
    boolean rec_RMR8X(SKS_EFT_FileDetail invSKS_EFT_FileDetail)
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Reference Identification Qualifier                  3       ID
        //02    Reference Identification                            30      AN
        //03    Payment Action Code                                 2       ID
        //04    Monetary Amount                                     18      R
        //05    Monetary Amount                                     18      R
        //------------------------------------------------------------------------------------------------------
        mSegmentCount++;
    
        this.appendField('RMR');
        this.appendField(#Separator);
    
        //01     Reference No. Qualifier
        this.appendField('8X');
        this.appendField(#Separator);
    
        //02     Reference Number
        this.appendField('PS');
        this.appendField(#Separator);
    
        //03    Payment Action Code
        this.appendField('PO');
        this.appendField(#Separator);
    
        //04    Monetary Amount                                     18      R
        this.appendField('0');
        this.appendField(#Separator);
    
        //05    Monetary Amount                                     18      R
        this.appendField('0');
        this.appendField(#LineEnd);
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_RMRIV</Name>
				<Source><![CDATA[
    boolean rec_RMRIV(SKS_EFT_FileDetail invSKS_EFT_FileDetail)
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Reference No. Qualifier                             3       ID
        //02    Reference Number                                    9       AN
        //03    Payment Action Code                                 2       ID
        //04    Amount paid                                         18      R
        //05    Original Amount                                     18      R
        //06    Discount Amount                                     18      R
        //------------------------------------------------------------------------------------------------------
        AmountMST amt;
    
        mSegmentCount++;
    
        this.appendField('RMR');
        this.appendField(#Separator);
    
        //01     Reference No. Qualifier
        if(invSKS_EFT_FileDetail.InvoiceNumber != '')
        {
            this.appendField('IV'); // Only write IV if an invoice number exists
        }
        this.appendField(#Separator);
    
        //02     Reference Number
        if(mSKS_EFT_FileFormatPaymSpec.PaymSpec == #UBP)
        {
            this.appendField(mSKS_EFT_FileDetail.DepBankAcct);
        }
        else
        {
            this.appendField(substr(invSKS_EFT_FileDetail.InvoiceNumber,1,30));
        }
        this.appendField(#Separator);
    
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CC)
        {
            //03    Payment Action Code
            this.appendField('PO');
    
        }
        this.appendField(#Separator);
    
        //04   Amount paid/Total Frieght Shipping
        amt = invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1;
        this.appendField(num2str(amt,0,2,0,0));
    
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CC)
        {
            this.appendField(#Separator);
            //05    Total Discount Amount
            this.appendField(num2str(0,0,2,0,0));
        }
        else if(mSKS_EFT_FileFormatPaymSpec.PaymSpec != #UBP)
        {
            this.appendField(#Separator);
            //05    Original Amount
            amt = (invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur + invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur) * -1;
            this.appendField(num2str(amt,0,2,0,0));
            this.appendField(#Separator);
    
            //06    Discount Amount
            amt = invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur * -1;
            this.appendField(num2str(amt,0,2,0,0));
        }
        this.appendField(#LineEnd);
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_SAC</Name>
				<Source><![CDATA[
    boolean rec_SAC()
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Allowance or Charge Indicator                       1       ID
        //02    Service, Promotion, Allowance, or Charge Code       4       ID
        //------------------------------------------------------------------------------------------------------
        this.appendField('SAC');
        this.appendField(#Separator);
    
        //01    Allowance or Charge Indicator                       1       ID
        this.appendField('N');
        this.appendField(#Separator);
    
        //02    Service, Promotion, Allowance, or Charge Code       4       ID
        this.appendField('ZZZZ');
        this.appendField(#LineEnd);
    
        mSegmentCount++;
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_SE</Name>
				<Source><![CDATA[
    boolean rec_SE(int _count)
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //1     Number of Included Segments                         10      NO
        //2     Trans. Set Cont. Number                             9       AN
        //------------------------------------------------------------------------------------------------------
        _count++;
    
        this.appendField('SE');
        this.appendField(#Separator);
    
        //1     Number of Included Segments
        this.appendField(num2str(_count,0,0,0,0));
        this.appendField(#Separator);
    
        //2     Trans. Set Cont. Number
        this.appendField(mSenderControlNbr);
        this.appendField(#LineEnd);
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_ST</Name>
				<Source><![CDATA[
    boolean rec_ST(str _SetID)
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //1     Transaction Set ID Code                             3       ID
        //2     Trans. Set Cont. Number                             9       AN
        //------------------------------------------------------------------------------------------------------;
        mSegmentCount++;
        mTranSetCount++;
        mSCN++;
    
        this.appendField('ST');
        this.appendField(#Separator);
    
        //1     Transaction Set ID Code
        this.appendField(_SetID);
        this.appendField(#Separator);
    
        //2     Trans. Set Cont. Number
        if(_SetID == '820')
        {
            mSenderControlNbr = SKS_PP_StringFormats::strFill(9, int2str(mSCN), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left);
        }
        else
        {
            mSenderControlNbr = SKS_PP_StringFormats::strRight(mSKS_EFT_File.FileNbr,9);
        }
    
        this.appendField(mSenderControlNbr);
        this.appendField(#LineEnd);
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_TRN</Name>
				<Source><![CDATA[
    boolean rec_TRN()
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Trace Type Code                                     2       ID
        //02    Reference Identification                            30      AN      Payment Trace No
        //03    Orig. Co. ID                                        10      AN      Not used
        //04    Reference Number                                    30      AN      Customer-supplied descriptive data to be used by ARP
        //------------------------------------------------------------------------------------------------------
        mSegmentCount++;
    
        this.appendField('TRN');
        this.appendField(#Separator);
    
        //01     Trace Type Code
        this.appendField('1');
        this.appendField(#Separator);
    
        //02     Reference Identification
        this.appendField(SKS_PP_StringFormats::strRight(this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference),30));
    
        //03    Orig. Co. ID
        //04    Reference Number
    
        this.appendField(#LineEnd);
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_TRN831</Name>
				<Source><![CDATA[
    boolean rec_TRN831()
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Trace Type Code                                     2       ID
        //02    Reference Identification                            30      AN      Payment Trace No
        //03    Orig. Co. ID                                        10      AN      Not used
        //04    Reference Number                                    30      AN      Customer-supplied descriptive data to be used by ARP
        //------------------------------------------------------------------------------------------------------
        this.appendField('TRN');
        this.appendField(#Separator);
    
        //01     Trace Type Code
        this.appendField('1');
        this.appendField(#Separator);
    
        //02     Reference Identification
        this.appendField(SKS_PP_StringFormats::strRight(mSKS_EFT_File.FileNbr,30));
    
        //03    Orig. Co. ID
        //04    Reference Number
    
        this.appendField(#LineEnd);
    
        mSegmentCount++;
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_TXI</Name>
				<Source><![CDATA[
    boolean rec_TXI(SKS_EFT_FileDetail invSKS_EFT_FileDetail)
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Tax Type Code                                       2       ID
        //02    Monetary Amount                                     18      R
        //03    Percent                                             10      R
        //------------------------------------------------------------------------------------------------------
        mSegmentCount++;
    
        this.appendField('TXI');
        this.appendField(#Separator);
    
        //01    Tax Type Code                                       2       ID
        this.appendField('TX');
        this.appendField(#Separator);
    
        //02    Monetary Amount                                     18      R
        this.appendField('0');
        this.appendField(#Separator);
    
        //03    Percent                                             10      R
        this.appendField('0');
        this.appendField(#LineEnd);
    
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>