<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_CO_BANCOLOMBIA_ACH_95</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_CO_BANCOLOMBIA_ACH_95 extends SKS_EFT_Format
/// </summary>
class SKS_EFT_Format_CO_BANCOLOMBIA_ACH_95 extends SKS_EFT_Format
{
    #define.FormatVersion('20220624')
    System.Text.StringBuilder msb;
    int countPaymentRef;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    protected void formatStructure()
    {
        countPaymentRef = 10;
        msb = new System.Text.StringBuilder();

        this.rec_ContorlLog();

        while(mSKS_EFT_FileDetail)
        {
            // Get SKS_EFT_FileFormatPaymSpec
            this.getSKS_EFT_FileFormatPaymSpec();

            this.rec_Detail();

            this.rec_SendEmail();

            next mSKS_EFT_FileDetail;
        
            countPaymentRef++;
        }

        // Write to file
        this.fileWrite(msb.ToString());
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_ContorlLog</Name>
				<Source><![CDATA[
    boolean rec_ContorlLog()
    {
        //-------------------------------------------------------------------------------------------
        //Nbr   Content                                     Size
        // 1    Type of record                                 1
        // 2    NIT sending entity                            10
        // 3    Sending entity name                           16
        // 4    Contained transactions class                   3
        // 5    Description Purpose Transactions              10
        // 6    Batch transmission date                        6
        // 7    Sequence sending batches that day              1
        // 8    Transaction date                               6
        // 9    Number of records                              6
        //10    Summation of debits                           12
        //11    Summation of credits                          12
        //12    Customer account to Debit                     11
        //13    Customer account type to debit                 1
        //------------------------------------------------------------------------------------------------------
        SKS_EFT_FileDetail tmpSKS_EFT_FileDetail;
        SKS_EFTAP_File     lSKS_EFTAP_File;
        str sequenceloc, nitSendingEntity;
        int64 seqCnt;

        // Get SKS_EFT_FileFormatPaymSpec
        this.getSKS_EFT_FileFormatPaymSpec();

        // 1    Type of record                                 1
        msb.Append('1');
        
        // 2    NIT sending entity                            10
        nitSendingEntity = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('NITSendingEntity', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank));
        msb.Append(SKS_PP_StringFormats::strFill(10, nitSendingEntity, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        // 3    Sending entity name                           16
        msb.Append(SKS_PP_StringFormats::strFill(16, mSKS_EFT_FileDetail_BankAccount.WOrdPartyName, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 4    Contained transactions class                   3
        msb.Append('220');

        // 5    Description Purpose Transactions              10
        msb.Append(SKS_PP_StringFormats::strFill(10, 'PAGOS', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 6    Batch transmission date                        6
        msb.Append(SKS_PP_StringFormats::strDateYYMMDD(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone())));

        // 7    Sequence sending batches that day              1
        select count(RecId) from lSKS_EFTAP_File where lSKS_EFTAP_File.EffectiveDate == DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()) &&
                                    lSKS_EFTAP_File.FormatId == 'CO-BANCOLOMBIA-ACH-95';

        seqCnt = any2Int(lSKS_EFTAP_File.RecId);

        sequenceloc = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
        
        msb.Append(subStr(sequenceloc, int642int(seqCnt), 1));

        // 8    Transaction date                               6
        msb.Append(SKS_PP_StringFormats::strDateYYMMDD(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone())));

        // Select count and sum for this file
        select COUNT(InvoiceOrigAmountCur), SUM(InvoiceSettleAmountPmtCur) from tmpSKS_EFT_FileDetail
            where
                tmpSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                tmpSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                tmpSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary;

        // 9    Number of records                              6
        msb.Append(SKS_PP_StringFormats::strFill(6, num2Str(tmpSKS_EFT_FileDetail.InvoiceOrigAmountCur,0,0,0,0), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //10    Summation of debits                           12
        msb.Append(SKS_PP_StringFormats::strFill(12, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
    
        //11    Summation of credits                          12
        msb.Append(SKS_PP_StringFormats::strFill(12, num2Str(tmpSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1,0,0,0,0), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //12    Customer account to Debit                     11
        msb.Append(SKS_PP_StringFormats::strFill(11, mSKS_EFT_FileDetail.BankBankAcct, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //13    Customer account type to debit                 1
        if(mSKS_EFT_FileDetail.BankAcctType == BankAccountType::SavingsAccount)
        {
            msb.Append('S');
        }
        else
        {
            msb.Append('D');
        }
        msb.Append('\n');
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Detail</Name>
				<Source><![CDATA[
    boolean rec_Detail()
    {
        //-------------------------------------------------------------------------------------------
        //Nbr   Content                                     Size
        // 1    Type of record                                 1
        // 2    NIT Beneficiary                               15
        // 3    Beneficiary Name                              18
        // 4    Bank Beneficiary Account                       9
        // 5    Beneficiary Account Number                    17
        // 6    Place of payment indicator                     1
        // 7    Transaction type                               2
        // 8    Transaction value                             10
        // 9    Concept                                        9
        //10    Reference                                     21
        //11    Filling                                        1
        //------------------------------------------------------------------------------------------------------
        str amount, value;

        // 1    Type of record                                 1    (1-1)
        msb.Append('6');

        // 2    NIT Beneficiary                               15    (2-16)
        value = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('NITBeneficiary', mSKS_EFT_FileDetail.RecId));
        msb.Append(SKS_PP_StringFormats::strFill(15, value, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        // 3    Beneficiary Name                              18....(17-34)
        msb.Append(SKS_PP_StringFormats::strFill(18, this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneName), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 4    Bank Beneficiary Account                       9....(35-43)
        msb.Append(SKS_PP_StringFormats::strFill(9, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        // 5    Beneficiary Account Number                    17....(44-60)
        msb.Append(SKS_PP_StringFormats::strFill(17, mSKS_EFT_FileDetail.DepBankAcct, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        // 6    Place of payment indicator                     1....(61-61)
        msb.Append('S');

        // 7    Transaction type                               2....(62-63)
        msb.Append('40');

        // 8    Transaction value                             10....(64-73)
        amount = strRem(num2Str(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1, 0,0,0,0), '.');
        
        msb.Append(SKS_PP_StringFormats::strFill(10, amount, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        // 9    Concept                                        9....(74-82)
        msb.Append(SKS_PP_StringFormats::strFill(9, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));//SKS_VSTS_13056 -->

        //10    Reference                                     12....(83-94)
        msb.Append(SKS_PP_StringFormats::strFill(12, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));//SKS_VSTS_13056 <--

        //11    Filling                                        1....(95-95)
        msb.Append(SKS_PP_StringFormats::strFill(1, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        msb.Append('\n');

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_SendEmail</Name>
				<Source><![CDATA[
    boolean rec_SendEmail()
    {
        //-------------------------------------------------------------------------------------------
        //Nbr   Content                                     Size
        // 1    Record type                                    1
        // 2    Type of information                            1
        // 3    Filling                                       52
        // 4    E-mail                                        41
        //------------------------------------------------------------------------------------------------------
        VendTable   vendorTable;
        SKS_EB_Vendor   sks_eb_Vendor;
        str vendemail;


        // 1    Record type                                    1
        msb.Append('3');

        // 2    Type of information                            1
        msb.Append('@');

        // 3    Filling                                       52
        msb.Append(strRFix('', 52, '*'));

        // 4    E-mail                                        41
        sks_eb_Vendor = SKS_EB_Vendor::find(mSKS_EFT_FileDetail.AccountCompany, mSKS_EFT_FileDetail.AccountNum);
        if(sks_eb_Vendor.EM1Vendor)
        {
            vendorTable = VendTable::findByCompany(mSKS_EFT_FileDetail.AccountCompany, mSKS_EFT_FileDetail.AccountNum);
            
            Vendemail = vendorTable.email();
        }

        msb.Append(SKS_PP_StringFormats::strFill(41, Vendemail, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        msb.Append('\n');
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectPaymentRecords</Name>
				<Source><![CDATA[
    protected void selectPaymentRecords()
    {
        //------------------------------------------------------------------------------------------------------
        // Standard payment selction
        // Override if different selection is need for a format
        //------------------------------------------------------------------------------------------------------
    
        //Order by clause must match the clause in the SKS_EFT_Processing.SumByPayment
        select * from mSKS_EFT_FileDetail
            join mSKS_EFT_FileDetail_VendAddress
            join mSKS_EFT_FileDetail_BenBank
              order by mSKS_EFT_FileDetail.PaymentCompany, //SKS_VSTS_12798
                   mSKS_EFT_FileDetail.RecordSection,
                   mSKS_EFT_FileDetail.PaymMode,
                   mSKS_EFT_FileDetail.BankAccountId,
                   mSKS_EFT_FileDetail.PaymentCurrencyCode,
                   mSKS_EFT_FileDetail.PaymSpec,
                   mSKS_EFT_FileDetail.EffectiveDate,
                   mSKS_EFT_FileDetail.DepCountryRegionId,
                   mSKS_EFT_FileDetail.RecordType,
                   mSKS_EFT_FileDetail.AccountNum,
                   mSKS_EFT_FileDetail.PaymentReference,
                   mSKS_EFT_FileDetail.RecId
          where mSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                mSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                mSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_VendAddress.RefRecId &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_BenBank.RefRecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>