<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_Class_OmHierarchyPurposeTableClass</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_Class_OmHierarchyPurposeTableClass
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>OmHierarchyPurposeTableClass_Post_populateHierarchyPurposeTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add eBanking hierarchy purposes
    /// </summary>
    /// <param name="args">Event handler args</param>
    [PostHandlerFor(classStr(OmHierarchyPurposeTableClass), staticMethodStr(OmHierarchyPurposeTableClass, populateHierarchyPurposeTable))]
    public static void OmHierarchyPurposeTableClass_Post_populateHierarchyPurposeTable(XppPrePostArgs args)
    {
        SKS_Class_OmHierarchyPurposeTableClass::addSKS_PPControlPurpose();
        SKS_Class_OmHierarchyPurposeTableClass::addSKS_BRControlPurpose();
        // SKS_FDD_10590 -->
        SKS_Class_OmHierarchyPurposeTableClass::addSKS_DD_MultiCompany();
        SKS_Class_OmHierarchyPurposeTableClass::addSKS_EFT_APMultiCompany();
        // SKS_FDD_10590 <--

        SKS_Class_OmHierarchyPurposeTableClass::addSKS_CCRControlPurpose();     //SKS_FDD_13903

        SKS_Class_OmHierarchyPurposeTableClass::addSKS_PRAInvoiceMatchPurpose(); //SKS_DevOps_21921

    }

]]></Source>
			</Method>
			<Method>
				<Name>addSKS_PPControlPurpose</Name>
				<Source><![CDATA[
    private static void addSKS_PPControlPurpose()
    {
        OMHierPurposeOrgTypeMap omHPOTP;
        
        select RecId from omHPOTP
            where omHPOTP.HierarchyPurpose == HierarchyPurpose::SKS_PPControl;
        
        if( omHPOTP.RecId <= 0 )
        {
            omHPOTP.clear();
            omHPOTP.HierarchyPurpose = HierarchyPurpose::SKS_PPControl;
            omHPOTP.OperatingUnitType = OMOperatingUnitType::OMAnyOU;
            omHPOTP.IsLegalEntityAllowed = NoYes::No;
            omHPOTP.write();
            
            omHPOTP.clear();
            omHPOTP.HierarchyPurpose = HierarchyPurpose::SKS_PPControl;
            omHPOTP.OperatingUnitType = OMOperatingUnitType::None;
            omHPOTP.IsLegalEntityAllowed = NoYes::Yes;
            omHPOTP.write();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addSKS_BRControlPurpose</Name>
				<Source><![CDATA[
    private static void addSKS_BRControlPurpose()
    {
        OMHierPurposeOrgTypeMap omHPOTP;
        
        select RecId from omHPOTP
            where omHPOTP.HierarchyPurpose == HierarchyPurpose::SKS_BRControl;
        
        if( omHPOTP.RecId <= 0 )
        {
            omHPOTP.clear();
            omHPOTP.HierarchyPurpose = HierarchyPurpose::SKS_BRControl;
            omHPOTP.OperatingUnitType = OMOperatingUnitType::OMAnyOU;
            omHPOTP.IsLegalEntityAllowed = NoYes::No;
            omHPOTP.write();
            
            omHPOTP.clear();
            omHPOTP.HierarchyPurpose = HierarchyPurpose::SKS_BRControl;
            omHPOTP.OperatingUnitType = OMOperatingUnitType::None;
            omHPOTP.IsLegalEntityAllowed = NoYes::Yes;
            omHPOTP.write();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addSKS_EFT_APMultiCompany</Name>
				<Source><![CDATA[
    // SKS_FDD_10590 -->
    private static void addSKS_EFT_APMultiCompany()
    {
        OMHierPurposeOrgTypeMap omHPOTP;
        
        select RecId from omHPOTP
            where omHPOTP.HierarchyPurpose == HierarchyPurpose::SKS_EFT_APMultiCompany;
        
        if( omHPOTP.RecId <= 0 )
        {
            omHPOTP.clear();
            omHPOTP.HierarchyPurpose = HierarchyPurpose::SKS_EFT_APMultiCompany;
            omHPOTP.OperatingUnitType = OMOperatingUnitType::OMAnyOU;
            omHPOTP.IsLegalEntityAllowed = NoYes::No;
            omHPOTP.write();
            
            omHPOTP.clear();
            omHPOTP.HierarchyPurpose = HierarchyPurpose::SKS_EFT_APMultiCompany;
            omHPOTP.OperatingUnitType = OMOperatingUnitType::None;
            omHPOTP.IsLegalEntityAllowed = NoYes::Yes;
            omHPOTP.write();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addSKS_DD_MultiCompany</Name>
				<Source><![CDATA[
    private static void addSKS_DD_MultiCompany()
    {
        OMHierPurposeOrgTypeMap omHPOTP;
        
        select RecId from omHPOTP
            where omHPOTP.HierarchyPurpose == HierarchyPurpose::SKS_DD_MultiCompany;
        
        if( omHPOTP.RecId <= 0 )
        {
            omHPOTP.clear();
            omHPOTP.HierarchyPurpose = HierarchyPurpose::SKS_DD_MultiCompany;
            omHPOTP.OperatingUnitType = OMOperatingUnitType::OMAnyOU;
            omHPOTP.IsLegalEntityAllowed = NoYes::No;
            omHPOTP.write();
            
            omHPOTP.clear();
            omHPOTP.HierarchyPurpose = HierarchyPurpose::SKS_DD_MultiCompany;
            omHPOTP.OperatingUnitType = OMOperatingUnitType::None;
            omHPOTP.IsLegalEntityAllowed = NoYes::Yes;
            omHPOTP.write();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addSKS_CCRControlPurpose</Name>
				<Source><![CDATA[
    // SKS_FDD_10590 <--

    //SKS_FDD_13903 Begin
    private static void addSKS_CCRControlPurpose()
    {
        OMHierPurposeOrgTypeMap omHPOTP;
        
        select RecId from omHPOTP
            where omHPOTP.HierarchyPurpose == HierarchyPurpose::SKS_CCRControl;
        
        if( omHPOTP.RecId <= 0 )
        {
            omHPOTP.clear();
            omHPOTP.HierarchyPurpose = HierarchyPurpose::SKS_CCRControl;
            omHPOTP.OperatingUnitType = OMOperatingUnitType::OMAnyOU;
            omHPOTP.IsLegalEntityAllowed = NoYes::No;
            omHPOTP.write();
            
            omHPOTP.clear();
            omHPOTP.HierarchyPurpose = HierarchyPurpose::SKS_CCRControl;
            omHPOTP.OperatingUnitType = OMOperatingUnitType::None;
            omHPOTP.IsLegalEntityAllowed = NoYes::Yes;
            omHPOTP.write();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addSKS_PRAInvoiceMatchPurpose</Name>
				<Source><![CDATA[
    //SKS_FDD_13903 End

    //SKS_DevOps_21921 Start
    private static void addSKS_PRAInvoiceMatchPurpose()
    {
        OMHierPurposeOrgTypeMap omHPOTP;
        
        select RecId from omHPOTP
            where omHPOTP.HierarchyPurpose == HierarchyPurpose::SKS_PRA_InvoiceMatch;
        
        if( omHPOTP.RecId <= 0 )
        {
            omHPOTP.clear();
            omHPOTP.HierarchyPurpose = HierarchyPurpose::SKS_PRA_InvoiceMatch;
            omHPOTP.OperatingUnitType = OMOperatingUnitType::OMAnyOU;
            omHPOTP.IsLegalEntityAllowed = NoYes::No;
            omHPOTP.write();
            
            omHPOTP.clear();
            omHPOTP.HierarchyPurpose = HierarchyPurpose::SKS_PRA_InvoiceMatch;
            omHPOTP.OperatingUnitType = OMOperatingUnitType::None;
            omHPOTP.IsLegalEntityAllowed = NoYes::Yes;
            omHPOTP.write();
        }
    }
    //SKS_DevOps_21921 End

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>