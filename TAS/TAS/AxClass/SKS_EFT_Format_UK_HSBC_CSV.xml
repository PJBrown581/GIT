<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_UK_HSBC_CSV</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_UK_HSBC_CSV extends SKS_EFT_Format
/// </summary>
class SKS_EFT_Format_UK_HSBC_CSV extends SKS_EFT_Format
{
    #define.FormatVersion('20220715')
    int     refCount;
    int     totLine = 0;
    #define.Separator(',')
    #define.LineEnd('\r\n')
    str HSBCnetIDValue;

    System.Text.StringBuilder sb = new System.Text.StringBuilder();
    System.Text.StringBuilder msb = new System.Text.StringBuilder();

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wrapField</Name>
				<Source><![CDATA[
    private str wrapField(str _field = '',  boolean _addSeparator = true)
    {
        str text;        

        text = _field;

        if(_addSeparator)
        {
            text += #Separator;
        }
        return text;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    protected void formatStructure()
    {     

        while(mSKS_EFT_FileDetail)
        {
            refCount++;

            // Get SKS_EFT_VendorPaym
            this.getSKS_EFT_VendorPaym();

            //Get Remittance Information
            this.getRemittanceAddress(mSKS_EFT_FileFormatPaymSpec.UseCheckNumber);

            // Get SKS_EFT_Bank
            this.getSKS_EFT_Bank();

            this.rec_BATHDR();

            this.rec_SECPTY();

            HSBCnetIDValue = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('HSBCnetID', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank));
            next mSKS_EFT_FileDetail;
        }

        this.rec_IFH();

        this.fileWrite(sb.ToString());
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_IFH</Name>
				<Source><![CDATA[
    boolean rec_IFH()
    {        
        str     filedate;
        str     batchNum;

        totLine++;        
        msb.Append(this.wrapField('IFH'));

        msb.Append(this.wrapField('IFILE'));

        msb.Append(this.wrapField('CSV'));

        msb.Append(this.wrapField(''));

        msb.Append(this.wrapField(strRem(HSBCnetIDValue, #Separator)));

        filedate = DateTimeUtil::toStr(DateTimeUtil::utcNow());

        batchNum = (strReplace(subStr(filedate, 1, 10), '-', '')) + '_' + (strReplace(subStr(filedate, 12, 8), ':', ''));

        msb.Append(this.wrapField(batchNum));

        msb.Append(this.wrapField(strReplace(subStr(filedate, 1, 10), '-', '/')));

        msb.Append(this.wrapField(subStr(filedate, 12, 8)));

        msb.Append(this.wrapField('P'));

        msb.Append(this.wrapField('1'));

        msb.Append(this.wrapField(num2str(totLine, 0, 0, 0, 0)));

        msb.Append(this.wrapField('GB01', false));

        this.fileWrite(msb.ToString());

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_BATHDR</Name>
				<Source><![CDATA[
    boolean rec_BATHDR()
    {
        str     filedate;
        str     batchNum;

        totLine++;
        sb.Append(this.wrapField('BATHDR'));

        sb.Append(this.wrapField('LTR'));

        sb.Append(this.wrapField('1'));

        filedate = DateTimeUtil::toStr(DateTimeUtil::utcNow());

        batchNum = (strReplace(subStr(filedate, 1, 10), '-', '')) + '_' + (strReplace(subStr(filedate, 12, 8), ':', ''));

        sb.Append(this.wrapField(batchNum));

        sb.Append(this.wrapField(''));
        sb.Append(this.wrapField(''));
        sb.Append(this.wrapField(''));
        sb.Append(this.wrapField(''));
        sb.Append(this.wrapField(''));

        sb.Append(this.wrapField('@1ST@'));

        sb.Append(this.wrapField(SKS_PP_StringFormats::strDateYYYYMMDD(mSKS_EFT_FileDetail.EffectiveDate)));

        //          Payment Account Number
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.BankBankAcct));

        //          Payment Currency
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.PaymentCurrencyCode));

        //          Transaction Amount
        sb.Append(this.wrapField(num2str(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1, 0, 2, 1, 0)));

        sb.Append(this.wrapField(''));
        sb.Append(this.wrapField(''));

        //          Beneficiary Bank Country Location
        sb.Append(this.wrapField(this.getLogisticsAddressCountryISO(mSKS_EFT_VendorPaym.WBenBankCountryRegionId)));

        sb.Append(this.wrapField('HBAP'));

        //          Payment Currency
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.PaymentCurrencyCode));

        sb.Append(this.wrapField(''));

        sb.Append(this.wrapField(strRem(this.CharacterReplacement(mSKS_EFT_Bank.WOrdPartyName), #Separator)));

        sb.Append(this.wrapField(''));
        sb.Append(this.wrapField(''));
        sb.Append(this.wrapField(''));
        sb.Append(this.wrapField(''));
        sb.Append(this.wrapField(''));

        //          Reference
        sb.Append(this.wrapField(subStr(strRem(this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference), #Separator), 1, 16) + '_' + num2Str(refCount, 0, 0, 0, 0), false));

        sb.Append(#LineEnd);

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_SECPTY</Name>
				<Source><![CDATA[
    boolean rec_SECPTY()
    {
        str     advice;


        totLine++;
        sb.Append(this.wrapField('SECPTY'));

        //          Beneficiary Account Number
        sb.Append(this.wrapField(subStr(mSKS_EFT_FileDetail.DepBankAcct, 1, 35)));

        //          Beneficiary_Name
        sb.Append(this.wrapField(subStr(strRem(this.CharacterReplacement(mRemittanceName), #Separator), 1, 11)));

        sb.Append(this.wrapField(''));
        sb.Append(this.wrapField(''));
        sb.Append(this.wrapField(''));
        sb.Append(this.wrapField(''));

        //          Transaction Amount
        sb.Append(this.wrapField(num2str(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1, 0, 2, 1, 0)));

        sb.Append(this.wrapField(SKS_PP_StringFormats::strDateYYYYMMDD(mSKS_EFT_FileDetail.EffectiveDate)));

        sb.Append(this.wrapField(''));

        //          Beneficiary_Name
        sb.Append(this.wrapField(subStr(strRem(this.CharacterReplacement(mRemittanceName), #Separator), 12, 17)));

        sb.Append(this.wrapField(''));
        sb.Append(this.wrapField(''));
        sb.Append(this.wrapField(''));

        //          Advice_Format
        advice = SKS_EFT_Format::getCodelookupvalue('BenAdvice', mSKS_EFT_FileDetail.RecId);
        sb.Append(this.wrapField(advice));

        sb.Append(this.wrapField('N'));

        sb.Append(this.wrapField(''));
        sb.Append(this.wrapField(''));
        sb.Append(this.wrapField(''));
        sb.Append(this.wrapField(''));
        sb.Append(this.wrapField(''));

        sb.Append(this.wrapField('@HVP@'));

        //         Reference
        sb.Append(this.wrapField(subStr(strRem(this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference), #Separator), 1, 16) + '_' + num2Str(refCount, 0, 0, 0, 0)));

        //          Payment Currency
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.PaymentCurrencyCode));

        sb.Append(this.wrapField(''));
        sb.Append(this.wrapField(''));
        sb.Append(this.wrapField(''));
        sb.Append(this.wrapField(''));
        sb.Append(this.wrapField(''));
        sb.Append(this.wrapField(''));
        sb.Append(this.wrapField(''));
        sb.Append(this.wrapField(''));
        sb.Append(this.wrapField(''));
        sb.Append(this.wrapField(''));
        sb.Append(this.wrapField(''));
        sb.Append(this.wrapField(''));

        //          Beneficiary Bank Name
        sb.Append(this.wrapField(subStr(strRem(this.CharacterReplacement(mSKS_EFT_VendorPaym.WBenBankName), #Separator), 1, 11)));

        sb.Append(this.wrapField(subStr(strRem(this.CharacterReplacement(mSKS_EFT_VendorPaym.WBenBankName), #Separator), 12, 24)));

        sb.Append(this.wrapField(''));
        sb.Append(this.wrapField(''));
        sb.Append(this.wrapField(''));

        //          Beneficiary Bank Country Location
        sb.Append(this.wrapField(this.getLogisticsAddressCountryISO(mSKS_EFT_VendorPaym.WBenBankCountryRegionId)));

        sb.Append(this.wrapField(''));

        //          Advicing Freetext
        sb.Append(this.wrapField(subStr(strRem(this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('AdvicingFreetext', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank)), #Separator), 1, 11)));

        sb.Append(this.wrapField(subStr(strRem(this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('AdvicingFreetext', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank)), #Separator), 12, 24)));
        sb.Append(this.wrapField(''));
        sb.Append(this.wrapField(''));

        //          Charge Method
        sb.Append(this.wrapField(SKS_EFT_Format::getCodelookupvalue('Charges', mSKS_EFT_FileDetail.RecId), false));
       
        sb.Append(#LineEnd);
       
        if(advice == 'Y')
        {
            this.rec_ADV();

            this.rec_ADVFREE();
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_ADV</Name>
				<Source><![CDATA[
    boolean rec_ADV()
    {
        str     recipient;
        str     value;
        SKS_EB_Vendor   sks_eb_Vendor;
        VendTable       vendorTable;
        LedgerJournalTrans          lLedgerJournalTrans;
        LogisticsElectronicAddress  lLogisticsElectronicAddress;


        totLine++;
        sb.Append(this.wrapField('ADV'));

        sb.Append(this.wrapField(''));
        sb.Append(this.wrapField(''));
        sb.Append(this.wrapField(''));
        sb.Append(this.wrapField(''));
        sb.Append(this.wrapField(''));
        sb.Append(this.wrapField(''));

        sb.Append(this.wrapField('1'));
        sb.Append(this.wrapField('1'));

        sb.Append(this.wrapField(subStr(strRem(this.CharacterReplacement(mRemittanceName), #Separator), 1, 28)));

        recipient = SKS_EFT_Format::getCodelookupvalue('BenBankAccountType', mSKS_EFT_FileDetail.RecId);

        sb.Append(this.wrapField(recipient));

        if(recipient == 'O')
        {
            sb.Append(this.wrapField(strRem(this.CharacterReplacement(mSKS_EFT_VendorPaym.WBenBankBranch), #Separator)));
        }
        else
        {
            sb.Append(this.wrapField(''));
        }

        sb.Append(this.wrapField(''));
        sb.Append(this.wrapField(''));
        sb.Append(this.wrapField(''));
        sb.Append(this.wrapField(''));

        sb.Append(this.wrapField(SKS_EFT_Format::getCodelookupvalue('BenBankAdvice', mSKS_EFT_FileDetail.RecId)));
            
        //          Channel Select Flag
        value = SKS_EFT_Format::getCodelookupvalue('ChannelSelectFlag', mSKS_EFT_FileDetail.RecId);
            
        //          Email Format
        if(value == 'Email-PDF')
        {
            sb.Append(this.wrapField('Y'));
            sb.Append(this.wrapField('1'));
        }
        else if(value == 'Email-CSV')
        {
            sb.Append(this.wrapField('Y'));
            sb.Append(this.wrapField('2'));
        }
        else
        {
            sb.Append(this.wrapField(''));
            sb.Append(this.wrapField(''));
        }

        vendorTable = VendTable::findByCompany(mSKS_EFT_FileDetail.AccountCompany, mSKS_EFT_FileDetail.AccountNum);
            
        if(value == 'Email-PDF' || value == 'Email-CSV')
        {
            sks_eb_Vendor = SKS_EB_Vendor::find(mSKS_EFT_FileDetail.AccountCompany, mSKS_EFT_FileDetail.AccountNum);

            if(sks_eb_Vendor.EM1Vendor)
            {
                sb.Append(this.wrapField(strRem(this.CharacterReplacement(vendorTable.email()), #Separator), false));
            }
        }
        else if(value == 'SMS/Fax-SMS' || value == 'SMS/Fax-Fax' || value == 'Postal')
        {
            sb.Append(this.wrapField(''));
            sb.Append(this.wrapField(''));
            sb.Append(this.wrapField(''));
            sb.Append(this.wrapField(''));
            sb.Append(this.wrapField(''));

            //          SMS or Fax
            if(value == 'SMS/Fax-SMS')
            {
                sb.Append(this.wrapField('SMS'));
                lLogisticsElectronicAddress = DirParty::primaryElectronicAddress(vendorTable.Party, LogisticsElectronicAddressMethodType::Phone);
            }
            else if(value == 'SMS/Fax-Fax')
            {
                sb.Append(this.wrapField('fax'));
                lLogisticsElectronicAddress = DirParty::primaryElectronicAddress(vendorTable.Party, LogisticsElectronicAddressMethodType::Fax);
            }

            if(value == 'SMS/Fax-SMS' || value == 'SMS/Fax-Fax')
            {
                //          SMS/Fax Country Code
                sb.Append(this.wrapField(mRemittanceCountryRegionId));

                //          SMS/Fax Country Number
                sb.Append(this.wrapField(subStr(strRem(this.CharacterReplacement(lLogisticsElectronicAddress.CountryRegionCode), #Separator), 1, 3)));

                //          Fax Area Code
                if(value == 'SMS/Fax-Fax')
                {
                    sb.Append(this.wrapField(strRem(this.CharacterReplacement(lLogisticsElectronicAddress.LocatorExtension), #Separator)));
                }
                else
                {
                    sb.Append(this.wrapField(''));
                }

                //          Phone Number
                sb.Append(this.wrapField(strRem(this.CharacterReplacement(lLogisticsElectronicAddress.Locator), #Separator), false));
            }
            else if(value == 'Postal')
            {
                sb.Append(this.wrapField(''));
                sb.Append(this.wrapField(''));
                sb.Append(this.wrapField(''));
                sb.Append(this.wrapField(''));
                sb.Append(this.wrapField(''));
                sb.Append(this.wrapField(''));
                sb.Append(this.wrapField(''));
                sb.Append(this.wrapField(''));
                sb.Append(this.wrapField(''));
                sb.Append(this.wrapField(''));
                sb.Append(this.wrapField(''));

                sb.Append(this.wrapField('Y'));

                //          Postal Adress
                sb.Append(this.wrapField(strRem(this.CharacterReplacement(mRemittanceAdrLine1), #Separator)));

                sb.Append(this.wrapField(''));
                sb.Append(this.wrapField(''));
                sb.Append(this.wrapField(''));
                sb.Append(this.wrapField(''));
                sb.Append(this.wrapField(''));

                sb.Append(this.wrapField(mRemittanceCountryRegionId));

                //          Postal code
                sb.Append(this.wrapField(this.CharacterReplacement(mRemittanceZipCode), false));
            }
        }

        sb.Append(#LineEnd);

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_ADVFREE</Name>
				<Source><![CDATA[
    boolean rec_ADVFREE()
    {
        totLine++;
        sb.Append(this.wrapField('ADV-FREETXT'));

        sb.Append(this.wrapField('1'));

        sb.Append(this.wrapField(''));
        sb.Append(this.wrapField(''));
        sb.Append(this.wrapField(''));

        sb.Append(this.wrapField(strRem(this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('AdvicingFreetext', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank)), #Separator), false));

        sb.Append(#LineEnd);

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCodePage</Name>
				<Source><![CDATA[
    protected int getCodePage()
    {
        return 65001;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>