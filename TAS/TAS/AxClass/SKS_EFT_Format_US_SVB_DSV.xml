<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_US_SVB_DSV</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_US_SVB_DSV extends SKS_EFT_Format
/// </summary>
class SKS_EFT_Format_US_SVB_DSV extends SKS_EFT_Format
{
    #define.FormatVersion('20220729')
    #define.Separator('|')
    #define.ACH('ACH')
    #define.WIRE('WIRE')
    #define.SEPA('SEPA')
    #define.NUIP('NUIP')
    #define.BACS('BACS')
    #define.BOOK('BOOK')
    #define.CHAPS('CHAPS')
    #define.FASTER('FASTER')

    BankAccountTable mBankAccountTable;
    System.Text.StringBuilder sb;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wrapField</Name>
				<Source><![CDATA[
    private str wrapField(str _field = '', boolean _addSeparator = true, int _fieldLength = 0)
    {
        str text;

        if(_fieldLength > 0)
        {
            text = subStr(_field, 1, _fieldLength);
        }
        else
        {
            text = _field;
        }
        if(_addSeparator)
        {
            text += #Separator;
        }
        return text;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    protected void formatStructure()
    {
        while(mSKS_EFT_FileDetail)
        {
            sb = new System.Text.StringBuilder();

            // Get SKS_EFT_Bank
            this.getSKS_EFT_Bank();

            if(mBankAccountTable.AccountID != mSKS_EFT_FileDetail.BankAccountId)
            {
                // Get Bank Account Table
                mBankAccountTable = BankAccountTable::find(mSKS_EFT_FileDetail.BankAccountId);
            }

            // Get SKS_EFT_VendorPaym
            this.getSKS_EFT_VendorPaym();

            // Get SKS_EFT_FileFormatPaymSpec
            this.getSKS_EFT_FileFormatPaymSpec();
            
            // Payer
            this.rec_Payer();

            // Payee
            this.rec_Payee();

            // Payment
            this.rec_Payment();

            // Intermediary
            this.rec_Intermediary();

            // Additional User Data
            this.rec_AddtnlUserData();

            // Remittance Data
            this.rec_RemittanceData();

            this.fileWrite(sb.ToString());

            next mSKS_EFT_FileDetail;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Payer</Name>
				<Source><![CDATA[
    boolean rec_Payer()
    {
        LogisticsPostalAddress  postalAddress;

        // 1    Record Type Indicator
        sb.Append(this.wrapField(mSKS_EFT_FileFormatPaymSpec.TransactionCode));

        // 2    Payer Name
        sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_Bank.WOrdPartyName), true, 70));

        // 3    Payer Account or IBAN number
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #WIRE)
        {
            sb.Append(this.wrapField(mBankAccountTable.IBAN));
        }
        else
        {
            sb.Append(this.wrapField(mSKS_EFT_FileDetail.BankBankAcct));
        }

        // 4    Company ACH ID
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #ACH)
        {
            sb.Append(this.wrapField(mSKS_EFT_FileDetail.FileACHCompanyId));
        }
        else
        {
            sb.Append(this.wrapField(''));
        }

        // 5    Payer Address 1
        sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_Bank.WOrdPartyAddr), true, 70));

        // 6    Payer Address 2
        sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_Bank.WOrdPartyCity) + ' ' + this.CharacterReplacement(mSKS_EFT_Bank.WOrdPartyState), true, 70));

        // 7    Payer Address 3
        sb.Append(this.wrapField(this.getLogisticsAddressCountryISO(mSKS_EFT_Bank.WOrdPartyCountryRegionId) + ' ' + mSKS_EFT_Bank.WOrdPartyZipCode));

        // 8    Payer Address 4
        sb.Append(this.wrapField(''));

        // 9    Payer Address 5
        sb.Append(this.wrapField(''));

        //10    Payer Bank Name
        sb.Append(this.wrapField(this.CharacterReplacement(mBankAccountTable.Name), true, 100));

        postalAddress = LogisticsLocationEntity::location2PostalAddress(mBankAccountTable.Location);

        //11    Payer Bank Address 1
        sb.Append(this.wrapField(this.CharacterReplacement(postalAddress.Street), true, 70));
        
        //12    Payer Bank Address 2
        sb.Append(this.wrapField(this.CharacterReplacement(postalAddress.City) + ' ' + postalAddress.State, true, 70));

        //13    Payer Bank Address 3
        sb.Append(this.wrapField(this.getLogisticsAddressCountryISO(postalAddress.CountryRegionId) + ' ' + postalAddress.ZipCode));

        //14    Payer Bank Address 4
        sb.Append(this.wrapField(''));

        //15    Payer Bank Address 5
        sb.Append(this.wrapField(''));

        //16    Payer Account Currency
        sb.Append(this.wrapField(mBankAccountTable.CurrencyCode));

        //17    Sequence Number
        sb.Append(this.wrapField(SKS_PP_StringFormats::strRight(this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference), 15)));

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Payee</Name>
				<Source><![CDATA[
    boolean rec_Payee()
    {
        //18    Payee Name
        sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_VendorPaym.WBeneName), true, 70));

        //19    Payee Address 1
        sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_VendorPaym.WBeneAddr), true, 35));

        //20    Payee Address 2
        sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_VendorPaym.WBeneCity) + ' ' + this.CharacterReplacement(mSKS_EFT_VendorPaym.WBeneState), true, 35));

        //21    Payee Address 3
        sb.Append(this.wrapField(this.getLogisticsAddressCountryISO(mSKS_EFT_VendorPaym.WBeneCountryRegionId)));

        //22    Payee Address 4
        sb.Append(this.wrapField(''));
        
        //23    Payee Address 5
        sb.Append(this.wrapField(''));

        //24    Payee Tax ID
        sb.Append(this.wrapField(''));

        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode != #ACH)
        {
            //25    Payee Bank Name
            sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_VendorPaym.WBenBankName), true, 40));

            //26    Payee Bank Address 1
            sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_VendorPaym.WBenBankAddr), true, 35));

            //27    Payee Bank Address 2
            sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_VendorPaym.WBenBankCity), true, 35));

            //28    Payee Bank Address 3
            sb.Append(this.wrapField(this.getLogisticsAddressCountryISO(mSKS_EFT_VendorPaym.WBenBankCountryRegionId)));
        }
        else
        {
            //25    Payee Bank Name
            sb.Append(this.wrapField(''));

            //26    Payee Bank Address 1
            sb.Append(this.wrapField(''));

            //27    Payee Bank Address 2
            sb.Append(this.wrapField(''));

            //28    Payee Bank Address 3
            sb.Append(this.wrapField(''));
        }

        //29    Payee Bank Address 4
        sb.Append(this.wrapField(''));

        //30    Payee Bank Address 5
        sb.Append(this.wrapField(''));

        //31    Payee Routing Number
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.DepBankTransit));
        
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode != #ACH)
        {
            //32    Payee Account Number
            sb.Append(this.wrapField(mSKS_EFT_FileDetail.DepBankAcct));

            //33    Payee Account Type
            if(mSKS_EFT_FileDetail.DepBankAcctType == BankAccountType::CheckingAccount)
            {
                sb.Append(this.wrapField('CHECKING'));
            }
            else
            {
                sb.Append(this.wrapField('SAVING'));
            }
        }
        else
        {
            //32    Payee Account Number
            sb.Append(this.wrapField(''));

            //33    Payee Account Type
            sb.Append(this.wrapField(''));
        }
        
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Payment</Name>
				<Source><![CDATA[
    boolean rec_Payment()
    {
        //34    Execution Date
        sb.Append(this.wrapField(date2str(mSKS_EFT_FileDetail.EffectiveDate, 123, DateDay::Digits2, DateSeparator::None,DateMonth::Digits2, DateSeparator::None, DateYear::Digits4)));
        
        //35    Settlement Date
        sb.Append(this.wrapField(''));

        //36    Payment Amount
        sb.Append(this.wrapField(num2str(this.getPositiveAmount(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur), 0, 2, 1, 0)));

        //37    Credit/Debit Flag
        if(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur > 0)
        {
            sb.Append(this.wrapField('D'));
        }
        else
        {
            sb.Append(this.wrapField('C'));
        }

        //38    ACH PreNote
        sb.Append(this.wrapField(''));

        //39    Destination Currency Code
        sb.Append(this.wrapField(''));

        //40    SEC Code
        if(mSKS_EFT_FileFormatPaymSpec.PaymSpec == 'ACH-CCD')
        {
            sb.Append(this.wrapField('CCD'));
        }
        else if(mSKS_EFT_FileFormatPaymSpec.PaymSpec == 'ACH-PPD')
        {
            sb.Append(this.wrapField('PPD'));
        }
        else
        {
            sb.Append(this.wrapField(''));
        }

        //41    Payment Type Code
        sb.Append(this.wrapField(''));

        //42    Transaction Code
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #ACH)
        {
            switch(mSKS_EFT_FileDetail.DepBankAcctType)
            {
                case BankAccountType::CheckingAccount:
                    if(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur > 0)
                    {
                        sb.Append(this.wrapField('27'));
                    }
                    else
                    {
                        sb.Append(this.wrapField('22'));
                    }
                    break;
                default:                            //SavingsAccount
                    if(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur > 0)
                    {
                        sb.Append(this.wrapField('37'));
                    }
                    else
                    {
                        sb.Append(this.wrapField('32'));
                    }
                    break;
            }
        }
        else
        {
            sb.Append(this.wrapField(''));
        }

        //43    Company Entity Code
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #ACH)
        {
            sb.Append(this.wrapField('PAYABLE'));
        }
        else
        {
            sb.Append(this.wrapField(''));
        }

        //44    Charge Bearer Code
        sb.Append(this.wrapField(''));

        //45    Equivalent Amount
        sb.Append(this.wrapField(''));

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Intermediary</Name>
				<Source><![CDATA[
    boolean rec_Intermediary()
    {
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #WIRE ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #SEPA ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #NUIP)
        {
            //46    Intermediary Bank Name
            sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_VendorPaym.WIntBankName), true, 35));

            //47    Intermediary Bank Address 1
            sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_VendorPaym.WIntBankAddr), true, 35));

            //48    Intermediary Bank Address 2
            sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_VendorPaym.WIntBankCity), true, 35));

            //49    Intermediary Bank Address 3
            sb.Append(this.wrapField(this.getLogisticsAddressCountryISO(mSKS_EFT_VendorPaym.WIntBankCountryRegionId)));
        }
        else
        {
            //46    Intermediary Bank Name
            sb.Append(this.wrapField(''));

            //47    Intermediary Bank Address 1
            sb.Append(this.wrapField(''));

            //48    Intermediary Bank Address 2
            sb.Append(this.wrapField(''));

            //49    Intermediary Bank Address 3
            sb.Append(this.wrapField(''));
        }

        //50    Intermediary Bank Address 3
        sb.Append(this.wrapField(''));

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_AddtnlUserData</Name>
				<Source><![CDATA[
    boolean rec_AddtnlUserData()
    {
        //51    User Definable String 1
        sb.Append(this.wrapField(''));

        //52    User Definable String 2
        sb.Append(this.wrapField(''));

        //53    User Definable String 3
        sb.Append(this.wrapField(''));

        //54    User Definable String 4
        sb.Append(this.wrapField(''));

        //55    User Definable String 5
        sb.Append(this.wrapField(''));

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_RemittanceData</Name>
				<Source><![CDATA[
    boolean rec_RemittanceData()
    {
        //56    Invoice Number
        sb.Append(this.wrapField(this.getInvoiceNbrs()));

        //57    Invoice Date
        sb.Append(this.wrapField(''));

        //58    Reference for Beneficiary
        sb.Append(this.wrapField(''));

        //59    Comments
        sb.Append(this.wrapField(''));

        //60    User Definable String 1
        sb.Append(this.wrapField(''));

        //61    User Definable String 2
        sb.Append(this.wrapField('', false));

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceNbrs</Name>
				<Source><![CDATA[
    private str getInvoiceNbrs()
    {
        SKS_EFT_FileDetail invSKS_EFT_FileDetail;
        str invDetailsString;

        while select InvoiceNumber from invSKS_EFT_FileDetail
        where invSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId
           && invSKS_EFT_FileDetail.InvoiceNumber != ''
        {
            invDetailsString += strFmt('%1, ', invSKS_EFT_FileDetail.InvoiceNumber);
        }

        invDetailsString = subStr(invDetailsString, 1, strLen(invDetailsString)-2);

        return invDetailsString;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>