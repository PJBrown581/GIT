<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFTAP_CreateSendFileBatch</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// To automate the direct debit process through batch.
/// </summary>
// 9205 CR
class SKS_EFTAP_CreateSendFileBatch extends Runbasebatch
{
    SKS_EFT_FileNbr         fileNbr;
    SKS_EFT_Module          module;
    SKS_EFT_EmailSendType   emailType;
    Email                   emailAddr;
    CustVendAc              account;
    NoYes                   advEmail;
    RefRecId                batchRecId;
    RefRecId                fileDetailRecId;
    NoYes                   failedCntUpdated;
    NoYes                   APEFTAutoPost;
    DialogField dialogFileNbr;
    DialogField dialogEmailType;
    DialogField dialogEmailAddr;
    DialogField dialogModule;
    DialogField dialogAccount;
    DialogField dialogAdvEmail;
    DialogField dialogbatchRecId;
    DialogField dialogfileDetailRecId;
   
#Define.CurrentVersion(1)
#LOCALMACRO.CurrentList
        fileNbr,
        module,
        emailType,
        emailAddr,
        account,
        advEmail,
        batchRecId,
        fileDetailRecId,
        APEFTAutoPost
    #ENDMACRO

  

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method invokes run method and confirms successful execution.
    /// </summary>
    /// <param name="_args">
    /// arguments from caller.
    /// </param>
    /// <param name="_cancellationToken"> 
    Public static void main(Args _args)
    {
        SKS_EFTAP_CreateSendFileBatch sks_EFTAP_CreateSendFileBatch = new SKS_EFTAP_CreateSendFileBatch();

        if(sks_EFTAP_CreateSendFileBatch.prompt())
        {
            sks_EFTAP_CreateSendFileBatch.run();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version     version = RunBase::getVersion(packedClass);
        boolean     retVal = true;
        
        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = packedClass;
                break;
            default:
                retVal = false;
                break;
        }

        return retVal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>createMultiThreadBatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method create the batch job and execute immediately.
    /// </summary>
    /// <param name="_sks_eftap_file">
    /// The record of the <c>SKS_EFTAP_File</c> table.
    /// </param>
    /// <param name="_action">
    /// It Contains the action type SKS_PP_NextActionDisplay.
    /// </param
    /// <param name="_emailType">
    /// It Contains the e-mail sendtype.
    /// </param>
    /// <param name="_emailAddr">
    /// It contains email address to sent.
    /// </param>
    /// <param name="_account">
    /// It contains the customer account.
    /// </param>
    /// <param name="_advEmail">
    /// It contains the details of advance mail.
    /// </param>
    public static void createMultiThreadBatch(SKS_EFTAP_File _sks_eftap_file,
        SKS_PP_NextActionDisplay _action,
        SKS_EFT_EmailSendType _emailType = SKS_EFT_EmailSendType::All,
        Email _emailAddr = '',
        CustVendAc _account = '',
        NoYes _advEmail = NoYes::No,
        SKS_EFT_FileDetail _sKS_EFT_FileDetail = null,
        NoYes _apEFTAutoPost = NoYes::No)
    {      
        Batch               Batch;
        BatchHeader         batHeader;
        RunBaseBatch        rbbTask;
        BatchInfo           batInfo;
        
        ttsBegin;    
        rbbTask = new SKS_EFTAP_CreateSendFileBatch();    
        batInfo = rbbTask.batchInfo();             
        batInfo.parmGroupId(''); // The "Empty batch group".             
    
        batHeader = BatchHeader::construct();
        batInfo.parmAutomaticTransaction(false);
        if(_sks_eftap_file.EFTFileType == SKS_EFT_Module::AR)
        {
            if(_action == SKS_PP_NextActionDisplay::SendAdvEmail)
            {
                batInfo.parmCaption(strFmt("@SKS:SKGDirectDebitDAdvEmailForFile",_sks_eftap_file.FileNbr,curExt()));
            }
            else
            {
                batInfo.parmCaption(strFmt("@SKS:SKGDirectDebitEmailForFile",_sks_eftap_file.FileNbr,curExt()));
            }
        }
        //CR - 9496 start
        else
        {
            batInfo.parmCaption(strFmt("@SKS:SKGAPEFTEmailForFile",_sks_eftap_file.FileNbr,curExt()));
        }
        //CR - 9496 endl
        batHeader.addTask(rbbTask);                                              
        batHeader.save();                
        Batch = batInfo.parmBatch();
        if(Batch)
        {
            Batch.reread();
            Batch.selectForUpdate(true);
            Batch.Parameters = [#CurrentVersion, _sks_eftap_file.FileNbr, _sks_eftap_file.EFTFileType, _emailType, _emailAddr, _account, _advEmail, Batch.RecId, _sKS_EFT_FileDetail.RecId, _apEFTAutoPost];
            Batch.update();                        
        }
        _sKS_EFTAP_File.selectForUpdate(true);
        if(_action == SKS_PP_NextActionDisplay::SendAdvEmail)
        {
            _sKS_EFTAP_File.FileStatus = SKS_EFT_FileStatus::AdvEmailPending;
        }
        else
        {
            SKS_EFT_FileStatus fileStatus = SKS_EFT_FileStatus::CompletedEmailPending;

            if (_sKS_EFTAP_File.FileStatus == SKS_EFT_FileStatus::Transmitted)
            {
                fileStatus = SKS_EFT_FileStatus::TransmittedEmailPending;
            }

            _sKS_EFTAP_File.FileStatus = fileStatus;
        }
        _sKS_EFTAP_File.update();
        ttsCommit;  
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase   dialog = super();

        dialog.addGroup("@SYS7755");
        dialogFileNbr = dialog.addField(extendedtypestr(SKS_EFT_FileNbr));
        dialogFileNbr.value(fileNbr);

        dialogModule = dialog.addField(enumStr(SKS_EFT_Module));
        dialogModule.value(module);

        dialogEmailType = dialog.addField(enumStr(SKS_EFT_EmailSendType));
        dialogEmailType.value(emailType);

        dialogEmailAddr = dialog.addField(extendedTypeStr(Email));
        dialogEmailAddr.value(emailAddr);     

        dialogAccount = dialog.addField(extendedTypeStr(CustVendAc));
        dialogAccount.value(account);

        dialogAdvEmail = dialog.addField(enumStr(NoYes));
        dialogAdvEmail.value(advEmail); 
     
        dialogbatchRecId = dialog.addField(extendedTypeStr(RefRecId));
        dialogbatchRecId.value(batchRecId);

        dialogfileDetailRecId = dialog.addField(extendedTypeStr(RefRecId));
        dialogfileDetailRecId.value(fileDetailRecId);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret; 
    
        ret = super();

        fileNbr         = dialogFileNbr.value();
        module          = dialogModule.value();
        emailType       = dialogEmailType.value();
        emailAddr       = dialogEmailAddr.value();
        account         = dialogAccount.value();
        advEmail        = dialogAdvEmail.value();
        batchRecId      = dialogbatchRecId.value();
        fileDetailRecId = dialogfileDetailRecId.value();
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    public boolean runsImpersonated()
    {       
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    public boolean canGoBatch()
    {       
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method try to send the e-mail.
    /// </summary>
    [SuppressBPWarningAttribute("BPCheckSelectForUpdateAbsent","Buffer sKS_EFTAP_File is selected forUpdate and is passed to other methods where it is modified.")]
    public void run()
    {
        boolean ret;
        SKS_EFTAP_File      sKS_EFTAP_File;
        SKS_EFT_FileDetail  lSKS_EFT_FileDetail;
        SKS_EFT_Processing  sKS_EFT_Processing = new SKS_EFT_Processing();
        SKS_EFT_SendMail    sks_eft_SendMail = new SKS_EFT_SendMail();

        SKS_EFTAP_File      lsKS_EFTAP_File;
        SKS_EFT_Processing  lsks_eft_Processing = new SKS_EFT_Processing();
        boolean remitDetails = true;

        //SKS_FDD_21456--->
        if(module == SKS_EFT_Module::AP)
        {
            select firstonly lsKS_EFTAP_File where lsKS_EFTAP_File.FileNbr == fileNbr &&
                lsKS_EFTAP_File.EFTFileType == module;

            if(SKS_EFT_FileFormat::find(lsKS_EFTAP_File.FormatId).RemitDetailProcessing == NoYes::Yes)
            {
                remitDetails = lsks_eft_Processing.processRemitDetails(lsKS_EFTAP_File.RecId);
            }

            if(remitDetails)
            {
                if(APEFTAutoPost)
                {
                    SKS_EFT_PaymJournalPostBatch::createMultiThreadBatch(lsKS_EFTAP_File);
                }
            }
            else
            {
                lsks_eft_Processing.Update_SKS_EFTAP_File_FileStatus(SKS_EFT_FileStatus::CompletedRemitdetailFailed,SKS_EFT_Module::AP);
            }
        }
        //SKS_FDD_21456<---

        if(remitDetails)
        {
            try
            {
                ret = sks_eft_SendMail.process_EFT_eMail(fileNbr, module, emailType, '', account, advEmail);
            
                // If ret is false ,making batch job end with 'Error' status.
                if(ret == false)
                {
                    throw Exception::Info;
                }
            }
            catch
            {
            }
            finally
            {
                // To update status and failure count irrespective of any exception.
                ttsbegin;
                select forupdate RecId, FXAProcessing, JournalOption, FileStatus from sKS_EFTAP_File
                        where sKS_EFTAP_File.FileNbr == fileNbr &&
                            sKS_EFTAP_File.EFTFileType == module;

                sKS_EFT_Processing.parmSKS_EFTAP_File(sKS_EFTAP_File);

                if(module == SKS_EFT_Module::AR)
                {
                    if(ret == false)
                    {
                        if(advEmail)
                        {
                            sks_eft_Processing.Update_SKS_EFTAP_File_FileStatus(SKS_EFT_FileStatus::AdvEmailFailed, SKS_EFT_Module::AR, NoYes::Yes);
                            // If ret is false and failure count is not updated from process_EFT_eMail method.
                            if(sks_eft_SendMail.parmSKS_EFT_FileDetailFailCntUpdated() == false)
                            {
                                this.Update_SKS_EFT_FileDetail(sKS_EFTAP_File, fileDetailRecId, SKS_EFT_FileStatus::AdvEmailFailed, 1, 0);
                            }
                        }
                        else
                        {
                            sks_eft_Processing.Update_SKS_EFTAP_File_FileStatus(SKS_EFT_FileStatus::CompletedNoEmail, SKS_EFT_Module::AR);
                            // If ret is false and failure count is not updated from process_EFT_eMail method.
                            if(sks_eft_SendMail.parmSKS_EFT_FileDetailFailCntUpdated() == false)
                            {
                                this.Update_SKS_EFT_FileDetail(sKS_EFTAP_File, fileDetailRecId, SKS_EFT_FileStatus::CompletedNoEmail, 1, 0);
                            }
                        }
                    }
                    else
                    {
                        if(advEmail)
                        {
                            sks_eft_Processing.Update_SKS_EFTAP_File_FileStatus(SKS_EFT_FileStatus::AdvEmailSent, SKS_EFT_Module::AR, NoYes::Yes);
                        }
                        else
                        {
                            SKS_EFT_FileStatus fileStatus = SKS_EFT_FileStatus::Completed;

                            if (sKS_EFTAP_File.FileStatus == SKS_EFT_FileStatus::TransmittedEmailPending)
                            {
                                fileStatus = SKS_EFT_FileStatus::Transmitted;
                            }

                            sks_eft_Processing.Update_SKS_EFTAP_File_FileStatus(fileStatus, SKS_EFT_Module::AR);
                        }
                    }
                }
                //CR - 9496 start
                else
                {
                    if(ret == false)
                    {
                        sks_eft_Processing.Update_SKS_EFTAP_File_FileStatus(SKS_EFT_FileStatus::CompletedNoEmail, SKS_EFT_Module::AP);
                        // If ret is false and failure count is not updated from process_EFT_eMail method.
                        if(sks_eft_SendMail.parmSKS_EFT_FileDetailFailCntUpdated() == false)
                        {
                            this.Update_SKS_EFT_FileDetail(sKS_EFTAP_File, fileDetailRecId, SKS_EFT_FileStatus::CompletedNoEmail, 1, 0);
                        }
                    
                    }
                    else
                    {
                        select firstonly lSKS_EFT_FileDetail where lSKS_EFT_FileDetail.FileRecId == sKS_EFTAP_File.RecId && lSKS_EFT_FileDetail.EmailFailed != 0 ;
                        if(!lSKS_EFT_FileDetail)
                        {
                            sks_eft_Processing.Update_SKS_EFTAP_File_FileStatus(SKS_EFT_FileStatus::Completed, SKS_EFT_Module::AP);
                        }
                        else
                        {
                            sks_eft_Processing.Update_SKS_EFTAP_File_FileStatus(SKS_EFT_FileStatus::CompletedNoEmail, SKS_EFT_Module::AP);
                        }
                    }
                }
                //CR - 9496 end
                ttscommit;
            }
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    public ClassDescription caption()
    {
        ClassDescription ret;
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update_SKS_EFT_FileDetail</Name>
				<Source><![CDATA[
    public void update_SKS_EFT_FileDetail(
        SKS_EFTAP_File      _sKS_EFTAP_File,
        RefRecId            _sKS_EFT_FileDetailRecId,
        SKS_EFT_FileStatus  _keepDeleteStatus,
        int failCount,
        int sentCount)
    {
        SKS_EFT_FileDetail      sKS_EFT_FileDetail;
        SKS_EFT_FileDetail      mSKS_EFT_FileDetail;
        SKS_EFT_FileDetail      sks_eft_FileDetailLoc;
        SKS_EFT_FileDetailAdv   sks_eft_FileDetailAdv;

        if(_sKS_EFT_FileDetailRecId)
        {
            select AccountCompany, AccountNum, BankAccountId, PaymMode, count(fileRecID)
                from sKS_EFT_FileDetail
                    group by AccountCompany, AccountNum, BankAccountId, PaymMode
                        where sKS_EFT_FileDetail.RecordType == SKS_EFT_RecordType::Invoice &&
                            sKS_EFT_FileDetail.PaymentRejected == NoYes::No &&
                            sKS_EFT_FileDetail.FileRecId == _sKS_EFTAP_File.RecId &&
                            sKS_EFT_FileDetail.RecId == _sKS_EFT_FileDetailRecId;
        }
        else
        {
            select AccountCompany, AccountNum, BankAccountId, PaymMode, count(fileRecID)
                from sKS_EFT_FileDetail
                    group by AccountCompany, AccountNum, BankAccountId, PaymMode
                        where sKS_EFT_FileDetail.RecordType == SKS_EFT_RecordType::Invoice &&
                            sKS_EFT_FileDetail.PaymentRejected == NoYes::No &&
                            sKS_EFT_FileDetail.FileRecId == _sKS_EFTAP_File.RecId;
        }
        While (sKS_EFT_FileDetail)
        {
            ttsbegin;
            if (_keepDeleteStatus == SKS_EFT_FileStatus::AdvEmailFailed ||
                _keepDeleteStatus == SKS_EFT_FileStatus::AdvEmailNotSent ||
                _keepDeleteStatus == SKS_EFT_FileStatus::AdvEmailSent)
            {
                update_recordset mSKS_EFT_FileDetail
                    setting FileStatus = _keepDeleteStatus,
                        AdvEmailFailed = mSKS_EFT_FileDetail.AdvEmailFailed + failCount,
                        AdvEmailSent = mSKS_EFT_FileDetail.AdvEmailSent + sentCount
                    where mSKS_EFT_FileDetail.FileRecId == _sKS_EFTAP_File.RecId
                        && mSKS_EFT_FileDetail.AccountCompany == sKS_EFT_FileDetail.AccountCompany
                        && mSKS_EFT_FileDetail.AccountNum == sKS_EFT_FileDetail.AccountNum
                        && mSKS_EFT_FileDetail.BankAccountId == sKS_EFT_FileDetail.BankAccountId
                        && mSKS_EFT_FileDetail.PaymMode == sKS_EFT_FileDetail.PaymMode;

                select firstonly * from sks_eft_FileDetailLoc
                    where sks_eft_FileDetailLoc.FileRecId == _sKS_EFTAP_File.RecId
                        && sks_eft_FileDetailLoc.InvoiceNumber != ''
                        && sks_eft_FileDetailLoc.AccountCompany == sKS_EFT_FileDetail.AccountCompany
                        && sks_eft_FileDetailLoc.AccountNum     == sKS_EFT_FileDetail.AccountNum
                        && sks_eft_FileDetailLoc.BankAccountId  == sKS_EFT_FileDetail.BankAccountId
                        && sks_eft_FileDetailLoc.PaymMode       == sKS_EFT_FileDetail.PaymMode;

                sks_eft_FileDetailAdv = SKS_EFT_FileDetailAdv::find(sks_eft_FileDetailLoc.PaymentLineRecId,
                                                        sks_eft_FileDetailLoc.PmtSelectionRecId,
                                                        sks_eft_FileDetailLoc.VendTransRecId,
                                                        sks_eft_FileDetailLoc.FileRecId,
                                                        true);

                sks_eft_FileDetailAdv.AdvEmailFailed    =  sks_eft_FileDetailLoc.AdvEmailFailed;
                sks_eft_FileDetailAdv.AdvEmailSent      =  sks_eft_FileDetailLoc.AdvEmailSent;
                sks_eft_FileDetailAdv.FileRecId         =  sks_eft_FileDetailLoc.FileRecId;
                sks_eft_FileDetailAdv.PaymentLineRecId  =  sks_eft_FileDetailLoc.PaymentLineRecId;
                sks_eft_FileDetailAdv.VendTransRecId    =  sks_eft_FileDetailLoc.VendTransRecId;
                sks_eft_FileDetailAdv.PmtSelectionRecId =  sks_eft_FileDetailLoc.PmtSelectionRecId;

                
                if (sks_eft_FileDetailAdv.RecId != 0)
                {
                    sks_eft_FileDetailAdv.update();
                }
                else
                {
                    sks_eft_FileDetailAdv.insert();
                }
            }
            else
            {
                select firstonly sks_eft_FileDetailLoc
                    where sks_eft_FileDetailLoc.FileRecId == _sKS_EFTAP_File.RecId
                        && sks_eft_FileDetailLoc.InvoiceNumber != ''
                        && sks_eft_FileDetailLoc.AccountCompany == sKS_EFT_FileDetail.AccountCompany
                        && sks_eft_FileDetailLoc.AccountNum     == sKS_EFT_FileDetail.AccountNum
                        && sks_eft_FileDetailLoc.BankAccountId  == sKS_EFT_FileDetail.BankAccountId
                        && sks_eft_FileDetailLoc.PaymMode       == sKS_EFT_FileDetail.PaymMode;

                sks_eft_FileDetailAdv = SKS_EFT_FileDetailAdv::find(sks_eft_FileDetailLoc.PaymentLineRecId,
                                                        sks_eft_FileDetailLoc.PmtSelectionRecId,
                                                        sks_eft_FileDetailLoc.VendTransRecId,
                                                        sks_eft_FileDetailLoc.FileRecId,
                                                        true);

                update_recordset mSKS_EFT_FileDetail
                    setting FileStatus = _keepDeleteStatus,
                        EmailFailed = mSKS_EFT_FileDetail.EmailFailed + failCount,
                        EmailSent = mSKS_EFT_FileDetail.EmailSent + sentCount,
                        AdvEmailFailed = mSKS_EFT_FileDetail.AdvEmailFailed,
                        AdvEmailSent   = mSKS_EFT_FileDetail.AdvEmailSent
                        where mSKS_EFT_FileDetail.FileRecId == _sKS_EFTAP_File.RecId
                            && mSKS_EFT_FileDetail.AccountCompany == sKS_EFT_FileDetail.AccountCompany
                            && mSKS_EFT_FileDetail.AccountNum == sKS_EFT_FileDetail.AccountNum
                            && mSKS_EFT_FileDetail.BankAccountId == sKS_EFT_FileDetail.BankAccountId
                            && mSKS_EFT_FileDetail.PaymMode == sKS_EFT_FileDetail.PaymMode;
            }
            ttscommit;
            next sKS_EFT_FileDetail;
        }
        
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>