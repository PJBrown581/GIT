<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_RF_Format_US_CHASE_GFF</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_EFT_RF_Format_US_CHASE_GFF extends SKS_EFT_RF_Format
{
    //Class Variables
    //primities
    str mTag;
    str mFileName;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createSentFile</Name>
				<Source><![CDATA[
    private SKS_EFT_RF_SentFile createSentFile(str _CurrentRecord)
    {
        SKS_EFT_RF_SentFile locSKS_EFT_RF_SentFile;
        ;
    
        locSKS_EFT_RF_SentFile = new SKS_EFT_RF_SentFile();
        //Set the File Reference Number
        locSKS_EFT_RF_SentFile.setID(strLRTrim(SKS_PP_StringFormats::strSub(_CurrentRecord, 3, 6)));
        //Set the File Status
        locSKS_EFT_RF_SentFile.setStatus(SKS_PP_StringFormats::strSub(_CurrentRecord, 23,1));
        return locSKS_EFT_RF_SentFile;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTransaction</Name>
				<Source><![CDATA[
    private SKS_EFT_RF_Transaction createTransaction(str _CurrentRecord)
    {
        SKS_EFT_RF_Transaction locSKS_EFT_RF_Transaction;
    
        locSKS_EFT_RF_Transaction = new SKS_EFT_RF_Transaction();
        locSKS_EFT_RF_Transaction.setID(strLRTrim(SKS_PP_StringFormats::strSub(_CurrentRecord, 3, 16)));
        locSKS_EFT_RF_Transaction.setStatus(SKS_PP_StringFormats::strSub(_CurrentRecord, 62, 1));
        return locSKS_EFT_RF_Transaction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFile</Name>
				<Source><![CDATA[
    public SKS_EFT_RF_File getFile(str _filename, boolean _serverPath, SKS_BF_BankIntType _SKS_BF_BankIntType = SKS_BF_BankIntType::FileHubLocal)
    {
        SKS_EFT_RF_SentFile locSKS_EFT_RF_SentFile;
        SKS_EFT_RF_Transaction locSKS_EFT_RF_Transaction;
        str locCurrentRecord;
        SKS_EB_FileHub locSKS_EB_FileHub = SKS_EB_FileHub::construct(_SKS_BF_BankIntType);
        System.String locString;
        System.IO.StreamReader locStreamReader;
    
        //Setup filestream
        locSKS_EB_FileHub.setFileName(_filename);
        locSKS_EB_FileHub.runFileInquire();
        if(!locSKS_EB_FileHub.attrFileExists())
        {
            // The file %1 does not exist.
            error(strfmt("@SYS62207", _filename));
            return null;
        }
        locSKS_EB_FileHub.runFileLoad(_filename);
        locSKS_EB_FileHub.StreamInit();
        locStreamReader = new System.IO.StreamReader(locSKS_EB_FileHub.streamGet());
    
        //begin processing file
        while(!locStreamReader.get_EndOfStream())
        {
            locCurrentRecord = locStreamReader.ReadLine();
            if(strUpr(SKS_PP_StringFormats::strSub(locCurrentRecord, 1, 2)) == 'FH')
            {
                if(!mSKS_EFT_RF_File)
                {
                    mSKS_EFT_RF_File = new SKS_EFT_RF_File();
                    mSKS_EFT_RF_File.setUtcDateTime(
                        str2datetime(SKS_PP_StringFormats::strSub(locCurrentRecord, 28, 8)
                        + ' '
                        + SKS_PP_StringFormats::strSub(locCurrentrecord, 36, 6), 321));
                    mSKS_EFT_RF_File.setAdditionalData(SKS_PP_StringFormats::strSub(locCurrentrecord, 42, 4));
                }
            }
            else if(strUpr(SKS_PP_StringFormats::strSub(locCurrentRecord, 1, 2)) == 'FS')
            {
                if(locSKS_EFT_RF_SentFile)
                {
                    mSKS_EFT_RF_File.addSentFile(locSKS_EFT_RF_SentFile);
                }
                locSKS_EFT_RF_SentFile = this.createSentFile(locCurrentRecord);
            }
            else if(strUpr(SKS_PP_StringFormats::strSub(locCurrentRecord, 1, 2)) == 'CN')
            {
                if(locSKS_EFT_RF_Transaction)
                {
                    locSKS_EFT_RF_SentFile.addTransaction(locSKS_EFT_RF_Transaction);
                }
                locSKS_EFT_RF_Transaction = this.createTransaction(locCurrentRecord);
            }
            else if(strUpr(SKS_PP_StringFormats::strSub(locCurrentRecord, 1, 2)) == 'RJ')
            {
                locSKS_EFT_RF_Transaction = this.modifyTransactionWithRejectData(locSKS_EFT_RF_Transaction, locCurrentRecord);
            }
            else if(strUpr(SKS_PP_StringFormats::strSub(locCurrentRecord, 1, 2)) == 'FT')
            {
                if(locSKS_EFT_RF_Transaction)
                {
                    locSKS_EFT_RF_SentFile.addTransaction(locSKS_EFT_RF_Transaction);
                }
                mSKS_EFT_RF_File.addSentFile(locSKS_EFT_RF_SentFile);
                locSKS_EFT_RF_SentFile = null;
            }
        }
    
        //must use the getSKS_EFT_RF_File() method becuase, if any pending mSKS_EFT_RF_SentFile have yet to be pushed into the list, this will do it.
        locStreamReader.Close();

        return this.getSKS_EFT_RF_File();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFormatId</Name>
				<Source><![CDATA[
    public str getFormatId(str _filename, boolean _serverPath, SKS_BF_BankIntType _SKS_BF_BankIntType = SKS_BF_BankIntType::FileHubLocal)
    {
    
        str rtnval = '';
        str locCurrentLine = '';
        int classId;
        int locLineLength = 210;
        //BEGIN VALIDATION VARIABLES
        //BEGIN QUALIFIERS
        boolean locFHfound = false;
        boolean locBankFlagFound = false;
        boolean locFrontEndFlagFound = false;
        boolean locFSfound = false;
        boolean locAccptRjctFlagFound = false;
        boolean locFSWhiteSpaceFlagFound = false;
        boolean locFTfound = false;
    
    
    
    
    
        /*boolean pos25to33NumericReferenceNbr = false;
        boolean pos34Space = false;
        boolean pos52to53Spaces = false;
        boolean pos71to75Spaces = false;
        boolean pos76to83Date = false;
        boolean pos84to88Spaces = false;
        boolean pos89to96Date = false;*/
        //BEGIN DISQUALIFIER VARIABLES
        //none
    
        //END VALIDATION VARIABLES
        SKS_EB_FileHub locSKS_EB_FileHub = SKS_EB_FileHub::construct(_SKS_BF_BankIntType);
        System.String locString;
        System.IO.StreamReader locStreamReader;
    
        //Setup filestream
        locSKS_EB_FileHub.setFileName(_filename);
        locSKS_EB_FileHub.runFileInquire();
        if(!locSKS_EB_FileHub.attrFileExists())
        {
            // The file %1 does not exist.
            error(strfmt("@SYS62207", _filename));
            return null;
        }
        locSKS_EB_FileHub.runFileLoad(_filename);
        locSKS_EB_FileHub.StreamInit();
        locStreamReader = new System.IO.StreamReader(locSKS_EB_FileHub.streamGet());
    
    
        //a valid CHASE_GFF Acknowledgment file has records of length 210
        while(!locStreamReader.get_EndOfStream())
        {
            locCurrentLine = locStreamReader.ReadLine();
            if(strLen(locCurrentLine) > 0)
            {
    
                if(strUpr(SKS_PP_StringFormats::strSub(locCurrentLine, 1, 2)) == 'FH')
                {
                    locFHfound = true;
                    if(strUpr(SKS_PP_StringFormats::strSub(locCurrentLine, 3, 5)) == strUpr('CHASE'))
                        locBankFlagFound = true;
                    if(SKS_PP_StringFormats::strSub(locCurrentLine, 46, 2) == '01')
                        locFrontEndFlagFound = true;
                }
                if(strUpr(SKS_PP_StringFormats::strSub(locCurrentLine, 1, 2)) == 'FS')
                {
                    locFSfound = true;
                    if(strUpr(SKS_PP_StringFormats::strSub(locCurrentLine, 23, 1)) == 'A' || strUpr(SKS_PP_StringFormats::strSub(locCurrentLine, 23, 1)) == 'R')
                        locAccptRjctFlagFound = true;
                    if(SKS_PP_StringFormats::strSub(locCurrentLine, 57, 2) == SKS_PP_StringFormats::strFill(2,'',SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left))
                        locFSWhiteSpaceFlagFound = true;
                }
                if(strUpr(SKS_PP_StringFormats::strSub(locCurrentLine, 1, 2)) == 'FT')
                {
                    locFTfound = true;
                }
    
            }
        }
        if(locFHfound
            && locBankFlagFound
            && locFrontEndFlagFound
            && locFSfound
            && locAccptRjctFlagFound
            && locFSWhiteSpaceFlagFound
            && locFTfound)
        {
            //ALl Qualifers show this a SWIFT_ACKNAK_07262013 file
            classId = classIdGet(this);
            rtnval = classId2Name(ClassId);
        }
        locStreamReader.Close();
    
        return rtnval;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSKS_EFT_RF_File</Name>
				<Source><![CDATA[
    public SKS_EFT_RF_File getSKS_EFT_RF_File()
    {
    
        if(mSKS_EFT_RF_SentFile != null)
        {
            mSKS_EFT_RF_File.addSentFile(mSKS_EFT_RF_SentFile);
            mSKS_EFT_RF_SentFile = null;
        }
    
        return mSKS_EFT_RF_File;
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyTransactionWithRejectData</Name>
				<Source><![CDATA[
    private SKS_EFT_RF_Transaction modifyTransactionWithRejectData(SKS_EFT_RF_Transaction _SKS_EFT_RF_Transaction, str _CurrentRecord)
    {
        SKS_EFT_RF_Transaction locSKS_EFT_RF_Transaction = _SKS_EFT_RF_Transaction;
    
        locSKS_EFT_RF_Transaction.setStatusReason(strLRTrim(SKS_PP_StringFormats::strSub(_CurrentRecord, 19, 5)));
        locSKS_EFT_RF_Transaction.setStatusReasonDesc(strLRTrim(SKS_PP_StringFormats::strSub(_CurrentRecord, 24, 80)));
        locSKS_EFT_RF_Transaction.setAdditionalData(strLRTrim(SKS_PP_StringFormats::strSub(_CurrentRecord, 24, 80)));
        return locSKS_EFT_RF_Transaction;
    
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFileKey</Name>
				<Source><![CDATA[
    protected void setFileKey(str _InboundFileKey)
    {
        mSKS_EFT_RF_SentFile.setID(_InboundFileKey);
    }

]]></Source>
			</Method>
			<Method>
				<Name>outboundFileKeyGen</Name>
				<Source><![CDATA[
    public static str outboundFileKeyGen(str _OutFilename, SKS_EFTAP_File _SKS_EFTAP_File, System.IO.StreamReader _StreamReader = null)
    {
        SKS_EFT_FileData locSKS_EFT_FileData;
    
        Select firstonly FieldValue from locSKS_EFT_FileData
            where locSKS_EFT_FileData.RefRecId == _SKS_EFTAP_File.RecId
            && locSKS_EFT_FileData.FieldName == 'FileKey';
    
        return locSKS_EFT_FileData.FieldValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>outboundTransKeyGen</Name>
				<Source><![CDATA[
    public static str outboundTransKeyGen(str _FileName, SKS_EFT_FileDetail _SKS_EFT_FileDetail, SKS_EFTAP_File _SKS_EFTAP_FILE)
    {
    
        return strLRTrim(subStr(_SKS_EFT_FileDetail.PaymentReference, 1,16));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>