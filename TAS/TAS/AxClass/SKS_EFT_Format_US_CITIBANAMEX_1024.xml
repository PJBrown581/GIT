<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_US_CITIBANAMEX_1024</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_US_CITIBANAMEX_1024 extends SKS_EFT_Format
/// </summary>
class SKS_EFT_Format_US_CITIBANAMEX_1024 extends SKS_EFT_Format
{
    #define.FormatVersion('20220628')
    #define.BOOK('BKT')
    #define.WINPMT('WINPMT')
    #define.INTBSD('INTB-SD')
    #define.INTBND('INTB-ND')

    int mPaymentCount;
    int mRemittanceCount;
    Amount mPaymentAmount;
    int mRecordCount;
    BankAccountTable mBankAccountTable;
    SKS_EFT_SequenceNumber mSequenceNumber;
    int invSequence;
    int sequenceNumber;
    Amount amt;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    [SuppressBPWarningAttribute("BPCheckNestedLoopinCode","Necessary to allow the processing of every invoice(inner loop) for every relevant parent file detail record(outer loop)")]
    protected void formatStructure()
    {
        SKS_EFT_FileDetail invSKS_EFT_FileDetail;
    
        while(mSKS_EFT_FileDetail)
        {
            // Get SKS_EFT_Bank
            this.getSKS_EFT_Bank();
    
            //Get sequence number
            this.getSequence();
    
            //Set Sequence if 0
            if(mSequenceNumber == 0)
            {
                this.incrementSequenceNumber();
            }
    
            if(mBankAccountTable.AccountID != mSKS_EFT_FileDetail.BankAccountId)
            {
                // Get Bank Account Table
                mBankAccountTable = BankAccountTable::find(mSKS_EFT_FileDetail.BankAccountId);
            }
    
            // Get SKS_EFT_VendorPaym
            this.getSKS_EFT_VendorPaym();
    
            // Get SKS_EFT_FileFormatPaymSpec
            this.getSKS_EFT_FileFormatPaymSpec();
    
            //Payment Record
            this.rec_Payment();
    
            invSequence = 0;
    
            //Invoice Record
            while select invSKS_EFT_FileDetail where invSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId
            {
                this.rec_Invoice(invSKS_EFT_FileDetail);
            }
            next mSKS_EFT_FileDetail;
        }
    
        //Trailer Record
        this.rec_Trailer();
    
        //Set sequence number
        this.setSequence();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSequence</Name>
				<Source><![CDATA[
    private void getSequence()
    {
        if(mSKS_EFT_FileFormat)
        {
            //Get Next Sequence Number
            mSequenceNumber = mSKS_EFT_FileFormat.NextSequenceNumber;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>incrementSequenceNumber</Name>
				<Source><![CDATA[
    private void incrementSequenceNumber()
    {
        if(mSequenceNumber >= 99999999 || mSequenceNumber == 0)
        {
            mSequenceNumber = 1;
        }
        else
        {
            mSequenceNumber++;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Invoice</Name>
				<Source><![CDATA[
    boolean rec_Invoice(SKS_EFT_FileDetail _invSKS_EFT_FileDetail)
    {
        //Number    Content
        // 1        Record Type
        // 3        Customer Country Code
        // 13       Customer Account Number (LATAM)
        // 6        Transaction Reference
        // 2        Transaction Sequence Number
        // 50       Sub – sequence
        // 51       Invoice Detail Description
        //          Filler
    
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        if(_invSKS_EFT_FileDetail.InvoiceNumber != '')
        {
            mRecordCount++;
            invSequence++;
    
            // 1    Record Type
            sb.Append('VOI');
    
            // 3    Customer Country Code
            sb.Append('485');
    
            // 13   Customer Account Number (LATAM)
            sb.Append(SKS_PP_StringFormats::strFill(10, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
            // 6    Transaction Reference
            sb.Append(SKS_PP_StringFormats::strFill(15, this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
            // 2    Transaction Sequence Number
            sb.Append(SKS_PP_StringFormats::strFill(8, int2str(sequenceNumber), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
    
            // 50   Sub – sequence
            sb.Append(SKS_PP_StringFormats::strFill(4, int2str(invSequence), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
    
            // 51   Invoice Detail Description
            amt = mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1;
            sb.Append(SKS_PP_StringFormats::strFill(75, strFmt('%1 %2 %3', this.CharacterReplacement(_invSKS_EFT_FileDetail.InvoiceNumber), SKS_PP_StringFormats::strDateYYYYMMDD(_invSKS_EFT_FileDetail.InvoiceDate), SKS_PP_StringFormats::strMoney(amt, 15)), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
            // Filler
            sb.Append(SKS_PP_StringFormats::strFill(132, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
    
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Payment</Name>
				<Source><![CDATA[
    //Number    Description
    // 1        Record Type
    // 3        Customer Country Code
    // 13       Customer Account Number (LATAM)
    // 12       Transaction Date
    // 8        Transaction Code
    // 6        Transaction Reference
    // 2        Transaction Sequence Number
    // 5        Third Party Tax ID
    // 10       Customer Account Currency Code
    // 16       Third Party Code
    // 11       Transaction Amount
    // 42       Maturity Date
    // 44       Transaction Details Line 1
    // 45       Transaction Details Line 2
    // 46       Transaction Details Line 3
    // 47       Transaction Details Line 4
    // 9        Local Transaction Code
    // 14       Customer Account Type
    // 20       Third Party Name
    // 21       Third Party Address 1
    // 21 B     Third Party Address 1 – Second Line
    // 22       Third Party Address 2
    // 24       Third Party State
    // 23       Third Party Address 3
    // 25       Third Party Phone Number
    // 26       Third Party Bank Number
    // 27       Third Party Bank Agency
    // 60       Third Party Account Number
    // 61       Account Type CR
    // 28       Third Party Bank Address
    // 164      Tax Amount
    // 165      Priority Flag
    // 166      Confidential
    // 167      Third Party Credit Date
    // 168      Banamex Customer Account Number
    // 34       Third Party Fax Number
    // 35       Third Party Fax Contact Name
    // 36       Third Party Fax Department Name
    // 62       Third Party Account Number
    // 63       Account Type CR
    // 19       Transaction Delivery Method
    // 37       Collection Title Id
    // 38       Third Party Activity Code
    // 49       Third Party E-Mail Address
    // 64       Maximum Payment Amount
    // 65       Update Type
    // 169      Third Party Advice Type
    // 150      Printed Check Flag
    // 151      Match Pay Flag
    //          Blank Characters
    
    public boolean rec_Payment()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        VendTable   lVendTable;
        str         value, lclTransCode,EmptyTaxIdvalue;
        int         length;
    
        mRecordCount++;
    
        // 1    Record Type
        sb.Append('PAY');
    
        // 3    Customer Country Code
        sb.Append('485');
    
        // 13   Customer Account Number (LATAM)
        sb.Append(SKS_PP_StringFormats::strFill(10, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        // 12   Transaction Date
        sb.Append(SKS_PP_StringFormats::strDateYYMMDD(mSKS_EFT_FileDetail.EffectiveDate));
    
        // 8    Transaction Code
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #BOOK:
                sb.Append('072');
                break;
            case #WINPMT:
                sb.Append('277');
                break;
            case #INTBSD:
            case #INTBND:
                sb.Append('001');
                break;
            default:
                sb.Append(SKS_PP_StringFormats::strFill(3, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
                break;
        }
    
        // 6    Transaction Reference
        sb.Append(SKS_PP_StringFormats::strFill(15, this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        // 2    Transaction Sequence Number
        sb.Append(SKS_PP_StringFormats::strFill(8, int2str(mSequenceNumber), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
    
        sequenceNumber = mSequenceNumber;
    
        // 5    Third Party Tax ID
        lclTransCode = this.CharacterReplacement(SKS_EFT_Format::getValueFromCode('LclTransCode', mSKS_EFT_FileFormatPaymSpec, mSKS_EFT_VendorPaym.RecId));
        EmptyTaxIdvalue = this.CharacterReplacement(SKS_EFT_Format::getValueFromCode('EmptyTaxIdvalue', mSKS_EFT_FileFormatPaymSpec, mSKS_EFT_VendorPaym.RecId));
    
        lVendTable = VendTable::findByCompany(mSKS_EFT_VendorPaym.VendCompany, mSKS_EFT_VendorPaym.VendAccount);
    
        if(lclTransCode == '06' && lVendTable.VATNum)
        {
            sb.Append(SKS_PP_StringFormats::strFill(20, lVendTable.VATNum, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
        else if(EmptyTaxIdvalue)
        {
            sb.Append(SKS_PP_StringFormats::strFill(20, EmptyTaxIdvalue, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
        else
        {
            sb.Append(SKS_PP_StringFormats::strFill(20, 'X', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
    
        // 10   Customer Account Currency Code
        sb.Append(SKS_PP_StringFormats::strFill(3, mSKS_EFT_FileDetail.PaymentCurrencyCode, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        // 16   Third Party Code
        sb.Append(SKS_PP_StringFormats::strFill(20, mSKS_EFT_VendorPaym.VendAccount, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        // 11   Transaction Amount
        amt = mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1;
        sb.Append(SKS_PP_StringFormats::strMoney(amt, 15));
        mPaymentAmount += amt;
    
        // 42   Maturity Date
        sb.Append(SKS_PP_StringFormats::strFill(6, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        // 44   Transaction Details Line 1
        sb.Append(SKS_PP_StringFormats::strFill(35, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        // 45   Transaction Details Line 2
        sb.Append(SKS_PP_StringFormats::strFill(35, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        // 46   Transaction Details Line 3
        sb.Append(SKS_PP_StringFormats::strFill(35, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        // 47   Transaction Details Line 4
        sb.Append(SKS_PP_StringFormats::strFill(35, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        // 9    Local Transaction Code
        if(lclTransCode)
        {
            sb.Append(SKS_PP_StringFormats::strFill(2, lclTransCode, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
        else
        {
            sb.Append(SKS_PP_StringFormats::strFill(2, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
    
        // 14   Customer Account Type
        sb.Append('01');
    
        if(mSKS_EFT_VendorPaym.WBeneName != '' || mSKS_EFT_VendorPaym.WBeneAddr != '' || mSKS_EFT_VendorPaym.WBeneAddr2 !='')
        {
            sb.Append(SKS_PP_StringFormats::strFill(80, subStr(this.CharacterReplacement(mSKS_EFT_VendorPaym.WBeneName), 1, 35), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
            sb.Append(SKS_PP_StringFormats::strFill(35, this.CharacterReplacement(mSKS_EFT_VendorPaym.WBeneAddr), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
            sb.Append(SKS_PP_StringFormats::strFill(35, this.CharacterReplacement(mSKS_EFT_VendorPaym.WBeneAddr2), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
        else
        {
            sb.Append(SKS_PP_StringFormats::strFill(80, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
            sb.Append(SKS_PP_StringFormats::strFill(35, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
            sb.Append(SKS_PP_StringFormats::strFill(35, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
    
        // 22   Third Party Address 2
        sb.Append(SKS_PP_StringFormats::strFill(15, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        // 24   Third Party State
        sb.Append(SKS_PP_StringFormats::strFill(2, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        // 23   Third Party Address 3
        sb.Append(SKS_PP_StringFormats::strFill(12, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        // 25   Third Party Phone Number
        sb.Append(SKS_PP_StringFormats::strFill(16, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        // 26   Third Party Bank Number
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #BOOK:
                sb.Append('000');
                break;
            case #WINPMT:
            case #INTBSD:
            case #INTBND:
                sb.Append('002');
                break;
            default:
                sb.Append(SKS_PP_StringFormats::strFill(3, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
                break;
        }
    
        // 27   Third Party Bank Agency
        sb.Append(SKS_PP_StringFormats::strFill(8, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        value = this.CharacterReplacement(SKS_EFT_Format::getValueFromCode('AcctType', mSKS_EFT_FileFormatPaymSpec, mSKS_EFT_VendorPaym.RecId));
        // 60   Third Party Account Number
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #BOOK   ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #INTBSD ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #INTBND)
        {
            if(value == '01')
            {
                length = 11;
            }
            else if(value == '05')
            {
                length = 18;
            }
            else
            {
                length = 16;
            }
    
            sb.Append(SKS_PP_StringFormats::strFill(35, substr(mSKS_EFT_FileDetail.DepBankAcct, 1, length), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
        else
        {
            sb.Append(SKS_PP_StringFormats::strFill(35, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
        // 61   Account Type CR
        if(value)
        {
            sb.Append(value);
        }
        else
        {
            sb.Append(SKS_PP_StringFormats::strFill(2, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
    
        // 28   Third Party Bank Address
        sb.Append(SKS_PP_StringFormats::strFill(30, this.CharacterReplacement(mSKS_EFT_VendorPaym.WBenBankAddr), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        // 164  Tax Amount
        sb.Append(SKS_PP_StringFormats::strFill(17, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        // 165  Priority Flag
        sb.Append(SKS_PP_StringFormats::strFill(1, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        // 166  Confidential
        sb.Append(SKS_PP_StringFormats::strFill(1, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        // 167  Third party credit date
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #INTBSD:
                sb.Append('01');
                break;
            case #INTBND:
                sb.Append('00');
                break;
            default:
                sb.Append(SKS_PP_StringFormats::strFill(2, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
                break;
        }
    
        // 168  Banamex Customer Account Number
        sb.Append(SKS_PP_StringFormats::strFill(20, subStr(mSKS_EFT_FileDetail.BankBankAcct, 1, 11),  SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        // 34   Third Party Fax Number
        sb.Append(SKS_PP_StringFormats::strFill(16, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        // 35   Third Party Fax Contact Name
        sb.Append(SKS_PP_StringFormats::strFill(20, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        // 36   Third Party Fax Department Name
        sb.Append(SKS_PP_StringFormats::strFill(15, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        // 62   Third Party Account Number
        sb.Append(SKS_PP_StringFormats::strFill(10, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        // 63   Account Type CR
        sb.Append(SKS_PP_StringFormats::strFill(2, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        // 19   Transaction Delivery Method
        sb.Append(SKS_PP_StringFormats::strFill(3, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        // 37   Collection Title Id
        sb.Append(SKS_PP_StringFormats::strFill(50, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        // 38   Third Party Activity Code
        sb.Append('00000');
    
        // 49   Third Party E-Mail Address
        sb.Append(SKS_PP_StringFormats::strFill(50, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        // 64   Maximum Payment Amount
        sb.Append(SKS_PP_StringFormats::strMoney(amt, 15));
    
        // 65   Update Type
        sb.Append(SKS_PP_StringFormats::strFill(1, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        // 169  Third Party Advice Type
        sb.Append(SKS_PP_StringFormats::strFill(11, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        // 150  Printed Check Flag
        sb.Append(SKS_PP_StringFormats::strFill(1, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        // 151  Match Pay Flag
        sb.Append(SKS_PP_StringFormats::strFill(1, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //      Blank Characters
        sb.Append(SKS_PP_StringFormats::strFill(254, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        this.incrementSequenceNumber();
        mPaymentCount++;
    
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Trailer</Name>
				<Source><![CDATA[
    //Number    Content
    // 1        Record Type
    // 55       Number of Transactions
    // 56       Total Transaction amount
    // 58       Number of Third Party Records
    // 59       Number of Records Sent
    //          Filler
    private boolean rec_Trailer()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
    
        // 1    Record Type
        sb.Append('TRL');
    
        // 55   Number of Transactions
        sb.Append(SKS_PP_StringFormats::strFill(15, int2str(mPaymentCount), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
    
        // 56   Total Transaction amount
        sb.Append(SKS_PP_StringFormats::strMoney(mPaymentAmount, 15));
    
        // 58   Number of Third Party Records
        sb.Append(SKS_PP_StringFormats::strFill(15, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
    
        // 59   Number of Records Sent
        sb.Append(SKS_PP_StringFormats::strFill(15, int2str(mRecordCount), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
    
        //      Filler
        sb.Append(SKS_PP_StringFormats::strFill(37, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSequence</Name>
				<Source><![CDATA[
    private void setSequence()
    {
        SKS_EFT_FileFormat sks_eft_fileformat;
    
        select firstOnly forUpdate sks_eft_fileformat
            where sks_eft_fileformat.FormatId == mSKS_EFT_FileFormat.FormatId;
    
        if(sks_eft_fileformat)
        {
            sks_eft_fileformat.NextSequenceNumber = mSequenceNumber;
            sks_eft_fileformat.update();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>