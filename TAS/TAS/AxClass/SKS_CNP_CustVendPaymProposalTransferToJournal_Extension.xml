<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_CNP_CustVendPaymProposalTransferToJournal_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(CustVendPaymProposalTransferToJournal))]
final class SKS_CNP_CustVendPaymProposalTransferToJournal_Extension
{
    public int minDayToReimburse;
    public boolean isReimbusementJournal;
    public boolean includeCustDebitBalnace;
    public date dueDateDays;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        minDayToReimburse,
        isReimbusementJournal,
        includeCustDebitBalnace,
        dueDateDays
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmIncludeCustDebitBalnace</Name>
				<Source><![CDATA[
    public boolean parmIncludeCustDebitBalnace(boolean _includeCustDebitBalnace = includeCustDebitBalnace)
    {
        includeCustDebitBalnace = _includeCustDebitBalnace;

        return includeCustDebitBalnace;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMinDayToReimburse</Name>
				<Source><![CDATA[
    public int parmMinDayToReimburse(int _minDayToReimburse = minDayToReimburse)
    {
        minDayToReimburse = _minDayToReimburse;

        return minDayToReimburse;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReimbursement</Name>
				<Source><![CDATA[
    public boolean parmReimbursement(boolean _isReimbusementJournal = isReimbusementJournal)
    {
        isReimbusementJournal = _isReimbusementJournal;

        return isReimbusementJournal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDueDate</Name>
				<Source><![CDATA[
    public date parmDueDate(date _dueDateDays = dueDateDays)
    {
        dueDateDays = _dueDateDays;

        return dueDateDays;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initForPaymProposal</Name>
				<Source><![CDATA[
    protected void initForPaymProposal(CustVendPaymProposal _custVendPaymProposal)
    {
        next initForPaymProposal(_custVendPaymProposal);

        this.parmReimbursement(_custVendPaymProposal.parmReimbursement());
        this.parmMinDayToReimburse(_custVendPaymProposal.parmMinDayToReimburse());
        this.parmIncludeCustDebitBalnace(_custVendPaymProposal.parmIncludeCustDebitBalnace());
        this.parmDueDate(_custVendPaymProposal.parmDueDate());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryForTransferProposal</Name>
				<Source><![CDATA[
    protected Query initQueryForTransferProposal()
    {
        Query query = next initQueryForTransferProposal();

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLedgerJournalTransFromPaymLine</Name>
				<Source><![CDATA[
    protected LedgerJournalTrans initLedgerJournalTransFromPaymLine(
        LedgerJournalTrans          _ledgerJournalTrans,
        CustVendPaymProposalLine    _custVendPaymProposalLine)
    {
        LedgerJournalTrans ledgerJournalTrans = next initLedgerJournalTransFromPaymLine(_ledgerJournalTrans, _custVendPaymProposalLine);
        
        CustTable lCusttable;
        SKS_EFT_Setup local_SKS_EFT_Setup;

        local_SKS_EFT_Setup = SKS_EFT_Setup::find();

        if(this.parmReimbursement() && this.parmIncludeCustDebitBalnace())
        {
            Amount amount = 0;
            AccountNum accountNum = _custVendPaymProposalLine.AccountNum;

            ledgerJournalTrans.selectforupdate(true);
            if(!ledgerJournalTrans.AmountCurDebit)
            {
                //ledgerJournalTrans.delete();
            }

            else
            {

                LedgerJournalTrans ledgerJournalTransLocal;

                select count(RecId) from ledgerJournalTransLocal where ledgerJournalTransLocal.JournalNum == ledgerJournalTrans.JournalNum
                        && ledgerJournalTransLocal.LedgerDimension == ledgerJournalTrans.LedgerDimension && ledgerJournalTransLocal.Company == ledgerJournalTrans.Company;

                changecompany(ledgerJournalTrans.Company)
                {
                    CustTrans trans;
                    CustTransOpen transOpen;
                
                    trans.clear();

                    select sum(AmountCur) from trans
                        where trans.DueDate <= this.parmDueDate() - this.parmMinDayToReimburse() &&
                        trans.AccountNum == accountNum 
                        exists join transOpen where transOpen.AccountNum == trans.AccountNum && transOpen.RefRecId == trans.RecId;

                    amount = abs(trans.AmountCur);
                }
                
                

                if(ledgerJournalTransLocal.RecId == 1)
                {
                    ledgerJournalTrans.AmountCurDebit = ledgerJournalTrans.AmountCurDebit;// amount;
                    ledgerJournalTrans.AmountCurCredit = 0;
                    ledgerJournalTrans.doUpdate();
                }
            }
            //if(this.parmIncludeCustDebitBalnace())
            //{
            //    CustTransOpen transOpen;
            //    LedgerJournalTrans ledgerJournalTransLocal;
            //    CustTrans trans;

            //    trans.clear();
            //    select sum(ReportingCurrencyAmount), count(RecId) from trans
            //        where trans.TransDate <= today() - this.parmMinDayToReimburse() &&
            //        trans.AccountNum == _custVendPaymProposalLine.AccountNum &&
            //        trans.BillOfExchangeStatus == 0
            //        exists join transOpen where transOpen.AccountNum == trans.AccountNum && transOpen.RefRecId == trans.RecId;

            //    select sum(AmountCurDebit) from ledgerJournalTransLocal where ledgerJournalTransLocal.JournalNum == ledgerJournalTrans.JournalNum
            //        && ledgerJournalTransLocal.LedgerDimension == ledgerJournalTrans.LedgerDimension;

            //    if(ledgerJournalTransLocal.AmountCurDebit > abs(trans.ReportingCurrencyAmount))
            //    {
            //        ledgerJournalTrans.AmountCurDebit = abs(abs(trans.ReportingCurrencyAmount)-abs(ledgerJournalTransLocal.AmountCurDebit - ledgerJournalTrans.AmountCurDebit));
            //        //if(trans.recid > 2)
            //        //{
            //        //    ledgerJournalTrans.AmountCurDebit = abs(ledgerJournalTransLocal.AmountCurDebit - abs(trans.ReportingCurrencyAmount));
            //        //}
            //        //else
            //        //{
            //        //    ledgerJournalTrans.AmountCurDebit = abs(trans.ReportingCurrencyAmount);
            //        //}
            //    }
            //}
            //ledgerJournalTrans.doUpdate();
        }

        //DevOps #18342-->
        select firstonly * from lCusttable where lCusttable.AccountNum == _custVendPaymProposalLine.AccountNum;
                
        if(local_SKS_EFT_Setup.CNPCreateCRrecord && local_SKS_EFT_Setup.CNPDefaultPaymMode != '' && local_SKS_EFT_Setup.CNPDefaultPaymSpec != '' && lCusttable.BankAccount != '')
        {
            SKS_EFT_CustomerLoad::CreateFindCNPCustomerRecord(lCusttable.AccountNum, local_SKS_EFT_Setup, true, true, false);
            SKS_EFT_CustomerLoad::CreateCustReimbursementPaymRecord(lCusttable,local_SKS_EFT_Setup,local_SKS_EFT_Setup.CNPDefaultPaymMode, local_SKS_EFT_Setup.CNPDefaultPaymSpec, lCusttable.BankAccount);
        }
        //DevOps #18342<--


        return ledgerJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        container packedClass = next pack();
        return SysPackExtensions::appendExtension(packedClass, classStr(SKS_CNP_CustVendPaymProposalTransferToJournal_Extension), this.cnpPack());
    }

]]></Source>
			</Method>
			<Method>
				<Name>cnpPack</Name>
				<Source><![CDATA[
    private container cnpPack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>cnpUnpack</Name>
				<Source><![CDATA[
    private boolean cnpUnpack(container packedClass)
    {
        Integer version = RunBase::getVersion(packedClass);
        switch (version)
        {
            case #CurrentVersion:
                [version, #currentList] = packedClass;
                break;
            default:
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        boolean result = next unpack(_packedClass);

        if (result)
        {
            container myState = SysPackExtensions::findExtension(_packedClass, classStr(SKS_CNP_CustVendPaymProposalTransferToJournal_Extension));
            //Also unpack the extension
            if (!this.cnpUnpack(myState))
            {
                result = false;
            }
        }

        return result;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>