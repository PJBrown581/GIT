<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_CC_PayLinkQueueCancel</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_CC_PayLinkQueueCancel extends RunBase
{
    SKS_CC_PayLinkQueue payLinkQueueCaller;
    CustAccount custAccount;
    RefTableId oneTimeCustRefTableId;
    RefRecId oneTimeCustRefRecId;
    String50 payFabricCustomerNbr;
    boolean isSilent;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        boolean cancelQueueRecordResponse;
        if (payLinkQueueCaller)
        {
            cancelQueueRecordResponse = this.cancelQueueRecord();
        }        

        if (cancelQueueRecordResponse)
        {
            info("@SKS:SKGCCQueueRecordCancelSuccess");
        }        
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase dialog;

        dialog = super();
        dialog.addText("@SKS:SKGCCConfirmWalletLinkCancellation", 300);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cancelQueueRecord</Name>
				<Source><![CDATA[
    public boolean cancelQueueRecord()
    {
        boolean retStatus;
        SKS_CC_PayFabricWalletHandler pfWalletHandler = SKS_CC_PayFabricWalletHandler::construct();
              
        pfWalletHandler.parmCustAccount(custAccount);
        if (oneTimeCustRefTableId && oneTimeCustRefRecId)
        {
            pfWalletHandler.parmOneTimeCustRefTableId(oneTimeCustRefTableId);
            pfWalletHandler.parmOneTimeCustRefRecId(oneTimeCustRefRecId);
        }
        pfWalletHandler.setPayFabricCustomerNbr();

        if (payLinkQueueCaller.TransType == SKS_CC_PayLinkTransactionType::WalletLink)
        {
            retStatus = pfWalletHandler.cancelWalletLink(payLinkQueueCaller, isSilent);
        }
        else if (payLinkQueueCaller.TransType == SKS_CC_PayLinkTransactionType::PayLink)
        {            
            retStatus = pfWalletHandler.cancelPayLink(payLinkQueueCaller);
        }

        return retStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setValuesFromCallingRecord</Name>
				<Source><![CDATA[
    public void setValuesFromCallingRecord(SKS_CC_PayLinkQueue _callerPayLinkQueue, boolean _isSilent)
    {
        isSilent = _isSilent;
        payLinkQueueCaller = _callerPayLinkQueue;
        if (payLinkQueueCaller.Status != SKS_CC_PayLinkProcessStatus::Pending &&
            payLinkQueueCaller.Status != SKS_CC_PayLinkProcessStatus::Error)
        {
            throw error(strFmt("@SKS:SKGCCInvalidStatusForCanceling", enum2Str(payLinkQueueCaller.Status)));
        }

        custAccount = payLinkQueueCaller.AccountNum;
        payFabricCustomerNbr = payLinkQueueCaller.PFCustomerNbr;

        if (CustTable::find(custAccount).OneTimeCustomer)
        {
            oneTimeCustRefTableId = payLinkQueueCaller.RefTableId;
            oneTimeCustRefRecId = payLinkQueueCaller.RefRecId;           
        }        
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        SKS_CC_PayLinkQueueCancel payLinkQueueCancel = SKS_CC_PayLinkQueueCancel::construct();

        SKS_PP_Setup sKS_PP_Setup = SKS_PP_Setup::find();

        if (sks_pp_setup.ModCC == NoYes::No ||
            (sks_pp_setup.CCPLEnableWalletLinks == NoYes::No &&
             sks_pp_setup.CCPLEnablePayLinks == NoYes::No))
        {
            throw error("@SKS:SKGCCCancelLinkIsNotAllowedDueToParameters");
        }

        if (!sKS_PP_Setup.CCPayLinkEnumUpgraded)
        {
            throw error("@SKS:SKGCCRefreshLinkIsNotAllowedDueToUpgrade");
        }

        if (!_args)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        if (!_args.record())
        {
            throw error(Error::missingRecord(funcName()));
        }

        if (_args.dataset() != tableNum(SKS_CC_PayLinkQueue))
        {
            throw error(Error::missingRecord(funcName()));
        }

        payLinkQueueCancel.setValuesFromCallingRecord(_args.record(), false);        

        if (payLinkQueueCancel.prompt())
        {
            payLinkQueueCancel.run();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static SKS_CC_PayLinkQueueCancel construct()
    {
        return new SKS_CC_PayLinkQueueCancel();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public server static ClassDescription description()
    {
        return "@SKS:SKGCCCancelPayLinkWalletLink";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>