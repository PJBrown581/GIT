<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_FormatMetaData_US_ACH</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_FormatMetaData_US_ACH Extends SKS_EFT_Format_MetaData
/// </summary>
public class SKS_EFT_FormatMetaData_US_ACH Extends SKS_EFT_Format_MetaData
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        productVersion = '';
        formatGroupVersion = '20230517';
        dataContractVersion = '1.0';
        conFormatID = ['US-ACH'];
        formatfiletype = 'EFT';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFormatFileType</Name>
				<Source><![CDATA[
    protected str getFormatFileType()
    {
        return formatfiletype;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHeaderMetaData</Name>
				<Source><![CDATA[
    protected container getHeaderMetaData()
    {
        container   headerList;

        //Metadata column names of data elements
//ProductVersion,FormatGroupVersion,UseWithCustomer,UseWithVenodrs,UseWithBanktoBank,UsewithCustReimbursements,
//BeDesc01,BeDesc02,BeMask01,BeMask02,BlockFill,CompanyIdMask,CompanyIdTitle,CompanyNameTitle,CompanyNameMask,Crlf,Description,EffectiveDateOffset,EntryClassTitle,EntryClassMask,
//FormatId,FormatType,IMMDestMask,IMMDestTitle,IMMDestNameTitle,IMMDestNameMask,IMMOriginTitle,IMMOriginMask,IMMOriginNameTitle,IMMOriginNameMask,IncludeCpnyCredit,
//IncludeCpnyDebit,LastEffectiveDate,NextDailyReset,NextDailyResetDate,NextFileId,NextSequenceNumber,PreNote,RecordLength,Selected,TrimRecord,TwoFileNameAddition,
//WBank01Description,WBank01Mask,WBank01Required,WBank02Required,WBank02Mask,WBank02Description,WBank03Required,WBank03Mask,WBank03Description,WBank04Required,WBank04Mask,
//WBank04Description,PreNoteDays,EDI,PayDateIsEffDate,ARDateOffset,UseAddenda,MastAcctList,FormatGroup,MultiEffectiveDates,SupportsMultiCompany,ExternalFormat,FundTransferType

        headerList = ConIns(headerList,conLen(headerList)+1,[productVersion,formatGroupVersion,1,1,1,1,'','','','',1,'XXXXXXXXXX','Company Id','Company name','UUUUUUUUUUUUUUUU',1,'United States - ACH',0,'Entry class','UUUUUUUUUU','US-ACH',0,'MMMMMMMMMM','Immediate Destination','Immediate Destination Name','UUUUUUUUUUUUUUUUUUUUUUU','Immediate Origin','MMMMMMMMMM','Immediate Origin Name','UUUUUUUUUUUUUUUUUUUUUUU',0,1,'1900-01-01 00:00:00.000',0,'1900-01-01 00:00:00.000',1,1,1,'94',0,0,'','','',0,0,'','',0,'','',0,'','','3',1,0,0,1,0,'US-ACH',1,1,0,'2']);

        return headerList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymSpecsMetaData</Name>
				<Source><![CDATA[
    protected container getPaymSpecsMetaData(str _formatID)
    {
        container   paymSpecList;

        //Metadata column names of data elements
//BARoutingReqd,VBAAccountReqd,VBASwiftReqd,VBAIBANReqd,ARPaymSpecName,BEBeneBankAcctReqd,BE01Reqd,BE02Reqd,BE01Use,BE02Use,PaymSpecFileDescr,RecordSummary,TransactionCode,
        //EmailNote,PaymSpec,PaymSpecName,FilterSeparateFile,FormatId,Selected,CpnyIDNameReq,EmailOff,VendorUse,WireTabs,SamePaymentDate,SelectByPaymentDate,PreNote,TxnNacha,UseCheckNumber,
        //UseWithCustomers,UseWithVendors,EDI,UseWithBanktoBank,FundTransferType,UseWithCustomerReimbursement,InvoiceDetail,RemitAvailability,RemitType,APNameType,APAddressType
        //DDNameType,DDAddressType,CRNameType,CRAddressType

        switch (_formatID)
        {
            case ('US-ACH'):
                paymSpecList = this.getPaymSpecsMetaData_US_ACH();
                break;

        }

        return paymSpecList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymSpecsMetaData_US_ACH</Name>
				<Source><![CDATA[
    private container getPaymSpecsMetaData_US_ACH()
    {
        container   paymSpecList;

        paymSpecList = ConIns(paymSpecList,conLen(paymSpecList)+1,[1,1,0,0,'DIRECT PAY',0,0,0,0,0,'Cash Concentration and Disbursement (CCD)','99','CCD','','CCD','TRADE PAY',0,'US-ACH',0,1,0,1,1,0,0,1,1,0,1,1,0,1,2,1,0,2,0,2,1,1,2,2,1]);
        paymSpecList = ConIns(paymSpecList,conLen(paymSpecList)+1,[1,1,0,0,'DIRECT PAY',0,0,0,0,0,'Cash Concentration and Disbursement (CCD+)',0,'CCDP','','CCD+','TRADE PAY',0,'US-ACH',0,1,0,1,1,0,0,1,1,0,0,1,0,0,0,1,1,2,0,2,1,1,2,2,1]);
        paymSpecList = ConIns(paymSpecList,conLen(paymSpecList)+1,[1,1,0,0,'DIRECT PAY',0,0,0,0,0,'Corporate Trade Exchange (CTX)','99','CTX','','CTX','TRADE PAY',0,'US-ACH',0,1,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,2,0,2,1,1,2,2,1]);
        paymSpecList = ConIns(paymSpecList,conLen(paymSpecList)+1,[1,0,0,0,'BUSINESS',0,0,0,0,0,'Intl ACH Transaction - Business (IAT)','99','IAT','','IATB','BUSINESS',0,'US-ACH',0,1,0,1,1,0,0,1,1,0,0,1,0,0,0,1,1,2,0,1,1,1,2,2,1]);
        paymSpecList = ConIns(paymSpecList,conLen(paymSpecList)+1,[1,1,0,0,'DIRECT PAY',0,0,0,0,0,'Prearranged Payment and Deposit (PPD)','99','PPD','','PPD','EXP REIMB',0,'US-ACH',0,1,0,1,1,0,0,1,1,0,1,1,0,0,0,1,0,2,0,2,1,1,2,2,1]);

        return paymSpecList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getNotesMetaData</Name>
				<Source><![CDATA[
    protected container getNotesMetaData(str _formatID)
    {
        container   notesList;

        //Metadata column names of data elements
//FormatId,PaymSpec,Note

        switch (_formatID)
        {
            case ('US-ACH'):
                notesList = this.getNotesMetaData_US_ACH();
                break;

        }

        return notesList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getNotesMetaData_US_ACH</Name>
				<Source><![CDATA[
    private container getNotesMetaData_US_ACH()
    {
        container   notesList;

        notesList = ConIns(notesList,conLen(notesList)+1,['US-ACH','CCD','-If using control format id US-ACH-53 the Customer call back phone is required on EFT+ bank account - Wire/IAT ordering party tab.::DD:--Company Discretionary Data in the Company/Batch header (\'5\') record is stored on TAS > bank account > Direct debit > File Info tab.::-If using control format id US-ACH-94 :--Customer point name is required on EFT+ bank account - Wire/IAT ordering party tab.:--Contact name and contact number is set on the EFT+ bank account - Internal contact tab.']);
        notesList = ConIns(notesList,conLen(notesList)+1,['US-ACH','CCD+','-If using control format id US-ACH-53 the Customer call back phone is required on EFT+ bank account - Wire/IAT ordering party tab.::-If using control format id US-ACH-94 :--Customer point name is required on EFT+ bank account - Wire/IAT ordering party tab.:--Contact name and contact number is set on the EFT+ bank account - Internal contact tab.']);
        notesList = ConIns(notesList,conLen(notesList)+1,['US-ACH','PPD','-If using control format id US-ACH-53 the Customer call back phone is required on EFT+ bank account - Wire/IAT ordering party tab.::DD:--Company Discretionary Data in the Company/Batch header (\'5\') record is stored on TAS > bank account > Direct debit > File Info tab.::-If using control format id US-ACH-94 :--Customer point name is required on EFT+ bank account - Wire/IAT ordering party tab.:--Contact name and contact number is set on the EFT+ bank account - Internal contact tab.']);
        notesList = ConIns(notesList,conLen(notesList)+1,['US-ACH','CTX','-If using control format id US-ACH-53 the Customer call back phone is required on EFT+ bank account - Wire/IAT ordering party tab.::-If using control format id US-ACH-94 :--Customer point name is required on EFT+ bank account - Wire/IAT ordering party tab.:--Contact name and contact number is set on the EFT+ bank account - Internal contact tab.']);
        notesList = ConIns(notesList,conLen(notesList)+1,['US-ACH','IATB','-If using control format id US-ACH-53 the Customer call back phone is required on EFT+ bank account - Wire/IAT ordering party tab.::-If using control format id US-ACH-94 :--Customer point name is required on EFT+ bank account - Wire/IAT ordering party tab.:--Contact name and contact number is set on the EFT+ bank account - Internal contact tab.::-Gateway Operator Id is stored in the File/header tab > Gateway operators. If Gateway operator Id is not exist then Vendor bank routing number will print.']);

        return notesList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getValidationsMetaData</Name>
				<Source><![CDATA[
    protected container getValidationsMetaData(str _formatID)
    {
        container   validationsList;

        //Metadata column names of data elements
//FormatId,PaymSpec,Id,SourceFieldDesc,SourceFieldLoc,TargetFieldLoc,Notes,SourceContext,SourceField,ISOCountrySpec,CountryContext,Required,LengthValidation,MinLength,MaxLength,UserUpdated,Module

        switch (_formatID)
        {
            case ('US-ACH'):
                validationsList = this.getValidationsMetaData_US_ACH();
                break;

        }

        return validationsList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getValidationsMetaData_US_ACH</Name>
				<Source><![CDATA[
    private container getValidationsMetaData_US_ACH()
    {
        container   validationsList;

        validationsList = ConIns(validationsList,conLen(validationsList)+1,['US-ACH','CCD','','Bank Account Number','Cash and bank management > Select bank account > edit > General (fast tab) Bank Account Number','Bank Account number','Record 6 > Bank account number ',0,'AccountNum','','',0,0,'1','17',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['US-ACH','CCD','','Bank Routing Number','Cash and bank management > Select bank account > edit > General (fast tab) > Routing Number','Record 6 > Bank Routing Number','Routing Number related to Bank',0,'RegistrationNum','','',0,0,'1','9',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['US-ACH','CCD','','Vendor Routing Number','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts > General tab > Identification(group) > Routing number','Record 6 > Destination Bank Routing number','Routing number related to Vendor','9','RegistrationNum','','',0,0,1,'9',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['US-ACH','CCD','','Bank Account Number','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts > General tab > Identification(group) > Bank Account Number ','Record 6 > Destination Bank Account number','Account Number related to vendor','9','AccountNum','','',0,0,'1','17',0,0]);

        validationsList = ConIns(validationsList,conLen(validationsList)+1,['US-ACH','PPD','','Bank Account Number','Cash and bank management > Select bank account > edit > General (fast tab) Bank Account Number','Bank Account number','Record 6 > Bank account number ',0,'AccountNum','','',0,0,'1','17',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['US-ACH','PPD','','Bank Routing Number','Cash and bank management > Select bank account > edit > General (fast tab) > Routing Number','Record 6 > Bank Routing Number','Routing Number related to Bank',0,'RegistrationNum','','',0,0,'1','9',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['US-ACH','PPD','','Vendor Routing Number','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts > General tab > Identification(group) > Routing number','Record 6 > Destination Bank Routing number','Routing number related to Vendor','9','RegistrationNum','','',0,0,1,'9',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['US-ACH','PPD','','Bank Account Number','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts > General tab > Identification(group) > Bank Account Number ','Record 6 > Destination Bank Account number','Account Number related to vendor','9','AccountNum','','',0,0,'1','17',0,0]);

        validationsList = ConIns(validationsList,conLen(validationsList)+1,['US-ACH','CTX','','Bank Account Number','Cash and bank management > Select bank account > edit > General (fast tab) Bank Account Number','Bank Account number','Record 6 > Bank account number ',0,'AccountNum','','',0,0,'1','17',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['US-ACH','CTX','','Bank Routing Number','Cash and bank management > Select bank account > edit > General (fast tab) > Routing Number','Bank Routing Number','Record 6 > Routing Number related to Bank',0,'RegistrationNum','','',0,0,'1','9',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['US-ACH','CTX','','Vendor Routing Number','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts > General tab > Identification(group) > Routing number','Record 6 > Destination Bank Routing number','Routing number related to Vendor','9','RegistrationNum','','',0,0,1,'9',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['US-ACH','CTX','','Bank Account Number','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts > General tab > Identification(group) > Bank Account Number ','Record 6 > Destination Bank Account number','Account Number related to vendor','9','AccountNum','','',0,0,'1','17',0,0]);

        return validationsList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getCodeLookupMetaData</Name>
				<Source><![CDATA[
    protected container getCodeLookupMetaData()
    {
        container   codeLookupList;

        //Metadata column names of data elements
//FormatGroup,CodeID,Description

        codeLookupList = ConIns(codeLookupList,conLen(codeLookupList)+1,['US-ACH','IntrBankQual','Intermediary Bank Number Qualifier']);
        codeLookupList = ConIns(codeLookupList,conLen(codeLookupList)+1,['US-ACH','PayRefIDNbr','Use payment reference - Rec six record']);

        return codeLookupList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getCodeLookupValuesMetaData</Name>
				<Source><![CDATA[
    protected container getCodeLookupValuesMetaData()
    {
        container   codeLookupValuesList;

        //Metadata column names of data elements
//FormatGroup,CodeID,Display Value,CodeValue

        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['US-ACH','IntrBankQual','ABA','ABA']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['US-ACH','IntrBankQual','IBAN','IBAN']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['US-ACH','IntrBankQual','None','']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['US-ACH','IntrBankQual','SWIFT-BIC','SWIFT-BIC']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['US-ACH','PayRefIDNbr','No','No']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['US-ACH','PayRefIDNbr','Yes','Yes']);

        return codeLookupValuesList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymSpecFieldsMetaData</Name>
				<Source><![CDATA[
    protected container getPaymSpecFieldsMetaData(str _formatID)
    {
        container   paymSpecFieldsList;

        //Metadata column names of data elements
        //FormatGroup,FormatID,PaymentSpec,FormatFieldID,Description,FieldType,CodeID,DefaultValue,Required,FixedValue,FixedValueMask,TechNotes

        switch (_formatID)
        {
            case ('US-ACH'):
                paymSpecFieldsList = this.getPaymSpecFieldsMetaData_US_ACH();
                break;

        }

        return paymSpecFieldsList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymSpecFieldsMetaData_US_ACH</Name>
				<Source><![CDATA[
    private container getPaymSpecFieldsMetaData_US_ACH()
    {
        container   paymSpecFieldsList;

        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['US-ACH','US-ACH','CCD','RecSix_Idnum','Rec 6 - Identification number',1,'','',0,'','XXXXXXXXXXXXXXX','Record type 6 > Identification number']);
        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['US-ACH','US-ACH','CCD','SourceOfInput','Source of Input (Job Name-tbd)',1,'','',0,'','XXXXXXXX','US-ACH-PNC Control File > Source of Input (Job Name-tbd)']);
        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['US-ACH','US-ACH','CCD+','SourceOfInput','Source of Input (Job Name-tbd)',1,'','',0,'','XXXXXXXX','US-ACH-PNC Control File > Source of Input (Job Name-tbd)']);
        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['US-ACH','US-ACH','CTX','SourceOfInput','Source of Input (Job Name-tbd)',1,'','',0,'','XXXXXXXX','US-ACH-PNC Control File > Source of Input (Job Name-tbd)']);
        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['US-ACH','US-ACH','IATB','SourceOfInput','Source of Input (Job Name-tbd)',1,'','',0,'','XXXXXXXX','US-ACH-PNC Control File > Source of Input (Job Name-tbd)']);
        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['US-ACH','US-ACH','PPD','SourceOfInput','Source of Input (Job Name-tbd)',1,'','',0,'','XXXXXXXX','US-ACH-PNC Control File > Source of Input (Job Name-tbd)']);

        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['US-ACH','US-ACH','IATB','IntrBankQual','Intermediary Bank Number Qualifier',0,'IntrBankQual','',0,'','','Record type 718 > Intermediary Bank Number Qualifier']);
        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['US-ACH','US-ACH','CCD','PayRefIDNbr','Use payment reference - Rec six record',0,'PayRefIDNbr','No',1,'','','Record type 6 > Identification number']);

        return paymSpecFieldsList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getControlFormatMetaData</Name>
				<Source><![CDATA[
    protected container getControlFormatMetaData(str _formatID)
    {
        container   ControlFormatList;

        //Metadata column names of data elements
//FileFormatID,ControlFileFormatID,ControlFileDescription

        switch (_formatID)
        {
            case ('US-ACH'):
                ControlFormatList = this.getControlFormatMetaData_US_ACH();
                break;

        }

        return ControlFormatList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getControlFormatMetaData_US_ACH</Name>
				<Source><![CDATA[
    private container getControlFormatMetaData_US_ACH()
    {
        container   ControlFormatList;

        ControlFormatList = ConIns(ControlFormatList,conLen(ControlFormatList)+1,['US-ACH','US-ACH-53','ACH file authentication record']);
        ControlFormatList = ConIns(ControlFormatList,conLen(ControlFormatList)+1,['US-ACH','US-ACH-94','ACH file authentication record']);
        ControlFormatList = ConIns(ControlFormatList,conLen(ControlFormatList)+1,['US-ACH','US-ACH-SVB','ACH file authentication record']);
        ControlFormatList = ConIns(ControlFormatList,conLen(ControlFormatList)+1,['US-ACH','US-ACH-PNC','ACH file authentication record for PNC']);
        ControlFormatList = ConIns(ControlFormatList,conLen(ControlFormatList)+1,['US-ACH','US-ACH-SIGNBANK','ACH file authentication record for Sign bank']);

        return ControlFormatList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getDeleteMetaData</Name>
				<Source><![CDATA[
    protected container getDeleteMetaData()
    {
        container   deleteList;

        //FormatGroup, FormatId, DetailType, KeyID1, KeyId2, KeyId3
        
        deleteList = ConIns(deleteList,conLen(deleteList)+1,['US-ACH','*','FormatLookup','*','*','']);
        deleteList = ConIns(deleteList,conLen(deleteList)+1,['US-ACH','US-ACH','FormatValidations','*','15','W01']);
        
        return deleteList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankCodeLookupMetaData</Name>
				<Source><![CDATA[
    protected container getBankCodeLookupMetaData()
    {
        container   codeLookupList;

        return codeLookupList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankCodeLookupValuesMetaData</Name>
				<Source><![CDATA[
    protected container getBankCodeLookupValuesMetaData()
    {
        container   codeLookupValuesList;

        return codeLookupValuesList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFileFormatFieldsMetaData</Name>
				<Source><![CDATA[
    protected container getFileFormatFieldsMetaData(str _formatID)
    {
        container   paymSpecFieldsList;

        switch (_formatID)
        {
            case ('US-ACH'):
                paymSpecFieldsList = this.getFileFormatFieldsMetaData_US_ACH();
                break;
        }

        return paymSpecFieldsList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFileFormatFieldsMetaData_US_ACH</Name>
				<Source><![CDATA[
    private container getFileFormatFieldsMetaData_US_ACH()
    {
        container   paymSpecFieldsList;

        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['US-ACH','US-ACH','CompanyDiscretionaryData','Company Discretionary Data',1,'CompanyDiscretionaryData','',0,'','UUUUUUUUUUUUUUUUUUUU','Fifth mandatory record > Position 21-40']);
        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['US-ACH','US-ACH','CustPhone','Customer call back phone',1,'CustPhone','',0,'','XXXXXXXXXX','Customer call back phone']);
        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['US-ACH','US-ACH','IAT713DFIId','IAT 713 DFI Id/Customer point',1,'IAT713DFIId','',0,'','XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX','IAT 713 DFI Id/Customer point']);
        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['US-ACH','US-ACH','ACISCustNum','ACIS Customer Number for Direct debit',1,'ACISCustNum','',0,'','XXXXXXXXXX','ACIS Customer Number for Direct debit']);
        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['US-ACH','US-ACH','FileId','File Id',1,'FileId','',0,'','XXXXXXXXXX','Signature bank control file record - File Id']);

        return paymSpecFieldsList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBankCodelookupValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updating the bank code lookpups from the W0X fields.
    /// </summary>
    protected void updateBankCodelookupValues()
    {
        switch(gSKS_EFT_FileFormat.FormatId)
        {
            case ('US-ACH'):
                if(gSKS_EFT_Bank.W01)
                {
                    this.updateBankFields('CompanyDiscretionaryData', gSKS_EFT_Bank.W01);
                }
                if(gSKS_EFT_Bank.W02)
                {
                    this.updateBankFields('CustPhone', gSKS_EFT_Bank.W02);
                }
                if(gSKS_EFT_Bank.W03)
                {
                    this.updateBankFields('IAT713DFIId', gSKS_EFT_Bank.W03);
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateARBankCodelookupValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updating the direct debit bank code lookpups from the W0X fields.
    /// </summary>
    protected void updateARBankCodelookupValues()
    {
        switch(gSKS_EFT_FileFormat.FormatId)
        {
            case ('US-ACH'):
                if(gSKS_EFTAR_Bank.W01)
                {
                    this.updateARBankFields('CompanyDiscretionaryData', gSKS_EFTAR_Bank.W01);
                }
                if(gSKS_EFTAR_Bank.W02)
                {
                    this.updateARBankFields('CustPhone', gSKS_EFTAR_Bank.W02);
                }
                if(gSKS_EFTAR_Bank.W03)
                {
                    this.updateARBankFields('IAT713DFIId', gSKS_EFTAR_Bank.W03);
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBTBBankCodelookupValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updating the BTB bank code lookpups from the W0X fields.
    /// </summary>
    protected void updateBTBBankCodelookupValues()
    {
        switch(gSKS_EFT_FileFormat.FormatId)
        {
            case ('US-ACH'):
                if(gSKS_EFTBTB_Bank.W01)
                {
                    this.updateBTBBankFields('CompanyDiscretionaryData', gSKS_EFTBTB_Bank.W01);
                }
                if(gSKS_EFTBTB_Bank.W02)
                {
                    this.updateBTBBankFields('CustPhone', gSKS_EFTBTB_Bank.W02);
                }
                if(gSKS_EFTBTB_Bank.W03)
                {
                    this.updateBTBBankFields('IAT713DFIId', gSKS_EFTBTB_Bank.W03);
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateVendorCodelookupValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updating vendor code lookpus from BE0X and Legacy code loookups
    /// </summary>
    protected void updateVendorCodelookupValues()
    {
        switch(gSKS_EFT_FileFormat.FormatId)
        {
            case 'US-ACH':
                if(gSKS_EFT_VendorPaym.WIntBankQualifier)
                {
                    this.updateVendorFields('IntrBankQual', gSKS_EFT_VendorPaym.WIntBankQualifier, true);
                }
                break;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>