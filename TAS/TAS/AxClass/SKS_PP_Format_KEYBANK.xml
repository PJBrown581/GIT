<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_PP_Format_KEYBANK</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_PP_Format_KEYBANK Extends SKS_PP_Format_BankGroup
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>txtDetail</Name>
				<Source><![CDATA[
    // KeyBank Postive Pay  format
    // 1-2     Region Code - 00
    // 3-17    Account Number
    // 18-27   Serial Number/Check Number
    // 28-35   Date CCYYMMDD (same as YYYYMMDD)
    // 36-45   Amount
    // 46-46   Void Character (C if void, blank if not)
    // 24-61   Additional Data (Blank for now)
    // 62-136  Payee Line 1 - Usually the Name
    // 137-211 Payee Line 2 - Usually the First Address Line
    // 212-220 Filler (Spaces)
    protected str txtDetail()
    {
        //BP Deviation Documented
        int Mult;
        str ItemType;
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        ;
    
        //Convert negative void numbers to positives
        Mult = 1;
        if(mSKS_PP_FileDetail.ChkType != SKS_PP_ChequeType::Cheque)
        {
            ItemType = 'C';
            if(mSKS_PP_FileDetail.chkcuryamt < 0)
            {
                Mult = -1;
            }
        }
        else
        {
            ItemType = ' ';
        }
    
    
        If (mSKS_PP_FileDetail.RecSection == 20)
        {
            sb.Append('00');
            sb.Append(SKS_PP_StringFormats::strFill(15, mSKS_PP_FileDetail.BnkBankAcct, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
            sb.Append(SKS_PP_StringFormats::strFill(10, mSKS_PP_FileDetail.ChkRefNbr, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
            sb.Append(SKS_PP_StringFormats::strDateYYYYMMDD(mSKS_PP_FileDetail.ChkDocDate));
            sb.Append(SKS_PP_StringFormats::strMoney(Mult * mSKS_PP_FileDetail.ChkCuryAmt, 10));
            sb.Append(itemtype);
            sb.Append(SKS_PP_StringFormats::strFill(15, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
            sb.Append(SKS_PP_StringFormats::strFill(75, mSKS_PP_FileDetail.VendName, SKS_PP_FillCharacter::Space,SKS_PP_FillSide::Right));
            sb.Append(SKS_PP_StringFormats::strFill(75, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
            sb.Append(SKS_PP_StringFormats::strFill(9, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        }
        Else If (mSKS_PP_FileDetail.RecSection == 10)
        {
             sb.Append(SKS_PP_StringFormats::strFill(80, mSKS_PP_FileDetail.ValueString, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        }
        Else If (mSKS_PP_FileDetail.RecSection == 40)
        {
             sb.Append(SKS_PP_StringFormats::strFill(80, mSKS_PP_FileDetail.ValueString, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        }
        Else
        {
             sb.Append('');
        }
    
        return sb.ToString();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>