<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_CA_TD_80</Name>
	<SourceCode>
		<Declaration><![CDATA[
// CA â€“ TD 80 Format
// While the CA - TD - Format's specifications make reference to both Debits and Credits,
// This Format implements only Credits.
// Structure:
// Header
// Details
// Trailer
/// <summary>
/// SKS_EFT_Format_CA_TD_80 extends SKS_EFT_Format
/// </summary>
class SKS_EFT_Format_CA_TD_80 extends SKS_EFT_Format
{
    #define.FormatVersion('20220422')
    #define.PAYMT('PMT')
    int mRecordCount;
    date mDate;
    SKS_EFT_SequenceNumber mSequenceNumber;
    int64 mPaymentCount;
    AmountMST mPaymentAmount;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    protected void formatStructure()
    {
        ;
        // Get SKS_EFT_Bank
        this.getSKS_EFT_Bank();
    
        //Get sequence number
        this.getSequence();
    
        //Set Sequence if 0
        if(mSequenceNumber == 0)
        {
            this.incrementSequenceNumber();
        }
        // Format header
        this.rec_Header();
    
        while(mSKS_EFT_FileDetail)
        {
            // Get SKS_EFT_VendorPaym
            this.getSKS_EFT_VendorPaym();
    
            // Details
            this.rec_Details();
            next mSKS_EFT_FileDetail;
        }
        // Format trailer
        this.rec_Trailer();
        //Set sequence number
        this.setSequence();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSequence</Name>
				<Source><![CDATA[
    private void getSequence()
    {
        ;
    
        if(mSKS_EFT_FileFormat)
        {
            //Get Next Sequence Number
            mSequenceNumber = mSKS_EFT_FileFormat.NextSequenceNumber;
        }
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>incrementSequenceNumber</Name>
				<Source><![CDATA[
    private void incrementSequenceNumber()
    {
        if(mSequenceNumber >= 9999 || mSequenceNumber == 0)
        {
            mSequenceNumber = 1;
        }
        else
        {
            mSequenceNumber++;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Details</Name>
				<Source><![CDATA[
    //Nbr   Description
    // 1    Record Type                     (    1)
    // 2    Payor/Payee Name                ( 2-24)
    // 3    Due Date                        (25-30)
    // 4    Originator Reference Number     (31-49)
    // 5    Institution ID/Transit Number   (50-58)
    // 6    Account Number                  (59-70)
    // 7    Amount                          (71-80)
    public boolean rec_Details()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        ;
        mRecordCount++;
    
        // 1    Record Type
        sb.Append('D');
    
        // 2    Payor/Payee Name
        sb.Append(SKS_PP_StringFormats::strFill(23, this.CharacterReplacement(mSKS_EFT_VendorPaym.WBeneName), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        // 3    Due Date
        mDate = mSKS_EFT_FileDetail.EffectiveDate;
        sb.Append(date2str(mDate, 123, DateDay::Digits2, DateSeparator::None, DateMonth::Digits2, DateSeparator::None, DateYear::Digits2, DateFlags::None));
    
        // 4    Originator Reference Number
        sb.Append(SKS_PP_StringFormats::strFill(19, this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        // 5    Institution ID/Transit Number
        sb.Append(SKS_PP_StringFormats::strFill(9, mSKS_EFT_FileDetail.DepBankTransit, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        // 6    Account Number
        sb.Append(SKS_PP_StringFormats::strFill(12,mSKS_EFT_FileDetail.DepBankAcct, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        // 7    Amount
        mPaymentAmount += mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur;
        sb.Append(SKS_PP_StringFormats::strMoney(this.getPositiveAmount(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur), 10));
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Header</Name>
				<Source><![CDATA[
    //Nbr   Content
    // 1    Record Type                                             (    1)
    // 2    Originator ID Number                                    ( 2-11)
    // 3    Transaction Type                                        (   12)
    // 4    CPA Code                                                (13-15)
    // 5    Due Date                                                (16-21)
    // 6    Originator Short Name                                   (22-36)
    // 7    Institution ID/Transit Number for Returned Transactions (37-45)
    // 8    Account Number for Returned Transactions                (46-57)
    // 9    File Creation Number                                    (58-61)
    //10    Filler                                                  (62-80)
    
    public boolean rec_Header()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        str filelevelKey;
        str cpaCode;
        ;
        //Nbr   Content
        // 1    Record Type
        sb.Append('H');
        // 2    Originator ID Number
        sb.Append(SKS_PP_StringFormats::strFill(10,subStr(strUpr(mSKS_EFT_Bank.WOrdPartyId),1,10), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        // 3    Transaction Type (Credit Only)
        sb.Append('C');
        // 4    CPA Code
        cpaCode = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('CPACode', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank));
        sb.Append(SKS_PP_StringFormats::strFill(3, cpaCode, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        // 5    Due Date
        mDate = mSKS_EFT_FileDetail.EffectiveDate;
        sb.Append(date2str(mDate, 123, DateDay::Digits2, DateSeparator::None, DateMonth::Digits2, DateSeparator::None, DateYear::Digits2, DateFlags::None));
        // 6    Originator Short Name
        sb.Append(SKS_PP_StringFormats::strFill(15,subStr(this.CharacterReplacement(mSKS_EFT_Bank.WOrdPartyName),1,15), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        // 7    Institution ID/Transit Number for Returned Transactions
        sb.Append(SKS_PP_StringFormats::strFill(9,subStr(mSKS_EFT_FileDetail.BankBankTransit,1,9), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        // 8    Account Number for Returned Transactions
        sb.Append(SKS_PP_StringFormats::strFill(12,mSKS_EFT_FileDetail.BankBankAcct, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        // 9    File Creation Number
        sb.Append(SKS_PP_StringFormats::strFill(4,num2str(mSequenceNumber,0,0,0,0), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        filelevelKey = SKS_PP_StringFormats::strFill(10,subStr(strUpr(mSKS_EFT_Bank.WOrdPartyId),1,10), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right) + 
                       SKS_PP_StringFormats::strFill(4,num2str(mSequenceNumber,0,0,0,0), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left);

        this.addFieldElement(gXmlNodeHeaderFieldValues, 'OrigNbrFileCreationNbr', filelevelKey, mSKS_EFT_File.RecId);

        //10    Filler
        sb.Append(SKS_PP_StringFormats::strFill(19, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));


        this.fileWrite(sb.ToString());
        this.incrementSequenceNumber();
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Trailer</Name>
				<Source><![CDATA[
    //Nbr   Content
    // 1    Record Type                     (    1)
    // 2    Total Number of Transactions    ( 2- 9)
    // 3    Total Value of Transactions     (10-23)
    // 4    Filler                          (24-80)
    private boolean rec_Trailer()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        ;
        // 1    Record Type
        sb.Append('T');
        // 2    Total Number of Transactions
        sb.Append(SKS_PP_StringFormats::strFill(8, int2str(mRecordCount), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        // 3    Total Value of Transactions
        sb.Append(SKS_PP_StringFormats::strMoney(this.getPositiveAmount(mPaymentAmount), 14));
        // 4    Filler
        sb.Append(SKS_PP_StringFormats::strFill(57, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSequence</Name>
				<Source><![CDATA[
    private void setSequence()
    {
        SKS_EFT_FileFormat sks_eft_fileformat;
        ;
    
        select firstOnly forUpdate sks_eft_fileformat
            where sks_eft_fileformat.FormatId == mSKS_EFT_FileFormat.FormatId;
    
        if(sks_eft_fileformat)
        {
            sks_eft_fileformat.NextSequenceNumber = mSequenceNumber;
            sks_eft_fileformat.update();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>