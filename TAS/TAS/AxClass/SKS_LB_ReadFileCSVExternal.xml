<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_LB_ReadFileCSVExternal</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class SKS_LB_ReadFileCSVExternal extends SKS_LB_ReadFileCSV
{
    

    

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>readExternalFile</Name>
				<Source><![CDATA[
    SKS_LB_Importing readExternalFile()
    {
        // Comma separated File
        int linecnt = 0;
        Container line;
        str value;
        int fieldPos;
        int num_lines_in_file = this.ExternalfileLineCount();
        ListEnumerator fieldFormatsListEnumerator;
        SKS_LB_FileFormatDet localSKS_LB_FileFormatDet;
        ;
    
        ImportCount = 0;
        fieldFormatsListEnumerator = FieldFormatsList.getEnumerator();
        select firstOnly setup;
        this.closeFile();//filelinecount method call in variable declarations opens the file but never closes it
        this.openFile();
        ttsbegin;
        lbpath =  System.IO.Path::GetDirectoryName(Filename);
        while (csvFile.status() == IO_status::Ok || (line != conNull() && csvFile.status() == IO_Status::FileTooShort))
        {
            fieldPos = 1;
            line = csvFile.read();
            linecnt++;
            fieldFormatsListEnumerator.reset();
    
            // If we are within the range of records we care about, then process the line of data
            if (line && linecnt > OmitHeaderRecsNbr && linecnt < (num_lines_in_file - OmitTrailerRecsNbr + 1))
            {
                if (strlen(con2Str(line)) == 0) //skip blank lines
                {
                    continue;
                }

                while (fieldFormatsListEnumerator.moveNext())
                {
                    localSKS_LB_FileFormatDet = fieldFormatsListEnumerator.current();
                    value = conpeek(line, fieldPos);
                    this.ReadOneField(value, localSKS_LB_FileFormatDet.FieldType);
                    fieldPos++;
                }
    
                dbimporting.FileDate = FileDate;
                dbimporting.FileFormatId = formatId;
                dbimporting.FileName = fileName;
                dbimporting.FileLineNbrBegin = linecnt;
    
                if(this.ValidatePathAcctCombo(lbpath))
                {
                    ImportCount++;
                    dbimporting.ExternalJournalARRecord = this.GetSetExternalJournalARRecord();
                    dbimporting.insert();
                    dbimporting.Description = '';
                    dbimporting.PaymNote = '';
                }
    
            }
        }
        ttscommit;
        this.closeFile();
        return dbimporting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ExternalfileLineCount</Name>
				<Source><![CDATA[
    private int ExternalfileLineCount(boolean _Relocation = false)
    {
        int linecnt = 0;
        Container line;
    
        this.openFile(_Relocation);
        while (csvFile.status() == IO_status::Ok)
        {
            line = csvFile.read();
    
            if (line)
            {
                linecnt++;
            }
        }
        return linecnt;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>