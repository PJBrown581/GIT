<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_PP_Format_BANKOFAMERICA</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_PP_Format_BANKOFAMERICA Extends SKS_PP_Format_BankGroup
{
    // BANKOFAMERICA
        // Standard Positive Pay
        // 1-10    10      check number
        // 11-20   10      check amount
        // 21-30   10      Account Number
        // 31-38   8       Check Date mmDDyyyy
        // 39-39   1       VOID ( - or else balnk)
        // 40-80   41      spaces
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>txtDetail</Name>
				<Source><![CDATA[
    protected str txtDetail()
    {
        int Mult;
        str ItemType;
        str Amt;
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        ;
    
        ItemType = ' ';
        //Convert negative void numbers to positives
        Mult = 1;
        if(mSKS_PP_FileDetail.ChkType != SKS_PP_ChequeType::Cheque)
        {
            Amt = '0000000000';
            ItemType = '-';
        }
        else
        {
            Amt =  SKS_PP_StringFormats::strMoney(Mult * mSKS_PP_FileDetail.ChkCuryAmt, 10);
        }
    
        sb.Append(SKS_PP_StringFormats::strFill(10, mSKS_PP_FileDetail.ChkRefNbr, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        sb.Append(Amt);
        sb.Append(SKS_PP_StringFormats::strFill(10, mSKS_PP_FileDetail.BnkBankAcct, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        sb.Append(SKS_PP_StringFormats::strDateMMDDYYYY(mSKS_PP_FileDetail.ChkDocDate));
        sb.Append(ItemType);
        sb.Append(SKS_PP_StringFormats::strFill(41, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        return sb.ToString();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>