<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_CH_UBS_KEYLINK_TREA_CSV</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_CH_UBS_KEYLINK_TREA_CSV extends SKS_EFT_Format
/// </summary>
class SKS_EFT_Format_CH_UBS_KEYLINK_TREA_CSV extends SKS_EFT_Format
{
    #define.FormatVersion('20220609')
    #define.Separator(',')
    #define.DoubleQuote('"')
    VendBankAccount mVendBankAccount;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    protected void formatStructure()
    {
        //  Header Record
        this.rec_Header();

        while(mSKS_EFT_FileDetail)
        {
            this.getVendBankAccount();

            //  Detail Record
            this.rec_Details();

            next mSKS_EFT_FileDetail;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendBankAccount</Name>
				<Source><![CDATA[
    void getVendBankAccount()
    {
        mVendBankAccount = VendBankAccount::findByCompany(mSKS_EFT_FileDetail.AccountCompany, mSKS_EFT_FileDetail.AccountNum, mSKS_EFT_FileDetail.DepBankAccountId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Header</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_Header
    /// </summary>
    /// <returns>boolean</returns>
    public boolean rec_Header()
    {
        //---------------------------------------------------------------------------------
        //Nbr   Description
        //1     Payee Name
        //2     Internal Account Number ***
        //3     CCY
        //4     Value
        //5     Date
        //6     Reference
        //7     Blank
        //8     SAP Report Character
        //9     Approver 1 (Sign off Name)
        //10    Approver 2 (Sign Off Name)
        //11    Approver 1 Timestamp
        //12    Approver 2 Timestamp
        //13    Unique Reference
        //---------------------------------------------------------------------------------        
        System.Text.StringBuilder sb = new System.Text.StringBuilder();	

        //1     Payee Name
        sb.Append(this.wrapField('Payee'));

        //2     Internal Account Number ***
        sb.Append(this.wrapField('Internal Account Number'));

        //3     CCY
        sb.Append(this.wrapField('CCY'));

        //4     Value
        sb.Append(this.wrapField('Value'));

        //5     Date
        sb.Append(this.wrapField('Date'));

        //6     Reference
        sb.Append(this.wrapField('Reference'));

        //7     Blank
        sb.Append(this.wrapField('Blank'));

        //8     SAP Report Character
        sb.Append(this.wrapField('SAP Report Character'));        

        //9     Approver 1 (Sign off Name)
        sb.Append(this.wrapField('Approver 1'));

        //10    Approver 2 (Sign Off Name)
        sb.Append(this.wrapField('Approver 2'));

        //11    Approver 1 Timestamp
        sb.Append(this.wrapField('Approver 1 Timestamp'));

        //12    Approver 2 Timestamp
        sb.Append(this.wrapField('Approver 2 Timestamp'));

        //13    Unique Reference
        sb.Append(this.wrapField('Unique Reference', false));

        this.fileWrite(sb.ToString());
        return true;

    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Details</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_Details
    /// </summary>
    /// <returns>boolean</returns>
    public boolean rec_Details()
    {
        //---------------------------------------------------------------------------------
        //Nbr   Description
        //1     Payee Name
        //2     Internal Account Number ***
        //3     CCY
        //4     Value
        //5     Date
        //6     Reference
        //7     Blank
        //8     SAP Report Character
        //9     Approver 1 (Sign off Name)
        //10    Approver 2 (Sign Off Name)
        //11    Approver 1 Timestamp
        //12    Approver 2 Timestamp
        //13    Unique Reference
        //---------------------------------------------------------------------------------
        str value, vendAccountName;
        int approvecount;
        str approvalname1, approvalname2;
        str hour, mins;
        TransDateTime                   approvaldate1, approvaldate2;
        WorkflowTrackingStatusTable     workflowTrackingStatus;
        WorkflowTrackingTable           workflowTrackingTable;
        WorkflowTrackingCommentTable    workflowTrackingCommentTable;
        UserInfo userInfo;
        System.Text.StringBuilder sb = new System.Text.StringBuilder();

        //1     Payee Name
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.DepBankAcct));     //SKS#DevOps:16007

        //2     Internal Account Number ***
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.BankBankAcct));

        //3     CCY
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.PaymentCurrencyCode, 3));

        //4     Value
        sb.Append(this.wrapField(num2str(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1, 0, 2, 1, 0)));

        //5     Date
        sb.Append(this.wrapField(SKS_PP_StringFormats::strDateYYYYMMDD(mSKS_EFT_FileDetail.EffectiveDate, DateSeparator::None)));
        
        //6     Reference
        vendAccountName = mVendBankAccount.Name;
        if(!vendAccountName)
        {
            vendAccountName = 'NOTPROVIDED';
        }
        value = strFmt('/ROC/%1\\x0D\\x0A/INV/%2\\x0D\\x0A//\\x0D\\x0A//', vendAccountName, this.getInvoiceNbrs());
        sb.Append(this.wrapField(value));

        //7     Blank
        sb.Append(this.wrapField(''));

        //8     SAP Report Character
        sb.Append(this.wrapField(''));

        while select firstFast RecId,CreatedDateTime, User from workflowTrackingTable
            order by workflowTrackingTable.CreatedDateTime,workflowTrackingTable.RecId asc
            join workflowTrackingCommentTable
            where workflowTrackingCommentTable.WorkflowTrackingTable == workflowTrackingTable.RecId
            join UserInfo where UserInfo.id == WorkflowTrackingTable.User
            exists join workflowTrackingStatus
            where workflowTrackingTable.WorkflowTrackingStatusTable ==  workflowTrackingStatus.RecId
                && workflowTrackingStatus.ContextRecId == LedgerJournalTable::find(LedgerJournalTrans::findByRef(curExt(),mSKS_EFT_FileDetail.PaymentLineRecId).JournalNum).RecId   //SKS#DevOps:15791       
                && workflowTrackingTable.TrackingType == WorkflowTrackingType::Approval
        {
            approvecount++;
            if(approvecount == 1)
            {
                approvalname1 = userInfo.name;
                approvaldate1 = workflowTrackingCommentTable.CreatedDateTime;
            }
            if(approvecount == 2)
            {
                approvalname2 = userInfo.name;
                approvaldate2 = workflowTrackingCommentTable.CreatedDateTime;
            }
        }

        //9     Approver 1 (Sign off Name)
        sb.Append(this.wrapField(approvalname1));

        //10    Approver 2 (Sign Off Name)
        sb.Append(this.wrapField(approvalname2));

        //11    Approver 1 Timestamp
        hour = int2Str(DateTimeUtil::hour(approvaldate1));
        mins = int2Str(DateTimeUtil::minute(approvaldate1));
        sb.Append(this.wrapField(date2Str(DateTimeUtil::date(approvaldate1),321,DateDay::Digits2,DateSeparator::Hyphen, DateMonth::Digits2,DateSeparator::Hyphen,DateYear::Digits4) + ' ' + hour+':'+mins));

        //12    Approver 2 Timestamp
        hour = int2Str(DateTimeUtil::hour(approvaldate2));
        mins = int2Str(DateTimeUtil::minute(approvaldate2));
        sb.Append(this.wrapField(date2Str(DateTimeUtil::date(approvaldate2),321,DateDay::Digits2,DateSeparator::Hyphen, DateMonth::Digits2,DateSeparator::Hyphen,DateYear::Digits4) + ' ' + hour+':'+mins));

        //13    Unique Reference
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.PaymentReference, false));

        this.fileWrite(sb.ToString());
        return true;

    }

]]></Source>
			</Method>
			<Method>
				<Name>wrapField</Name>
				<Source><![CDATA[
    private str wrapField(str _field = '', boolean _addSeparator = true)
    {
        str text;

        text = _field;

        if(_addSeparator)
        {
            if(text != '' && strContains(text, ','))
            {
                text = #DoubleQuote + text + #DoubleQuote + #Separator;
            }
            else
            {
                text = text + #Separator;
            }
        }
        else
        {
            text = _field;
        }

        return text;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceNbrs</Name>
				<Source><![CDATA[
    protected str getInvoiceNbrs()
    {
        SKS_EFT_FileDetail invSKS_EFT_FileDetail;
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        str invString;
        
        select InvoiceNumber from invSKS_EFT_FileDetail where invSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId;
        
        while(invSKS_EFT_FileDetail)
        {
            if(invSKS_EFT_FileDetail.InvoiceNumber == '')
            {
                // If no invoice number, go to next record
                next invSKS_EFT_FileDetail;
                continue;
            }
            sb.Append(invSKS_EFT_FileDetail.InvoiceNumber);
        
            next invSKS_EFT_FileDetail;
        
            if(invSKS_EFT_FileDetail)
            {
                sb.Append(' ');
            }
        }
        
        invString = this.CharacterReplacement(sb.ToString());
        return invString;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectPaymentRecords</Name>
				<Source><![CDATA[
    protected void selectPaymentRecords()
    {
        //------------------------------------------------------------------------------------------------------
        // Standard payment selction
        // Override if different selection is need for a format
        //------------------------------------------------------------------------------------------------------
    
        //Order by clause must match the clause in the SKS_EFT_Processing.SumByPayment
        select * from mSKS_EFT_FileDetail
            join mSKS_EFT_FileDetail_VendAddress
              order by mSKS_EFT_FileDetail.PaymentCompany,
                   mSKS_EFT_FileDetail.RecordSection,
                   mSKS_EFT_FileDetail.PaymMode,
                   mSKS_EFT_FileDetail.BankAccountId,
                   mSKS_EFT_FileDetail.PaymentCurrencyCode,
                   mSKS_EFT_FileDetail.PaymSpec,
                   mSKS_EFT_FileDetail.EffectiveDate,
                   mSKS_EFT_FileDetail.DepCountryRegionId,
                   mSKS_EFT_FileDetail.RecordType,
                   mSKS_EFT_FileDetail.AccountNum,
                   mSKS_EFT_FileDetail.PaymentReference,
                   mSKS_EFT_FileDetail.RecId
          where mSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                mSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                mSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_VendAddress.RefRecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>