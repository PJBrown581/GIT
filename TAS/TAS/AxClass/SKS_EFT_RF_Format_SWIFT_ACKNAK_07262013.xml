<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_RF_Format_SWIFT_ACKNAK_07262013</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_EFT_RF_Format_SWIFT_ACKNAK_07262013 extends SKS_EFT_RF_Format
{
    //Class Variables
    //primities
    str mTag;
    str mTempCurrentTag;
    str mFileName;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findInnerTags</Name>
				<Source><![CDATA[
    private void findInnerTags()
    {
        int startIndex;
        int endIndex = 0;
        int tempIndex = 0;
        int backwardsScanStart = 0;
        int scanLength = 0;
        str locTempTagHolder;
        System.Text.StringBuilder sb;
    
        sb = new System.Text.StringBuilder();
        while(strContains(mTempCurrentTag, '{'))
        {
            startIndex = SKS_PP_StringFormats::strIndexOf(mTempCurrentTag, '{');
            tempIndex = 1;
            While(tempIndex > 0)
            {
                if(endIndex == 0)
                {
                    backwardsScanStart = strLen(mTempCurrentTag);
                    scanLength = strLen(mTempCurrentTag) - startIndex;
                }
                else
                {
                    backwardsScanStart = endIndex - 1;
                    scanLength = strLen(mTempCurrentTag) - startIndex - (strLen(mTempCurrentTag) - endIndex + 1);
                }
    
                tempIndex = strScan(mTempCurrentTag, '}', backwardsScanStart, -1 * scanLength);
                if(!tempIndex > 0)
                {
                    break;
                }
                endIndex = tempIndex;
            }
            locTempTagHolder = mTempCurrentTag;
            this.ProcessTag(SKS_PP_StringFormats::strSub(mTempCurrentTag, startIndex, endIndex - startIndex + 1));
            mTempCurrentTag = locTempTagHolder;
            sb.Clear();
            if(startIndex != 1)
                sb.Append(SKS_PP_StringFormats::strSub(mTempCurrentTag,1, startIndex - 1));
            if(endIndex != strLen(mTempCurrentTag))
                sb.Append(SKS_PP_StringFormats::strSub(mTempCurrentTag,endIndex + 1));
            startIndex = 0;
            endIndex = 0;
            tempIndex = 0;
            backwardsScanStart = 0;
            scanLength = 0;
    
    
            mTempCurrentTag = sb.ToString();
    
    
        }
    
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFile</Name>
				<Source><![CDATA[
    public SKS_EFT_RF_File getFile(str _filename, boolean _serverPath, SKS_BF_BankIntType _SKS_BF_BankIntType = SKS_BF_BankIntType::FileHubLocal)
    {
        SKS_EB_FileHub locSKS_EB_FileHub = SKS_EB_FileHub::construct(_SKS_BF_BankIntType);
        TextBuffer locTextBuffer;
        int locTagStart = 0;
        int locLocationOfLastBrace = 0;
        int locTagEnd = 0;
        int locBraceCounter = 0;
        int locCharPointer;
        str locCurrentDocument;
    
        //start a new return file
        mSKS_EFT_RF_File = new SKS_EFT_RF_File();

        locSKS_EB_FileHub.runFileLoad(_filename);
        locTextBuffer = new TextBuffer();
        locTextBuffer.setText(locSKS_EB_FileHub.fileBody());        
        locTextBuffer = this.setCarriageReturns(locTextBuffer);
        locCurrentDocument = strLRTrim(locTextBuffer.getText());
        locTextBuffer = null;
    
        mFilename =_filename;
        while(strContains(locCurrentDocument, '{'))
        {
            if(strStartsWith(locCurrentDocument, '{'))
            {
                locTagStart = SKS_PP_StringFormats::strIndexOf(locCurrentDocument, '{');
                locLocationOfLastBrace = locTagStart;
                locBraceCounter++;
                locCharPointer = 2;
                while(locBraceCounter > 0)
                {
                    if(SKS_PP_StringFormats::strSub(locCurrentDocument, locCharPointer, 1) == '{')
                        locBraceCounter++;
                    if(SKS_PP_StringFormats::strSub(locCurrentDocument, locCharPointer, 1) == '}')
                        locBraceCounter--;
                    if(locBraceCounter == 0)
                    {
                        locTagEnd = locCharPointer;
                        break;
                    }
                    locCharPointer++;
                }
                this.ProcessTag(SKS_PP_StringFormats::strSub(locCurrentDocument,locTagStart,locTagEnd));
                locCurrentDocument = strLRTrim(SKS_PP_StringFormats::strSub(locCurrentDocument, locTagEnd + 1));
                locCharPointer = 0;
                locTagStart = 0;
                locTagEnd = 0;
                locBraceCounter = 0;
            }
            else //if the current row didn't start with a brace, then there are no Swift tags where and we will skip it.
            {
                if(strContains(locCurrentDocument, '\n'))//if there is another row, checck it
                    if(strLen(locCurrentDocument) > SKS_PP_StringFormats::strIndexOf(locCurrentDocument, '\n'))//is there anything beyond this rows carraige return?
                        locCurrentDocument = strLRTrim(SKS_PP_StringFormats::strSub(locCurrentDocument,
                                                        SKS_PP_StringFormats::strIndexOf(locCurrentDocument, '\n') + 1));
                    else
                        locCurrentDocument = '';//there was nothing beyond the previous row's carriage return, so just clear the buffer
                else
                    locCurrentDocument = '';//the row didn't contain a tag, and there were no more rows so clear the buffer
            }
        }
        return this.getSKS_EFT_RF_File();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFormatId</Name>
				<Source><![CDATA[
    public str getFormatId(str _filename, boolean _serverPath, SKS_BF_BankIntType _SKS_BF_BankIntType = SKS_BF_BankIntType::FileHubLocal)
    {
        SKS_EB_FileHub locSKS_EB_FileHub = SKS_EB_FileHub::construct(_SKS_BF_BankIntType);
        str rtnval = '';
        int classId;
        //BEGIN VALIDATION VARIABLES
        //BEGIN QUALIFIERS
        boolean locBasicHeaderTagFound = false;
        boolean locTimeDateTagFound = false;
        boolean locAcceptRejectTagFound = false;
        boolean locOriginalTransactionTagFound = false;
        boolean locApplicationHeaderFound = false;
        boolean locTwentyTextFound = false;
    
        //BEGIN DISQUALIFIER VARIABLES
        //none
    
        //END VALIDATION VARIABLES
        System.String locString;
        locSKS_EB_FileHub.setFileName(_filename);
        locSKS_EB_FileHub.runFileInquire();
        if(!locSKS_EB_FileHub.attrFileExists())
        {
            // The file %1 does not exist.
            error(strfmt("@SYS62207", _filename));
            return null;
        }
        locSKS_EB_FileHub.runFileLoad(_filename);
        locSKS_EB_FileHub.StreamInit();
        System.IO.StreamReader locStreamReader = new System.IO.StreamReader(locSKS_EB_FileHub.streamGet());
    
        //priming read
        locString = locStreamReader.ReadLine();
    
        while(locString != null)
        {
            locString = locString.Trim();
            if(!System.String::IsNullOrWhiteSpace(locString))
            {
    
    
                if(locString.Contains('{1:F21'))
                {
                    locBasicHeaderTagFound = true;
                }
                if(locString.Contains('{4:' + '{177')) // AX workaround
                {
                    locTimeDateTagFound = true;
                }
                if(locString.Contains('{451'))
                {
                    locAcceptRejectTagFound = true;
                }
                if(locString.Contains('{1:F01'))
                {
                    locOriginalTransactionTagFound = true;
                }
                if(locString.Contains('{2:'))
                {
                    locApplicationHeaderFound = true;
                }
                if(locString.Contains(':20:'))
                {
                    locTwentyTextFound = true;
                }
    
    
            }
            locString = locStreamReader.ReadLine();
        }
        if(locBasicHeaderTagFound
            && locTimeDateTagFound
            && locAcceptRejectTagFound
            && locOriginalTransactionTagFound
            && locApplicationHeaderFound
            && locTwentyTextFound)
        {
            //ALl Qualifers show this a SWIFT_ACKNAK_07262013 file
            classId = classIdGet(this);
            rtnval = classId2Name(ClassId);
        }
        locStreamReader.Close();
        locSKS_EB_FileHub.StreamClose();
        return rtnval;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSKS_EFT_RF_File</Name>
				<Source><![CDATA[
    public SKS_EFT_RF_File getSKS_EFT_RF_File()
    {
    
        if(mSKS_EFT_RF_SentFile != null)
        {
            mSKS_EFT_RF_File.addSentFile(mSKS_EFT_RF_SentFile);
            mSKS_EFT_RF_SentFile = null;
        }
    
        return mSKS_EFT_RF_File;
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTag</Name>
				<Source><![CDATA[
    public str getTag()
    {
        return mTag;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parse177Contents</Name>
				<Source><![CDATA[
    private void parse177Contents()
    {
        str locstrDateTime;
        str locmonth;
        str locday;
        str locyear;
        str lochour;
        str locmin;
        utcDateTime locUtcDateTime;
    
        locstrDateTime = this.parseDateTime();
        locyear = SKS_PP_StringFormats::strSub(locstrDateTime,1, 2);
        locmonth = SKS_PP_StringFormats::strSub(locstrDateTime,3,2);
        locday = SKS_PP_StringFormats::strSub(locstrDateTime,5,2);
        lochour = SKS_PP_StringFormats::strSub(locstrDateTime,7,2);
        locmin = SKS_PP_StringFormats::strSub(locstrDateTime,9,2);
    
        locUtcDateTime = str2datetime(locyear + '/' + locmonth + '/' + locday + ' ' +
                                lochour + ':' + locmin + ':00', 321);
        mSKS_EFT_RF_File.setUtcDateTime(locUtcDateTime);
    
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>parse1Contents</Name>
				<Source><![CDATA[
    private void parse1Contents()
    {
        str locApplicationIdentifier;
        str locServiceIdentifier;
        str locLTAddress;
        str locBranchCode;
        str locFileName;
    
        locApplicationIdentifier = this.parseApplicationIdentifier();
        locServiceIdentifier = this.parseServiceIdentifier();
        locLTAddress = this.parseLTAddress();
        locBranchCode = this.parseBranchCode();
        if(strLen(mTempCurrentTag) > 0)
            this.setTextBlock();
    
        //if it is a new ACKNAK, close and push any existing files into the List
        // and start file object
        if(str2Capital(locApplicationIdentifier) == 'F' && locServiceIdentifier == '21')
        {
            if(mSKS_EFT_RF_SentFile != null)
                mSKS_EFT_RF_File.addSentFile(mSKS_EFT_RF_SentFile);
            mSKS_EFT_RF_SentFile = new SKS_EFT_RF_SentFile();
            //if it is a new inbound file, assigne the key to it.
            locFileName = System.IO.Path::GetFileNameWithoutExtension(mFileName);
            if(strLen(locFileName) > 10)
            {
                locFileName = SKS_PP_StringFormats::strSub(locFileName, strLen(locFileName), -10);
            }
    
            this.setFileKey(locFileName);
    
        }
    
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>parse2Contents</Name>
				<Source><![CDATA[
    private void parse2Contents()
    {
        str locApplciationHeader;
    
        locApplciationHeader = this.parseApplicationHeader();
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>parse405Contents</Name>
				<Source><![CDATA[
    private void parse405Contents()
    {
        str locRejectionReason;
        locRejectionReason = this.parseRejectionReason();
        mSKS_EFT_RF_SentFile.setStatusReason(locRejectionReason);
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>parse451Contents</Name>
				<Source><![CDATA[
    private void parse451Contents()
    {
        str locAcceptReject;
        locAcceptReject = this.parseAcceptReject();
        mSKS_EFT_RF_SentFile.setStatus(locAcceptReject);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parse4Contents</Name>
				<Source><![CDATA[
    private void parse4Contents()
    {
        str locTextBlock;
    
        this.findInnerTags();
        //strip any leading carriage returns.
        while(strStartsWith(mTempCurrentTag, '\n'))
            mTempCurrentTag = SKS_PP_StringFormats::strSub(mTempCurrentTag, 2);
    
        mTempCurrentTag = strLTrim(mTempCurrentTag);
        if(strContains(mTempCurrentTag, ':20:'))
            mSKS_EFT_RF_SentFile.appendAdditionalData(this.parseReferenceNumber() + '\n');
    
        if(strContains(mTempCurrentTag, ':79:'))
            mSKS_EFT_RF_SentFile.appendAdditionalData(this.parseDescription());
        //strip any leading carriage returns.
        while(strEndsWith(mTempCurrentTag, '\n'))
        {
            if(strLen(mTempCurrentTag) > 1)
                mTempCurrentTag = SKS_PP_StringFormats::strSub(mTempCurrentTag, 1, strLen(mTempCurrentTag) - 1);
            else
                mTempCurrentTag = '';
        }
        locTextBlock = this.setTextBlock();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parse5Contents</Name>
				<Source><![CDATA[
    private void parse5Contents()
    {
        //Discared the five, but this indicates the end
        // of a sent file.  Push the file onto the list
        // and clear the buffer.
        mSKS_EFT_RF_File.addSentFile(mSKS_EFT_RF_SentFile);
        mSKS_EFT_RF_SentFile = null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parseAcceptReject</Name>
				<Source><![CDATA[
    private str parseAcceptReject()
    {
        str locAcceptReject;
        locAcceptReject = mTempCurrentTag;
        return locAcceptReject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parseApplicationHeader</Name>
				<Source><![CDATA[
    private str parseApplicationHeader()
    {
        str locApplciationHeader;
        locApplciationHeader = mTempCurrentTag;
        return locApplciationHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parseApplicationIdentifier</Name>
				<Source><![CDATA[
    Private str parseApplicationIdentifier()
    {
        str locApplicationIdentifier;
    
        locApplicationIdentifier = SKS_PP_StringFormats::strSub(mTempCurrentTag, 1,1);
        mTempCurrentTag = SKS_PP_StringFormats::strSub(mTempCurrentTag, 2);
        return locApplicationIdentifier;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parseBranchCode</Name>
				<Source><![CDATA[
    private str parseBranchCode()
    {
        str locBranchCode;
        locBranchCode = SKS_PP_StringFormats::strSub(mTempCurrentTag, 1, 3);
        mTempCurrentTag = strLRtrim(SKS_PP_StringFormats::strSub(mTempCurrentTag, 4));
        return locBranchCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parseDateTime</Name>
				<Source><![CDATA[
    private str parseDateTime()
    {
        str locDateTime;
        locDateTime = mTempCurrentTag;
        return locDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parseDescription</Name>
				<Source><![CDATA[
    private str parseDescription()
    {
        int startIndex;
        int endIndex;
        str DescriptionPrefix = ':79:';
        str locDescription = '';
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
    
    
        if(strContains(mTempCurrentTag, DescriptionPrefix))//ACKNAK reference number
        {
            startIndex = SKS_PP_StringFormats::strIndexOf(mTempCurrentTag, DescriptionPrefix);
            endIndex = SKS_PP_StringFormats::strIndexOf(mTempCurrentTag, '\n-', startIndex + 1);
            locDescription = SKS_PP_StringFormats::strSub(mTempCurrentTag,
                                                            startIndex + strLen(DescriptionPrefix),
                                                            endIndex -  (startIndex + strLen(DescriptionPrefix)));
            if(startIndex > 1)
                sb.Append(SKS_PP_StringFormats::strSub(mTempCurrentTag, 1, startIndex - 1));
            if(strLen(mTempCurrentTag) > endIndex + 2)
                sb.Append(SKS_PP_StringFormats::strSub(mTempCurrentTag, endIndex + 2));
            mTempCurrentTag = sb.ToString();
        }
        return locDescription;
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>parseLTAddress</Name>
				<Source><![CDATA[
    Private str parseLTAddress()
    {
        str locLTAddress;
        locLTAddress = SKS_PP_StringFormats::strSub(mTempCurrentTag, 1, 8);
        mTempCurrentTag = SKS_PP_StringFormats::strSub(mTempCurrentTag, 9);
        return locLTAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parseReferenceNumber</Name>
				<Source><![CDATA[
    private str parseReferenceNumber()
    {
        int startIndex;
        int endIndex;
        str ReferenceNumberPrefix = ':20:';
        str locReferenceNumber = '';
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
    
        if(strContains(mTempCurrentTag, ReferenceNumberPrefix))//ACKNAK reference number
        {
            startIndex = SKS_PP_StringFormats::strIndexOf(mTempCurrentTag, ReferenceNumberPrefix);
            endIndex = SKS_PP_StringFormats::strIndexOf(mTempCurrentTag, '\n', startIndex + 1);
            locReferenceNumber = SKS_PP_StringFormats::strSub(mTempCurrentTag,
                                                            startIndex + strLen(ReferenceNumberPrefix),
                                                            endIndex -  (startIndex + strLen(ReferenceNumberPrefix)));
    
            if(startIndex > 1)
                sb.Append(SKS_PP_StringFormats::strSub(mTempCurrentTag, 1, startIndex - 1));
            if(strLen(mTempCurrentTag) > endIndex + 2)
                sb.Append(SKS_PP_StringFormats::strSub(mTempCurrentTag, endIndex + 1));
            mTempCurrentTag = sb.ToString();
    
    
    
        }
        return locReferenceNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parseRejectionReason</Name>
				<Source><![CDATA[
    private str parseRejectionReason()
    {
        str locRejectionReason;
        locRejectionReason = mTempCurrentTag;
        return locRejectionReason;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parseServiceIdentifier</Name>
				<Source><![CDATA[
    Private str parseServiceIdentifier()
    {
        str locServiceIdentifier;
    
        locServiceIdentifier = SKS_PP_StringFormats::strSub(mTempCurrentTag, 1, 2);
        mTempCurrentTag = SKS_PP_StringFormats::strSub(mTempCurrentTag, 3);
        return locServiceIdentifier;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parseTag</Name>
				<Source><![CDATA[
    private void parseTag()
    {
        mTempCurrentTag = strLRTrim(mTempCurrentTag);
        this.parseTagID();
        if(mTag == '1')
            this.parse1Contents();
        else if(mTag == '2')
            this.parse2Contents();
        else if(mTag == '4')
            this.parse4Contents();
        else if(mTag == '177')
            this.parse177Contents();
        else if(mTag == '405')
            this.parse405Contents();
        else if(mTag == '451')
            this.parse451Contents();
        else if(mTag == '5')
            this.parse5Contents();
    
    
    
    
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>parseTagID</Name>
				<Source><![CDATA[
    private void parseTagID()
    {
        int TagColon;
    
        TagColon = SKS_PP_StringFormats::strIndexOf(mTempCurrentTag, ':');
        mTag = SKS_PP_StringFormats::strSub(mTempCurrentTag, 2, TagColon - 2);
        mTempCurrentTag = SKS_PP_StringFormats::strSub(mTempCurrentTag, TagColon + 1, strLen(mTempCurrentTag) - TagColon - 1 );
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>ProcessTag</Name>
				<Source><![CDATA[
    public void ProcessTag(str _Tag)
    {
        mTempCurrentTag = _Tag;
        this.parseTag();
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFileKey</Name>
				<Source><![CDATA[
    protected void setFileKey(str _InboundFileKey)
    {
        mSKS_EFT_RF_SentFile.setID(_InboundFileKey);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTextBlock</Name>
				<Source><![CDATA[
    private str setTextBlock()
    {
        str locTextBlock;
        locTextBlock = mTempCurrentTag;
        mTempCurrentTag = '';
        return locTextBlock;
    }

]]></Source>
			</Method>
			<Method>
				<Name>outboundFileKeyGen</Name>
				<Source><![CDATA[
    public static str outboundFileKeyGen(str _OutFilename, SKS_EFTAP_File locSKS_EFTAP_File = null)
    {
        return locSKS_EFTAP_File.FileNbr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>outboundTransKeyGen</Name>
				<Source><![CDATA[
    public static str outboundTransKeyGen(str _FileName = '', SKS_EFT_FileDetail _SKS_EFT_FileDetail = null, SKS_EFTAP_File _SKS_EFTAP_FILE = null)
    {
        //SWIFT IS A CLEARING HOUSE, IT DOESN'T LOOK AT THE TRANSACTION LEVEL. THUS, THERE WILL NEVER BE TRANSACTION LEVEL ITEMS TO MATCH
        return '';
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>