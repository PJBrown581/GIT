<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_DK_DANSKEBANK_CSV_AR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_DK_DANSKEBANK_CSV_AR extends SKS_EFT_Format
/// </summary>
class SKS_EFT_Format_DK_DANSKEBANK_CSV_AR extends SKS_EFT_Format
{
    #define.FormatVersion('20221020')
    int mRecCount, mPayCount;
    Amount amt,TotalAmt;
    BankAccountTable mBankAccountTable;

    #define.DD101('DD-101')
    #define.DD103('DD-103')
    #define.DD201('DD-201')
    //SKS_VSTS_13643 -->
    #define.DD701('DD-701')
    #define.DD702('DD-702')
    //SKS_VSTS_13643 <--
    #define.DD203('DD-203')     //SKS_VSTS_13819
    #define.Separator(',')
    #define.DoubleQuote('"')
    #define.Semicolon(';')

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    protected void formatStructure()
    {
        while(mSKS_EFT_FileDetail)
        {
            // Get SKS_EFT_FileFormatPaymSpec
            this.getSKS_EFT_FileFormatPaymSpec();

            //  Detail Record
            this.rec_Detail();            

            next mSKS_EFT_FileDetail;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>wrapField</Name>
				<Source><![CDATA[
    private str wrapField(str _field = '', int _fieldLength = 0, boolean quotes = true, boolean _addSeparator = true, boolean semicolon = false)
    {
        str text;
        ;

        if(_fieldLength > 0)
        {
            text = subStr(_field, 1, _fieldLength);
        }
        else
        {
            text = _field;
        }
        if(quotes)
        {
            text = #DoubleQuote + text + #DoubleQuote;
        }
        if(_addSeparator)
        {
            text += #Separator;
        }
        if(semicolon)
        {
            text += #Semicolon;
        }
        return text;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Detail</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_Detail
    /// </summary>
    /// <returns>true</returns>
    public boolean rec_Detail()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        str                     amount;
        str                     value;
        int                     len;//SKS_VSTS_13559 <--
        str                     collectionType;//SKS_VSTS_13643 -->
        int                     technicalReferenceLength;//SKS_VSTS_13643 <--
        str                     csCredNum,vATNum;
        str                     acctNum,BankAccntNum;

        
        //  1    Function
        sb.Append(this.wrapField('COLLECTION', 10));

        //  2    Version

        sb.Append(this.wrapField('02', 2, false));

        //  3    CS creditor number
        csCredNum = SKS_EFT_Format::getCodelookupvalue('CsCredNum', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank);
        sb.Append(this.wrapField(this.CharacterReplacement(CsCredNum), 10, false));

        //  4    Test marking
        sb.Append(this.wrapField(''));

        //  5    Status message
        sb.Append(this.wrapField('1'));

        //  6    Document type
        sb.Append(this.wrapField('INV01'));

        //  7    Collection type
        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'DK-DANSKEBANK-CSV-AR':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #DD101 :
                        collectionType = '101';
                        technicalReferenceLength = 32;
                        break;
                    case #DD103 :
                        collectionType = '103';
                        technicalReferenceLength = 32;
                        break;
                }
                break;
            case 'DK-DANSKEBANK-CSV-NO-AR':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #DD201 :
                        collectionType = '201';
                        technicalReferenceLength = 32;
                        break;
                    case #DD203 :                       //SKS_VSTS_13819
                        collectionType = '203';
                        technicalReferenceLength = 35;
                        break;
                }
                break;
            case 'DK-DANSKEBANK-CSV-UK-AR':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #DD701 :
                        collectionType = '701';
                        technicalReferenceLength = 35;
                        break;
                    case #DD702 :
                        collectionType = '702';
                        technicalReferenceLength = 35;
                        break;
                }
                break;
            default:
                technicalReferenceLength = 32;
                break;                
        }
        
        if(collectionType)//SKS_VSTS_13643
        {
            sb.Append(this.wrapField(collectionType));
        }

        //  8    Technical reference
        sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference), technicalReferenceLength));

        //  9   Alternative collection type
        sb.Append(this.wrapField(''));

        //  10  Not used
        sb.Append(this.wrapField(''));

        //  11  Address validation
        sb.Append(this.wrapField(''));

        //  12  Creditor's  account number
        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'DK-DANSKEBANK-CSV-AR':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #DD103 :
                        acctNum = subStr(mSKS_EFT_FileDetail.BankBankAcct, 1, 35);
                        sb.Append(this.wrapField(acctNum));
                        break;
                }
                break;
            case 'DK-DANSKEBANK-CSV-UK-AR':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #DD701:
                    case #DD702 :
                        if(mBankAccountTable.AccountID != mSKS_EFT_FileDetail.BankAccountId)
                        {
                            // Get Bank account
                            mBankAccountTable = BankAccountTable::find(mSKS_EFT_FileDetail.BankAccountId);
                        }

                        acctNum = subStr(mBankAccountTable.DebitDirectId, 1, 6) + subStr(mSKS_EFT_FileDetail.BankBankSortCode, 1, 6) + subStr(mSKS_EFT_FileDetail.BankBankAcct, 1, 8); //SKS#DevOps:17640
                        sb.Append(this.wrapField(acctNum)); //SKS_DevOps_18658
                        break;
                }
                break;
            default:
                sb.Append(this.wrapField(''));
                break;
        }

        //  13  Payment date
        sb.Append(this.wrapField(SKS_PP_StringFormats::strDateYYYYMMDD(mSKS_EFT_FileDetail.EffectiveDate, DateSeparator::None), false));

        //  14  Payment date text
        sb.Append(this.wrapField(''));

        //  15  Date type
        sb.Append(this.wrapField('1'));

        //  16  Invoice date
        sb.Append(this.wrapField(''));

        //  17 Invoice date text
        sb.Append(this.wrapField(''));

        //  18  Day of delivery
        sb.Append(this.wrapField('', 0, false));

        //  19  Day of delivery  text
        sb.Append(this.wrapField(''));

        //  20  Order date
        sb.Append(this.wrapField('', 0, false));

        //  21  Net Amount
        sb.Append(this.wrapField('', 0, false));

        //  22  VAT per cent
        sb.Append(this.wrapField('', 0, false));

        //  23  Amount
        amount = num2Str(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur, 1, 2, 1, 0);
        amount = strRem(amount, '.');
        sb.Append(this.wrapField(amount, 14, false));

        //  24  Currency
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.PaymentCurrencyCode, 3));

        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'DK-DANSKEBANK-CSV-NO-AR':
                //SKS_VSTS_13559 -->
                value = mSKS_EFT_FileDetail.PaymId;
                len = 22;
                break;
            default:
                value = mSKS_EFT_FileDetail.PaymentReference;
                len = 25;
        }
        //  25  Payment identification
        sb.Append(this.wrapField(this.CharacterReplacement(value), len));
        //SKS_VSTS_13559 <--

        //  26  Debtor ID
        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'DK-DANSKEBANK-CSV-NO-AR':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #DD201:
                        sb.Append(this.wrapField(msks_EFT_FileDetail_Mandate.MandateReference, 25));
                        break;
                    case #DD203:
                        sb.Append(this.wrapField(msks_EFT_FileDetail_Mandate.MandateReference, 11));
                        break;
                }
                break;
            default:
                sb.Append(this.wrapField(msks_EFT_FileDetail_Mandate.MandateReference, 15));
                break;
        }

        //  27  Debtor ID text
        sb.Append(this.wrapField(''));

        //  28  Invoice number        
        sb.Append(this.wrapField(this.getInvoiceNbrs(), 25, false));

        //  29  Invoice number text
        sb.Append(this.wrapField(''));

        //  30  Order number
        sb.Append(this.wrapField(''));

        //  31  Order number  text
        sb.Append(this.wrapField(''));

        //  32  Sellerâ€™s reference
        sb.Append(this.wrapField(''));

        //  33  Sellerâ€™s reference  text
        sb.Append(this.wrapField(''));

        //  34  Terms of delivery
        sb.Append(this.wrapField(''));

        //  35  Terms of delivery text
        sb.Append(this.wrapField(''));

        //  36  Terms of Payment
        sb.Append(this.wrapField(''));

        //  37  Terms of Payment text
        sb.Append(this.wrapField(''));

        //  38  Buyerâ€™s CVR number
        sb.Append(this.wrapField(''));

        //  39  VAT number
        vATNum = SKS_EFT_Format::getCodelookupvalue('VATNum', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank);
        sb.Append(this.wrapField(this.CharacterReplacement(vATNum), 10));

        //  40  Buyerâ€™s EAN number
        sb.Append(this.wrapField(''));

        //  41  Buyerâ€™s order number
        sb.Append(this.wrapField(''));

        //  42  Buyerâ€™s referee
        sb.Append(this.wrapField(''));
        
        //  43  Debtor language code
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #DD201 ||
            mSKS_EFT_FileFormatPaymSpec.TransactionCode == #DD203)
        {
            sb.Append(this.wrapField('NO'));
        }
        else
        {
            sb.Append(this.wrapField('DA'));
        }

        //  44  Debtor address 1
        sb.Append(this.wrapField(subStr(this.CharacterReplacement(mSKS_EFT_FileDetail.AccountName), 1, 35)));

        //  45  Debtor address 2
        if(strLen(mSKS_EFT_FileDetail.AccountName) > 35)
        {
            sb.Append(this.wrapField(subStr(this.CharacterReplacement(mSKS_EFT_FileDetail.AccountName), 36, 35)));
        }
        else
        {
            sb.Append(this.wrapField(''));
        }

        //  46  Debtor address 3
        sb.Append(this.wrapField(this.CharacterReplacement(msks_EFT_FileDetail_CustAddress.CustAddr), 35));

        //  47  Debtor address 4
        sb.Append(this.wrapField(''));

        //  48  Debtor house number 
        sb.Append(this.wrapField(this.CharacterReplacement(msks_EFT_FileDetail_CustAddress.CustAddr2), 25));

        //  49  Debtor postal code
        sb.Append(this.wrapField(msks_EFT_FileDetail_CustAddress.CustZipPostal, 8));

        //  50  Debtor city
        sb.Append(this.wrapField(this.CharacterReplacement(msks_EFT_FileDetail_CustAddress.CustCity), 35));

        //  51  Debtor country
        sb.Append(this.wrapField(this.getLogisticsAddressCountryISO(msks_EFT_FileDetail_CustAddress.CustCountryRegionId), 2));

        //  52  Delivery address 1
        sb.Append(this.wrapField(''));

        //  53  Delivery address 2
        sb.Append(this.wrapField(''));

        //  54  Delivery address 3
        sb.Append(this.wrapField(''));

        //  55  Delivery address 4
        sb.Append(this.wrapField(''));

        //  56  Delivery house number
        sb.Append(this.wrapField(''));

        //  57  Delivery postal code
        sb.Append(this.wrapField(''));

        //  58  Delivery city
        sb.Append(this.wrapField(''));

        //  59  Delivery country
        sb.Append(this.wrapField(''));

        //  60  Debtor's account number
        BankAccntNum = subStr(mSKS_EFT_FileDetail.DepBankTransit, 1, 6) + subStr(mSKS_EFT_FileDetail.DepBankAcct, 1, 8);
        sb.Append(this.wrapField(BankAccntNum));

        //  61  Nets registration data
        sb.Append(this.wrapField(''));

        //  62  Creditor's name 
        sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_FileDetail.FileACHCompanyName), 18));

        //  63  Debtor text heading
        sb.Append(this.wrapField(''));

        //  64  Information code
        sb.Append(this.wrapField('2', 1, false, false, true));

        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPostalAddressLineByPartyLocationRole</Name>
				<Source><![CDATA[
    /// <summary>
    /// LogisticsPostalAddress
    /// </summary>
    /// <param name = "_party">_party</param>
    /// <param name = "_roleName">_roleName</param>
    /// <returns>true</returns>
    protected LogisticsPostalAddress findPostalAddressLineByPartyLocationRole(
        DirPartyRecId   _party,
        LogisticsLocationRoleName   _roleName)
    {
        DirPartyLocation        partyLocation;
        LogisticsLocation       logisticsLocation;
        LogisticsPostalAddress  postalAddress;
    
        while select partyLocation
            where partyLocation.Party == _party
        {
            if(strScan(partyLocation.locationRoleNames(),_roleName,1,strLen(partyLocation.locationRoleNames())))
            {
                logisticsLocation = logisticsLocation::find(partyLocation.Location);
                if(logisticsLocation.IsPostalAddress)
                {
                    postalAddress = LogisticsPostalAddress::findByLocation(logisticsLocation.RecId);
                    break;
                }
            }
        }    
        return postalAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addressSplit</Name>
				<Source><![CDATA[
    /// <summary>
    /// addressSplit
    /// </summary>
    /// <param name = "_address">_address</param>
    /// <returns>true</returns>
    protected container addressSplit(SKS_EB_Address  _address)
    {
        List            strList = new List(Types::String);
        container       address;
        ListIterator    iterator;
    
        strlist = strSplit(_address,';');
        iterator = new ListIterator(strlist);
    
        while(iterator.more())
        {
            address += iterator.value();
            iterator.next();
        }
    
        return address;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceNbrs</Name>
				<Source><![CDATA[
    private str getInvoiceNbrs()
    {
        SKS_EFT_FileDetail invSKS_EFT_FileDetail;
        str invoiceNbrs;

        while select InvoiceNumber from invSKS_EFT_FileDetail
            where invSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId
           && invSKS_EFT_FileDetail.InvoiceNumber != ''
        {
            invoiceNbrs += strFmt('%1 ', invSKS_EFT_FileDetail.InvoiceNumber);
        }

        if(invoiceNbrs)
        {
            invoiceNbrs = subStr(invoiceNbrs, 1, strLen(invoiceNbrs)-1);
        }

        return this.CharacterReplacement(invoiceNbrs);
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectPaymentRecords</Name>
				<Source><![CDATA[
    [SuppressBPWarning('BPErrorSelectUsingFirstOnly', 'The buffer is used in next statement or in a datasource query loop.')]    

    protected void selectPaymentRecords()
    {
        //------------------------------------------------------------------------------------------------------
        // Standard payment selction
        // Override if different selection is need for a format
        //------------------------------------------------------------------------------------------------------
    
        //Order by clause must match the clause in the SKS_EFT_Processing.SumByPayment
        select * from mSKS_EFT_FileDetail
          order by mSKS_EFT_FileDetail.RecordSection,
                    mSKS_EFT_FileDetail.PaymMode,
                   mSKS_EFT_FileDetail.PaymSpec,
                   mSKS_EFT_FileDetail.EffectiveDate,
                   mSKS_EFT_FileDetail.DepCountryRegionId,
                   mSKS_EFT_FileDetail.RecordType,
                   mSKS_EFT_FileDetail.BankAccountId,
                   mSKS_EFT_FileDetail.AccountNum,
                   mSKS_EFT_FileDetail.PaymentReference,
                   mSKS_EFT_FileDetail.RecId 
            join msks_EFT_FileDetail_Mandate
            join mSKS_EFT_FileDetail_CustAddress
          where mSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                mSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                mSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary &&
                msks_EFT_FileDetail_Mandate.RefRecId == mSKS_EFT_FileDetail.RecId &&
                mSKS_EFT_FileDetail_CustAddress.RefRecId == mSKS_EFT_FileDetail.RecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>