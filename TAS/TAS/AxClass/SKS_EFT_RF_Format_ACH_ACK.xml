<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_RF_Format_ACH_ACK</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_EFT_RF_Format_ACH_ACK extends SKS_EFT_RF_Format
{
    //Class Variables
    //primities
    str mTag;
    str mFileName;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFile</Name>
				<Source><![CDATA[
    public SKS_EFT_RF_File getFile(str _filename, boolean _serverPath, SKS_BF_BankIntType _SKS_BF_BankIntType = SKS_BF_BankIntType::FileHubLocal)
    {
        SKS_EB_FileHub locSKS_EB_FileHub = SKS_EB_FileHub::construct(_SKS_BF_BankIntType);
        TextBuffer locTextBuffer;
        int locLocationOfNextCarriageReturn = 1;
        int locLineStart = 1;
        str locCurrentDocument;
        str locCurrentRecord;
        void setIndexOfNextCarriageReturn()
        {
            while(locLocationOfNextCarriageReturn <=  locLineStart && locLocationOfNextCarriageReturn > 0)
            {
                locLineStart++;
                locLocationOfNextCarriageReturn = SKS_PP_StringFormats::strIndexOf(locCurrentDocument, '\n', locLineStart);
            }
        }
        boolean moveToNextValidLine()
        {
            boolean locValidRecord = false;
            ;
            locCurrentRecord = '';
            While(!false  && locLineStart <= strLen(locCurrentDocument) - 96 && strLen(locCurrentRecord) < 96)
            {
                setIndexOfNextCarriageReturn();
                if(locLineStart < locLocationOfNextCarriageReturn)
                {
                    locCurrentRecord = SKS_PP_StringFormats::strSub(locCurrentDocument, locLineStart, locLocationOfNextCarriageReturn - 1);
                    locLineStart = locLocationOfNextCarriageReturn + 1;
                    if(strLen(locCurrentDocument) - locLineStart < 96)
                        locLineStart = strLen(locCurrentDocument) + 1;
                }
                else
                {
                    locCurrentRecord = SKS_PP_StringFormats::strSub(locCurrentDocument, locLineStart);
                    locLineStart = strLen(locCurrentDocument) + 1;
                }
    
            }
            if(strLen(locCurrentRecord) == 96)
                locValidRecord = true;
            return locValidRecord;
        }        
    
        //start a new return file
        mSKS_EFT_RF_File = new SKS_EFT_RF_File();
        
        locSKS_EB_FileHub.setFileName(_filename);
        locSKS_EB_FileHub.runFileLoad(_filename);
        locTextBuffer = new TextBuffer();
        locTextBuffer.setText(locSKS_EB_FileHub.fileBody());
        
        locTextBuffer = this.setCarriageReturns(locTextBuffer);
        locCurrentDocument = locTextBuffer.getText();
        if(strLen(locCurrentDocument) < 96)//insufficient length for properly formatted file
            return mSKS_EFT_RF_File;
    
        //priming read
        moveToNextValidLine();
        while(moveToNextValidLine())
        {
            this.processRecord(locCurrentRecord);
        }
    
        //must use the getSKS_EFT_RF_File() method becuase, if any pending mSKS_EFT_RF_SentFile have yet to be pushed into the list, this will do it.
        return this.getSKS_EFT_RF_File();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFormatId</Name>
				<Source><![CDATA[
    public str getFormatId(str _filename, boolean _serverPath, SKS_BF_BankIntType _SKS_BF_BankIntType = SKS_BF_BankIntType::FileHubLocal)
    {
    
        str rtnval = '';
        int classId;
        //BEGIN VALIDATION VARIABLES
        //BEGIN QUALIFIERS
        boolean pos11to24Spaces = false;
        boolean pos25to33NumericReferenceNbr = false;
        boolean pos34Space = false;
        boolean pos52to53Spaces = false;
        boolean pos71to75Spaces = false;
        boolean pos76to83Date = false;
        boolean pos84to88Spaces = false;
        boolean pos89to96Date = false;
        //BEGIN DISQUALIFIER VARIABLES
        //none
    
        //END VALIDATION VARIABLES
        SKS_EB_FileHub locSKS_EB_FileHub = SKS_EB_FileHub::construct(_SKS_BF_BankIntType);
        System.String locString;
        System.IO.StreamReader locStreamReader;
    
        //Setup filestream
        locSKS_EB_FileHub.setFileName(_filename);
        locSKS_EB_FileHub.runFileInquire();
        if(!locSKS_EB_FileHub.attrFileExists())
        {
            // The file %1 does not exist.
            error(strfmt("@SYS62207", _filename));
            return null;
        }
        locSKS_EB_FileHub.runFileLoad(_filename);
        locSKS_EB_FileHub.StreamInit();
        locStreamReader = new System.IO.StreamReader(locSKS_EB_FileHub.streamGet());
        //priming read
        locString = locStreamReader.ReadLine();
        if(!System.String::IsNullOrEmpty(locString))
        {
            //a valid ACH Acknowledgment file has records of length 96
            if(!System.String::IsNullOrWhiteSpace(locString) && locString.get_Length() == 96 )
            {
    
                if(SKS_PP_StringFormats::strSub(locString, 11, 14) == SKS_PP_StringFormats::strFill(14,'',SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left))
                {
                    pos11to24Spaces = true;
                }
                if(SKS_PP_StringFormats::isNumeric(strLRTrim(SKS_PP_StringFormats::strSub(locString, 25, 9))))
                {
                    pos25to33NumericReferenceNbr = true;
                }
                if(SKS_PP_StringFormats::strSub(locString, 34, 1) == SKS_PP_StringFormats::strFill(1,'',SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left))
                {
                    pos34Space = true;
                }
                if(SKS_PP_StringFormats::strSub(locString, 52, 2) == SKS_PP_StringFormats::strFill(2,'',SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left))
                {
                    pos52to53Spaces = true;
                }
                if(SKS_PP_StringFormats::strSub(locString, 71, 5) == SKS_PP_StringFormats::strFill(5,'',SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left))
                {
                    pos71to75Spaces = true;
                }
                if(strContains(SKS_PP_StringFormats::strSub(locString, 76, 8), @'/'))
                {
                    pos76to83Date = true;
                }
                if(SKS_PP_StringFormats::strSub(locString, 84, 88) == SKS_PP_StringFormats::strFill(5,'',SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left))
                {
                    pos84to88Spaces = true;
                }
                if(strContains(SKS_PP_StringFormats::strSub(locString, 89, 8), @'/'))
                {
                    pos89to96Date = true;
                }
            }
        }
        if(pos11to24Spaces
        && pos25to33NumericReferenceNbr
        && pos34Space
        && pos52to53Spaces
        && pos71to75Spaces
        && pos76to83Date
        && pos84to88Spaces
        && pos89to96Date)
        {
            //ALl Qualifers show this a SWIFT_ACKNAK_07262013 file
            classId = classIdGet(this);
            rtnval = classId2Name(ClassId);
        }

        locStreamReader.Close();
        locSKS_EB_FileHub.streamClose();
    
        return rtnval;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSKS_EFT_RF_File</Name>
				<Source><![CDATA[
    public SKS_EFT_RF_File getSKS_EFT_RF_File()
    {
    
        if(mSKS_EFT_RF_SentFile != null)
        {
            mSKS_EFT_RF_File.addSentFile(mSKS_EFT_RF_SentFile);
            mSKS_EFT_RF_SentFile = null;
        }
    
        return mSKS_EFT_RF_File;
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>processRecord</Name>
				<Source><![CDATA[
    private void processRecord(str _CurrentRecord)
    {
        SKS_EFT_RF_SentFile locSKS_EFT_RF_SentFile;
        ;
    
        if(strLen(strLRTrim(_CurrentRecord)) > 0)
        {
            locSKS_EFT_RF_SentFile = new SKS_EFT_RF_SentFile();
            //Set the File Reference Number
            locSKS_EFT_RF_SentFile.setID(SKS_PP_StringFormats::strSub(_CurrentRecord, 25, 9));
            //Set the File Status
            locSKS_EFT_RF_SentFile.setStatus('RCVD');
            mSKS_EFT_RF_File.setUtcDateTime(str2datetime(SKS_PP_StringFormats::strSub(_CurrentRecord, 76, 8), 213));
            mSKS_EFT_RF_File.addSentFile(locSKS_EFT_RF_SentFile);
    
        }
        return;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFileKey</Name>
				<Source><![CDATA[
    protected void setFileKey(str _InboundFileKey)
    {
        mSKS_EFT_RF_SentFile.setID(_InboundFileKey);
    }

]]></Source>
			</Method>
			<Method>
				<Name>outboundFileKeyGen</Name>
				<Source><![CDATA[
    public static str outboundFileKeyGen(str _OutFilename, SKS_EFTAP_File _SKS_EFTAP_File, System.IO.StreamReader _StreamReader = null)
    {
        SKS_EFT_FileData locSKS_EFT_FileData;
        System.Text.StringBuilder sb;
        SKS_EFT_FileDetail locSKS_EFT_FileDetail;
        SKS_EFT_ImmediateOrigin locSKS_EFT_ImmediateOrigin;
        SKS_EFT_FileFormat locSKS_EFT_FileFormat;
        RecordViewCache locRecordViewCache;
        List locLooseFields;
        ;
    
        sb = new System.Text.StringBuilder();
        select firstOnly ImmOriginMask from locSKS_EFT_FileFormat
            where locSKS_EFT_FileFormat.FormatId == _SKS_EFTAP_File.FormatId;
        select firstOnly FileACHImmOrigin from locSKS_EFT_FileDetail
            where locSKS_EFT_FileDetail.FileACHImmOriginName != locSKS_EFT_ImmediateOrigin
            && locSKS_EFT_FileDetail.FileRecId == _SKS_EFTAP_File.RecId;
    
        sb.Append(SKS_PP_StringFormats::strFill(strLen(locSKS_EFT_FileFormat.ImmOriginMask), locSKS_EFT_FileDetail.FileACHImmOrigin, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left));
        locLooseFields = new List(Types::Class);
        //The resultant record set will be cached to minimize DB Calls
        select noFetch locSKS_EFT_FileData
            where locSKS_EFT_FileData.RefRecId == _SKS_EFTAP_File.RecId;
        //Cache the records
        locRecordViewCache = new RecordViewCache(locSKS_EFT_FileData);
        Select firstonly FieldValue from locSKS_EFT_FileData
            where locSKS_EFT_FileData.RefRecId == _SKS_EFTAP_File.RecId
            && locSKS_EFT_FileData.FieldName == 'busDate';
        sb.Append(locSKS_EFT_FileData.FieldValue);
        Select firstonly FieldValue from locSKS_EFT_FileData
            where locSKS_EFT_FileData.RefRecId == _SKS_EFTAP_File.RecId
            && locSKS_EFT_FileData.FieldName == 'busTime';
        sb.Append(locSKS_EFT_FileData.FieldValue);
        Select firstonly FieldValue from locSKS_EFT_FileData
            where locSKS_EFT_FileData.RefRecId == _SKS_EFTAP_File.RecId
            && locSKS_EFT_FileData.FieldName == 'FileIdModifier';
        sb.Append(locSKS_EFT_FileData.FieldValue);
    
        return sb.ToString();
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>outboundTransKeyGen</Name>
				<Source><![CDATA[
    public static str outboundTransKeyGen(str _FileName, SKS_EFT_FileDetail _SKS_EFT_FileDetail, SKS_EFTAP_File _SKS_EFTAP_FILE)
    {
        //THIS FORMAT IS ONLY FOR FILE LEVEL.  There will never be trans keys.
        return '';
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>