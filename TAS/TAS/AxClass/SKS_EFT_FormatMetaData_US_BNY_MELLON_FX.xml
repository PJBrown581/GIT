<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_FormatMetaData_US_BNY_MELLON_FX</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_FormatMetaData_US_BNY_MELLON_FX Extends SKS_EFT_Format_MetaData
/// </summary>
public class SKS_EFT_FormatMetaData_US_BNY_MELLON_FX Extends SKS_EFT_Format_MetaData
{


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        productVersion = '';
        formatGroupVersion = '20221018';
        dataContractVersion = '1.0';
        conFormatID = ['US-BNY-MELLON-FX'];
        formatfiletype = 'EFT';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFormatFileType</Name>
				<Source><![CDATA[
    protected str getFormatFileType()
    {
        return formatfiletype;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHeaderMetaData</Name>
				<Source><![CDATA[
    protected container getHeaderMetaData()
    {
        container   headerList;

        //Metadata column names of data elements
//ProductVersion,FormatGroupVersion,UseWithCustomer,UseWithVenodrs,UseWithBanktoBank,UsewithCustReimbursements,
//BeDesc01,BeDesc02,BeMask01,BeMask02,BlockFill,CompanyIdMask,CompanyIdTitle,CompanyNameTitle,CompanyNameMask,Crlf,Description,EffectiveDateOffset,EntryClassTitle,EntryClassMask,
//FormatId,FormatType,IMMDestMask,IMMDestTitle,IMMDestNameTitle,IMMDestNameMask,IMMOriginTitle,IMMOriginMask,IMMOriginNameTitle,IMMOriginNameMask,IncludeCpnyCredit,
//IncludeCpnyDebit,LastEffectiveDate,NextDailyReset,NextDailyResetDate,NextFileId,NextSequenceNumber,PreNote,RecordLength,Selected,TrimRecord,TwoFileNameAddition,
//WBank01Description,WBank01Mask,WBank01Required,WBank02Required,WBank02Mask,WBank02Description,WBank03Required,WBank03Mask,WBank03Description,WBank04Required,WBank04Mask,
//WBank04Description,PreNoteDays,EDI,PayDateIsEffDate,ARDateOffset,UseAddenda,MastAcctList,FormatGroup,MultiEffectiveDates,SupportsMultiCompany,ExternalFormat,FundTransferType

        headerList = ConIns(headerList,conLen(headerList)+1,[productVersion,formatGroupVersion,0,1,0,0,'','','','',0,'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX','Customer id','','',1,'US-BNY Mellon Charlie/ENI processing file',0,'','','US-BNY-MELLON-FX',1,'','','','','','','Originating company id','XXXXXXXXXXX',0,0,'1900-01-01 00:00:00.000',0,'1900-01-01 00:00:00.000',1,1,0,'995',0,0,'','','',0,0,'','',0,'','',0,'','',0,0,0,0,0,0,'US-BNY-MELLON-FX',0,0,0]);

        return headerList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymSpecsMetaData</Name>
				<Source><![CDATA[
    protected container getPaymSpecsMetaData(str _formatID)
    {
        container   paymSpecList;

        //Metadata column names of data elements
//BARoutingReqd,VBAAccountReqd,VBASwiftReqd,VBAIBANReqd,ARPaymSpecName,BEBeneBankAcctReqd,BE01Reqd,BE02Reqd,BE01Use,BE02Use,PaymSpecFileDescr,RecordSummary,TransactionCode,
        //EmailNote,PaymSpec,PaymSpecName,FilterSeparateFile,FormatId,Selected,CpnyIDNameReq,EmailOff,VendorUse,WireTabs,SamePaymentDate,SelectByPaymentDate,PreNote,TxnNacha,UseCheckNumber,
        //UseWithCustomers,UseWithVendors,EDI,UseWithBanktoBank,FundTransferType,UseWithCustomerReimbursement,InvoiceDetail,RemitAvailability,RemitType,APNameType,APAddressType
        //DDNameType,DDAddressType,CRNameType,CRAddressType

        switch (_formatID)
        {
            case ('US-BNY-MELLON-FX'):
                paymSpecList = this.getPaymSpecsMetaData_US_BNY_MELLON_FX();
                break;

        }

        return paymSpecList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymSpecsMetaData_US_BNY_MELLON_FX</Name>
				<Source><![CDATA[
    private container getPaymSpecsMetaData_US_BNY_MELLON_FX()
    {
        container   paymSpecList;

        paymSpecList = ConIns(paymSpecList,conLen(paymSpecList)+1,[0,1,0,0,'',0,0,0,0,0,'Wire - SWIFT (SWT)',1,'SWT','','Wire-SWIFT','TRADE PAY',0,'US-BNY-MELLON-FX',0,1,0,1,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,1,1,0,0,0,0]);
        paymSpecList = ConIns(paymSpecList,conLen(paymSpecList)+1,[0,1,0,0,'',0,0,0,0,0,'Wire - Fed (FWT)',1,'FWT','','Wire-FED','TRADE PAY',0,'US-BNY-MELLON-FX',0,1,0,1,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,1,1,0,0,0,0]);

        return paymSpecList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getNotesMetaData</Name>
				<Source><![CDATA[
    protected container getNotesMetaData(str _formatID)
    {
        container   notesList;

        //Metadata column names of data elements
//FormatId,PaymSpec,Note

        switch (_formatID)
        {
            case ('US-BNY-MELLON-FX'):
                notesList = this.getNotesMetaData_US_BNY_MELLON_FX();
                break;

        }

        return notesList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getNotesMetaData_US_BNY_MELLON_FX</Name>
				<Source><![CDATA[
    private container getNotesMetaData_US_BNY_MELLON_FX()
    {
        container   notesList;

        notesList = ConIns(notesList,conLen(notesList)+1,['US-BNY-MELLON-FX','Wire-FED','-Does not support Vendor bank debits.:-One customer email is required and must be added to the Contact information tab in Organization administration > Setup > Organization > Legal entities. The Type field must be set to E-mail address and the Name or description field must begin with FASTTRACK.:-Notes are stored on the Description field in the Payment journal.:-AP EFT+ bank account fields:--Customer id is required on the Company info tab.:--Originating company identifier is required on the File/header tab.:--Ordering party account number is stored in the ID field on the Wire/IAT ordering party tab.:--Ordering party Name, Address, City, State and Postal Code are required on the Wire/IAT ordering party tab.:--To designate as a test file, the Test file (Y/N) field on the Wire/IAT ordering party tab must be set to Y and will default to N if left blank.:-Vendor eBanking details > Payment specifications fields:--Beneficiary name is required in the Beneficiary group.:--For Further Credit is stored on Name and Account fields in the Credit party group.:--For Intermediary on Domestic wires, Beneficiary bank Name and Intermediary SWIFT code and Name are required. :-Vendor bank account fields:--Receiving bank id is required in the Routing number field on the Vendor bank account.:--If IBAN is entered, it will be used.  If no IBAN, Bank account number is used.']);
        notesList = ConIns(notesList,conLen(notesList)+1,['US-BNY-MELLON-FX','Wire-SWIFT','-Does not support Vendor bank debits.:-One customer email is required and must be added to the Contact information tab in Organization administration > Setup > Organization > Legal entities. The Type field must be set to E-mail address and the Name or description field must begin with FASTTRACK.:-Notes are stored on the Description field in the Payment journal.:-AP EFT+ bank account fields:--Customer id is required on the Company info tab.:--Originating company identifier is required on the File/header tab.:--Ordering party Name, Address, City, State and Postal Code are required on the Wire/IAT ordering party tab.:--To designate as a test file, the Test file (Y/N) field on the Wire/IAT ordering party tab must be set to Y and will default to N if left blank.:-Vendor eBanking details > Payment specifications fields:--Beneficiary name is required in the Beneficiary group.:--For Further Credit is stored on Name and Account fields in the Credit party group.:--For Intermediary on Domestic wires, Beneficiary bank Name and Intermediary SWIFT code and Name are required.  Currency wires may require additional fields.:--For CAD payments, enter branch number - bank id in Beneficiary bank > Branch.:-Vendor bank account fields:--Receiving bank id is required in the SWIFT code field.:--If IBAN is entered, it will be used.  If no IBAN, Bank account number is used.::For FX Transactions:-Originating company identifier defaults to \'FXNONREP  \'.:-Client comments are stored on the Payment > Note field in the Payment journal.:-AP EFT+ bank account fields:--Ordering party Name and Country are required on the Wire/IAT ordering party tab.:--Counterparty name and Counterparty id are required on the Wire/IAT ordering party tab.:-Vendor eBanking details > Payment fields:--Beneficiary name and country are required in the Beneficiary group.:--Beneficiary bank name (Reciept location) is required in the Name field on the Beneficiary bank group.']);

        return notesList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getValidationsMetaData</Name>
				<Source><![CDATA[
    protected container getValidationsMetaData(str _formatID)
    {
        container   validationsList;

        //Metadata column names of data elements
//FormatId,PaymSpec,Id,SourceFieldDesc,SourceFieldLoc,TargetFieldLoc,Notes,SourceContext,SourceField,ISOCountrySpec,CountryContext,Required,LengthValidation,MinLength,MaxLength,UserUpdated,Module

        switch (_formatID)
        {
        }

        return validationsList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getCodeLookupMetaData</Name>
				<Source><![CDATA[
    protected container getCodeLookupMetaData()
    {
        container   codeLookupList;

        //Metadata column names of data elements
//FormatGroup,CodeID,Description

        return codeLookupList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getCodeLookupValuesMetaData</Name>
				<Source><![CDATA[
    protected container getCodeLookupValuesMetaData()
    {
        container   codeLookupValuesList;

        //Metadata column names of data elements
//FormatGroup,CodeID,Display Value,CodeValue

        return codeLookupValuesList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymSpecFieldsMetaData</Name>
				<Source><![CDATA[
    protected container getPaymSpecFieldsMetaData(str _formatID)
    {
        container   paymSpecFieldsList;

        //Metadata column names of data elements
//FormatGroup,FormatID,PaymentSpec,FormatFieldID,Description,FieldType,CodeID,DefaultValue,Required,FixedValue,FixedValueMask,TechNotes

        switch (_formatID)
        {
        }

        return paymSpecFieldsList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getControlFormatMetaData</Name>
				<Source><![CDATA[
    protected container getControlFormatMetaData(str _formatID)
    {
        container   ControlFormatList;

        //Metadata column names of data elements
//FileFormatID,ControlFileFormatID,ControlFileDescription

        switch (_formatID)
        {
        }

        return ControlFormatList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getDeleteMetaData</Name>
				<Source><![CDATA[
    protected container getDeleteMetaData()
    {
        container   deleteList;

        //FormatGroup, FormatId, DetailType, KeyID1, KeyId2, KeyId3

        return deleteList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankCodeLookupMetaData</Name>
				<Source><![CDATA[
    protected container getBankCodeLookupMetaData()
    {
        container   codeLookupList;

        return codeLookupList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankCodeLookupValuesMetaData</Name>
				<Source><![CDATA[
    protected container getBankCodeLookupValuesMetaData()
    {
        container   codeLookupValuesList;

        return codeLookupValuesList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFileFormatFieldsMetaData</Name>
				<Source><![CDATA[
    protected container getFileFormatFieldsMetaData(str _formatID)
    {
        container   paymSpecFieldsList;

        switch(_formatID)
        {
            case ('US-BNY-MELLON-FX'):
              paymSpecFieldsList = this.getFileFormatFieldsMetaData_US_BNY_MELLON_FX();
              break;
        }

        return paymSpecFieldsList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFileFormatFieldsMetaData_US_BNY_MELLON_FX</Name>
				<Source><![CDATA[
    private container getFileFormatFieldsMetaData_US_BNY_MELLON_FX()
    {
        container   paymSpecFieldsList;

        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['US-BNY-MELLON-FX','US-BNY-MELLON-FX','TestFile','Test file (Y/N)',1,'TestFile','',0,'','X','Test file (Y/N)']);
        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['US-BNY-MELLON-FX','US-BNY-MELLON-FX','CounterpartyId','Counterparty id',1,'CounterpartyId','',0,'','U','PR > ID Code']);
        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['US-BNY-MELLON-FX','US-BNY-MELLON-FX','CounterpartyName','Counterparty name',1,'CounterpartyName','',0,'','XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX','PR > Name']);

        return paymSpecFieldsList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBankCodelookupValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updating the bank code lookpups from the W0X fields.
    /// </summary>
    protected void updateBankCodelookupValues()
    {
        if(gSKS_EFT_Bank.W02)
        {
            this.updateBankFields('TestFile', gSKS_EFT_Bank.W02);
        }
        if(gSKS_EFT_Bank.W03)
        {
            this.updateBankFields('CounterpartyId', gSKS_EFT_Bank.W03);
        }
        if(gSKS_EFT_Bank.W04)
        {
            this.updateBankFields('CounterpartyName', gSKS_EFT_Bank.W04);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>