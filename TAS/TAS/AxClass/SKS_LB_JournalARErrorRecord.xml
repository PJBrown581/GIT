<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_LB_JournalARErrorRecord</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// JournalarError record class for arerror record creation
/// </summary>
class SKS_LB_JournalARErrorRecord
{
    SKS_LB_WriteOffId writeoffIdLoc; 
    CompanyBankAccountId bankAccount; 
    SKS_LB_MatchType tmpMatchType; 
    InvoiceId   tmpMatchValue;
    SKS_LB_CustIDErr custIDErr; 
    SelectableDataArea customerCompany; 
    CustAccount custIDSugg; 
    CustName custName; 
    Date fileDate; 
    SKS_LB_FormatId formatID; 
    str pathFile;
    InvoiceId invoiceId; 
    SKS_LB_InvoiceIDErr invcNbrErr; 
    CustTrans tmpInvCustTrans; 
    CustTransOpen tmpInvCustTransOpen; 
    LedgerDefaultDimensionValueSet defaultDimension;
    NoYes update_existing_error; 
    SKS_LB_BatchNum batchNum; 
    CustVendPaymFeeId feeId; 
    DimensionDefault offsetDimension; 
    PaymDate paymentDate;
    

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>setAll</Name>
				<Source><![CDATA[
       public void setAll(SKS_LB_WriteOffId _writeoffIdLoc, CompanyBankAccountId _bankAccount, SKS_LB_MatchType _tmpMatchType, InvoiceId _tmpMatchValue,
                        SKS_LB_CustIDErr _custIDErr, SelectableDataArea _customerCompany, CustAccount _custIDSugg, CustName _custName, Date _fileDate,
                        SKS_LB_FormatId _formatID, str _pathFile, InvoiceId _invoiceId, SKS_LB_InvoiceIDErr _invcNbrErr, CustTrans _tmpInvCustTrans,
                        CustTransOpen _tmpInvCustTransOpen, LedgerDefaultDimensionValueSet _defaultDimension, NoYes _update_existing_error,
                        SKS_LB_BatchNum _batchNum, CustVendPaymFeeId _feeId, DimensionDefault _offsetDimension, PaymDate _paymentDate)
    {
        writeoffIdLoc = _writeoffIdLoc;
        bankAccount = _bankAccount;
        tmpMatchType = _tmpMatchType;
        tmpMatchValue = _tmpMatchValue;
        custIDErr = _custIDErr;
        custIDSugg = _custIDSugg;
        customerCompany = _customerCompany;
        custName = _custName;
        fileDate = _fileDate;
        formatID = _formatID;
        pathFile = _pathFile;
        invoiceId = _invoiceId;
        invcNbrErr = _invcNbrErr;
        tmpInvCustTrans = _tmpInvCustTrans;
        tmpInvCustTransOpen = _tmpInvCustTransOpen;
        defaultDimension = _defaultDimension;
        update_existing_error = _update_existing_error;
        batchNum = _batchNum;
        feeId = _feeId;
        offsetDimension = _offsetDimension;
        paymentDate = _paymentDate;       
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWriteoffIdLoc</Name>
				<Source><![CDATA[
    //SKS_LB_WriteOffId writeoffIdLoc;
    SKS_LB_WriteOffId getWriteoffIdLoc(SKS_LB_WriteOffId _writeoffIdLoc = writeoffIdLoc)
    {
        ;
        if (!prmIsDefault(_writeoffIdLoc))
        {
            writeoffIdLoc = _writeoffIdLoc;
        }
        return writeoffIdLoc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankAccount</Name>
				<Source><![CDATA[
    //CompanyBankAccountId bankAccount;
    CompanyBankAccountId getBankAccount(CompanyBankAccountId _bankAccount = bankAccount)
    {
        ;
        if (!prmIsDefault(_bankAccount))
        {
            bankAccount = _bankAccount;
        }
        return bankAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTmpMatchType</Name>
				<Source><![CDATA[
    //SKS_LB_MatchType tmpMatchType;
    SKS_LB_MatchType getTmpMatchType(SKS_LB_MatchType _tmpMatchType = tmpMatchType)
    {
        ;
        if (!prmIsDefault(_tmpMatchType))
        {
            tmpMatchType = _tmpMatchType;
        }
        return tmpMatchType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTmpMatchValue</Name>
				<Source><![CDATA[
    //InvoiceId   tmpMatchValue;
    InvoiceId getTmpMatchValue(InvoiceId _tmpMatchValue = tmpMatchValue)
    {
        ;
        if (!prmIsDefault(_tmpMatchValue))
        {
            tmpMatchValue = _tmpMatchValue;
        }
        return tmpMatchValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustIDErr</Name>
				<Source><![CDATA[
    //SKS_LB_CustIDErr custIDErr;
    SKS_LB_CustIDErr getCustIDErr(SKS_LB_CustIDErr _custIDErr = custIDErr)
    {
        ;
        if (!prmIsDefault(_custIDErr))
        {
            custIDErr = _custIDErr;
        }
        return custIDErr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustomerCompany</Name>
				<Source><![CDATA[
    //SelectableDataArea customerCompany;
    SelectableDataArea getCustomerCompany(SelectableDataArea _customerCompany = customerCompany)
    {
        ;
        if (!prmIsDefault(_customerCompany))
        {
            customerCompany = _customerCompany;
        }
        return customerCompany;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustIDSugg</Name>
				<Source><![CDATA[
    //CustAccount custIDSugg;
    CustAccount getCustIDSugg(CustAccount _custIDSugg = custIDSugg)
    {
        ;
        if (!prmIsDefault(_custIDSugg))
        {
            custIDSugg = _custIDSugg;
        }
        return custIDSugg;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustName</Name>
				<Source><![CDATA[
    //CustName custName;
    CustName getCustName(CustName _custName = custName)
    {
        ;
        if (!prmIsDefault(_custName))
        {
            custName = _custName;
        }
        return custName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFileDate</Name>
				<Source><![CDATA[
    //Date fileDate;
    Date getFileDate(Date _fileDate = fileDate)
    {
        ;
        if (!prmIsDefault(_fileDate))
        {
            fileDate = _fileDate;
        }
        return fileDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFormatID</Name>
				<Source><![CDATA[
    //SKS_LB_FormatId formatID;
    SKS_LB_FormatId getFormatID(SKS_LB_FormatId _formatID = formatID)
    {
        ;
        if (!prmIsDefault(_formatID))
        {
            formatID = _formatID;
        }
        return formatID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPathFile</Name>
				<Source><![CDATA[
    //str pathFile;
    str getPathFile(str _pathFile = pathFile)
    {
        ;
        if (!prmIsDefault(_pathFile))
        {
            pathFile = _pathFile;
        }
        return pathFile;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceId</Name>
				<Source><![CDATA[
    //InvoiceId invoiceId;
    InvoiceId getInvoiceId(InvoiceId _invoiceId = invoiceId)
    {
        ;
        if (!prmIsDefault(_invoiceId))
        {
            invoiceId = _invoiceId;
        }
        return invoiceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvcNbrErr</Name>
				<Source><![CDATA[
    //SKS_LB_InvoiceIDErr invcNbrErr;
    SKS_LB_InvoiceIDErr getInvcNbrErr(SKS_LB_InvoiceIDErr _invcNbrErr = invcNbrErr)
    {
        ;
        if (!prmIsDefault(_invcNbrErr))
        {
            invcNbrErr = _invcNbrErr;
        }
        return invcNbrErr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTmpInvCustTrans</Name>
				<Source><![CDATA[
    //CustTrans tmpInvCustTrans;
    CustTrans getTmpInvCustTrans(CustTrans _tmpInvCustTrans = tmpInvCustTrans)
    {
        ;
        if (!prmIsDefault(_tmpInvCustTrans))
        {
            tmpInvCustTrans = _tmpInvCustTrans;
        }
        return tmpInvCustTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTmpInvCustTransOpen</Name>
				<Source><![CDATA[
    //CustTransOpen tmpInvCustTransOpen;
    CustTransOpen getTmpInvCustTransOpen(CustTransOpen _tmpInvCustTransOpen = tmpInvCustTransOpen)
    {
        ;
        if (!prmIsDefault(_tmpInvCustTransOpen))
        {
            tmpInvCustTransOpen = _tmpInvCustTransOpen;
        }
        return tmpInvCustTransOpen;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultDimension</Name>
				<Source><![CDATA[
    //LedgerDefaultDimensionValueSet defaultDimension;
    LedgerDefaultDimensionValueSet getDefaultDimension(LedgerDefaultDimensionValueSet _defaultDimension = defaultDimension)
    {
        ;
        if (!prmIsDefault(_defaultDimension))
        {
            defaultDimension = _defaultDimension;
        }
        return defaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUpdate_existing_error</Name>
				<Source><![CDATA[
    //NoYes update_existing_error;
    NoYes getUpdate_existing_error(NoYes _update_existing_error = update_existing_error)
    {
        ;
        if (!prmIsDefault(_update_existing_error))
        {
            update_existing_error = _update_existing_error;
        }
        return update_existing_error;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBatchNum</Name>
				<Source><![CDATA[
    //SKS_LB_BatchNum batchNum;
    SKS_LB_BatchNum getBatchNum(SKS_LB_BatchNum _batchNum = batchNum)
    {
        ;
        if (!prmIsDefault(_batchNum))
        {
            batchNum = _batchNum;
        }
        return batchNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFeeId</Name>
				<Source><![CDATA[
    //CustVendPaymFeeId feeId;
    CustVendPaymFeeId getFeeId(CustVendPaymFeeId _feeId = feeId)
    {
        ;
        if (!prmIsDefault(_feeId))
        {
            feeId = _feeId;
        }
        return feeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOffsetDimension</Name>
				<Source><![CDATA[
    //DimensionDefault offsetDimension;
    DimensionDefault getOffsetDimension(DimensionDefault _offsetDimension = offsetDimension)
    {
        ;
        if (!prmIsDefault(_offsetDimension))
        {
            offsetDimension = _offsetDimension;
        }
        return offsetDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymentDate</Name>
				<Source><![CDATA[
    //PaymDate paymentDate;
    PaymDate getPaymentDate(PaymDate _paymentDate = paymentDate)
    {
        ;
        if (!prmIsDefault(_paymentDate))
        {
            paymentDate = _paymentDate;
        }
        return paymentDate;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>