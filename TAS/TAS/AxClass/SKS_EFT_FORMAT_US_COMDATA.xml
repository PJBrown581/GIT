<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_FORMAT_US_COMDATA</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_US_COMDATA extends SKS_EFT_Format
/// </summary>
class SKS_EFT_Format_US_COMDATA extends SKS_EFT_Format
{
    #define.FormatVersion('20230309')
    #define.ACH('ACH')
    #define.VCard('VCard')
    #define.OSC('OSC')
    #define.WIRE('WIRE')
    #define.INTRNAL('INTRNAL')
    #define.OVERNIGHT('OVERNIGHT')
    #define.Separator(',')
    #define.DoubleQuote('"')

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    [SuppressBPWarningAttribute("BPCheckNestedLoopinCode","Necessary to allow the processing of every invoice(inner loop) for every relevant parent file detail record(outer loop)")]
    protected void formatStructure()
    {        
        SKS_EFT_FileDetail invSKS_EFT_FileDetail;

        // Get SKS_EFT_Bank
        this.getSKS_EFT_Bank();

        while(mSKS_EFT_FileDetail)
        {
            // Get SKS_EFT_FileFormatPaymSpec
            this.getSKS_EFT_FileFormatPaymSpec();            

            // Get SKS_EFT_VendorPaym
            this.getSKS_EFT_VendorPaym();

            // Get RemittanceAddress
            this.getRemittanceAddress(mSKS_EFT_FileFormatPaymSpec.UseCheckNumber);

            // Details
            while select invSKS_EFT_FileDetail where invSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId
            {
                this.rec_Details(invSKS_EFT_FileDetail);
            }
            next mSKS_EFT_FileDetail;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Details</Name>
				<Source><![CDATA[
    public boolean rec_Details(SKS_EFT_FileDetail _invSKS_EFT_FileDetail)
    {
        //------------------------------------------------
        //Nbr   Description                         Length
        // 1    Check/Payment Number                    10
        // 2    Check/Payment Amount                    14
        // 3    Vendor ID                               15
        // 4    Vendor Name                             50
        // 5    Vendor Address 1                        50
        // 6    Vendor Address 2                        50
        // 7    Vendor City                             50
        // 8    Vendor State                            2
        // 9    Vendor Zip                              10
        //10    Check/Payment Date                      10
        //11    Invoice Amount                          11
        //12    Invoice Discount Amount                 11
        //13    Invoice Net Amount                      11
        //14    Negative Amount Indicator(s)            1
        //15    Invoice Date                            10
        //16    Invoice Due Date                        10
        //17    Invoice Number                          15
        //18    Voucher Number                          17
        //19    Invoice Comments                        60
        //20    Payment Type Indicator                  1
        //21    Vendor Bank Acct Number                 13
        //22    Vendor IBAN                             34
        //23    Vendor Bank Transit Number              9
        //24    Vendor BIC/SWIFT Code                   11
        //25    Vendor Email Address                    50
        //26    Vendor Email Address 2                  50
        //27    Void Indicator                          10
        //28    Overflow Indicator                      1
        //29    Bank Account Indicator                  10
        //------------------------------------------------
        SKS_EB_Vendor       sks_eb_Vendor;
        str                 payIndc;
        container           locPrimaryEmail;
        DirPartyContactInfoview mDirPartyContactInfoview;

        System.Text.StringBuilder sb = new System.Text.StringBuilder();

        //get sks_eb_Vendor
        sks_eb_Vendor = SKS_EB_Vendor::find(mSKS_EFT_FileDetail.AccountCompany, mSKS_EFT_FileDetail.AccountNum);

        // 1    Check/Payment Number
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.PaymentReference, 10, true));

        // 2    Check/Payment Amount
        sb.Append(this.wrapField(num2str((this.getPositiveAmount(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur)), 0, 2, 0, 0), 14, true));

        // 3    Vendor ID
        sb.Append(this.wrapField(mSKS_EFT_VendorPaym.VendAccount, 15, true));
    
        // 4    Vendor Name
        sb.Append(this.wrapField(mRemittanceName, 50, true, true));

        // 5    Vendor Address 1
        sb.Append(this.wrapField(mRemittanceAdrLine1, 50, true, true));

        // 6    Vendor Address 2
        sb.Append(this.wrapField(mRemittanceAdrLine2, 50, true, true));

        // 7    Vendor City
        sb.Append(this.wrapField(mRemittanceCity, 50, true, true));

        // 8    Vendor State
        sb.Append(this.wrapField(mRemittanceState, 2, true, true));

        // 9    Vendor Zip
        sb.Append(this.wrapField(mRemittanceZipCode, 11, true));

        //10    Check/Payment Date
        sb.Append(this.wrapField(SKS_PP_StringFormats::strDateMMDDYYYY(mSKS_EFT_FileDetail.PaymentTransDate, DateSeparator::Slash), 10, true));

        //11    Invoice Amount
        sb.Append(this.wrapField(num2str((this.getPositiveAmount(_invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur + _invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur)), 0, 2, 0, 0), 11, true));

        //12    Invoice Discount Amount
        sb.Append(this.wrapField(num2str((this.getPositiveAmount(_invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur)), 0, 2, 0, 0), 11, true));

        //13    Invoice Net Amount
        sb.Append(this.wrapField(num2str((this.getPositiveAmount(_invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur)), 0, 2, 0, 0), 11, true));

        //14    Negative Amount Indicator(s)
        if(_invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur > 0)
        {
            sb.Append(this.wrapField('-', 0, true));
        }
        else
        {
            sb.Append(this.wrapField('', 0, true));
        }

        //15    Invoice Date
        sb.Append(this.wrapField(SKS_PP_StringFormats::strDateMMDDYYYY(_invSKS_EFT_FileDetail.InvoiceDate, DateSeparator::Slash), 10, true));

        //16    Invoice Due Date
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #VCard)
        {
            sb.Append(this.wrapField(SKS_PP_StringFormats::strDateMMDDYYYY(mSKS_EFT_File.EffectiveDate ? mSKS_EFT_File.EffectiveDate : _invSKS_EFT_FileDetail.InvoiceDate, DateSeparator::Slash), 10, true));
        }
        else
        {
            sb.Append(this.wrapField('', 0, true));
        }

        //17    Invoice Number
        sb.Append(this.wrapField(this.CharacterReplacement(_invSKS_EFT_FileDetail.InvoiceNumber), 15, true));

        //18    Voucher Number
        sb.Append(this.wrapField('', 0, true));

        //19    Invoice Comments
        sb.Append(this.wrapField(this.CharacterReplacement(_invSKS_EFT_FileDetail.InvoiceTransactionTxt), 60, true, true));

        //20    Payment Type Indicator
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #ACH:
                payIndc = '1';
                break;
            case #VCard:
                payIndc = '3';
                break;
            case #OSC:
                payIndc = '5';
                break;
            case #WIRE:
                payIndc = '4';
                break;
            case #INTRNAL:      //SKS#DevOps:16165
                payIndc = 'I';
                break;
            case #OVERNIGHT:    //SKS#DevOps:16165
                payIndc = 'O';
                break;
            default:
                payIndc = '';
                break;
        }
        sb.Append(this.wrapField(payIndc, 0, true));

        //21    Vendor Bank Acct Number
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #ACH)
        {
            sb.Append(this.wrapField(mSKS_EFT_FileDetail.DepBankAcct, 25, true));
        }
        else
        {
            sb.Append(this.wrapField('', 0, true));
        }

        //22    Vendor IBAN
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #WIRE)
        {
            sb.Append(this.wrapField(mSKS_EFT_FileDetail.DepBankIBAN, 34, true));
        }
        else
        {
            sb.Append(this.wrapField('', 0, true));
        }

        //23    Vendor Bank Transit Number
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #ACH)
        {
            sb.Append(this.wrapField(mSKS_EFT_FileDetail.DepBankTransit, 9, true));
        }
        else
        {
            sb.Append(this.wrapField('', 0, true));
        }

        //24    Vendor BIC/SWIFT Code
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #WIRE)
        {
            sb.Append(this.wrapField(mSKS_EFT_FileDetail.DepSwiftNo, 11, true));
        }
        else
        {
            sb.Append(this.wrapField('', 0, true));
        }

        locPrimaryEmail = SKS_EFT_VendorLoad::primaryEmail(mSKS_EFT_VendorPaym.VendCompany, mSKS_EFT_VendorPaym.VendAccount, mSKS_EFT_VendorPaym.WBeneRemittanceLocation);
        mDirPartyContactInfoview = conPeek(locPrimaryEmail,2);      //SKS#DevOps:16332

        //25    Vendor Email Address
        if((mSKS_EFT_FileFormatPaymSpec.TransactionCode == #ACH    ||
            mSKS_EFT_FileFormatPaymSpec.TransactionCode == #VCard) &&
            mDirPartyContactInfoview.Locator)                   //SKS#DevOps:16332
        {
            sb.Append(this.wrapField(mDirPartyContactInfoview.Locator, 50, true, true));
        }
        else
        {
            sb.Append(this.wrapField('', 0, true));
        }

        //26    Vendor Email Address2
        sb.Append(this.wrapField('', 0, true));

        //27    Void Indicator
        sb.Append(this.wrapField('', 0, true));

        //28    Overflow Indicator
        sb.Append(this.wrapField('', 0, true));

        //29    Bank Account Indicator
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.BankBankAcct, 10));

        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wrapField</Name>
				<Source><![CDATA[
    private str wrapField(str _field = '', int _fieldLength = 0, boolean _addSeparator = false, boolean isComma = false)
    {
        str text;
        ;

        if(_fieldLength > 0)
        {
            text = subStr(_field, 1, _fieldLength);
        }
        else
        {
            text = _field;
        }
        if(isComma && text != '')
        {
            if(strContains(text, ','))
            {
                text = #DoubleQuote + text + #DoubleQuote;
            }
        }
        if(_addSeparator)
        {
            text += #Separator;
        }
        return text;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>