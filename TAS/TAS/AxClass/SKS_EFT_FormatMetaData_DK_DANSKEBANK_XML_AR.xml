<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_FormatMetaData_DK_DANSKEBANK_XML_AR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_FormatMetaData_DK_DANSKEBANK_XML_AR Extends SKS_EFT_Format_MetaData
/// </summary>
public class SKS_EFT_FormatMetaData_DK_DANSKEBANK_XML_AR Extends SKS_EFT_Format_MetaData
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        productVersion = '';
        formatGroupVersion = '20220912';
        dataContractVersion = '1.0';
        conFormatID = ['DK-DANSKEBANK-XML-AR','DK-DANSKEBANK-XML-FI-AR','DK-DANSKEBANK-XML-UK-AR'];
        formatfiletype = 'EFT';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFormatFileType</Name>
				<Source><![CDATA[
    protected str getFormatFileType()
    {
        return formatfiletype;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHeaderMetaData</Name>
				<Source><![CDATA[
    protected container getHeaderMetaData()
    {
        container   headerList;

        //Metadata column names of data elements
//ProductVersion,FormatGroupVersion,UseWithCustomer,UseWithVenodrs,UseWithBanktoBank,UsewithCustReimbursements,
//BeDesc01,BeDesc02,BeMask01,BeMask02,BlockFill,CompanyIdMask,CompanyIdTitle,CompanyNameTitle,CompanyNameMask,Crlf,Description,EffectiveDateOffset,EntryClassTitle,EntryClassMask,
//FormatId,FormatType,IMMDestMask,IMMDestTitle,IMMDestNameTitle,IMMDestNameMask,IMMOriginTitle,IMMOriginMask,IMMOriginNameTitle,IMMOriginNameMask,IncludeCpnyCredit,
//IncludeCpnyDebit,LastEffectiveDate,NextDailyReset,NextDailyResetDate,NextFileId,NextSequenceNumber,PreNote,RecordLength,Selected,TrimRecord,TwoFileNameAddition,
//WBank01Description,WBank01Mask,WBank01Required,WBank02Required,WBank02Mask,WBank02Description,WBank03Required,WBank03Mask,WBank03Description,WBank04Required,WBank04Mask,
//WBank04Description,PreNoteDays,EDI,PayDateIsEffDate,ARDateOffset,UseAddenda,MastAcctList,FormatGroup,MultiEffectiveDates,SupportsMultiCompany,ExternalFormat,FundTransferType

        headerList = ConIns(headerList,conLen(headerList)+1,[productVersion,formatGroupVersion,1,0,0,0,'','','','',0,'','','Company Name','',1,'DK - Danske Bank - SEPA Direct Debit - pain008.001.02',0,'','','DK-DANSKEBANK-XML-AR',1,'','','','','','','','',0,0,'0.00.00',0,'0.00.00',1,1,0,0,0,0,'','','',0,0,'','',0,'','',0,'','',0,0,0,0,0,0,'DK-DANSKEBANK-XML-AR',1,0,0]);
        headerList = ConIns(headerList,conLen(headerList)+1,[productVersion,formatGroupVersion,1,0,0,0,'','','','',0,'','','Company Name','',1,'DK-Danske Bank-Finland-SEPA Direct Debit-pain008.001.02',0,'','','DK-DANSKEBANK-XML-FI-AR',1,'','','','','','','','',0,0,'0.00.00',0,'0.00.00',1,1,0,0,0,0,'','','',0,0,'','',0,'','',0,'','',0,0,0,0,0,0,'DK-DANSKEBANK-XML-AR',1,0,0]);
        headerList = ConIns(headerList,conLen(headerList)+1,[productVersion,formatGroupVersion,1,0,0,0,'','','','',0,'','','Company Name','',1,'DK-DanskeBank-UnitedKingdom-SEPA Direct Debit-pain008.001.02',0,'','','DK-DANSKEBANK-XML-UK-AR',1,'','','','','','','','',0,0,'0.00.00',0,'0.00.00',1,1,0,0,0,0,'','','',0,0,'','',0,'','',0,'','',0,0,0,0,0,0,'DK-DANSKEBANK-XML-AR',1,0,0]);

        return headerList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymSpecsMetaData</Name>
				<Source><![CDATA[
    protected container getPaymSpecsMetaData(str _formatID)
    {
        container   paymSpecList;

        //Metadata column names of data elements
//BARoutingReqd,VBAAccountReqd,VBASwiftReqd,VBAIBANReqd,ARPaymSpecName,BEBeneBankAcctReqd,BE01Reqd,BE02Reqd,BE01Use,BE02Use,PaymSpecFileDescr,RecordSummary,TransactionCode,
        //EmailNote,PaymSpec,PaymSpecName,FilterSeparateFile,FormatId,Selected,CpnyIDNameReq,EmailOff,VendorUse,WireTabs,SamePaymentDate,SelectByPaymentDate,PreNote,TxnNacha,UseCheckNumber,
        //UseWithCustomers,UseWithVendors,EDI,UseWithBanktoBank,FundTransferType,UseWithCustomerReimbursement,InvoiceDetail,RemitAvailability,RemitType,APNameType,APAddressType
        //DDNameType,DDAddressType,CRNameType,CRAddressType

        switch (_formatID)
        {
            case ('DK-DANSKEBANK-XML-AR'):
                paymSpecList = this.getPaymSpecsMetaData_DK_DANSKEBANK_XML_AR();
                break;

            case ('DK-DANSKEBANK-XML-FI-AR'):
                paymSpecList = this.getPaymSpecsMetaData_DK_DANSKEBANK_XML_FI_AR();
                break;

            case ('DK-DANSKEBANK-XML-UK-AR'):
                paymSpecList = this.getPaymSpecsMetaData_DK_DANSKEBANK_XML_UK_AR();
                break;

        }

        return paymSpecList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymSpecsMetaData_DK_DANSKEBANK_XML_AR</Name>
				<Source><![CDATA[
    private container getPaymSpecsMetaData_DK_DANSKEBANK_XML_AR()
    {
        container   paymSpecList;

        paymSpecList = ConIns(paymSpecList,conLen(paymSpecList)+1,[0,0,0,0,'DIRECT PAY',0,0,0,0,0,'SEPA Direct Debit Initiation',1,'SEPA','','SEPA','',0,'DK-DANSKEBANK-XML-AR',0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,1,2,0,0]);

        return paymSpecList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymSpecsMetaData_DK_DANSKEBANK_XML_FI_AR</Name>
				<Source><![CDATA[
    private container getPaymSpecsMetaData_DK_DANSKEBANK_XML_FI_AR()
    {
        container   paymSpecList;

        paymSpecList = ConIns(paymSpecList,conLen(paymSpecList)+1,[0,0,0,0,'DIRECT PAY',0,0,0,0,0,'SEPA Direct Debit Initiation',1,'SEPA','','SEPA','',0,'DK-DANSKEBANK-XML-FI-AR',0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,1,2,0,0]);

        return paymSpecList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymSpecsMetaData_DK_DANSKEBANK_XML_UK_AR</Name>
				<Source><![CDATA[
    private container getPaymSpecsMetaData_DK_DANSKEBANK_XML_UK_AR()
    {
        container   paymSpecList;

        paymSpecList = ConIns(paymSpecList,conLen(paymSpecList)+1,[0,0,0,0,'DIRECT PAY',0,0,0,0,0,'SEPA Direct Debit Initiation',1,'SEPA','','SEPA','',0,'DK-DANSKEBANK-XML-UK-AR',0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,1,2,0,0]);

        return paymSpecList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getNotesMetaData</Name>
				<Source><![CDATA[
    protected container getNotesMetaData(str _formatID)
    {
        container   notesList;

        //Metadata column names of data elements
//FormatId,PaymSpec,Note

        switch (_formatID)
        {
            case ('DK-DANSKEBANK-XML-AR'):
                notesList = this.getNotesMetaData_DK_DANSKEBANK_XML_AR();
                break;

            case ('DK-DANSKEBANK-XML-FI-AR'):
                notesList = this.getNotesMetaData_DK_DANSKEBANK_XML_FI_AR();
                break;

            case ('DK-DANSKEBANK-XML-UK-AR'):
                notesList = this.getNotesMetaData_DK_DANSKEBANK_XML_UK_AR();
                break;

        }

        return notesList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getNotesMetaData_DK_DANSKEBANK_XML_AR</Name>
				<Source><![CDATA[
    private container getNotesMetaData_DK_DANSKEBANK_XML_AR()
    {
        container   notesList;

        notesList = ConIns(notesList,conLen(notesList)+1,['DK-DANSKEBANK-XML-AR','SEPA','-For addresses you must add Direct Debit purpose in Address and contact information purpose form in Organization administration.:--Address will print, only if the Purpose of the address is mentioned as Direct Debit. Otherwise address will be ignored.::-Group Header > Initiating Party Name stored in Organization administration > Setup > Organization > Legal entities > Name field::-Accounts receivables > All Customers > Select Customer > Direct debit mandates (fast tab):--Sequence type is stored in the Payment frequency field.:--Mandate Id is stored in the Mandate ID field.:--Signature date is stored in the Singnature date field.']);

        return notesList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getNotesMetaData_DK_DANSKEBANK_XML_FI_AR</Name>
				<Source><![CDATA[
    private container getNotesMetaData_DK_DANSKEBANK_XML_FI_AR()
    {
        container   notesList;

        notesList = ConIns(notesList,conLen(notesList)+1,['DK-DANSKEBANK-XML-FI-AR','SEPA','-For addresses you must add Direct Debit purpose in Address and contact information purpose form in Organization administration.:--Address will print, only if the Purpose of the address is mentioned as Direct Debit. Otherwise address will be ignored.::-Group Header > Initiating Party Name stored in Organization administration > Setup > Organization > Legal entities > Name field::-Accounts receivables > All Customers > Select Customer > Direct debit mandates (fast tab):--Sequence type is stored in the Payment frequency field.:--Mandate Id is stored in the Mandate ID field.:--Signature date is stored in the Singnature date field.']);

        return notesList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getNotesMetaData_DK_DANSKEBANK_XML_UK_AR</Name>
				<Source><![CDATA[
    private container getNotesMetaData_DK_DANSKEBANK_XML_UK_AR()
    {
        container   notesList;

        notesList = ConIns(notesList,conLen(notesList)+1,['DK-DANSKEBANK-XML-UK-AR','SEPA','-For addresses you must add Direct Debit purpose in Address and contact information purpose form in Organization administration.:--Address will print, only if the Purpose of the address is mentioned as Direct Debit. Otherwise address will be ignored.::-Group Header > Initiating Party Name stored in Organization administration > Setup > Organization > Legal entities > Name field::-Accounts receivables > All Customers > Select Customer > Direct debit mandates (fast tab):--Sequence type is stored in the Payment frequency field.:--Mandate Id is stored in the Mandate ID field.:--Signature date is stored in the Singnature date field.']);

        return notesList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getValidationsMetaData</Name>
				<Source><![CDATA[
    protected container getValidationsMetaData(str _formatID)
    {
        container   validationsList;

        //Metadata column names of data elements
//FormatId,PaymSpec,Id,SourceFieldDesc,SourceFieldLoc,TargetFieldLoc,Notes,SourceContext,SourceField,ISOCountrySpec,CountryContext,Required,LengthValidation,MinLength,MaxLength,UserUpdated,Module

        switch (_formatID)
        {
            case ('DK-DANSKEBANK-XML-AR'):
                validationsList = this.getValidationsMetaData_DK_DANSKEBANK_XML_AR();
                break;

            case ('DK-DANSKEBANK-XML-FI-AR'):
                validationsList = this.getValidationsMetaData_DK_DANSKEBANK_XML_FI_AR();
                break;

            case ('DK-DANSKEBANK-XML-UK-AR'):
                validationsList = this.getValidationsMetaData_DK_DANSKEBANK_XML_UK_AR();
                break;

        }

        return validationsList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getValidationsMetaData_DK_DANSKEBANK_XML_AR</Name>
				<Source><![CDATA[
    private container getValidationsMetaData_DK_DANSKEBANK_XML_AR()
    {
        container   validationsList;

        validationsList = ConIns(validationsList,conLen(validationsList)+1,['DK-DANSKEBANK-XML-AR','SEPA','','Bank Country','Organization administration > Setup > Organization > Legal entities > Address (fast tab) > edit > Country/region','PmtInf > Cdtr > PstlAdr > Ctry','Country related to Legal entity','17','CountryRegionId','','',0,1,0,0,0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['DK-DANSKEBANK-XML-AR','SEPA','','Bank Street','Organization administration > Setup > Organization > Legal entities > Address (fast tab) > edit > Street','PmtInf > Cdtr > PstlAdr > AdrLine','Address related to Legal entity','17','Street','','',0,1,0,0,0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['DK-DANSKEBANK-XML-AR','SEPA','','Bank Postal Code','Organization administration > Setup > Organization > Legal entities > Address (fast tab) > edit > Zip/postal code','PmtInf > Cdtr > PstlAdr > AdrLine','Address related to Legal entity','17','Zipcode','','',0,1,0,0,0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['DK-DANSKEBANK-XML-AR','SEPA','','Bank City','Organization administration > Setup > Organization > Legal entities > Address (fast tab) > edit > City','PmtInf > Cdtr > PstlAdr > AdrLine','Address related to Legal entity','17','City','','',0,1,0,0,0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['DK-DANSKEBANK-XML-AR','SEPA','','Bank State','Organization administration > Setup > Organization > Legal entities > Address (fast tab) > edit > State','PmtInf > Cdtr > PstlAdr > AdrLine','Address related to Legal entity','17','State','','',1,1,0,0,0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['DK-DANSKEBANK-XML-AR','SEPA','','IBAN','Cash and bank management > Select bank account > edit > Additional identification (fast tab)> IBAN','PmtInf > CdtrAcct > Id > IBAN','IBAN related to Bank',0,'IBAN','','',0,1,0,0,0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['DK-DANSKEBANK-XML-AR','SEPA','','Bank Swift number','Cash and bank management > Select bank account > edit > Additional identification (fast tab) > Swift No','PmtInf > CdtrAgt >  FinInstnId > BIC','Swift code related to Bank',0,'SWIFTNo','','',0,1,0,0,0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['DK-DANSKEBANK-XML-AR','SEPA','','Direct debit ID','Cash and bank management > Select bank account > edit > Additional identification (fast tab)> Direct debit ID','PmtInf > CdtrSchmeId > Id > PrvtId > Othr > Id','Direct debit ID related to Bank',0,'DebitDirectId','','',0,1,0,0,0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['DK-DANSKEBANK-XML-AR','SEPA','','Customer Bank Swift number','TAS > Common > Customer eBanking details> Customer bank accounts > General tab > Additional identification (fast tab) > Swift No','PmtInf > DrctDbtTxInf > DbtrAgt >  FinInstnId > BIC','Swift code related to Customer',1,'SWIFTNo','','',0,1,0,0,0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['DK-DANSKEBANK-XML-AR','SEPA','','Name','Accounts receivables > All customers > Select a customer > General (Fast tab) > Name','PmtInf > DrctDbtTxInf > Dbtr > Nm','Name related to customer','5','Name','','',0,0,1,'70',0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['DK-DANSKEBANK-XML-AR','SEPA','','Customer Country','Accounts receivables > All customers > Select a customer > Address (fast tab) > edit > Country/region','PmtInf > DrctDbtTxInf > Dbtr > PstlAdr > Ctry','Country related to Legal entity','2','CountryRegionId','','',0,1,0,0,0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['DK-DANSKEBANK-XML-AR','SEPA','','Customer street','Accounts receivables > All customers > Select a customer > Address (fast tab) > edit > Street','PmtInf > DrctDbtTxInf > Dbtr > PstlAdr > AdrLine','Address related to Legal entity','2','Street','','',0,1,0,0,0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['DK-DANSKEBANK-XML-AR','SEPA','','Customer postal code','Accounts receivables > All customers > Select a customer > Address (fast tab) > edit > Zip/postal code','PmtInf > DrctDbtTxInf > Dbtr > PstlAdr > AdrLine','Address related to Legal entity','2','Zipcode','','',0,1,0,0,0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['DK-DANSKEBANK-XML-AR','SEPA','','Customer city','Accounts receivables > All customers > Select a customer > Address (fast tab) > edit > City','PmtInf > DrctDbtTxInf > Dbtr > PstlAdr > AdrLine','Address related to Legal entity','2','City','','',0,1,0,0,0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['DK-DANSKEBANK-XML-AR','SEPA','','Customer bank IBAN number','TAS > Common > Customer eBanking details > Customer bank accounts > General tab > Additional identification (fast tab)> IBAN','PmtInf > DrctDbtTxInf > DbtrAcct > Id > IBAN','IBAN related to customer',1,'BankIBAN','','',0,1,0,0,0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['DK-DANSKEBANK-XML-AR','SEPA','','Customer Invoice Number','AR > Journal> Payments > Payment Journal> New > Lines > Overview Tab > Invoice','PmtInf > DrctDbtTxInf > RmtInf > Ustrd','Customer Invoice Number','7','Invoice','','',1,'2','','140',0,1]);

        return validationsList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getValidationsMetaData_DK_DANSKEBANK_XML_FI_AR</Name>
				<Source><![CDATA[
    private container getValidationsMetaData_DK_DANSKEBANK_XML_FI_AR()
    {
        container   validationsList;

        validationsList = ConIns(validationsList,conLen(validationsList)+1,['DK-DANSKEBANK-XML-FI-AR','SEPA','','Bank Country','Organization administration > Setup > Organization > Legal entities > Address (fast tab) > edit > Country/region','PmtInf > Cdtr > PstlAdr > Ctry','Country related to Legal entity','17','CountryRegionId','','',0,1,0,0,0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['DK-DANSKEBANK-XML-FI-AR','SEPA','','Bank Street','Organization administration > Setup > Organization > Legal entities > Address (fast tab) > edit > Street','PmtInf > Cdtr > PstlAdr > AdrLine','Address related to Legal entity','17','Street','','',0,1,0,0,0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['DK-DANSKEBANK-XML-FI-AR','SEPA','','Bank Postal Code','Organization administration > Setup > Organization > Legal entities > Address (fast tab) > edit > Zip/postal code','PmtInf > Cdtr > PstlAdr > AdrLine','Address related to Legal entity','17','Zipcode','','',0,1,0,0,0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['DK-DANSKEBANK-XML-FI-AR','SEPA','','Bank City','Organization administration > Setup > Organization > Legal entities > Address (fast tab) > edit > City','PmtInf > Cdtr > PstlAdr > AdrLine','Address related to Legal entity','17','City','','',0,1,0,0,0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['DK-DANSKEBANK-XML-FI-AR','SEPA','','Bank State','Organization administration > Setup > Organization > Legal entities > Address (fast tab) > edit > State','PmtInf > Cdtr > PstlAdr > AdrLine','Address related to Legal entity','17','State','','',1,1,0,0,0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['DK-DANSKEBANK-XML-FI-AR','SEPA','','IBAN','Cash and bank management > Select bank account > edit > Additional identification (fast tab)> IBAN','PmtInf > CdtrAcct > Id > IBAN','IBAN related to Bank',0,'IBAN','','',0,1,0,0,0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['DK-DANSKEBANK-XML-FI-AR','SEPA','','Swift number','Cash and bank management > Select bank account > edit > Additional identification (fast tab) > Swift No','PmtInf > CdtrAgt >  FinInstnId > BIC','Swift code related to Bank',0,'SWIFTNo','','','3',1,0,0,0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['DK-DANSKEBANK-XML-FI-AR','SEPA','','Direct debit ID','Cash and bank management > Select bank account > edit > Additional identification (fast tab)> Direct debit ID','PmtInf > CdtrSchmeId > Id > PrvtId > Othr > Id','Direct debit ID related to Bank',0,'DebitDirectId','','',0,1,0,0,0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['DK-DANSKEBANK-XML-FI-AR','SEPA','','Swift number','TAS > Common > Customer eBanking details> Customer bank accounts > General tab > Additional identification (fast tab) > Swift No','PmtInf > DrctDbtTxInf > DbtrAgt >  FinInstnId > BIC','Swift code related to Customer',1,'SWIFTNo','','','3',1,0,0,0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['DK-DANSKEBANK-XML-FI-AR','SEPA','','Name','Accounts receivables > All customers > Select a customer > General (Fast tab) > Name','PmtInf > DrctDbtTxInf > Dbtr > Nm','Name related to customer','5','Name','','',0,0,1,'70',0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['DK-DANSKEBANK-XML-FI-AR','SEPA','','Country/region','Accounts receivables > All customers > Select a customer > Address (fast tab) > edit > Country/region','PmtInf > DrctDbtTxInf > Dbtr > PstlAdr > Ctry','Country related to Legal entity','2','CountryRegionId','','',0,1,0,0,0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['DK-DANSKEBANK-XML-FI-AR','SEPA','','Zip/postal code','Accounts receivables > All customers > Select a customer > Address (fast tab) > edit > Zip/postal code','PmtInf > DrctDbtTxInf > Dbtr > PstlAdr > AdrLine','Address related to Legal entity','2','Zipcode','','',0,1,0,0,0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['DK-DANSKEBANK-XML-FI-AR','SEPA','','Street','Accounts receivables > All customers > Select a customer > Address (fast tab) > edit > Street','PmtInf > DrctDbtTxInf > Dbtr > PstlAdr > AdrLine','Address related to Legal entity','2','Street','','',0,1,0,0,0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['DK-DANSKEBANK-XML-FI-AR','SEPA','','City','Accounts receivables > All customers > Select a customer > Address (fast tab) > edit > City','PmtInf > DrctDbtTxInf > Dbtr > PstlAdr > AdrLine','Address related to Legal entity','2','City','','',0,1,0,0,0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['DK-DANSKEBANK-XML-FI-AR','SEPA','','IBAN','TAS > Common > Customer eBanking details > Customer bank accounts > General tab > Additional identification (fast tab)> IBAN','PmtInf > DrctDbtTxInf > DbtrAcct > Id > IBAN','IBAN related to customer',1,'BankIBAN','','',0,1,0,0,0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['DK-DANSKEBANK-XML-FI-AR','SEPA','','Invoice Number','AR > Journal> Payments > Payment Journal> New > Lines > Overview Tab > Invoice','PmtInf > DrctDbtTxInf > RmtInf > Ustrd','Customer Invoice Number','7','Invoice','','',1,'2','','140',0,1]);

        return validationsList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getValidationsMetaData_DK_DANSKEBANK_XML_UK_AR</Name>
				<Source><![CDATA[
    private container getValidationsMetaData_DK_DANSKEBANK_XML_UK_AR()
    {
        container   validationsList;

        validationsList = ConIns(validationsList,conLen(validationsList)+1,['DK-DANSKEBANK-XML-UK-AR','SEPA','','Bank Country','Organization administration > Setup > Organization > Legal entities > Address (fast tab) > edit > Country/region','PmtInf > Cdtr > PstlAdr > Ctry','Country related to Legal entity','17','CountryRegionId','','',0,1,0,0,0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['DK-DANSKEBANK-XML-UK-AR','SEPA','','Bank Street','Organization administration > Setup > Organization > Legal entities > Address (fast tab) > edit > Street','PmtInf > Cdtr > PstlAdr > AdrLine','Address related to Legal entity','17','Street','','',0,1,0,0,0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['DK-DANSKEBANK-XML-UK-AR','SEPA','','Bank Postal Code','Organization administration > Setup > Organization > Legal entities > Address (fast tab) > edit > Zip/postal code','PmtInf > Cdtr > PstlAdr > AdrLine','Address related to Legal entity','17','Zipcode','','',0,1,0,0,0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['DK-DANSKEBANK-XML-UK-AR','SEPA','','Bank City','Organization administration > Setup > Organization > Legal entities > Address (fast tab) > edit > City','PmtInf > Cdtr > PstlAdr > AdrLine','Address related to Legal entity','17','City','','',0,1,0,0,0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['DK-DANSKEBANK-XML-UK-AR','SEPA','','Bank State','Organization administration > Setup > Organization > Legal entities > Address (fast tab) > edit > State','PmtInf > Cdtr > PstlAdr > AdrLine','Address related to Legal entity','17','State','','',1,1,0,0,0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['DK-DANSKEBANK-XML-UK-AR','SEPA','','IBAN','Cash and bank management > Select bank account > edit > Additional identification (fast tab)> IBAN','PmtInf > CdtrAcct > Id > IBAN','IBAN related to Bank',0,'IBAN','','',0,1,0,0,0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['DK-DANSKEBANK-XML-UK-AR','SEPA','','Swift number','Cash and bank management > Select bank account > edit > Additional identification (fast tab) > Swift No','PmtInf > CdtrAgt >  FinInstnId > BIC','Swift code related to Bank',0,'SWIFTNo','','','3',1,0,0,0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['DK-DANSKEBANK-XML-UK-AR','SEPA','','Direct debit ID','Cash and bank management > Select bank account > edit > Additional identification (fast tab)> Direct debit ID','PmtInf > CdtrSchmeId > Id > PrvtId > Othr > Id','Direct debit ID related to Bank',0,'DebitDirectId','','',0,1,0,0,0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['DK-DANSKEBANK-XML-UK-AR','SEPA','','Swift number','TAS > Common > Customer eBanking details> Customer bank accounts > General tab > Additional identification (fast tab) > Swift No','PmtInf > DrctDbtTxInf > DbtrAgt >  FinInstnId > BIC','Swift code related to Customer',1,'SWIFTNo','','','3',1,0,0,0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['DK-DANSKEBANK-XML-UK-AR','SEPA','','Name','Accounts receivables > All customers > Select a customer > General (Fast tab) > Name','PmtInf > DrctDbtTxInf > Dbtr > Nm','Name related to customer','5','Name','','',0,0,1,'70',0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['DK-DANSKEBANK-XML-UK-AR','SEPA','','Country/region','Accounts receivables > All customers > Select a customer > Address (fast tab) > edit > Country/region','PmtInf > DrctDbtTxInf > Dbtr > PstlAdr > Ctry','Country related to Legal entity','2','CountryRegionId','','',0,1,0,0,0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['DK-DANSKEBANK-XML-UK-AR','SEPA','','Zip/postal code','Accounts receivables > All customers > Select a customer > Address (fast tab) > edit > Zip/postal code','PmtInf > DrctDbtTxInf > Dbtr > PstlAdr > AdrLine','Address related to Legal entity','2','Zipcode','','',0,1,0,0,0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['DK-DANSKEBANK-XML-UK-AR','SEPA','','Street','Accounts receivables > All customers > Select a customer > Address (fast tab) > edit > Street','PmtInf > DrctDbtTxInf > Dbtr > PstlAdr > AdrLine','Address related to Legal entity','2','Street','','',0,1,0,0,0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['DK-DANSKEBANK-XML-UK-AR','SEPA','','City','Accounts receivables > All customers > Select a customer > Address (fast tab) > edit > City','PmtInf > DrctDbtTxInf > Dbtr > PstlAdr > AdrLine','Address related to Legal entity','2','City','','',0,1,0,0,0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['DK-DANSKEBANK-XML-UK-AR','SEPA','','IBAN','TAS > Common > Customer eBanking details > Customer bank accounts > General tab > Additional identification (fast tab)> IBAN','PmtInf > DrctDbtTxInf > DbtrAcct > Id > IBAN','IBAN related to customer',1,'BankIBAN','','',0,1,0,0,0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['DK-DANSKEBANK-XML-UK-AR','SEPA','','Invoice Number','AR > Journal> Payments > Payment Journal> New > Lines > Overview Tab > Invoice','PmtInf > DrctDbtTxInf > RmtInf > Ustrd','Customer Invoice Number','7','Invoice','','',1,'2','','140',0,1]);

        return validationsList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getCodeLookupMetaData</Name>
				<Source><![CDATA[
    protected container getCodeLookupMetaData()
    {
        container   codeLookupList;

        //Metadata column names of data elements
//FormatGroup,CodeID,Description

        return codeLookupList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getCodeLookupValuesMetaData</Name>
				<Source><![CDATA[
    protected container getCodeLookupValuesMetaData()
    {
        container   codeLookupValuesList;

        //Metadata column names of data elements
//FormatGroup,CodeID,Display Value,CodeValue

        return codeLookupValuesList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymSpecFieldsMetaData</Name>
				<Source><![CDATA[
    protected container getPaymSpecFieldsMetaData(str _formatID)
    {
        container   paymSpecFieldsList;

        //Metadata column names of data elements
//FormatGroup,FormatID,PaymentSpec,FormatFieldID,Description,FieldType,CodeID,DefaultValue,Required,FixedValue,FixedValueMask,TechNotes

        switch (_formatID)
        {
        }

        return paymSpecFieldsList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getControlFormatMetaData</Name>
				<Source><![CDATA[
    protected container getControlFormatMetaData(str _formatID)
    {
        container   ControlFormatList;

        //Metadata column names of data elements
//FileFormatID,ControlFileFormatID,ControlFileDescription

        switch (_formatID)
        {
        }

        return ControlFormatList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getDeleteMetaData</Name>
				<Source><![CDATA[
    protected container getDeleteMetaData()
    {
        container   deleteList;

        //FormatGroup, FormatId, DetailType, KeyID1, KeyId2, KeyId3

        deleteList = ConIns(deleteList,conLen(deleteList)+1,['DK-DANSKEBANK-XML-AR','*','FormatValidations','*','15','W01']);
        deleteList = ConIns(deleteList,conLen(deleteList)+1,['DK-DANSKEBANK-XML-AR','*','FormatValidations','*','3','MarkedInvoice']);

        return deleteList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankCodeLookupMetaData</Name>
				<Source><![CDATA[
    protected container getBankCodeLookupMetaData()
    {
        container   codeLookupList;

        return codeLookupList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankCodeLookupValuesMetaData</Name>
				<Source><![CDATA[
    protected container getBankCodeLookupValuesMetaData()
    {
        container   codeLookupValuesList;

        return codeLookupValuesList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFileFormatFieldsMetaData</Name>
				<Source><![CDATA[
    protected container getFileFormatFieldsMetaData(str _formatID)
    {
        container   paymSpecFieldsList;

        switch (_formatID)
        {
            case ('DK-DANSKEBANK-XML-AR'):
                paymSpecFieldsList = this.getFileFormatFieldsMetaData_DK_DANSKEBANK_XML_AR();
                break;

            case ('DK-DANSKEBANK-XML-FI-AR'):
                paymSpecFieldsList = this.getFileFormatFieldsMetaData_DK_DANSKEBANK_XML_FI_AR();
                break;

            case ('DK-DANSKEBANK-XML-UK-AR'):
                paymSpecFieldsList = this.getFileFormatFieldsMetaData_DK_DANSKEBANK_XML_UK_AR();
                break;
        }

        return paymSpecFieldsList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFileFormatFieldsMetaData_DK_DANSKEBANK_XML_AR</Name>
				<Source><![CDATA[
    private container getFileFormatFieldsMetaData_DK_DANSKEBANK_XML_AR()
    {
        container   paymSpecFieldsList;

        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['DK-DANSKEBANK-XML-AR','DK-DANSKEBANK-XML-AR','ReturnFilePrefix','Return file name prefix',1,'ReturnFilePrefix','',0,'','XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX','GrpHdr > GrpHdr > Authstn > Prtry']);

        return paymSpecFieldsList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFileFormatFieldsMetaData_DK_DANSKEBANK_XML_FI_AR</Name>
				<Source><![CDATA[
    private container getFileFormatFieldsMetaData_DK_DANSKEBANK_XML_FI_AR()
    {
        container   paymSpecFieldsList;

        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['DK-DANSKEBANK-XML-AR','DK-DANSKEBANK-XML-FI-AR','ReturnFilePrefix','Return file name prefix',1,'ReturnFilePrefix','',0,'','XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX','GrpHdr > GrpHdr > Authstn > Prtry']);

        return paymSpecFieldsList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFileFormatFieldsMetaData_DK_DANSKEBANK_XML_UK_AR</Name>
				<Source><![CDATA[
    private container getFileFormatFieldsMetaData_DK_DANSKEBANK_XML_UK_AR()
    {
        container   paymSpecFieldsList;

        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['DK-DANSKEBANK-XML-AR','DK-DANSKEBANK-XML-UK-AR','Authstn','Authorisation',1,'Authstn','',0,'','XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX','GrpHdr > GrpHdr > Authstn > Prtry']);

        return paymSpecFieldsList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateARBankCodelookupValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updating the direct debit bank code lookpups from the W0X fields.
    /// </summary>
    protected void updateARBankCodelookupValues()
    {
        switch(gSKS_EFT_FileFormat.FormatId)
        {
            case ('DK-DANSKEBANK-XML-AR'):
            case ('DK-DANSKEBANK-XML-FI-AR'):
                if(gSKS_EFTAR_Bank.W01)
                {
                    this.updateARBankFields('ReturnFilePrefix', gSKS_EFTAR_Bank.W01);
                }
                break;
            case ('DK-DANSKEBANK-XML-UK-AR'):
                if(gSKS_EFTAR_Bank.W01)
                {
                    this.updateARBankFields('Authstn', gSKS_EFTAR_Bank.W01);
                }
                break;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>