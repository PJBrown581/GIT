<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_DimensionTest</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_DimensionTest
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the class with the specified arguments.
    /// </summary>
    /// <param name = "_args">The specified arguments.</param>
    public static void main(Args _args)
    {
        DimensionHierarchy          dimHierarchy;
        DimensionHierarchyLevel     dimHierarchyLevel;
        DimensionHierarchyId        dimHierarchyId;

        str dimStr = '401100-002-022--';

        //dimHierarchyId = DimensionHierarchy::getAccountStructure(MainAccount::findByMainAccountId('401100').RecId);

        //select firstonly dimHierarchy   
        //    where dimHierarchy.RecId == dimHierarchyId;

        //while select dimHierarchyLevel order by dimHierarchyLevel.Level asc
        //    where dimHierarchyLevel.DimensionHierarchy == dimHierarchy.RecId
        //{
        //    info (DimensionAttribute::find(dimHierarchyLevel.DimensionAttribute).name);
        //}

        //LedgerAccountDimensionResolver dr = LedgerAccountDimensionResolver::newResolver(dimStr, dimHierarchy.Name);

        //DimensionCombinationBase dimBase = dr.resolve();

        //Array                               acctDimAttrArray = new Array(Types::String);
        //Array                               acctDimArray     = new Array(Types::String);
        //DefaultDimensionIntegrationValues   defaultDimIntegrationValues;
        //DimensionDynamicAccountResolver     dimDynamicAccountResolver;

        //str segment = "MainAccount-Company-Department-CostCenter-ItemGroup";

        //acctDimAttrArray.value(1, "MainAccount");
        //acctDimAttrArray.value(2, "Company");
        //acctDimAttrArray.value(3, "Department");
        //acctDimAttrArray.value(4, "CostCenter");
        //acctDimAttrArray.value(5, "ItemGroup");

        //acctDimArray.value(1, "401100");
        //acctDimArray.value(2, "002");
        //acctDimArray.value(3, "022");
        //acctDimArray.value(4, "");
        //acctDimArray.value(5, "");

        //defaultDimIntegrationValues = DimensionResolver::getEntityDisplayValue(acctDimAttrArray, acctDimArray,
        //                                extendedTypeStr(DimensionDynamicAccount));
        //dimDynamicAccountResolver   = DimensionDynamicAccountResolver::newResolver(defaultDimIntegrationValues);

        //DimensionCombinationBase ledgerDim = dimDynamicAccountResolver.resolve();


        DimensionCombinationBase ledgerDim = SKS_DimensionTest::createLedgerDim(dimStr);

        info (strFmt ('%1', ledgerDim));
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLedgerDim</Name>
				<Source><![CDATA[
    public static DimensionCombinationBase createLedgerDim(str  _ledgerDim)
    {
        DimensionHierarchy          dimHierarchy;
        DimensionHierarchyLevel     dimHierarchyLevel;
        DimensionHierarchyId        dimHierarchyId;
        DimensionAttribute          dimAttribute;
        DimensionCombinationBase    ledgerDimension;
        container                   ledgerCon;
        DefaultDimensionIntegrationValues   defaultDimIntegrationValues;
        DimensionDynamicAccountResolver     dimDynamicAccountResolver;
        int                         accStructureLen = 0;
        Array                               acctDimAttrArray = new Array(Types::String);
        Array                               acctDimArray     = new Array(Types::String);

        ledgerCon = str2con(_ledgerDim, '-', false);

        if (conLen(ledgerCon) >= 1)
        {
            dimHierarchyId = DimensionHierarchy::getAccountStructure(MainAccount::findByMainAccountId(conPeek(ledgerCon, 1)).RecId);

            while select DimensionAttribute from dimHierarchyLevel order by dimHierarchyLevel.Level asc
                join Name from dimAttribute
                where   dimAttribute.RecId == dimHierarchyLevel.DimensionAttribute
                &&      dimHierarchyLevel.DimensionHierarchy == dimHierarchyId
            {
                accStructureLen ++;
                acctDimAttrArray.value(accStructureLen, dimAttribute.Name);
            }
        }

        if (accStructureLen)
        {
            int a;

            for (a = 1; a <= accStructureLen ; a++)
            {
                if (a > conLen (ledgerCon))
                {
                    acctDimArray.value(a, "");
                }
                else
                {
                    acctDimArray.value(a, conPeek(ledgerCon, a));
                }
            }

            defaultDimIntegrationValues = DimensionResolver::getEntityDisplayValue(acctDimAttrArray, acctDimArray, extendedTypeStr(DimensionDynamicAccount));
            dimDynamicAccountResolver   = DimensionDynamicAccountResolver::newResolver(defaultDimIntegrationValues);
 
            ledgerDimension = dimDynamicAccountResolver.resolve();
        }

        return ledgerDimension;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>