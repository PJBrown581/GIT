<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_US_TEXASFIRSTBANK_FEDLINE</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_US_TEXASFIRSTBANK_FEDLINE
/// </summary>
class SKS_EFT_Format_US_TEXASFIRSTBANK_FEDLINE  extends SKS_EFT_Format
{
    #define.FormatVersion('20221212')
    int transCount;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    protected void formatStructure()
    {
        while(mSKS_EFT_FileDetail)
        {
            // Get SKS_EFT_FileFormatPaymSpec
            this.getSKS_EFT_FileFormatPaymSpec();

            mSKS_EFT_FileDetail_BankAccount = SKS_EFT_FileDetail_BankAccount::find(mSKS_EFT_FileDetail.RecId);
            
            // Fund Transfer
            this.rec_Detail();

            next mSKS_EFT_FileDetail;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Detail</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_Detail
    /// </summary>
    /// <returns>true</returns>
    public boolean rec_Detail()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        str transTypeCode, businessFunCode, address;

        transCount++;

        //      INTERFACE-DATA         	            8	   
        sb.Append(SKS_PP_StringFormats::strFill(8, 'YFT811', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //{1500}SENDER- TAG	                        6 
        sb.Append('{1500}');

        //01    FORMAT-VERSION                           2
        sb.Append('30');

        //02    URC-DATA
        sb.Append(SKS_PP_StringFormats::strFill(8, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //03    TEST-PROD-CODE
        sb.Append('P');
        sb.Append(SKS_PP_StringFormats::strFill(1, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        
        //{1510}TYPE-SUBTYPE	                        6
        sb.Append('{1510}');

        //01    TYPE-CODE
        sb.Append('10');

        //02    SUBTYPE-CODE
        sb.Append('00');

        //{1520}IMAD-TAG
        sb.Append('{1520}');

        //01    INPUT-CYCLE-DATE
        sb.Append(SKS_PP_StringFormats::strDateYYYYMMDD(mSKS_EFT_FileDetail.EffectiveDate, DateSeparator::None));

        //02    INPUT-SOURCE
        sb.Append(SKS_PP_StringFormats::strFill(8, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //03    INPUT-SEQUENCE - NUMBER
        sb.Append(SKS_PP_StringFormats::strFill(6, num2Str(transCount, 0,0,0,0), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //{2000} AMOUNT-TAG
        sb.Append('{2000}');

        //01    AMOUNT
        sb.Append(SKS_PP_StringFormats::strMoney(-1 * mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur, 12));

        //{3100} SENDER-DI
        sb.Append('{3100}');

        //01    SENDER-DI-NUMBER
        sb.Append(SKS_PP_StringFormats::strFill(9, mSKS_EFT_FileDetail.BankBankTransit, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //{3320} SENDER-REFERENCE
        sb.Append('{3320}');
        sb.Append(subStr(mSKS_EFT_FileDetail.PaymentReference, 1, 16));
        sb.Append('*');

        //{3400} RECEIVER-DI
        sb.Append('{3400}');

        //01    RECEIVER-DI-NUMBER                  9
        sb.Append(SKS_PP_StringFormats::strFill(9, mSKS_EFT_FileDetail.DepBankTransit, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //02    RECEIVER-SHORT-NAME                 18
        sb.Append(this.CharacterReplacement(subStr(mSKS_EFT_FileDetail_VendAddress.BeneName, 1, 18)));
        sb.Append('*');

        //{3600} BUSINESS-FUNCTION-TAG
        sb.Append('{3600}');

        //01    BUSINESS-FUNCTION-CODE
        businessFunCode = SKS_EFT_Format::getCodelookupvalue('BusinessFunCode', mSKS_EFT_FileDetail.RecId);
        sb.Append(this.CharacterReplacement(businessFunCode));

        if(businessFunCode)
        {
            transTypeCode = SKS_EFT_Format::getCodelookupvalue('TransTypeCode', mSKS_EFT_FileDetail.RecId);
            sb.Append(this.CharacterReplacement(transTypeCode));
        }
        sb.Append('*');

        //{4200} BENEFICIARY
        sb.Append('{4200}');

        //01    BENEFICIARY-ID-CODE
        if(mSKS_EFT_FileDetail.DepBankAcct)
        {
            sb.Append('D');
            sb.Append(subStr(mSKS_EFT_FileDetail.DepBankAcct, 1, 34));            
        }
        sb.Append('*');

        if(mSKS_EFT_FileDetail_VendAddress.BeneName)
        {            
            sb.Append(subStr(this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneName), 1, 35));
        }
        sb.Append('*');

        if(mSKS_EFT_FileDetail_VendAddress.BeneAddr)
        {
            
            sb.Append(subStr(this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneAddr), 1, 35));
        }
        sb.Append('*');

        if(mSKS_EFT_FileDetail_VendAddress.BeneAddr2)
        {            
            sb.Append(subStr(this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneAddr2), 1, 35));
        }
        sb.Append('*');

        if(mSKS_EFT_FileDetail_VendAddress.BeneCity || mSKS_EFT_FileDetail_VendAddress.BeneState || mSKS_EFT_FileDetail_VendAddress.BeneZipPostal)
        {
            address = mSKS_EFT_FileDetail_VendAddress.BeneCity;

            if(mSKS_EFT_FileDetail_VendAddress.BeneState)
            {
                address += ',' + mSKS_EFT_FileDetail_VendAddress.BeneState;
            }
            if(mSKS_EFT_FileDetail_VendAddress.BeneZipPostal)
            {
                address += ',' + mSKS_EFT_FileDetail_VendAddress.BeneZipPostal;
            }            
        }
        sb.Append(subStr(this.CharacterReplacement(address), 1, 35));
        sb.Append('*');

        //{5000} ORIGINATOR
        if(mSKS_EFT_FileDetail.BankBankAcct)
        {
            sb.Append('{5000}');
            sb.Append(subStr(mSKS_EFT_FileDetail.BankBankAcct, 1, 34));
        }
        sb.Append('*');

        if(mSKS_EFT_FileDetail_BankAccount.WOrdPartyName)
        {
            sb.Append(subStr(this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyName), 1, 35));
        }
        sb.Append('*');

        if(mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr)
        {
            
            sb.Append(subStr(this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr), 1, 35));
        }
        sb.Append('*');

        if(mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr2)
        {
            sb.Append(subStr(this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr2), 1, 35));
        }
        sb.Append('*');

        if(mSKS_EFT_FileDetail_BankAccount.WOrdPartyCity || mSKS_EFT_FileDetail_BankAccount.WOrdPartyState || mSKS_EFT_FileDetail_BankAccount.WOrdPartyZipCode)
        {
            address = mSKS_EFT_FileDetail_BankAccount.WOrdPartyCity;

            if(mSKS_EFT_FileDetail_BankAccount.WOrdPartyState)
            {
                address += ',' + mSKS_EFT_FileDetail_BankAccount.WOrdPartyState;
            }
            if(mSKS_EFT_FileDetail_BankAccount.WOrdPartyZipCode)
            {
                address += ',' + mSKS_EFT_FileDetail_BankAccount.WOrdPartyZipCode;
            }
        }
        sb.Append(subStr(this.CharacterReplacement(address), 1, 35));
        sb.Append('*');
        
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectPaymentRecords</Name>
				<Source><![CDATA[
    [SuppressBPWarning('BPErrorSelectUsingFirstOnly', 'The buffer is used in next statement or in a datasource query loop.')]
    protected void selectPaymentRecords()
    {
        //------------------------------------------------------------------------------------------------------
        // Standard payment selction
        // Override if different selection is need for a format
        //------------------------------------------------------------------------------------------------------
    
        //Order by clause must match the clause in the SKS_EFT_Processing.SumByPayment
        select * from mSKS_EFT_FileDetail
            join mSKS_EFT_FileDetail_VendAddress
              order by mSKS_EFT_FileDetail.PaymentCompany,
                   mSKS_EFT_FileDetail.RecordSection,
                   mSKS_EFT_FileDetail.PaymMode,
                   mSKS_EFT_FileDetail.BankAccountId,
                   mSKS_EFT_FileDetail.PaymentCurrencyCode,
                   mSKS_EFT_FileDetail.PaymSpec,
                   mSKS_EFT_FileDetail.EffectiveDate,
                   mSKS_EFT_FileDetail.DepCountryRegionId,
                   mSKS_EFT_FileDetail.RecordType,
                   mSKS_EFT_FileDetail.AccountNum,
                   mSKS_EFT_FileDetail.PaymentReference,
                   mSKS_EFT_FileDetail.RecId
          where mSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                mSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                mSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_VendAddress.RefRecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>