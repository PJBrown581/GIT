<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_CC_PreAuthSalesOrderWaveStep</Name>
	<SourceCode>
		<Declaration><![CDATA[
[WHSWaveTemplateTypeFactoryAttribute(WHSWaveTemplateType::Shipping)]
class SKS_CC_PreAuthSalesOrderWaveStep extends WHSCustomWaveStepMethod
{
    public WHSWaveTable waveTable;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>process</Name>
				<Source><![CDATA[
    /// <summary>
    /// Process wave step method.
    /// </summary>
    /// <param name="_postEngine">
    /// A <c>WhsPostEngine</c> instance.
    /// </param>
    /// <returns>
    /// true if the processing was successful; otherwise, false.
    /// </returns>
    public boolean process(WhsPostEngine _postEngine)
    {
        waveTable = _postEngine.parmWaveTable();
        
        boolean curSOPreAuthResult;
        SKS_PP_Setup sKS_PP_SetupParm;
        WHSWaveLine whsWaveLineSKS;
        SalesTable salesTableSKS;
        boolean isValid = true;

        if (!waveTable.WaveId)
        {
            return true;
        }

        sKS_PP_SetupParm = SKS_PP_Setup::find();
        if (sKS_PP_SetupParm.ModCC == NoYes::No)
        {
            return true;
        }

        while select OrderNum from whsWaveLineSKS
            group by OrderNum
            where whsWaveLineSKS.WaveId == waveTable.WaveId
               && whsWaveLineSKS.WorkTransType == WHSWorkTransType::Sales
        {
            if (!whsWaveLineSKS.OrderNum)
            {
                continue;
            }

            salesTableSKS = SalesTable::find(whsWaveLineSKS.OrderNum);
            if (!salesTableSKS)
            {
                continue;
            }

            if (!salesTableSKS.isCreditCardPaymentType())
            {
                continue;
            }

            if (sKS_PP_SetupParm.CCSkipSONewAuthForPartialShip == NoYes::Yes &&               
                this.canInvoiceOrderFromCurrentSalesStatus_SKS(salesTableSKS) == NoYes::No)
            {
                continue;
            }
            
            curSOPreAuthResult = salesTableSKS.sKS_CC_CreditCardDoPreAuthorize(false);
            if (!curSOPreAuthResult)
            {
                error(strFmt("@SKS6649", salesTableSKS.SalesId, waveTable.WaveId));
                // Fail current wave if pre-authorization is declined or it fails.
                if (isValid && sKS_PP_SetupParm.CCFailWHSWaveWhenPreAuthDeclines == NoYes::Yes)
                {
                    isValid = false;
                    throw Error(strFmt("@SKS6649", salesTableSKS.SalesId, waveTable.WaveId));
                    //throw Exception::Error;
                }
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the method name to be displayed.
    /// </summary>
    /// <returns>
    /// The method name to be displayed.
    /// </returns>
    public Name displayName()
    {
        return 'SK Global credit card pre-authorize sales order';
    }

]]></Source>
			</Method>
			<Method>
				<Name>canInvoiceOrderFromCurrentSalesStatus_SKS</Name>
				<Source><![CDATA[
    private boolean canInvoiceOrderFromCurrentSalesStatus_SKS(SalesTable _salesTable)
    {
        switch (_salesTable.SalesStatus)
        {
            case SalesStatus::None:
            case SalesStatus::Backorder:
            case SalesStatus::Delivered:
                return true;
            default:
                return false;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>