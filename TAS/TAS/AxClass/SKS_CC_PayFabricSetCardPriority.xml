<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_CC_PayFabricSetCardPriority</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_CC_PayFabricSetCardPriority
{
    CreditCardCust      creditCardCustCaller;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmCreditCardCust</Name>
				<Source><![CDATA[
    public CreditCardCust parmCreditCardCust(CreditCardCust _creditCardCust = creditCardCustCaller)
    {
        creditCardCustCaller = _creditCardCust;
        return creditCardCustCaller;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCardPriority</Name>
				<Source><![CDATA[
    public void setCardPriority()
    {
        Dialog                          dialog;
        DialogField                     dialogField;
        SKS_CC_CardPriority             cardPriority;
        SKS_PP_Setup                    sksParms = SKS_PP_Setup::find();
        CreditCardCust                  creditCardCustCheck;

        dialog = new Dialog("@SKS6383");
        dialogfield = dialog.addField(extendedTypeStr(SKS_CC_CreditCardPriority));

        if (creditCardCustCaller.SKS_CC_CardPriority != SKS_CC_CardPriority::One)
        {
            dialogfield.value(creditCardCustCaller.SKS_CC_CardPriority);
        }

        if (dialog.run())
        {
            cardPriority = (dialogfield.value());
        }
        else
        {
            return;
        }

        if (cardPriority == SKS_CC_CardPriority::One)
        {
            if (sksParms.CCAllowDefaultCardToBeSet == NoYes::Yes)
            {
                throw error("@SKS6384");
            }
            else
            {
                throw error("@SKS6385");
            }
        }

        if (cardPriority != SKS_CC_CardPriority::None)
        {
            if (creditCardCustCaller.SKS_CC_OneTimeCustRefTableId && creditCardCustCaller.SKS_CC_OneTimeCustRefRecId)
            {
                select firstonly creditCardCustCheck
                    where creditCardCustCheck.SKS_CC_OneTimeCustRefTableId == creditCardCustCaller.SKS_CC_OneTimeCustRefTableId
                       && creditCardCustCheck.SKS_CC_OneTimeCustRefRecId == creditCardCustCaller.SKS_CC_OneTimeCustRefRecId
                       && creditCardCustCheck.CustAccount == creditCardCustCaller.CustAccount
                       && creditCardCustCheck.SKS_CC_CardPriority == cardPriority;
            }
            else
            {
                select firstonly creditCardCustCheck
                    where creditCardCustCheck.CustAccount == creditCardCustCaller.CustAccount
                       && creditCardCustCheck.SKS_CC_CardPriority == cardPriority;
            }

            if (creditCardCustCheck.RecId)
            {
                if (Box::yesNo(strFmt("@SKS6386", creditCardCustCheck.CardNumber, creditCardCustCheck.Name,
                                  creditCardCustCheck.CustAccount, enum2str(cardPriority), enum2str(SKS_CC_CardPriority::None)),
                           DialogButton::No,
                           "@SKS6387") == DialogButton::No)
                {
                    return;
                }
            }
        }

        try
        {
            ttsBegin;
            if (creditCardCustCheck)
            {
                creditCardCustCheck.selectForUpdate(true);
                creditCardCustCheck.SKS_CC_CardPriority = SKS_CC_CardPriority::None;
                creditCardCustCheck.update();
            }

            creditCardCustCaller.selectForUpdate(true);
            creditCardCustCaller.SKS_CC_CardPriority = cardPriority;
            creditCardCustCaller.update();
            ttsCommit;
        }
        catch (Exception::Error)
        {
            ttsAbort;
            throw error(strFmt("@SKS6381", creditCardCustCaller.CardNumber, creditCardCustCaller.Name));
        }

        info(strFmt("@SKS6382", cardPriority, creditCardCustCaller.CardNumber, creditCardCustCaller.Name));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefaultCard</Name>
				<Source><![CDATA[
    public void setDefaultCard()
    {
        Dialog      dialog;
        DialogText  dialogText;
        str         setOrUnsetDefaultStr = "@SKS6391";

        if (creditCardCustCaller.SKS_CC_DefaultCard == NoYes::Yes)
        {
            setOrUnsetDefaultStr = "@SKS6392";
        }

        dialog = new Dialog(strFmt("@SKS6388", setOrUnsetDefaultStr));
        dialogText = dialog.addText(strFmt("@SKS6389", strLwr(setOrUnsetDefaultStr), creditCardCustCaller.CustAccount));

        if (!dialog.run())
        {
            return;
        }

        SKS_CC_PayFabricSetCardPriority::updateDefaultCardForCustomer(creditCardCustCaller, true);

        info(strFmt("@SKS6390", creditCardCustCaller.CardNumber, creditCardCustCaller.Name,
                strLwr(setOrUnsetDefaultStr), creditCardCustCaller.CustAccount));

    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static SKS_CC_PayFabricSetCardPriority construct()
    {
        return new SKS_CC_PayFabricSetCardPriority();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    private static void main(Args _args)
    {
        SKS_CC_PayFabricSetCardPriority    setCardPriority;

        if (!_args || _args.dataset() != tableNum(CreditCardCust) || !_args.record())
        {
            throw error(strFmt("@SKS6394", formStr(CreditCardCust)));
        }

        setCardPriority = SKS_CC_PayFabricSetCardPriority::construct();
        setCardPriority.parmCreditCardCust(_args.record());

        if (_args.menuItemName() == menuitemActionStr(SKS_CC_PayFabricSetCardPriority))
        {
            setCardPriority.setCardPriority();
        }
        else if (_args.menuItemName() == menuitemActionStr(SKS_CC_PayFabricSetDefaultCard))
        {
            setCardPriority.setDefaultCard();
        }
        else
        {
            throw error(strFmt("@SKS6394", formStr(CreditCardCust)));
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>removeDefaultFromAnyOtherCard</Name>
				<Source><![CDATA[
    public static void removeDefaultFromAnyOtherCard(CreditCardCust _creditCardCust)
    {
        CreditCardCust      creditCardCustCheck;

        if (!_creditCardCust)
        {
            return;
        }

        if (_creditCardCust.SKS_CC_OneTimeCustRefTableId && _creditCardCust.SKS_CC_OneTimeCustRefRecId)
        {
            select firstonly creditCardCustCheck
                where creditCardCustCheck.SKS_CC_OneTimeCustRefTableId == _creditCardCust.SKS_CC_OneTimeCustRefTableId
                   && creditCardCustCheck.SKS_CC_OneTimeCustRefRecId == _creditCardCust.SKS_CC_OneTimeCustRefRecId
                   && creditCardCustCheck.CustAccount == _creditCardCust.CustAccount
                   && creditCardCustCheck.SKS_CC_DefaultCard == NoYes::Yes
                   && creditCardCustCheck.RecId != _creditCardCust.RecId;            
        }
        else
        {
            select firstonly creditCardCustCheck
                where creditCardCustCheck.CustAccount == _creditCardCust.CustAccount
                   && creditCardCustCheck.SKS_CC_DefaultCard == NoYes::Yes
                   && creditCardCustCheck.RecId != _creditCardCust.RecId;
        }

        if (creditCardCustCheck)
        {
            try
            {
                ttsBegin;
                creditCardCustCheck.selectForUpdate(true);
                creditCardCustCheck.SKS_CC_DefaultCard = NoYes::No;
                creditCardCustCheck.SKS_CC_CardPriority = SKS_CC_CardPriority::None;
                creditCardCustCheck.update();
                ttsCommit;
            }
            catch (Exception::Error)
            {
                ttsAbort;
                throw error(strFmt("@SKS6393", creditCardCustCheck.CardNumber, creditCardCustCheck.Name,
                                   creditCardCustCheck.CustAccount));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDefaultCardForCustomer</Name>
				<Source><![CDATA[
    public static void updateDefaultCardForCustomer(CreditCardCust _creditCardCust, boolean _needToUpdatePayFabric = false)
    {
        CreditCardCust                  creditCardCustCheck;
        str                             setOrUnsetDefaultStr;
        SKS_CC_PayFabricWalletHandler   pfWalletHandler;
        boolean                         pfUpdateDefaultCardResult;
        str                             errMsg;

        if (!_creditCardCust)
        {
            return;
        }

        if (_needToUpdatePayFabric)
        {
            errMsg = strFmt("@SKS6395", _creditCardCust.CardNumber, _creditCardCust.Name, _creditCardCust.CustAccount);
            try
            {
                pfWalletHandler = SKS_CC_PayFabricWalletHandler::construct();
                pfWalletHandler.parmCustAccount(_creditCardCust.CustAccount);
                if (_creditCardCust.SKS_CC_OneTimeCustRefTableId && _creditCardCust.SKS_CC_OneTimeCustRefRecId && SKS_PP_Setup::isCreditCardOneTimeCustLogicEnabled())
                {
                    pfWalletHandler.parmOneTimeCustRefTableId(_creditCardCust.SKS_CC_OneTimeCustRefTableId);
                    pfWalletHandler.parmOneTimeCustRefRecId(_creditCardCust.SKS_CC_OneTimeCustRefRecId);
                }
                pfWalletHandler.setPayFabricCustomerNbr();

                pfUpdateDefaultCardResult = pfWalletHandler.updateDefaultCardInPayFabricWallet(_creditCardCust.UniqueCardId, _creditCardCust.CardNumber, _creditCardCust.SKS_CC_DefaultCard);
            }
            catch
            {
                throw error(errMsg);
            }
        }
        else
        {
            pfUpdateDefaultCardResult = true;
        }

        if (pfUpdateDefaultCardResult)
        {
            _creditCardCust.reread();
            try
            {
                ttsBegin;
                if (_creditCardCust.SKS_CC_OneTimeCustRefTableId && _creditCardCust.SKS_CC_OneTimeCustRefRecId)
                {
                    select firstonly forUpdate creditCardCustCheck
                        where creditCardCustCheck.SKS_CC_OneTimeCustRefTableId == _creditCardCust.SKS_CC_OneTimeCustRefTableId
                           && creditCardCustCheck.SKS_CC_OneTimeCustRefRecId == _creditCardCust.SKS_CC_OneTimeCustRefRecId
                           && creditCardCustCheck.CustAccount == _creditCardCust.CustAccount
                           && creditCardCustCheck.SKS_CC_DefaultCard == NoYes::Yes
                           && creditCardCustCheck.RecId != _creditCardCust.RecId;
                }
                else
                {
                    select firstonly forUpdate creditCardCustCheck
                        where creditCardCustCheck.CustAccount == _creditCardCust.CustAccount
                           && creditCardCustCheck.SKS_CC_DefaultCard == NoYes::Yes
                           && creditCardCustCheck.RecId != _creditCardCust.RecId;
                }

                if (creditCardCustCheck)
                {
                    creditCardCustCheck.SKS_CC_DefaultCard = NoYes::No;
                    creditCardCustCheck.SKS_CC_CardPriority = SKS_CC_CardPriority::None;
                    creditCardCustCheck.update();
                }

                _creditCardCust.selectForUpdate(true);
                if (_creditCardCust.SKS_CC_DefaultCard == NoYes::Yes)
                {
                    _creditCardCust.SKS_CC_DefaultCard = NoYes::No;
                    _creditCardCust.SKS_CC_CardPriority = SKS_CC_CardPriority::None;
                    setOrUnsetDefaultStr = 'removing';
                }
                else
                {
                    _creditCardCust.SKS_CC_DefaultCard = NoYes::Yes;
                    _creditCardCust.SKS_CC_CardPriority = SKS_CC_CardPriority::One;
                    setOrUnsetDefaultStr = 'setting';
                }
                _creditCardCust.update();
                ttsCommit;
            }
            catch (Exception::Error)
            {
                ttsAbort;
                errMsg = strFmt("@SKS6396", setOrUnsetDefaultStr, _creditCardCust.CardNumber, _creditCardCust.Name, _creditCardCust.CustAccount);

                if (_needToUpdatePayFabric && pfUpdateDefaultCardResult)
                {
                    errMsg += '\n' + "@SKS6397";
                }

                throw error(errMsg);
            }
        }
        else
        {
            throw error(errMsg);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>