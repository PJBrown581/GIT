<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_DK_BANKCONNECT_SDC_XML</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_DK_BANKCONNECT_SDC_XML extends SKS_EFT_Format_DK_BANKCONNECT_XML
/// </summary>
class SKS_EFT_Format_DK_BANKCONNECT_SDC_XML extends SKS_EFT_Format_DK_BANKCONNECT_XML
{
    #define.FormatVersion('20220311')

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRemoveBOM</Name>
				<Source><![CDATA[
    protected boolean getRemoveBOM()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceNums</Name>
				<Source><![CDATA[
    protected str getInvoiceNums()
    {
        SKS_EFT_FileDetail invSKS_EFT_FileDetail;
        str invString;
        str sb, tempstr;
        int length , i;
        int lenstr;
    
        select InvoiceNumber from invSKS_EFT_FileDetail where invSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId;
    
        while(invSKS_EFT_FileDetail)
        {
            if(invSKS_EFT_FileDetail.InvoiceNumber == '')
            {
                // If no invoice number, go to next record
                next invSKS_EFT_FileDetail;
                continue;
            }
            
            tempstr +=  invSKS_EFT_FileDetail.InvoiceNumber;

            if(strLen(tempstr) <= 35)
            {
                sb += invSKS_EFT_FileDetail.InvoiceNumber;
            }

            if(strLen(tempstr) > 35)
            {
                for(lenstr = 35; lenstr <= 1435 ; lenstr += 35)
                {
                    if(strLen(tempstr) >= lenstr && strLen(tempstr) < (lenstr+35))
                    {
                        if(subStr(tempstr, lenstr-1, 2) == ', ' || subStr(tempstr, lenstr-1, 2) == '  ')
                        {
                            sb += invSKS_EFT_FileDetail.InvoiceNumber;
                        }
                        else
                        {
                            length = lenstr - strLen(sb);
                            for(i = 1 ; i <= length; i++)
                            {
                                sb += ' ';
                            }
                            sb += invSKS_EFT_FileDetail.InvoiceNumber;
                        }
                    }
                }
            }
            i=0;
            next invSKS_EFT_FileDetail;
    
            if(invSKS_EFT_FileDetail)
            {
                sb += ', ';
            }
            tempstr = sb;
        }
    
        invString = sb;// this.CharacterReplacement(sb.ToString());
        return invString;
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_Purp</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_Purp(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.86: Purp
        //              2.88: Prtry
        //------------------------------------------------------------------------------------------------------

        if(mSKS_EFT_FileFormatPaymSpec.FormatId != 'DK-BANKCONNECT-SDC-XML')
        {
            super(_nodeCdtTrfTxInf);
        }
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_RmtInf_Ustrd</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_RmtInf_Ustrd(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.98: RmtInf
        //              2.99: Ustrd
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeRmtInf;
        str invNumbers, invoices;
        int i = 0;
        str value;
        boolean firstRec = true;

        invNumbers = this.getInvoiceNbrs();
        invoices = this.getInvoiceNums();       //SKS#DevOps:17859
        value = this.getJournalPaymentNotes();

        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode  == #PTDA_NORM || 
           mSKS_EFT_FileFormatPaymSpec.TransactionCode  == #PTDA_SDAY ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode  == #PTDA_URGP)
        {
            if(mModule == SKS_EFT_Module::BTB)
            {
                msks_EFT_FileDetail_PaymentLine = sks_EFT_FileDetail_PaymentLine::find(mSKS_EFT_FileDetail.RecId);

                if(msks_EFT_FileDetail_PaymentLine.TransactionTxt)
                {
                    invNumbers = msks_EFT_FileDetail_PaymentLine.TransactionTxt;
                }
                else
                {
                    invNumbers = mSKS_EFT_FileDetail.BankBankIBAN;
                }
                for(i =0; i <= strLen(invNumbers); i+= 35)
                {
                    if(i >= 140)
                    {
                        break;
                    }
                    if(invNumbers)
                    {
                        if(firstRec)
                        {
                            //          2.98: RmtInf
                            nodeRmtInf = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('RmtInf'));
                            firstRec = false;
                        }

                        // 2.99: Ustrd
                        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRmtInf, 'Ustrd', substr(invNumbers, i+1, 35),35,false);//SKS_VSTS_13290
                    }
                }
            }
            else
            {
                for(i =0; i <= strLen(invoices); i+= 35)
                {
                    if(i >= 1435)
                    {
                        break;
                    }
                    if(invoices)
                    {
                        if(firstRec)
                        {
                            //          2.98: RmtInf
                            nodeRmtInf = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('RmtInf'));
                            firstRec = false;
                        }

                        // 2.99: Ustrd
                        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRmtInf, 'Ustrd', substr(invoices, i+1, 35), 35,false);//SKS_VSTS_13290
                    }
                }
            }
        }
        else if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #FAT_ORD    ||
                mSKS_EFT_FileFormatPaymSpec.TransactionCode  == #FAT_EXP   || 
                mSKS_EFT_FileFormatPaymSpec.TransactionCode == #FIN_NBT)
        {
            for(i =0; i <= strLen(invNumbers); i+= 35)
            {
                if(i >= 140)
                {
                    break;
                }
                if(invNumbers)
                {
                    if(firstRec)
                    {
                        //          2.98: RmtInf
                        nodeRmtInf = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('RmtInf'));
                        firstRec = false;
                    }

                    // 2.99: Ustrd
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRmtInf, 'Ustrd', substr(invNumbers, i+1, 35),35,false);//SKS_VSTS_13290
                }
            }
        }
        else if(invNumbers)
        {
            if(firstRec)
            {
                //          2.98: RmtInf
                nodeRmtInf = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('RmtInf'));
                firstRec = false;
            }

            //              2.99: Ustrd
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRmtInf, 'Ustrd', invNumbers, 140);
        }
        else if(value)
        {
            if(firstRec)
            {
                //          2.98: RmtInf
                nodeRmtInf = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('RmtInf'));
                firstRec = false;
            }

            if(value)
            {
                // 2.99: Ustrd
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRmtInf, 'Ustrd', substr(value, 1, 35),35,false);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>