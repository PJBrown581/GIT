<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_US_USBANK_BATCHWIRE</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_US_USBANK_BATCHWIRE extends SKS_EFT_Format
/// </summary>
class SKS_EFT_Format_US_USBANK_BATCHWIRE extends  SKS_EFT_Format
{
    #define.FormatVersion('20230321')
    #define.FED_WIRE('FED-WIRE')
    #define.INTL_SWIFT('INTL-SWIFT')
    int64 paymentHash, totalPaymentHash;
    int paymentAutCode, totalPaymentAutCode;
    AmountMST mPaymentAmount;
    str  seqNumber,tid, tid1;
    real numOfOrders;
    str noOfTxs;
    boolean firstPayment = true;
        
   

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    protected void formatStructure()
    {
        this.rec_HeaderBlock();

        while(mSKS_EFT_FileDetail)
        {
            // Get SKS_EFT_FileFormatPaymSpec
            this.getSKS_EFT_FileFormatPaymSpec();

            mSKS_EFT_FileDetail_BankAccount = SKS_EFT_FileDetail_BankAccount::find(mSKS_EFT_FileDetail.RecId);

            //Universal Header Block
            this.rec_UHeaderBlock();

            switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
            {
                case #FED_WIRE:
                    this.rec_FEDWIREBlock();
                    this.rec_32A();
                    this.rec_50K();
                    this.rec_57D();
                    this.rec_59();
                    this.rec_70();
                    break;
                case #INTL_SWIFT:
                    this.rec_INTLSWIFTBlock();//DevOps20138 rec_30 block removed
                    this.rec_32A();//DevOps20248 rec_32B replaced with rec_32A
                    this.rec_57A();
                    this.rec_59();
                    this.rec_70();
                    this.rec_71A();
                    break;
            }
            next mSKS_EFT_FileDetail;
        }
        this.rec_Trailer();
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_HeaderBlock</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_HeaderBlock
    /// </summary>
    /// <returns>true/false</returns>
    boolean rec_HeaderBlock()
    {
        SKS_EFT_FileDetail tmpSKS_EFT_FileDetail;
        str totalAmount, headerHashValue;


        System.Text.StringBuilder sb = new System.Text.StringBuilder();

        //      Start of Block
        sb.Append('{H:');

        //      TID
        tid = subStr(this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('TID', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank)), 1, 4) + 'F' + SKS_PP_StringFormats::strRight(mSKS_EFT_File.FileNbr,3);
        
        sb.Append(strUpr(tid));

        //VALUE-DATE
        sb.Append(SKS_PP_StringFormats::strDateYYYYMMDD(mSKS_EFT_FileDetail.EffectiveDate));
    
        //FILLER
        sb.Append(SKS_PP_StringFormats::strFill(1, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //RCT
        select COUNT(InvoiceOrigAmountCur), SUM(InvoiceSettleAmountPmtCur) from tmpSKS_EFT_FileDetail
            where
                tmpSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                tmpSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                tmpSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary;
        
        noOfTxs = num2str(tmpSKS_EFT_FileDetail.InvoiceOrigAmountCur,0,0,0,0);
        sb.Append(SKS_PP_StringFormats::strFill(5, noOfTxs, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //AMOUNT
        totalAmount = num2str(tmpSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1,0,2,2,0);
        sb.Append(SKS_PP_StringFormats::strFill(16, totalAmount, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //HASH
        this.getHeaderHashAutTotal();

        if(strlen(int642Str(totalPaymentHash)) > 8)
        {
            str value1, value2;
            int count1;


            value1 = SKS_PP_StringFormats::strRight(int642Str(totalPaymentHash), 8);
            value2 = subStr(int642Str(totalPaymentHash), 1, strLen(int642Str(totalPaymentHash))-8);

            count1 = str2Int(value1) + str2Int(value2);

            headerHashValue = int2Str(count1);
        }
        else
        {
            headerHashValue = int642Str(totalPaymentHash);
        }

        sb.Append(SKS_PP_StringFormats::strFill(8, headerHashValue, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        // AUT
        sb.Append(SKS_PP_StringFormats::strFill(16, SKS_PP_StringFormats::strRight(int2Str(totalPaymentAutCode), 16), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        
        //FILLER
        sb.Append(SKS_PP_StringFormats::strFill(14, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        
    
        sb.Append('}');

        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHeaderHashAutTotal</Name>
				<Source><![CDATA[
    private void getHeaderHashAutTotal()
    {
        int securityCode;
        AmountMST amount;
        int datevalue;
        SKS_EFT_FileDetail tmpSKS_EFT_FileDetail;

        select tmpSKS_EFT_FileDetail
            where
                tmpSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                tmpSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                tmpSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary;
        while(tmpSKS_EFT_FileDetail)
        {        
            paymentAutCode = this.getSumOfASCII(SKS_PP_StringFormats::strRight(SKS_PP_StringFormats::strFill(20, tmpSKS_EFT_FileDetail.DepBankAcct, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right), 20));
            
            totalPaymentAutCode += paymentAutCode;

            datevalue = str2Int(SKS_PP_StringFormats::strDateYYMMDD(tmpSKS_EFT_FileDetail.EffectiveDate));

            str a;
            
            if(tmpSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur < 0)
            {
                amount = tmpSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1;
            }
            else
            {
                amount = tmpSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur;
            }

            a = strRem(num2str(amount, 0,2,1,0), '.');
            amount = str2Num(a);

            //      PYMT-HASH
            securityCode = this.getSumOfASCII(SKS_PP_StringFormats::strFill(5, SKS_EFT_Format::getCodelookupvalue('SecurityCode', tmpSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
            paymentHash =  datevalue + any2Int64(amount) + securityCode;
                       
            totalPaymentHash += paymentHash;

            next tmpSKS_EFT_FileDetail;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_UHeaderBlock</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_UHeaderBlock
    /// </summary>
    /// <returns>true/false</returns>
    boolean rec_UHeaderBlock()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        int securityCode;
        str hashValue;
        AmountMST amount;
        int datevalue;

        //      Start of Block
        sb.Append('{U:');

        //      SOURCE-ID
        sb.Append(SKS_PP_StringFormats::strFill(8, 'BWI', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //      API-MESSAGETYPE
        sb.Append(SKS_PP_StringFormats::strFill(4, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
    
        //      SEND-DATE
        sb.Append(SKS_PP_StringFormats::strFill(8, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));


        //      INITIATOR
        tid1 = subStr(this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('TID', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank)), 1, 4) + 'F' +
              SKS_PP_StringFormats::strFill(3, seqNumber, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left) + subStr(this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('TID', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank)), 1, 4) + 'B001' +
            subStr(this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('TID', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank)), 1, 4) + 'F' + SKS_PP_StringFormats::strFill(4, seqNumber, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left);

        sb.Append(SKS_PP_StringFormats::strFill(35, strUpr(tid1), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        
        //      INITIATOR - DATE
        sb.Append(SKS_PP_StringFormats::strDateYYYYMMDD(mSKS_EFT_FileDetail.PaymentTransDate));

        //      INITIATOR TIME
        sb.Append(SKS_PP_StringFormats::strTimeHHMMSS());

        //      FILLER
        sb.Append(SKS_PP_StringFormats::strFill(8, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        
        sb.AppendLine();

        //      CONFIRMER
        sb.Append(SKS_PP_StringFormats::strFill(35, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //      CONFIRMER DATE
        sb.Append(SKS_PP_StringFormats::strFill(8, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //      CONFIRMER TIME
        sb.Append(SKS_PP_StringFormats::strFill(6, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //APPLICATIONREFERENCE
        sb.Append(SKS_PP_StringFormats::strFill(30, mSKS_EFT_FileDetail.PaymentReference, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //      FILLER
        sb.Append(SKS_PP_StringFormats::strFill(1, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        
        sb.AppendLine();
        
        //      PAR
        sb.Append(SKS_PP_StringFormats::strFill(30, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //      PYMT-AUT
        paymentAutCode = this.getSumOfASCII(SKS_PP_StringFormats::strRight(SKS_PP_StringFormats::strFill(20, mSKS_EFT_FileDetail.DepBankAcct, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right), 20));
        sb.Append(SKS_PP_StringFormats::strFill(16, SKS_PP_StringFormats::strRight(int2Str(paymentAutCode), 16), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        
        //      PYMT-HASH
        securityCode = this.getSumOfASCII(SKS_PP_StringFormats::strFill(5, SKS_EFT_Format::getCodelookupvalue('SecurityCode', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        datevalue = str2Int(SKS_PP_StringFormats::strDateYYMMDD(mSKS_EFT_FileDetail.EffectiveDate));

        str a;
            
        if(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur < 0)
        {
            amount = mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1;
        }
        else
        {
            amount = mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur;
        }

        a = strRem(num2str(amount, 0,2,1,0), '.');
        amount = str2Num(a);

        paymentHash = securityCode + datevalue + any2Int64(amount);
                        
        if(strLen(int642Str(paymentHash)) > 8)
        {
            str value1, value2;
            int count1;


            value1 = SKS_PP_StringFormats::strRight(int642Str(paymentHash), 8);
            value2 = subStr(int642Str(paymentHash), 1, strLen(int642Str(paymentHash))-8);

            count1 = str2Int(value1) + str2Int(value2);

            hashValue = int2Str(count1);
        }
        else
        {
            hashValue = int642Str(paymentHash);
        }

        sb.Append(SKS_PP_StringFormats::strFill(8, hashValue, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //      FILLER
        sb.Append(SKS_PP_StringFormats::strFill(26, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        sb.AppendLine();

        //      FILLER
        sb.Append(SKS_PP_StringFormats::strFill(44, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //      CIF-ID
        sb.Append(SKS_PP_StringFormats::strFill(35, strUpr(this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('CustomerSID', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank))), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //END BLOCK
        sb.Append('}');

        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSumOfASCII</Name>
				<Source><![CDATA[
    private int getSumOfASCII(str value)
    {
        int i, asciivalue;
    
        for(i = 1; i <= strLen(value); i++)
        {
            asciivalue += char2Num(value, i);
        }
        
        return asciivalue;
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_FEDWIREBlock</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_FEDWIREBlock
    /// </summary>
    /// <returns>true/false</returns>
    boolean rec_FEDWIREBlock()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();

        //      Start of Block
        sb.Append('{W:');

        //      Repetitive Tag
        sb.Append('*NR*');
        
        sb.Append('********');
        sb.AppendLine();

        //     Payer Account
        sb.Append(':PYR:/');
        sb.Append(SKS_PP_StringFormats::strFill(34, mSKS_EFT_FileDetail.BankBankAcct, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        sb.AppendLine();

        //    Receiver Id
        sb.Append(':RCV:');

        if(mSKS_EFT_FileDetail.DepBankTransit)
        {
            sb.Append('F'+ subStr(mSKS_EFT_FileDetail.DepBankTransit, 1, 9));
            sb.AppendLine();

        }
        else
        {
            sb.Append('N');
            
        }

        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_32A</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_32A
    /// </summary>
    /// <returns>true/false</returns>
    boolean rec_32A()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
    
        //     Tag
        sb.Append(':32A:');

        //     Value Date
        sb.Append(SKS_PP_StringFormats::strDateYYMMDD(mSKS_EFT_FileDetail.EffectiveDate));

        //     Currency
        sb.Append(mSKS_EFT_FileDetail.PaymentCurrencyCode);

        //     Transaction Amount
        sb.Append(num2str(this.getPositiveAmount(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur) ,0,2,2,0));
    
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_50K</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_50K
    /// </summary>
    /// <returns>true/false</returns>
    boolean rec_50K()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
    
        //     Tag
        sb.Append(':50K:');

        //     Ordering Customer
        sb.Append(strUpr(this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyName)));
        
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_57D</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_57D
    /// </summary>
    /// <returns>true/false</returns>
    boolean rec_57D()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
    
        //     Tag
        sb.Append(':57D:');
        sb.AppendLine();

        //     Account With Institution
        sb.Append(strUpr(this.CharacterReplacement(strUpr(mSKS_EFT_FileDetail_BenBank.BenBankName))));
        
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_59</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_59
    /// </summary>
    /// <returns>true/false</returns>
    boolean rec_59()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();

        if(mSKS_EFT_FileDetail.DepBankAcct  ||  mSKS_EFT_FileDetail_VendAddress.BeneName   ||  mSKS_EFT_FileDetail_VendAddress.BeneAddr   ||
           mSKS_EFT_FileDetail_VendAddress.BeneCity || mSKS_EFT_FileDetail_VendAddress.BeneCountryRegionId)
        {
            //1     Tag
            sb.Append(':59:');
    
            //2     Hyphen "/"
            sb.Append('/');

            //3     Beneficiary account number
            sb.Append(subStr(mSKS_EFT_FileDetail.DepBankAcct, 1, 35));
            sb.AppendLine();
            
            //4     Beneficiary name
            sb.Append(this.CharacterReplacement(subStr(strUpr(mSKS_EFT_FileDetail_VendAddress.BeneName), 1, 35)));
            sb.AppendLine();

            //5     Beneficiary address
            sb.Append(this.CharacterReplacement(subStr(strUpr(mSKS_EFT_FileDetail_VendAddress.BeneAddr + ',' + mSKS_EFT_FileDetail_VendAddress.BeneAddr2), 1, 35)));
            sb.AppendLine();

            sb.Append(this.CharacterReplacement(subStr(strUpr(mSKS_EFT_FileDetail_VendAddress.BeneZipPostal + ',' + mSKS_EFT_FileDetail_VendAddress.BeneCity), 1, 35)));
            sb.AppendLine();

            sb.Append(this.CharacterReplacement(subStr(strUpr(mSKS_EFT_FileDetail_VendAddress.BeneState) + ',' + this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_VendAddress.BeneCountryRegionId), 1, 35)));
        }
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_70</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_70
    /// </summary>
    /// <returns>true/false</returns>
    boolean rec_70()
    {
        str invoiceDetails;
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
    
        invoiceDetails = this.CharacterReplacement(strUpr(this.getInvoiceNbrs()));
        if(invoiceDetails)
        {
            //1     Tag
            sb.Append(':70:');
    
            //2    Payment details
            sb.Append(strUpr(subStr(invoiceDetails, 1, 35)));

            if(strLen(invoiceDetails) > 35)
            {
                sb.AppendLine();
                sb.Append(strUpr(subStr(invoiceDetails, 35, 35)));
            }
            if(strLen(invoiceDetails) > 70)
            {
                sb.AppendLine();
                sb.Append(strUpr(subStr(invoiceDetails, 70, 35)));
            }
        
            if(strLen(invoiceDetails) > 105)
            {
                sb.AppendLine();
                sb.Append(strUpr(subStr(invoiceDetails, 105, 35)));
            }
            sb.AppendLine();
        }
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #FED_WIRE)
        {
            sb.Append('-}');
        }
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceNbrs</Name>
				<Source><![CDATA[
    protected str getInvoiceNbrs()
    {
        SKS_EFT_FileDetail invSKS_EFT_FileDetail;
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        str invString;
    
        select InvoiceNumber from invSKS_EFT_FileDetail where invSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId;
    
        while(invSKS_EFT_FileDetail)
        {
            if(invSKS_EFT_FileDetail.InvoiceNumber == '')
            {
                // If no invoice number, go to next record
                next invSKS_EFT_FileDetail;
                continue;
            }
            sb.Append(invSKS_EFT_FileDetail.InvoiceNumber);
    
            next invSKS_EFT_FileDetail;
    
            if(invSKS_EFT_FileDetail)
            {
                sb.Append(', ');
            }
        }
    
        invString = this.CharacterReplacement(sb.ToString());
        return invString;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_INTLSWIFTBlock</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_INTLSWIFTBlock
    /// </summary>
    /// <returns>true/false</returns>
    boolean rec_INTLSWIFTBlock()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();

        //      Start of Block
        sb.Append('{W:');

        //      Repetitive Tag
        sb.Append('*NR*');
        
        sb.Append('********');
        sb.AppendLine();

        //     Payer Account
        sb.Append(':PYR:/');//DevOps19888
        sb.Append(SKS_PP_StringFormats::strFill(34, mSKS_EFT_FileDetail.BankBankAcct, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        sb.AppendLine();

        //    Receiver Id
        sb.Append(':RCV:');//DevOps20003

        if(mSKS_EFT_FileDetail.DepSwiftNo)
        {
            sb.Append(subStr(mSKS_EFT_FileDetail.DepSwiftNo, 1, 9));
         
        }
        else if(mSKS_EFT_FileDetail.DepBankTransit)
        {
            sb.Append('F'+ subStr(mSKS_EFT_FileDetail.DepBankTransit, 1, 9));
         
        }
        else
        {
            sb.Append('N');
          
        }

        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_57A</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_57A
    /// </summary>
    /// <returns>true/false</returns>
    boolean rec_57A()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        
        if(mSKS_EFT_FileDetail_Intermediary.IntBankSwift)
        {
            sb.Append(':57A:');

            //      Beneficiary bank Swift address
            sb.Append(mSKS_EFT_FileDetail_Intermediary.IntBankSwift);
        }

        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_71A</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_71A
    /// </summary>
    /// <returns>true/false</returns>
    boolean rec_71A()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
    
        //1     Tag
        sb.Append(':71A:');
    
        //2    Details of Charges
        sb.Append(strUpr(this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('Charges', mSKS_EFT_FileDetail.RecId))));
        sb.AppendLine();

        sb.Append('-}');

        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Trailer</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_Trailer
    /// </summary>
    /// <returns>true/false</returns>
    boolean rec_Trailer()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
    
        //1     Tag
        sb.Append('{T:');
    
        //2    File sequence number
        sb.Append(SKS_PP_StringFormats::strFill(4, seqNumber, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //3     Number of payments
        sb.Append(SKS_PP_StringFormats::strFill(6, noOfTxs, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        sb.Append('}');
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectPaymentRecords</Name>
				<Source><![CDATA[
    [SuppressBPWarning('BPErrorSelectUsingFirstOnly', 'The buffer is used in next statement or in a datasource query loop.')]
    protected void selectPaymentRecords()
    {
        //------------------------------------------------------------------------------------------------------
        // Standard payment selction
        // Override if different selection is need for a format
        //------------------------------------------------------------------------------------------------------
    
        //Order by clause must match the clause in the SKS_EFT_Processing.SumByPayment
        select * from mSKS_EFT_FileDetail
            join mSKS_EFT_FileDetail_VendAddress
            join mSKS_EFT_FileDetail_BenBank
            join mSKS_EFT_FileDetail_Intermediary
            join mSKS_EFT_FileDetail_CreditParty
            join msKS_EFT_FileDetail_Instructions
            join mSKS_EFT_FileDetail_BankAccount
                order by mSKS_EFT_FileDetail.PaymentCompany,
                   mSKS_EFT_FileDetail.RecordSection,
                   mSKS_EFT_FileDetail.PaymMode,
                   mSKS_EFT_FileDetail.BankAccountId,
                   mSKS_EFT_FileDetail.PaymentCurrencyCode,
                   mSKS_EFT_FileDetail.PaymSpec,
                   mSKS_EFT_FileDetail.EffectiveDate,
                   mSKS_EFT_FileDetail.DepCountryRegionId,
                   mSKS_EFT_FileDetail.RecordType,
                   mSKS_EFT_FileDetail.AccountNum,
                   mSKS_EFT_FileDetail.PaymentReference,
                   mSKS_EFT_FileDetail.RecId
          where mSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                mSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                mSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_VendAddress.RefRecId &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_BenBank.RefRecId &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_Intermediary.RefRecId &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_CreditParty.RefRecId &&
                mSKS_EFT_FileDetail.RecId == msKS_EFT_FileDetail_Instructions.RefRecId &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_BankAccount.RefRecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>