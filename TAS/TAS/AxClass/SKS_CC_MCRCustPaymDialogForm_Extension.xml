<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_CC_MCRCustPaymDialogForm_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(formstr(MCRCustPaymDialog))]
final class SKS_CC_MCRCustPaymDialogForm_Extension
{
    public CustAccount                      callerCustAccount;
    public FormRun                          elementLocal;
    public boolean                          isPayFabricActiveProcessor;
    public FormDataSource                   mcrCustPaymTable_ds_Local;
    public MCRCustPaymTable                 mcrCustPaymTableLocal;
    public SKS_CC_PayFabricWalletHandler    pfWalletHandler;
    public CreditCardProcessors             activeCreditCardProcessors;
    public boolean                          sKS_CC_IsOneTimeCustomer;
    public boolean                          isSKSOneTimeCustLogicEnabled;
    

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>refreshForm</Name>
				<Source><![CDATA[
    public void refreshForm()
    {
        if (!isPayFabricActiveProcessor)
        {
            return;
        }

        CreditCardCust                  newCreditCardCust;        
        str                             pfCardTokens;        

        pfCardTokens = pfWalletHandler.getPayFabricCreditCardTokensForCustomer();
        if (pfCardTokens)
        {
            if (pfWalletHandler.refreshCreditCardsFromPayFabric(pfCardTokens, activeCreditCardProcessors.RecId, ''))
            {
                if (!mcrCustPaymTableLocal.PaymInfoRecId &&
                    this.sKS_CC_IsCreditCardPaymentType())
                {
                    if (sKS_CC_IsOneTimeCustomer &&
                        isSKSOneTimeCustLogicEnabled &&
                        mcrCustPaymTableLocal.RefTableId == tableNum(SalesTable) &&
                        mcrCustPaymTableLocal.RefRecId)
                    {
                        select firstOnly1 newCreditCardCust
                            order by RecId desc
                            where newCreditCardCust.SKS_CC_OneTimeCustRefTableId == mcrCustPaymTableLocal.RefTableId
                               && newCreditCardCust.SKS_CC_OneTimeCustRefRecId == mcrCustPaymTableLocal.RefRecId
                               && newCreditCardCust.CustAccount == callerCustAccount;
                    }
                    else
                    {
                        select firstOnly1 newCreditCardCust
                            order by RecId desc
                            where newCreditCardCust.CustAccount == callerCustAccount;
                    }

                    if (newCreditCardCust)
                    {
                        mcrCustPaymTableLocal.PaymInfoRecId = newCreditCardCust.RecId;
                        mcrCustPaymTableLocal.PaymInfoTableId = newCreditCardCust.TableId;
                        mcrCustPaymTable_ds_Local.cacheCalculateMethod(tableMethodStr(MCRCustPaymTable, editCreditCard));
                        mcrCustPaymTable_ds_Local.refresh();
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializedFormHandler</Name>
				<Source><![CDATA[
    [FormEventHandler(formstr(MCRCustPaymDialog), FormEventType::Initialized)]
    public void initializedFormHandler(xFormRun _formRun, FormEventArgs _e)
    {
        elementLocal = _formRun;
        isPayFabricActiveProcessor = SKS_CC_PayFabricWalletHandler::isPayFabricActiveProcessor();        

        mcrCustPaymTable_ds_Local = elementLocal.dataSource(formDataSourceStr(MCRCustPaymDialog, MCRCustPaymTable)) as FormDataSource;
        if (mcrCustPaymTable_ds_Local)
        {
            mcrCustPaymTableLocal = mcrCustPaymTable_ds_Local.cursor() as MCRCustPaymTable;
        }        

        SKS_PP_Setup sksParmsLoc = SKS_PP_Setup::find();
        if (isPayFabricActiveProcessor && sksParmsLoc.ModCC == NoYes::No)
        {
            isPayFabricActiveProcessor = false;
        }
        else
        {
            isSKSOneTimeCustLogicEnabled = sksParmsLoc.CCUseOneTimeCustomerLogic;
        }

        SKS_CC_CreateCCBtn.visible(isPayFabricActiveProcessor);
        CreateCCBtn.visible(!isPayFabricActiveProcessor && CreateCCBtn.visible());
    }

]]></Source>
			</Method>
			<Method>
				<Name>SKS_CC_CreateCCBtn_OnClicked</Name>
				<Source><![CDATA[
    [FormControlEventHandler(formControlStr(MCRCustPaymDialog, SKS_CC_CreateCCBtn), FormControlEventType::Clicked)]
    public void SKS_CC_CreateCCBtn_OnClicked(FormControl _sender, FormControlEventArgs _e)
    {
        if (mcrCustPaymTable_ds_Local == null)
        {
            mcrCustPaymTable_ds_Local = elementLocal.dataSource(formDataSourceStr(MCRCustPaymDialog, MCRCustPaymTable)) as FormDataSource;
            mcrCustPaymTableLocal = mcrCustPaymTable_ds_Local.cursor() as MCRCustPaymTable;
        }

        CreditCardPaymentCardTokenize   cardTokenize;        
        CustTable                       custTable;        
        str                             pfUrl;
        Args                            args = new Args();

        if (!isPayFabricActiveProcessor || !mcrCustPaymTableLocal.CustAccount)
        {
            return;
        }

        callerCustAccount = mcrCustPaymTableLocal.CustAccount;

        activeCreditCardProcessors = CreditCardProcessors::findActiveProcessor();
        cardTokenize = CreditCardPaymentCardTokenize::construct();

        cardTokenize.init(activeCreditCardProcessors.Name);
        cardTokenize.parmCustAccount(callerCustAccount);

        pfWalletHandler = SKS_CC_PayFabricWalletHandler::construct();
        pfWalletHandler.parmCustAccount(callerCustAccount);
        custTable = CustTable::find(callerCustAccount);
        if (custTable.OneTimeCustomer && isSKSOneTimeCustLogicEnabled &&
            mcrCustPaymTableLocal.RefTableId == tableNum(SalesTable) && mcrCustPaymTableLocal.RefRecId)
        {
            pfWalletHandler.parmOneTimeCustRefTableId(mcrCustPaymTableLocal.RefTableId);
            pfWalletHandler.parmOneTimeCustRefRecId(mcrCustPaymTableLocal.RefRecId);
        }
        pfWalletHandler.setPayFabricCustomerNbr();

        pfUrl = pfWalletHandler.getPayFabricCreateWalletUrl();        

        args.caller(this);
        args.record(custTable);
        args.parm(pfUrl);
        args.parmEnumType(enumnum(NoYesCombo));
        args.parmEnum(NoYesCombo::Yes);

        MenuFunction menuFunction;
        menuFunction = new MenuFunction(menuitemDisplayStr(SKS_CC_PayFabricWalletMaintain), MenuItemType::Display);
        menuFunction.run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>sKS_CC_IsCreditCardPaymentType</Name>
				<Source><![CDATA[
    public boolean sKS_CC_IsCreditCardPaymentType()
    {        
        MCRCustPaymType cardType;
        boolean ret;

        cardType = MCRCustPaymTable::getMCRCardTypeFromCardTypeId(mcrCustPaymTableLocal.CardTypeId);
        if (cardType == MCRCustPaymType::CreditCard)
        {
            ret = true;
        }

        return ret;        
    }

]]></Source>
			</Method>
			<Method>
				<Name>sKS_CC_SetDefaultCreditCard</Name>
				<Source><![CDATA[
    public void sKS_CC_SetDefaultCreditCard()
    {        
        CreditCardCust creditCardCustSKS;

        if (!mcrCustPaymTableLocal.PaymInfoRecId && mcrCustPaymTableLocal.CustAccount && SKS_PP_Setup::find().ModCC == NoYes::Yes)
        {
            if (this.sKS_CC_IsCreditCardPaymentType())
            {
                creditCardCustSKS = CreditCardCust::sKS_CC_FindDefaultCardForCust(
                    mcrCustPaymTableLocal.CustAccount,
                    mcrCustPaymTableLocal.RefTableId,
                    mcrCustPaymTableLocal.RefRecId);

                if (creditCardCustSKS)
                {
                    mcrCustPaymTableLocal.PaymInfoRecId = creditCardCustSKS.RecId;
                    mcrCustPaymTableLocal.PaymInfoTableId = creditCardCustSKS.TableId;
                }
            }
        }        
    }

]]></Source>
			</Method>
			<Method>
				<Name>sKS_CC_SetCreditCardLookupToUse</Name>
				<Source><![CDATA[
    public void sKS_CC_SetCreditCardLookupToUse()
    {
        if (isPayFabricActiveProcessor &&
            mcrCustPaymTableLocal.CustAccount &&
            mcrCustPaymTableLocal.RefTableId == tableNum(SalesTable) &&
            CustTable::find(mcrCustPaymTableLocal.CustAccount).OneTimeCustomer &&
            isSKSOneTimeCustLogicEnabled)
        {
            sKS_CC_IsOneTimeCustomer = true;
        }
        else
        {
            sKS_CC_IsOneTimeCustomer = false;
        }

        CreditCard_M_editCreditCard.visible(!sKS_CC_IsOneTimeCustomer && CreditCard_M_editCreditCard.visible());
        SKS_CC_CreditCard_M_editCreditCard.visible(sKS_CC_IsOneTimeCustomer);
        

    }

]]></Source>
			</Method>
			<Method>
				<Name>MCRCustPaymTable_OnActivated</Name>
				<Source><![CDATA[
    [FormDataSourceEventHandler(formDataSourceStr(MCRCustPaymDialog, MCRCustPaymTable), FormDataSourceEventType::Activated)]
    public void MCRCustPaymTable_OnActivated(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        switch (mcrCustPaymTableLocal.CustPaymType)
        {
            case MCRCustPaymType::CreditCard:            
                if (MCRCustPaymTable::getMCRCardTypeFromCardTypeId(mcrCustPaymTableLocal.CardTypeId) == MCRCustPaymType::CreditCard)
                {
                    this.sKS_CC_SetCreditCardLookupToUse();
                }
                break;
            default:
                SKS_CC_CreditCard_M_editCreditCard.visible(false);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>SKS_CC_CreditCard_M_editCreditCard_OnLookup</Name>
				<Source><![CDATA[
    [FormControlEventHandler(formControlStr(MCRCustPaymDialog, SKS_CC_CreditCard_M_editCreditCard), FormControlEventType::Lookup)]
    public void SKS_CC_CreditCard_M_editCreditCard_OnLookup(FormControl _sender, FormControlEventArgs _e)
    {
        if (sKS_CC_IsOneTimeCustomer && this.sKS_CC_IsCreditCardPaymentType())
        {
            SalesTable salesTableSKSLoc = SalesTable::findRecId(mcrCustPaymTableLocal.RefRecId);
            if (salesTableSKSLoc)
            {
                CreditCardCust::sKS_CC_lookupCreditCard(
                    _sender,
                    mcrCustPaymTableLocal.CustAccount,
                    mcrCustPaymTableLocal.PaymInfoRecId,
                    salesTableSKSLoc);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePaymTypeControls</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Used to update the form controls based on the payment method.
    /// </summary>
    public void updatePaymTypeControls()
    {
        next updatePaymTypeControls();

        switch (mcrCustPaymTableLocal.CustPaymType)
        {
            case MCRCustPaymType::CreditCard:            
                if (MCRCustPaymTable::getMCRCardTypeFromCardTypeId(mcrCustPaymTableLocal.CardTypeId) == MCRCustPaymType::CreditCard)
                {
                    this.sKS_CC_SetCreditCardLookupToUse();
                    this.sKS_CC_SetDefaultCreditCard();
                    mcrCustPaymTable_ds_Local.cacheCalculateMethod(tableMethodStr(MCRCustPaymTable, editCreditCard));
                    if (isPayFabricActiveProcessor && mcrCustPaymTable_ds_Local.allowEdit())
                    {
                        SKS_CC_CreateCCBtn.visible(true);
                    }
                }
                break;
            default:
                SKS_CC_CreditCard_M_editCreditCard.visible(false);
                SKS_CC_CreateCCBtn.visible(false);
                break;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>