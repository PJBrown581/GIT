<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_CA_CIBC_80</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_CA_CIBC_80 extends SKS_EFT_Format
/// </summary>
class SKS_EFT_Format_CA_CIBC_80 extends SKS_EFT_Format
{
    #define.FormatVersion('20220302')
    #define.PAYMT('PMT')

    int mBatchCount, mBatchEntryCount, mTotalDetailCount;
    AmountMST mBatchAmount;
    str CPACode;
    int64 mPaymentCount;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    protected void formatStructure()
    {
        BankAccountId prevBankAccount;
        ;
        
        // File header
        this.rec_FileHeader();

        while(mSKS_EFT_FileDetail)
        {
            //  Get SKS_EFT_FileFormatPaymSpec
            this.getSKS_EFT_FileFormatPaymSpec();

            mSKS_EFT_FileDetail_BankAccount = SKS_EFT_FileDetail_BankAccount::find(mSKS_EFT_FileDetail.RecId);

            if(prevBankAccount != mSKS_EFT_FileDetail.BankAccountId)
            {
                // Batch Header
                this.rec_BatchHeader();
            }

            // Details Record
            this.rec_Details();

            prevBankAccount = mSKS_EFT_FileDetail.BankAccountId;

            next mSKS_EFT_FileDetail;

            // Batch trailer
            if(prevBankAccount != mSKS_EFT_FileDetail.BankAccountId)
            {
                // Format trailer
                this.rec_BatchTrailer();
            }
        }
        // File trailer
        this.rec_FileTrailer();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJulianDate</Name>
				<Source><![CDATA[
    private str getJulianDate(date _Date)
    {
        str value;

        value = '0' + subStr(date2julian(_Date),3,5);

        return value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_BatchHeader</Name>
				<Source><![CDATA[
    //Nbr   Description
    // 1    Record Type                     (    1)
    // 2    Filler                          ( 2-47)
    // 3    Transaction Code                (48-50)
    // 4    Payment Sundry Information      (51-60)
    // 5    Value Date                      (61-66)
    // 6    Filler                          (67-80)
    public boolean rec_BatchHeader()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        str value;
        ;
        mBatchCount++;

        // 1    Record Type                     (    1)
        sb.Append('5');

        // 2    Filler                          ( 2-47)
        sb.Append(SKS_PP_StringFormats::strFill(46, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 3    Transaction Code                (48-50)
        CPACode = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('CPATransactionCode', mSKS_EFT_FileDetail.RecId));
        sb.Append(SKS_PP_StringFormats::strFill(3, CPACode, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 4    Payment Sundry Information      (51-60)
        value = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('SundryInformation', mSKS_EFT_FileDetail.RecId));
        sb.Append(SKS_PP_StringFormats::strFill(10, value, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 5    Value Date                      (61-66)
        sb.Append(this.getJulianDate(mSKS_EFT_FileDetail.EffectiveDate));

        // 6    Filler                          (67-80)
        sb.Append(SKS_PP_StringFormats::strFill(14, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_BatchTrailer</Name>
				<Source><![CDATA[
    //Nbr   Description
    // 1    Record Type                     (    1)
    // 2    Transaction Code                (    2)
    // 3    Batch Entry Count               (5 - 10)
    // 4    Reserved                        (11 - 20)
    // 5    Filler                          (21 - 40)
    // 6    Entry Dollar Amount             (41 - 52)
    // 7    Filler                          (53 - 80)

    public boolean rec_BatchTrailer()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        ;

        // 1    Record Type                     (    1)
        sb.Append('7');

        // 2    Transaction Code                (2 - 4)
        sb.Append(SKS_PP_StringFormats::strFill(3, CPACode, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 3    Batch Entry Count               (5 - 10)
        sb.Append(SKS_PP_StringFormats::strFill(6, int2str(mBatchEntryCount), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        // 4    Reserved                        (11 - 20)
        sb.Append(SKS_PP_StringFormats::strFill(10, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        // 5    Filler                          (21 - 40)
        sb.Append(SKS_PP_StringFormats::strFill(20, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 6    Entry Dollar Amount             (41 - 52)
        sb.Append(SKS_PP_StringFormats::strMoney(mBatchAmount * -1, 12));

        // 7    Filler                          (53 - 80)
        sb.Append(SKS_PP_StringFormats::strFill(28, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //Reset Batch values
        mBatchEntryCount = 0;
        mBatchAmount = 0;
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Details</Name>
				<Source><![CDATA[
    //Nbr   Description
    // 1    Record Type                     (    1)
    // 2    Credit/Debit identifier         (    2)
    // 3    Filler                          (    3)
    // 4    Receiver Bank Institution ID    (4 - 7)
    // 5    Receiver Bank Transit Number    (8 - 12)
    // 6    Receiver Account Number         (13 - 24)
    // 7    Filler                          (25 - 29)
    // 8    Amount                          (30 - 39)
    // 9    Cross Reference Number          (40 - 52)
    // 9    Receiver Name                   (53 - 74)
    // 10   Filler                          (75 - 80)

    public boolean rec_Details()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        ;
        mBatchEntryCount++;
        mTotalDetailCount++;

        // 1    Record Type                     (    1)
        sb.Append('6');

        // 2    Credit/Debit identifier         (    2)
        sb.Append('C');

        // 3    Filler                          (    3)
        sb.Append(SKS_PP_StringFormats::strFill(1, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 4    Receiver Bank Institution ID    (4 - 7)
        sb.Append(SKS_PP_StringFormats::strFill(4, subStr(mSKS_EFT_FileDetail.DepBankTransit, 1, 4), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 5    Receiver Bank Transit Number    (8 - 12)
        sb.Append(SKS_PP_StringFormats::strFill(5, subStr(mSKS_EFT_FileDetail.DepBankTransit, 5, 5), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 6    Receiver Account Number         (13 - 24)
        sb.Append(SKS_PP_StringFormats::strFill(12, mSKS_EFT_FileDetail.DepBankAcct, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 7    Filler                          (25 - 29)
        sb.Append(SKS_PP_StringFormats::strFill(5, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 8    Amount                          (30 - 39)
        mBatchAmount   += mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur;
        sb.Append(SKS_PP_StringFormats::strMoney(this.getPositiveAmount(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur), 10));

        // 9    Cross Reference Number          (40 - 52)
        sb.Append(SKS_PP_StringFormats::strFill(13, mSKS_EFT_FileDetail.PaymentReference, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 10    Receiver Name                   (53 - 74)
        sb.Append(SKS_PP_StringFormats::strFill(22, this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneName), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 11   Filler                          (75 - 80)
        sb.Append(SKS_PP_StringFormats::strFill(6, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_FileHeader</Name>
				<Source><![CDATA[
    //Nbr   Content
    // 1    Record Type                                             (    1)
    // 2    Filler                                                  (2 - 3)
    // 3    Destination Data Center                                 (4 - 8)
    // 4    Filler                                                  (9 - 13)
    // 5    Originator Number                                       (14 - 23)
    // 6    File Creation Date                                      (24 - 29)
    // 7    File Creation Number                                    (30 - 33)
    // 8    Filler                                                  (     34)
    // 9    Institution Number                                      (35 - 38)
    // 10   Branch Transit Number                                   (39 - 43)
    // 11   Account Number                                          (44 - 55)
    // 12   Filler                                                  (56 - 57)
    // 13   Originatorâ€™s Short Name                                 (58 - 72)
    // 14   Filler                                                  (     73)
    // 15   Currency Indicator                                      (74 - 76)
    // 16   Filler                                                  (77 - 80)

    public boolean rec_FileHeader()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        ;

        // 1    Record Type                                             (    1)
        sb.Append('1');

        // 2    Filler                                                  (2 - 3)
        sb.Append(SKS_PP_StringFormats::strFill(2,'', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 3    Destination Data Center                                 (4 - 8)
        sb.Append(SKS_PP_StringFormats::strFill(5, this.CharacterReplacement(subStr(mSKS_EFT_FileDetail_BankAccount.WOrdPartyId, 1, 5)), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 4    Filler                                                  (9 - 13)
        sb.Append(SKS_PP_StringFormats::strFill(5,'', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 5    Originator Number                                       (14 - 23)
        sb.Append(SKS_PP_StringFormats::strFill(10, this.CharacterReplacement(subStr(mSKS_EFT_FileDetail_BankAccount.WOrdPartyId, 1, 10)), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 6    File Creation Date                                      (24 - 29)
        sb.Append(this.getJulianDate(today()));

        // 7    File Creation Number                                    (30 - 33)        
        sb.Append(SKS_PP_StringFormats::strFill(4, this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('NextSequenceNumber', mSKS_EFT_FileDetail.RecId)), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        // 8    Filler                                                  (     34)
        sb.Append(SKS_PP_StringFormats::strFill(1,'', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 9    Institution Number                                      (35 - 38)
        sb.Append(SKS_PP_StringFormats::strFill(4, subStr(mSKS_EFT_FileDetail.BankBankTransit,1,4), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        // 10   Branch Transit Number                                   (39 - 43)
        sb.Append(SKS_PP_StringFormats::strFill(5, subStr(mSKS_EFT_FileDetail.BankBankTransit,5,5), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        // 11   Account Number                                          (44 - 55)
        sb.Append(SKS_PP_StringFormats::strFill(12,mSKS_EFT_FileDetail.BankBankAcct, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 12   Filler                                                  (56 - 57)
        sb.Append(SKS_PP_StringFormats::strFill(2,'', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 13   Originatorâ€™s Short Name                                 (58 - 72)
        sb.Append(SKS_PP_StringFormats::strFill(15,subStr(this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyName),1,15), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 14   Filler                                                  (     73)
        sb.Append(SKS_PP_StringFormats::strFill(1,'', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 15   Currency Indicator                                      (74 - 76)
        sb.Append(SKS_PP_StringFormats::strFill(3,mSKS_EFT_FileDetail.PaymentCurrencyCode, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 16   Filler                                                  (77 - 80)
        sb.Append(SKS_PP_StringFormats::strFill(4,'', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        this.fileWrite(sb.ToString());

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_FileTrailer</Name>
				<Source><![CDATA[
    //Nbr   Content
    // 1    Record Type                     (    1)
    // 2    Batch Count                     (2 - 7)
    // 3    Detail Count                    (8 - 13)
    // 4    Filler                          (14 -80)
    private boolean rec_FileTrailer()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        ;

        // 1    Record Type                     (    1)
        sb.Append('9');

        // 2    Batch Count                     (2 - 7)
        sb.Append(SKS_PP_StringFormats::strFill(6, int2str(mBatchCount), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        // 3    Detail Count                    (8 - 13)
        sb.Append(SKS_PP_StringFormats::strFill(6, int2str(mTotalDetailCount), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        // 4    Filler                          (14 -80)
        sb.Append(SKS_PP_StringFormats::strFill(67, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectPaymentRecords</Name>
				<Source><![CDATA[
    [SuppressBPWarning('BPErrorSelectUsingFirstOnly', 'The buffer is used in next statement or in a datasource query loop.')]
    protected void selectPaymentRecords()
    {
        //------------------------------------------------------------------------------------------------------
        // Standard payment selction
        // Override if different selection is need for a format
        //------------------------------------------------------------------------------------------------------
    
        //Order by clause must match the clause in the SKS_EFT_Processing.SumByPayment
        select * from mSKS_EFT_FileDetail
            join mSKS_EFT_FileDetail_VendAddress
              order by mSKS_EFT_FileDetail.RecordSection,
                   mSKS_EFT_FileDetail.PaymMode,
                   mSKS_EFT_FileDetail.BankAccountId,
                   mSKS_EFT_FileDetail.PaymentCurrencyCode,
                   mSKS_EFT_FileDetail.PaymSpec,
                   mSKS_EFT_FileDetail.EffectiveDate,
                   mSKS_EFT_FileDetail.DepCountryRegionId,
                   mSKS_EFT_FileDetail.RecordType,
                   mSKS_EFT_FileDetail.AccountNum,
                   mSKS_EFT_FileDetail.PaymentReference,
                   mSKS_EFT_FileDetail.RecId
          where mSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                mSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                mSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_VendAddress.RefRecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>