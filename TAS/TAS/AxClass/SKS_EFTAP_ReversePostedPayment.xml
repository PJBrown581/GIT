<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFTAP_ReversePostedPayment</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Reverses posted payments.
/// 21226: This process moved here from ReversePostedPayment button's click event under SKS_EFTAP_FileDetails form.
/// </summary>
class SKS_EFTAP_ReversePostedPayment
{
    container   conSelectedFileDetails;
    TransDate   reversalDate;


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(container _conSelectedFileDetails, TransDate _reversalDate)
    {
        conSelectedFileDetails  = _conSelectedFileDetails;
        reversalDate            = _reversalDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runStatic</Name>
				<Source><![CDATA[
    public static void runStatic(container _params)
    {
        SKS_EFTAP_ReversePostedPayment  helper;


        helper = new SKS_EFTAP_ReversePostedPayment(
                                        conPeek(_params, 1),
                                        conPeek(_params, 2)
                                    );
        helper.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        BankChequeTable lBankChequeTable;
        SKS_EFT_Bank        sks_eft_bank;
        SKS_EFT_inboundFile sks_eft_inboundfile;
        boolean             AutoPost;
        SKS_EFTAR_Bank      sks_eftar_bank;
        SKS_EFTCNP_Bank     sks_eftcnp_bank;
        // 9192 CR -->
        int                     cnt = 0;
        SKS_EFT_FileDetail      sKS_EFT_FileDetail;
        // 9192 CR <--
        // CR-9541 -->
        LedgerJournalNameId     revJournalName;
        PaymMode                revPaymMode;
        // CR-9541 <--
        LedgerJournalTrans  lLedgerJournalTrans;
        LedgerJournalTable   PaymJournal; //<--- FDD-10590
        Map paymMap = new Map(Types::String, Types::Record);
        

        int x;
        for (x = 1; x <= conLen(conSelectedFileDetails); x++)
        {
            select firstonly sKS_EFT_FileDetail where sKS_EFT_FileDetail.RecId == conPeek(conSelectedFileDetails, x);
            
            if (!sKS_EFT_FileDetail)
            {
                throw error(Error::wrongUseOfFunction(funcName()));
            }

            if(sKS_EFT_FileDetail.PaymentCompany)//FDD-10590 --->
            {
                changecompany(sKS_EFT_FileDetail.PaymentCompany)
                {
                    PaymJournal = null;
                    lLedgerJournalTrans = null;
                    cnt++;
                    // 9192 CR <--

                    select firstOnly lLedgerJournalTrans where lLedgerJournalTrans.RecId == sKS_EFT_FileDetail.PaymentLineRecId;

                    if(sKS_EFT_FileDetail.Module == SKS_EFT_Module::AP)
                    {
                        if(!sKS_EFT_FileDetail.PaymentCompany) //FDD-10590
                        {
                            select firstonly * from sks_eft_bank where sks_eft_bank.BankAccountId == sKS_EFT_FileDetail.BankAccountId
                                    && sks_eft_bank.PaymMode == sKS_EFT_FileDetail.PaymMode;
                        }
                        else //FDD-10590 --->
                        {
                            sks_eft_bank = sks_eft_bank::findByCompany(sKS_EFT_FileDetail.PaymentCompany, sKS_EFT_FileDetail.BankAccountId, sKS_EFT_FileDetail.PaymMode);
                        }
                        //<--- FDD-10590

                        autopost = sks_eft_bank.AutoPostPaymentJournal;
                        // CR-9541 -->
                        revJournalName = sks_eft_bank.RevJournalName;
                        revPaymMode = sks_eft_bank.RevPaymMode;
                        // CR-9541 <--

                    }
                    else if(sKS_EFT_FileDetail.Module == SKS_EFT_Module::CNP)
                    {
                        if(!sKS_EFT_FileDetail.PaymentCompany)
                        {
                            select firstonly sks_eftcnp_bank where sks_eftcnp_bank.BankAccountId == sKS_EFT_FileDetail.BankAccountId
                                   && sks_eftcnp_bank.PaymMode == sKS_EFT_FileDetail.PaymMode;
                        }
                        else
                        {
                            sks_eftcnp_bank = sks_eftcnp_bank::findByCompany(sKS_EFT_FileDetail.PaymentCompany, sKS_EFT_FileDetail.BankAccountId, sKS_EFT_FileDetail.PaymMode);
                        }

                        autopost = sks_eftcnp_bank.AutoPostPaymentJournal;
                        revJournalName = sks_eftcnp_bank.RevJournalName;
                        revPaymMode = sks_eftcnp_bank.RevPaymMode;
                    }
                    else
                    {
                        if(!sKS_EFT_FileDetail.PaymentCompany) //FDD-10590
                        {
                            select firstonly sks_eftar_bank where sks_eftar_bank.BankAccountId == sKS_EFT_FileDetail.BankAccountId
                                    && sks_eftar_bank.PaymMode == sKS_EFT_FileDetail.PaymMode;
                        }
                        else //FDD-10590 --->
                        {
                            sks_eftar_bank = sks_eftar_bank::findByCompany(sKS_EFT_FileDetail.PaymentCompany,  sKS_EFT_FileDetail.BankAccountId, sKS_EFT_FileDetail.PaymMode);//FDD- 10590
                        }
                        //<--- FDD-10590
                        autopost = sks_eftar_bank.AutoPostPaymentJournal;
                        // CR-9541 -->
                        revJournalName = sks_eftar_bank.RevJournalName;
                        revPaymMode = sks_eftar_bank.RevPaymMode;
                        // CR-9541 <--

                    }

                    if(lLedgerJournalTrans.BankChequeNum != '')
                    {
                        select lBankChequeTable where lBankChequeTable.ChequeNum == lLedgerJournalTrans.BankChequeNum
                                && lBankChequeTable.AccountID == sKS_EFT_FileDetail.BankAccountId;

                        Args argsBankChequeTable = new Args();
                        argsBankChequeTable.record(lBankChequeTable);

                        BankChequeCancel::main(argsBankChequeTable);

                        SKS_EFT_Processing::createFileHistory(SKS_EFT_ActionHistory::paymReversalCreated, sKS_EFT_FileDetail.filerecid,
                                sks_eft_inboundfile.InboundFileNbr,strFmt("@SKS3042", lBankChequeTable.ChequeNum), '');
                    }
                    else
                    {
                        if (paymMap.exists(curExt()))
                        {
                            PaymJournal = paymMap.lookup(curExt());
                        }

                        PaymJournal = SKS_EFT_Reversal::createCustVendBankReversal(PaymJournal, lLedgerJournalTrans, revPaymMode, reversalDate, sKS_EFT_FileDetail, null, revJournalName); // CR-9541
                        paymMap.insert(curExt(),PaymJournal);
                    }
                }
            }
            //<--- FDD-10590
            else
            {
                cnt++;
                // 9192 CR <--

                select firstOnly lLedgerJournalTrans where lLedgerJournalTrans.RecId == sKS_EFT_FileDetail.PaymentLineRecId;

                if(sKS_EFT_FileDetail.Module == SKS_EFT_Module::AP)
                {
                    select firstonly * from sks_eft_bank where sks_eft_bank.BankAccountId == sKS_EFT_FileDetail.BankAccountId
                                && sks_eft_bank.PaymMode == sKS_EFT_FileDetail.PaymMode;
                    autopost = sks_eft_bank.AutoPostPaymentJournal;
                    // CR-9541 -->
                    revJournalName = sks_eft_bank.RevJournalName;
                    revPaymMode = sks_eft_bank.RevPaymMode;
                    // CR-9541 <--

                }
                else if(sKS_EFT_FileDetail.Module == SKS_EFT_Module::CNP)
                {
                    select firstonly sks_eftcnp_bank where sks_eftcnp_bank.BankAccountId == sKS_EFT_FileDetail.BankAccountId
                            && sks_eftcnp_bank.PaymMode == sKS_EFT_FileDetail.PaymMode;
                    autopost = sks_eftcnp_bank.AutoPostPaymentJournal;

                    revJournalName = sks_eftcnp_bank.RevJournalName;
                    revPaymMode = sks_eftcnp_bank.RevPaymMode;
                }
                else
                {
                    select firstonly sks_eftar_bank where sks_eftar_bank.BankAccountId == sKS_EFT_FileDetail.BankAccountId
                                && sks_eftar_bank.PaymMode == sKS_EFT_FileDetail.PaymMode;
                    autopost = sks_eftar_bank.AutoPostPaymentJournal;
                    // CR-9541 -->
                    revJournalName = sks_eftar_bank.RevJournalName;
                    revPaymMode = sks_eftar_bank.RevPaymMode;
                    // CR-9541 <--

                }
                if(lLedgerJournalTrans.BankChequeNum != '')
                {
                    select lBankChequeTable where lBankChequeTable.ChequeNum == lLedgerJournalTrans.BankChequeNum
                                && lBankChequeTable.AccountID == sKS_EFT_FileDetail.BankAccountId;

                    Args argsBankChequeTable = new Args();
                    argsBankChequeTable.record(lBankChequeTable);

                    BankChequeCancel::main(argsBankChequeTable);

                    SKS_EFT_Processing::createFileHistory(SKS_EFT_ActionHistory::paymReversalCreated, sKS_EFT_FileDetail.filerecid,
                                sks_eft_inboundfile.InboundFileNbr,strFmt("@SKS3042", lBankChequeTable.ChequeNum), '');
                }
                else
                {
                    if (paymMap.exists(curExt()))
                    {
                        PaymJournal = paymMap.lookup(curExt());
                    }

                    PaymJournal = SKS_EFT_Reversal::createCustVendBankReversal(PaymJournal, lLedgerJournalTrans, revPaymMode, reversalDate, sKS_EFT_FileDetail, null, revJournalName); // CR-9541
                    paymMap.insert(curExt(),PaymJournal);
                }
            }            
        }

        select firstonly sKS_EFT_FileDetail where sKS_EFT_FileDetail.RecId == conPeek(conSelectedFileDetails, 1);

        select firstonly inboundfilenbr from sks_eft_inboundfile where sks_eft_inboundfile.outboundfilerecid == SKS_EFT_filedetail.filerecid;

        MapEnumerator me = paymMap.getEnumerator();

        while (me.moveNext())
        {
            changecompany(me.currentKey())
            {
                LedgerJournalTable currentValue = me.currentValue();

                try
                {
                    this.autoPostJournal(AutoPost, currentValue, sks_eft_inboundFile, currentValue.JournalNum, sKS_EFT_FileDetail);
                }
                catch
                {
                    SKS_EFT_Processing::createFileHistory(SKS_EFT_ActionHistory::paymReversalFailed, SKS_EFT_filedetail.filerecid, sks_eft_inboundfile.InboundFileNbr,'', currentValue.JournalNum);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>autoPostJournal</Name>
				<Source><![CDATA[
    private void autoPostJournal(boolean _autopost, LedgerJournalTable _jourTable, SKS_EFT_InboundFile _sks_eft_inboundfile, ledgerjournalid   journalnum, SKS_EFT_filedetail _sKS_EFT_FileDetail)
    {
        LedgerJournalCheckPost  jourCheckPost;

        if (_autopost)
        {
            jourCheckPost = ledgerJournalCheckPost::newLedgerJournalTable(_jourTable, NoYes::Yes, NoYes::Yes);

            jourCheckPost.run();
            info(strFmt("@SKS:SKGIHBCreatedInCompany", _jourTable.JournalNum, _jourTable.DataAreaId)); // SKS_FDD_9664

            SKS_EFT_Processing::createFileHistory(SKS_EFT_ActionHistory::PostedPaymReversed, _sKS_EFT_FileDetail.filerecid, _sks_eft_inboundfile.InboundFileNbr,"@SKS3034", journalnum, SKS_EFT_FileStatus::NotApplicable, _sKS_EFT_FileDetail.RecId);

        }
        else
        {
            info("@SKS3017");
            info(strFmt("@SKS:SKGIHBCreatedInCompany", _jourTable.JournalNum, _jourTable.DataAreaId)); // SKS_FDD_9664
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>