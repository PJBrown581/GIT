<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_PL_PaymentCreation</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_PL_PaymentCreation
{
    /*public static SKS_EPY_Queue CreateJournalLine(SKS.ePayData.PLDocument PLDoc, LedgerJournalTable lLedgerJournalTable, sks_pl_setup sks_pl_setup, SKS_EPY_Queue SKS_EPY_Queue, PaymMode PLPaymMode)
    {
        int64                       ledgerDimension;
        SKS_PL_DocTypeSetup         lSKS_PL_DocTypeSetup;
        System.String               CustAccount;
        LedgerJournalAC             account;
        SKS_PL_GenPayLink           locGenPayLInk;
        AXSKSLedgerJournalTrans_CustPaymJour AXLedgerJournalTrans_CustPaymJour;
    
        try
        {
            lSKS_PL_DocTypeSetup = SKS_PL_DocTypeSetup::findByDocType(SKS_PL_DocType::SalesOrderPrePaym);//As we add doctypes this well need to change.
            ttsBegin;
    
            AXLedgerJournalTrans_CustPaymJour = AxSKSLedgerJournalTrans_custpaymjour::newledgerjournaltable(lLedgerJournalTable);
    
            AXLedgerJournalTrans_CustPaymJour.parmJournalNum(lLedgerJournalTable.JournalNum);
            AXLedgerJournalTrans_CustPaymJour.parmCompany(lLedgerJournalTable.company());
            AXLedgerJournalTrans_CustPaymJour.parmSettleVoucher(SKS_LB_Payment::getCustParameterSettlementType());
            AXLedgerJournalTrans_CustPaymJour.parmLoadingDate(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()));
            AXLedgerJournalTrans_CustPaymJour.parmPaymMode(PLPaymMode);
            AxLedgerJournalTrans_CustPaymJour.parmDocumentDate(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()));
            AxLedgerJournalTrans_CustPaymJour.parmAmountCurCredit(PLDoc.get_Amount());
            AxLedgerJournalTrans_CustPaymJour.parmPrepayment(lSKS_PL_DocTypeSetup.Prepayment);
    
            CustAccount = PLDoc.get_CustomerNumber();
            Account = CustAccount;
            ledgerDimension = DimensionStorage::getDynamicAccount(Account, LedgerJournalACType::Cust);
    
            AxLedgerJournalTrans_CustPaymJour.parmLedgerDimension(ledgerDimension);
            AxLedgerJournalTrans_CustPaymJour.parmOffsetAccountType(CustPaymModeTable::find(PLPaymMode).AccountType);
            AxLedgerJournalTrans_CustPaymJour.parmImportDate(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()));
            AxLedgerJournalTrans_CustPaymJour.parmCurrencyCode(PLDoc.get_Currency());
            AxLedgerJournalTrans_CustPaymJour.parmTxt(locGenPayLInk.SalesID);
            AxLedgerJournalTrans_CustPaymJour.ParmSKS_PL_PayLinkID(PLDoc.get_Id());
    
            locGenPayLInk = SKS_PL_GenPayLink::FindByPayLinkDocID(PLDoc.get_Id());
            AxLedgerJournalTrans_CustPaymJour.parmPaymentNotes(locGenPayLInk.SalesID);
            AxLedgerJournalTrans_CustPaymJour.save();
            //Need to save the ledgerjournaltrans before entering the offset account or the save will blank it out
            AxLedgerJournalTrans_CustPaymJour.parmOffsetLedgerDimension(CustPaymModeTable::find(PLPaymMode).PaymentLedgerDimension);
            AxLedgerJournalTrans_CustPaymJour.save();
            ttsCommit;
    
            SKS_EPY_Queue.PaymLineRecID = AxLedgerJournalTrans_CustPaymJour.parmRecId();
            SKS_EPY_Queue.Status = SKS_EPY_Status::Completed;
        }
        catch(Exception::Error)
        {
            SKS_EPY_Queue.ErrorWarning = "@SKS3369";
            SKS_EPY_Queue.Status = SKS_EPY_Status::Failed;
            throw Exception::Error;
        }
    
        //Auto-posting functionality
        if(sks_pl_setup.PLAutoPost && sks_pl_setup.PaymentCreation == SKS_EPY_PaymCreation::PerPaym)
        {
            try
            {
                LedgerJournalPost::postJournal(lLedgerJournalTable, NoYes::No, NoYes::No, NoYes::Yes);
            }
            catch(Exception::Error)
            {
                SKS_EPY_Queue.ErrorWarning = "@SKS3370";
                SKS_EPY_Queue.Status = SKS_EPY_Status::CompletedWithWarnings;
            }
        }
    
        return SKS_EPY_Queue;
    }*/

    /*public static SKS_EPY_Queue CreatePaymentJournal(SKS.ePayData.PLDocument _Document, SKS_PL_Setup _SKS_PL_Setup, SKS_EPY_Queue    _Queue)
    {
        PaymMode    PLPaymMode;
        LedgerJournalTable lLedgerJournalTable;
        CustTable   lCustTable;
        CustAccount cust;
        CustPaymModeTable   CustPaymModeTable;
        AxSKSLedgerJournalTable_CustVend lAxLedgerJournalTable_CustVend;
        SKS.ePayData.PFPaymentCard      locPaymentCard;
        SKS.ePayData.PFTransaction      locTransaction;
        SKS_PL_CardMappingSetup         PLCardSetup;
        System.String                   CardName;
        SKS_EB_Description60            CCTemp;
        SKS_PL_CreditCards              CCardType;
        container                       virtualCompanies;
        ;
    
        virtualCompanies = sks_eb_virtualCompany::getPayLinkCompanies();
    
        cust = _Document.get_CustomerNumber();
    
        select firstonly crossCompany:virtualCompanies lCustTable where lCustTable.AccountNum == cust;
    
        changeCompany(lCustTable.company())
        {
            //Finding Method of payment from card name
            locTransaction = _Document.get_PayFabricTransactionData();
            locPaymentCard = locTransaction.get_Card();
            //Marshal from System.string to bound type
            CardName = locPaymentCard.get_CardName();
            ccTemp = CardName;
    
            select firstOnly crossCompany:virtualCompanies  PaymMode from PLCardSetup where PLCardSetup.CreditCards == str2enum(CCardType, CCTemp);
    
            PLPaymMode = PLCardSetup.PaymMode;
    
            if (!CustPaymModeTable::exist(PLPaymMode))
            {
                if (PLPaymMode != "")
                {
                    _Queue.ErrorWarning = strFmt("@SKS3371", PLPaymMode);
                    _Queue.Status = SKS_EPY_Status::CompletedWithWarnings;
                }
                PLPaymMode = _SKS_PL_Setup.PaymMode;
            }
    
            select firstonly AccountType, paymentledgerDimension from CustPaymModeTable where CustPaymModeTable.PaymMode == PLPaymMode;
    
            if(!lCustTable)
            {
                _Queue.Action = SKS_EPY_Action::RetrieveFromPayLinkFail;
                _Queue.ErrorWarning = "@SKS3372";
                _Queue.Status = SKS_EPY_Status::Failed;
                return _Queue;
            }
    
            try
            {
                if(_SKS_PL_Setup.PaymentCreation == SKS_EPY_PaymCreation::PerPaym)
                {
                    lAxLedgerJournalTable_CustVend = new AxSKSLedgerJournalTable_CustVend();
                    lAxLedgerJournalTable_CustVend.parmJournalName(_SKS_PL_Setup.JournalName);
                    lAxLedgerJournalTable_CustVend.ParmisPayLinkCreated(NoYes::Yes);
                    lAxLedgerJournalTable_CustVend.parmOffsetAccountType(CustPaymModeTable.AccountType);
                    lAxLedgerJournalTable_CustVend.parmOffsetLedgerDimension(CustPaymModeTable.PaymentLedgerDimension);
                    lAxLedgerJournalTable_CustVend.save();
    
                    lLedgerJournalTable = lAxLedgerJournalTable_CustVend.currentRecord();
                }
                else
                {
                    select firstOnly lLedgerJournalTable where
                    lLedgerJournalTable.createdDateTime >= DateTimeUtil::newDateTime(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()), 0)//today at 12:00AM
                    && lLedgerJournalTable.createdDateTime <= DateTimeUtil::newDateTime(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()), 86400)//today at 11:59PM
                    && lLedgerJournalTable.SKS_PL_isPayLink == NoYes::Yes
                    && lLedgerJournalTable.Posted == noyes::No;
    
                    if(!lLedgerJournalTable)
                    {
                        lAxLedgerJournalTable_CustVend = new AxSKSLedgerJournalTable_CustVend();
                        lAxLedgerJournalTable_CustVend.parmJournalName(_SKS_PL_Setup.JournalName);
                        lAxLedgerJournalTable_CustVend.ParmisPayLinkCreated(NoYes::Yes);
                        lAxLedgerJournalTable_CustVend.parmOffsetAccountType(CustPaymModeTable.AccountType);
                        lAxLedgerJournalTable_CustVend.parmOffsetLedgerDimension(CustPaymModeTable.PaymentLedgerDimension);
                        lAxLedgerJournalTable_CustVend.save();
    
                        lLedgerJournalTable = lAxLedgerJournalTable_CustVend.currentRecord();
                    }
                }
    
                _Queue.JournalNum = lLedgerJournalTable.JournalNum;
                _Queue = SKS_PL_PaymentCreation::CreateJournalLine(_Document, lLedgerJournalTable, _SKS_PL_Setup, _Queue, PLPaymMode);
    
            }
            catch(Exception::Error)
            {
                _Queue.ErrorWarning = "@SKS3374";
                _Queue.Status = SKS_EPY_Status::Failed;
                throw Exception::Error;
            }
        }
        return _Queue;
    }*/

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>WriteToQueue</Name>
				<Source><![CDATA[
    public static SKS_EPY_Queue WriteToQueue(str JSONData, CustVendAC _CustAccountNum, SKS_EPY_Status _status, System.String _errorText, str _paymNum, AmountCur _amount, CurrencyCode _currencyCode)
    {
        SKS_EPY_Queue   sks_epy_queue;
        CustTable       custTable;
        DirPartyTable   dirPartyTable;
        container       virtualcompanies;
        ;
        virtualCompanies = sks_eb_virtualCompany::getPayLinkCompanies();
        ttsBegin;
    
        select forUpdate firstOnly SKS_epy_queue order by sks_epy_queue.recid desc where sks_epy_queue.Entity == SKS_EPY_Entity::Payment;
    
        if(_errorText != null && sks_epy_queue.Action == SKS_EPY_Action::RetrievalFromEPayFailed)
        {
            sks_epy_queue.ErrorWarning = _errorText;
            sks_epy_queue.Status = SKS_EPY_Status::Failed;
            sks_epy_queue.SendReceiveDateTime = DateTimeUtil::utcNow();
            sks_epy_queue.update();
        }
        else
        {
            sks_epy_queue = null;
            select crossCompany:virtualcompanies Party, AccountNum from CustTable join dirPartyTable where custTable.Party == dirPartyTable.recid
                && custTable.accountNum == _CustAccountNum;
    
            sks_epy_queue.AccountNum = _CustAccountNum;
            sks_epy_queue.AccountName = dirPartyTable.Name;
            sks_epy_queue.Action = SKS_EPY_Action::PaymFromPayLink;
            sks_epy_queue.isPayLink = NoYes::Yes;
            sks_epy_queue.ChangeType = SKS_EPY_ChangeType::Created;
            sks_epy_queue.Entity = SKS_EPY_Entity::Payment;
            sks_epy_queue.DataStr = JSONData;
            sks_epy_queue.Status = _status;
            if(_errorText != null)
            {
                sks_epy_queue.ErrorWarning = _errorText;
            }
            sks_epy_queue.PaymNum = _paymNum;
            sks_epy_queue.Amount = _amount;
            sks_epy_queue.CurrencyCode = _currencyCode;
            sks_epy_queue.insert();
    
        }
        ttsCommit;
    
        return sks_epy_queue;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>