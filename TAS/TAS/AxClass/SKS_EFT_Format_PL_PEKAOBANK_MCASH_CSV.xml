<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_PL_PEKAOBANK_MCASH_CSV</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_PL_PEKAOBANK_MCASH_CSV
/// </summary>
class SKS_EFT_Format_PL_PEKAOBANK_MCASH_CSV extends SKS_EFT_Format
{
    #define.FormatVersion('20220608')
    #define.ELIXIR('ELIXIR')
    #define.SORBNET('SORBNET')
    #define.PAYMTOUS('PAYMTOUS')
    #define.SPLIT('SPLIT')

    #define.Separator(',')
    #define.DoubleQuotes('"')

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    protected void formatStructure()
    {
        while(mSKS_EFT_FileDetail)
        {
            // Get SKS_EFT_FileFormatPaymSpec
            this.getSKS_EFT_FileFormatPaymSpec();

            mSKS_EFT_FileDetail_BankAccount = SKS_EFT_FileDetail_BankAccount::find(mSKS_EFT_FileDetail.RecId);
            
            this.rec_PaymentDetails();

            next mSKS_EFT_FileDetail;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCodePage</Name>
				<Source><![CDATA[
    protected int getCodePage()
    {
        return 1252;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wrapField</Name>
				<Source><![CDATA[
    private str wrapField(str _field = '', int _fieldLength = 0, boolean doubleQuotes = false, boolean _addSeparator = true)
    {
        str text;
        ;
        if(_fieldLength > 0)
        {
            text = subStr(_field, 1, _fieldLength);
        }
        else
        {
            text = _field;
        }
        if(doubleQuotes)
        {
            text = #DoubleQuotes + text + #DoubleQuotes;
        }
        if(_addSeparator)
        {
            text = text + #Separator;
        }
        
        return text;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceNbrs</Name>
				<Source><![CDATA[
    protected str getInvoiceNbrs()
    {
        SKS_EFT_FileDetail invSKS_EFT_FileDetail;
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        str invString;
    
        select InvoiceNumber from invSKS_EFT_FileDetail where invSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId;
    
        while(invSKS_EFT_FileDetail)
        {
            if(invSKS_EFT_FileDetail.InvoiceNumber == '')
            {
                // If no invoice number, go to next record
                next invSKS_EFT_FileDetail;
                continue;
            }
            sb.Append(invSKS_EFT_FileDetail.InvoiceNumber);
    
            next invSKS_EFT_FileDetail;
    
            if(invSKS_EFT_FileDetail)
            {
                sb.Append(' ');
            }
        }
    
        invString = this.CharacterReplacement(sb.ToString());
        return invString;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_PaymentDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_PaymentDetails
    /// </summary>
    /// <returns>true</returns>
    public boolean rec_PaymentDetails()
    {
        //........................................................................................................
        // Nbr   Description                                                    length
        //1     Order code                                                          3
        //2     Execution date                                                      8
        //3     Amount                                                              15
        //4     Ordering party's bank routing number                                8
        //5     Zero field                                                          1
        //6     Ordering party’s bank account number (in the NRB standard)          26
        //7     Contractor’s bank account number (in the NRB standard)              26
        //8     Ordering party’s name and address (ZUS, US payer’s details)         4*35
        //9     Contractor’s name and address ZUS, US office’s details)             4*35
        //10    Zero field                                                          1
        //11    Contractor’s bank routing number                                    8
        //12    Payment purpose                                                     4*35
        //13    Blank field                                                         0
        //14    Blank field                                                         0
        //15    Order classification                                                2
        //16    Customer-Bank Information                                           1*35|4*35
        //17    Order confirmations - e-mail address                                70
        //18    Confirmation of orders - SMS                                        20
        //...........................................................................................................
        SKS_EFT_FileDetail sks_EFT_FileDetail;
        VendInvoiceJour    vendInvoiceJour;
        str  payerDetails, contractorDetails, value, paymentDetails, description;
        str  taxIDTp, taxIDContent, periodYear, periodType, periodNo, paymentSymbol;
        AmountMST amt;
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        description = LedgerJournalTrans::findRecId(mSKS_EFT_FileDetail.PaymentLineRecId, false).Txt;

        //1     Order code                                                          3
        sb.Append(this.wrapField('110'));

        //2     Execution date                                                      8
        sb.Append(this.wrapField(SKS_PP_StringFormats::strDateYYYYMMDD(mSKS_EFT_FileDetail.EffectiveDate)));

        //3     Amount                                                              15
        sb.Append(this.wrapField(strRem(num2Str(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1, 1, 2, 1, 0), '.'), 15));

        //4     Ordering party's bank routing number                                8
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.BankBankTransit,8));

        //5     Zero field                                                          1
        sb.Append(this.wrapField('0'));

        //6     Ordering party’s bank account number (in the NRB standard)          26
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.BankBankIBAN,26));

        //7     Contractor’s bank account number (in the NRB standard)              26
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.DepBankIBAN,26));

        //8     Ordering party’s name and address (ZUS, US payer’s details)         4*35
        payerDetails = subStr(mSKS_EFT_FileDetail_BankAccount.WOrdPartyName, 1, 35);
        
        if(mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr || mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr2)
        {
            payerDetails = payerDetails + '|'+  subStr(mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr + ' ' + mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr2,1,35);
        }
        if(mSKS_EFT_FileDetail_BankAccount.WOrdPartyZipCode || mSKS_EFT_FileDetail_BankAccount.WOrdPartyCity)
        {
            payerDetails = payerDetails + '|'+  subStr(mSKS_EFT_FileDetail_BankAccount.WOrdPartyZipCode + ' ' + mSKS_EFT_FileDetail_BankAccount.WOrdPartyCity,1,35);
        }
        if(mSKS_EFT_FileDetail_BankAccount.WOrdPartyState)
        {
            payerDetails = payerDetails + '|'+  subStr(mSKS_EFT_FileDetail_BankAccount.WOrdPartyState, 1, 35);
        }
        sb.Append(this.wrapField(this.CharacterReplacement(payerDetails), 140, true));

        //9     Contractor’s name and address ZUS, US office’s details)             4*35
        contractorDetails = subStr(mSKS_EFT_FileDetail_VendAddress.BeneName, 1, 35);

        if(mSKS_EFT_FileDetail_VendAddress.BeneAddr || mSKS_EFT_FileDetail_VendAddress.BeneAddr2)
        {
            contractorDetails = contractorDetails + '|'+  subStr(mSKS_EFT_FileDetail_VendAddress.BeneAddr + ' ' + mSKS_EFT_FileDetail_VendAddress.BeneAddr2,1,35);
        }
        if(mSKS_EFT_FileDetail_VendAddress.BeneZipPostal || mSKS_EFT_FileDetail_VendAddress.BeneCity)
        {
            contractorDetails = contractorDetails + '|'+  subStr(mSKS_EFT_FileDetail_VendAddress.BeneZipPostal + ' ' + mSKS_EFT_FileDetail_VendAddress.BeneCity,1,35);
        }
        if(mSKS_EFT_FileDetail_VendAddress.BeneState)
        {
            contractorDetails = contractorDetails + '|'+  subStr(mSKS_EFT_FileDetail_VendAddress.BeneState, 1, 35);
        }
        sb.Append(this.wrapField(this.CharacterReplacement(contractorDetails), 140, true));

        //10    Zero field                                                          1
        sb.Append(this.wrapField('0'));

        //11    Contractor’s bank routing number                                    8
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.DepBankTransit, 8, true));

        //12    Payment purpose                                                     4*35        
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #SPLIT)
        {
            while select InvoiceNumber, AccountNum, InvoiceDate from SKS_EFT_FileDetail where sks_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId
            {
                select firstOnly SumTax from  vendInvoiceJour
                    where   vendInvoiceJour.InvoiceAccount    ==  sks_EFT_FileDetail.AccountNum &&
                            vendInvoiceJour.InvoiceDate       ==  sks_EFT_FileDetail.InvoiceDate &&
                            vendInvoiceJour.InvoiceId         ==  sks_EFT_FileDetail.InvoiceNumber;

                amt += vendInvoiceJour.SumTax;
            }

            paymentDetails = '/VAT/'+num2str(amt,0,2,2,0) + '/IDC/'+mSKS_EFT_FileDetail.VATNum + '/INV/'+this.getInvoiceNbrs() + '/TXT/'+description;

            sb.Append(this.wrapField(this.CharacterReplacement(paymentDetails), 140, true));
        }
        else if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #PAYMTOUS)
        {
            description = LedgerJournalTrans::findRecId(mSKS_EFT_FileDetail.PaymentLineRecId, false).Txt;

            taxIDTp         = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('TaxIDType', mSKS_EFT_FileDetail.RecId));
            taxIDContent    = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('TaxIDContent', mSKS_EFT_FileDetail.RecId));
            periodYear      = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('PeriodYear', mSKS_EFT_FileDetail.RecId));
            periodType      = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('PeriodType', mSKS_EFT_FileDetail.RecId));
            periodNo        = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('PeriodNo', mSKS_EFT_FileDetail.RecId));
            paymentSymbol   = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('PaymentSymbol', mSKS_EFT_FileDetail.RecId));

            paymentDetails = '/TI/'+taxIDTp +taxIDContent + '/OKR/'+ periodYear + periodType + periodNo + '/SFP/'+ paymentSymbol + '/TXT/'+ description;

            sb.Append(this.wrapField(this.CharacterReplacement(paymentDetails), 140, true));
        }
        else
        {
            if(value)
            {
                paymentDetails = subStr(value, 1, 35);

                if(strlen(value) > 35)
                {
                    paymentDetails = paymentDetails  + '|' +subStr(value, 36, 35);
                }
                if(strlen(value) > 70)
                {
                    paymentDetails = paymentDetails  + '|' +subStr(value, 71, 35);
                }
                if(strlen(value) > 105)
                {
                    paymentDetails = paymentDetails  + '|' +subStr(value, 106, 35);
                }
                sb.Append(this.wrapField(this.CharacterReplacement(paymentDetails), 140, true));
            }
            else
            {
                sb.Append(this.wrapField('', 0, true));
            }
        }

        //13    Blank field                                                         0
        sb.Append(this.wrapField('', 0, true));

        //14    Blank field                                                         0
        sb.Append(this.wrapField('', 0, true));

        //15    Order classification                                                2
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #ELIXIR:
            case #SORBNET:
                sb.Append(this.wrapField('51',2,true));
                break;
            case #SPLIT:
                sb.Append(this.wrapField('53',2,true));
                break;
            case #PAYMTOUS:
                sb.Append(this.wrapField('71',2,true));
                break;
        }

        //16    Customer-Bank Information                                           1*35|4*35
        sb.Append(this.wrapField('', 0, true));

        //17    Order confirmations - e-mail address                                70
        sb.Append(this.wrapField('', 0, true));

        //18    Confirmation of orders - SMS                                        20
        sb.Append(this.wrapField('', 0, true, false));

        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectPaymentRecords</Name>
				<Source><![CDATA[
    [SuppressBPWarning('BPErrorSelectUsingFirstOnly', 'The buffer is used in next statement or in a datasource query loop.')]
    protected void selectPaymentRecords()
    {
        //------------------------------------------------------------------------------------------------------
        // Standard payment selction
        // Override if different selection is need for a format
        //------------------------------------------------------------------------------------------------------
    
        //Order by clause must match the clause in the SKS_EFT_Processing.SumByPayment
        select * from mSKS_EFT_FileDetail
            join mSKS_EFT_FileDetail_VendAddress
              order by mSKS_EFT_FileDetail.RecordSection,
                   mSKS_EFT_FileDetail.PaymMode,
                   mSKS_EFT_FileDetail.BankAccountId,
                   mSKS_EFT_FileDetail.PaymentCurrencyCode,
                   mSKS_EFT_FileDetail.PaymSpec,
                   mSKS_EFT_FileDetail.EffectiveDate,
                   mSKS_EFT_FileDetail.DepCountryRegionId,
                   mSKS_EFT_FileDetail.RecordType,
                   mSKS_EFT_FileDetail.AccountNum,
                   mSKS_EFT_FileDetail.PaymentReference,
                   mSKS_EFT_FileDetail.RecId
          where mSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                mSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                mSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary&&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_VendAddress.RefRecId ;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>