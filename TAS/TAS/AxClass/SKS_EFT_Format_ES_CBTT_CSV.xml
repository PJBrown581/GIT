<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_ES_CBTT_CSV</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_ES_CBTT_CSV extends SKS_EFT_Format
/// </summary>
class SKS_EFT_Format_ES_CBTT_CSV extends SKS_EFT_Format
{
    #define.FormatVersion('20220513')
    #define.Separator(',')

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wrapField</Name>
				<Source><![CDATA[
    private str wrapField(str _field = '', boolean _addSeparator = true)
    {
        str text;
        
        text = _field;

        if(_addSeparator)
        {
            text += #Separator;
        }
        return text;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Header</Name>
				<Source><![CDATA[
    public boolean rec_Header()
    {
        //---------------------------------------------------------------------------------
        //Nbr   Description
        //  1       Individual Id
        //  2       Customer Name
        //  3       Cust Account No
        //  4       Account Type
        //  5       Payment Amount
        //  6       Credit/Debit Type
        //  7       Effective Date
        //  8       Routing Number
        //  9       Addenda
        //---------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
    
        // 1 Company ID
        sb.Append(this.wrapField('Company ID'));//SKS_DevOps_15031

        // 2    Individual Id
        sb.Append(this.wrapField('Individual ID'));
    
        // 3    Customer Name
        sb.Append(this.wrapField('Customer Name'));
    
        // 4    Cust Acct No
        sb.Append(this.wrapField('Cust Acct No'));//SKS_DevOps_15170, 15281
    
        // 5    Account Type
        sb.Append(this.wrapField('Account Type'));
    
        // 6    Payment Amount
        sb.Append(this.wrapField('Payment Amount'));//SKS_DevOps_15170
    
        // 7    Credit/Debit Type
        sb.Append(this.wrapField('Credit/Debit Type'));//SKS_DevOps_15170
    
        // 8    Effective Date
        sb.Append(this.wrapField('Effective Date'));

        // 9    Routing Number
        sb.Append(this.wrapField('Routing Number'));

        // 10    Addenda
        sb.Append(this.wrapField('Addenda', false));
    
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    protected void formatStructure()
    {
        this.rec_Header();
    
        while(mSKS_EFT_FileDetail)
        {
            
            this.rec_Details();
    
            next mSKS_EFT_FileDetail;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Details</Name>
				<Source><![CDATA[
    public boolean rec_Details()
    {
        //                                                                     
        //  1       Individual Id
        //  2       Customer Name
        //  3       Cust Acct No
        //  4       Account Type
        //  5       Payment Amount
        //  6       Credit/Debit
        //  7       Effective Date
        //  8       Routing Number
        //  9       Addenda
        //                                                                      
        System.Text.StringBuilder sb = new System.Text.StringBuilder(); 
        str addenda;

        // 1 Company Id
        sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyId)));

        //  2       Individual Id
        sb.Append(this.wrapField(subStr(this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference), 1, 15)));

        //  3       Customer Name
        sb.Append(this.wrapField(subStr(strRem(this.CharacterReplacement(mSKS_EFT_FileDetail.AccountName), ','), 1, 22)));      //SKS_VSTS_13663

        //  4     Cust Acct No
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.DepBankAcct));

        //  5     Account Type
        if(mSKS_EFT_FileDetail.DepBankAcctType  == BankAccountType::CheckingAccount)
        {
            sb.Append(this.wrapField('DDA'));
        }
        else if(mSKS_EFT_FileDetail.DepBankAcctType == BankAccountType::SavingsAccount)
        {
            sb.Append(this.wrapField('SAV'));
        }
        else if(mSKS_EFT_FileDetail.DepBankAcctType == BankAccountType::LoanAccount)
        {
            sb.Append(this.wrapField('LOA'));
        }

        //  6       Payment Amount
        sb.Append(this.wrapField(num2Str(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1, 1,2,1,0)));

        //  7       Debit or credit
        if(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur > 0)
        {
            sb.Append(this.wrapField('DR'));
        }
        else
        {
            sb.Append(this.wrapField('CR'));
        }

        //  8       Effective Date
        sb.Append(this.wrapField(SKS_PP_StringFormats::strDateYYYYMMDD(mSKS_EFT_FileDetail.EffectiveDate)));

        //  9       Routing Number
        sb.Append(this.wrapField(SKS_PP_StringFormats::strFill(9, mSKS_EFT_FileDetail.DepBankTransit, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left)));

        //  10       Addenda
        addenda = SKS_EFT_Format::getCodelookupvalue('Addenda', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank);//SKS_DevOps_15031
        if(addenda)//SKS_VSTS_13224
        {
            sb.Append(this.wrapField(this.CharacterReplacement(addenda), false));
        }
        else
        {
            sb.Append(this.wrapField(this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('AddendaBE', mSKS_EFT_FileDetail.RecId)), false));
        }

        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectPaymentRecords</Name>
				<Source><![CDATA[
    protected void selectPaymentRecords()
    {
        //------------------------------------------------------------------------------------------------------
        // Standard payment selction
        // Override if different selection is need for a format
        //------------------------------------------------------------------------------------------------------
    
        //Order by clause must match the clause in the SKS_EFT_Processing.SumByPayment
        select * from mSKS_EFT_FileDetail
          order by mSKS_EFT_FileDetail.RecordSection,
                    mSKS_EFT_FileDetail.PaymMode,
                   mSKS_EFT_FileDetail.PaymSpec,
                   mSKS_EFT_FileDetail.EffectiveDate,
                   mSKS_EFT_FileDetail.DepCountryRegionId,
                   mSKS_EFT_FileDetail.RecordType,
                   mSKS_EFT_FileDetail.BankAccountId,
                   mSKS_EFT_FileDetail.AccountNum,
                   mSKS_EFT_FileDetail.PaymentReference,
                   mSKS_EFT_FileDetail.RecId
        join mSKS_EFT_FileDetail_BankAccount
          where mSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                mSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                mSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary &&
                mSKS_EFT_FileDetail_BankAccount.RefRecId == mSKS_EFT_FileDetail.RecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>