<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_CTRL_US_RBSC_EDI831_052913</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_EFT_CTRL_US_RBSC_EDI831_052913 extends SKS_EFT_Format_US_RBSC_EDI820_052913
{
    str     mISAsegment;
    str     mGSsegment;
    str     mGECtrlnum;
    str     mIEAsegment;
    str     mSLineEnd;
    str     mSSeparator;
    real    mMontAmt;
    real    mCrAmt;
    real    mDbAmt;
    int     mSegmtCnt;
    int     mCtrlQty;
    int     mCrQty;
    int     mDbQty;
    int     mRecCount;
    str     mGSvalue;

    System.Text.StringBuilder sb;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    protected void formatStructure()
    {
        str    mISAvalue;
        str    mIEAvalue;

        sb = new System.Text.StringBuilder();

        mSegmtCnt = 0;
        mRecCount = 0;

        mISAvalue = strDel(mISAsegment, 91, 1);
        sb.Append(strIns(mISAvalue, '9', 91));

        mGSsegment = strReplace(mGSsegment, 'RA', 'CT');
        mGSvalue = strDel(mGSsegment, 41, 1);
        mGSvalue = strIns(mGSvalue, '9', 41);
        sb.Append(mGSvalue);

        this.rec_ST831();
        this.rec_BGN();
        this.rec_N9();
        this.rec_CREDITAMT();
        this.rec_CRQTY();
        this.rec_DEBITAMT();
        this.rec_DBQTY();
        this.rec_AMT();
        this.rec_QTY();
        this.rec_SE831();
        this.rec_GE831();

        mIEAvalue = strDel(mIEAsegment, 7, 1);
        sb.Append(strIns(mIEAvalue, '9', 7));

        this.buildString();
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildString</Name>
				<Source><![CDATA[
    boolean buildString()
    {
        System.Text.StringBuilder lsb;
        str record = sb.ToString();
        int pos = 1;
        int length;
        int recMod;
        int lineCount;
        str value;
        int totalCount = 1;
        
        length = strLen(record);
        lineCount = length div 80;
        recMod = length mod 80;
        
        if(recMod > 0)
        {
            lineCount++;
        }
        
        // Create the compressed records
        while(lineCount >= totalCount)
        {
            lsb = new System.Text.StringBuilder();
            value = subStr(record, pos, 80);
            pos = pos + 80;
            
            // Pmt Related Info 04-83
            lsb.Append(value);
            this.fileWrite(lsb.ToString());
            totalCount++;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_AMT</Name>
				<Source><![CDATA[
    boolean rec_AMT()
    {
        mSegmtCnt++;
        mRecCount++;

        sb.Append('AMT');
        sb.Append(mSSeparator);

        // Amount Qualifier Code
        sb.Append('2');
        sb.Append(mSSeparator);

        //  Monetary Amount
        sb.Append(num2str(this.getPositiveAmount(mCrAmt + mDbAmt), 0, 2, 0 ,0));

        sb.Append(mSLineEnd);


        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_BGN</Name>
				<Source><![CDATA[
    boolean rec_BGN()
    {
        mSegmtCnt++;
        mRecCount++;

        sb.Append('BGN');
        sb.Append(mSSeparator);

        //  Transaction Set Purpose Code
        sb.Append('06');
        sb.Append(mSSeparator);

        //  Reference Number
        sb.Append(subStr(mGSvalue, 41, 9));
        sb.Append(mSSeparator);

        //  Date
        sb.Append(SKS_PP_StringFormats::strDateYYYYMMDD(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone())));

        sb.Append(mSLineEnd);


        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_CREDITAMT</Name>
				<Source><![CDATA[
    boolean rec_CREDITAMT()
    {
        mSegmtCnt++;
        mRecCount++;

        sb.Append('AMT');
        sb.Append(mSSeparator);

        // Amount Qualifier Code
        sb.Append('2');
        sb.Append(mSSeparator);

        //  Monetary Amount
        sb.Append(num2str((mCrAmt), 0, 2, 0 ,0));
        sb.Append(mSSeparator);

        // Credit/Debit Flag Code
        sb.Append('C');

        sb.Append(mSLineEnd);

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_CRQTY</Name>
				<Source><![CDATA[
    boolean rec_CRQTY()
    {
        mSegmtCnt++;
        mRecCount++;

        sb.Append('QTY');
        sb.Append(mSSeparator);

        //  Quantity Qualifier
        sb.Append('53');
        sb.Append(mSSeparator);

        //  Quantity
        sb.Append(substr(int2str(mCrQty), 1, 15));

        sb.Append(mSLineEnd);

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_DBQTY</Name>
				<Source><![CDATA[
    boolean rec_DBQTY()
    {
        mSegmtCnt++;
        mRecCount++;

        sb.Append('QTY');
        sb.Append(mSSeparator);

        //  Quantity Qualifier
        sb.Append('53');
        sb.Append(mSSeparator);

        //  Quantity
        sb.Append(substr(int2str(mDbQty), 1, 15));

        sb.Append(mSLineEnd);

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_DEBITAMT</Name>
				<Source><![CDATA[
    boolean rec_DEBITAMT()
    {
        mSegmtCnt++;
        mRecCount++;

        sb.Append('AMT');
        sb.Append(mSSeparator);

        // Amount Qualifier Code
        sb.Append('2');
        sb.Append(mSSeparator);

        //  Monetary Amount
        sb.Append(num2str((mDbAmt), 0, 2, 0 ,0));
        sb.Append(mSSeparator);

        // Credit/Debit Flag Code
        sb.Append('D');

        sb.Append(mSLineEnd);

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_GE831</Name>
				<Source><![CDATA[
    boolean rec_GE831()
    {
        mRecCount++;

        sb.Append('GE');
        sb.Append(mSSeparator);

        //  Number of Transactions Sets Included
        sb.Append('1');
        sb.Append(mSSeparator);

        //  Group Control Number
        sb.Append(subStr(mGSvalue, 41, 9));

        sb.Append(mSLineEnd);

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N9</Name>
				<Source><![CDATA[
    boolean rec_N9()
    {
        mSegmtCnt++;
        mRecCount++;

        sb.Append('N9');
        sb.Append(mSSeparator);

        //  Reference Number Qualifier
        sb.Append('BT');
        sb.Append(mSSeparator);

        //  Batch Number
        sb.Append(subStr(mGSsegment, 41, 9));

        sb.Append(mSLineEnd);

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_QTY</Name>
				<Source><![CDATA[
    boolean rec_QTY()
    {
        mSegmtCnt++;
        mRecCount++;

        sb.Append('QTY');
        sb.Append(mSSeparator);

        //  Quantity Qualifier
        sb.Append('53');
        sb.Append(mSSeparator);

        //  Quantity
        sb.Append(substr(int2str(mCtrlQty), 1, 15));

        sb.Append(mSLineEnd);

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_SE831</Name>
				<Source><![CDATA[
    boolean rec_SE831()
    {
        mSegmtCnt++;
        mRecCount++;

        sb.Append('SE');
        sb.Append(mSSeparator);

        //  Number of Included Segments
        sb.Append(mSegmtCnt);
        sb.Append(mSSeparator);

        //  Transaction Set Control Number
        sb.Append('000000001');

        sb.Append(mSLineEnd);

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_ST831</Name>
				<Source><![CDATA[
    boolean rec_ST831()
    {
        mSegmtCnt++;
        mRecCount++;

        sb.Append('ST');
        sb.Append(mSSeparator);

        //1     Transaction Set ID Code
        sb.Append('831');
        sb.Append(mSSeparator);

        //2     Trans. Set Cont. Number
        sb.Append('000000001');

        sb.Append(mSLineEnd);

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCreditAmt</Name>
				<Source><![CDATA[
    public Void setCreditAmt(real _mcrAmt)
    {
        mCrAmt = _mcrAmt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCreditQuantity</Name>
				<Source><![CDATA[
    public Void setCreditQuantity(int _mCrlQty)
    {
        mCrQty = _mCrlQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCtrlQuantity</Name>
				<Source><![CDATA[
    public Void setCtrlQuantity(int _mCtrlQty)
    {
        mCtrlQty = _mCtrlQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDebitAmt</Name>
				<Source><![CDATA[
    public Void setDebitAmt(real _mdbAmt)
    {
        mDbAmt = _mdbAmt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDebitQuantity</Name>
				<Source><![CDATA[
    public Void setDebitQuantity(int _mDbQty)
    {
        mDbQty = _mDbQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setGECntrlnum</Name>
				<Source><![CDATA[
    public Void setGECntrlnum(str _mGECtrlnum)
    {
        mGECtrlnum = _mGECtrlnum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setGSSection</Name>
				<Source><![CDATA[
    public Void setGSSection(str _mGSsegment)
    {
        mGSsegment = _mGSsegment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setIEASection</Name>
				<Source><![CDATA[
    public Void setIEASection(str _mIEAsegment)
    {
        mIEAsegment = _mIEAsegment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setISASection</Name>
				<Source><![CDATA[
    public Void setISASection(str _mISAsegment)
    {
        mISAsegment = _mISAsegment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLineEnd</Name>
				<Source><![CDATA[
    public Void setLineEnd(str _mSLineEnd)
    {
        mSLineEnd = _mSLineEnd;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setMonetaryAmt</Name>
				<Source><![CDATA[
    public Void setMonetaryAmt(real _mmontAmt)
    {
        mMontAmt = _mmontAmt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSeparator</Name>
				<Source><![CDATA[
    public Void setSeparator(str _mSSeparator)
    {
        mSSeparator = _mSSeparator;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>