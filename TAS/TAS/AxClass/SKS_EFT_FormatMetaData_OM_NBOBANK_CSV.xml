<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_FormatMetaData_OM_NBOBANK_CSV</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_FormatMetaData_OM_NBOBANK_CSV Extends SKS_EFT_Format_MetaData
/// </summary>
public class SKS_EFT_FormatMetaData_OM_NBOBANK_CSV Extends SKS_EFT_Format_MetaData
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        productVersion = '';
        formatGroupVersion = '20220516';
        dataContractVersion = '1.0';
        conFormatID = ['OM-NBOBANK-CSV'];
        formatfiletype = 'EFT';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFormatFileType</Name>
				<Source><![CDATA[
    protected str getFormatFileType()
    {
        return formatfiletype;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHeaderMetaData</Name>
				<Source><![CDATA[
    protected container getHeaderMetaData()
    {
        container   headerList;

        //Metadata column names of data elements
//ProductVersion,FormatGroupVersion,UseWithCustomer,UseWithVenodrs,UseWithBanktoBank,UsewithCustReimbursements,
//BeDesc01,BeDesc02,BeMask01,BeMask02,BlockFill,CompanyIdMask,CompanyIdTitle,CompanyNameTitle,CompanyNameMask,Crlf,Description,EffectiveDateOffset,EntryClassTitle,EntryClassMask,
//FormatId,FormatType,IMMDestMask,IMMDestTitle,IMMDestNameTitle,IMMDestNameMask,IMMOriginTitle,IMMOriginMask,IMMOriginNameTitle,IMMOriginNameMask,IncludeCpnyCredit,
//IncludeCpnyDebit,LastEffectiveDate,NextDailyReset,NextDailyResetDate,NextFileId,NextSequenceNumber,PreNote,RecordLength,Selected,TrimRecord,TwoFileNameAddition,
//WBank01Description,WBank01Mask,WBank01Required,WBank02Required,WBank02Mask,WBank02Description,WBank03Required,WBank03Mask,WBank03Description,WBank04Required,WBank04Mask,
//WBank04Description,PreNoteDays,EDI,PayDateIsEffDate,ARDateOffset,UseAddenda,MastAcctList,FormatGroup,MultiEffectiveDates,SupportsMultiCompany,ExternalFormat,FundTransferType

        headerList = ConIns(headerList,conLen(headerList)+1,[productVersion,formatGroupVersion,0,1,0,0,'','','','',0,'','','','',1,'OM - National Bank Of Oman - CSV',0,'','','OM-NBOBANK-CSV',1,'','','','','','','','',0,0,'1900-01-01 00:00:00.000',0,'1900-01-01 00:00:00.000',1,1,0,0,0,'','','','',0,0,'','',0,'','',0,'','',0,0,0,0,0,0,'OM-NBOBANK-CSV',1,0,0]);

        return headerList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymSpecsMetaData</Name>
				<Source><![CDATA[
    protected container getPaymSpecsMetaData(str _formatID)
    {
        container   paymSpecList;

        //Metadata column names of data elements
//BARoutingReqd,VBAAccountReqd,VBASwiftReqd,VBAIBANReqd,ARPaymSpecName,BEBeneBankAcctReqd,BE01Reqd,BE02Reqd,BE01Use,BE02Use,PaymSpecFileDescr,RecordSummary,TransactionCode,
        //EmailNote,PaymSpec,PaymSpecName,FilterSeparateFile,FormatId,Selected,CpnyIDNameReq,EmailOff,VendorUse,WireTabs,SamePaymentDate,SelectByPaymentDate,PreNote,TxnNacha,UseCheckNumber,
        //UseWithCustomers,UseWithVendors,EDI,UseWithBanktoBank,FundTransferType,UseWithCustomerReimbursement,InvoiceDetail,RemitAvailability,RemitType,APNameType,APAddressType
        //DDNameType,DDAddressType,CRNameType,CRAddressType

        switch (_formatID)
        {
            case ('OM-NBOBANK-CSV'):
                paymSpecList = this.getPaymSpecsMetaData_OM_NBOBANK_CSV();
                break;

        }

        return paymSpecList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymSpecsMetaData_OM_NBOBANK_CSV</Name>
				<Source><![CDATA[
    private container getPaymSpecsMetaData_OM_NBOBANK_CSV()
    {
        container   paymSpecList;

        paymSpecList = ConIns(paymSpecList,conLen(paymSpecList)+1,[0,0,0,0,'',0,0,0,0,0,'Payment',1,'PAYMENT','','PAYMENT','TRADE PAY',0,'OM-NBOBANK-CSV',0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,1,2,0,1,1,0,0,0,0]);

        return paymSpecList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getNotesMetaData</Name>
				<Source><![CDATA[
    protected container getNotesMetaData(str _formatID)
    {
        container   notesList;

        //Metadata column names of data elements
//FormatId,PaymSpec,Note

        switch (_formatID)
        {
            case ('OM-NBOBANK-CSV'):
                notesList = this.getNotesMetaData_OM_NBOBANK_CSV();
                break;

        }

        return notesList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getNotesMetaData_OM_NBOBANK_CSV</Name>
				<Source><![CDATA[
    private container getNotesMetaData_OM_NBOBANK_CSV()
    {
        container   notesList;

        notesList = ConIns(notesList,conLen(notesList)+1,['OM-NBOBANK-CSV','PAYMENT','-This format uses Code lookups. Review the following:-EFT+ file formats > Payment specifications > Code lookup fields tab.:-Vendor ebanking details > Payment specifications > Additional fields.::-Vendor eMail is stored in the Accounts payable > All Vendors > Contact Information tab::-Subscriber ID is stored in the Bank account > Company Info tab.::-Payment Details for Beneficiary / Employee are stored in the Payment journal > Description filed.']);

        return notesList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getValidationsMetaData</Name>
				<Source><![CDATA[
    protected container getValidationsMetaData(str _formatID)
    {
        container   validationsList;

        //Metadata column names of data elements
//FormatId,PaymSpec,Id,SourceFieldDesc,SourceFieldLoc,TargetFieldLoc,Notes,SourceContext,SourceField,ISOCountrySpec,CountryContext,Required,LengthValidation,MinLength,MaxLength,UserUpdated,Module

        switch (_formatID)
        {
            case ('OM-NBOBANK-CSV'):
                validationsList = this.getValidationsMetaData_OM_NBOBANK_CSV();
                break;

        }

        return validationsList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getValidationsMetaData_OM_NBOBANK_CSV</Name>
				<Source><![CDATA[
    private container getValidationsMetaData_OM_NBOBANK_CSV()
    {
        container   validationsList;

        validationsList = ConIns(validationsList,conLen(validationsList)+1,['OM-NBOBANK-CSV','PAYMENT','','Ordering Party name','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > Name','Batch Header > Field 11.Ordering Party name','Ordering Party name','15','WOrdPartyName','','',1,0,1,'60',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['OM-NBOBANK-CSV','PAYMENT','','Address 1','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > Address 1','Batch Header > Field 12.Ordering party address','Address related to bank','15','WOrdPartyAddr','','',1,'2',1,'255',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['OM-NBOBANK-CSV','PAYMENT','','Address 2','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > Address 2','Batch Header > Field 12.Ordering Party address','Address related to bank','15','WOrdPartyAddr2','','',1,'2',1,'255',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['OM-NBOBANK-CSV','PAYMENT','','SUPPUER NAME','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Name','Transaction Record > Field 4. Beneficiary / Employee name','Name related to Vendor','16','WBeneName','','',1,0,1,'60',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['OM-NBOBANK-CSV','PAYMENT','','IBAN','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts > General tab > Identification(group) > IBAN','Transaction Record > Field 8.Beneficiary/Employee/Prepay card Number (IBAN/Account Number)','Receiving Bank IABN','9','BankIBAN','','','3',0,1,'40',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['OM-NBOBANK-CSV','PAYMENT','','Account Number','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts > General tab > Identification(group) > Account Number','Field 8.Beneficiary/Employee/Prepay card Number (IBAN/Account Number)','Receiving Bank Account Number','9','AccountNum','','','3',0,1,'40',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['OM-NBOBANK-CSV','PAYMENT','','Beneficiary / Employee Address','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Address 1','Transaction Record > Field 12.Beneficiary / Employee Address','Address related to vendor','16','WBeneAddr','','',1,0,1,'255',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['OM-NBOBANK-CSV','PAYMENT','','Beneficiary / Employee Address','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Address 2','Transaction Record > Field 12.Beneficiary / Employee Address','Address related to vendor','16','WBeneAddr2','','',1,0,1,'255',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['OM-NBOBANK-CSV','PAYMENT','','Beneficiary / Employee Country','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Country','Transaction Record > Field 13.Beneficiary / Employee Address','Country related to vendor','16','WBeneCountryRegionId','','',1,1,'',0,0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['OM-NBOBANK-CSV','PAYMENT','','Name','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary bank (group) > Name','Transaction Record > Field 14.Beneficiary / Employee Bank Name','Receiving Bank Name','16','WBenBankName','','',1,0,1,'128',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['OM-NBOBANK-CSV','PAYMENT','','Vendor bank Address','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary bank(group) > Address','Transaction Record > Field 15.Beneficiary / Employee Bank Name','Address related to vendor bank','16','WBenBankAddr','','',1,0,1,'255',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['OM-NBOBANK-CSV','PAYMENT','','Vendor bank City','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary bank(group) > City','Transaction Record > Field 15.Beneficiary / Employee Bank Name','Receiving bank City','16','WBenBankCity','','',1,0,1,'255',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['OM-NBOBANK-CSV','PAYMENT','','Swift Code','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts > General tab > Identification(group) > Swift Code','Transaction Record > Field 16.Beneficiary / Employee BIC Code','Swift Code related to Vendor','9','SWIFTNo','','',1,0,1,'12',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['OM-NBOBANK-CSV','PAYMENT','','Routing number','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts > General tab > Identification(group) > Routing number','Transaction Record > Field 17&18.Beneficiary / Employee Route Code','Routing number related to Vendor','9','RegistrationNum','','',1,0,1,'30',0,0]);

        return validationsList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getCodeLookupMetaData</Name>
				<Source><![CDATA[
    protected container getCodeLookupMetaData()
    {
        container   codeLookupList;

        //Metadata column names of data elements
//FormatGroup,CodeID,Description

        codeLookupList = ConIns(codeLookupList,conLen(codeLookupList)+1,['OM-NBOBANK-CSV','BenPayMode','Employee Pay Mode']);
        codeLookupList = ConIns(codeLookupList,conLen(codeLookupList)+1,['OM-NBOBANK-CSV','TransPurpType','Transaction purpose type']);
        codeLookupList = ConIns(codeLookupList,conLen(codeLookupList)+1,['OM-NBOBANK-CSV','Charges','Charges']);

        return codeLookupList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getCodeLookupValuesMetaData</Name>
				<Source><![CDATA[
    protected container getCodeLookupValuesMetaData()
    {
        container   codeLookupValuesList;

        //Metadata column names of data elements
//FormatGroup,CodeID,Display Value,CodeValue

        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['OM-NBOBANK-CSV','BenPayMode','Foreign currency transfer to local banks in UAE or international payments','TT']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['OM-NBOBANK-CSV','BenPayMode','Transfer to Emirates NBD /Emirates Islamic','TR']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['OM-NBOBANK-CSV','BenPayMode','Local currency transfer to local banks in UAE','OB']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['OM-NBOBANK-CSV','TransPurpType','Agency Commission','ACM']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['OM-NBOBANK-CSV','TransPurpType','Customer Card Payment','CCP']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['OM-NBOBANK-CSV','TransPurpType','Charitable Contributions','CHC']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['OM-NBOBANK-CSV','TransPurpType','Credit Card Payment','CRP']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['OM-NBOBANK-CSV','TransPurpType','Merchant Settlements','POS']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['OM-NBOBANK-CSV','TransPurpType','Advance Payment against','AES']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['OM-NBOBANK-CSV','TransPurpType','Allowance','ALW']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['OM-NBOBANK-CSV','TransPurpType','Bonus','BON']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['OM-NBOBANK-CSV','TransPurpType','Commercial Investments','CIN']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['OM-NBOBANK-CSV','TransPurpType','Commission','COM']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['OM-NBOBANK-CSV','TransPurpType','Compensation','COP']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['OM-NBOBANK-CSV','TransPurpType','Debit Card Payment','DCP']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['OM-NBOBANK-CSV','TransPurpType','Dividend Payouts','DIV']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['OM-NBOBANK-CSV','TransPurpType','Educational Support','EDU']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['OM-NBOBANK-CSV','TransPurpType','Equated Monthly Installments','EMI']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['OM-NBOBANK-CSV','TransPurpType','End of service final settlement','EOS']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['OM-NBOBANK-CSV','TransPurpType','IPO Subscriptions','IPO']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['OM-NBOBANK-CSV','TransPurpType','Leave Salary','LAS']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['OM-NBOBANK-CSV','TransPurpType','Loan Interest Payments','LIP']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['OM-NBOBANK-CSV','TransPurpType','Loan Charges','LNC']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['OM-NBOBANK-CSV','TransPurpType','Loan Disbursements','LND']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['OM-NBOBANK-CSV','TransPurpType','Medical Claim Reimbursements','MCR']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['OM-NBOBANK-CSV','TransPurpType','Over Time','OVT']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['OM-NBOBANK-CSV','TransPurpType','Pension','PEN']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['OM-NBOBANK-CSV','TransPurpType','Refunds/Reversals on IPO','POR']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['OM-NBOBANK-CSV','TransPurpType','Rent Payments','RNT']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['OM-NBOBANK-CSV','TransPurpType','Salary Advance','SAA']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['OM-NBOBANK-CSV','TransPurpType','Salary','SAL']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['OM-NBOBANK-CSV','TransPurpType','Tickets ','TKT']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['OM-NBOBANK-CSV','TransPurpType','Utility','UTL']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['OM-NBOBANK-CSV','TransPurpType','Transfer of funds between persons Normal and Juridical','TOF']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['OM-NBOBANK-CSV','TransPurpType','Inter Group Transfer','IGT']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['OM-NBOBANK-CSV','TransPurpType','Own Account Transfer','OAT']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['OM-NBOBANK-CSV','TransPurpType','Stored Value Card Cash-In','SVI']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['OM-NBOBANK-CSV','TransPurpType','Stored Value Card Cash-Out','SVO']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['OM-NBOBANK-CSV','TransPurpType','Stored Value Card Payments','SVP']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['OM-NBOBANK-CSV','TransPurpType','Mobile Wallet Cash In','MWI']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['OM-NBOBANK-CSV','TransPurpType','Mobile Wallet Cash Out','MWO']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['OM-NBOBANK-CSV','TransPurpType','Mobile Wallet Payments','MWP']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['OM-NBOBANK-CSV','TransPurpType','Profit rate Swap Payments','PRP']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['OM-NBOBANK-CSV','TransPurpType','Profit Rate Unwind Payments','PRW']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['OM-NBOBANK-CSV','TransPurpType','Interest Rate Swap Payments','IRP']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['OM-NBOBANK-CSV','TransPurpType','Interest Rate Unwind Payments','IRW']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['OM-NBOBANK-CSV','TransPurpType','PrePaid Reloadable & Personalized Debit Card Payments','DCP']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['OM-NBOBANK-CSV','TransPurpType','Goods Bought or Sold','GDS']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['OM-NBOBANK-CSV','TransPurpType','Processing repair and maintenance services on goods','GMS']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['OM-NBOBANK-CSV','TransPurpType','Sea transport','STS']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['OM-NBOBANK-CSV','TransPurpType','Air transport','ATS']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['OM-NBOBANK-CSV','TransPurpType','Other modes of transport','OTS']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['OM-NBOBANK-CSV','TransPurpType','Travel','STR']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['OM-NBOBANK-CSV','TransPurpType','Construction','SCO']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['OM-NBOBANK-CSV','TransPurpType','Insurance services','INS']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['OM-NBOBANK-CSV','TransPurpType','Financial services','FIS']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['OM-NBOBANK-CSV','TransPurpType','Charges for the use of intellectual property royalties','IPC']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['OM-NBOBANK-CSV','TransPurpType','Telecommunication services','TCS']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['OM-NBOBANK-CSV','TransPurpType','Computer services','ITS']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['OM-NBOBANK-CSV','TransPurpType','Information services','IFS']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['OM-NBOBANK-CSV','TransPurpType','Research and development services','RDS']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['OM-NBOBANK-CSV','TransPurpType','Professional and management consulting services','PMS']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['OM-NBOBANK-CSV','TransPurpType','Technical trade‐related and other business services','TTS']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['OM-NBOBANK-CSV','TransPurpType','Personal cultural audio visual and recreational services','PRS']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['OM-NBOBANK-CSV','TransPurpType','Government goods and services embassies etc','GOS']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['OM-NBOBANK-CSV','TransPurpType','Intra group dividends','IGD']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['OM-NBOBANK-CSV','TransPurpType','Intra group interest on debt','IID']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['OM-NBOBANK-CSV','TransPurpType','Profits on Islamic products','PIP']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['OM-NBOBANK-CSV','TransPurpType','Profits or rents on real estate','PRR']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['OM-NBOBANK-CSV','TransPurpType','Dividends on equity not intra group','DOE']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['OM-NBOBANK-CSV','TransPurpType','Income on investment funds shares','ISH']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['OM-NBOBANK-CSV','TransPurpType','Interest on securities more than a year','ISL']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['OM-NBOBANK-CSV','TransPurpType','Interest on securities less than a year','ISS']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['OM-NBOBANK-CSV','TransPurpType','Income on loans','IOL']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['OM-NBOBANK-CSV','TransPurpType','Income on deposits','IOD']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['OM-NBOBANK-CSV','TransPurpType','Government related income taxes tariffs capital transfers etc','GRI']);

        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['OM-NBOBANK-CSV','Charges','Shared','S']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['OM-NBOBANK-CSV','Charges','Ours','O']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['OM-NBOBANK-CSV','Charges','Beneficiary','B']);

        return codeLookupValuesList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymSpecFieldsMetaData</Name>
				<Source><![CDATA[
    protected container getPaymSpecFieldsMetaData(str _formatID)
    {
        container   paymSpecFieldsList;

        //Metadata column names of data elements
//FormatGroup,FormatID,PaymentSpec,FormatFieldID,Description,FieldType,CodeID,DefaultValue,Required,FixedValue,FixedValueMask,TechNotes

        switch (_formatID)
        {
            case ('OM-NBOBANK-CSV'):
                paymSpecFieldsList = this.getPaymSpecFieldsMetaData_OM_NBOBANK_CSV();
                break;

        }

        return paymSpecFieldsList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymSpecFieldsMetaData_OM_NBOBANK_CSV</Name>
				<Source><![CDATA[
    private container getPaymSpecFieldsMetaData_OM_NBOBANK_CSV()
    {
        container   paymSpecFieldsList;

        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['OM-NBOBANK-CSV','OM-NBOBANK-CSV','PAYMENT','Charges','Charges',0,'Charges','',0,'','','CdtTrfTxInf > ChrgBr']);

        return paymSpecFieldsList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getControlFormatMetaData</Name>
				<Source><![CDATA[
    protected container getControlFormatMetaData(str _formatID)
    {
        container   ControlFormatList;

        //Metadata column names of data elements
//FileFormatID,ControlFileFormatID,ControlFileDescription

        switch (_formatID)
        {
        }

        return ControlFormatList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getDeleteMetaData</Name>
				<Source><![CDATA[
    protected container getDeleteMetaData()
    {
        container   deleteList;

        //FormatGroup, FormatId, DetailType, KeyID1, KeyId2, KeyId3

        deleteList = ConIns(deleteList,conLen(deleteList)+1,['OM-NBOBANK-CSV','','CodeLookupValues','BenPayMode','Telegraphic Transfer','']);
        deleteList = ConIns(deleteList,conLen(deleteList)+1,['OM-NBOBANK-CSV','','CodeLookupValues','BenPayMode','Internal Transfer','']);
        deleteList = ConIns(deleteList,conLen(deleteList)+1,['OM-NBOBANK-CSV','','CodeLookupValues','BenPayMode','Managers Cheque/ OB - Other bank Transfer','']);
        deleteList = ConIns(deleteList,conLen(deleteList)+1,['OM-NBOBANK-CSV','','CodeLookupValues','BenPayMode','Salary via Card','']);
        deleteList = ConIns(deleteList,conLen(deleteList)+1,['OM-NBOBANK-CSV','','CodeLookupValues','BenPayMode','Demand Draft','']);
        deleteList = ConIns(deleteList,conLen(deleteList)+1,['OM-NBOBANK-CSV','OM-NBOBANK-CSV','PaymSpecFields','PAYMENT','BenPayMode','']);
        deleteList = ConIns(deleteList,conLen(deleteList)+1,['OM-NBOBANK-CSV','OM-NBOBANK-CSV','PaymSpecFields','PAYMENT','TransPurpType','']);

        deleteList = ConIns(deleteList,conLen(deleteList)+1,['OM-NBOBANK-CSV','OM-NBOBANK-CSV','FormatValidations','PAYMENT','15','W01']);
        deleteList = ConIns(deleteList,conLen(deleteList)+1,['OM-NBOBANK-CSV','*','FormatLookup','*','*','']);

        return deleteList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankCodeLookupMetaData</Name>
				<Source><![CDATA[
    protected container getBankCodeLookupMetaData()
    {
        container   codeLookupList;

        codeLookupList = ConIns(codeLookupList,conLen(codeLookupList)+1,['NL-ING-XML','FixedDebit','Fixed debit(Y/N)']);

        return codeLookupList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankCodeLookupValuesMetaData</Name>
				<Source><![CDATA[
    protected container getBankCodeLookupValuesMetaData()
    {
        container   codeLookupValuesList;

        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['NL-ING-XML','FixedDebit','Y','Y']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['NL-ING-XML','FixedDebit','N','N']);

        return codeLookupValuesList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFileFormatFieldsMetaData</Name>
				<Source><![CDATA[
    protected container getFileFormatFieldsMetaData(str _formatID)
    {
        container   paymSpecFieldsList;

        switch (_formatID)
        {
            case ('OM-NBOBANK-CSV'):
                paymSpecFieldsList = this.getFileFormatFieldsMetaData_OM_NBOBANK_CSV();
                break;
        }

        return paymSpecFieldsList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFileFormatFieldsMetaData_OM_NBOBANK_CSV</Name>
				<Source><![CDATA[
    private container getFileFormatFieldsMetaData_OM_NBOBANK_CSV()
    {
        container   paymSpecFieldsList;

        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['OM-NBOBANK-CSV','OM-NBOBANK-CSV','FixedDebit','Fixed debit(Y/N)',0,'FixedDebit','',0,'','','Fixed debit(Y/N)']);

        return paymSpecFieldsList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBankCodelookupValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updating the bank code lookpups from the W0X fields.
    /// </summary>
    protected void updateBankCodelookupValues()
    {
        switch(gSKS_EFT_FileFormat.FormatId)
        {
            case ('OM-NBOBANK-CSV'):
                if(gSKS_EFT_Bank.W01)
                {
                    this.updateBankFields('FixedDebit', gSKS_EFT_Bank.W01, true);
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateVendorCodelookupValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updating vendor code lookpus from BE0X and Legacy code loookups
    /// </summary>
    protected void updateVendorCodelookupValues()
    {
        switch(gSKS_EFT_FileFormat.FormatId)
        {
            case ('OM-NBOBANK-CSV'):
                if(gSKS_EFT_VendorPaym.WChargesIndic)
                {
                    this.updateVendorFields('Charges', gSKS_EFT_VendorPaym.WChargesIndic, true);
                }
                break;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>