<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_DD_InboundFormat_NETS_LS_30</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// DD inbound format NETS_LS_30
/// </summary>
class SKS_DD_InboundFormat_NETS_LS_30 extends SKS_DD_InboundFormat
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatId</Name>
				<Source><![CDATA[
    public str getFormatId(str _filename, boolean _serverPath, SKS_BF_BankIntType _sks_BF_BankIntType)
    {

        str rtnval = '';
        int classId;
        int locRecLen;
        //BEGIN VALIDATION VARIABLES
        //BEGIN QUALIFIERS
        boolean pos1to3DataDeliveryStartRecType = false;
        boolean pos1to3SectionRecType = false;
        boolean pos37to38DataDeliveryType = false;
        boolean recordLength = true; //Bug 11030
        //BEGIN DISQUALIFIER VARIABLES
        //none

        //END VALIDATION VARIABLES
        SKS_EB_FileHub locSKS_EB_FileHub = SKS_EB_FileHub::construct(_sks_BF_BankIntType);
        System.String locString;
        System.IO.StreamReader locStreamReader;
    
        //Setup filestream
        locSKS_EB_FileHub.setFileName(_filename);
        locSKS_EB_FileHub.runFileInquire();
        if(!locSKS_EB_FileHub.attrFileExists())
        {
            // The file %1 does not exist.
            error(strfmt("@SYS62207", _filename));
            return null;
        }
        locSKS_EB_FileHub.runFileLoad(_filename);
        locSKS_EB_FileHub.StreamInit();
        locStreamReader = new System.IO.StreamReader(locSKS_EB_FileHub.streamGet());

        //priming read

        while(!locStreamReader.get_EndOfStream())
        {
            locString = locStreamReader.ReadLine();

            if(!System.String::IsNullOrEmpty(locString))
            {
                locRecLen = locString.get_Length();

                if(!System.String::IsNullOrWhiteSpace(locString) && locRecLen != 0) //SKS_VSTS_14765
                {
                    if(SKS_PP_StringFormats::strSub(locString, 1, 3) == '000')
                    {
                        pos1to3DataDeliveryStartRecType = true;
                    }

                    if(SKS_PP_StringFormats::strSub(locString, 37, 2) == '30')
                    {
                        pos37to38DataDeliveryType = true;
                    }
                    
                    if(SKS_PP_StringFormats::strSub(locString, 1, 3) == '500'   //SKS_FDD_16340
                        || SKS_PP_StringFormats::strSub(locString, 1, 3) == '510' 
                        || SKS_PP_StringFormats::strSub(locString, 1, 3) == '540')
                    {
                        pos1to3SectionRecType = true;
                    }
                }
                else //Bug 11030
                {
                    recordLength = false;
                    break;
                }
            }
        }
        if(pos1to3DataDeliveryStartRecType
            && pos37to38DataDeliveryType
            && pos1to3SectionRecType
            && recordLength) //Bug 11030
        {
            //ALl Qualifers show this a LS_STATUS_80 file
            classId = classIdGet(this);
            rtnval = classId2Name(ClassId);
        }
        locStreamReader.Close();

        return rtnval;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFile</Name>
				<Source><![CDATA[
    public boolean getFile(str _filename, boolean _serverPath, SKS_BF_BankIntType _sks_BF_BankIntType)
    {
        SKS_EB_FileHub locSKS_EB_FileHub = SKS_EB_FileHub::construct(_sks_BF_BankIntType);
        System.String locString;
        System.IO.StreamReader locStreamReader;
    
        //Setup filestream
        locSKS_EB_FileHub.setFileName(_filename);
        locSKS_EB_FileHub.runFileInquire();
        if(!locSKS_EB_FileHub.attrFileExists())
        {
            // The file %1 does not exist.
            error(strfmt("@SYS62207", _filename));
            return false;
        }
        locSKS_EB_FileHub.runFileLoad(_filename);
        locSKS_EB_FileHub.StreamInit();
        locStreamReader = new System.IO.StreamReader(locSKS_EB_FileHub.streamGet());

        locString = locStreamReader.ReadLine();

        while(locString != null)
        {
            if(!System.String::IsNullOrEmpty(locString))
            {
                this.processRecord(locString);
            }
            locString = locStreamReader.ReadLine();
        }

        locStreamReader.Close();

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processRecord</Name>
				<Source><![CDATA[
    private void processRecord(str _CurrentRecord)
    {
        SKS_EB_BankRegisterStatus locBankRegisterStatus;

        str locDay, locMonth, locYear;

        SKS_EB_DateTime locEffectiveDate, locEndDate;

        if(strLen(strLRTrim(_CurrentRecord)) > 0)
        {
            if(SKS_PP_StringFormats::strSub(_CurrentRecord, 1, 3) == '540')
            {
                locDay = SKS_PP_StringFormats::strSub(_CurrentRecord,28,2);
                locMonth= SKS_PP_StringFormats::strSub(_CurrentRecord,26,2);
                locYear= SKS_PP_StringFormats::strSub(_CurrentRecord,24,2);

                locEndDate = DateTimeUtil::newDateTime(str2Date(locDay + '-' + locMonth + '-'+ locYear, 123),0);
                locBankRegisterStatus = SKS_EB_BankRegisterStatus::Rejected;

                CustAccount custAccountNumber = SKS_PP_StringFormats::strLTrimZeroes(SKS_PP_StringFormats::strSub(_CurrentRecord, 9, 15));

                CustDirectDebitMandate  loccustDirectDebitMandate;

                while select loccustDirectDebitMandate where loccustDirectDebitMandate.CustAccount == custAccountNumber
                {
                    if(loccustDirectDebitMandate.Status == CustMandateStatus::New)
                    {
                        this.setMandateStatusForLS(loccustDirectDebitMandate, locBankRegisterStatus, locEffectiveDate, locEndDate,loccustDirectDebitMandate.MandateReference/*no mandate number for NETS_LS*/, SKS_EB_MandateType::Leverander);
                        break;
                    }
                }
            }
            else if(SKS_PP_StringFormats::strSub(_CurrentRecord, 1, 3) == '500' ||
                    SKS_PP_StringFormats::strSub(_CurrentRecord, 1, 3) == '510')
            {
                locDay = SKS_PP_StringFormats::strSub(_CurrentRecord,28,2);
                locMonth= SKS_PP_StringFormats::strSub(_CurrentRecord,26,2);
                locYear= SKS_PP_StringFormats::strSub(_CurrentRecord,24,2);
                
                CustAccount custAccountNumber = SKS_PP_StringFormats::strLTrimZeroes(SKS_PP_StringFormats::strSub(_CurrentRecord, 9, 15));

                CustDirectDebitMandate  loccustDirectDebitMandate;

                select firstonly loccustDirectDebitMandate where loccustDirectDebitMandate.CustAccount == custAccountNumber;

                if(!loccustDirectDebitMandate)
                {
                    CustMandateId locCustMandateId;
                    CustTable lCustTable;

                    select firstonly lCustTable where lCustTable.AccountNum == custAccountNumber;

                    if(lCustTable)
                    {
                        locEffectiveDate = DateTimeUtil::newDateTime(str2Date(locDay + '-' + locMonth + '-'+ locYear, 123),0);
                        locEndDate = DateTimeUtil::newDateTime(dateMthFwd(DateTimeUtil::date(locEffectiveDate), CustParameters::find().MandateDefaultExpirationMonths) - 1,0);

                        ttsbegin;
                        locCustMandateId = NumberSeq::newGetNum(CustParameters::numRefCustMandateId()).num();
                        ttscommit;

                        loccustDirectDebitMandate.MandateReference = locCustMandateId;
                        locCustDirectDebitMandate.CustAccount = custAccountNumber;
                        locCustDirectDebitMandate.BankAccount = lCustTable.BankAccount;
                        locCustDirectDebitMandate.SKS_EB_MandateType = SKS_EB_MandateType::Leverander;
                        locCustDirectDebitMandate.Status = CustMandateStatus::New;
                        loccustDirectDebitMandate.SignatureDate = DateTimeUtil::date(locEffectiveDate);
                        loccustDirectDebitMandate.ExpirationDate = DateTimeUtil::date(locEndDate);
                        locCustDirectDebitMandate.SKS_EB_BankRegisterStatus = SKS_EB_BankRegisterStatus::Accepted;
                        locCustDirectDebitMandate.SKS_EB_MandateAutoStatus = SKS_EB_MandateAutoStatus::Completed;
                        locCustDirectDebitMandate.CustomerAddress = DirParty::primaryPostalAddress(lCustTable.Party).RecId;
                        locCustDirectDebitMandate.IsFirst = true;

                        locCustDirectDebitMandate.insert();

                        if(!locCustDirectDebitMandate.BankAccount)
                        {
                            SKS_EB_CustDirectDebitMandateEventHandler::updateCustTableRecords_OnInsert(locCustDirectDebitMandate);

                            CustTable lCusttable1;

                            select firstonly lCusttable1 where lCusttable1.AccountNum == locCustDirectDebitMandate.CustAccount;

                            ttsbegin;
                            locCustDirectDebitMandate.selectForUpdate(true);
                            locCustDirectDebitMandate.BankAccount = lCusttable1.BankAccount;
                            locCustDirectDebitMandate.doupdate();
                            ttscommit;
                        }
                    }
                }
                else
                {
                    loccustDirectDebitMandate = null;
                    boolean newMandate, cancelmandate, incompmandate;

                    while select loccustDirectDebitMandate where loccustDirectDebitMandate.CustAccount == custAccountNumber
                    {
                        if(loccustDirectDebitMandate.Status == CustMandateStatus::Incomplete)
                        { 
                            incompmandate = true;
                        }
                        else if(loccustDirectDebitMandate.Status == CustMandateStatus::Canceled)
                        {
                            cancelmandate = true;
                        }
                        else if(loccustDirectDebitMandate.Status == CustMandateStatus::New)
                        {
                            newMandate = true;
                        }
                    }

                    if(!newMandate)
                    {
                        if(incompmandate)
                        {
                            while select loccustDirectDebitMandate where loccustDirectDebitMandate.CustAccount == custAccountNumber
                            {
                                if(loccustDirectDebitMandate.Status == CustMandateStatus::Incomplete)
                                {                                    
                                    locEffectiveDate = DateTimeUtil::newDateTime(str2Date(locDay + '-' + locMonth + '-'+ locYear, 123),0);
                                    locEndDate = DateTimeUtil::newDateTime(dateMthFwd(DateTimeUtil::date(locEffectiveDate), CustParameters::find().MandateDefaultExpirationMonths) - 1,0);
                                    locBankRegisterStatus = SKS_EB_BankRegisterStatus::Accepted;

                                    this.setMandateStatusForLS(loccustDirectDebitMandate, locBankRegisterStatus, locEffectiveDate, locEndDate,loccustDirectDebitMandate.MandateReference/*no mandate number for NETS_LS*/, SKS_EB_MandateType::Leverander);

                                    break;
                                }
                            }
                        }
                        else if(cancelmandate)
                        {
                            CustMandateId locCustMandateId;
                            CustTable lCustTable;

                            select firstonly lCustTable where lCustTable.AccountNum == custAccountNumber;
                            
                            locEffectiveDate = DateTimeUtil::newDateTime(str2Date(locDay + '-' + locMonth + '-'+ locYear, 123),0);
                            locEndDate = DateTimeUtil::newDateTime(dateMthFwd(DateTimeUtil::date(locEffectiveDate), CustParameters::find().MandateDefaultExpirationMonths) - 1,0);

                            ttsbegin;
                            locCustMandateId = NumberSeq::newGetNum(CustParameters::numRefCustMandateId()).num();
                            ttscommit;

                            loccustDirectDebitMandate.MandateReference = locCustMandateId;
                            locCustDirectDebitMandate.CustAccount = custAccountNumber;
                            locCustDirectDebitMandate.BankAccount = lCustTable.BankAccount;
                            locCustDirectDebitMandate.SKS_EB_MandateType = SKS_EB_MandateType::Leverander;
                            locCustDirectDebitMandate.Status = CustMandateStatus::New;
                            loccustDirectDebitMandate.SignatureDate = DateTimeUtil::date(locEffectiveDate);
                            loccustDirectDebitMandate.ExpirationDate = DateTimeUtil::date(locEndDate);
                            locCustDirectDebitMandate.SKS_EB_BankRegisterStatus = SKS_EB_BankRegisterStatus::Accepted;
                            locCustDirectDebitMandate.SKS_EB_MandateAutoStatus = SKS_EB_MandateAutoStatus::Completed;
                            locCustDirectDebitMandate.CustomerAddress = DirParty::primaryPostalAddress(lCustTable.Party).RecId;
                            locCustDirectDebitMandate.IsFirst = true;

                            locCustDirectDebitMandate.insert();

                            if(!locCustDirectDebitMandate.BankAccount)
                            {
                                SKS_EB_CustDirectDebitMandateEventHandler::updateCustTableRecords_OnInsert(locCustDirectDebitMandate);

                                CustTable lCusttable2;

                                select firstonly lCusttable2 where lCusttable2.AccountNum == locCustDirectDebitMandate.CustAccount;

                                ttsbegin;
                                locCustDirectDebitMandate.selectForUpdate(true);
                                locCustDirectDebitMandate.BankAccount = lCusttable2.BankAccount;
                                locCustDirectDebitMandate.doupdate();
                                ttscommit;
                            }
                        }
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setMandateStatusForLS</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overrided Setmandate staus for Format specific
    /// </summary>
    /// <param name = "_lCustDirectDebitMandate">CustDirectDebitMandate buffer</param>
    /// <param name = "_bankRegisterStatus">SKS_EB_BankRegisterStatus buffer</param>
    /// <param name = "_effectiveDate">_effectiveDate buffer</param>
    /// <param name = "_endDate">_endDate buffer</param>
    /// <param name = "_custMandateId">_custMandateId buffer</param>
    /// <param name = "_custMandateScheme">_custMandateScheme buffer</param>
    public void setMandateStatusForLS(CustDirectDebitMandate _lCustDirectDebitMandate,
                                    SKS_EB_BankRegisterStatus _bankRegisterStatus,
                                    SKS_EB_DateTime _effectiveDate,
                                    SKS_EB_DateTime _endDate,
                                    CustMandateId _custMandateId,
                                    SKS_EB_MandateType _custMandateScheme)
    {
        CustTable				locCustTable;

        locCustTable = CustTable::find(_lCustDirectDebitMandate.CustAccount);

        ttsbegin;

        if(_bankRegisterStatus == SKS_EB_BankRegisterStatus ::Accepted)
        {
            _lCustDirectDebitMandate.SKS_EB_BankRegisterStatus = SKS_EB_BankRegisterStatus::Accepted;
            _lCustDirectDebitMandate.SKS_EB_MandateAutoStatus = SKS_EB_MandateAutoStatus::Completed;
            _lCustDirectDebitMandate.SKS_EB_AutoStatusDate = DateTimeUtil::getSystemDateTime();
            _lCustDirectDebitMandate.SKS_EB_RegisterStatusDate = _effectiveDate;
            _lCustDirectDebitMandate.Status = CustMandateStatus::New;
            _lCustDirectDebitMandate.SignatureDate = DateTimeUtil::date(_effectiveDate);
            _lCustDirectDebitMandate.SignatureLocation = LogisticsPostalAddress::findRecId(_lCustDirectDebitMandate.CustomerAddress).City;
            if(DateTimeUtil::date(_endDate) == datenull() && _lCustDirectDebitMandate.SignatureDate != dateNull()) //Bug 11028
            {
                _lCustDirectDebitMandate.ExpirationDate = dateMthFwd(_lCustDirectDebitMandate.SignatureDate, CustParameters::find().MandateDefaultExpirationMonths) - 1;
            }
            else
            {
                _lCustDirectDebitMandate.ExpirationDate = DateTimeUtil::date(_endDate);
            }
        }
        else if(_bankRegisterStatus == SKS_EB_BankRegisterStatus::Rejected)
        {
            _lCustDirectDebitMandate.SKS_EB_BankRegisterStatus = SKS_EB_BankRegisterStatus::Rejected;
            _lCustDirectDebitMandate.SKS_EB_MandateAutoStatus = SKS_EB_MandateAutoStatus::Completed;
            _lCustDirectDebitMandate.SKS_EB_AutoStatusDate = DateTimeUtil::getSystemDateTime();
            _lCustDirectDebitMandate.SKS_EB_RegisterStatusDate = _endDate;
            _lCustDirectDebitMandate.CancellationDate = DateTimeUtil::date(_endDate);
            _lCustDirectDebitMandate.Status = CustMandateStatus::Canceled;
        }

        _lCustDirectDebitMandate.selectForUpdate(true);
        _lCustDirectDebitMandate.update();

        if(_lCustDirectDebitMandate.Status == CustMandateStatus::New && !_lCustDirectDebitMandate.BankAccount)
        {
            SKS_EB_CustDirectDebitMandateEventHandler::updateCustTableRecords(_lCustDirectDebitMandate);

            CustTable lCusttable;

            select firstonly lCusttable where lCusttable.AccountNum == _lCustDirectDebitMandate.CustAccount;

            ttsbegin;
            _lCustDirectDebitMandate.selectForUpdate(true);
            _lCustDirectDebitMandate.BankAccount = lCusttable.BankAccount;
            _lCustDirectDebitMandate.doupdate();
            ttscommit;
        }

        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>