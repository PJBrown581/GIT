<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_CC_MCRCustPaymInstallmentsForm_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(formstr(MCRCustPaymInstallments))]
final class SKS_CC_MCRCustPaymInstallmentsForm_Extension
{
    public CustAccount                      callerCustAccount;
    public FormRun                          elementLocal;
    public boolean                          isPayFabricActiveProcessor;
    public SKS_CC_PayFabricWalletHandler    pfWalletHandler;
    public CreditCardProcessors             activeCreditCardProcessors;
    public SalesTable                       salesTableCallerSKS;
    public boolean                          sKS_CC_IsOneTimeCustomer;
    public boolean                          isSKSOneTimeCustLogicEnabled;
    public boolean                          isSKSCreditCardPaym;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>refreshForm</Name>
				<Source><![CDATA[
    public void refreshForm()
    {
        if (!isPayFabricActiveProcessor)
        {
            return;
        }

        CreditCardCust                  newCreditCardCust;        
        str                             pfCardTokens;        

        pfCardTokens = pfWalletHandler.getPayFabricCreditCardTokensForCustomer();
        if (pfCardTokens)
        {
            if (pfWalletHandler.refreshCreditCardsFromPayFabric(pfCardTokens, activeCreditCardProcessors.RecId, ''))
            {
                if (!MCRCustPaymTable_InstBill.PaymInfoRecId &&
                    this.sKS_CC_IsCreditCardPaymentType())
                {
                    if (sKS_CC_IsOneTimeCustomer &&
                        isSKSOneTimeCustLogicEnabled &&
                        salesTableCallerSKS)
                    {
                        select firstOnly1 newCreditCardCust
                            order by RecId desc
                            where newCreditCardCust.SKS_CC_OneTimeCustRefTableId == salesTableCallerSKS.TableId
                                && newCreditCardCust.SKS_CC_OneTimeCustRefRecId == salesTableCallerSKS.RecId
                                && newCreditCardCust.CustAccount == callerCustAccount;
                    }
                    else
                    {
                        select firstOnly1 newCreditCardCust
                            order by RecId desc
                            where newCreditCardCust.CustAccount == callerCustAccount;
                    }

                    if (newCreditCardCust)
                    {
                        MCRCustPaymTable_InstBill.PaymInfoRecId = newCreditCardCust.RecId;
                        MCRCustPaymTable_InstBill.PaymInfoTableId = newCreditCardCust.TableId;
                        MCRCustPaymTable_InstBill_ds.cacheCalculateMethod(tableMethodStr(MCRCustPaymTable, editCreditCard));
                        MCRCustPaymTable_InstBill_ds.refresh();
                    }                    
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializedFormHandler</Name>
				<Source><![CDATA[
    [FormEventHandler(formstr(MCRCustPaymInstallments), FormEventType::Initialized)]
    public void initializedFormHandler(xFormRun _formRun, FormEventArgs _e)
    {
        elementLocal = _formRun;
        isPayFabricActiveProcessor = SKS_CC_PayFabricWalletHandler::isPayFabricActiveProcessor();

        elementLocal.design().controlName(formControlStr(MCRCustPaymInstallments, SKS_CC_CreateCCBtn)).visible(isPayFabricActiveProcessor);
        elementLocal.design().controlName(formControlStr(MCRCustPaymInstallments, CreateCCBtn)).visible(!isPayFabricActiveProcessor);

        if (elementLocal.args().record())
        {
            salesTableCallerSKS = elementLocal.args().record();
        }

        SKS_PP_Setup sksParmsLoc = SKS_PP_Setup::find();
        if (isPayFabricActiveProcessor)
        {   
            if (sksParmsLoc.ModCC == NoYes::No)
            {
                isPayFabricActiveProcessor = false;
            }
            else
            {
                isSKSOneTimeCustLogicEnabled = sksParmsLoc.CCUseOneTimeCustomerLogic;
                elementLocal.design().controlName(formControlStr(MCRCustPaymInstallments, SKS_CC_CreditCardCust)).visible(true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>SKS_CC_CreateCCBtn_OnClicked</Name>
				<Source><![CDATA[
    [FormControlEventHandler(formControlStr(MCRCustPaymInstallments, SKS_CC_CreateCCBtn), FormControlEventType::Clicked)]
    public void SKS_CC_CreateCCBtn_OnClicked(FormControl _sender, FormControlEventArgs _e)
    {
        CreditCardPaymentCardTokenize   cardTokenize;        
        CustTable                       custTable;        
        str                             pfUrl;
        RefTableId                      sKSOneTimeCustRefTableId;
        RefRecId                        sKSOneTimeCustRefRecId;
        Args                            args = new Args();

        if (!isPayFabricActiveProcessor)
        {
            return;
        }

        if (MCRCustPaymTable_InstBill.CustAccount)
        {
            callerCustAccount = MCRCustPaymTable_InstBill.CustAccount;
        }
        else
        {            
            callerCustAccount = salesTableCallerSKS.InvoiceAccount;
        }

        if (!callerCustAccount)
        {
            return;
        }

        activeCreditCardProcessors = CreditCardProcessors::findActiveProcessor();
        cardTokenize = CreditCardPaymentCardTokenize::construct();

        cardTokenize.init(activeCreditCardProcessors.Name);
        cardTokenize.parmCustAccount(callerCustAccount);

        pfWalletHandler = SKS_CC_PayFabricWalletHandler::construct();
        pfWalletHandler.parmCustAccount(callerCustAccount);
        custTable = CustTable::find(callerCustAccount);

        if (custTable.OneTimeCustomer && isSKSOneTimeCustLogicEnabled)
        {
            if (MCRCustPaymTable_InstBill.RefRecId && MCRCustPaymTable_InstBill.RefTableId == tableNum(SalesTable))
            {
                sKSOneTimeCustRefTableId = MCRCustPaymTable_InstBill.RefTableId;
                sKSOneTimeCustRefRecId = MCRCustPaymTable_InstBill.RefRecId;
            }
            else if (salesTableCallerSKS.RecId)
            {
                sKSOneTimeCustRefTableId = salesTableCallerSKS.TableId;
                sKSOneTimeCustRefRecId = salesTableCallerSKS.RecId;
            }
        }

        if (sKSOneTimeCustRefTableId && sKSOneTimeCustRefRecId)
        {
            pfWalletHandler.parmOneTimeCustRefTableId(sKSOneTimeCustRefTableId);
            pfWalletHandler.parmOneTimeCustRefRecId(sKSOneTimeCustRefRecId);
        }
        pfWalletHandler.setPayFabricCustomerNbr();

        pfUrl = pfWalletHandler.getPayFabricCreateWalletUrl();        

        args.caller(this);
        args.record(custTable);
        args.parm(pfUrl);
        args.parmEnumType(enumnum(NoYesCombo));
        args.parmEnum(NoYesCombo::Yes);

        MenuFunction menuFunction;
        menuFunction = new MenuFunction(menuitemDisplayStr(SKS_CC_PayFabricWalletMaintain), MenuItemType::Display);
        menuFunction.run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>MCRCustPaymTable_InstBill_OnActivated</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormDataSourceEventHandler(formDataSourceStr(MCRCustPaymInstallments, MCRCustPaymTable_InstBill), FormDataSourceEventType::Activated)]
    public void MCRCustPaymTable_InstBill_OnActivated(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        if (isPayFabricActiveProcessor && MCRCustPaymTable_InstBill.CustAccount && this.sKS_CC_IsCreditCardPaymentType())
        {
            isSKSCreditCardPaym = true;
        }
        else
        {
            isSKSCreditCardPaym = false;
        }        
    }

]]></Source>
			</Method>
			<Method>
				<Name>sKS_CC_SetCreditCardLookupToUse</Name>
				<Source><![CDATA[
    public void sKS_CC_SetCreditCardLookupToUse()
    {
        if (isPayFabricActiveProcessor &&
            MCRCustPaymTable_InstBill.CustAccount &&
            salesTableCallerSKS &&
            CustTable::find(MCRCustPaymTable_InstBill.CustAccount).OneTimeCustomer &&
            isSKSOneTimeCustLogicEnabled)
        {
            sKS_CC_IsOneTimeCustomer = true;
        }
        else
        {
            sKS_CC_IsOneTimeCustomer = false;
        }

        elementLocal.design().controlName(formControlStr(MCRCustPaymInstallments, CreditCard_M_editCreditCard)).visible(!sKS_CC_IsOneTimeCustomer);
        elementLocal.design().controlName(formControlStr(MCRCustPaymInstallments, SKS_CC_CreditCard_M_editCreditCard)).visible(sKS_CC_IsOneTimeCustomer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>sKS_CC_SetDefaultCreditCard</Name>
				<Source><![CDATA[
    public void sKS_CC_SetDefaultCreditCard()
    {        
        CreditCardCust creditCardCustSKS;

        if (!MCRCustPaymTable_InstBill.PaymInfoRecId && MCRCustPaymTable_InstBill.CustAccount && isPayFabricActiveProcessor)
        {
            creditCardCustSKS = CreditCardCust::sKS_CC_FindDefaultCardForCust(
                MCRCustPaymTable_InstBill.CustAccount,
                salesTableCallerSKS.TableId,
                salesTableCallerSKS.RecId);

            if (creditCardCustSKS)
            {
                MCRCustPaymTable_InstBill.PaymInfoRecId = creditCardCustSKS.RecId;
                MCRCustPaymTable_InstBill.PaymInfoTableId = creditCardCustSKS.TableId;
            }
        }        
    }

]]></Source>
			</Method>
			<Method>
				<Name>TenderTypeId_OnModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Used to set default credit card
    /// </summary>
    /// <param name="_sender"></param>
    /// <param name="_e"></param>
    [FormDataFieldEventHandler(formDataFieldStr(MCRCustPaymInstallments, MCRCustPaymTable_InstBill, TenderTypeId), FormDataFieldEventType::Modified)]
    public void TenderTypeId_OnModified(FormDataObject _sender, FormDataFieldEventArgs _e)    
    {     
        if (this.sKS_CC_IsCreditCardPaymentType())
        {
            this.sKS_CC_SetCreditCardLookupToUse();
            this.sKS_CC_SetDefaultCreditCard();
        }
        else
        {
            elementLocal.design().controlName(formControlStr(MCRCustPaymInstallments, SKS_CC_CreditCard_M_editCreditCard)).visible(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sKS_CC_IsCreditCardPaymentType</Name>
				<Source><![CDATA[
    public boolean sKS_CC_IsCreditCardPaymentType()
    {
        MCRCustPaymType cardType;
        boolean ret;

        switch (MCRCustPaymTable_InstBill.CustPaymType)
        {
            case MCRCustPaymType::LoyaltyCard:
            case MCRCustPaymType::CreditCard:
            case MCRCustPaymType::GiftCard:
                cardType = MCRCustPaymTable::getMCRCardTypeFromCardTypeId(MCRCustPaymTable_InstBill.CardTypeId);
                if (cardType == MCRCustPaymType::CreditCard)
                {
                    ret = true;
                }
                break;
            default:
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>SKS_CC_CreditCard_M_editCreditCard_OnLookup</Name>
				<Source><![CDATA[
    [FormControlEventHandler(formControlStr(MCRCustPaymInstallments, SKS_CC_CreditCard_M_editCreditCard), FormControlEventType::Lookup)]
    public void SKS_CC_CreditCard_M_editCreditCard_OnLookup(FormControl _sender, FormControlEventArgs _e)
    {
        if (sKS_CC_IsOneTimeCustomer && this.sKS_CC_IsCreditCardPaymentType())
        {
            if (salesTableCallerSKS)
            {
                CreditCardCust::sKS_CC_lookupCreditCard(
                    _sender,
                    MCRCustPaymTable_InstBill.CustAccount,
                    MCRCustPaymTable_InstBill.PaymInfoRecId,
                    salesTableCallerSKS);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>SKS_CC_CreditCardCust_OnClicked</Name>
				<Source><![CDATA[
    [FormControlEventHandler(formControlStr(MCRCustPaymInstallments, SKS_CC_CreditCardCust), FormControlEventType::Clicked)]
    public void SKS_CC_CreditCardCust_OnClicked(FormControl _sender, FormControlEventArgs _e)
    {
        if (!isPayFabricActiveProcessor)
        {
            return;
        }

        if (!salesTableCallerSKS)
        {
            return;
        }       

        CustTable custTableCallerSKS = CustTable::find(salesTableCallerSKS.InvoiceAccount);
        if (!custTableCallerSKS)
        {
            return;
        }

        MenuFunction menuFunction;
        Args args = new Args();

        menuFunction = new MenuFunction(menuitemDisplayStr(CreditCardCust), MenuItemType::Display);

        if (custTableCallerSKS.OneTimeCustomer &&
            isSKSOneTimeCustLogicEnabled &&
            salesTableCallerSKS)
        {
            args.parm(int642Str(salesTableCallerSKS.RecId));
        }
            
        args.record(custTableCallerSKS);
        args.caller(this);
        menuFunction.run(args);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>