<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_NL_ING_XML_BE</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_NL_ING_XML_BE extends SKS_EFT_Format_ISO_20022_001001003
/// </summary>
class SKS_EFT_Format_NL_ING_XML_BE extends SKS_EFT_Format_ISO_20022_001001003
{   
    #define.FormatVersion('20230130')
    #define.SEPA('SEPA')
    #define.NON_SEPA('NON-SEPA')
    #define.NON_EUR('NON-EUR')
    #define.SEPA_USTRD('SEPA-USTRD')        //SKS#DevOps:16848
    #define.OGM_VCS('OGM-VCS')              //SKS#DevOps:16848
     
    str btchBookgValue;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_GrpHdr_InitgPty_Id</Name>
				<Source><![CDATA[
    protected void node_GrpHdr_InitgPty_Id(XmlElement _nodeInitgPty)
    {
        //------------------------------------------------------------------------------------------------------
        //      1.8: InitgPty
        //          9.1.12: Id
        //              9.1.13: OrgId
        //                  9.1.14: BICOrBEI
        //                  9.1.15: Othr
        //                      9.1.1.16: Id
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeId;
        XmlElement nodeOrgId;
        XmlElement nodeOther;
        str initiatingPartyId, issr;
        int len;

        this.getSKS_EFT_FileFormatPaymSpec();
    
        initiatingPartyId = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('InitiatingPartyId', mSKS_EFT_FileDetail.RecId,SKS_EFT_CodeLookupType::CodeLookupBank));
        //          9.1.12: Id
        nodeId = _nodeInitgPty.appendChild(xmlDoc.createElement('Id'));

        //              9.1.13: OrgId
        nodeOrgId = nodeId.appendChild(xmlDoc.createElement('OrgId'));

        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #SEPA_USTRD:
            case #OGM_VCS:
                issr = 'KBO-BCE';
                len = 10;
                break;
            default:
                len = 35;
                break;
        }

        if(initiatingPartyId == '')
        {
            if(mSKS_EFT_FileDetail.BankBankSwiftNo)
            {
                //                  9.1.14: BICOrBEI
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeOrgId, 'BICOrBEI', mSKS_EFT_FileDetail.BankBankSwiftNo, 35);
            }
        }
        else
        {
            //                  9.1.15: Other
            nodeOther = nodeOrgId.appendChild(xmlDoc.createElement('Othr'));

            //                      9.1.1.16: Id
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeOther, 'Id', initiatingPartyId, len);

            if(issr)
            {
                //                      Issr
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeOther, 'Issr', issr);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_BtchBookg</Name>
				<Source><![CDATA[
    protected void node_PmtInf_BtchBookg(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.23 BtchBookg
        //------------------------------------------------------------------------------------------------------
       
        btchBookgValue = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('BtchBookg', mSKS_EFT_FileDetail.RecId));
        
        //              2.3: BtchBookg
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodePmtInf, 'BtchBookg', btchBookgValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_PmtTpInf_InstrPrty</Name>
				<Source><![CDATA[
    protected void node_PmtInf_PmtTpInf_InstrPrty(XmlElement _nodePmftTpInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.7: InstrPrty
        //------------------------------------------------------------------------------------------------------
        str instrPrtyValue;
        
        instrPrtyValue = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('InstrPrty', mSKS_EFT_FileDetail.RecId));

        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #SEPA_USTRD:
            case #OGM_VCS:
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodePmftTpInf, 'InstrPrty', instrPrtyValue, 0, false);
                break;
            default:
                if(btchBookgValue != 'true' && instrPrtyValue != '')
                {
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodePmftTpInf, 'InstrPrty', instrPrtyValue, 0, false);
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_PmtTpInf</Name>
				<Source><![CDATA[
    protected void node_PmtInf_PmtTpInf(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.6: PmtTpInf
        //          2.7: InstrPrty
        //          2.8: SvcLvl
        //          2.11: LclInstrm
        //          2.14: CtgyPurp
        //------------------------------------------------------------------------------------------------------
        XmlElement nodePmftTpInf;

        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #SEPA         ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #SEPA_USTRD   ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #OGM_VCS)             //SKS#DevOps:16848
        {
            //      2.6: PmtTpInf
            nodePmftTpInf = _nodePmtInf.appendChild(xmlDoc.createElement('PmtTpInf'));
    
            //          2.7: InstrPrty
            this.node_PmtInf_PmtTpInf_InstrPrty(nodePmftTpInf);
    
            //          2.8: SvcLvl
            this.node_PmtInf_PmtTpInf_SvcLvl(nodePmftTpInf);
    
            //          2.14: CtgyPurp
            this.node_PmtInf_PmtTpInf_CtgyPurp(nodePmftTpInf);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_PmtTpInf_SvcLvl_Cd</Name>
				<Source><![CDATA[
    protected void node_PmtInf_PmtTpInf_SvcLvl_Cd(XmlElement _nodeSvcLvl)
    {
        //------------------------------------------------------------------------------------------------------
        //              2.9: Cd
        //------------------------------------------------------------------------------------------------------
        str value;

        switch(mSKS_EFT_FileDetail.FormatId)
        {
            case 'NL-ING-XML-BE':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #SEPA:
                    case #SEPA_USTRD:
                    case #OGM_VCS:      //SKS#DevOps:16848
                        value = 'SEPA';
                        break;
                }
                break;
        }

        if(value)
        {
            //              2.9: Cd
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeSvcLvl, 'Cd', value);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_PmtTpInf_CtgyPurp</Name>
				<Source><![CDATA[
    protected void node_PmtInf_PmtTpInf_CtgyPurp(XmlElement _nodePmftTpInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.14: CtgyPurp
        //------------------------------------------------------------------------------------------------------
        XmlElement  nodeCtgyPurp;
        str value;

        value = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('CtgyPurp', mSKS_EFT_FileDetail.RecId));
        if(value)
        {
            //          2.14: CtgyPurp
            nodeCtgyPurp = _nodePmftTpInf.appendChild(xmlDoc.createElement('CtgyPurp'));
                
            //              2.15: Cd
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCtgyPurp, 'Cd', value);
        }
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_CdtrAcct</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_CdtrAcct(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.80: CdtrAcct
        //              Id
        //                  Othr
        //                  Id
        //              Tp/Ptry
        //------------------------------------------------------------------------------------------------------
    
        XmlElement nodeCdtrAcct;
        XmlElement nodeCdtrAcctId;
        XmlElement nodeCdtrAcctIdOthr;
    
        //          2.80: CdtrAcct
        nodeCdtrAcct = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('CdtrAcct'));
    
        //              Id
        nodeCdtrAcctId = nodeCdtrAcct.appendChild(xmlDoc.createElement('Id'));
    
        if(mSKS_EFT_FileDetail.DepBankIBAN != '')
        {
            //                  IBAN
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdtrAcctId, 'IBAN', mSKS_EFT_FileDetail.DepBankIBAN, 35);
        }
        else
        {
            //                  Othr
            nodeCdtrAcctIdOthr = nodeCdtrAcctId.appendChild(xmlDoc.createElement('Othr'));
    
            //                      Id
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdtrAcctIdOthr, 'Id', mSKS_EFT_FileDetail.DepBankAcct);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_Dbtr_Nm</Name>
				<Source><![CDATA[
    protected void node_PmtInf_Dbtr_Nm(XmlElement _nodeDbtr)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.19: Dbtr
        //          Nm
        //------------------------------------------------------------------------------------------------------
        int length;

        switch(mSKS_EFT_FileDetail.FormatId)
        {
            case 'NL-ING-XML-BE':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #SEPA:
                        length = 140;
                        break;
                    default : 
                        length = 70;
                        break;
                }
        }
        //          Nm
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeDbtr, 'Nm', this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyName), length, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_Dbtr_PstlAdr</Name>
				<Source><![CDATA[
    protected void node_PmtInf_Dbtr_PstlAdr(XmlElement _nodeDbtr)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.19: Dbtr
        //          PstlAdr
        //------------------------------------------------------------------------------------------------------
        switch(mSKS_EFT_FileDetail.FormatId)
        {
            case 'NL-ING-XML-BE':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #SEPA:
                    case #NON_SEPA:
                    case #NON_EUR:
                    case #SEPA_USTRD:
                    case #OGM_VCS:          //SKS#DevOps:16848
                        this.node_PstlAdr(_nodeDbtr, 
                            this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_BankAccount.WOrdPartyCountryRegionId), 
                            mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr+mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr2,
                            mSKS_EFT_FileDetail_BankAccount.WOrdPartyZipCode, 
                            mSKS_EFT_FileDetail_BankAccount.WOrdPartyCity);
                        break;
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_Dbtr_Id</Name>
				<Source><![CDATA[
    protected void node_PmtInf_Dbtr_Id(XmlElement _nodeDbtr)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.19: Dbtr
        //          9.1.12: Id
        //              9.1.13: OrgId
        //                  9.1.15: Othr
        //                      9.1.16: Id
        XmlElement nodeId;
        XmlElement nodeOrgId;
        XmlElement nodeOther;
        str        dbtrId;

        dbtrId = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('DbtrId', mSKS_EFT_FileDetail.RecId,SKS_EFT_CodeLookupType::CodeLookupBank));

        if((mSKS_EFT_FileFormatPaymSpec.TransactionCode == #SEPA        ||
            mSKS_EFT_FileFormatPaymSpec.TransactionCode == #SEPA_USTRD  ||
            mSKS_EFT_FileFormatPaymSpec.TransactionCode == #OGM_VCS)    &&  dbtrId)           // SKS#DevOps:16848
        {
            //          Id
            nodeId = _nodeDbtr.appendChild(xmlDoc.createElement('Id'));

            //              OrgId
            nodeOrgId = nodeId.appendChild(xmlDoc.createElement('OrgId'));

            //                  Othr
            nodeOther = nodeOrgId.appendChild(xmlDoc.createElement('Othr'));

            //                      Id
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeOther, 'Id', dbtrId, 10);

            //                      Issr
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeOther, 'Issr', 'KBO-BCE');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_DbtrAcct</Name>
				<Source><![CDATA[
    protected void node_PmtInf_DbtrAcct(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.20: DbtrAcct
        //          Id
        //              IBAN
        //              Othr
    
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeDbtrAcct;
        XmlElement nodeDbtrAcctId;
        XmlElement nodeOthr;
        str        iban, acctNum;
        int        lengthIBAN;

        iban        = mSKS_EFT_FileDetail.BankBankIBAN;
        acctNum     = mSKS_EFT_FileDetail.BankBankAcct; 

        switch(mSKS_EFT_FileDetail.FormatId)
        {
            case 'NL-ING-XML-BE':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #SEPA:
                        lengthIBAN = 30;
                        acctNum = '';
                        break;
                }
                break;
        }
    
        if(iban || acctNum)
        {
            //      2.20: DbtrAcct
            nodeDbtrAcct = nodePmtInf.appendChild(xmlDoc.createElement('DbtrAcct'));
    
            //          Id
            nodeDbtrAcctId = nodeDbtrAcct.appendChild(xmlDoc.createElement('Id'));
    
            //              IBAN
            if(iban)
            {
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeDbtrAcctId, 'IBAN', iban, lengthIBAN, false);
            }
            else
            {
                //          Othr
                nodeOthr = nodeDbtrAcctId.appendChild(xmlDoc.createElement('Othr'));

                //              Id
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeOthr, 'Id', acctNum, 35, false);
            }
            //              Ccy
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeDbtrAcct, 'Ccy', mSKS_EFT_FileDetail.CurrencyCode);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_DbtrAgt</Name>
				<Source><![CDATA[
    protected void node_PmtInf_DbtrAgt(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.21: DbtrAgt
        //          FinInstnId
        //              BIC
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeDbtrAgt;
        XmlElement nodeFinInstnId;
        XmlElement nodeOthr;
        str        bankBankSwiftNo;

        bankBankSwiftNo = mSKS_EFT_FileDetail.BankBankSwiftNo;

        //      2.21: DbtrAgt
        nodeDbtrAgt = nodePmtInf.appendChild(xmlDoc.createElement('DbtrAgt'));

        //          FinInstnId
        nodeFinInstnId = nodeDbtrAgt.appendChild(xmlDoc.createElement('FinInstnId'));

        if(bankBankSwiftNo)
        {
            //              BIC
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeFinInstnId, 'BIC', bankBankSwiftNo, 0, false);
        }
        else
        {
            //                  Othr
            nodeOthr = nodeFinInstnId.appendChild(xmlDoc.createElement('Othr'));

            //                      Id
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeOthr, 'Id', 'NOTPROVIDED');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_PmtId</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_PmtId(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.28: PmtId
        //                  InstrId
        //                  EndToEndId
        //------------------------------------------------------------------------------------------------------
        XmlElement nodePmtId;
        boolean    printInstrId = false;
        boolean    printEndToEndId = false;

        switch(mSKS_EFT_FileDetail.FormatId)
        {
            case 'NL-ING-XML-BE':                
                printInstrId = true;
                printEndToEndId = true;
                break;
        }
    
        if(printInstrId || printEndToEndId)
        {
            //          2.28: PmtId
            nodePmtId = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('PmtId'));

            if(printInstrId)
            {
                //                  InstrId
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtId, 'InstrId', SKS_PP_StringFormats::strRight(this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference), 35));
            }
            if(printEndToEndId)
            {
                //              2.30: EndToEndId
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtId, 'EndToEndId', SKS_PP_StringFormats::strRight(this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference), 35));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_IntrmyAgt1</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_IntrmyAgt1(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.71: IntrmyAgt1
        //              FinInstnId
        //                  BIC
        //                  ClrSysMmbId
        //                      MmbId
        //                  Nm
        //                  PstlAdr
        //              BrnchId
        //                  Id
        //------------------------------------------------------------------------------------------------------
    
        XmlElement nodeIntrmyAgt1;
        XmlElement nodeFinInstnId;
        XmlElement nodeClrSysMmbId;
        XmlElement nodeBrnchId;
        str        intBankSwift, intBankId;
        boolean printName = true;
        boolean printPstlAdr = true;
        boolean printBranchId = true;

        intBankSwift = mSKS_EFT_FileDetail_Intermediary.IntBankSwift;
        intBankId    = mSKS_EFT_FileDetail_Intermediary.IntBankId;

        switch(mSKS_EFT_FileDetail.FormatId)
        {
            case 'NL-ING-XML-BE':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #SEPA:
                    case #SEPA_USTRD:
                    case #OGM_VCS:              //SKS#DevOps:16848
                        intBankId = '';
                        printName = false;
                        printPstlAdr = false;
                        printBranchId = false;
                        break;
                }
                break;
        }

        if(intBankSwift != '' || intBankId != '')
        {
            //          2.71: IntrmyAgt1
            nodeIntrmyAgt1 = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('IntrmyAgt1'));
    
            //              FinInstnId
            nodeFinInstnId = nodeIntrmyAgt1.appendChild(xmlDoc.createElement('FinInstnId'));
    
            if(intBankSwift)
            {
                //                  BIC
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeFinInstnId, 'BIC', intBankSwift, 0, false);
            }
    
            //                  ClrSysMmbId
            if(intBankId)
            {
                nodeClrSysMmbId = nodeFinInstnId.appendChild(xmlDoc.createElement('ClrSysMmbId'));
                //                      MmbId
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeClrSysMmbId, 'MmbId', intBankId, 0, false);
            }
            if(printName)
            {
                //                  Nm
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeFinInstnId, 'Nm', this.CharacterReplacement(mSKS_EFT_FileDetail_Intermediary.IntBankName), 140, false);
            }
            if(printPstlAdr)
            {
                //                  PstlAdr
                this.node_PstlAdr(nodeFinInstnId, mSKS_EFT_FileDetail_Intermediary.IntBankCountryRegionId, mSKS_EFT_FileDetail_Intermediary.IntBankAddr + '' + mSKS_EFT_FileDetail_Intermediary.IntBankAddr2, '', mSKS_EFT_FileDetail_Intermediary.IntBankCity);
            }
    
            //              BrnchId
            if(mSKS_EFT_FileDetail_Intermediary.IntBankBranch != '' && printBranchId)
            {
                nodeBrnchId = nodeIntrmyAgt1.appendChild(xmlDoc.createElement('BrnchId'));
                //              Id
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeBrnchId, 'Id', this.CharacterReplacement(mSKS_EFT_FileDetail_Intermediary.IntBankBranch));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_CdtrAgt</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_CdtrAgt(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.77: CdtrAgt
        //              FinInstnId
        //                  BIC
        //                  PstlAdr
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeCdtrAgt;
        XmlElement nodeFinInstnId;
        str swift, rtg;

        swift = mSKS_EFT_FileDetail.DepSwiftNo;
        rtg   = mSKS_EFT_FileDetail.DepBankTransit;

        switch(mSKS_EFT_FileDetail.FormatId)
        {
            case 'NL-ING-XML-BE':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #SEPA:
                        rtg = '';
                        break;
                    case #NON_SEPA:
                    case #NON_EUR:
                        if(swift)
                        {
                            rtg = '';
                        }
                        else
                        {
                            swift = '';
                        }
                }
                break;
        }

        if(swift || rtg)
        {
            //          2.77: CdtrAgt
            nodeCdtrAgt = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('CdtrAgt'));
    
            //              FinInstnId
            nodeFinInstnId = nodeCdtrAgt.appendChild(xmlDoc.createElement('FinInstnId'));
    
            //                  BIC
            if(swift)
            {
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeFinInstnId, 'BIC', mSKS_EFT_FileDetail.DepSwiftNo, 0, false);
            }
            if(rtg)
            {
                //                  ClrSysMmbId
                this.node_CdtTrfTxInf_CdtrAgt_MmbId(nodeFinInstnId);
            }
            //                  Nm
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeFinInstnId, 'Nm', this.CharacterReplacement(mSKS_EFT_FileDetail_BenBank.BenBankName), 70, false);

            //                  PstlAdr
            this.node_PstlAdr(nodeFinInstnId, mSKS_EFT_FileDetail_BenBank.BenBankCountryRegionId, mSKS_EFT_FileDetail_BenBank.BenBankAddr, '', mSKS_EFT_FileDetail_BenBank.BenBankCity);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_CdtrAgt_MmbId</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_CdtTrfTxInf_CdtrAgt_MmbId
    /// </summary>
    /// <param name = "_nodeFinInstnId">_nodeFinInstnId</param>
    protected void node_CdtTrfTxInf_CdtrAgt_MmbId(XmlElement _nodeFinInstnId)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.77: CdtrAgent
        //          MmbId
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeClrSysMmbId;
        XmlElement nodeClrSysId;
        str        value;
    
        if(mSKS_EFT_FileDetail.DepBankTransit != '')
        {
            nodeClrSysMmbId = _nodeFinInstnId.appendChild(xmlDoc.createElement('ClrSysMmbId'));

            value = SKS_EFT_Format::getCodelookupvalue('BenBankRC', mSKS_EFT_FileDetail.RecId);
            
            if(value)
            {
                nodeClrSysId = nodeClrSysMmbId.appendChild(xmlDoc.createElement('ClrSysId'));
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeClrSysId, 'Cd', value, 0, false);
            }
           
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeClrSysMmbId, 'MmbId', mSKS_EFT_FileDetail.DepBankTransit, 35, false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_ChrgBr</Name>
				<Source><![CDATA[
    protected void node_PmtInf_ChrgBr(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.51: ChrgBr
        //------------------------------------------------------------------------------------------------------
        str value;
    
        value = SKS_EFT_Format::getCodelookupvalue('Charges',mSKS_EFT_FileDetail.RecId);

        if(value =='')
        {
            value = 'SLEV';
        }
    
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #SEPA_USTRD   ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #OGM_VCS)                     //SKS#DevOps:16848
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodePmtInf, 'ChrgBr', value);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_ChrgBr</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_ChrgBr(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.51: ChrgBr
        //------------------------------------------------------------------------------------------------------
        str value;
    
        value = SKS_EFT_Format::getCodelookupvalue('Charges',mSKS_EFT_FileDetail.RecId);

        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode != #SEPA_USTRD   &&
           mSKS_EFT_FileFormatPaymSpec.TransactionCode != #OGM_VCS)                     //SKS#DevOps:16848
        {    
            if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #SEPA)
            {
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeCdtTrfTxInf, 'ChrgBr', 'SLEV');
            }
            else if(value)
            {
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeCdtTrfTxInf, 'ChrgBr', value);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_Cdtr_Nm</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_Cdtr_Nm(XmlElement _nodeCdtr)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.79: Cdtr
        //              Nm
        //------------------------------------------------------------------------------------------------------
        int len;
        str name = mSKS_EFT_FileDetail.AccountName;

        if(mRemittanceName != '')
        {
            name = mRemittanceName;
        }

        switch(mSKS_EFT_FileDetail.FormatId)
        {
            case 'NL-ING-XML-BE':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #SEPA:
                    case #SEPA_USTRD:
                    case #OGM_VCS:
                        len = 70;
                        break;
                    default:
                        len = 140;
                        break;
                }
                break;
            default : 
                super(_nodeCdtr);
                break;
        }
        //              Nm
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeCdtr, 'Nm', this.CharacterReplacement(name), len);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_Cdtr_PstlAdr</Name>
				<Source><![CDATA[
    protected void node_PmtInf_Cdtr_PstlAdr(XmlElement _nodeCdtr)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.19: Cdtr
        //          PstlAdr
        //------------------------------------------------------------------------------------------------------
        switch(mSKS_EFT_FileDetail.FormatId)
        {
            case 'NL-ING-XML-BE':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #SEPA:
                    case #SEPA_USTRD:
                    case #OGM_VCS:              //SKS#DevOps:16848
                        this.node_PstlAdr(_nodeCdtr, mRemittanceCountryRegionId, mRemittanceAdrLine1, mRemittanceZipCode, mRemittanceCity);
                        break;
                    default:
                        //              PstlAdr
                        this.node_PstlAdr_Structured(_nodeCdtr,mRemittanceCountryRegionId,mRemittanceAdrline1,mRemittanceZipCode,mRemittanceCity,35,mRemittanceAdrline2,mRemittanceState);
                        break;
                }
                break;
            default :
                super(_nodeCdtr);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_RmtInf</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_RmtInf(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.98: RmtInf
        //------------------------------------------------------------------------------------------------------
        SKS_EFT_FileDetail invSKS_EFT_FileDetail;
        XmlElement nodeRmtInf;
        XmlElement nodeStrd;
        XmlElement nodeCdtrRefInf;
        XmlElement nodeTp;
        XmlElement nodeCdOrPrtry;
        boolean firstRec = true;
        str invDetailsString, invPaymId, invNum, paymentId;
        int len;
        int64   value;

        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #OGM_VCS:      //SKS#DevOps:16848
                while select * from invSKS_EFT_FileDetail where invSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId
                             && invSKS_EFT_FileDetail.InvoiceNumber != ''
                {
                    if(firstRec)
                    {
                        //          2.98: RmtInf
                        nodeRmtInf = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('RmtInf'));
                        firstRec = false;
                    }
                    if(invSKS_EFT_FileDetail.PaymId)
                    {
                        //              2.100: Strd
                        nodeStrd = nodeRmtInf.appendChild(xmlDoc.createElement('Strd'));
                
                        //            2.120: CdtrRefInf
                        nodeCdtrRefInf = nodeStrd.appendChild(xmlDoc.createElement('CdtrRefInf'));
                
                        //              2.121: Tp
                        nodeTp = nodeCdtrRefInf.appendChild(xmlDoc.createElement('Tp'));
                    
                        //                  2.122: CdOrPrtry
                        nodeCdOrPrtry = nodeTp.appendChild(xmlDoc.createElement('CdOrPrtry'));
                    
                        //                      2.123: Cd
                        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdOrPrtry, 'Cd', 'SCOR');

                        //                      Issr
                        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeTp, 'Issr', 'BBA');
                    
                        //               2.126: Ref
                        len = 12;
                        invPaymId = strAlpha(invSKS_EFT_FileDetail.PaymId);

                        value = str2Int64(subStr(invPaymId, 1, 10)) mod 97;      //SKS#DevOps:16848

                        if(value == 0)
                        {
                            value = 97;
                        }

                        paymentId = subStr(invPaymId, 1, 10) + SKS_PP_StringFormats::strFill(2, int642Str(value), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left); //SKS#DevOps:16848

                        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdtrRefInf, 'Ref', paymentId, len);
                    }
                }
                break;
            case #SEPA:     //SKS#DevOps:16848
                while select * from invSKS_EFT_FileDetail where invSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId
                             && invSKS_EFT_FileDetail.InvoiceNumber != ''
                {
                    if(firstRec)
                    {
                        //          2.98: RmtInf
                        nodeRmtInf = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('RmtInf'));
                        firstRec = false;
                    }
                    if(invSKS_EFT_FileDetail.PaymId)
                    {
                        //              2.100: Strd
                        nodeStrd = nodeRmtInf.appendChild(xmlDoc.createElement('Strd'));
                
                        //            2.120: CdtrRefInf
                        nodeCdtrRefInf = nodeStrd.appendChild(xmlDoc.createElement('CdtrRefInf'));
                
                        //              2.121: Tp
                        nodeTp = nodeCdtrRefInf.appendChild(xmlDoc.createElement('Tp'));
                    
                        //                  2.122: CdOrPrtry
                        nodeCdOrPrtry = nodeTp.appendChild(xmlDoc.createElement('CdOrPrtry'));
                    
                        //                      2.123: Cd
                        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdOrPrtry, 'Cd', 'SCOR');

                        //                      Issr
                        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeTp, 'Issr', 'BBA');
                    
                        //                          Ref
                        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdtrRefInf, 'Ref', invSKS_EFT_FileDetail.PaymId, 35);
                    }
                    else
                    {
                        invNum = invNum + strFmt('%1,', invSKS_EFT_FileDetail.InvoiceNumber);
                    }
                }
                if(invNum != '')//SKS_VSTS_14916
                {
                    //              2.99: Ustrd
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRmtInf, 'Ustrd', subStr(invNum, 1, strLen(invNum)-1), 140);
                }
                break;
            case #SEPA_USTRD:       //SKS#DevOps:17630
                //          2.98: RmtInf
                if(this.getJournalNotes())
                {
                    nodeRmtInf = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('RmtInf'));

                    //                  Ustrd
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRmtInf, 'Ustrd', this.CharacterReplacement(this.getJournalNotes()), 140);
                }
                else
                {
                    while select InvoiceNumber from invSKS_EFT_FileDetail where invSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId
                             && invSKS_EFT_FileDetail.InvoiceNumber != ''
                    {
                        invDetailsString += strFmt('%1,', invSKS_EFT_FileDetail.InvoiceNumber);
                    }
                    if(invDetailsString)
                    {
                        //          2.98: RmtInf
                        nodeRmtInf = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('RmtInf'));

                        //                  Ustrd
                        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRmtInf, 'Ustrd', this.CharacterReplacement(subStr(invDetailsString, 1, strLen(invDetailsString)-1)), 140);
                    }
                }
                break;
            default:
                while select InvoiceNumber from invSKS_EFT_FileDetail where invSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId
                             && invSKS_EFT_FileDetail.InvoiceNumber != ''
                {
                    invDetailsString += strFmt('%1,', invSKS_EFT_FileDetail.InvoiceNumber);
                }
                if(invDetailsString)
                {
                    //          2.98: RmtInf
                    nodeRmtInf = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('RmtInf'));

                    //                  Ustrd
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRmtInf, 'Ustrd', this.CharacterReplacement(subStr(invDetailsString, 1, strLen(invDetailsString)-1)));
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJournalNotes</Name>
				<Source><![CDATA[
    private str getJournalNotes()
    {
        LedgerJournalTrans ledgerJournalTrans;

        select firstonly crossCompany PaymentNotes from ledgerJournalTrans where
            ledgerJournalTrans.RecId == mSKS_EFT_FileDetail.PaymentLineRecId;

        return strReplace(ledgerJournalTrans.PaymentNotes, '\r', ' ');
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectPaymentRecords</Name>
				<Source><![CDATA[
    [SuppressBPWarning('BPErrorSelectUsingFirstOnly', 'The buffer is used in next statement or in a datasource query loop.')]
    protected void selectPaymentRecords()
    {
        //------------------------------------------------------------------------------------------------------
        // Standard payment selction
        // Override if different selection is need for a format
        //------------------------------------------------------------------------------------------------------
    
        //Order by clause must match the clause in the SKS_EFT_Processing.SumByPayment
        select * from mSKS_EFT_FileDetail
            join mSKS_EFT_FileDetail_VendAddress
            join mSKS_EFT_FileDetail_BenBank
            join mSKS_EFT_FileDetail_Intermediary
            join mSKS_EFT_FileDetail_CreditParty
            join msKS_EFT_FileDetail_Instructions
            join mSKS_EFT_FileDetail_BankAccount
                order by mSKS_EFT_FileDetail.PaymentCompany, //SKS_VSTS_12809
                   mSKS_EFT_FileDetail.RecordSection,
                   mSKS_EFT_FileDetail.PaymMode,
                   mSKS_EFT_FileDetail.BankAccountId,
                   mSKS_EFT_FileDetail.PaymentCurrencyCode,
                   mSKS_EFT_FileDetail.PaymSpec,
                   mSKS_EFT_FileDetail.EffectiveDate,
                   mSKS_EFT_FileDetail.DepCountryRegionId,
                   mSKS_EFT_FileDetail.RecordType,
                   mSKS_EFT_FileDetail.AccountNum,
                   mSKS_EFT_FileDetail.PaymentReference,
                   mSKS_EFT_FileDetail.RecId
          where mSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                mSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                mSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_VendAddress.RefRecId &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_BenBank.RefRecId &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_Intermediary.RefRecId &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_CreditParty.RefRecId &&
                mSKS_EFT_FileDetail.RecId == msKS_EFT_FileDetail_Instructions.RefRecId &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_BankAccount.RefRecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>