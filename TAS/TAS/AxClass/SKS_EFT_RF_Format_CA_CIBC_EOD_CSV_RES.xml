<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_RF_Format_CA_CIBC_EOD_CSV_RES</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_RF_Format_CA_CIBC_EOD_CSV_RES for EOD CSV Inbound Format
/// </summary>
class SKS_EFT_RF_Format_CA_CIBC_EOD_CSV_RES extends SKS_EFT_RF_Format
{
    //Class Variables
    //primities
    boolean gErrorsExist;
    str fileStatus;

    str mFileName;
    str mFileID;
    str mFieldDelimiter;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFile</Name>
				<Source><![CDATA[
    public SKS_EFT_RF_File getFile(str _filename, boolean _serverPath, SKS_BF_BankIntType _SKS_BF_BankIntType = SKS_BF_BankIntType::FileHubLocal)
    {
        CommaStreamIo locCommaStreamIo;
        container locRecord;
        boolean FirstRecordFound = false;
        boolean SecondRecordFound = false;
        System.String locString1, locString2;
        int i;  //index of the current location in the container
        SKS_EB_FileHub fileHub = SKS_EB_FileHub::construct(_SKS_BF_BankIntType);
        
        //Setup filestream
        fileHub.setFileName(_filename);
        fileHub.runFileLoad(_filename);
        fileHub.streamInit();
        locCommaStreamIo = CommaStreamIo::ConstructForRead(fileHub.StreamGet());
        
        locCommaStreamIo.inFieldDelimiter(',');
        locCommaStreamIo.inRecordDelimiter('\n');

        if(!mSKS_EFT_RF_File)
        {
            mSKS_EFT_RF_File = new SKS_EFT_RF_File();
        }

        mSKS_EFT_RF_SentFile = new SKS_EFT_RF_SentFile();

        while(locCommaStreamIo.status() == IO_Status::Ok)
        {
            locRecord = locCommaStreamIo.read();

            if(conLen(locRecord) > 0)
            {
                //Remove any carriage Returns
                for(i = 1; i <= conLen(locRecord); i++)
                {
                    locRecord = conPoke(locRecord, i, strRem(conPeek(locRecord,i), '\r\n'));
                }

                locString1 = strLRTrim(conPeek(locRecord, 1));
                locString2 = strLRTrim(conPeek(locRecord, 7));

                if(!System.String::IsNullOrEmpty(locString1))
                {
                    if(strUpr(locString1) != 'CHANNEL ID')
                    {
                        FirstRecordFound = true;
                    }
                }
                if(!System.String::IsNullOrEmpty(locString2))
                {
                    SecondRecordFound = true;
                }

                if(FirstRecordFound && SecondRecordFound)
                {
                    this.processNode(locRecord);
                    FirstRecordFound = false;
                    SecondRecordFound = false;
                }
            }
        }

        if(locCommaStreamIo)
        {
            locCommaStreamIo.finalize();
            locCommaStreamIo = null;
        }
    
        if(gErrorsExist)
        {
            mSKS_EFT_RF_File = null;
        }

        return this.getSKS_EFT_RF_File();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFormatId</Name>
				<Source><![CDATA[
    public str getFormatId(str _filename, boolean _serverPath, SKS_BF_BankIntType _SKS_BF_BankIntType = SKS_BF_BankIntType::FileHubLocal)
    {
        str rtnval = '';
        int classId;
        CommaStreamIo locCommaIo;
        int i;  //index of the current location in the container
        container locRecord;
        boolean FirstRecordFound = false;
        boolean SecondRecordFound = false;
        System.String locString1, locString2;
        SKS_EB_FileHub fileHub = SKS_EB_FileHub::construct(_SKS_BF_BankIntType);
        
        //Setup filestream
        fileHub.setFileName(_filename);
        fileHub.runFileLoad(_filename);
        fileHub.streamInit();
        locCommaIo = CommaStreamIo::ConstructForRead(fileHub.StreamGet());
        mFieldDelimiter = ',';
        locCommaIo.inFieldDelimiter(mFieldDelimiter);
        locCommaIo.inRecordDelimiter('\n');
        while(locCommaIo.status() == IO_Status::Ok)
        {
            locRecord = locCommaIo.read();

            if(conLen(locRecord) > 0)
            {
                for(i = 1; i <= conLen(locRecord); i++)
                {
                    locRecord = conPoke(locRecord, i, strRem(conPeek(locRecord,i), '\r\n'));
                }

                locString1 = strLRTrim(conPeek(locRecord, 1));
                locString2 = strLRTrim(conPeek(locRecord, 7));

                if(!System.String::IsNullOrEmpty(locString1))
                {
                    if(strUpr(locString1) != 'CHANNEL ID')
                    {
                        FirstRecordFound = true;
                    }
                }
                if(!System.String::IsNullOrEmpty(locString2))
                {
                    SecondRecordFound = true;
                }
                if(FirstRecordFound     &&
                   SecondRecordFound)
                {
                    break;
                }
            }
        }

        if(FirstRecordFound     &&
           SecondRecordFound)
        {
            //ALl Qualifers show this a
            classId = classIdGet(this);
            rtnval = classId2Name(ClassId);
        }
        if(locCommaIo)
        {
            locCommaIo.finalize();
            locCommaIo = null;
        }
    
        return rtnval;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSKS_EFT_RF_File</Name>
				<Source><![CDATA[
    public SKS_EFT_RF_File getSKS_EFT_RF_File()
    {
    
        if(mSKS_EFT_RF_SentFile != null)
        {
            mSKS_EFT_RF_File.addSentFile(mSKS_EFT_RF_SentFile);
            mSKS_EFT_RF_SentFile = null;
        }
    
        return mSKS_EFT_RF_File;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processNode</Name>
				<Source><![CDATA[
    private void processNode(container locRecord)
    {
        //SKS_EFT_RF_SentFile locSKS_EFT_RF_SentFile;
        System.String filekey, transKey, transCode;
        ;

        transKey = strLRTrim(conPeek(locRecord, 7));
        filekey = strLRTrim(conPeek(locRecord, 5));
        transCode = strLRTrim(conPeek(locRecord, 26));

        if(strLen(filekey) < 4)     //Applies CA-CIBC-1464 Format
        {
            filekey = SKS_PP_StringFormats::strFill(4, filekey, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left);
        }

        mSKS_EFT_RF_Transaction = new SKS_EFT_RF_Transaction();
        if(mSKS_EFT_RF_Transaction != null)
        {
            mSKS_EFT_RF_SentFile.addTransaction(mSKS_EFT_RF_Transaction);
            mSKS_EFT_RF_SentFile.setID(filekey);
        }

        //Set the File Reference Number
        if(!System.String::IsNullOrEmpty(transKey))
        {
            mSKS_EFT_RF_Transaction.setID(transKey);
        }
        if(!System.String::IsNullOrEmpty(transCode))
        {
            mSKS_EFT_RF_Transaction.setStatus(transCode);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>outboundFileKeyGen</Name>
				<Source><![CDATA[
    /// <summary>
    /// outboundFileKeyGen
    /// </summary>
    /// <param name = "_OutFilename">_OutFilename</param>
    /// <param name = "_SKS_EFTAP_File">_SKS_EFTAP_File</param>
    /// <returns>File Key</returns>
    public static str outboundFileKeyGen(str _OutFilename, SKS_EFTAP_File _SKS_EFTAP_File)
    {
        SKS_EFT_FileData locSKS_EFT_FileData;
        System.Text.StringBuilder sb;
    
        sb = new System.Text.StringBuilder();

        if(_SKS_EFTAP_File.FormatGroup == 'US-ACH')
        {
            Select firstonly FieldValue from locSKS_EFT_FileData
                where locSKS_EFT_FileData.RefRecId == _SKS_EFTAP_File.RecId
                && locSKS_EFT_FileData.FieldName == 'busDate';
            sb.Append(locSKS_EFT_FileData.FieldValue);
            Select firstonly FieldValue from locSKS_EFT_FileData
                where locSKS_EFT_FileData.RefRecId == _SKS_EFTAP_File.RecId
                && locSKS_EFT_FileData.FieldName == 'busTime';
            sb.Append(locSKS_EFT_FileData.FieldValue);
            Select firstonly FieldValue from locSKS_EFT_FileData
                where locSKS_EFT_FileData.RefRecId == _SKS_EFTAP_File.RecId
                && locSKS_EFT_FileData.FieldName == 'FileIdModifier';
            sb.Append(locSKS_EFT_FileData.FieldValue);
        }
        else if(_SKS_EFTAP_File.FormatGroup == 'CA-CIBC-XML')
        {
            return _SKS_EFTAP_File.FileNbr;
        }
        else if(_SKS_EFTAP_File.FormatGroup == 'CA-CIBC-1464')
        {
            Select firstonly FieldValue from locSKS_EFT_FileData
                where locSKS_EFT_FileData.RefRecId == _SKS_EFTAP_File.RecId
                && locSKS_EFT_FileData.FieldName == 'FileCreationNumber';

            sb.Append(locSKS_EFT_FileData.FieldValue);
        }
    
        return sb.ToString();
    }

]]></Source>
			</Method>
			<Method>
				<Name>outboundTransKeyGen</Name>
				<Source><![CDATA[
    /// <summary>
    /// outboundTransKeyGen
    /// </summary>
    /// <param name = "_FileName">_FileName</param>
    /// <param name = "_SKS_EFT_FileDetail">_SKS_EFT_FileDetail</param>
    /// <param name = "_SKS_EFTAP_FILE">_SKS_EFTAP_FILE</param>
    /// <returns>Transaction key</returns>
    public static str outboundTransKeyGen(str _FileName = '', SKS_EFT_FileDetail _SKS_EFT_FileDetail = null, SKS_EFTAP_File _SKS_EFTAP_FILE = null)
    {
        System.Text.StringBuilder sb;
        SKS_EFT_FileData locSKS_EFT_FileData;

        sb = new System.Text.StringBuilder();

        if(_SKS_EFT_FileDetail.FormatId == 'US-ACH')
        {
            Select firstonly FieldValue from locSKS_EFT_FileData
                where locSKS_EFT_FileData.RefRecId == _SKS_EFT_FileDetail.RecId
                && locSKS_EFT_FileData.FieldName == 'TraceNumber';

            sb.Append(locSKS_EFT_FileData.FieldValue);
        }
        else if(_SKS_EFT_FileDetail.FormatId == 'CA-CIBC-XML' || _SKS_EFT_FileDetail.FormatId == 'CA-CIBC-1464')
        {
            return _SKS_EFT_FileDetail.PaymentReference;
        }

        return sb.ToString();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>