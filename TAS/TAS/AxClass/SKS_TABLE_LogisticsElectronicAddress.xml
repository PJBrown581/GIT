<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_TABLE_LogisticsElectronicAddress</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_TABLE_LogisticsElectronicAddress
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>EH_Insert_Post</Name>
				<Source><![CDATA[
          [PostHandlerFor(tableStr(LogisticsElectronicAddress), tableMethodStr(LogisticsElectronicAddress, insert))]
    public static void EH_Insert_Post(XppPrePostArgs _args)
    {
        LogisticsElectronicAddress locLogisticsElectronicAddress;
        ;

        locLogisticsElectronicAddress = _args.getThis();
        SKS_TABLE_LogisticsElectronicAddress::UpdateCustomerInfoEPay(locLogisticsElectronicAddress);
    }

]]></Source>
			</Method>
			<Method>
				<Name>EH_update_pre</Name>
				<Source><![CDATA[
    [PreHandlerFor(tableStr(LogisticsElectronicAddress), tableMethodStr(LogisticsElectronicAddress, update))]
    public static void EH_update_pre(XppPrePostArgs _args)
    {
        SKS_EPY_Setup   lsks_epy_setup;
        LogisticsElectronicAddress locLogisticsElectronicAddress, locOrigLogisticsElectronicAddress;
        ;

        locLogisticsElectronicAddress = _args.getThis();
        locOrigLogisticsElectronicAddress = locLogisticsElectronicAddress.orig();

        // When the Vendor Address Description or Name change, set the flag for all related Methods of Payment
        SKS_TABLE_LogisticsElectronicAddress::UpdateVendorMethodsOfPayment(locLogisticsElectronicAddress);
        lsks_epy_setup = SKS_EPY_setup::find();

        if(lsks_epy_setup.NonPrimeEmail)
        {
            SKS_TABLE_LogisticsElectronicAddress::UpdateCustomerInfoEPay(locLogisticsElectronicAddress);
        }
        else
        {
            //Send Customer to epay if customer subscribes to epay & a relevant field has changed
            if(((locLogisticsElectronicAddress.IsPrimary != locOrigLogisticsElectronicAddress.IsPrimary)
                || (locLogisticsElectronicAddress.Locator != locOrigLogisticsElectronicAddress.Locator))
                && locLogisticsElectronicAddress.IsPrimary == NoYes::Yes)
            {
                SKS_TABLE_LogisticsElectronicAddress::UpdateCustomerInfoEPay(locLogisticsElectronicAddress);
            }
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>SKS_getContact</Name>
				<Source><![CDATA[
    // For R2 and above select isPrimary from LogisticsElectronicAddress
    // For below R2 select isPrimary from LogisticsLocation
    public static Name SKS_getContact(LogisticsElectronicAddressMethodType _addressMethodType, int64 _DirPartyTableRecid)
    {
        DirPartyContactInfoView         locDirPartyContactInfoView;
        LogisticsElectronicAddress      locLogLogisticsElectronicAddress;

        select Party, IsPrimary from locDirPartyContactInfoView
        where locDirPartyContactInfoView.Party == _DirPartyTableRecid
            && locDirPartyContactInfoView.IsPrimary == NoYes::Yes
        Join Locator, RecId from locLogLogisticsElectronicAddress
            where locLogLogisticsElectronicAddress.RecId == locDirPartyContactInfoView.ElectronicAddress
            && locLogLogisticsElectronicAddress.Type == _addressMethodType;

        return locLogLogisticsElectronicAddress.Locator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>UpdateCustomerInfoEPay</Name>
				<Source><![CDATA[
    private static void UpdateCustomerInfoEPay(LogisticsElectronicAddress _LogisticsElectronicAddress )
    {
        DirPartyContactInfoView locDirPartyContactInfoView;
        custtable locCustTable;
        DirPartyTable locDirPartyTable;
        ;

        while select crossCompany locCustTable
                        join RecId from locDirPartyContactInfoView
                            where locCustTable.Party == locDirPartyContactInfoView.Party
                            && locDirPartyContactInfoView.ElectronicAddress == _LogisticsElectronicAddress.recid
                            && (locDirPartyContactInfoView.Type == LogisticsElectronicAddressMethodType::Email || locDirPartyContactInfoView.Type == LogisticsElectronicAddressMethodType::Phone)
                        join Name from locDirPartyTable
                            where locDirPartyTable.Recid == locCustTable.Party
        {
            //If not ePay Customer, do nothing.
            if(!SKS_Table_CustTable::isEpayCustomer(locCustTable))
            continue;
            changeCompany(locCustTable.company())
            {
                SKS_Table_CustTable::QueueCustomer(locCustTable,
                                    SKS_EPY_ChangeType::Updated,
                                    SKS_EPY_Table::LogisticsElectronicAddress,
                                    _LogisticsElectronicAddress.Recid);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>UpdateVendorMethodsOfPayment</Name>
				<Source><![CDATA[
    private static void UpdateVendorMethodsOfPayment(LogisticsElectronicAddress _LogisticsElectronicAddress)
    {
        #SKS_Global
        SKS_EFT_FileFormat locSKS_EFT_FileFormat_Select;
        SKS_EFT_FileFormat locSKS_EFT_FileFormat_Update;
        SKS_EFT_VendorPaym locSKS_EFT_VendorPaym_Select;
        SKS_EFT_VendorPaym locSKS_EFT_VendorPaym_Update;

        // When the Vendor Address Description or Name change, set the flag for all related Methods of Payment
        if(_LogisticsElectronicAddress.Locator != _LogisticsElectronicAddress.orig().Locator)
        {

            while select crosscompany DataAreaId, FormatId, MALStatus, WBeneRemittanceLocation, LogisticsLocationRecID, recid from locSKS_EFT_VendorPaym_Select
                join FormatId, MastAcctList from locSKS_EFT_FileFormat_Select
                group by locSKS_EFT_VendorPaym_Select.dataAreaId
                where locSKS_EFT_VendorPaym_Select.FormatId == locSKS_EFT_FileFormat_Select.FormatId
                && locSKS_EFT_FileFormat_Select.MastAcctList == NoYes::Yes
                && locSKS_EFT_VendorPaym_Select.MALStatus == SKS_EFT_MALStatus::Pending
                && (locSKS_EFT_VendorPaym_Select.WBeneRemittanceLocation == _LogisticsElectronicAddress.Location
                || locSKS_EFT_VendorPaym_Select.LogisticsLocationRecID == _LogisticsElectronicAddress.Location)

            {
                changeCompany(locSKS_EFT_VendorPaym_Select.company())
                {
                    update_recordSet locSKS_EFT_VendorPaym_Update
                        setting MALStatus = SKS_EFT_MALStatus::New
                        join locSKS_EFT_FileFormat_Update
                        where locSKS_EFT_VendorPaym_Update.FormatId == locSKS_EFT_FileFormat_Update.FormatId
                        && locSKS_EFT_FileFormat_Update.MastAcctList == NoYes::Yes
                        && locSKS_EFT_VendorPaym_Update.MALStatus == SKS_EFT_MALStatus::Pending
                        && (locSKS_EFT_VendorPaym_Update.WBeneRemittanceLocation == _LogisticsElectronicAddress.Location
                        || locSKS_EFT_VendorPaym_Update.LogisticsLocationRecID == _LogisticsElectronicAddress.Location);
                }
                locSKS_EFT_VendorPaym_Update = null;
                locSKS_EFT_FileFormat_Update = null;

            }

            while select crosscompany DataAreaId, recid from locSKS_EFT_VendorPaym_Select
                join locSKS_EFT_FileFormat_Select
                group by locSKS_EFT_VendorPaym_Select.dataAreaId
                where locSKS_EFT_VendorPaym_Select.FormatId == locSKS_EFT_FileFormat_Select.FormatId
                && locSKS_EFT_FileFormat_Select.MastAcctList == NoYes::Yes
                && locSKS_EFT_VendorPaym_Select.MALStatus == SKS_EFT_MALStatus::Approved
                && (locSKS_EFT_VendorPaym_Select.WBeneRemittanceLocation == _LogisticsElectronicAddress.Location
                || locSKS_EFT_VendorPaym_Select.LogisticsLocationRecID == _LogisticsElectronicAddress.Location)

            {
                changeCompany(locSKS_EFT_VendorPaym_Select.company())
                {
                    update_recordSet locSKS_EFT_VendorPaym_Update
                        setting MALStatus = SKS_EFT_MALStatus::Update
                        join locSKS_EFT_FileFormat_Update
                        where locSKS_EFT_VendorPaym_Update.FormatId == locSKS_EFT_FileFormat_Update.FormatId
                        && locSKS_EFT_FileFormat_Update.MastAcctList == NoYes::Yes
                        && (locSKS_EFT_VendorPaym_Update.WBeneRemittanceLocation == _LogisticsElectronicAddress.Location
                        || locSKS_EFT_VendorPaym_Update.LogisticsLocationRecID == _LogisticsElectronicAddress.Location);
                }
                locSKS_EFT_VendorPaym_Update = null;
                locSKS_EFT_FileFormat_Update = null;

            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>SKS_getEmailContantByPurpose</Name>
				<Source><![CDATA[
    public static Name SKS_getEmailContantByPurpose(DirPartyContactLocationRoleNames EmailContactPurpose, int64 _DirPartyTableRecid, DirPartyRecid _Party)
    {
        DirPartyContactInfoView         DirPartyContactInfoView;
        LogisticsElectronicAddress      LogisticsElectronicAddress;
        dirPartyLocation                dirPartyLocation;
        logisticsElectronicAddressRole  logisticsElectronicAddressRole;
        LogisticsLocationRole           locationRole;

        select Locator, Description from logisticsElectronicAddress
                where logisticsElectronicAddress.Type == LogisticsElectronicAddressMethodType::Email
            exists join dirPartyLocation
                where dirPartyLocation.Location == logisticsElectronicAddress.Location &&
                        dirPartyLocation.Party == _Party
            exists join logisticsElectronicAddressRole
                where logisticsElectronicAddressRole.ElectronicAddress == logisticsElectronicAddress.RecId
            exists join locationRole
                where locationRole.RecId == logisticsElectronicAddressRole.LocationRole
                    && locationRole.Name == EmailContactPurpose;

        return LogisticsElectronicAddress.Locator;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>