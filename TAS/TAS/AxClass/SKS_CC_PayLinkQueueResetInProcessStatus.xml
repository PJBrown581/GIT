<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_CC_PayLinkQueueResetInProcessStatus</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_CC_PayLinkQueueResetInProcessStatus extends RunBase
{
    SKS_CC_PayLinkQueue payLinkQueueCaller;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        if (Box::okCancel(strFmt("@SKS:SKGCCInProcessResetStatusConfirmDlgMsg",
                datetime2Str(DateTimeUtil::applyTimeZoneOffset(payLinkQueueCaller.InProcessDateTime, DateTimeUtil::getUserPreferredTimeZone()))),
                DialogButton::Cancel) == DialogButton::Cancel)
        {
            return;
        }
            
        payLinkQueueCaller.InProcess = NoYes::No;
        payLinkQueueCaller.InProcessDateTime = DateTimeUtil::minValue();
        payLinkQueueCaller.InProcessResetStatusLastMsg = strFmt("@SKS:SKGCCInProcessStatusResetByMsg", curUserId(),
            datetime2Str(DateTimeUtil::applyTimeZoneOffset(DateTimeUtil::utcNow(), DateTimeUtil::getUserPreferredTimeZone())));

        payLinkQueueCaller.update();
        info("@SKS:SKGCCInProcessResetSuccessMsg");
    }

]]></Source>
			</Method>
			<Method>
				<Name>setValuesFromCallingRecord</Name>
				<Source><![CDATA[
    public void setValuesFromCallingRecord(SKS_CC_PayLinkQueue _callerPayLinkQueue)
    {
        payLinkQueueCaller = _callerPayLinkQueue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        SKS_CC_PayLinkQueueResetInProcessStatus payLinkQueueResetStatus = SKS_CC_PayLinkQueueResetInProcessStatus::construct();

        SKS_PP_Setup sKS_PP_Setup = SKS_PP_Setup::find();

        if (sks_pp_setup.ModCC == NoYes::No ||
            (sks_pp_setup.CCPLEnableWalletLinks == NoYes::No &&
             sks_pp_setup.CCPLEnablePayLinks == NoYes::No))
        {
            throw error("@SKS:SKGCCResetInprocessStatusIsNotAllowedDueToParameters");
        }

        if (!sKS_PP_Setup.CCPayLinkEnumUpgraded)
        {
            throw error("@SKS:SKGCCRefreshLinkIsNotAllowedDueToUpgrade");
        }

        if (!_args)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        if (!_args.record())
        {
            throw error(Error::missingRecord(funcName()));
        }

        if (_args.dataset() != tableNum(SKS_CC_PayLinkQueue))
        {
            throw error(Error::missingRecord(funcName()));
        }

        payLinkQueueResetStatus.setValuesFromCallingRecord(_args.record());
        payLinkQueueResetStatus.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static SKS_CC_PayLinkQueueResetInProcessStatus construct()
    {
        return new SKS_CC_PayLinkQueueResetInProcessStatus();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public server static ClassDescription description()
    {
        return "@SKS:SKGCCResetInProcessStatus";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>