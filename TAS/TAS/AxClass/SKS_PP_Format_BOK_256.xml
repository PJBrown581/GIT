<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_PP_Format_BOK_256</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_PP_Format_BOK_256 Extends SKS_PP_Format_BankGroup
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>txtDetail</Name>
				<Source><![CDATA[
    //Standard Positive Pay

        // 01-04        PP01
        // 05-14        Account Number      Right Justify and blank fill
        // 15-24        Blank
        // 25-34        Cheque Number       Right Justify and blank fill
        // 35-39        Blank
        // 40-51        Amount              Numeric Characters only. no decimals. Right most two characters read as cents
        // 52-52        Blank
        // 53-53        Void                V = void or Blank for Issue
        // 54-54        Blank
        // 55-62        Issue Date          MMDDYYYY
        // 63-74        Blank
        // 75-134       Payee Line 1        Left Justified and blank fill
        // 135-135      Blank
        // 136-195      Payee Line 2        Left Justififed and blank fill
        // 196-196      Blank
        // 197 256      Payee Line 3        Left Justified and blank fill
    protected str txtDetail()
    {
        Str ItemType;
        int Mult = 1;
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        SKS_PP_Bank bSKS_PP_Bank;
        container   company;
        str         vendorDetails1, vendorDetails2;
        DirPartyNamePrimaryAddressView DirPartyNamePrimaryAddressView;
        VendTable   vendtable;

    
        // Convert negative void numbers to positives
        if (mSKS_PP_FileDetail.ChkType != SKS_PP_ChequeType::Cheque)
        {
            ItemType = 'V';
            if (mSKS_PP_FileDetail.ChkCuryAmt < 0)
            {
                Mult = -1;
            }
        }
        else
        {
            ItemType = ' ';
        }
    
        // 01-04        PP01
        sb.Append(SKS_PP_StringFormats::strFill(4, bSKS_PP_Bank.PP01, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 05-14        Account Number  Right Justify and blank fill
        sb.Append(SKS_PP_StringFormats::strFill(10, mSKS_PP_FileDetail.BnkBankAcct, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 15-24        Blank
        sb.Append(SKS_PP_StringFormats::strFill(10,'',SKS_PP_FillCharacter::Space,SKS_PP_FillSide::Right));

        // 25-34        Cheque Number   Right Justify and blank fill
        sb.Append(SKS_PP_StringFormats::strFill(10,mSKS_PP_FileDetail.ChkRefNbr,SKS_PP_FillCharacter::Zero,SKS_PP_FillSide::Left));

        // 35-39        Blank
        sb.Append(SKS_PP_StringFormats::strFill(5,'',SKS_PP_FillCharacter::Space,SKS_PP_FillSide::Right));

        // 40-51        Amount          Numeric Characters only. no decimals. Right most two characters read as cents
        sb.Append(SKS_PP_StringFormats::strMoney(Mult * mSKS_PP_FileDetail.ChkCuryAmt, 12));

        // 52-52        Blank
        sb.Append(SKS_PP_StringFormats::strFill(1,'',SKS_PP_FillCharacter::Space,SKS_PP_FillSide::Right));

        // 53-53        Void            V = void or Blank for Issue
        sb.Append(ItemType);

        // 54-54        Blank
        sb.Append(SKS_PP_StringFormats::strFill(1,'',SKS_PP_FillCharacter::Space,SKS_PP_FillSide::Right));

        // 55-62        Issue Date      MMDDYYYY
        sb.Append(SKS_PP_StringFormats::strDateMMDDYYYY(mSKS_PP_FileDetail.ChkDocDate));

        // 63-74        Blank
        sb.Append(SKS_PP_StringFormats::strFill(12,'',SKS_PP_FillCharacter::Space,SKS_PP_FillSide::Right));

        // 75-134       Payee Line 1    Left Justified and blank fill
        sb.Append(SKS_PP_StringFormats::strFill(60, mSKS_PP_FileDetail.VendName, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 135-135      Blank
        sb.Append(SKS_PP_StringFormats::strFill(1,'',SKS_PP_FillCharacter::Space,SKS_PP_FillSide::Right));

        company = [mSKS_PP_FileDetail.ChkCpnyId];
        select firstonly crossCompany:company Street, ZipCode, State, ISOcode
            from DirPartyNamePrimaryAddressView
            join vendtable
            where DirPartyNamePrimaryAddressView.Party == vendtable.Party &&
                vendtable.AccountNum == mSKS_PP_FileDetail.VendorAccount;
    
        if(DirPartyNamePrimaryAddressView.Street)
        {
            vendorDetails1 = DirPartyNamePrimaryAddressView.Street;
        }
        if(vendorDetails1 && DirPartyNamePrimaryAddressView.ZipCode)
        {
            vendorDetails1 = vendorDetails1 + ' ' + DirPartyNamePrimaryAddressView.ZipCode;
        }
        else
        {
            vendorDetails1 = DirPartyNamePrimaryAddressView.ZipCode;
        }

        if(DirPartyNamePrimaryAddressView.City)
        {
            vendorDetails2 = DirPartyNamePrimaryAddressView.City;
        }

        if(vendorDetails2 && DirPartyNamePrimaryAddressView.State)
        {
            vendorDetails2 = vendorDetails2 + ' ' + DirPartyNamePrimaryAddressView.State;
        }
        else
        {
            vendorDetails2 = DirPartyNamePrimaryAddressView.State;
        }

        if(vendorDetails2 && DirPartyNamePrimaryAddressView.ISOcode)
        {
            vendorDetails2 = vendorDetails2 + ' ' + DirPartyNamePrimaryAddressView.ISOcode;
        }
        else
        {
            vendorDetails2 = DirPartyNamePrimaryAddressView.ISOcode;
        }

        // 136-195      Payee Line 2    Left Justififed and blank fill
        sb.Append(SKS_PP_StringFormats::strFill(60, vendorDetails1, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 196-196      Blank
        sb.Append(SKS_PP_StringFormats::strFill(1,'',SKS_PP_FillCharacter::Space,SKS_PP_FillSide::Right));

        // 197 256      Payee Line 3    Left Justified and blank fill
        sb.Append(SKS_PP_StringFormats::strFill(60, vendorDetails2, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        return sb.ToString();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>