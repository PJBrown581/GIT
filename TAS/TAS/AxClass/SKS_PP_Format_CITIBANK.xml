<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_PP_Format_CITIBANK</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_PP_Format_CITIBANK Extends SKS_PP_Format_BankGroup
{
    int mTotal_Cnt;
    real mAmtTotal;
    int mHashTotal;
    Str mBankAcct;
    str mPP02;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateAmt</Name>
				<Source><![CDATA[
    real calculateAmt(SKS_PP_FileDetail SKS_PP_FileDetail_2)
    {
        real retVal;
        ;
    
        if (SKS_PP_FileDetail_2.ChkType != SKS_PP_ChequeType::Cheque)
        {
            retVal = 0;
        }
        else
        {
            retVal = SKS_PP_FileDetail_2.ChkCuryAmt;
        }
    
        return retVal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtDetail</Name>
				<Source><![CDATA[
    // CITIBANK POSITIVE PAY FORMAT - Detail Record
    
        // Pos 01-01    1        Record Type 'D'
        // Pos 02-04    3        Bank Number (by state - DC='008', PP02)
        // Pos 05-14    10       Account number - RJ-LZF
        // Pos 15-21    7        Not Used - blanks
        // Pos 22-22    1        Void check indicator ('V'oid, ' ' blank otherwise)
        // Pos 23-32    10       Check number - RJ-LZF
        // Pos 33-42    10       Check Amount (zeroes for void)
        // Pos 43-50    8        Issue date of check (YYYYMMDD)
        // Pos 51-65    15       Additional data - (Payee, LJ - blank filled)
        // Pos 66-80    15       Blanks
    protected str txtDetail()
    {
        // Note that the Working Table has records at the Voucher level (used by EFT as well)
        // They are summarized and coded - so that you can easily get just the check records
        // See the Report | Record Selection filter -
        // These filters will give the Check Records only
        // {SKS_PP_FileDetail.ComputerName} = RIPARAM('ComputerName')  - File can be used by multiple computers at once
        // and {SKS_PP_FileDetail.RecordSummary} <> 'X'                - 'X' records need to be skipped over
        // and {SKS_PP_FileDetail.FileType} = 'P'                      - 'P' records are for Positive Pay
    
        // Below only want records with RecSection = '20P' (payment record)
        // RecSection - defines sections:
        // 10H - Header
        // 20P - Payments
        //   RecType: (within Payments)
        //   10V - Voucher
        //   20P - PreNotes (should not be any with Pos Pay)
        // 30B - Blockfill
        // 40T - Trailer
    
        // The field with the summarized information for a check is RECORDSUMAMT (see below)
    
        Str Amt;
        Str ItemType;
        int Mult;
        SKS_PP_Bank bSKS_PP_Bank;
        Container company;
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        ;
    
        Mult = 1;
        if(mSKS_PP_FileDetail.ChkType != SKS_PP_ChequeType::Cheque)
        {
            ItemType = 'V';
            if(mSKS_PP_FileDetail.ChkCuryAmt < 0)
            {
                Mult = -1;
            }
        }
        else
        {
            ItemType = ' ';
            mTotal_Cnt++;
        }
    
        // Always use the Record Summary Amount - will have correct total for the Check
        Amt =  SKS_PP_StringFormats::strMoney(Mult * mSKS_PP_FileDetail.ChkCuryAmt,10);
    
        mBankAcct = mSKS_PP_FileDetail.BnkBankAcct;
    
        company = [mSKS_PP_FileDetail.ChkCpnyId];
        select crossCompany:company PP02 from bSKS_PP_Bank where bSKS_PP_Bank.BankAccountId == mSKS_PP_FileDetail.ChkBankAcct;
        mPP02 = bSKS_PP_Bank.PP02; // This is used later in the Footer record
    
        mAmtTotal = mAmtTotal + this.calculateAmt(mSKS_PP_FileDetail);
    
        sb.Append('D');
        sb.Append(SKS_PP_StringFormats::strFill(3, substr(bSKS_PP_Bank.PP02,1,3), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        sb.Append(SKS_PP_StringFormats::strFill(10, mSKS_PP_FileDetail.BnkBankAcct, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        sb.Append(SKS_PP_StringFormats::strFill(7, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        sb.Append(ItemType);
        sb.Append(SKS_PP_StringFormats::strFill(10, mSKS_PP_FileDetail.ChkRefNbr, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        sb.Append(Amt);
        sb.Append(SKS_PP_StringFormats::strDateYYYYMMDD(mSKS_PP_FileDetail.ChkDocDate));
        sb.Append(SKS_PP_StringFormats::strFill(15, substr(mSKS_PP_FileDetail.VendName,1,15), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        sb.Append(SKS_PP_StringFormats::strFill(15, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        return sb.ToString();
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtFormatHeader</Name>
				<Source><![CDATA[
    // CITIBANK POSITIVE PAY FORMAT - Header Record
    
        // Pos 01-01    1        Record Type 'H'
        // Pos 02-31    30       Company Name
        // Pos 32-39    8        Effective Date (yyyymmdd)
        // Pos 40-80    41       Blanks
    protected str txtFormatHeader()
    {
        // The valuestring field will hold the Header and/or Trailer information
        // The Grouping of the report is important so the Header/Trailer come out in the correct location
        SKS_PP_FileFormat bFileFormat;
        SKS_PP_Bank bSKS_PP_Bank;
        Container company;
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        ;
    
        select LastEffDate from bFileFormat where bFileFormat.FormatId == mSKS_PP_FileDetail.FormatId;
        company = [mSKS_PP_FileDetail.ChkCpnyId];
        select crossCompany:company PP01 from bSKS_PP_Bank where bSKS_PP_Bank.BankAccountId == mSKS_PP_FileDetail.chkBankAcct;
    
        sb.Append('H');
        sb.Append(SKS_PP_StringFormats::strFill(30, substr(bSKS_PP_Bank.PP01, 1, 30), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        sb.Append(SKS_PP_StringFormats::strDateYYYYMMDD(bFileFormat.LastEffDate));
        sb.Append(SKS_PP_StringFormats::strFill(41, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //Len 80
        return sb.ToString();
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtGroupTrailer</Name>
				<Source><![CDATA[
    // CITIBANK POSITIVE PAY FORMAT - Trailer Record
    
        // Pos 01-01    1        Record Type 'T'
        // Pos 02-04    3        Bank Number (by state - DC='008', PP02)
        // Pos 05-14    10       Account number - RJ-LZF
        // Pos 15-22    8        Not Used - blanks
        // Pos 23-32    10       Check Issued Rec Count (Voided checks are NOT included)
        // Pos 33-42    10       Total Dollar Amount (Only include totals for Issued records)
        // Pos 43-80    38       Blanks
    protected str txtGroupTrailer()
    {
        str Amt;
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        ;
    
        Amt =  SKS_PP_StringFormats::strMoney(mAmtTotal,10);
        mAmtTotal = 0;
    
        sb.Append('T');
        sb.Append(SKS_PP_StringFormats::strFill(3,Substr(mPP02,1, 3),SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left));
        sb.Append(SKS_PP_StringFormats::strFill(10, substr(mBankAcct,1,10), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        sb.Append(SKS_PP_StringFormats::strFill(8, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        sb.Append(SKS_PP_StringFormats::strFill(10, int2str(mTotal_Cnt), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        mTotal_Cnt = 0;
        sb.Append(Amt);
        sb.Append(SKS_PP_StringFormats::strFill(38, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
    
        return sb.ToString();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>