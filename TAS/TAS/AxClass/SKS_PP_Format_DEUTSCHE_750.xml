<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_PP_Format_DEUTSCHE_750</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_PP_Format_DEUTSCHE_750 extends SKS_PP_Format_BankGroup
{
    //BankAccountID gPrevBankAccountID;
    //SKS_PP_Bank gSKS_PP_Bank;
    date gFileDate;
    Name gCompanyName;
    int gCheckCount, gIssueChkCount, gVoidChkCount, gCancelChkCount;
    real gCancelTotAmt, gIssueTotAmt, gTotalAmount;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>txtDetail</Name>
				<Source><![CDATA[
    protected str txtDetail()
    {
        //Field Name        Length    Start Location    End Location    Allowable character type    Explanation
        //Filler                1    1    1    Space
        //Flag                    1    2    2    Alpha    "Issue - Space / Blank Void - ""V"""
        //Filler                1    3    3    Space
        //Account Number        8    4    11    Numeric    "Deutsche Bank Account Number right justified - leading zeros"
        //Filler                5    12    16    Space
        //Check Number            10    17    26    Numeric    "Check Serial Number  (zero-filled from the left)"
        //Issue Date            6    27    32    Numeric    MMDDYY
        //Amount                11    33    43    Numeric    "Dollar amount Decimal Point Assumed (Omitted) Currency always USD (Omitted)"
        //Sub Account            13    44    56    Numeric    Optional (only if assigned)
        //Filler                2    57    58    Space
        //Additional Data        15    59    73    Alpha    Optional (Only if Assigned) Spaces
        //Filler                5    74    78    Space
        //Payee Country Code    2    79    80    Alpha    ISO Country Code of the Payee
        //Payee Line 1 (Name)    60    81    140    Alpha    "Left-Justified, Trailing Space will be used for PPP customers"
        //Payee Line 2 (Name)    60    141    200    Alpha    "Left-Justified, Trailing Spaces will be used for PPP customers"
        //Payee Line 3 (Address)    100    201    300    Alpha    "Left-Justified, Trailing Spaces"
        //Payee Line 4 (Address)    100    301    400    Alpha    "Left-Justified, Trailing Spaces"
        //Payee Line 5 (Address)    100    401    500    Alpha    "Left-Justified, Trailing Spaces"
        //Payee Line 6 (Address)    100    501    600    Alpha    "Left-Justified, Trailing Spaces"
        //Reference Information        150    601    750    Alpha    "Left-Justified, Trailing Spaces
    
        int Mult;
        str ItemType;
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        DirPartyNamePrimaryAddressView DirPartyNamePrimaryAddressView;
        //SKS_VSTS_13097 -->
        BankChequeTable  backchequeTable;
        LedgerJournalTrans ledgerjournalTrans;
        ;
        //SKS_VSTS_13097 <--
        //SKS_VSTS_13128 -->
        Array vendAddrArray = new Array(Types::String);
        str adrLine;
        //SKS_VSTS_13128 <--
    
        //Convert negative void numbers to positives
        Mult = 1;
        gCheckCount++;
        if (mSKS_PP_FileDetail.ChkType != SKS_PP_ChequeType::Cheque)
        {
            if(mSKS_PP_FileDetail.ChkType == SKS_PP_ChequeType::CancelledCheque)
            {
                gCancelChkCount++;
                gCancelTotAmt = gCancelTotAmt + mSKS_PP_FileDetail.chkcuryamt;
                ItemType = 'C';
            }
            else
            {
                gVoidChkCount++;
                itemType = 'V';
            }

            if (mSKS_PP_FileDetail.ChkCuryAmt < 0)
            {
                Mult = -1;
            }
        }
        else
        {
            gIssueChkCount++;
            gIssueTotAmt = gIssueTotAmt + mSKS_PP_FileDetail.chkcuryamt;
            ItemType = 'I';
        }

        sb.Append(SKS_PP_StringFormats::strFill(1, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left));
        sb.Append(SKS_PP_StringFormats::strFill(1, ItemType, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left));
        sb.Append(SKS_PP_StringFormats::strFill(1,'', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left));
        sb.Append(SKS_PP_StringFormats::strFill(8, mSKS_PP_FileDetail.BnkBankAcct, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        sb.Append(SKS_PP_StringFormats::strFill(5,'', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left));
        sb.Append(SKS_PP_StringFormats::strFill(10, mSKS_PP_FileDetail.ChkRefNbr, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        sb.Append(SKS_PP_StringFormats::strDateMMDDYY(mSKS_PP_FileDetail.ChkDocDate));
        if(ItemType == 'I' || ItemType == 'C')
        {
            gTotalAmount = gTotalAmount + mSKS_PP_FileDetail.chkcuryamt;
        }

        if(ItemType == 'V')
        {
            sb.Append(SKS_PP_StringFormats::strFill(718,'', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left));
        }
        else
        {
            sb.Append(SKS_PP_StringFormats::strMoney(Mult * mSKS_PP_FileDetail.chkcuryamt, 11));
        }
        if(ItemType == 'C')
        {
            sb.Append(SKS_PP_StringFormats::strFill(707,'', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left));
        }
        else if(ItemType == 'I')
        {
            sb.Append(SKS_PP_StringFormats::strFill(15, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left));
            sb.Append(SKS_PP_StringFormats::strFill(15, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left));
            sb.Append(SKS_PP_StringFormats::strFill(5, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left));
            //begin - retrieve remittance info for ISO currency code
            //SKS_VSTS_13097 -->
            select firstonly SKS_PP_FileNbr, ChequeNum, Voucher from backchequeTable where    backchequeTable.SKS_PP_FileNbr == mSKS_PP_FileDetail.FileNbr &&
              backchequeTable.ChequeNum == mSKS_PP_FileDetail.ChkRefNbr;

            select firstonly Voucher, RemittanceLocation from ledgerjournalTrans where ledgerjournalTrans.Voucher == backchequeTable.Voucher &&
              ledgerjournalTrans.BankChequeNum == backchequeTable.ChequeNum;

            select firstonly ISOcode, Street, Location from DirPartyNamePrimaryAddressView where DirPartyNamePrimaryAddressView.Location == ledgerjournalTrans.RemittanceLocation;
            //SKS_VSTS_13097 <--
            //end - retrieve remittance info for ISO currency code

            //SKS_VSTS_13128 -->
            vendAddrArray = SKS_PP_50000Bas::StreetToAddressLineArray(DirPartyNamePrimaryAddressView.Street,1);
            if(vendAddrArray.exists(1))
            {
                adrLine = vendAddrArray.value(1);
            }
            //SKS_VSTS_13128 <--

            sb.Append(SKS_PP_StringFormats::strFill(2, DirPartyNamePrimaryAddressView.ISOcode, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left));
            sb.Append(SKS_PP_StringFormats::strFill(60, mSKS_PP_FileDetail.VendName, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
            sb.Append(SKS_PP_StringFormats::strFill(60, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
            sb.Append(SKS_PP_StringFormats::strFill(100, adrLine, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));//SKS_VSTS_13128
            sb.Append(SKS_PP_StringFormats::strFill(100, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
            sb.Append(SKS_PP_StringFormats::strFill(100, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
            sb.Append(SKS_PP_StringFormats::strFill(100, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
            sb.Append(SKS_PP_StringFormats::strFill(150, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
        return sb.ToString();
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtFormatHeader</Name>
				<Source><![CDATA[
    protected str txtFormatHeader()
    {
        //Field Name    Length    Start Location    End Location    Allowable character type    Explanation
        //Filler        1    1    1    Space
        //Flag          1    2    2    Alpha    "H"
        //Filler        1    3    3    Space
        //Sender name   50    4    53    Alpha    Sender Name
        //Filler        1    54    54    Space
        //Issue Date    6    55    60    Numeric    MMDDYY
        //Filler        1    54    54    Space
        //Filler        689    61    750    Space
        System.Text.StringBuilder sb = new System.Text.StringBuilder();

        gCompanyName = CompanyInfo::find().Name;
        gFileDate = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());
        sb.Append(SKS_PP_StringFormats::strFill(1, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        sb.Append('H');
        sb.Append(SKS_PP_StringFormats::strFill(1, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        sb.Append(SKS_PP_StringFormats::strFill(50, gCompanyName, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        sb.Append(SKS_PP_StringFormats::strFill(1, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        sb.Append(SKS_PP_StringFormats::strDateMMDDYY(gFileDate));
        sb.Append(SKS_PP_StringFormats::strFill(1, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        sb.Append(SKS_PP_StringFormats::strFill(689, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        return sb.ToString();
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtFormatTrailer</Name>
				<Source><![CDATA[
    protected str txtFormatTrailer()
    {
        //Field Name    Length    Start Location    End Location    Allowable character type    Explanation
        //Filler        1    1    1    Space
        //Flag            1    2    2    Alpha    "T"
        //Filler        1    3    3    Space
        //Sender name    50    4    53    Alpha    Sender name
        //Filler        1    54    54    Space
        //Issue Date    6    55    60    Numeric    MMDDYY
        //Filler        1    61    61    Space
        //Amount        13    62    74    Numeric    Total amount of all Issues within the file
        //Filler        1    75    75    Space
        //Item number    10    76    85    Numeric    Total number of all Issues within the file
        //Filler        665    86    750    Space
        System.Text.StringBuilder sb = new System.Text.StringBuilder();

        sb.Append(SKS_PP_StringFormats::strFill(1, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left));
        sb.Append(SKS_PP_StringFormats::strFill(1, 'T', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left));
        sb.Append(SKS_PP_StringFormats::strFill(1, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left));
        sb.Append(SKS_PP_StringFormats::strFill(50, gCompanyName, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        sb.Append(SKS_PP_StringFormats::strFill(1, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left));
        sb.Append(SKS_PP_StringFormats::strDateMMDDYY(gFileDate));
        sb.Append(SKS_PP_StringFormats::strFill(1, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left));
        sb.Append(SKS_PP_StringFormats::strMoney(gTotalAmount,13));
        sb.Append(SKS_PP_StringFormats::strFill(1, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left));
        sb.Append(SKS_PP_StringFormats::strFill(10, int2str(gCheckCount), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        sb.Append(SKS_PP_StringFormats::strFill(1, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left));
        sb.Append(SKS_PP_StringFormats::strMoney(gIssueTotAmt,13));
        sb.Append(SKS_PP_StringFormats::strFill(1, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left));
        sb.Append(SKS_PP_StringFormats::strFill(10, int2str(gIssueChkCount), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        sb.Append(SKS_PP_StringFormats::strFill(15, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left));
        sb.Append(SKS_PP_StringFormats::strFill(10, int2str(gVoidChkCount), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        sb.Append(SKS_PP_StringFormats::strFill(1, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left));
        sb.Append(SKS_PP_StringFormats::strMoney(gCancelTotAmt,13));
        sb.Append(SKS_PP_StringFormats::strFill(1, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left));
        sb.Append(SKS_PP_StringFormats::strFill(10, int2str(gCancelChkCount), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        sb.Append(SKS_PP_StringFormats::strFill(590, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left));

        return sb.ToString();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>