<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EPY_ProjInvoiceController</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_EPY_ProjInvoiceController extends PSAProjAndContractInvoiceController
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>outputReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes the report for the print management setting that is currently loaded.
    /// </summary>
    /// <remarks>
    /// The <c>outReports</c> method loops over print management settings and calls this method for each
    /// print management setting that is loaded. Override this method to modify parameters for each print
    /// setting.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    /// A print management object has not been initialized.
    /// </exception>
    protected void outputReport()
    {
        PrintMgmtPrintSettingDetail detail = formLetterReport.getCurrentPrintSetting();
        detail.parmPrintJobSettings(this.parmReportContract().parmPrintSettings());
        detail.parmType(PrintMgmtDocInstanceType::Original);
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        SKS_EPY_ProjInvoiceController controller;
        controller = new SKS_EPY_ProjInvoiceController();

        controller.initArgs(_args);
        controller.parmLoadFromSysLastValue(false);
        controller.parmReportContract().parmPrintSettings().printMediumType(SRSPrintMediumType::archive);
        controller.parmReportContract().parmPrintSettings().fileFormat(SRSReportFileFormat::PDF);
        controller.parmReportContract().parmPrintSettings().overwriteFile(true);
        controller.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static SKS_EPY_ProjInvoiceController construct(Args _args)
    {
        SKS_EPY_ProjInvoiceController      SKS_EPY_ProjInvoiceController = new SKS_EPY_ProjInvoiceController();
       
        SKS_EPY_ProjInvoiceController.initArgs(_args);
        return SKS_EPY_ProjInvoiceController;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initArgs</Name>
				<Source><![CDATA[
    protected void initArgs(Args _args)
    {
        //super(_args);
        if (_args.caller() &&
            _args.caller() is ProjFormLetter)
        {
            projFormLetter = _args.caller();
        }

        if (_args.caller() && _args.caller() is PSAProjPrintInvoice)
        {
            psaProjPrintInvoice = _args.caller();
            printSettings = new SRSPrintDestinationSettings();
            printSettings.unpack(psaProjPrintInvoice.printerSettingsPrintInvoice());
        }

        if (_args.object() &&
            _args.object() is RecordSortedList)
        {
            journalList = _args.object();
        }
        else if (_args.record())
        {
            journalList = new RecordSortedList(tableNum(ProjInvoiceJour));
            // Get journal list from the selected single record or multiple records
            journalList = FormLetter::createJournalListCopy(_args.record());
        }
        else
        {
            throw error(Error::missingRecord(tableStr(ProjInvoiceJour)));
        }

        if (_args.parmEnumType() == enumNum(PrintCopyOriginal))
        {
            printCopyOriginal = _args.parmEnum();
        }

        journalList.first(invoiceJournal);

        documentType = PrintMgmtDocumentType::SIProjInvoice;
        this.parmReportName(PrintMgmtDocType::construct(documentType).getDefaultReportFormat());
        this.parmShowDialog(false);
        this.parmArgs(_args);
     
        
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>