<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_EU_SEB_INT</Name>
	<SourceCode>
		<Declaration><![CDATA[
// SEB International
//
// Supports transaction types: SEPA
//
// Structure:
//  30
//  32A
//  50
//  57A
//  59
//  70
//  72
// Z1
// Z2
/// <summary>
/// SKS_EFT_Format_EU_SEB_INT extends SKS_EFT_Format
/// </summary>
class SKS_EFT_Format_EU_SEB_INT extends SKS_EFT_Format
{
    #define.FormatVersion('20220502')
    BankAccountTable mBankAccountTable;
    int mPaymentCount;
    AmountMST mPaymentAmount;
    #define.Separator(':')
    #define.Slash('/')

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    protected void formatStructure()
    {
        ;
    
        while(mSKS_EFT_FileDetail)
        {
            // Get Bank account
            if(mBankAccountTable.AccountID != mSKS_EFT_FileDetail.BankAccountId)
            {
                mBankAccountTable = BankAccountTable::find(mSKS_EFT_FileDetail.BankAccountId);
            }
    
            // Get SKS_EFT_VendorPaym
            this.getSKS_EFT_VendorPaym();
    
            // Detail lines
            this.rec_20();
            this.rec_30();
            this.rec_32A();
            this.rec_50();
            this.rec_57A();
            this.rec_59();
            this.rec_70();
            this.rec_72();
    
            next mSKS_EFT_FileDetail;
        }
    
        // Format trailer
        this.rec_Z1();
        this.rec_Z2();
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_20</Name>
				<Source><![CDATA[
    //Nbr   Description                                         Comment
    //1     Tag
    //2     Remitter Reference
    boolean rec_20()
    {
        //BP Deviation Documented
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        ;
    
        //1     Tag
        sb.Append(#Separator);
        sb.Append('20');
    
        //2     Remitter Reference
        sb.Append(#Separator);
        sb.Append(subStr(mSKS_EFT_File.FileNbr,1,12));
    
        this.fileWrite(sb.ToString());
        mFileRecCount++;
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_30</Name>
				<Source><![CDATA[
    //Nbr   Description                                         Comment
    //1     Tag
    //2     Execution (remittance) date                         YYMMDD
    boolean rec_30()
    {
        //BP Deviation Documented
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        ;
    
        //1     Tag
        sb.Append(#Separator);
        sb.Append('30');
    
        //2     Execution (remittance) date
        sb.Append(#Separator);
        sb.Append(SKS_PP_StringFormats::strDateYYMMDD(mSKS_EFT_File.EffectiveDate));
    
        this.fileWrite(sb.ToString());
        mFileRecCount++;
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_32A</Name>
				<Source><![CDATA[
    //Nbr   Description                                         Comment
    //1     Tag
    //2     Date                                                YYMMDD
    //3     Currency
    //4     Amount
    boolean rec_32A()
    {
        //BP Deviation Documented
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        AmountCur amt;
        ;
    
        //1     Tag
        sb.Append(#Separator);
        sb.Append('32A');
    
        //2     Date
        sb.Append(#Separator);
        sb.Append(SKS_PP_StringFormats::strDateYYMMDD(mSKS_EFT_File.EffectiveDate));
    
        //3     Currency
        sb.Append(mSKS_EFT_FileDetail.PaymentCurrencyCode);
    
        //4     Amount
        amt = this.getPositiveAmount(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur);
        sb.Append(num2str(amt,0,2,0,0));
    
        this.fileWrite(sb.ToString());
    
        mPaymentCount++;
        mPaymentAmount += amt;
        mFileRecCount++;
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_50</Name>
				<Source><![CDATA[
    //Nbr   Description                                         Comment
    //1     Tag
    //2     Ordering customers Debit account and BIC
    boolean rec_50()
    {
        //BP Deviation Documented
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        ;
    
        //1     Tag
        sb.Append(#Separator);
        sb.Append('50');
    
        //2     Ordering customers Debit account and transit
        sb.Append(#Separator);
        sb.Append(mSKS_EFT_FileDetail.BankBankAcct);
        sb.Append(#Slash);
        sb.Append(SKS_PP_StringFormats::strFill(11,mSKS_EFT_FileDetail.BankBankTransit, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        this.fileWrite(sb.ToString());
        mFileRecCount++;
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_57A</Name>
				<Source><![CDATA[
    //Nbr   Description                                         Comment
    //1     Tag
    //2     Optional credit account followed by BIC
    boolean rec_57A()
    {
        //BP Deviation Documented
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        ;
    
        //1     Tag
        sb.Append(#Separator);
        sb.Append('57A');
    
        //2     IBAN
        sb.Append(#Separator);
        sb.Append(#Slash);
        sb.Append(mSKS_EFT_FileDetail.DepBankIBAN);
        this.fileWrite(sb.ToString());
    
        //      Swift code
        sb = new System.Text.StringBuilder();
        sb.Append(SKS_PP_StringFormats::strFill(11,mSKS_EFT_FileDetail.DepSwiftNo, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        this.fileWrite(sb.ToString());
        mFileRecCount++;
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_59</Name>
				<Source><![CDATA[
    //Nbr   Description                                         Comment
    //1     Tag
    //2     Beneficiary name and address
    boolean rec_59()
    {
        //BP Deviation Documented
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        ;
    
        //1     Tag
        sb.Append(#Separator);
        sb.Append('59');
    
        //2     Beneficiary name
        sb.Append(#Separator);
        sb.Append(subStr(this.CharacterReplacement(mSKS_EFT_VendorPaym.WBeneName), 1, 35));
    
        this.fileWrite(sb.ToString());
        mFileRecCount++;
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_70</Name>
				<Source><![CDATA[
    //Nbr   Description                                         Comment
    //1     Tag
    //2     Details of payment
    boolean rec_70()
    {
        //BP Deviation Documented
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        ;
    
        //1     Tag
        sb.Append(#Separator);
        sb.Append('70');
    
        //2     Details of payment
        sb.Append(#Separator);
        sb.Append(subStr(this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference), 1, 35));
    
        this.fileWrite(sb.ToString());
        mFileRecCount++;
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_72</Name>
				<Source><![CDATA[
    //Nbr   Description                                         Comment
    //1     Tag
    //2     Method of payment                                   Determined by payment specification
    boolean rec_72()
    {
        //BP Deviation Documented
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        ;
    
        //1     Tag
        sb.Append(#Separator);
        sb.Append('72');
    
        //2     Method of payment
        sb.Append(#Separator);
        sb.Append('PRI=');
        if(mSKS_EFT_FileDetail.PaymSpec == 'SEPA')
        {
            sb.Append('U');
        }
        else
        {
            sb.Append('M');
        }
    
        this.fileWrite(sb.ToString());
        mFileRecCount++;
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Z1</Name>
				<Source><![CDATA[
    //Nbr   Description                                         Comment
    //1     Tag
    //2     Number of transactions
    void rec_Z1()
    {
        //BP Deviation Documented
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        ;
    
        //1     Tag
        sb.Append(#Separator);
        sb.Append('Z1');
    
        //2     Number of transactions
        sb.Append(#Separator);
        sb.Append(num2str(mPaymentCount,0,0,0,0));
        mFileRecCount++;
        this.fileWrite(sb.ToString());
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Z2</Name>
				<Source><![CDATA[
    //Nbr   Description                                         Comment
    //1     Tag
    //2     Total amount
    void rec_Z2()
    {
        //BP Deviation Documented
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        ;
    
        //1     Tag
        sb.Append(#Separator);
        sb.Append('Z2');
    
        //2     Total amount
        sb.Append(#Separator);
        sb.Append(num2str(mPaymentAmount,0,2,0,0));
        mFileRecCount++;
        this.fileWrite(sb.ToString());
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>