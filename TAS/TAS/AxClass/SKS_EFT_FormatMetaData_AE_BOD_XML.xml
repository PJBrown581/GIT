<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_FormatMetaData_AE_BOD_XML</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_FormatMetaData_AE_BOD_XML Extends SKS_EFT_Format_MetaData
/// </summary>
public class SKS_EFT_FormatMetaData_AE_BOD_XML Extends SKS_EFT_Format_MetaData
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        productVersion = '';
        formatGroupVersion = '20211217';
        dataContractVersion = '1.0';
        conFormatID = ['AE-BOD-XML'];
        formatfiletype = 'EFT';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFormatFileType</Name>
				<Source><![CDATA[
    protected str getFormatFileType()
    {
        return formatfiletype;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHeaderMetaData</Name>
				<Source><![CDATA[
    protected container getHeaderMetaData()
    {
        container   headerList;

        //Metadata column names of data elements
        //ProductVersion,FormatGroupVersion,UseWithCustomer,UseWithVenodrs,UseWithBanktoBank,UsewithCustReimbursements,
        //BeDesc01,BeDesc02,BeMask01,BeMask02,BlockFill,CompanyIdMask,CompanyIdTitle,CompanyNameTitle,CompanyNameMask,Crlf,Description,EffectiveDateOffset,EntryClassTitle,EntryClassMask,
        //FormatId,FormatType,IMMDestMask,IMMDestTitle,IMMDestNameTitle,IMMDestNameMask,IMMOriginTitle,IMMOriginMask,IMMOriginNameTitle,IMMOriginNameMask,IncludeCpnyCredit,
        //IncludeCpnyDebit,LastEffectiveDate,NextDailyReset,NextDailyResetDate,NextFileId,NextSequenceNumber,PreNote,RecordLength,Selected,TrimRecord,TwoFileNameAddition,
        //WBank01Description,WBank01Mask,WBank01Required,WBank02Required,WBank02Mask,WBank02Description,WBank03Required,WBank03Mask,WBank03Description,WBank04Required,WBank04Mask,
        //WBank04Description,PreNoteDays,EDI,PayDateIsEffDate,ARDateOffset,UseAddenda,MastAcctList,FormatGroup,MultiEffectiveDates,SupportsMultiCompany,ExternalFormat,FundTransferType

        headerList = ConIns(headerList,conLen(headerList)+1,[productVersion,formatGroupVersion,0,1,0,0,'','','','',0,'','','','',0,'AE - Bank of Dubai - ISO20022',0,'','','AE-BOD-XML',1,'','','','','','','','',0,0,'1900-01-01 00:00:00.000',0,'1900-01-01 00:00:00.000',1,1,0,0,0,0,'','','',0,0,'','',0,'','',0,'','',0,0,0,0,0,0,'AE-BOD-XML',0,0,0,0]);

        return headerList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymSpecsMetaData</Name>
				<Source><![CDATA[
    protected container getPaymSpecsMetaData(str _formatID)
    {
        container   paymSpecList;

        //Metadata column names of data elements
        //BARoutingReqd,VBAAccountReqd,VBASwiftReqd,VBAIBANReqd,ARPaymSpecName,BEBeneBankAcctReqd,BE01Reqd,BE02Reqd,BE01Use,BE02Use,PaymSpecFileDescr,RecordSummary,TransactionCode,
        //EmailNote,PaymSpec,PaymSpecName,FilterSeparateFile,FormatId,Selected,CpnyIDNameReq,EmailOff,VendorUse,WireTabs,SamePaymentDate,SelectByPaymentDate,PreNote,TxnNacha,UseCheckNumber,
        //UseWithCustomers,UseWithVendors,EDI,UseWithBanktoBank,FundTransferType,UseWithCustomerReimbursement,InvoiceDetail,RemitAvailability,RemitType,APNameType,APAddressType
        //DDNameType,DDAddressType,CRNameType,CRAddressType

        switch (_formatID)
        {
            case ('AE-BOD-XML'):
                paymSpecList = this.getPaymSpecsMetaData_AE_BOD_XML();
                break;

        }

        return paymSpecList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymSpecsMetaData_AE_BOD_XML</Name>
				<Source><![CDATA[
    private container getPaymSpecsMetaData_AE_BOD_XML()
    {
        container   paymSpecList;

        paymSpecList = ConIns(paymSpecList,conLen(paymSpecList)+1,[0,0,0,0,'',0,0,0,0,0,'Single Unitary Payments',1,'SUP','','SUP','TRADE PAY',0,'AE-BOD-XML',0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,1,1,0,0,0,0]);
        paymSpecList = ConIns(paymSpecList,conLen(paymSpecList)+1,[0,0,0,0,'',0,0,0,0,0,'Multiple Unitary Payments',1,'MUP','','MUP','TRADE PAY',0,'AE-BOD-XML',0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,1,1,0,0,0,0]);
        paymSpecList = ConIns(paymSpecList,conLen(paymSpecList)+1,[0,0,0,0,'',0,0,0,0,0,'Multiple Mass Payments',1,'MMP','','MMP','TRADE PAY',0,'AE-BOD-XML',0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,1,1,0,0,0,0]);

        return paymSpecList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getNotesMetaData</Name>
				<Source><![CDATA[
    protected container getNotesMetaData(str _formatID)
    {
        container   notesList;

        //Metadata column names of data elements
        //FormatId,PaymSpec,Note

        switch (_formatID)
        {
            case ('AE-BOD-XML'):
                notesList = this.getNotesMetaData_AE_BOD_XML();
                break;

        }

        return notesList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getNotesMetaData_AE_BOD_XML</Name>
				<Source><![CDATA[
    private container getNotesMetaData_AE_BOD_XML()
    {
        container   notesList;

        notesList = ConIns(notesList,conLen(notesList)+1,['AE-BOD-XML','SUP','-This format uses Code lookups. Please review the fields on these forms.:--Code lookup fields tab on EFT+ file formats > Payment specifications.:--Vendor ebanking details > Payment specifications > Additional fields.::-Initiating Party Name is required and stored in Organization administration > Setup > Organization > Legal entities > Name field.::-EFT+ bank account > AP EFT+ field> Wire/IAT ordering party tab:--Debtor Name is stored in Name field.:--Address is stored on their specific fields.::-Cash and bank management module > Bank Account:--Either IBAN or Bank account number is required. If both are exist then IBAN will take the precedence.:--SWIFT code is required.::-Vendor Bank Account fields:--Either IBAN or Bank account number is required. If both are exist then IBAN will take the precedence.:--Either SWIFT code or Routing number is required. If both are exist then SWIFT code will take the precedence.::-Vendor eBanking details > Payment specifications fields > Wire transfer/IAT-1 tab:-Beneficiary:--Creditor Name is required and stored in the Name field.:--Set Address1 field.:--Set Address2 field.:--City, State and Zip/postal are stored on their specific fields.:--Country code is required.::-Beneficiary bank:--Creditor agent Name is stored in the Name field.:--Set Address field.:--Country code is required.::-The charges bearer field is set on the Charges indicator field in the Other notes section.::-Regulatory reporting will be included if Central Bank PurposeCode in the payment journal are populated.']);
        notesList = ConIns(notesList,conLen(notesList)+1,['AE-BOD-XML','MUP','-This format uses Code lookups. Please review the fields on these forms.:--Code lookup fields tab on EFT+ file formats > Payment specifications.:--Vendor ebanking details > Payment specifications > Additional fields.::-Initiating Party Name is required and stored in Organization administration > Setup > Organization > Legal entities > Name field.::-EFT+ bank account > AP EFT+ field> Wire/IAT ordering party tab:--Debtor Name is stored in Name field.:--Address is stored on their specific fields.::-Cash and bank management module > Bank Account:--Either IBAN or Bank account number is required. If both are exist then IBAN will take the precedence.:--SWIFT code is required.::-Vendor Bank Account fields:--Either IBAN or Bank account number is required. If both are exist then IBAN will take the precedence.:--Either SWIFT code or Routing number is required. If both are exist then SWIFT code will take the precedence.::-Vendor eBanking details > Payment specifications fields > Wire transfer/IAT-1 tab:-Beneficiary:--Creditor Name is required and stored in the Name field.:--Set Address1 field.:--Set Address2 field.:--City, State and Zip/postal are stored on their specific fields.:--Country code is required.::-Beneficiary bank:--Creditor agent Name is stored in the Name field.:--Set Address field.:--Country code is required.::-The charges bearer field is set on the Charges indicator field in the Other notes section.::-Regulatory reporting will be included if Central Bank PurposeCode in the payment journal are populated.']);
        notesList = ConIns(notesList,conLen(notesList)+1,['AE-BOD-XML','MMP','-This format uses Code lookups. Please review the fields on these forms.:--Code lookup fields tab on EFT+ file formats > Payment specifications.:--Vendor ebanking details > Payment specifications > Additional fields.::-Initiating Party Name is required and stored in Organization administration > Setup > Organization > Legal entities > Name field.::-EFT+ bank account > AP EFT+ field> Wire/IAT ordering party tab:--Debtor Name is stored in Name field.:--Address is stored on their specific fields.::-Cash and bank management module > Bank Account:--Either IBAN or Bank account number is required. If both are exist then IBAN will take the precedence.:--SWIFT code is required.::-Vendor Bank Account fields:--Either IBAN or Bank account number is required. If both are exist then IBAN will take the precedence.:--Either SWIFT code or Routing number is required. If both are exist then SWIFT code will take the precedence.::-Vendor eBanking details > Payment specifications fields > Wire transfer/IAT-1 tab:-Beneficiary:--Creditor Name is required and stored in the Name field.:--Set Address1 field.:--Set Address2 field.:--City, State and Zip/postal are stored on their specific fields.:--Country code is required.::-Beneficiary bank:--Creditor agent Name is stored in the Name field.:--Set Address field.:--Country code is required.::-The charges bearer field is set on the Charges indicator field in the Other notes section.::-Regulatory reporting will be included if Central Bank PurposeCode in the payment journal are populated.']);

        return notesList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getValidationsMetaData</Name>
				<Source><![CDATA[
    protected container getValidationsMetaData(str _formatID)
    {
        container   validationsList;

        //Metadata column names of data elements
        //FormatId,PaymSpec,Id,SourceFieldDesc,SourceFieldLoc,TargetFieldLoc,Notes,SourceContext,SourceField,ISOCountrySpec,CountryContext,Required,LengthValidation,MinLength,MaxLength,UserUpdated,Module

        switch (_formatID)
        {
        }

        return validationsList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getCodeLookupMetaData</Name>
				<Source><![CDATA[
    protected container getCodeLookupMetaData()
    {
        container   codeLookupList;

        //Metadata column names of data elements
        //FormatGroup,CodeID,Description

        codeLookupList = ConIns(codeLookupList,conLen(codeLookupList)+1,['AE-BOD-XML','Cd','Clearing Code']);

        codeLookupList = ConIns(codeLookupList,conLen(codeLookupList)+1,['AE-BOD-XML','ChrgBr','Charge bearer']);

        return codeLookupList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getCodeLookupValuesMetaData</Name>
				<Source><![CDATA[
    protected container getCodeLookupValuesMetaData()
    {
        container   codeLookupValuesList;

        //Metadata column names of data elements
        //FormatGroup,CodeID,Display Value,CodeValue

        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['AE-BOD-XML','Cd','Australian Bank State Branch Code','AUBSB']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['AE-BOD-XML','Cd','Austrian Bankleitzahl','ATBLZ']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['AE-BOD-XML','Cd','Canadian Payments Association Payment Routing Number','CACPA']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['AE-BOD-XML','Cd','CNAPS Identifier','CNAPS']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['AE-BOD-XML','Cd','German Bankleitzahl','DEBLZ']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['AE-BOD-XML','Cd','Helenic Bank Identification Code','GRBIC']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['AE-BOD-XML','Cd','Hong Kong Bank Code','HKNCC']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['AE-BOD-XML','Cd','Indian Financial System Code','INFSC']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['AE-BOD-XML','Cd','Irish National Clearing Code','IENCC']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['AE-BOD-XML','Cd','Italian Domestic Identification Code','ITNCC']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['AE-BOD-XML','Cd','Japan Zengin Clearing Code','JPZGN']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['AE-BOD-XML','Cd','New Zealand National Clearing Code','NZNCC']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['AE-BOD-XML','Cd','Polish National Clearing Code','PLKNR']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['AE-BOD-XML','Cd','Portuguese National Clearing Code','PTNCC']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['AE-BOD-XML','Cd','Russian Central Bank Identification Code','RUCBC']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['AE-BOD-XML','Cd','IBG Sort Code','SGIBG']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['AE-BOD-XML','Cd','South African National Clearing Code','ZANCC']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['AE-BOD-XML','Cd','Spanish Domestic Interbanking Code','ESNCC']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['AE-BOD-XML','Cd','Sweden Bankgiro Clearing Code','SESBA']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['AE-BOD-XML','Cd','Swiss Clearing Code','CHBCC']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['AE-BOD-XML','Cd','Swiss Clearing Code','CHSIC']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['AE-BOD-XML','Cd','Financial Institution Code','TWNCC']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['AE-BOD-XML','Cd','UK Domestic Sort Code','GBDSC']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['AE-BOD-XML','Cd','CHIPS Participant Identifier','USPID']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['AE-BOD-XML','Cd','United States Routing Number','USABA']);

        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['AE-BOD-XML','ChrgBr','Borne by Debtor','DEBT']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['AE-BOD-XML','ChrgBr','Borne by Creditor','CRED']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['AE-BOD-XML','ChrgBr','Shared','SHAR']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['AE-BOD-XML','ChrgBr','Following Service Level','SLEV']);

        return codeLookupValuesList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getFormatLookupsMetaData</Name>
				<Source><![CDATA[
    protected container getFormatLookupsMetaData(str _formatID)
    {
        container   formatLookupsList;

        //Metadata column names of data elements

        switch (_formatID)
        {
            case ('AE-BOD-XML'):
                formatLookupsList = this.getFormatLookupsMetaData_AE_BOD_XML();
                break;

        }

        return formatLookupsList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getFormatLookupsMetaData_AE_BOD_XML</Name>
				<Source><![CDATA[
    private container getFormatLookupsMetaData_AE_BOD_XML()
    {
        container   formatLookupsList;

        formatLookupsList = ConIns(formatLookupsList,conLen(formatLookupsList)+1,['AE-BOD-XML','6','Borne by Debtor','DEBT']);
        formatLookupsList = ConIns(formatLookupsList,conLen(formatLookupsList)+1,['AE-BOD-XML','6','Borne by Creditor','CRED']);
        formatLookupsList = ConIns(formatLookupsList,conLen(formatLookupsList)+1,['AE-BOD-XML','6','Shared','SHAR']);
        formatLookupsList = ConIns(formatLookupsList,conLen(formatLookupsList)+1,['AE-BOD-XML','6','Following Service Level','SLEV']);

        return formatLookupsList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymSpecFieldsMetaData</Name>
				<Source><![CDATA[
    protected container getPaymSpecFieldsMetaData(str _formatID)
    {
        container   paymSpecFieldsList;

        //Metadata column names of data elements
        //FormatGroup,FormatID,PaymentSpec,FormatFieldID,Description,FieldType,CodeID,DefaultValue,Required,FixedValue,FixedValueMask,TechNotes

        switch (_formatID)
        {
            case ('AE-BOD-XML'):
                paymSpecFieldsList = this.getPaymSpecFieldsMetaData_AE_BOD_XML();
                break;

        }

        return paymSpecFieldsList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymSpecFieldsMetaData_AE_BOD_XML</Name>
				<Source><![CDATA[
    private container getPaymSpecFieldsMetaData_AE_BOD_XML()
    {
        container   paymSpecFieldsList;

        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['AE-BOD-XML','AE-BOD-XML','SUP','Cd','Clearing Code',0,'Cd','',0,'','','PmtInf > DbtrAgt > FinInstnId > ClrSysMmbId > ClrSysId > Cd  and  PmtInf > CdtTrfTxInf > CdtrAgt > FinInstnId > ClrSysMmbId > ClrSysId > Cd']);
        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['AE-BOD-XML','AE-BOD-XML','MUP','Cd','Clearing Code',0,'Cd','',0,'','','PmtInf > DbtrAgt > FinInstnId > ClrSysMmbId > ClrSysId > Cd and PmtInf > CdtTrfTxInf > CdtrAgt > FinInstnId > ClrSysMmbId > ClrSysId > Cd']);
        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['AE-BOD-XML','AE-BOD-XML','MMP','Cd','Clearing Code',0,'Cd','',0,'','','PmtInf > DbtrAgt > FinInstnId > ClrSysMmbId > ClrSysId > Cd and PmtInf > CdtTrfTxInf > CdtrAgt > FinInstnId > ClrSysMmbId > ClrSysId > Cd']);

        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['AE-BOD-XML','AE-BOD-XML','SUP','ChrgBr','Charge bearer',0,'ChrgBr','',0,'','','PmtInf > ChrgBr']);
        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['AE-BOD-XML','AE-BOD-XML','MUP','ChrgBr','Charge bearer',0,'ChrgBr','',0,'','','PmtInf > ChrgBr']);
        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['AE-BOD-XML','AE-BOD-XML','MMP','ChrgBr','Charge bearer',0,'ChrgBr','',0,'','','PmtInf > ChrgBr']);

        return paymSpecFieldsList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getControlFormatMetaData</Name>
				<Source><![CDATA[
    protected container getControlFormatMetaData(str _formatID)
    {
        container   ControlFormatList;

        //Metadata column names of data elements
        //FileFormatID,ControlFileFormatID,ControlFileDescription

        switch (_formatID)
        {
        }

        return ControlFormatList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getDeleteMetaData</Name>
				<Source><![CDATA[
    protected container getDeleteMetaData()
    {
        container   deleteList;

        //FormatGroup, FormatId, DetailType, KeyID1, KeyId2, KeyId3

        deleteList = ConIns(deleteList,conLen(deleteList)+1,['AE-BOD-XML','*','FormatLookup','*','*','']);

        return deleteList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankCodeLookupMetaData</Name>
				<Source><![CDATA[
    protected container getBankCodeLookupMetaData()
    {
        container   codeLookupList;

        return codeLookupList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankCodeLookupValuesMetaData</Name>
				<Source><![CDATA[
    protected container getBankCodeLookupValuesMetaData()
    {
        container   codeLookupValuesList;

        return codeLookupValuesList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFileFormatFieldsMetaData</Name>
				<Source><![CDATA[
    protected container getFileFormatFieldsMetaData(str _formatID)
    {
        container   paymSpecFieldsList;

        return paymSpecFieldsList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateVendorCodelookupValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updating vendor code lookpus from BE0X and Legacy code loookups
    /// </summary>
    protected void updateVendorCodelookupValues()
    {
        switch(gSKS_EFT_FileFormat.FormatId)
        {
            case 'AE-BOD-XML':
                if(gSKS_EFT_VendorPaym.WChargesIndic)
                {
                    this.updateVendorFields('ChrgBr', gSKS_EFT_VendorPaym.WChargesIndic, true);
                }
                break;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>