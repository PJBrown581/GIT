<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_PP_Format_HSBC_PAYEE_NET</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_PP_Format_HSBC_PAYEE_NET Extends SKS_PP_Format_BankGroup
{
    str mFooterBankAcct;
    int mVoidChkCount;
    real mVoidChkSum;
    int mChkCount;
    real mChkSum;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>setOrderBy</Name>
				<Source><![CDATA[
    // Remove method if not overriding
    protected SKS_PP_OrderBy setOrderBy()
    {
        return SKS_PP_OrderBy::BankAcct_RefNbr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtDetail</Name>
				<Source><![CDATA[
    // WELLS FARGO POSITIVE PAY FORMAT - Detail Record
    //
    //
    // Pos 01-10    10       Check number - RJ-LZF
    // Pos 11-16    6        Issue date
    // Pos 17-26    10       Account number - LJ-RBF
    // Pos 27-29    3        Trancode (320 = issued check, 370 = cancel old register - void)
    // Pos 30-39    10       Amount (zeroes for void)
    // Pos 40-80    41       Additional description - Payee
    protected str txtDetail()
    {
        int Mult = 1;
        str ItemType;
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        ;
    
        mFooterBankAcct = mSKS_PP_FileDetail.BnkBankAcct;
        if(mSKS_PP_FileDetail.ChkType != SKS_PP_ChequeType::Cheque)
        {
            if(mSKS_PP_FileDetail.ChkCuryAmt < 0)
            {
               Mult = -1;
            }
            mVoidChkCount++;
            mVoidChkSum = mVoidChkSum + (Mult * mSKS_PP_FileDetail.ChkCuryAmt);
            ItemType = 'V';
        }
        else
        {
             mChkCount++;
             mChkSum = mChkSum + mSKS_PP_FileDetail.ChkCuryAmt;
             ItemType = ' ';
        }
    
        sb.Append(SKS_PP_StringFormats::strFill(13, strRtrim(strLtrim(mSKS_PP_FileDetail.BnkBankAcct)), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        sb.Append(SKS_PP_StringFormats::strFill(10, strRtrim(strLtrim(mSKS_PP_FileDetail.ChkRefNbr)), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        sb.Append(SKS_PP_StringFormats::strMoney(Mult * mSKS_PP_FileDetail.ChkCuryAmt, 10));
        sb.Append(SKS_PP_StringFormats::strDateMMDDYYYY(mSKS_PP_FileDetail.ChkDocDate));
        sb.Append(ItemType);
        sb.Append(SKS_PP_StringFormats::strFill(100, strRtrim(strLtrim(mSKS_PP_FileDetail.vendname)), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        sb.Append(SKS_PP_StringFormats::strFill(158, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left));
    
        return sb.ToString();
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtGroupTrailer</Name>
				<Source><![CDATA[
    // Remove method if not overriding
    protected str txtGroupTrailer()
    {
        //BP Deviation Documented
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        ;
    
        sb.Append('T');
        sb.Append(SKS_PP_StringFormats::strFill(13, mFooterBankAcct, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        sb.Append(SKS_PP_StringFormats::strFill(5, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left));
        sb.Append(SKS_PP_StringFormats::strFill(10, int2str(mChkCount), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        sb.Append(SKS_PP_StringFormats::strFill(5, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left));
        sb.Append(SKS_PP_StringFormats::strMoney(mChkSum, 12));
        sb.Append(SKS_PP_StringFormats::strFill(254, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left));
    
        if(mChkCount > 0)
        {
            mChkCount = 0;
            mChkSum = 0;
            return sb.ToString();
        }
        else
        {
            return '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtGroupTrailerLine2</Name>
				<Source><![CDATA[
    protected str txtGroupTrailerLine2()
    {
        //BP Deviation Documented
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        ;
    
        sb.Append('T');
        sb.Append(SKS_PP_StringFormats::strFill(13, mFooterBankAcct, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        sb.Append(SKS_PP_StringFormats::strFill(5, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left));
        sb.Append(SKS_PP_StringFormats::strFill(10, int2str(mVoidChkCount), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        sb.Append(SKS_PP_StringFormats::strFill(5, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left));
        sb.Append(SKS_PP_StringFormats::strMoney(mVoidChkSum, 12));
        sb.Append('VOIDS');
        sb.Append(SKS_PP_StringFormats::strFill(249, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left));
    
        if(mVoidChkCount > 0)
        {
            mVoidChkCount = 0;
            mVoidChkSum = 0;
            return sb.ToString();
        }
        else
        {
            return '';
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>