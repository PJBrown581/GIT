<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_FormatMetaData_TH_BBL_ICASH_XML</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_FormatMetaData_TH_BBL_ICASH_XML Extends SKS_EFT_Format_MetaData
/// </summary>
public class SKS_EFT_FormatMetaData_TH_BBL_ICASH_XML Extends SKS_EFT_Format_MetaData
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        productVersion = '';
        formatGroupVersion = '20221109';
        dataContractVersion = '1.0';
        conFormatID = ['TH-BBL-ICASH-XML'];
        formatfiletype = 'EFT';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFormatFileType</Name>
				<Source><![CDATA[
    protected str getFormatFileType()
    {
        return formatfiletype;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHeaderMetaData</Name>
				<Source><![CDATA[
    protected container getHeaderMetaData()
    {
        container   headerList;

        //Metadata column names of data elements
//ProductVersion,FormatGroupVersion,UseWithCustomer,UseWithVenodrs,UseWithBanktoBank,UsewithCustReimbursements,
//BeDesc01,BeDesc02,BeMask01,BeMask02,BlockFill,CompanyIdMask,CompanyIdTitle,CompanyNameTitle,CompanyNameMask,Crlf,Description,EffectiveDateOffset,EntryClassTitle,EntryClassMask,
//FormatId,FormatType,IMMDestMask,IMMDestTitle,IMMDestNameTitle,IMMDestNameMask,IMMOriginTitle,IMMOriginMask,IMMOriginNameTitle,IMMOriginNameMask,IncludeCpnyCredit,
//IncludeCpnyDebit,LastEffectiveDate,NextDailyReset,NextDailyResetDate,NextFileId,NextSequenceNumber,PreNote,RecordLength,Selected,TrimRecord,TwoFileNameAddition,
//WBank01Description,WBank01Mask,WBank01Required,WBank02Required,WBank02Mask,WBank02Description,WBank03Required,WBank03Mask,WBank03Description,WBank04Required,WBank04Mask,
//WBank04Description,PreNoteDays,EDI,PayDateIsEffDate,ARDateOffset,UseAddenda,MastAcctList,FormatGroup,MultiEffectiveDates,SupportsMultiCompany,ExternalFormat,FundTransferType

        headerList = ConIns(headerList,conLen(headerList)+1,[productVersion,formatGroupVersion,0,1,0,0,'','','','',0,'','','','',0,'Thailand - Bangkok Bank - iCash- ISO20022',0,'','','TH-BBL-ICASH-XML',1,'','','','','','','','',0,0,'1900-01-01 00:00:00.000',0,'1900-01-01 00:00:00.000',1,1,0,0,0,0,'','','',0,0,'','',0,'','',0,'','',0,0,0,0,0,0,'TH-BBL-ICASH-XML',1,0,0]);

        return headerList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymSpecsMetaData</Name>
				<Source><![CDATA[
    protected container getPaymSpecsMetaData(str _formatID)
    {
        container   paymSpecList;

        //Metadata column names of data elements
//BARoutingReqd,VBAAccountReqd,VBASwiftReqd,VBAIBANReqd,ARPaymSpecName,BEBeneBankAcctReqd,BE01Reqd,BE02Reqd,BE01Use,BE02Use,PaymSpecFileDescr,RecordSummary,TransactionCode,
        //EmailNote,PaymSpec,PaymSpecName,FilterSeparateFile,FormatId,Selected,CpnyIDNameReq,EmailOff,VendorUse,WireTabs,SamePaymentDate,SelectByPaymentDate,PreNote,TxnNacha,UseCheckNumber,
        //UseWithCustomers,UseWithVendors,EDI,UseWithBanktoBank,FundTransferType,UseWithCustomerReimbursement,InvoiceDetail,RemitAvailability,RemitType,APNameType,APAddressType
        //DDNameType,DDAddressType,CRNameType,CRAddressType

        switch (_formatID)
        {
            case ('TH-BBL-ICASH-XML'):
                paymSpecList = this.getPaymSpecsMetaData_TH_BBL_ICASH_XML();
                break;

        }

        return paymSpecList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymSpecsMetaData_TH_BBL_ICASH_XML</Name>
				<Source><![CDATA[
    private container getPaymSpecsMetaData_TH_BBL_ICASH_XML()
    {
        container   paymSpecList;

        paymSpecList = ConIns(paymSpecList,conLen(paymSpecList)+1,[0,0,0,0,'',0,0,0,0,0,'Low value payments',1,'LOW','','LOW','TRADE PAY',0,'TH-BBL-ICASH-XML',0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,1,1,0,0,0,0]);
        paymSpecList = ConIns(paymSpecList,conLen(paymSpecList)+1,[0,0,0,0,'',0,0,0,0,0,'High value payments',1,'HIGH','','HIGH','TRADE PAY',0,'TH-BBL-ICASH-XML',0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,1,1,0,0,0,0]);
        paymSpecList = ConIns(paymSpecList,conLen(paymSpecList)+1,[0,0,0,0,'',0,0,0,0,0,'Check payments',1,'CHK','','CHK','TRADE PAY',0,'TH-BBL-ICASH-XML',0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,3,2,0,0,0,0]);

        return paymSpecList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getNotesMetaData</Name>
				<Source><![CDATA[
    protected container getNotesMetaData(str _formatID)
    {
        container   notesList;

        //Metadata column names of data elements
//FormatId,PaymSpec,Note

        switch (_formatID)
        {
            case ('TH-BBL-ICASH-XML'):
                notesList = this.getNotesMetaData_TH_BBL_ICASH_XML();
                break;

        }

        return notesList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getNotesMetaData_TH_BBL_ICASH_XML</Name>
				<Source><![CDATA[
    private container getNotesMetaData_TH_BBL_ICASH_XML()
    {
        container   notesList;

        notesList = ConIns(notesList,conLen(notesList)+1,['TH-BBL-ICASH-XML','LOW','-This format uses Code lookups. Please review the fields on these forms.:--Code lookup fields tab on EFT+ file formats > Payment specifications.:--Vendor ebanking details > Payment specifications > Additional fields.::-Initiating Party Name is stored in Organization administration > Setup > Organization > Legal entities > Name field.::-EFT+ bank account > AP EFT+ field> Wire/IAT ordering party tab:--Debtor Name is required.:--Set debtor postal address fields.:--Debtor SWIFT code is stored in the SWIFT code field.:--Set Sender Id, Branch Id, Sequence number fields.::-Cash and bank management module > Bank Account:--Either IBAN or Bank account number is required.If both are populated then IBAN will take the precedence.:--Either SWIFT code or Routing numbers is required.If both are populated then SWIFT code will take the precedence.::-Vendor Bank Account fields:--Either IBAN or Bank account number is required.If both are populated then IBAN will take the precedence.:--Either SWIFT code or Routing numbers is required.If both are populated then SWIFT code will take the precedence.::-Vendor eBanking details > Payment specifications fields > Wire transfer/IAT-1 tab:--Creditor Name is required.:--Set creditor postal address.:--Charge Bearer is stored on Charges field of Other notes tab::-Vendor eBanking details > Payment specifications fields > Wire transfer/IAT-2 tab:--Intermediary Agent BIC or Bank Id will be included if the SWIFT code or Bank id on the Intermediary bank section is populated.::-Accounts payable > Vendor > Invoice and delivery tab:--The Tax Id is stored on the Tax exempt number field.:--With hold tax amount will be calculate only if Calculating with hold tax check box and With hold tax group were selected.']);
        notesList = ConIns(notesList,conLen(notesList)+1,['TH-BBL-ICASH-XML','HIGH','-This format uses Code lookups. Please review the fields on these forms.:--Code lookup fields tab on EFT+ file formats > Payment specifications.:--Vendor ebanking details > Payment specifications > Additional fields.::-Initiating Party Name is stored in Organization administration > Setup > Organization > Legal entities > Name field.::-EFT+ bank account > AP EFT+ field> Wire/IAT ordering party tab:--Debtor Name is required.:--Set debtor postal address fields.:--Debtor SWIFT code is stored in the SWIFT code field.:--Set Sender Id, Branch Id, Sequence number fields.::-Cash and bank management module > Bank Account:--Either IBAN or Bank account number is required.If both are populated then IBAN will take the precedence.:--Either SWIFT code or Routing numbers is required.If both are populated then SWIFT code will take the precedence.::-Vendor Bank Account fields:--Either IBAN or Bank account number is required.If both are populated then IBAN will take the precedence.:--Either SWIFT code or Routing numbers is required.If both are populated then SWIFT code will take the precedence.::-Vendor eBanking details > Payment specifications fields > Wire transfer/IAT-1 tab:--Creditor Name is required.:--Set creditor postal address.:--Charge Bearer is stored on Charges field of Other notes tab::-Vendor eBanking details > Payment specifications fields > Wire transfer/IAT-2 tab:--Intermediary Agent BIC or Bank Id will be included if the SWIFT code or Bank id on the Intermediary bank section is populated.::-Accounts payable > Vendor > Invoice and delivery tab:--The Tax Id is stored on the Tax exempt number field.:--With hold tax amount will be calculate only if Calculating with hold tax check box and With hold tax group were selected.']);
        notesList = ConIns(notesList,conLen(notesList)+1,['TH-BBL-ICASH-XML','CHK','-This format uses Code lookups. Please review the fields on these forms.:--Code lookup fields tab on EFT+ file formats > Payment specifications.:--Vendor ebanking details > Payment specifications > Additional fields.::-Initiating Party Name is stored in Organization administration > Setup > Organization > Legal entities > Name field.::-EFT+ bank account > AP EFT+ field> Wire/IAT ordering party tab:--Debtor Name is required.:--Set debtor postal address fields.:--Debtor SWIFT code is stored in the SWIFT code field.:--Set Sender Id, Branch Id, Sequence number fields.::-Cash and bank management module > Bank Account:--Either IBAN or Bank account number is required.If both are populated then IBAN will take the precedence.:--Either SWIFT code or Routing numbers is required.If both are populated then SWIFT code will take the precedence.::-Vendor eBanking details > Payment specifications fields > Wire transfer/IAT-1 tab:--Creditor Name is required.:--Set creditor postal address.:--Charge Bearer is stored on Charges field of Other notes tab::-Vendor eBanking details > Payment specifications fields > Wire transfer/IAT-2 tab:--Intermediary Agent BIC or Bank Id will be included if the SWIFT code or Bank id on the Intermediary bank section is populated.::-Accounts payable > Vendor > Invoice and delivery tab:--The Tax Id is stored on the Tax exempt number field.:--With hold tax amount will be calculate only if Calculating with hold tax check box and With hold tax group were selected.']);

        return notesList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getValidationsMetaData</Name>
				<Source><![CDATA[
    protected container getValidationsMetaData(str _formatID)
    {
        container   validationsList;

        //Metadata column names of data elements
//FormatId,PaymSpec,Id,SourceFieldDesc,SourceFieldLoc,TargetFieldLoc,Notes,SourceContext,SourceField,ISOCountrySpec,CountryContext,Required,LengthValidation,MinLength,MaxLength,UserUpdated,Module

        switch (_formatID)
        {
        }

        return validationsList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getCodeLookupMetaData</Name>
				<Source><![CDATA[
    protected container getCodeLookupMetaData()
    {
        container   codeLookupList;

        //Metadata column names of data elements
//FormatGroup,CodeID,Description

        codeLookupList = ConIns(codeLookupList,conLen(codeLookupList)+1,['TH-BBL-ICASH-XML','DlvryMtd','Delivery method']);
        codeLookupList = ConIns(codeLookupList,conLen(codeLookupList)+1,['TH-BBL-ICASH-XML','Chqtp','Cheque type']);
        codeLookupList = ConIns(codeLookupList,conLen(codeLookupList)+1,['TH-BBL-ICASH-XML','Charges','Charges']);

        return codeLookupList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getCodeLookupValuesMetaData</Name>
				<Source><![CDATA[
    protected container getCodeLookupValuesMetaData()
    {
        container   codeLookupValuesList;

        //Metadata column names of data elements
//FormatGroup,CodeID,Display Value,CodeValue

        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['TH-BBL-ICASH-XML','Chqtp','Bank cheque','BCHQ']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['TH-BBL-ICASH-XML','Chqtp','Customer Cheque','CCHQ']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['TH-BBL-ICASH-XML','Chqtp','Draft','DRFT']);

        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['TH-BBL-ICASH-XML','Charges','By the beneficiary','CRED']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['TH-BBL-ICASH-XML','Charges','By the payer','DEBT']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['TH-BBL-ICASH-XML','Charges','Shared expenses','SHAR']);

        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['TH-BBL-ICASH-XML','DlvryMtd','Email','EMAL']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['TH-BBL-ICASH-XML','DlvryMtd','Fax','Fax']);

        return codeLookupValuesList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymSpecFieldsMetaData</Name>
				<Source><![CDATA[
    protected container getPaymSpecFieldsMetaData(str _formatID)
    {
        container   paymSpecFieldsList;

        //Metadata column names of data elements
//FormatGroup,FormatID,PaymentSpec,FormatFieldID,Description,FieldType,CodeID,DefaultValue,Required,FixedValue,FixedValueMask,TechNotes

        switch (_formatID)
        {
            case ('TH-BBL-ICASH-XML'):
                paymSpecFieldsList = this.getPaymSpecFieldsMetaData_TH_BBL_ICASH_XML();
                break;

        }

        return paymSpecFieldsList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymSpecFieldsMetaData_TH_BBL_ICASH_XML</Name>
				<Source><![CDATA[
    private container getPaymSpecFieldsMetaData_TH_BBL_ICASH_XML()
    {
        container   paymSpecFieldsList;

        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['TH-BBL-ICASH-XML','TH-BBL-ICASH-XML','CHK','Chqtp','Cheque type',0,'Chqtp','Bank cheque',0,'','','PmtInf > CdtTrfTxInf >ChqInstr >ChqTp']);
        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['TH-BBL-ICASH-XML','TH-BBL-ICASH-XML','CHK','DlvryMtd','Delivery method',1,'DlvryMtd','Bank cheque',0,'','XXXXX','PmtInf > CdtTrfTxInf > ChqInstr > DlvryMtd > Cd']);
        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['TH-BBL-ICASH-XML','TH-BBL-ICASH-XML','LOW','DlvryMtd','Delivery method',1,'DlvryMtd','Bank cheque',0,'','XXXXX','PmtInf > CdtTrfTxInf > ChqInstr > DlvryMtd > Cd']);
        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['TH-BBL-ICASH-XML','TH-BBL-ICASH-XML','HIGH','DlvryMtd','Delivery method',1,'DlvryMtd','Bank cheque',0,'','XXXXX','PmtInf > CdtTrfTxInf > ChqInstr > DlvryMtd > Cd']);

        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['TH-BBL-ICASH-XML','TH-BBL-ICASH-XML','LOW','Charges','Charges',0,'Charges','',0,'','','CdtTrfTxInf > ChrgBr']);
        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['TH-BBL-ICASH-XML','TH-BBL-ICASH-XML','HIGH','Charges','Charges',0,'Charges','',0,'','','CdtTrfTxInf > ChrgBr']);

        return paymSpecFieldsList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getControlFormatMetaData</Name>
				<Source><![CDATA[
    protected container getControlFormatMetaData(str _formatID)
    {
        container   ControlFormatList;

        //Metadata column names of data elements
//FileFormatID,ControlFileFormatID,ControlFileDescription

        switch (_formatID)
        {
        }

        return ControlFormatList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getDeleteMetaData</Name>
				<Source><![CDATA[
    protected container getDeleteMetaData()
    {
        container   deleteList;

        //FormatGroup, FormatId, DetailType, KeyID1, KeyId2, KeyId3
        
        deleteList = ConIns(deleteList,conLen(deleteList)+1,['TH-BBL-ICASH-XML','*','FormatLookup','*','*','']);

        return deleteList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankCodeLookupMetaData</Name>
				<Source><![CDATA[
    protected container getBankCodeLookupMetaData()
    {
        container   codeLookupList;

        return codeLookupList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankCodeLookupValuesMetaData</Name>
				<Source><![CDATA[
    protected container getBankCodeLookupValuesMetaData()
    {
        container   codeLookupValuesList;

        return codeLookupValuesList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFileFormatFieldsMetaData</Name>
				<Source><![CDATA[
    protected container getFileFormatFieldsMetaData(str _formatID)
    {
        container   paymSpecFieldsList;

        switch (_formatID)
        {
            case ('TH-BBL-ICASH-XML'):
                paymSpecFieldsList = this.getFileFormatFieldsMetaData_TH_BBL_ICASH_XML();
                break;
        }

        return paymSpecFieldsList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFileFormatFieldsMetaData_TH_BBL_ICASH_XML</Name>
				<Source><![CDATA[
    private container getFileFormatFieldsMetaData_TH_BBL_ICASH_XML()
    {
        container   paymSpecFieldsList;

        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['TH-BBL-ICASH-XML','TH-BBL-ICASH-XML','SenderId','Sender id',1,'SenderId','',0,'','XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX','GrpHdr > InitgPty > Id > Orgid > Othr > Id']);
        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['TH-BBL-ICASH-XML','TH-BBL-ICASH-XML','BranchId','Branch Id',1,'BranchId','',0,'','XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX','PmtInf > DbtrAgt > FinInstnId > BranchId']);
        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['TH-BBL-ICASH-XML','TH-BBL-ICASH-XML','DebtorTaxId','Debtor tax id',1,'DebtorTaxId','',0,'','XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX','Debtor tax id']);
        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['TH-BBL-ICASH-XML','TH-BBL-ICASH-XML','SequenceNum','Sequence number',1,'SequenceNum','',0,'','XXXXX','Sequence number']);

        return paymSpecFieldsList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBankCodelookupValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updating the bank code lookpups from the W0X fields.
    /// </summary>
    protected void updateBankCodelookupValues()
    {
        switch(gSKS_EFT_FileFormat.FormatId)
        {
            case ('TH-BBL-ICASH-XML'):
                if(gSKS_EFT_Bank.W01)
                {
                    this.updateBankFields('SenderId', gSKS_EFT_Bank.W01);
                }
                if(gSKS_EFT_Bank.W02)
                {
                    this.updateBankFields('BranchId', gSKS_EFT_Bank.W02);
                }
                if(gSKS_EFT_Bank.W03)
                {
                    this.updateBankFields('DebtorTaxId', gSKS_EFT_Bank.W03);
                }
                if(gSKS_EFT_Bank.W04)
                {
                    this.updateBankFields('SequenceNum', gSKS_EFT_Bank.W04);
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateVendorCodelookupValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updating vendor code lookpus from BE0X and Legacy code loookups
    /// </summary>
    protected void updateVendorCodelookupValues()
    {
        switch(gSKS_EFT_FileFormat.FormatId)
        {
            case ('TH-BBL-ICASH-XML'):
                if(gSKS_EFT_VendorPaym.WChargesIndic)
                {
                    this.updateVendorFields('Charges', gSKS_EFT_VendorPaym.WChargesIndic, true);
                }
                if(gSKS_EFT_VendorPaym.WBeneMailHandling)
                {
                    this.updateVendorFields('DlvryMtd', gSKS_EFT_VendorPaym.WBeneMailHandling, true);
                }
                break;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>