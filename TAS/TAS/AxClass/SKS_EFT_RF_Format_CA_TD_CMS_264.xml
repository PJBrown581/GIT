<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_RF_Format_CA_TD_CMS_264</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_EFT_RF_Format_CA_TD_CMS_264 extends SKS_EFT_RF_Format
{
    //Class Variables
    //primities
    boolean gErrorsExist;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFile</Name>
				<Source><![CDATA[
    public SKS_EFT_RF_File getFile(str _filename, boolean _serverPath, SKS_BF_BankIntType _SKS_BF_BankIntType = SKS_BF_BankIntType::FileHubLocal)
    {
        SKS_EB_FileHub locSKS_EB_FileHub = SKS_EB_FileHub::construct(_SKS_BF_BankIntType);
        System.String locString;
        System.IO.StreamReader locStreamReader;
    
        //Setup filestream
        locSKS_EB_FileHub.setFileName(_filename);
        locSKS_EB_FileHub.runFileInquire();
        if(!locSKS_EB_FileHub.attrFileExists())
        {
            // The file %1 does not exist.
            error(strfmt("@SYS62207", _filename));
            return null;
        }
        locSKS_EB_FileHub.runFileLoad(_filename);
        locSKS_EB_FileHub.StreamInit();
        locStreamReader = new System.IO.StreamReader(locSKS_EB_FileHub.streamGet());

        //priming read
        locString = locStreamReader.ReadLine();

        if(!mSKS_EFT_RF_File)
        {
            mSKS_EFT_RF_File = new SKS_EFT_RF_File();
        }

        mSKS_EFT_RF_SentFile = new SKS_EFT_RF_SentFile();

        while(locString != null)
        {
            if(!System.String::IsNullOrEmpty(locString))
            {
                this.processRecord(locString);
            }
            locString = locStreamReader.ReadLine();
        }

        //must use the getSKS_EFT_RF_File() method becuase, if any pending mSKS_EFT_RF_SentFile have yet to be pushed into the list, this will do it.
        locStreamReader.Close();
        if(gErrorsExist)
        {
            mSKS_EFT_RF_File = null;
        }

        return this.getSKS_EFT_RF_File();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFormatId</Name>
				<Source><![CDATA[
    public str getFormatId(str _filename, boolean _serverPath, SKS_BF_BankIntType _SKS_BF_BankIntType = SKS_BF_BankIntType::FileHubLocal)
    {

        str rtnval = '';
        int classId;
        int locRecLen;
        //BEGIN VALIDATION VARIABLES
        //BEGIN QUALIFIERS
        boolean pos1to1HeaderRecordA = false;
        boolean pos1to1DetailRecordCorDorZ = false;
        boolean pos175to193OriginatorRefNbr = false;
        //BEGIN DISQUALIFIER VARIABLES
        //none

        //END VALIDATION VARIABLES
        SKS_EB_FileHub locSKS_EB_FileHub = SKS_EB_FileHub::construct(_SKS_BF_BankIntType);
        System.String locString;
        System.IO.StreamReader locStreamReader;
        boolean locAllRecordsHaveRecordNumber = true;
        boolean locAllRecordTypesValid = true;
        container locRecordTypeContainer = ['A','C','D','R','W','X','Z'];

        //Setup filestream
        locSKS_EB_FileHub.setFileName(_filename);
        locSKS_EB_FileHub.runFileInquire();
        if(!locSKS_EB_FileHub.attrFileExists())
        {
            // The file %1 does not exist.
            error(strfmt("@SYS62207", _filename));
            return null;
        }
        locSKS_EB_FileHub.runFileLoad(_filename);
        locSKS_EB_FileHub.StreamInit();
        locStreamReader = new System.IO.StreamReader(locSKS_EB_FileHub.streamGet());
        //priming read
        

   
        while(!locStreamReader.get_EndOfStream())
        {
            locString = locStreamReader.ReadLine();

            if(!System.String::IsNullOrEmpty(locString))
            {
                //a valid Bankgirot file has records of length 264
                locRecLen = locString.get_Length();

                if(!System.String::IsNullOrWhiteSpace(locString) && locRecLen == 264)
                {
                    //Verify the Record Type is included in the spec.
                    if(conFind(locRecordTypeContainer, SKS_PP_StringFormats::strSub(locString, 1, 1)) > 0)
                    {
                        if(!SKS_PP_StringFormats::isNumeric(SKS_PP_StringFormats::strSub(locString, 2, 9)))
                        {
                            //If no record number, then this is not a TD CMS 264.
                            locAllRecordsHaveRecordNumber = false;
                            break;
                        }
                    }
                    else
                    {
                        //all files have to start with one of the spec's record types('A','C','D','R','W','X','Z'). Since this does not, flag it false and quit.
                        locAllRecordTypesValid = false;
                        break;
                    }

                    if(SKS_PP_StringFormats::strSub(locString, 1, 1) == 'A')
                    {
                        pos1to1HeaderRecordA = true;
                    }
                   
                    if(SKS_PP_StringFormats::strSub(locString, 1, 1) == 'Z')
                    {
                        pos1to1DetailRecordCorDorZ = true; 
                    }
                }
            }
        }
        if(pos1to1HeaderRecordA
            && pos1to1DetailRecordCorDorZ
            && locAllRecordTypesValid
            && locAllRecordsHaveRecordNumber)
        {
            //ALl Qualifers show this a CA_TD_CMS_264 file
            classId = classIdGet(this);
            rtnval = classId2Name(ClassId);
        }
        locStreamReader.Close();

        return rtnval;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSKS_EFT_RF_File</Name>
				<Source><![CDATA[
    public SKS_EFT_RF_File getSKS_EFT_RF_File()
    {

        if(mSKS_EFT_RF_SentFile != null)
        {
            mSKS_EFT_RF_File.addSentFile(mSKS_EFT_RF_SentFile);
            mSKS_EFT_RF_SentFile = null;
        }

        return mSKS_EFT_RF_File;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processRecord</Name>
				<Source><![CDATA[
    private void processRecord(str _CurrentRecord)
    {
        str locErrorField;
        str locErrorReasonDesc = '';
        void AppendReasonDesc (str _fieldName)
        {
            if(strLen(locErrorReasonDesc) == 0)
            {
                locErrorReasonDesc = _fieldName;
            }
            else
            {
                locErrorReasonDesc = ' & ' + _fieldName;
            }
        }

        if(strLen(strLRTrim(_CurrentRecord)) > 0)
        {
            if(SKS_PP_StringFormats::strSub(_CurrentRecord, 1, 1) == 'A'   ||
               SKS_PP_StringFormats::strSub(_CurrentRecord, 1, 1) == 'C'   ||
               SKS_PP_StringFormats::strSub(_CurrentRecord, 1, 1) == 'D'   ||
               SKS_PP_StringFormats::strSub(_CurrentRecord, 1, 1) == 'R')
            {
                if(SKS_PP_StringFormats::strSub(_CurrentRecord, 1, 1) == 'C'||
                   SKS_PP_StringFormats::strSub(_CurrentRecord, 1, 1) == 'D')
                {
                    mSKS_EFT_RF_Transaction = new SKS_EFT_RF_Transaction();
                    //Set the Transaction Reference Number
                    mSKS_EFT_RF_Transaction.setID(strLRTrim(SKS_PP_StringFormats::strSub(_CurrentRecord, 175, 19)));

                    //Set the Transaction Status
                    mSKS_EFT_RF_Transaction.setStatus("@SKS:SCFAckRejectedStatus");
                    mSKS_EFT_RF_Transaction.setStatusReason(SKS_PP_StringFormats::strSub(_CurrentRecord, 254, 11));
                    

                    for(int errorCounter = 0; errorCounter < 10; errorCounter += 2)
                    {
                        locErrorField = SKS_PP_StringFormats::strSub(_CurrentRecord, 254 + errorCounter, 2);
                        switch(locErrorField)
                        {
                            case '01':
                                AppendReasonDesc("@SKS3258");
                                break;
                            case '02':
                                AppendReasonDesc("@SKS:SKSAPInboundFileRecordCount");
                                break;
                            case '03':
                                AppendReasonDesc("@SKS:SKGOrigIDandFileNbr");
                                break;
                            case '04':
                                AppendReasonDesc("@SKS:SKSCPACode");
                                break;
                            case '05':
                                AppendReasonDesc("@SKS4306");
                                break;
                            case '06':
                                AppendReasonDesc("@SKS4334");
                                break;
                            case '07':
                                AppendReasonDesc("@SKS:FinancialInstutionWithTransitNbr");
                                break;
                            case '08':
                                AppendReasonDesc("@SKS:SKSPayorPayeeAccountNumber");
                                break;
                            case '09':
                                AppendReasonDesc("@SKS:SKSReservedField");
                                break;
                            case '10':
                                AppendReasonDesc("@SKS:SKSReservedField");
                                break;
                            case '11':
                                AppendReasonDesc("@SKS:SKGOriginatorShortName");
                                break;
                            case '12':
                                AppendReasonDesc("@SKS:SKGPayorPayeeName");
                                break;
                            case '13':
                                AppendReasonDesc("@SKS:SKGOriginatorLongName");
                                break;
                            case '14':
                                AppendReasonDesc("@SKS:SKGOriginatorID");
                                break;
                            case '15':
                                AppendReasonDesc("@SKS:SKGOrigRefNbr");
                                break;
                            case '16':
                                AppendReasonDesc("@SKS:SKGFinInstIDTransitNbrForReturns");
                                break;
                            case '17':
                                AppendReasonDesc("@SKS:SKGAcctNbrForReturnedTrans");
                                break;
                            case '18':
                                AppendReasonDesc("@SKS:SKGOrigSundryInfo");
                                break;
                            case '19':
                                AppendReasonDesc("@SKS:SKSReservedField");
                                break;
                            case '20':
                                AppendReasonDesc("@SKS:SKSReservedField");
                                break;
                        }
                    }
                    mSKS_EFT_RF_Transaction.setStatusReasonDesc(locErrorReasonDesc);
                    mSKS_EFT_RF_SentFile.addTransaction(mSKS_EFT_RF_Transaction);
                }
                if(SKS_PP_StringFormats::strSub(_CurrentRecord, 1, 1) == 'A')
                {
                    mSKS_EFT_RF_SentFile.setID(strLRTrim(SKS_PP_StringFormats::strSub(_CurrentRecord, 11, 14)));
                }
                if(SKS_PP_StringFormats::strSub(_CurrentRecord, 1, 1) == 'R')
                {
                    mSKS_EFT_RF_SentFile.setStatus("@SKS:SCFAckRejectedStatus");
                    mSKS_EFT_RF_SentFile.setStatusReason(strLRTrim(SKS_PP_StringFormats::strSub(_CurrentRecord, 25, 5)));
                    mSKS_EFT_RF_SentFile.setStatusReasonDesc(strLRTrim(SKS_PP_StringFormats::strSub(_CurrentRecord, 30, 75)));
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>outboundFileKeyGen</Name>
				<Source><![CDATA[
    public static str outboundFileKeyGen(str _OutFilename, SKS_EFTAP_File locSKS_EFTAP_File = null)
    {
        SKS_EFT_FileData locSKS_EFT_FileData;
        System.Text.StringBuilder sb;

        sb = new System.Text.StringBuilder();
        Select firstonly FieldValue from locSKS_EFT_FileData
            where locSKS_EFT_FileData.RefRecId == locSKS_EFTAP_File.RecId
                    && locSKS_EFT_FileData.FieldName == 'OrigNbrFileCreationNbr';
        sb.Append(locSKS_EFT_FileData.FieldValue);

        return sb.ToString();
    }

]]></Source>
			</Method>
			<Method>
				<Name>outboundTransKeyGen</Name>
				<Source><![CDATA[
    public static str outboundTransKeyGen(str _FileName = '', SKS_EFT_FileDetail _SKS_EFT_FileDetail = null, SKS_EFTAP_File _SKS_EFTAP_FILE = null)
    {
        str rtnval;
        ;

        rtnval = _SKS_EFT_FileDetail.PaymentReference;
        return rtnval;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>