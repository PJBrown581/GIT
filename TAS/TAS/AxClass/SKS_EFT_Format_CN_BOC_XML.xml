<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_CN_BOC_XML</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_CN_BOC_XML extends SKS_EFT_Format
/// </summary>
class SKS_EFT_Format_CN_BOC_XML extends SKS_EFT_Format
{
    #define.FormatVersion('20220201')
    XmlDocument         xmlDoc;
    XmlElement          nodebatchPayFile;
    XmlElement          nodepayList;
    BankAccountTable    mBankAccountTable;
    int OrderNo;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCodePage</Name>
				<Source><![CDATA[
    protected int getCodePage()
    {
        return 936;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatCurrency</Name>
				<Source><![CDATA[
    private str formatCurrency(AmountMST _amt)
    {
        str amount;

        amount = strRem(num2str(_amt,0,2,0,0), '.');

        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    protected void formatStructure()
    {
        xmlDoc = XmlDocument::newBlank('GBK');

        this.node_batchPayFile();

        this.node_summary();

        this.node_payList();

        while(mSKS_EFT_FileDetail)
        {
            // Get SKS_EFT_FileFormatPaymSpec
            this.getSKS_EFT_FileFormatPaymSpec();

            // Get SKS_EFT_VendorPaym
            this.getSKS_EFT_VendorPaym();

            // Get SKS_EFT_Bank
            this.getSKS_EFT_Bank();

            if(mBankAccountTable.AccountID != mSKS_EFT_FileDetail.BankAccountId)
            {
                // Get Bank account
                mBankAccountTable = BankAccountTable::find(mSKS_EFT_FileDetail.BankAccountId);
            }

            // Get RemittanceAddress
            this.getRemittanceAddress(mSKS_EFT_FileFormatPaymSpec.UseCheckNumber);

            //payList
            this.node_record();

            next mSKS_EFT_FileDetail;
        }
        this.fileWrite(xmlDoc.toString());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankPurposeCode</Name>
				<Source><![CDATA[
    private str getBankPurposeCode()
    {
        LedgerJournalTrans      ledgerJournalTrans;
        BankCentralBankPurpose  bankCentralBankPurpose;

        select Name, Code from bankCentralBankPurpose join BankCentralBankPurposeCode from ledgerJournalTrans
            where bankCentralBankPurpose.Code == ledgerJournalTrans.BankCentralBankPurposeCode
               && ledgerJournalTrans.RecId == mSKS_EFT_FileDetail.PaymentLineRecId;

        return this.CharacterReplacement(bankCentralBankPurpose.Name);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceNbrs</Name>
				<Source><![CDATA[
    protected str getInvoiceNbrs()
    {
        SKS_EFT_FileDetail invSKS_EFT_FileDetail;
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        str invString;

        select InvoiceNumber from invSKS_EFT_FileDetail where invSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId;

        while(invSKS_EFT_FileDetail)
        {
            if(invSKS_EFT_FileDetail.InvoiceNumber == '')
            {
                // If no invoice number, go to next record
                next invSKS_EFT_FileDetail;
                continue;
            }
            sb.Append(invSKS_EFT_FileDetail.InvoiceNumber);

            next invSKS_EFT_FileDetail;

            if(invSKS_EFT_FileDetail)
            {
                sb.Append(' ');
            }
        }

        invString = this.CharacterReplacement(sb.ToString());
        return invString;
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_batchPayFile</Name>
				<Source><![CDATA[
    protected void node_batchPayFile()
    {
        nodebatchPayFile = xmlDoc.appendChild(xmlDoc.createElement('batchPayFile'));
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_payList</Name>
				<Source><![CDATA[
    protected void node_payList()
    {
        //------------------------------------------------------------------------------------------------------
        //      payList
        //------------------------------------------------------------------------------------------------------

        //      payList
        nodepayList = nodebatchPayFile.appendChild(xmlDoc.createElement('payList'));
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_record</Name>
				<Source><![CDATA[
    protected void node_record()
    {
        //------------------------------------------------------------------------------------------------------
        //  record
        //------------------------------------------------------------------------------------------------------
        VendBankAccount lVendBankAccount;
        XmlElement  noderecord;
        str value;
        orderNo++;

        //  record
        noderecord = nodepayList.appendChild(xmlDoc.createElement('record'));

        SKS_EFT_Format::xmlsetAttributeText(noderecord, 'date', SKS_PP_StringFormats::strDateYYYYMMDD(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())));
        SKS_EFT_Format::xmlsetAttributeText(noderecord, 'currencyType', mSKS_EFT_FileDetail.PaymentCurrencyCode);
        SKS_EFT_Format::xmlsetAttributeText(noderecord, 'orderNo', int2str(orderNo));
        SKS_EFT_Format::xmlsetAttributeText(noderecord, 'erpNo', mSKS_EFT_File.FileNbr);
        SKS_EFT_Format::xmlsetAttributeText(noderecord, 'payAccNo', mSKS_EFT_FileDetail.BankBankAcct);
        SKS_EFT_Format::xmlsetAttributeText(noderecord, 'payAccNme', this.CharacterReplacement(mSKS_EFT_Bank.WOrdPartyName));
        SKS_EFT_Format::xmlsetAttributeText(noderecord, 'payOpenBank', this.CharacterReplacement(mBankAccountTable.Name));
    
        select AccountID, BankGroupID, VendAccount
      from lVendBankAccount
     where lVendBankAccount.AccountID == mSKS_EFT_FileDetail.DepBankAccountId &&
           lVendBankAccount.VendAccount == mSKS_EFT_FileDetail.AccountNum;

        if(lVendBankAccount.BankGroupID == mBankAccountTable.BankGroupId)
        {
            SKS_EFT_Format::xmlsetAttributeText(noderecord, 'isOtherBank', '0');
        }
        else
        {
            SKS_EFT_Format::xmlsetAttributeText(noderecord, 'isOtherBank', '1');
        }

        if(mSKS_EFT_VendorPaym.WBenBankCity == mSKS_EFT_Bank.WOrdPartyCity)
        {
            SKS_EFT_Format::xmlsetAttributeText(noderecord, 'isSameCity', '1');
        }
        else
        {
            SKS_EFT_Format::xmlsetAttributeText(noderecord, 'isSameCity', '0');
        }

        SKS_EFT_Format::xmlsetAttributeText(noderecord, 'recAccNo', mSKS_EFT_FileDetail.DepBankAcct);
        SKS_EFT_Format::xmlsetAttributeText(noderecord, 'recAccNme', mRemittanceName);
        SKS_EFT_Format::xmlsetAttributeText(noderecord, 'recOpenBank', this.CharacterReplacement(mSKS_EFT_VendorPaym.WBenBankName));
        SKS_EFT_Format::xmlsetAttributeText(noderecord, 'money', this.formatCurrency(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1));

        value = SKS_EFT_Format::getValueFromCode('UsageCode', mSKS_EFT_FileFormatPaymSpec, mSKS_EFT_VendorPaym.RecId);

        if(value == '')
        {
            value = this.getBankPurposeCode();
        }

        SKS_EFT_Format::xmlsetAttributeText(noderecord, 'usage', value);
        SKS_EFT_Format::xmlsetAttributeText(noderecord, 'comment', this.getInvoiceNbrs());
        SKS_EFT_Format::xmlsetAttributeText(noderecord, 'preflg', '0');
        SKS_EFT_Format::xmlsetAttributeText(noderecord, 'predate', '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_summary</Name>
				<Source><![CDATA[
    protected void node_summary()
    {
        //------------------------------------------------------------------------------------------------------
        //  summary
        //------------------------------------------------------------------------------------------------------
        SKS_EFT_FileDetail  tmpSKS_EFT_FileDetail;
        XmlElement          nodesummary;

        // Select count and sum for this file
        select COUNT(InvoiceOrigAmountCur), SUM(InvoiceSettleAmountPmtCur) from tmpSKS_EFT_FileDetail
        where
            tmpSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
            tmpSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
            tmpSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary;

        //  summary
        nodesummary = nodebatchPayFile.appendChild(xmlDoc.createElement('summary'));

        SKS_EFT_Format::xmlsetAttributeText(nodesummary, 'date', SKS_PP_StringFormats::strDateYYYYMMDD(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())));
        SKS_EFT_Format::xmlsetAttributeText(nodesummary, 'currencyType', mSKS_EFT_FileDetail.PaymentCurrencyCode);
        SKS_EFT_Format::xmlsetAttributeText(nodesummary, 'sumMoney', this.formatCurrency(tmpSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1));
        SKS_EFT_Format::xmlsetAttributeText(nodesummary, 'sumRecords', num2str(tmpSKS_EFT_FileDetail.InvoiceOrigAmountCur,0,0,0,0));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>