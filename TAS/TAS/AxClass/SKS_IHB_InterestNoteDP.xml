<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_IHB_InterestNoteDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
[SRSReportParameterAttribute(classStr(SKS_IHB_InterestNoteContract))]
// FDD 9848 OD InterestCalculation
class SKS_IHB_InterestNoteDP extends SRSReportDataProviderBase
{
    SKS_IHB_InterestNoteTmp interestNoteTmp;
    SKS_IHB_CalculatedInterestSummary calculatedInterestSummary;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Report execution starting point
    /// </summary>
    public void processReport()
    {
        super();
        SKS_IHB_InterestNoteContract contract = this.parmDataContract() as SKS_IHB_InterestNoteContract;
        this.insertToInterestNoteTmp(contract.parmCalculatedInterestSummary());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInterestNoteTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets data from the <c>SKS_IHB_InterestNoteTmp</c> table.
    /// </summary>
    /// <returns>
    /// The data from the <c>SKS_IHB_InterestNoteTmp</c> table.
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(SKS_IHB_InterestNoteTmp))]
    public SKS_IHB_InterestNoteTmp getInterestNoteTmp()
    {
        select interestNoteTmp;
        return interestNoteTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertToInterestNoteTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// inserts data to interest note table
    /// </summary>
    public void insertToInterestNoteTmp(RecId _calculatedInterestSummaryRecId)
    {
        CompanyInfo                         conpanyInfo;
        SKS_IHB_CalculatedInterestSummary   calculatedInterestSummaryLoc;
        SKS_IHB_CalculatedInterestSummaryHistory   calculatedInterestSummaryHistoryLoc;

        select firstonly calculatedInterestSummaryLoc
            where calculatedInterestSummaryLoc.RecId == _calculatedInterestSummaryRecId;

        select firstonly calculatedInterestSummaryHistoryLoc
            where calculatedInterestSummaryHistoryLoc.RecId == _calculatedInterestSummaryRecId;

        interestNoteTmp.clear();

        if(calculatedInterestSummaryLoc)
        {
            conpanyInfo  = CompanyInfo::findDataArea(sks_pp_bank::find(calculatedInterestSummaryLoc.BankAccountID).SKS_IHBLinkedinhousebankcompany);
            interestNoteTmp.BankAccountID                = calculatedInterestSummaryLoc.BankAccountID;
            interestNoteTmp.AppropiationAmount           = sks_pp_bank::find(calculatedInterestSummaryLoc.BankAccountID).IHB_AppropiationAmount;
            interestNoteTmp.InterestRate                 = this.getRates(calculatedInterestSummaryLoc.ValueDate).InterestRate;
            interestNoteTmp.OverdraftInterestRate        = this.getRates(calculatedInterestSummaryLoc.ValueDate).OverdraftInterestRate;
            interestNoteTmp.AppropiationFee              = this.getAppropriationRate(calculatedInterestSummaryLoc.ValueDate);
            //SKS_Bug_10956 -->
            interestNoteTmp.OverdraftInteresRateAmount   = calculatedInterestSummaryLoc.OverdraftInterest;
            interestNoteTmp.InterestRateAmount           = calculatedInterestSummaryLoc.Interest;
            // SKS_Bug_10956 <--
            interestNoteTmp.BankAccountName              = BankAccountTable::find(calculatedInterestSummaryLoc.BankAccountID).Name;
            interestNoteTmp.Month                        = mthName(mthOfYr(calculatedInterestSummaryLoc.ValueDate));
            interestNoteTmp.ValueDate                    = calculatedInterestSummaryLoc.ValueDate;
            interestNoteTmp.AppropiationFeeAmount        = calculatedInterestSummaryLoc.Appropriationfee;
        }
        else if(calculatedInterestSummaryHistoryLoc)
        {
            conpanyInfo  = CompanyInfo::findDataArea(sks_pp_bank::find(calculatedInterestSummaryHistoryLoc.BankAccountID).SKS_IHBLinkedinhousebankcompany);
            interestNoteTmp.BankAccountID                = calculatedInterestSummaryHistoryLoc.BankAccountID;
            interestNoteTmp.AppropiationAmount           = sks_pp_bank::find(calculatedInterestSummaryHistoryLoc.BankAccountID).IHB_AppropiationAmount;
            interestNoteTmp.InterestRate                 = this.getHistoryRates(calculatedInterestSummaryHistoryLoc.ValueDate).InterestRate;
            interestNoteTmp.OverdraftInterestRate        = this.getHistoryRates(calculatedInterestSummaryHistoryLoc.ValueDate).OverdraftInterestRate;
            interestNoteTmp.AppropiationFee              = this.getHistoryAppropriationRate(calculatedInterestSummaryHistoryLoc.ValueDate);
            //SKS_Bug_10956 -->
            interestNoteTmp.OverdraftInteresRateAmount   = calculatedInterestSummaryHistoryLoc.OverdraftInterest;
            interestNoteTmp.InterestRateAmount           = calculatedInterestSummaryHistoryLoc.Interest;
            // SKS_Bug_10956 <--
            interestNoteTmp.BankAccountName              = BankAccountTable::find(calculatedInterestSummaryHistoryLoc.BankAccountID).Name;
            interestNoteTmp.Month                        = mthName(mthOfYr(calculatedInterestSummaryHistoryLoc.ValueDate));
            interestNoteTmp.ValueDate                    = calculatedInterestSummaryHistoryLoc.ValueDate;
            interestNoteTmp.AppropiationFeeAmount        = calculatedInterestSummaryHistoryLoc.Appropriationfee;
        }


        interestNoteTmp.CompanyNameParent            = CompanyInfo::findDataArea(curExt()).Name;
        interestNoteTmp.CompanyName                  = conpanyInfo.Name;
        interestNoteTmp.CompanyAddress               = conpanyInfo.primaryAddress();
     
        interestNoteTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAppropriationRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// gets the Appropriation rate
    /// </summary>
    private SKS_IHB_InterestRate getAppropriationRate(TransDate _valueDate)
    {
        SKS_IHB_AppropriationFeesDetails  appropriationDetails;

        select firstonly AppropriationfeeID,ValidFrom,Appropriationfee from appropriationDetails
            where appropriationDetails.AppropriationFeeID == SKS_IHB_AppropriationFees::findByAppropriationFeeID(this.getRates(_valueDate).AppropriationfeeID).RecId
                && appropriationDetails.ValidFrom < _valueDate;

        return appropriationDetails.AppropriationFee;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHistoryAppropriationRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// gets the History Appropriation rate
    /// </summary>
    /// <param name = "_valueDate">Value Date</param>
    /// <returns>AppropriationFee</returns>
    private SKS_IHB_InterestRate getHistoryAppropriationRate(TransDate _valueDate)
    {
        SKS_IHB_AppropriationFeesDetails  appropriationDetails;

        select firstonly AppropriationfeeID,ValidFrom,Appropriationfee from appropriationDetails
            where appropriationDetails.AppropriationFeeID == SKS_IHB_AppropriationFees::findByAppropriationFeeID(this.getHistoryRates(_valueDate).AppropriationfeeID).RecId
                && appropriationDetails.ValidFrom < _valueDate;

        return appropriationDetails.AppropriationFee;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRates</Name>
				<Source><![CDATA[
    /// <summary>
    /// gets the interest rate
    /// </summary>
    private SKS_IHB_CalculatedInterest getRates(TransDate _valueDate)
    {
        SKS_IHB_CalculatedInterest  calculatedInterest;

        select firstonly  calculatedInterest
            order by ValueDate desc
            where calculatedInterest.ValueDate < _valueDate;

        return calculatedInterest;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHistoryRates</Name>
				<Source><![CDATA[
    /// <summary>
    /// gets the interest rate
    /// </summary>
    /// <param name = "_valueDate">Value Date</param>
    /// <returns>SKS_IHB_CalculatedInterestHistory</returns>
    private SKS_IHB_CalculatedInterestHistory getHistoryRates(TransDate _valueDate)
    {
        SKS_IHB_CalculatedInterestHistory  calculatedInterest;

        select firstonly  calculatedInterest
            order by ValueDate desc
            where calculatedInterest.ValueDate < _valueDate;

        return calculatedInterest;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>