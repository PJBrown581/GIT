<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_CC_SalesUpdateRemain_EventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Event handlers for CCA functionality
/// </summary>
class SKS_CC_SalesUpdateRemain_EventHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>SalesUpdateRemain_Post_cancelMultipleOrdersDeliveryRemainder</Name>
				<Source><![CDATA[
    /// <summary>
    /// PostHandler event method for <c>cancelMultipleOrdersDeliveryRemainder</c> method
    /// to void pending credit card authorizations for Call Center sales orders when
    /// Call Center parameter 'Enable order completion' is set to No.
    /// </summary>
    /// <param name="_args">
    /// Args <b>XppPrePostArgs</b> object from triggering event
    /// </param>
    [PostHandlerFor(classStr(SalesUpdateRemain), methodStr(SalesUpdateRemain, cancelMultipleOrdersDeliveryRemainder))]
    public static void SalesUpdateRemain_Post_cancelMultipleOrdersDeliveryRemainder(XppPrePostArgs _args)
    {
        if (SKS_PP_Setup::find().ModCC == NoYes::No)
        {
            return;
        }

        List salesRecIdList = _args.getArg(identifierStr(_salesRecIdList));
        if (salesRecIdList == null || !salesRecIdList.elements())
        {
            return;
        }
        
        ListEnumerator le = salesRecIdList.getEnumerator();
        while (le.moveNext())
        {
            RecId salesTableRecId = le.current();
            SalesTable salesTable = SalesTable::findRecId(salesTableRecId);
            
            if ((salesTable.SalesStatus == SalesStatus::Canceled || salesTable.SalesStatus == SalesStatus::Invoiced) &&
                salesTable.CreditCardCustRefId && salesTable.isCreditCardPaymentType() && salesTable.mcrIsCallCenter() &&
                !RetailMCRChannelTable::mcrEnableOrderCompletion(salesTable))
            {
                CreditCardAuthTrans creditCardAuthTrans = CreditCardAuthTrans::findValidPreApproval(salesTable.SalesId);

                if (creditCardAuthTrans != null)
                {
                    CreditCardProcess::doVoidAuth(creditCardAuthTrans);
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>