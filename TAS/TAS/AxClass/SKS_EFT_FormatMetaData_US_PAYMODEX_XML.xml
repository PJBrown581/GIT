<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_FormatMetaData_US_PAYMODEX_XML</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_FormatMetaData_US_PAYMODEX_XML Extends SKS_EFT_Format_MetaData
/// </summary>
public class SKS_EFT_FormatMetaData_US_PAYMODEX_XML Extends SKS_EFT_Format_MetaData
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        productVersion = '';
        formatGroupVersion = '20230417';
        dataContractVersion = '1.0';
        conFormatID = ['US-PAYMODEX-XML'];
        formatfiletype = 'EFT';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFormatFileType</Name>
				<Source><![CDATA[
    protected str getFormatFileType()
    {
        return formatfiletype;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHeaderMetaData</Name>
				<Source><![CDATA[
    protected container getHeaderMetaData()
    {
        container   headerList;

        //Metadata column names of data elements
//ProductVersion,FormatGroupVersion,UseWithCustomer,UseWithVenodrs,UseWithBanktoBank,UsewithCustReimbursements,
//BeDesc01,BeDesc02,BeMask01,BeMask02,BlockFill,CompanyIdMask,CompanyIdTitle,CompanyNameTitle,CompanyNameMask,Crlf,Description,EffectiveDateOffset,EntryClassTitle,EntryClassMask,
//FormatId,FormatType,IMMDestMask,IMMDestTitle,IMMDestNameTitle,IMMDestNameMask,IMMOriginTitle,IMMOriginMask,IMMOriginNameTitle,IMMOriginNameMask,IncludeCpnyCredit,
//IncludeCpnyDebit,LastEffectiveDate,NextDailyReset,NextDailyResetDate,NextFileId,NextSequenceNumber,PreNote,RecordLength,Selected,TrimRecord,TwoFileNameAddition,
//WBank01Description,WBank01Mask,WBank01Required,WBank02Required,WBank02Mask,WBank02Description,WBank03Required,WBank03Mask,WBank03Description,WBank04Required,WBank04Mask,
//WBank04Description,PreNoteDays,EDI,PayDateIsEffDate,ARDateOffset,UseAddenda,MastAcctList,FormatGroup,MultiEffectiveDates,SupportsMultiCompany,ExternalFormat,FundTransferType

        headerList = ConIns(headerList,conLen(headerList)+1,[productVersion,formatGroupVersion,0,1,0,0,'','','','',0,'','','CompanyName','XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX',1,'US - Paymode - X - XML',0,'','','US-PAYMODEX-XML',1,'','','','','','','','',0,0,'00:00.0',0,'00:00.0',1,1,0,0,0,'','','','',0,'','','',0,'','',0,'','',0,0,0,0,0,0,'US-PAYMODEX-XML',1,0,0]);

        return headerList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymSpecsMetaData</Name>
				<Source><![CDATA[
    protected container getPaymSpecsMetaData(str _formatID)
    {
        container   paymSpecList;

        //Metadata column names of data elements
//BARoutingReqd,VBAAccountReqd,VBASwiftReqd,VBAIBANReqd,ARPaymSpecName,BEBeneBankAcctReqd,BE01Reqd,BE02Reqd,BE01Use,BE02Use,PaymSpecFileDescr,RecordSummary,TransactionCode,
        //EmailNote,PaymSpec,PaymSpecName,FilterSeparateFile,FormatId,Selected,CpnyIDNameReq,EmailOff,VendorUse,WireTabs,SamePaymentDate,SelectByPaymentDate,PreNote,TxnNacha,UseCheckNumber,
        //UseWithCustomers,UseWithVendors,EDI,UseWithBanktoBank,FundTransferType,UseWithCustomerReimbursement,InvoiceDetail,RemitAvailability,RemitType,APNameType,APAddressType
        //DDNameType,DDAddressType,CRNameType,CRAddressType

        switch (_formatID)
        {
            case ('US-PAYMODEX-XML'):
                paymSpecList = this.getPaymSpecsMetaData_US_PAYMODEX_XML();
                break;

        }

        return paymSpecList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymSpecsMetaData_US_PAYMODEX_XML</Name>
				<Source><![CDATA[
    private container getPaymSpecsMetaData_US_PAYMODEX_XML()
    {
        container   paymSpecList;

        paymSpecList = ConIns(paymSpecList,conLen(paymSpecList)+1,[0,0,0,0,'',0,0,0,0,0,'Paymode-X ACH payments','99','ACH','','ACH','TRADE PAY',0,'US-PAYMODEX-XML',0,1,0,1,1,0,0,0,0,0,0,1,0,0,0,0,1,2,0,1,1,0,0,0,0]);
        paymSpecList = ConIns(paymSpecList,conLen(paymSpecList)+1,[0,0,0,0,'',0,0,0,0,0,'Paymode-X check payments','99','CHK','','CHK','TRADE PAY',0,'US-PAYMODEX-XML',0,1,0,1,1,0,0,0,0,1,0,1,0,0,0,0,1,2,0,3,2,0,0,0,0]);
        paymSpecList = ConIns(paymSpecList,conLen(paymSpecList)+1,[0,0,0,0,'',0,0,0,0,0,'Paymode-X ePay payments','99','ePay','','ePay','TRADE PAY',0,'US-PAYMODEX-XML',0,1,0,1,1,0,0,0,0,0,0,1,0,0,0,0,1,2,0,1,1,0,0,0,0]);

        return paymSpecList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getNotesMetaData</Name>
				<Source><![CDATA[
    protected container getNotesMetaData(str _formatID)
    {
        container   notesList;

        //Metadata column names of data elements
//FormatId,PaymSpec,Note

        switch (_formatID)
        {
            case ('US-PAYMODEX-XML'):
                notesList = this.getNotesMetaData_US_PAYMODEX_XML();
                break;

        }

        return notesList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getNotesMetaData_US_PAYMODEX_XML</Name>
				<Source><![CDATA[
    private container getNotesMetaData_US_PAYMODEX_XML()
    {
        container   notesList;

        notesList = ConIns(notesList,conLen(notesList)+1,['US-PAYMODEX-XML','ACH','-CollectorPaymodeID stored in the Vendor eBanking details > Payment specifications > Account info tab.::-Company name is stored in the Bank Account > Company info tab.::-ComprehensivePayments > Payments > Paymode > Remittance > Comment is stored in the Invoice journal > Description field.']);
        notesList = ConIns(notesList,conLen(notesList)+1,['US-PAYMODEX-XML','CHK','-CollectorPaymodeID stored in the Vendor eBanking details > Payment specifications > Account info tab.::-Company name is stored in the Bank Account > Company info tab.::-ComprehensivePayments > Payments > Paymode > Remittance > Comment is stored in the Invoice journal > Description field.']);
        notesList = ConIns(notesList,conLen(notesList)+1,['US-PAYMODEX-XML','ePay','-CollectorPaymodeID stored in the Vendor eBanking details > Payment specifications > Account info tab.::-Company name is stored in the Bank Account > Company info tab.::-ComprehensivePayments > Payments > Paymode > Remittance > Comment is stored in the Invoice journal > Description field.']);

        return notesList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getValidationsMetaData</Name>
				<Source><![CDATA[
    protected container getValidationsMetaData(str _formatID)
    {
        container   validationsList;

        //Metadata column names of data elements
//FormatId,PaymSpec,Id,SourceFieldDesc,SourceFieldLoc,TargetFieldLoc,Notes,SourceContext,SourceField,ISOCountrySpec,CountryContext,Required,LengthValidation,MinLength,MaxLength,UserUpdated,Module

        switch (_formatID)
        {
            case ('US-PAYMODEX-XML'):
                validationsList = this.getValidationsMetaData_US_PAYMODEX_XML();
                break;

        }

        return validationsList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getValidationsMetaData_US_PAYMODEX_XML</Name>
				<Source><![CDATA[
    private container getValidationsMetaData_US_PAYMODEX_XML()
    {
        container   validationsList;

        validationsList = ConIns(validationsList,conLen(validationsList)+1,['US-PAYMODEX-XML','ACH','','Routing number','Cash and bank management > Select bank account > edit > Additional identification (fast tab) > Routing Number','ComprehensivePayments > Payments > Paymode > DisburserPaymodeID','Bank Routing Number',0,'RegistrationNum','','',0,0,1,'11',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['US-PAYMODEX-XML','ACH','','Bank Account Number','Cash and bank management > Select bank account > edit > General (fast tab) Bank Account Number','ComprehensivePayments > Payments > Paymode > DisburserBankAccount','Bank account number ',0,'AccountNum','','',0,0,1,'35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['US-PAYMODEX-XML','ACH','','Vendor Name','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Name','ComprehensivePayments > Payments > Paymode > CollectorName','Name related to Vendor','16','WBeneName','','',1,0,1,'50',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['US-PAYMODEX-XML','CHK','','Routing number','Cash and bank management > Select bank account > edit > Additional identification (fast tab) > Routing Number','ComprehensivePayments > Payments > Check > DisburserPaymodeID','Bank Routing Number',0,'RegistrationNum','','',0,0,1,'11',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['US-PAYMODEX-XML','CHK','','Bank Account Number','Cash and bank management > Select bank account > edit > General (fast tab) Bank Account Number','ComprehensivePayments > Payments > Check > DisburserBankAccount','Bank account number ',0,'AccountNum','','',0,0,1,'35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['US-PAYMODEX-XML','CHK','','Vendor Name','Account Payable > Journals > Payments > Payment Journal > Remittance(Tab Page) > Name','ComprehensivePayments > Payments > Check > CollectorName','Name related to Vendor','12','Name','','',1,0,1,'50',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['US-PAYMODEX-XML','CHK','','Address','Account Payable > Journals > Payments > Payment Journal > Remittance(Tab Page) > Street','ComprehensivePayments > Payments > Check > CollectorAddress > AddressOne','Name related to Vendor','10','Street','','',1,0,1,100,0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['US-PAYMODEX-XML','CHK','','City','Account Payable > Journals > Payments > Payment Journal > Remittance(Tab Page) > City','ComprehensivePayments > Payments > Check > CollectorAddress > City','Name related to Vendor','10','City','','',1,1,0,0,0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['US-PAYMODEX-XML','CHK','','State','Account Payable > Journals > Payments > Payment Journal > Remittance(Tab Page) > State','ComprehensivePayments > Payments > Check > CollectorAddress > State','Name related to Vendor','10','State','','',1,1,0,0,0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['US-PAYMODEX-XML','CHK','','Postal code','Account Payable > Journals > Payments > Payment Journal > Remittance(Tab Page) > ZIP/postal code','ComprehensivePayments > Payments > Check > CollectorAddress > PostalCode','Name related to Vendor','10','ZipCode','','',1,1,0,0,0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['US-PAYMODEX-XML','ePay','','Routing number','Cash and bank management > Select bank account > edit > Additional identification (fast tab) > Routing Number','ComprehensivePayments > Payments > Paymode > DisburserPaymodeID','Bank Routing Number',0,'RegistrationNum','','',1,1,1,'11',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['US-PAYMODEX-XML','ePay','','Bank Account Number','Cash and bank management > Select bank account > edit > General (fast tab) Bank Account Number','ComprehensivePayments > Payments > Paymode > DisburserBankAccount','Bank account number ',0,'AccountNum','','',1,1,1,'35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['US-PAYMODEX-XML','ePay','','Vendor Name','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Name','ComprehensivePayments > Payments > Paymode > CollectorName','Name related to Vendor','16','WBeneName','','',1,0,1,'50',0,0]);

        return validationsList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getCodeLookupMetaData</Name>
				<Source><![CDATA[
    protected container getCodeLookupMetaData()
    {
        container   codeLookupList;

        //Metadata column names of data elements
//FormatGroup,CodeID,Description

        return codeLookupList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getCodeLookupValuesMetaData</Name>
				<Source><![CDATA[
    protected container getCodeLookupValuesMetaData()
    {
        container   codeLookupValuesList;

        //Metadata column names of data elements
//FormatGroup,CodeID,Display Value,CodeValue

        return codeLookupValuesList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymSpecFieldsMetaData</Name>
				<Source><![CDATA[
    protected container getPaymSpecFieldsMetaData(str _formatID)
    {
        container   paymSpecFieldsList;

        //Metadata column names of data elements
//FormatGroup,FormatID,PaymentSpec,FormatFieldID,Description,FieldType,CodeID,DefaultValue,Required,FixedValue,FixedValueMask,TechNotes

        switch (_formatID)
        {
            case ('US-PAYMODEX-XML'):
                paymSpecFieldsList = this.getPaymSpecFieldsMetaData_US_PAYMODEX_XML();
                break;

        }

        return paymSpecFieldsList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymSpecFieldsMetaData_US_PAYMODEX_XML</Name>
				<Source><![CDATA[
    private container getPaymSpecFieldsMetaData_US_PAYMODEX_XML()
    {
        container   paymSpecFieldsList;

        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['US-PAYMODEX-XML','US-PAYMODEX-XML','ACH','BuyerAccnum','Buyer account number Receipt',1,'BuyerAccnum','',0,'','XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX','Buyer account number']);

        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['US-PAYMODEX-XML','US-PAYMODEX-XML','ACH','CollectorPaymodeID','CollectorPaymodeID',1,'CollectorPaymodeID','',0,'','XXXXXXXXXXXXXXXXXXXXXXXXX','CollectorPaymodeID']);
        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['US-PAYMODEX-XML','US-PAYMODEX-XML','ePay','CollectorPaymodeID','CollectorPaymodeID',1,'CollectorPaymodeID','',0,'','XXXXXXXXXXXXXXXXXXXXXXXXX','CollectorPaymodeID']);
        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['US-PAYMODEX-XML','US-PAYMODEX-XML','CHK','DivertIndicator','Divert Indicator(Y/N)',1,'DivertIndicator','',0,'','X','Divert Indicator(Y/N)']);

        return paymSpecFieldsList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getControlFormatMetaData</Name>
				<Source><![CDATA[
    protected container getControlFormatMetaData(str _formatID)
    {
        container   ControlFormatList;

        //Metadata column names of data elements
//FileFormatID,ControlFileFormatID,ControlFileDescription

        switch (_formatID)
        {
        }

        return ControlFormatList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getDeleteMetaData</Name>
				<Source><![CDATA[
    protected container getDeleteMetaData()
    {
        container   deleteList;

        //FormatGroup, FormatId, DetailType, KeyID1, KeyId2, KeyId3

        deleteList = ConIns(deleteList,conLen(deleteList)+1,['US-PAYMODEX-XML','US-PAYMODEX-XML','FormatValidations','ACH','16','WBeneAddr']);
        deleteList = ConIns(deleteList,conLen(deleteList)+1,['US-PAYMODEX-XML','US-PAYMODEX-XML','FormatValidations','ACH','16','WBeneCity']);
        deleteList = ConIns(deleteList,conLen(deleteList)+1,['US-PAYMODEX-XML','US-PAYMODEX-XML','FormatValidations','ACH','16','WBeneState']);
        deleteList = ConIns(deleteList,conLen(deleteList)+1,['US-PAYMODEX-XML','US-PAYMODEX-XML','FormatValidations','ACH','16','WBeneZipPostal']);
        deleteList = ConIns(deleteList,conLen(deleteList)+1,['US-PAYMODEX-XML','US-PAYMODEX-XML','FormatValidations','ePay','16','WBeneAddr']);
        deleteList = ConIns(deleteList,conLen(deleteList)+1,['US-PAYMODEX-XML','US-PAYMODEX-XML','FormatValidations','ePay','16','WBeneCity']);
        deleteList = ConIns(deleteList,conLen(deleteList)+1,['US-PAYMODEX-XML','US-PAYMODEX-XML','FormatValidations','ePay','16','WBeneState']);
        deleteList = ConIns(deleteList,conLen(deleteList)+1,['US-PAYMODEX-XML','US-PAYMODEX-XML','FormatValidations','ePay','16','WBeneZipPostal']);

        deleteList = ConIns(deleteList,conLen(deleteList)+1,['US-PAYMODEX-XML','*','FormatValidations','*','15','W01']);
        deleteList = ConIns(deleteList,conLen(deleteList)+1,['US-PAYMODEX-XML','*','FormatValidations','*','16','BE02']);

        return deleteList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankCodeLookupMetaData</Name>
				<Source><![CDATA[
    protected container getBankCodeLookupMetaData()
    {
        container   codeLookupList;

        return codeLookupList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankCodeLookupValuesMetaData</Name>
				<Source><![CDATA[
    protected container getBankCodeLookupValuesMetaData()
    {
        container   codeLookupValuesList;

        return codeLookupValuesList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFileFormatFieldsMetaData</Name>
				<Source><![CDATA[
    protected container getFileFormatFieldsMetaData(str _formatID)
    {
        container   paymSpecFieldsList;

        switch(_formatID)
        {
            case('US-PAYMODEX-XML'):
                paymSpecFieldsList = this.getFileFormatFieldsMetaData_US_PAYMODEX_XML();
                break;
        }

        return paymSpecFieldsList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFileFormatFieldsMetaData_US_PAYMODEX_XML</Name>
				<Source><![CDATA[
    private container getFileFormatFieldsMetaData_US_PAYMODEX_XML()
    {
        container   paymSpecFieldsList;

        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['US-PAYMODEX-XML','US-PAYMODEX-XML','DisburserPaymodeID','DisburserPaymodeID',1,'DisburserPaymodeID','',0,'','XXXXXXXXXXXXXXXXXXXXXXXXX','ComprehensivePayments > Payments > Paymode > DisburserPaymodeID']);

        return paymSpecFieldsList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBankCodelookupValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updating the bank code lookpups from the W0X fields.
    /// </summary>
    protected void updateBankCodelookupValues()
    {
        switch(gSKS_EFT_FileFormat.FormatId)
        {
            case 'US-PAYMODEX-XML':
                if(gSKS_EFT_Bank.W01)
                {
                    this.updateBankFields('DisburserPaymodeID', gSKS_EFT_Bank.W01);
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateVendorCodelookupValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updating vendor code lookpus from BE0X and Legacy code loookups
    /// </summary>
    protected void updateVendorCodelookupValues()
    {
        switch(gSKS_EFT_FileFormat.FormatId)
        {
            case 'US-PAYMODEX-XML':
                if(gSKS_EFT_VendorPaym.BE01)
                {
                    this.updateVendorFields('CollectorPaymodeID', gSKS_EFT_VendorPaym.BE01);
                }
                if(gSKS_EFT_VendorPaym.BE02)
                {
                    this.updateVendorFields('DivertIndicator', gSKS_EFT_VendorPaym.BE02);
                }
                break;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>