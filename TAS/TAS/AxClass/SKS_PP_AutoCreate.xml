<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_PP_AutoCreate</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_PP_AutoCreate extends RunBaseBatch
{
    #DEFINE.CurrentVersion(1)
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatchJournal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the batch task can be seen in the batch journal.
    /// </summary>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    public boolean canGoBatchJournal()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion];
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        Batch bat;
        SKS_PP_500PPBas locSKS_PP_500PPBas;
        SKS_EB_CommProcess locSKS_EB_CommProcess;
        SKS_PP_File locSKS_PP_File;
        RefRecId locRefRecID;
    
    
        bat = this.parmCurrentBatch();
        locRefRecID = bat.RecId;

        while select crossCompany locSKS_PP_File 
            join locSKS_EB_CommProcess
            where locSKS_PP_File.CommID == locSKS_EB_CommProcess.CommID
                && locSKS_PP_File.KeepDelete == SKS_PP_FileStatus::NotProcessed
                && locSKS_PP_File.ChequeCount > 0
                && locSKS_EB_CommProcess.FileCreateType == SKS_EB_FileCreate::FixedTime 
                && locSKS_EB_CommProcess.BatchJobId == locRefRecID
        {
            changeCompany(locSKS_PP_File.company())
            {
                locSKS_PP_500PPBas = null;
                locSKS_PP_500PPBas = new SKS_PP_500PPBas();
                locSKS_PP_500PPBas.AProcess_PP(locSKS_PP_File.FileNbr,
                                                SKS_PP_NextActionDisplay::CreateSendFile,
                                                false,
                                                locSKS_EB_CommProcess,
                                                SKS_PP_Caller::FixedTime,
                                                this.isInBatch());
    
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Unpacks the values in the <c>Container</c> parameter.
    /// </summary>
    /// <param name="_packedClass">
    /// A <c>container</c> with a packed version of the class.
    /// </param>
    /// <returns>
    /// true if the class was unpacked using the container; otherwise, false.
    /// </returns>
    public boolean unpack(container _packedClass)
    {
        Integer version = RunBase::getVersion(_packedClass);
    
        [version] = _packedClass;
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupList</Name>
				<Source><![CDATA[
    public static client void lookupList(FormStringControl _formStringControl, List _valueList, str _columnLabel = '')
    {
        Args    args;
        FormRun formRun;
        ;
        if (_formStringControl && _valueList && _valueList.typeId() == Types::String)
        {
            args = new Args(formstr(SysLookup));
            args.parmObject(_valueList);
            args.parm(_columnLabel);
    
            formRun = classFactory.formRunClass(args);
            _formStringControl.performFormLookup(formRun);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>