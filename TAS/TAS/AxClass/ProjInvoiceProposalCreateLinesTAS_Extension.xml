<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjInvoiceProposalCreateLinesTAS_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(ClassStr(ProjInvoiceProposalCreateLines))]
final class ProjInvoiceProposalCreateLinesTAS_Extension
{


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>sKS_CC_ServiceOrderAuthValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a container with values to be used by service order field group on an invoice proposal.
    /// </summary>
    /// <param name="_selectedInvoiceAmount">
    /// An amount to indicate the selected invoice amount.
    /// </param>
    /// <returns>
    /// Total service order authorization amount selected
    /// Count of service orders with an approved authorization selected
    /// Count of service orders selected
    /// An enum value indicating service order authorization status
    /// for an invoice proposal.
    /// </returns>
    public container sKS_CC_ServiceOrderAuthValues(AmountCur _selectedInvoiceAmount)
    {
        container                           retCon;
        boolean                             hasNonSvcOrderLines;
        AmountCur                           authAmount, authAmountWithOverPct;
        RecIdCount                          cntOfServiceOrders, cntOfSvcOrderWithAuth;
        SMAServiceOrderTable                serviceOrderTableAuthAmtSKS;
        SKS_CC_CustPaymTable                sKS_CC_CustPaymTableAuthAmt;
        SKS_CC_SvcOrderInvPropAurhStatus    authStatus = SKS_CC_SvcOrderInvPropAurhStatus::NA;
        PSATmpProjProposalTrans             proposalTransCreateSKS = this.parmProposalTransCreate();

        PositiveNumber captureToAuthAmtDiffPct = CreditCardAccountSetup::findActive().SKS_CC_CaptureAmtOverAuthAmtPct;

        while select SKS_CC_ServiceOrderId from proposalTransCreateSKS
            group by SKS_CC_ServiceOrderId
            where proposalTransCreateSKS.Selected == NoYes::Yes
        {
            if (!proposalTransCreateSKS.SKS_CC_ServiceOrderId)
            {
                if (!hasNonSvcOrderLines)
                {
                    hasNonSvcOrderLines = true;
                }
                continue;
            }

            serviceOrderTableAuthAmtSKS = SMAServiceOrderTable::find(proposalTransCreateSKS.SKS_CC_ServiceOrderId);
            if (serviceOrderTableAuthAmtSKS)
            {
                cntOfServiceOrders++;

                sKS_CC_CustPaymTableAuthAmt = SKS_CC_CustPaymTable::findCCPaymWithApprovedAuthorization(serviceOrderTableAuthAmtSKS.TableId,
                    serviceOrderTableAuthAmtSKS.RecId);

                if (sKS_CC_CustPaymTableAuthAmt)
                {                    
                    Amount authAmtWithPctDiffAllowance;

                    if (captureToAuthAmtDiffPct)
                    {
                        authAmtWithPctDiffAllowance = CurrencyExchangeHelper::amount(sKS_CC_CustPaymTableAuthAmt.CreditCardTransAmountCur * ((100 + captureToAuthAmtDiffPct) / 100),
                            sKS_CC_CustPaymTableAuthAmt.CreditCardCurrency);
                    }
                    else
                    {
                        authAmtWithPctDiffAllowance = CurrencyExchangeHelper::amount(sKS_CC_CustPaymTableAuthAmt.CreditCardTransAmountCur,
                            sKS_CC_CustPaymTableAuthAmt.CreditCardCurrency);
                    }

                    authAmountWithOverPct += authAmtWithPctDiffAllowance;
                    authAmount += CurrencyExchangeHelper::amount(sKS_CC_CustPaymTableAuthAmt.CreditCardTransAmountCur,
                        sKS_CC_CustPaymTableAuthAmt.CreditCardCurrency);

                    cntOfSvcOrderWithAuth++;
                }
            }
        }

        if (hasNonSvcOrderLines)
        {
            if (authAmount)
            {
                authStatus = SKS_CC_SvcOrderInvPropAurhStatus::Void;
            }
        }
        else
        {
            if ((cntOfSvcOrderWithAuth > 1) || (cntOfServiceOrders > 1))
            {
                if (authAmount)
                {
                    authStatus = SKS_CC_SvcOrderInvPropAurhStatus::Void;
                }
            }
            else
            {
                if (authAmount)
                {
                    if (_selectedInvoiceAmount <= authAmountWithOverPct)
                    {
                        authStatus = SKS_CC_SvcOrderInvPropAurhStatus::OK;
                    }
                    else
                    {
                        authStatus = SKS_CC_SvcOrderInvPropAurhStatus::ReAuth;
                    }
                }
            }
        }

        retCon = [authAmount, cntOfSvcOrderWithAuth, cntOfServiceOrders, authStatus];

        return retCon;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>