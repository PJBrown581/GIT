<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_PP_Format_SUNTRUST_CPR_03</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_PP_Format_SUNTRUST_CPR_03 Extends SKS_PP_Format_BankGroup
{
    real mAmtItemsBatch;
    real mAmtItemsTot;
    str mHoldBnkBankAcct;
    real mNbr99Recs;
    int mTotalCnt;
    int mNbrBatchesTot;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>setOrderBy</Name>
				<Source><![CDATA[
    protected SKS_PP_OrderBy setOrderBy()
    {
        return SKS_PP_OrderBy::BankAcct_ChkType_RefNbr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtDetail</Name>
				<Source><![CDATA[
    // SunTrust
        // Courtesy of Universal Health
        //
        // Account Detail Record (Issue Item) - *10
        // Pos 01-03     3       Literal - *10
        // Pos 04-13     10      Account Number - LJ
        // Pos 14-23     10      Check Serial Number - RJ-LZF
        // Pos 24-34     11      Check Amount
        // Pos 35-49     15      Additional Data
        // Pos 50-58     9       Funding Source - Literal 111111111
        // Pos 59-80     20      Filler
        //
        // Account Detail Record (Cancel/Void) - *26
        // Pos 01-03     3       Literal - *26
        // Pos 04-13     10      Account Number - LJ
        // Pos 14-23     10      Check Serial Number - RJ-LZF
        // Pos 24-29     6       Transaction Date (should be spaces)
        // Pos 30-80     51      Filler
    protected str txtDetail()
    {
        // Note that the Working Table has records at the Voucher level (used by EFT as well)
        // They are summarized and coded - so that you can easily get just the check records
        // See the Report | Record Selection filter -
        // These filters will give the Check Records only
        // {SKS_PP_FileDetail.ComputerName} = RIPARAM('ComputerName')  - File can be used by multiple computers at once
        // and {SKS_PP_FileDetail.RecordSummary} <> 'X'                - 'X' records need to be skipped over
        // and {SKS_PP_FileDetail.FileType} = 'P'                      - 'P' records are for Positive Pay
        //
        // Below only want records with RecSection = '20P' (payment record)
        // RecSection - defines sections:
        // 10H - Header
        // 20P - Payments
        // RecType: (within Payments)
        // 10V - Voucher
        // 20P - PreNotes (should not be any with Pos Pay)
        // 30B - Blockfill
        // 40T - Trailer
        //
        // The field with the summarized information for a check is RECORDSUMAMT (see below)
    
        str ItemType;
        int Mult;
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        ;
    
        // Convert negative void numbers to positives
        Mult = 1;
        if (mSKS_PP_FileDetail.ChkType != SKS_PP_ChequeType::Cheque)
        {
            ItemType = 'V';
            if (mSKS_PP_FileDetail.ChkCuryAmt < 0)
            {
                Mult = -1;
            }
        }
        else
        {
            ItemType = ' ';
        }
    
        if(ItemType == ' ')
        {
            sb.Append('*10');
            sb.Append(SKS_PP_StringFormats::strFill(10, strLTrim(StrRTrim(mSKS_PP_FileDetail.BnkBankAcct)), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
            sb.Append(SKS_PP_StringFormats::strFill(10, strLtrim(strRTrim(mSKS_PP_FileDetail.ChkRefNbr)), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
            sb.Append(SKS_PP_StringFormats::strMoney(Mult * mSKS_PP_FileDetail.ChkCuryAmt, 11));
            sb.Append(SKS_PP_StringFormats::strFill(15, substr(mSKS_PP_FileDetail.VendName,0,15), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
            sb.Append('111111111');
            sb.Append(SKS_PP_StringFormats::strFill(20, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
            mAmtItemsBatch = mAmtItemsBatch + mSKS_PP_FileDetail.ChkCuryAmt;
            mAmtItemsTot = mAmtItemsTot + mSKS_PP_FileDetail.ChkCuryAmt;
            mHoldBnkBankAcct = mSKS_PP_FileDetail.BnkBankAcct;
        }
        else
        {
            sb.Append('*26');
            sb.Append(SKS_PP_StringFormats::strFill(10, strLTrim(StrRTrim(mSKS_PP_FileDetail.BnkBankAcct)), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
            sb.Append(SKS_PP_StringFormats::strFill(10, strLtrim(strRTrim(mSKS_PP_FileDetail.ChkRefNbr)), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
            sb.Append(SKS_PP_StringFormats::strFill(57, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
    
        mNbr99Recs++;
        mTotalCnt++;
    
    
        return sb.ToString();
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtFormatTrailer</Name>
				<Source><![CDATA[
    // SunTrust-CPR
        // Courtesy of Universal Healthcare
        //
        // File Trailer Record
        //
        // Pos 01-03     3       Literal - *99
        // Pos 04-13     10      Account Number - LJ
        // Pos 14-23     10      Serial Number - Literal 9999999999
        // Pos 24-25     2       Number batches - Number of '00' records
        // Pos 26-34     9       Number Items - Number of all records (*00, *10, *26, *98. *99, NOT *61)
        // Pos 35-45     11      Amount Items - Amount of Issue Items
        // Pos 46-80     35      Filler
    protected str txtFormatTrailer()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        ;
    
        sb.Append('*99');
        /*sb.Append(formats.fill_String(10,holdBnkBankAcct,' ','R')); */
        sb.Append(SKS_PP_StringFormats::strFill(10, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        sb.Append('9999999999');
        sb.Append(SKS_PP_StringFormats::strFill(2, int2str(mNbrBatchesTot), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        sb.Append(SKS_PP_StringFormats::strFill(9, num2str(mNbr99Recs + (2 * mNbrBatchesTot) + 1,0,0,1,0), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        sb.Append(SKS_PP_StringFormats::strMoney(mAmtItemsTot,11));
        sb.Append(SKS_PP_StringFormats::strFill(35, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left));
    
        return sb.ToString();
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtGroupHeader</Name>
				<Source><![CDATA[
    // SunTrust-CPR
        // Courtesy of Universal Healthcare
        //
        // Account Batch Header
        //
        // Pos 01-03     3       Literal - *00
        // Pos 04-13     10      Account Number - LJ
        // Pos 14-23     10      Serial Number - Literal 0000000000
        // Pos 24-26     3       Bank Number
        // Pos 27-32     6       Issue Date MMDDYY (use Effective Date)
        // Pos 33-80     48      Filler
    protected str txtGroupHeader()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        SKS_PP_FileFormat bFileFormat;
        SKS_PP_Bank bSKS_PP_Bank;
        Container company;
        ;
    
        select LastEffDate from bFileFormat where bFileFormat.FormatId == mSKS_PP_FileDetail.FormatId;
        company = [mSKS_PP_FileDetail.ChkCpnyId];
        select crossCompany:company PP01 from bSKS_PP_Bank where bSKS_PP_Bank.BankAccountId == mSKS_PP_FileDetail.chkBankAcct;
    
        sb.Append('*00');
        sb.Append(SKS_PP_StringFormats::strFill(10, mSKS_PP_FileDetail.BnkBankAcct, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        sb.Append('0000000000');
        sb.Append(SKS_PP_StringFormats::strFill(3, bSKS_PP_Bank.PP01, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left));
        sb.Append(SKS_PP_StringFormats::strDateMMDDYY(bFileFormat.LastEffDate));
        sb.Append(SKS_PP_StringFormats::strFill(48, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left));
    
        mNbrBatchesTot++;
    
        return sb.ToString();
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtGroupTrailer</Name>
				<Source><![CDATA[
    // Pos 01-03     3       Literal - *98
        // Pos 04-13     10      Account Number - LJ
        // Pos 14-23     10      Serial Number - Literal 9999999998
        // Pos 24-25     2       Number batches  - Literal 01
        // Pos 26-34     9       Number of Items - total records 00 - 98 (including 10/26)
        // Pos 35-45     11      Amount Items
        // Pos 46-80     35      Filler
    protected str txtGroupTrailer()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        ;
    
        mTotalCnt = mTotalCnt +2;
    
        sb.Append('*98');
        sb.Append(SKS_PP_StringFormats::strFill(10, strLTrim(StrRTrim(mHoldBnkBankAcct)), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        sb.Append('9999999998');
        sb.Append('01');
        sb.Append(SKS_PP_StringFormats::strFill(9, int2str(mTotalCnt), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        sb.Append(SKS_PP_StringFormats::strMoney(mAmtItemsBatch, 11));
        sb.Append(SKS_PP_StringFormats::strFill(35, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left));
    
        mTotalCnt = 0;
        mAmtItemsBatch = 0;
    
        return sb.ToString();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>