<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_PP_Format_BOA_DRSPPV_ADDR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_PP_Format_BOA_DRSPPV_ADDR
/// </summary>
class SKS_PP_Format_BOA_DRSPPV_ADDR Extends SKS_PP_Format_BankGroup
{
    boolean     mHeaderFlag;
    int         mChkCount;
    real        mChkSum;
    int         mPrintFooter;
    real        mHashTotal;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>txtDetail</Name>
				<Source><![CDATA[
    protected str txtDetail()
    {
        //  Note that the Working Table has records at the Voucher level (used by EFT as well)
        //  They are summarized and coded - so that you can easily get just the check records
        //  See the Report | Record Selection filter -
        //  These filters will give the Check Records only
        //  {SKS_PP_FileDetail.ComputerName} = RIPARAM('ComputerName')  - File can be used by multiple computers at once
        //  and {SKS_PP_FileDetail.RecordSummary} <> 'X'                - 'X' records need to be skipped over
        //  and {SKS_PP_FileDetail.FileType} = 'P'                      - 'P' records are for Positive Pay
    
        //  Below only want records with RecSection = '20P' (payment record)
        //  RecSection - defines sections:
        //  10H - Header
        //  20P - Payments
        //  RecType: (within Payments)
        //  10V - Voucher
        //  20P - PreNotes (should not be any with Pos Pay)
        //  30B - Blockfill
        //  40T - Trailer
        //  The field with the summarized information for a check is RECORDSUMAMT (see below)
    
        str ItemType;
        int Mult;
        DirPartyNamePrimaryAddressView DirPartyNamePrimaryAddressView;
        VendTable   vendtable;
        str         vendorDetails;
        container   company;
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        ;
    
        // Convert negative void numbers to positives
        Mult = 1;
        if (mSKS_PP_FileDetail.ChkType != SKS_PP_ChequeType::Cheque)
        {
            ItemType = '-';
            if (mSKS_PP_FileDetail.ChkCuryAmt < 0)
            {
                Mult = -1;
            }
        }
        else
        {
            ItemType = ' ';
        }
    
        // Always use the Record Summary Amount - will have correct total for the Check
        mChkCount++;
        mChkSum = mChkSum + mSKS_PP_FileDetail.ChkCuryAmt;
        mHashTotal = mHashTotal + str2num(mSKS_PP_FileDetail.ChkRefNbr);
        company = [mSKS_PP_FileDetail.ChkCpnyId];
        select firstonly crossCompany:company Street, ZipCode, city, State, CountryRegionId
            from DirPartyNamePrimaryAddressView
            join vendtable
            where DirPartyNamePrimaryAddressView.Party == vendtable.Party &&
                vendtable.AccountNum == mSKS_PP_FileDetail.VendorAccount;
    
        sb.Append(SKS_PP_StringFormats::strFill(10, strLtrim(strRTrim(mSKS_PP_FileDetail.ChkRefNbr)), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        sb.Append(SKS_PP_StringFormats::strMoney(Mult * mSKS_PP_FileDetail.ChkCuryAmt, 10));
        sb.Append(SKS_PP_StringFormats::strFill(10, strLTrim(StrRTrim(mSKS_PP_FileDetail.BnkBankAcct)), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        sb.Append(SKS_PP_StringFormats::strDateMMDDYY(mSKS_PP_FileDetail.ChkDocDate));
        sb.Append(ItemType);
    
        vendorDetails = mSKS_PP_FileDetail.VendName;
    
        if(DirPartyNamePrimaryAddressView.Street)
        {
            vendorDetails = vendorDetails + ' ' + strReplace(DirPartyNamePrimaryAddressView.Street, '\n', ' ');
        }
        if(DirPartyNamePrimaryAddressView.City)
        {
            vendorDetails = vendorDetails + ' ' + DirPartyNamePrimaryAddressView.City;
        }
        if(DirPartyNamePrimaryAddressView.State)
        {
            vendorDetails = vendorDetails + ' ' + DirPartyNamePrimaryAddressView.State;
        }
        if(DirPartyNamePrimaryAddressView.ZipCode)                  //SKS#DevOps:17994
        {
            vendorDetails = vendorDetails + ' ' + DirPartyNamePrimaryAddressView.ZipCode;
        }
        if(DirPartyNamePrimaryAddressView.CountryRegionId)          //SKS#DevOps:17994
        {
            vendorDetails = vendorDetails + ' ' + DirPartyNamePrimaryAddressView.CountryRegionId;
        }
        sb.Append(SKS_PP_StringFormats::strFill(279, vendorDetails, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        return sb.ToString();
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtGroupHeader</Name>
				<Source><![CDATA[
    protected str txtGroupHeader()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        str FinalInputIndic;
        SKS_PP_FileFormat bFileFormat;
        SKS_PP_Bank bSKS_PP_Bank;
        Container company;
        ;
    
        company = [mSKS_PP_FileDetail.ChkCpnyId];
        select firstonly crossCompany:company PP01 from bSKS_PP_Bank where bSKS_PP_Bank.BankAccountId == mSKS_PP_FileDetail.ChkBankAcct;
    
        select firstonly LastEffDate from bFileFormat where bFileFormat.FormatId == mSKS_PP_FileDetail.FormatId;
    
        FinalInputIndic = 'N';
    
        if(bSKS_PP_Bank.PP02 != '')
        {
            FinalInputIndic = strRtrim(strLtrim(bSKS_PP_Bank.PP02));
        }
    
        sb.Append('DRS');
        sb.Append(SKS_PP_StringFormats::strFill(3, substr(bSKS_PP_Bank.PP01,0,3), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        sb.Append(SKS_PP_StringFormats::strFill(12, strRtrim(strLtrim(mSKS_PP_FileDetail.BnkBankAcct)), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        sb.Append(SKS_PP_StringFormats::strDateYYYYMMDD(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone())));
        sb.Append(SKS_PP_StringFormats::strFill(1,'', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        sb.Append(SKS_PP_StringFormats::strDateYYYYMMDD(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone())));
        sb.Append(FinalInputIndic);
        sb.Append(SKS_PP_StringFormats::strFill(44, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        return sb.ToString();
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtGroupTrailer</Name>
				<Source><![CDATA[
    protected str txtGroupTrailer()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        str result;
        ;
    
        sb.Append('1EOF');
        sb.Append(SKS_PP_StringFormats::strFill(1, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left));
        sb.Append(SKS_PP_StringFormats::strFill(5, int2str(mChkCount), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        sb.Append(SKS_PP_StringFormats::strFill(20, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left));
        sb.Append(SKS_PP_StringFormats::strFill(10, num2str(mHashtotal,0,0,1,0), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
    
        sb.Append(SKS_PP_StringFormats::strMoney(mChkSum, 10));
        sb.Append(SKS_PP_StringFormats::strFill(30, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left));
        result = sb.ToString();
    
        mChkCount = 0;
        mHashtotal = 0;
        mChkSum = 0;
    
        return result;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>