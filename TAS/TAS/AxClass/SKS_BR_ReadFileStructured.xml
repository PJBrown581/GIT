<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_BR_ReadFileStructured</Name>
	<SourceCode>
		<Declaration><![CDATA[
//This is the parent class for the SKS_BR_ReadFileBAI2 and the SKS_BR_ReadFileNAI
abstract class SKS_BR_ReadFileStructured extends SKS_BR_ReadFile
{

    #define.RecordCodeFileHeader(1)
    #define.RecordCodeGroupHeader(2)
    #define.RecordCodeAccountIdentifier(3)
    #define.RecordCodeTransactionDetail(16)
    #define.RecordCodeAccountTrailer(49)
    #define.RecordCodeContinuation(88)
    #define.RecordCodeGroupTrailer(98)
    #define.RecordCodeFileTrailer(99)

    boolean TransactionFound;
    boolean BankRecordReady;
    bankAccountStatement gBankAccountStatement;
    TransDate gBankAccountStatmentDate;
    CompanyBankAccountId gPrevAccountId;
    DataAreaId gPrevCompanyContext;
    BankAccountStatementNum gPrevStatementNum; // The previous statement number.  When a statement changes, generate a new statement.
    SKS_BR_ReadParse gReadParseFile;
    boolean         noBankTrans;// TFS 7285
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>closeFile</Name>
				<Source><![CDATA[
    void closeFile()
    {
        gReadParseFile = null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileLineCount</Name>
				<Source><![CDATA[
    private int fileLineCount()
    {
        int linecnt = 0;
        Container line;
    
        if (!this.openFile())
        {
            return 0;
        }
    
        while(gReadParseFile.status() == IO_status::Ok)
        {
            line = gReadParseFile.read();
    
            if(line)
            {
                linecnt++;
            }
        }
        this.closeFile();
        return linecnt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>FormatError</Name>
				<Source><![CDATA[
    void FormatError( int missingCodeError, int lineNumber)
    {
        ;
    
        ttsabort;
        ImportCount = 0;
    
        this.handleError(bankHeaderRecId, strfmt("@SKS331", int2str(missingCodeError)), lineNumber);
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetTransDescription</Name>
				<Source><![CDATA[
    str GetTransDescription(Container line, int fieldOffset, int fieldCount, int skipLoc)
    {
        int i;
        str value;
    
        value = conpeek(line,fieldOffset + skipLoc); // Get transaction description
        i = fieldOffset;
        if ( substr(value,1,1) != '/')
            return value;
        else
            return ''; // line termination character means nothing there.
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertBankTran</Name>
				<Source><![CDATA[
    void insertBankTran(BankAccountTable _BankAccountTable,
                        boolean doNotImport,
                        dataareaid companyContext)
    {
        SKS_BR_BankTran companySKS_BR_BankTran;
        SKS_BR_BankAcctStmt locSKS_BR_BankAcctStmt;
        SKS_PP_Bank     locSKS_PP_Bank; // 7526
        ;
    
        locSKS_BR_BankAcctStmt = new SKS_BR_BankAcctStmt();
            if ( BankRecordReady == true) 
            {
                BankRecordReady = false;
                // Time to write the transaction entry.
            If(_BankAccountTable)
                {
                    if(!doNotImport)
                    {
                        changeCompany(companyContext)
                        {
                            //A record was inserted, should we create a statement?
                            if(
                                (
                                    gBankAccountStatement.AccountStatementNum != gPrevStatementNum || gBankAccountStatement.AccountStatementDate != gBankAccountStatmentDate ||
                                    gBankAccountStatement.AccountId != gPrevAccountId || companyContext != gPrevCompanyContext
                                )
                               || !gBankAccountStatement // for files that contain 03 records for every 16, even in the account hasn't changed
                            )
                            {
                                select firstonly BRCreateBankStatements, RecId from locSKS_PP_Bank where locSKS_PP_Bank.BankAccountId == gBankAccountStatement.AccountId; // 7526
                                //SKS_BR_BankAcctStmt::createBRStatement will only create Statements if the account is setup for automatic statement creation
                                gBankAccountStatement = locSKS_BR_BankAcctStmt.createBRStatement(gBankAccountStatement, bankHeaderRecId);
                                gPrevStatementNum = gBankAccountStatement.AccountStatementNum;
                                gBankAccountStatmentDate = gBankAccountStatement.AccountStatementDate;
                                gPrevAccountId = gBankAccountStatement.AccountId;
                                gPrevCompanyContext = companyContext;
                            }
    
                            // TFS 7285 noBankTrans
                            if((gBankAccountStatement && gBankAccountStatement.SKS_BR_BankHeaderRecId > 0 && gBankAccountStatement.SKS_BR_BankHeaderRecId == bankHeaderRecId && !noBankTrans)
                              || (locSKS_PP_Bank.RecId != 0 && locSKS_PP_Bank.BRCreateBankStatements == NoYes::No && gBankAccountStatement.RecId == 0)) // 7526 //only set the originalstatementrecid if we created the statement
                            {
                                bankTran.OriginalStatementRecId = gBankAccountStatement.RecId;

                                //SKS_BR4_BankStatementDuplicate - Bug:7273 - Begin
                                companySKS_BR_BankTran = null;
                                buf2buf(bankTRan, companySKS_BR_BankTran);
                                companySKS_BR_BankTran.doInsert();
                                //SKS_BR4_BankStatementDuplicate - Bug:7273 - End
                            }                  
                        }
                    }
                    ImportCount++;
                }
                if(!noBankTrans)// TFS 7285
                {
                    this.initSKS_BR_BankTran();
                }
                
            }
    }

]]></Source>
			</Method>
			<Method>
				<Name>openFile</Name>
				<Source><![CDATA[
    abstract boolean openFile()
    {
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>readFile</Name>
				<Source><![CDATA[
    abstract void readFile()
    {
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>stripDelimiters</Name>
				<Source><![CDATA[
    str stripDelimiters(str strParm1)
    {
        str rtnval = strRtrim(strParm1);
        rtnval = substr(rtnval,strLen(rtnval),1) == '\r' ? substr(rtnval,1,strlen(rtnval)-1) : rtnval;
        return rtnval;
    
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>