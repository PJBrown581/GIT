<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_OM_NBOBANK_CSV</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_OM_NBOBANK_CSV extends SKS_EFT_Format
/// </summary>
class SKS_EFT_Format_OM_NBOBANK_CSV extends SKS_EFT_Format
{
    #define.FormatVersion('20220516')
    #define.PAYMENT('PAYMENT')

    #define.Separator(',')
    #define.DoubleQuote('"')

    System.Text.StringBuilder msb;
    int mRecordCount;
    int mBatchCount;
    int mTransCount;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wrapField</Name>
				<Source><![CDATA[
    private str wrapField(str _field = '',  boolean _addSeparator = true)
    {
        str text;

        if(_addSeparator)
        {
            if(_field != '' && strContains(_field, ','))
            {
                text = #DoubleQuote + _field + #DoubleQuote + #Separator;
            }
            else
            {
                text = _field + #Separator;
            }
        }
        else
        {
            text = _field;
        }

        return text;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    protected void formatStructure()
    {
        SKS_EFT_FileDetail invSKS_EFT_FileDetail;
        msb = new System.Text.StringBuilder();

        // File Header
        this .rec_FileHeader();

        while(mSKS_EFT_FileDetail)
        {
            // Get SKS_EFT_FileFormatPaymSpec
            this.getSKS_EFT_FileFormatPaymSpec();

            // Batch Header
            this.rec_BatchHeader();

            //Transaction Record
            this.rec_TransRecord();

            while select invSKS_EFT_FileDetail where invSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId && invSKS_EFT_FileDetail.InvoiceNumber != ''
            {
                //Invoice Record
                this.rec_InvoiceRecord(invSKS_EFT_FileDetail);
            }

            next mSKS_EFT_FileDetail;
        }
        
        this.fileWrite(strFmt(msb.ToString(),mBatchCount, mRecordCount, mTransCount));
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_FileHeader</Name>
				<Source><![CDATA[
    boolean rec_FileHeader()
    {
        str datenow , nowtime;
        str fileRef;
        utcDateTime  time2 = DateTimeUtil::getSystemDateTime();

        mRecordCount++;

        datenow =    date2Str(DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(time2 ,DateTimeUtil::getUserPreferredTimeZone()) )
                  , 123,DateDay::Digits2,DateSeparator::Hyphen, DateMonth::Digits2, DateSeparator::Hyphen,  DateYear::Digits4);
    
        nowtime = time2str(DateTimeUtil::time(DateTimeUtil::applyTimeZoneOffset(time2 , DateTimeUtil::getUserPreferredTimeZone()) ) ,
                       TimeSeparator::Colon , TimeSeparator::Colon) ;
 

        //1. File Header Indentifier
        msb.Append(this.wrapField('FILHDR'));

        //2. File Reference
        fileRef = strRem(mSKS_EFT_File.FileNbr, '-');
        msb.Append(this.wrapField(subStr(fileRef, 1, 15)));//SKS_DevOps_15074

        //3. Subscriber ID
        msb.Append(this.wrapField('EHPAYROLL'));

        //4. Total Number of Batches
        msb.Append(this.wrapField(subStr('%1', 1, 3)));

        //5. Total number of Lines
        msb.Append(this.wrapField(subStr('%2', 1, 8)));

        //6. File Creation Date (Transaction release date)
        msb.Append(this.wrapField(datenow));

        //7. File Creation time (Transaction release time)
        msb.Append(this.wrapField(nowtime));

        //8. File Authorisation Type
        msb.Append(this.wrapField('P'));

        //9. ACK mode
        msb.Append(this.wrapField('E'));

        //10.ACK receiving mail ids
        msb.Append(this.wrapField(this.getEmail()));//SKS_DevOps_15074

        //11.ACK Format
        msb.Append(this.wrapField('C', false));

        msb.AppendLine();

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_BatchHeader</Name>
				<Source><![CDATA[
    boolean rec_BatchHeader()
    {
        SKS_EFT_FileDetail   locSKS_EFT_FileDetail;
        str orderingPartyAddr, fixedDebit;

        mRecordCount++;
        mBatchCount++;

        //1.Batch Header Identifier
        msb.Append(this.wrapField('TXNHDR'));

        //2.Batch Txn Reference (Customer Reference)
        msb.Append(this.wrapField(subStr(mSKS_EFT_FileDetail.PaymentReference, 1, 16)));

        //3.Workflow Identifier
        msb.Append(this.wrapField('BEN'));

        //4.Transaction records Count
        msb.Append(this.wrapField(subStr('%3', 1, 5)));

        //5.Record Spotter
        msb.Append(this.wrapField('!<<REC>>!'));

        //6.Debit at batch level / record level flag (this same consolidated debit)
        msb.Append(this.wrapField('1'));

        //7.Transaction Type
        msb.Append(this.wrapField(''));

        //8.Customer Debit/Credit A/c
        msb.Append(this.wrapField(subStr(mSKS_EFT_FileDetail.BankBankAcct, 1, 23)));

        //9.Customer Debit/Credit currency
        msb.Append(this.wrapField(subStr(mSKS_EFT_FileDetail.CurrencyCode, 1, 3)));

        //10.Customer Debit account country
        msb.Append(this.wrapField(''));

        //11.Ordering Party name
        msb.Append(this.wrapField(subStr(this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyName), 1, 60)));

        //12.Ordering party address
        orderingPartyAddr = mSKS_EFT_FileDetail_BankAccount.WOrdPartyName;
        if(orderingPartyAddr)
        {
            orderingPartyAddr = orderingPartyAddr + ' ' + mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr2;
        }
        msb.Append(this.wrapField(subStr(this.CharacterReplacement(orderingPartyAddr), 1, 255)));

        //13.Ordering party BIC CODE
        msb.Append(this.wrapField(''));

        //14.Fixed debit
        fixedDebit = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('FixedDebit', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank));
        if(fixedDebit == 'Y')
        {
            msb.Append(this.wrapField('1'));
        }
        else
        {
            msb.Append(this.wrapField('0'));
        }

        //15.Pay Later Date
        msb.Append(this.wrapField(''));

        //16.Authorization Type (single batch or split txn )
        msb.Append(this.wrapField(''));

        //17.Special Deal Flag
        msb.Append(this.wrapField(''));

        //18.Special Deal Reference
        msb.Append(this.wrapField(''));

        //19.Beneficiary registered
        msb.Append(this.wrapField(''));

        //20.Advice Type
        msb.Append(this.wrapField('D'));

        //21.Advise mode
        msb.Append(this.wrapField('H'));//SKS_DevOps_15074

        //22.Advising mail ids
        msb.Append(this.wrapField(''));

        //23.Advising Format
        msb.Append(this.wrapField(''));

        //24.Invoice records exists
        select count(RecId) from locSKS_EFT_FileDetail where locSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId && locSKS_EFT_FileDetail.InvoiceNumber != '';
        
        if(locSKS_EFT_FileDetail.RecId)
        {
            msb.Append(this.wrapField('1'));
        }
        else
        {
            msb.Append(this.wrapField('0'));
        }

        //25.Total Invoice record count
        msb.Append(this.wrapField(subStr(int642Str(locSKS_EFT_FileDetail.RecId), 1, 5)));

        //26.Invoice Label 1
        msb.Append(this.wrapField(''));

        //27.Invoice Label 2
        msb.Append(this.wrapField(''));

        //28.Invoice Label 3
        msb.Append(this.wrapField(''));

        //29.Invoice Label 4
        msb.Append(this.wrapField(''));

        //30.Invoice Label 5
        msb.Append(this.wrapField('', false));

        msb.AppendLine();

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_TransRecord</Name>
				<Source><![CDATA[
    boolean rec_TransRecord()
    {
        str benPayMode;
        str address, benBankAddress, description;

        mRecordCount++;
        mTransCount++;

        //1.Transaction record Identifier
        msb.Append(this.wrapField('TXNDET'));

        //2.Transaction Reference
        msb.Append(this.wrapField(subStr(mSKS_EFT_FileDetail.PaymentReference, 1, 16)));

        //3.Beneficiary / Employee Code
        msb.Append(this.wrapField(''));//SKS_DevOps_15074

        //4.Beneficiary / Employee name
        msb.Append(this.wrapField(subStr(this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneName), 1, 60)));

        //5.Beneficiary / Employee Email Id
        msb.Append(this.wrapField(''));

        //6.Beneficiary / Employee Mobile Number
        msb.Append(this.wrapField(''));

        //7.Original Ordering party
        msb.Append(this.wrapField(''));

        //8.Beneficiary/Employee/Prepay card Number (IBAN/Account Number)
        if(mSKS_EFT_FileDetail.DepBankIBAN)
        {
            msb.Append(this.wrapField(subStr(mSKS_EFT_FileDetail.DepBankIBAN, 1, 40)));
        }
        else
        {
            msb.Append(this.wrapField(subStr(mSKS_EFT_FileDetail.DepBankAcct, 1, 40)));
        }

        //9.Beneficiary / Employee Pay Mode
        benPayMode = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('BenPayMode', mSKS_EFT_FileDetail.RecId));
        msb.Append(this.wrapField(benPayMode));

        //10.Beneficiary / Employee Pay Amount
        msb.Append(this.wrapField(subStr(num2str(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1,0,2,1,0), 1, 13)));

        //11.Beneficiary / Employee Pay Currency
        msb.Append(this.wrapField(mSKS_EFT_FileDetail.PaymentCurrencyCode));

        //12.Beneficiary / Employee Address
        address = mSKS_EFT_FileDetail_VendAddress.BeneAddr;

        if(address)
        {
            address = address + ' ' + mSKS_EFT_FileDetail_VendAddress.BeneAddr2;
        }
        msb.Append(this.wrapField(this.CharacterReplacement(subStr(this.CharacterReplacement(address), 1, 255))));

        //13.Beneficiary / Employee Country
        msb.Append(this.wrapField(LogisticsAddressCountryRegion::findByISOCode(mSKS_EFT_FileDetail_VendAddress.BeneCountryRegionId).CountryRegionId));//SKS_DevOps_15074

        //14.Beneficiary / Employee Bank Name
        msb.Append(this.wrapField(this.CharacterReplacement(subStr(mSKS_EFT_FileDetail_BenBank.BenBankName, 1, 128))));

        //15.Beneficiary / Employee Bank Address
        benBankAddress = mSKS_EFT_FileDetail_BenBank.BenBankAddr;

        if(benBankAddress)
        {
            benBankAddress = benBankAddress + ' ' + mSKS_EFT_FileDetail_BenBank.BenBankCity;
        }
        msb.Append(this.wrapField(this.CharacterReplacement(subStr(benBankAddress, 1, 255))));

        //16.Beneficiary / Employee BIC Code
        msb.Append(this.wrapField(subStr(mSKS_EFT_FileDetail.DepSwiftNo, 1, 12)));

        //17.Beneficiary / Employee Sort Code
        if(this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_BenBank.BenBankCountryRegionId) == 'UK' ||
            this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_BenBank.BenBankCountryRegionId) == 'US' ||
            this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_BenBank.BenBankCountryRegionId) == 'IN' ||
            this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_BenBank.BenBankCountryRegionId) == 'CA' ||
            this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_BenBank.BenBankCountryRegionId) == 'AU' ||
            this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_BenBank.BenBankCountryRegionId) == 'JO' ||
            this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_BenBank.BenBankCountryRegionId) == 'CN')//SKS_DevOps_15074
        {
            msb.Append(this.wrapField(mSKS_EFT_FileDetail.DepBankTransit));
        }
        else
        {
            msb.Append(this.wrapField(''));
        }
        //18.Beneficiary / Employee Route Code
        msb.Append(this.wrapField(subStr(mSKS_EFT_FileDetail.DepBankTransit, 1, 30)));

        //19.Beneficiary / Employee Payable City
        msb.Append(this.wrapField(''));

        //20.Beneficiary / Employee Payable Country
        msb.Append(this.wrapField(''));

        //21.Payment Details for Beneficiary / Employee
        description = LedgerJournalTrans::findRecId(mSKS_EFT_FileDetail.PaymentLineRecId, false).Txt;
        msb.Append(this.wrapField(this.CharacterReplacement(subStr(description, 1, 140))));

        //22.Delivery Mode
        msb.Append(this.wrapField());

        //23.Transactions Charges
        switch(benPayMode)//SKS_DevOps_15074
        {
            case 'OB' :
                msb.Append(this.wrapField('S'));
                break;
            case 'TT':
                msb.Append(this.wrapField(strUpr(this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('Charges', mSKS_EFT_FileDetail.RecId)))));
                break;
            default :
                msb.Append(this.wrapField());
                break;
        }

        //24.Transaction Purpose type
        switch(benPayMode)//SKS_DevOps_15074
        {
            case 'OB' :
            case 'TT':
                msb.Append(this.wrapField(this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('TransPurpType', mSKS_EFT_FileDetail.RecId))));
                break;
            default :
                msb.Append(this.wrapField());
                break;
        }
        
        //25.Transaction Payment type
        msb.Append(this.wrapField());

        //26.Intermediary Bank1
        msb.Append(this.wrapField());

        //27.Intermediary Bank1 Address
        msb.Append(this.wrapField());

        //28.Intermediary Bank1 BIC Code
        msb.Append(this.wrapField());

        //29.Intermediary Bank1 Sort Code
        msb.Append(this.wrapField());

        //30.Intermediary Bank1 Route Code
        msb.Append(this.wrapField());

        //31.Intermediary Bank2
        msb.Append(this.wrapField());

        //32.Intermediary Bank2 Address
        msb.Append(this.wrapField());

        //33.Intermediary Bank2 BIC Code
        msb.Append(this.wrapField());

        //34.Intermediary Bank2 Sort Code
        msb.Append(this.wrapField());

        //35.Intermediary Bank2 Route Code
        msb.Append(this.wrapField());

        //36.Invoice reference
        msb.Append(this.wrapField('', false));

        msb.AppendLine();

        
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_InvoiceRecord</Name>
				<Source><![CDATA[
    boolean rec_InvoiceRecord(SKS_EFT_FileDetail tmpSKS_EFT_FileDetail)
    {
        mRecordCount++;

        //1.Invoice Record Indentifier
        msb.Append(this.wrapField('INVINFO'));

        //2.Invoice Reference Number
        msb.Append(this.wrapField(subStr(this.CharacterReplacement(tmpSKS_EFT_FileDetail.InvoiceNumber), 1, 10)));

        //3.Inovice Amount
        msb.Append(this.wrapField(subStr(num2str(tmpSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1,0,2,1,0), 1, 13)));

        //4.Invoice Data Field 1
        msb.Append(this.wrapField(''));

        //5.Invoice Data Field 2
        msb.Append(this.wrapField(''));

        //6.Invoice Data Field 3
        msb.Append(this.wrapField(''));

        //7.Invoice Data Field 4
        msb.Append(this.wrapField(''));

        //8.Invoice Data Field 5
        msb.Append(this.wrapField('', false));
        
        msb.AppendLine();

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEmail</Name>
				<Source><![CDATA[
    public str getEmail()
    {
        str address;

        if(mSKS_EFT_FileDetail_VendAddress.Locator)
        {
            address = this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.Locator);
        }

        return address;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectPaymentRecords</Name>
				<Source><![CDATA[
    protected void selectPaymentRecords()
    {
        //------------------------------------------------------------------------------------------------------
        // Standard payment selction
        // Override if different selection is need for a format
        //------------------------------------------------------------------------------------------------------
    
        //Order by clause must match the clause in the SKS_EFT_Processing.SumByPayment
        select * from mSKS_EFT_FileDetail
            join mSKS_EFT_FileDetail_VendAddress
            join mSKS_EFT_FileDetail_BenBank
            join mSKS_EFT_FileDetail_Intermediary
              order by mSKS_EFT_FileDetail.RecordSection,
                   mSKS_EFT_FileDetail.PaymMode,
                   mSKS_EFT_FileDetail.BankAccountId,
                   mSKS_EFT_FileDetail.PaymentCurrencyCode,
                   mSKS_EFT_FileDetail.PaymSpec,
                   mSKS_EFT_FileDetail.EffectiveDate,
                   mSKS_EFT_FileDetail.DepCountryRegionId,
                   mSKS_EFT_FileDetail.RecordType,
                   mSKS_EFT_FileDetail.AccountNum,
                   mSKS_EFT_FileDetail.PaymentReference,
                   mSKS_EFT_FileDetail.RecId
          where mSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                mSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                mSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_VendAddress.RefRecId &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_BenBank.RefRecId &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_Intermediary.RefRecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>