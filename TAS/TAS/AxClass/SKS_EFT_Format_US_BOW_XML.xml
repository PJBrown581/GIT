<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_US_BOW_XML</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_US_BOW_XML extends SKS_EFT_Format
/// </summary>
class SKS_EFT_Format_US_BOW_XML extends SKS_EFT_Format
{
    #define.FormatVersion('20220922')
    XmlDocument         xmlDoc;
    XmlElement          nodeRoot;
    XmlElement          nodePmtAddRq;
    XmlElement          nodePmtInfo;
    BankAccountTable    mBankAccountTable;
    str                 DlvryMtd,DlvryInst;
    SKS_EFT_FileDetail  invSKS_EFT_FileDetail;

    #define.IAT('ACH-IAT')
    #define.PPD('ACH-PPD')
    #define.CCD('ACH-CCD')
    #define.CTX('ACH-CTX')
    #define.CHK('CHK')

    #define.ns0('ns0')
    #define.nsValue('urn:ifxforum-org:XSD:1')

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    protected void formatStructure()
    {
        //Initialize XML
        xmlDoc = XmlDocument::newBlank();
    
        this.node_MessageRoot();
    
        this.node_IFXHeader();
    
        while(mSKS_EFT_FileDetail)
        {
            this.node_IFX();

            // Get SKS_EFT_VendorPaym
            this.getSKS_EFT_VendorPaym();
    
            // Get SKS_EFT_FileFormatPaymSpec
            this.getSKS_EFT_FileFormatPaymSpec();
    
            // Get Remittance information
            this.getRemittanceAddress(mSKS_EFT_FileFormatPaymSpec.UseCheckNumber);
    
            // Get SKS_EFT_Bank
            this.getSKS_EFT_Bank();    
            
            //      Get Bank Account Table
            mBankAccountTable = BankAccountTable::find(mSKS_EFT_FileDetail.BankAccountId);
    
            //      <PmtInfo>
            this.node_PmtInfo();
            
            //          <RemitInfo>
            this.node_PmtInfo_RemitInfo();
    
            //          <DepAcctIdFrom>
            this.node_PmtInfo_DepAcctIdFrom(nodePmtInfo);
    
            this.node_PmtInfo_TransDetails();
    
            next mSKS_EFT_FileDetail;
        }
        this.fileWrite(xmlDoc.toString());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCodePage</Name>
				<Source><![CDATA[
    protected int getCodePage()
    {
        return 65001;
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_IFX</Name>
				<Source><![CDATA[
    private void node_IFX()
    {
        XmlElement  nodePaySvcRq;
        XmlElement  nodeIFX;
    
        nodeIFX = nodeRoot.appendChild(xmlDoc.createElement3(#ns0, 'IFX', #nsValue));
    
        if(mSKS_EFT_FileDetail.PaymSpec != 'CHK')
        {
            SKS_EFT_Format::xmlsetAttributeText(nodeIFX, 'type', 'ACH');
        }
        else
        {
            SKS_EFT_Format::xmlsetAttributeText(nodeIFX, 'type', 'CheckPrinting');
        }
    
        SKS_EFT_Format::xmlsetAttributeText(nodeIFX, 'version', '1.7');
    
        //          <PaySvcRq>
        nodePaySvcRq = nodeIFX.appendChild(xmlDoc.createElement3(#ns0, 'PaySvcRq', #nsValue));
    
        //          <PmtAddRq>
        nodePmtAddRq = nodePaySvcRq.appendChild(xmlDoc.createElement3(#ns0, 'PmtAddRq', #nsValue));
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_IFXHeader</Name>
				<Source><![CDATA[
    private void node_IFXHeader()
    {
        XmlElement  nodeIFXHeader;
        XmlElement  nodeCustId;
        XmlElement  nodeSignonRq;
        guid guid1;
        str string;
    
        guid1 = newGuid();
        string = guid2str(guid1);
    
        //          <IFXHeader>
        nodeIFXHeader = nodeRoot.appendChild(xmlDoc.createElement3(#ns0, 'IFXHeader', #nsValue));
    
        SKS_EFT_Format::xmlsetAttributeText(nodeIFXHeader, 'version', '1.7');
    
        //          <CustId>
        nodeCustId = nodeIFXHeader.appendChild(xmlDoc.createElement3(#ns0, 'CustId', #nsValue));
    
        //          <SPName>
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCustId, 'SPName', this.CharacterReplacement(mSKS_EFT_Bank.ACHCompanyName), 0, false, #ns0, #nsValue);
    
        //          <CustLoginId>
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCustId, 'CustLoginId', mSKS_EFT_Bank.ACHCompanyID, 0, false, #ns0, #nsValue);
    
        //          <SignonRq>
        nodeSignonRq = nodeIFXHeader.appendChild(xmlDoc.createElement3(#ns0, 'SignonRq', #nsValue));
    
        //          <ClientDt>
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeSignonRq, 'ClientDt', DateTimeUtil::toStr(DateTimeUtil::utcNow()), 0, false, #ns0, #nsValue);
    
        //          <RqUID>
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeIFXHeader, 'RqUID', subStr(string, 2, 36), 0, false, #ns0, #nsValue);
    
        this.addFieldElement(gXmlNodeHeaderFieldValues, 'RqUID', string, mSKS_EFT_File.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_MessageRoot</Name>
				<Source><![CDATA[
    protected void node_MessageRoot()
    {
        nodeRoot = xmldoc.appendChild(xmlDoc.createElement3(#ns0, 'IFXStack', #nsValue));
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInfo</Name>
				<Source><![CDATA[
    private void node_PmtInfo()
    {
        guid guid2;
        str string;
    
        guid2 = newGuid();
        string = guid2str(guid2);
    
        //          <RqUID>
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtAddRq, 'RqUID', subStr(string, 2, 36), 0, false, #ns0, #nsValue);
    
        this.addFieldElement(gXmlNodeHeaderFieldValues, 'RqUIDT', string, mSKS_EFT_File.RecId);
    
        //          <PmtInfo>
        nodePmtInfo = nodePmtAddRq.appendChild(xmlDoc.createElement3(#ns0, 'PmtInfo', #nsValue));
    
        //          <PayerInfo>
        this.node_PmtInfo_PayerInfo(nodePmtInfo);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInfo_DepAcctIdFrom</Name>
				<Source><![CDATA[
    private void node_PmtInfo_DepAcctIdFrom(XmlElement _nodePmtInfo)
    {
        XmlElement nodeDepAcctIdFrom;
        XmlElement nodeBankInfo;
    
        //          <DepAcctIdFrom>
        nodeDepAcctIdFrom = _nodePmtInfo.appendChild(xmlDoc.createElement3(#ns0, 'DepAcctIdFrom', #nsValue));
    
        //          <AcctId>
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeDepAcctIdFrom, 'AcctId', subStr(mSKS_EFT_FileDetail.BankBankAcct, 0, 36), 0, false, #ns0, #nsValue);//SKS_VSTS_13073
    
        //          <AcctType>
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeDepAcctIdFrom, 'AcctType', 'DDA', 0, false, #ns0, #nsValue);
    
        //          <BankInfo>
        nodeBankInfo = nodeDepAcctIdFrom.appendChild(xmlDoc.createElement3(#ns0, 'BankInfo', #nsValue));
    
        //          <BankIdType>
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeBankInfo, 'BankIdType', 'ABA', 0, false, #ns0, #nsValue);
    
        //          <BankId>
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeBankInfo, 'BankId', subStr(mSKS_EFT_FileDetail.BankBankTransit, 0, 34), 0, false, #ns0, #nsValue);//SKS_VSTS_13073
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInfo_PayerInfo</Name>
				<Source><![CDATA[
    private void node_PmtInfo_PayerInfo(XmlElement _nodePmtInfo)
    {
        XmlElement  nodePayerInfo;
        XmlElement  nodeOrgInfo;
        XmlElement  nodeCompositeContactInfo;
        XmlElement  nodeContactInfo;
        XmlElement  nodeOrgId;
        int len;//SKS_VSTS_13073
        //              <PayerInfo>
        nodePayerInfo = _nodePmtInfo.appendChild(xmlDoc.createElement3(#ns0, 'PayerInfo', #nsValue));
    
        //              <OrgInfo>
        nodeOrgInfo = nodePayerInfo.appendChild(xmlDoc.createElement3(#ns0, 'OrgInfo', #nsValue));
    
        //              <Name>
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)//SKS_VSTS_13073 -->
        {
            case #IAT:
            case #PPD:
            case #CCD:
            case #CTX:
                len = 16;
                break;
            case #CHK:
                len = 100;
                break;
        }//SKS_VSTS_13073 <--
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeOrgInfo, 'Name', this.CharacterReplacement(mSKS_EFT_Bank.WOrdPartyName), 0, false, #ns0, #nsValue);
    
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #IAT  ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #PPD  ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CCD  ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CTX)
        {
            //          <CompositeContactInfo>
            nodeCompositeContactInfo = nodeOrgInfo.appendChild(xmlDoc.createElement3(#ns0, 'CompositeContactInfo', #nsValue));
    
            //          <ContactInfo>
            nodeContactInfo = nodeCompositeContactInfo.appendChild(xmlDoc.createElement3(#ns0, 'ContactInfo', #nsValue));
    
            //          <PostAddr>
            if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #IAT)//SKS_VSTS_13073 -->
            {
                this.node_PostAddr(nodeContactInfo, subStr(mSKS_EFT_Bank.WOrdPartyAddr,0, 35), subStr(mSKS_EFT_Bank.WOrdPartyAddr2, 0, 35), subStr(mSKS_EFT_Bank.WOrdPartyCity, 0, 35), subStr(mSKS_EFT_Bank.WOrdPartyState, 0, 35), subStr(mSKS_EFT_Bank.WOrdPartyZipCode, 0, 35), mSKS_EFT_Bank.WOrdPartyCountryRegionId);
            }
           else
            {//SKS_VSTS_13073 <--
                this.node_PostAddr(nodeContactInfo, mSKS_EFT_Bank.WOrdPartyAddr, mSKS_EFT_Bank.WOrdPartyAddr2, mSKS_EFT_Bank.WOrdPartyCity, mSKS_EFT_Bank.WOrdPartyState, mSKS_EFT_Bank.WOrdPartyZipCode, mSKS_EFT_Bank.WOrdPartyCountryRegionId);
            }           
        }
        else if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CHK)
        {
            //          <PostAddr>
            this.node_PostAddr(nodePayerInfo, mSKS_EFT_Bank.WOrdPartyAddr, mSKS_EFT_Bank.WOrdPartyAddr2, mSKS_EFT_Bank.WOrdPartyCity, mSKS_EFT_Bank.WOrdPartyState, mSKS_EFT_Bank.WOrdPartyZipCode, mSKS_EFT_Bank.WOrdPartyCountryRegionId);
        }
    
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode != #CHK)
        {
            //          <OrgId>
            nodeOrgId = nodePayerInfo.appendChild(xmlDoc.createElement3(#ns0, 'OrgId', #nsValue));
    
            //          <OrgIdNum>
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeOrgId, 'OrgIdNum', subStr(this.CharacterReplacement(mSKS_EFT_FileFormatPaymSpec.PaymSpecName), 1, 10), 0, false, #ns0, #nsValue);//SKS_VSTS_13073
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInfo_RemitInfo</Name>
				<Source><![CDATA[
    private void node_PmtInfo_RemitInfo()
    {
        XmlElement  nodeRemitInfo;
        XmlElement  nodeRemitInstruction;
        XmlElement  nodeChkInfo;
        XmlElement  nodeInvoiceInfo;
        XmlElement  nodeTotalCurAmt;
        XmlElement  nodeAmt;
        XmlElement  nodeDiscount;
        XmlElement  nodeCurAmt;
        XmlElement  nodeInvoiceAdj;
        XmlElement  nodeCurAmtAdj;
    
        //          <RemitInfo>
        nodeRemitInfo = nodePmtInfo.appendChild(xmlDoc.createElement3(#ns0, 'RemitInfo', #nsValue));
    
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CHK)
        {
            //      <RemitInstruction>
            nodeRemitInstruction = nodeRemitInfo.appendChild(xmlDoc.createElement3(#ns0, 'RemitInstruction', #nsValue));
    
            //      <DeliveryMethod>
            DlvryMtd = SKS_EFT_Format::getValueFromCode('DeliveryMethod', mSKS_EFT_FileFormatPaymSpec, mSKS_EFT_VendorPaym.RecId);
    
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRemitInstruction, 'DeliveryMethod', DlvryMtd, 0, false, #ns0, #nsValue);
    
            DlvryInst = SKS_EFT_Format::getValueFromCode('DeliveryInstruction', mSKS_EFT_FileFormatPaymSpec, mSKS_EFT_VendorPaym.RecId);
    
            //      <DeliveryInstruction>
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRemitInstruction, 'DeliveryInstruction', DlvryInst, 0, false, #ns0, #nsValue);
        }
    
        //          <SettlementInfo>
        this.node_RemitInfo_SettlementInfo(nodeRemitInfo);
    
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CHK)
        {
             //     <ChkInfo>
            nodeChkInfo = nodeRemitInfo.appendChild(xmlDoc.createElement3(#ns0, 'ChkInfo', #nsValue));
    
            //      <ChkNum>
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeChkInfo, 'ChkNum', this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference), 0, false, #ns0, #nsValue);
    
            //      <Logo>
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRemitInfo, 'Logo', this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('LogoId', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank)), 0, false, #ns0, #nsValue);
    
            //      <SignatureId>
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRemitInfo, 'SignatureId', this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('SignatureId', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank)), 0, false, #ns0, #nsValue);
        }
    
        //          <CustPayeeInfo>
        this.node_RemitInfo_CustPayeeInfo(nodeRemitInfo);
    
        //          <CurAmt>
        this.node_RemitInfo_CurAmt(nodeRemitInfo);
    
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CHK)
        {
            while select invSKS_EFT_FileDetail
                where invSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId
                   && invSKS_EFT_FileDetail.InvoiceNumber != ''
            {
                //      <InvoiceInfo>
                nodeInvoiceInfo = nodeRemitInfo.appendChild(xmlDoc.createElement3(#ns0, 'InvoiceInfo', #nsValue));

                //  <InvoiceNum>
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeInvoiceInfo, 'InvoiceNum', subStr(this.CharacterReplacement(invSKS_EFT_FileDetail.InvoiceNumber), 0, 14), 0, false, #ns0, #nsValue);//SKS_VSTS_13073

                nodeTotalCurAmt = nodeInvoiceInfo.appendChild(xmlDoc.createElement3(#ns0, 'TotalCurAmt', #nsValue));

                //  <TotalCurAmt>
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeTotalCurAmt, 'Amt', num2str(((invSKS_EFT_FileDetail.InvoiceSettleAmountCur + invSKS_EFT_FileDetail.InvoiceDiscAmountCur) * -1),0,2,1,0), 0, false, #ns0, #nsValue);

                //  <EffDt>
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeInvoiceInfo, 'EffDt', SKS_PP_StringFormats::strDateYYYYMMDD(invSKS_EFT_FileDetail.InvoiceDate, DateSeparator::Hyphen), 0, false, #ns0, #nsValue);

                nodeDiscount = nodeInvoiceInfo.appendChild(xmlDoc.createElement3(#ns0, 'Discount', #nsValue));

                nodeCurAmt = nodeDiscount.appendChild(xmlDoc.createElement3(#ns0, 'CurAmt', #nsValue));

                //  <Invoice discount amount>
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCurAmt, 'Amt', num2str((invSKS_EFT_FileDetail.InvoiceDiscAmountCur * -1),0,2,1,0), 0, false, #ns0, #nsValue);

                nodeInvoiceAdj = nodeInvoiceInfo.appendChild(xmlDoc.createElement3(#ns0, 'InvoiceAdj', #nsValue));

                nodeCurAmtAdj = nodeInvoiceAdj.appendChild(xmlDoc.createElement3(#ns0, 'CurAmt', #nsValue));
                
                //  <Invoice net amount>
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCurAmtAdj, 'Amt',num2str((invSKS_EFT_FileDetail.InvoiceSettleAmountCur * -1),0,2,1,0), 0, false, #ns0, #nsValue);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInfo_TransDetails</Name>
				<Source><![CDATA[
    private void node_PmtInfo_TransDetails()
    {
        guid guid3;
        str string;
        date effectivDate;
        XmlElement  nodeCategory;
    
        guid3 = newGuid();
        string = guid2str(guid3);
    
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CHK)
        {
            if(DlvryMtd == 'USPS')
            {
                effectivDate = SKS_EFT_Processing::GetOffsetDate(1, mSKS_EFT_FileDetail.EffectiveDate, mSKS_EFT_Bank.BankHolidayGroupId);
            }
            else
            {
                effectivDate = SKS_EFT_Processing::GetOffsetDate(2, mSKS_EFT_FileDetail.EffectiveDate, mSKS_EFT_Bank.BankHolidayGroupId);
            }
            //          <DueDt>
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtInfo, 'DueDt', SKS_PP_StringFormats::strDateYYYYMMDD(effectivDate, DateSeparator::Hyphen), 0, false, #ns0, #nsValue);
        }
        else
        {
            //          <Category>
            nodeCategory = nodePmtInfo.appendChild(xmlDoc.createElement3(#ns0, 'Category', #nsValue));
            
            //          <PrcDt>
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtInfo, 'PrcDt', SKS_PP_StringFormats::strDateYYYYMMDD(mSKS_EFT_FileDetail.EffectiveDate, DateSeparator::Hyphen), 0, false, #ns0, #nsValue);
    
            //         <PmtRefId>
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtInfo, 'PmtRefId', subStr(string, 2, 32), 0, false, #ns0, #nsValue);//SKS_VSTS_13073
    
            this.addFieldElement(gXmlNodeHeaderFieldValues, 'GQUID', string, mSKS_EFT_File.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PostAddr</Name>
				<Source><![CDATA[
    private void node_PostAddr(XmlElement  _node,
                               str _Addr1   = '',
                               str _Addr2   = '',
                               str _City    = '',
                               str _StateProv = '',
                               str _PostalCode = '',
                               str _Country = '')
    {
        XmlElement nodePostAddr;
    
        if(_Addr1 != '' || _Addr2 != '' || _City != '' || _StateProv != '' || _PostalCode != '' || _Country != '')
        {
            //                  <PostAddr>
            nodePostAddr = _node.appendChild(xmlDoc.createElement3(#ns0,'PostAddr',#nsValue));
    
            //                  <Addr1>
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePostAddr, 'Addr1', this.CharacterReplacement(_Addr1), 0, false, #ns0, #nsValue);
    
            //                  <Addr2>
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePostAddr, 'Addr2', this.CharacterReplacement(_Addr2), 0, false, #ns0, #nsValue);
    
            //                  <City>
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePostAddr, 'City', this.CharacterReplacement(_City), 0, false, #ns0, #nsValue);
    
            //                  <StateProv>
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePostAddr, 'StateProv', this.CharacterReplacement(_StateProv), 0, false, #ns0, #nsValue);
    
            //                  <PostalCode>
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePostAddr, 'PostalCode', this.CharacterReplacement(_PostalCode), 0, false, #ns0, #nsValue);
    
            //                  <Country>
            //SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePostAddr, 'Country', this.getLogisticsAddressCountryISO(_Country), 0, false, #ns0, #nsValue);

            if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CHK)
            {
                //                  <Country>
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePostAddr, 'Country', _Country, 0, false, #ns0, #nsValue);//SKS_VSTS_13073
                //                 <CountryName>
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePostAddr, 'CountryName', LogisticsAddressCountryRegion::findByISOCode(_Country).displayName(), 0, false, #ns0, #nsValue);                
            }
            else
            {
                //                  <Country>
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePostAddr, 'Country', this.getLogisticsAddressCountryISO(_Country), 0, false, #ns0, #nsValue);
            }//SKS_VSTS_13073
                    
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_RemitInfo_CurAmt</Name>
				<Source><![CDATA[
    private void node_RemitInfo_CurAmt(XmlElement _nodeRemitInfo)
    {
        XmlElement  nodeCurAmt;
    
        //              <CurAmt>
        nodeCurAmt = _nodeRemitInfo.appendChild(xmlDoc.createElement3(#ns0, 'CurAmt', #nsValue));
    
        //              <Amt>
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCurAmt, 'Amt', num2str((mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1),0,2,1,0), 0, false, #ns0, #nsValue);
    
        //              <CurCode>
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCurAmt, 'CurCode', mSKS_EFT_FileDetail.PaymentCurrencyCode, 0, false, #ns0, #nsValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_RemitInfo_CustPayeeInfo</Name>
				<Source><![CDATA[
    private void node_RemitInfo_CustPayeeInfo(XmlElement _nodeRemitInfo)
    {
        XmlElement  nodeCustPayeeInfo;
        XmlElement  nodeContactInfo;
        XmlElement  nodeFSPayee;
        XmlElement  nodeOrgId;
    
        //          <CustPayeeInfo>
        nodeCustPayeeInfo = _nodeRemitInfo.appendChild(xmlDoc.createElement3(#ns0, 'CustPayeeInfo', #nsValue));
    
        //          <FSPayee>
        nodeFSPayee = nodeCustPayeeInfo.appendChild(xmlDoc.createElement3(#ns0, 'FSPayee', #nsValue));
    
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CHK)
        {
            //          <ContactInfo>
            nodeContactInfo = nodeFSPayee.appendChild(xmlDoc.createElement3(#ns0, 'ContactInfo', #nsValue));
    
            //          <ContactName>
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeContactInfo, 'ContactName', this.CharacterReplacement(mRemittanceName), 0, false, #ns0, #nsValue);
        }
    
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #IAT ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #PPD ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CCD ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CTX ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CHK)
        {
            if(mSKS_EFT_FileFormatPaymSpec.TransactionCode != #CHK)        
            {
                //          <OrgId>
                nodeOrgId = nodeFSPayee.appendChild(xmlDoc.createElement3(#ns0, 'OrgId', #nsValue));
                
                //              <OrgIdType>
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeOrgId, 'OrgIdType', '', 0, true, #ns0, #nsValue);
                
                //              <OrgIdNum>
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeOrgId, 'OrgIdNum', subStr(mSKS_EFT_FileDetail.AccountNum, 1, 15), 0, true, #ns0, #nsValue);                
            }
            //          <PostAddr>
            this.node_PostAddr(nodeFSPayee, subStr(mRemittanceAdrLine1, 0, 35), subStr(mRemittanceAdrLine2, 0, 35), subStr(mRemittanceCity, 0, 35), subStr(mRemittanceState, 0, 35), subStr(mRemittanceZipCode, 0, 35), mRemittanceCountryRegionId);//SKS_VSTS_13073
        }
        
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode != #CHK)
        {
            //          <ContactInfo>
            nodeContactInfo = nodeFSPayee.appendChild(xmlDoc.createElement3(#ns0, 'ContactInfo', #nsValue));
    
            //          <ContactName>
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeContactInfo, 'ContactName', subStr(this.CharacterReplacement(mRemittanceName), 0, 22), 0, false, #ns0, #nsValue);//SKS_VSTS_13073
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_RemitInfo_SettlementInfo</Name>
				<Source><![CDATA[
    private void node_RemitInfo_SettlementInfo(XmlElement _nodeRemitInfo)
    {
        XmlElement  nodeSettlementInfo;
        XmlElement  nodeDepAcctId;
        XmlElement  nodeBankInfo;
        XmlElement  nodePmtInstruction;
        XmlElement  nodeIntermediaryDepAcct;
        XmlElement  nodePostAddr;
    
        //      <SettlementInfo>
        nodeSettlementInfo = _nodeRemitInfo.appendChild(xmlDoc.createElement3(#ns0, 'SettlementInfo', #nsValue));
    
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CHK)
        {
            //      <SettlementMethod>
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeSettlementInfo, 'SettlementMethod', 'OutSourcedCheckPrinting', 0, false, #ns0, #nsValue);
        }
        else
        {
            if(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur <= 0)
            {
                //      <SettlementMethod>
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeSettlementInfo, 'SettlementMethod', 'Credit', 0, false, #ns0, #nsValue);
            }
            else
            {
                //      <SettlementMethod>
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeSettlementInfo, 'SettlementMethod', 'Debit', 0, false, #ns0, #nsValue);
            }
    
            //      <DepAcctId>
            nodeDepAcctId = nodeSettlementInfo.appendChild(xmlDoc.createElement3(#ns0, 'DepAcctId', #nsValue));
    
            //      <AcctId>
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeDepAcctId, 'AcctId', subStr(mSKS_EFT_FileDetail.DepBankAcct, 1, 17), 0, false, #ns0, #nsValue);//SKS_VSTS_13073
    
            //      <AcctType>
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeDepAcctId, 'AcctType', 'DDA', 0, false, #ns0, #nsValue);
    
            //      <BankInfo>
            nodeBankInfo = nodeDepAcctId.appendChild(xmlDoc.createElement3(#ns0,'BankInfo',#nsValue));
    
            //      <Name>
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeBankInfo, 'Name', subStr(this.CharacterReplacement(mSKS_EFT_VendorPaym.WBenBankName), 1, 35), 0, false, #ns0, #nsValue);//SKS_VSTS_13073
    
            //      <BankIdType>
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeBankInfo, 'BankIdType', 'ABA', 0, false, #ns0, #nsValue);
    
            //      <BankId>
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeBankInfo, 'BankId', subStr(mSKS_EFT_FileDetail.DepBankTransit, 1, 9), 0, false, #ns0, #nsValue);//SKS_VSTS_13073
    
            if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #IAT ||
               mSKS_EFT_FileFormatPaymSpec.TransactionCode == #PPD ||
               mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CCD ||
               mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CTX)
            {
                //          <PostAddr>
                nodePostAddr = nodeBankInfo.appendChild(xmlDoc.createElement3(#ns0, 'PostAddr', #nsValue));
    
                //          <Country>
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePostAddr, 'Country', this.getLogisticsAddressCountryISO(mSKS_EFT_VendorPaym.WBenBankCountryRegionId), 0, false, #ns0, #nsValue);
            }
    
            //      <PmtInstruction>
            nodePmtInstruction = nodeSettlementInfo.appendChild(xmlDoc.createElement3(#ns0, 'PmtInstruction', #nsValue));
    
            //      <PmtFormat>
            switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
            {
                case #PPD:
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtInstruction, 'PmtFormat', 'PPD', 0, false, #ns0, #nsValue);
                    break;
                case #CCD:
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtInstruction, 'PmtFormat', 'CCD', 0, false, #ns0, #nsValue);
                    break;
                case #CTX:
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtInstruction, 'PmtFormat', 'CTX', 0, false, #ns0, #nsValue);
                    break;
                case #IAT:
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtInstruction, 'PmtFormat', 'IAT', 0, false, #ns0, #nsValue);
                    break;
            }
    
            if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #IAT && mSKS_EFT_VendorPaym.WIntBankId != '')
            {
                //      <IntermediaryDepAcct>
                nodeIntermediaryDepAcct = nodePmtInstruction.appendChild(xmlDoc.createElement3(#ns0, 'IntermediaryDepAcct', #nsValue));
    
                //      <SeqNum>
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeIntermediaryDepAcct, 'SeqNum', '01', 0, false, #ns0, #nsValue);
    
                //      <DepAcctId>
                nodeDepAcctId = nodeIntermediaryDepAcct.appendChild(xmlDoc.createElement3(#ns0, 'DepAcctId', #nsValue));
    
                //      <AcctId>
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeDepAcctId, 'AcctId', subStr(mSKS_EFT_VendorPaym.WIntBankAcct, 0, 36), 0, false, #ns0, #nsValue);//SKS_VSTS_13073
    
                //      <BankInfo>
                nodeBankInfo = nodeDepAcctId.appendChild(xmlDoc.createElement3(#ns0, 'BankInfo', #nsValue));
    
                //      <BankId>
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeBankInfo, 'BankId', subStr(mSKS_EFT_VendorPaym.WIntBankId, 0, 34), 0, false, #ns0, #nsValue);//SKS_VSTS_13073
    
                //      <Name>
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeBankInfo, 'Name', subStr(this.CharacterReplacement(mSKS_EFT_VendorPaym.WIntBankName), 0, 35), 0, false, #ns0, #nsValue);//SKS_VSTS_13073
    
                //      <PostAddr>
                this.node_PostAddr(nodeBankInfo, mSKS_EFT_VendorPaym.WIntBankAddr, mSKS_EFT_VendorPaym.WIntBankAddr2, '', '', '', mSKS_EFT_VendorPaym.WIntBankCountryRegionId);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>