<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_LB_ReadFileFixed</Name>
	<SourceCode>
		<Declaration><![CDATA[
//This is copied from SKS_BR_ReadFileFixed.  If you change one of these,
//consider changing the other.
public class SKS_LB_ReadFileFixed extends SKS_LB_ReadFile
{
    SKS_EB_FileHub fileHub;
    SKS_BF_BankIntType SKS_BF_BankIntType = SKS_BF_BankIntType::FileHubLocal;
    TextStreamIo fixedFile;
    int maxlinelengthneeded;
    str curline;
    List FieldFormatsList;
    SKS_EB_FilePath         lbpath;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initFileHub</Name>
				<Source><![CDATA[
    private SKS_EB_FileHub initFileHub(SKS_EB_FileHub _fileHub = fileHub)
    {
        fileHub = _fileHub;

        if(!fileHub)
        {
            SKS_EB_BankIntegOptWithNoLicense bankIntOption = SKS_EB_FileStorage::find().StorageOption_LB;

            if(bankIntOption == SKS_EB_BankIntegOptWithNoLicense::BankFabricEnumValue)
                SKS_BF_BankIntType = SKS_BF_BankIntType::BankFabric;

            fileHub = SKS_EB_FileHub::construct(SKS_BF_BankIntType);

            if (Fileformat.CodePage)
            {
                fileHub.parmEncoding(Fileformat.CodePage);
            }
        }
      
        return fileHub;
    }

]]></Source>
			</Method>
			<Method>
				<Name>closeFile</Name>
				<Source><![CDATA[
    public void closeFile()
    {
        fixedFile.finalize();
        if(!fileHub)
        {
            fileHub = this.initFileHub();
            this.initFileHub(fileHub);
        }
        fileHub.StreamClose();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileLineCount</Name>
				<Source><![CDATA[
    private int fileLineCount()
    {
        int linecnt = 0;
        Container line;
    
        this.openFile();
        while (fixedFile.status() == IO_status::Ok)
        {
            line = fixedFile.read();
    
            if (line)
            {
                linecnt++;
            }
        }
        return linecnt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>Get_Current_Line</Name>
				<Source><![CDATA[
    str Get_Current_Line()
    {
        ;
    
        return curline;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new()
    {
        curline = '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>openFile</Name>
				<Source><![CDATA[
    void openFile(boolean _Relocation = false)
    {
        if(!fileHub)
        {
            fileHub = this.initFileHub();
            this.initFileHub(fileHub);
        }
        fileHub.runFileInquire(Filename);
        if(!_Relocation)
        {
        if(!fileHub.attrFileExists())
        {
            // The file %1 does not exist.
            error(strfmt("@SYS62207", fileName));
            return;
        }
        }
        fileHub.runFileLoad(fileName);
        fileHub.StreamInit();

        if (Fileformat.CodePage)
        {
            fixedFile = TextStreamIo::constructForRead(fileHub.StreamGet(), Fileformat.CodePage);
        }
        else
        {
            fixedFile = TextStreamIo::constructForRead(fileHub.StreamGet());
        }
    
        if (fixedFile)
        {
            fixedFile.inFieldDelimiter('\r\n');
            fixedFile.inRecordDelimiter('\r\n');
        }
    
        if(Fileformat.LineEndingType == SKS_LB_LineEndingType::CRLF)
        {
            fixedFile.inRecordDelimiter('\r\n');
            fixedFile.outRecordDelimiter('\r\n');
        }
        else if(Fileformat.LineEndingType == SKS_LB_LineEndingType::LFCR)
        {
            fixedFile.inRecordDelimiter('\n\r');
            fixedFile.outRecordDelimiter('\n\r');
        }
        else if(Fileformat.LineEndingType == SKS_LB_LineEndingType::CR)
        {
            fixedFile.inRecordDelimiter('\r');
            fixedFile.outRecordDelimiter('\r');
        }
        else if(Fileformat.LineEndingType == SKS_LB_LineEndingType::LF)
        {
            fixedFile.inRecordDelimiter('\n');
            fixedFile.outRecordDelimiter('\n');
        }

        if (!fixedFile || fixedFile.status() != IO_Status::Ok)
        {
            //file could not be opened
            throw error (strfmt("@SYS19312", fileName));
        }
    
        if(!_Relocation)
        {
            // Decide the minimum line length that is needed to satisfy the format
            select maxof(FieldEnd) from FieldFormat where FieldFormat.FormatId == formatId;
            FieldFormatsList = new List(Types::Record);
            while select FieldFormat order by FieldStart asc where FieldFormat.FormatID == FileFormat.FormatID
            {
                FieldFormatsList.addEnd(FieldFormat);
            }
        }
        select firstOnly BankAcctFieldFormat where BankAcctFieldFormat.formatid == Fileformat.FormatID && BankAcctFieldFormat.FieldType == SKS_LB_FieldType::LBBankAccount;
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>Read_Line</Name>
				<Source><![CDATA[
    int Read_Line( int DesiredLine )
    {
        int FieldStart;
        int FieldEnd;
        int fieldPos;
        str lineStr;
        container line;
        int i;
        str value;
        Date TranDate;
        real TranAmount;
        str Fields[];
        str Raw_Fields[];
        int CurrentLine;
        container FieldFormats[];
        int Decimal_Places;
        ;
    
        if (fixedFile.status() == IO_status::Ok && DesiredLine > 0)
        {
            fieldPos = 1;
            line = fixedFile.read();
            CurrentLine = 1;
    
            [lineStr] = line;
            lineStr = strrem(lineStr, '\n\r');
    
            // If we are within the range of records we care about, then process the line of data
            //if(line && linecnt > OmitHeaderRecsNbr && linecnt < (num_lines_in_file - OmitTrailerRecsNbr + 1))
            // If there is a DesiredLine, then find that one.
            while (fixedFile.status() == IO_status::Ok && CurrentLine < DesiredLine )
            {
                line = fixedFile.read();
                CurrentLine = CurrentLine + 1;
            }
    
            if (fixedFile.status() != IO_status::Ok)
            {
                return 1;
            }
    
            [lineStr] = line;
            lineStr = strrem(lineStr, '\n\r');
            curline = lineStr;
    
    
                Fields[0] = '';
                Raw_Fields[0] = '';
                for (i = 1; i <= fieldFormatCount; i += 1)
                {
                    FieldType = conPeek(FieldFormats[i], 1);
                    FieldStart = conPeek(FieldFormats[i], 2);
                    FieldEnd = conPeek(FieldFormats[i], 3);
    
                    // Assuming 1 based values for Field End and Field Start.
                    value = substr(lineStr, FieldStart, FieldEnd - FieldStart + 1);
                    FieldType = conPeek(FieldFormats[i], 1);
    
                    switch(FieldType)
                    {
                        //Customers Bank Account from MICR line of Check
                        case SKS_LB_FieldType::BankAccountNumber:
                            Raw_Fields[i] = value;
                            Fields[i] = value;
                            break;
    
                        // Bank's Routing Transit Number for Customer's Bank Account (from MICR line)
                        case SKS_LB_FieldType::BankTransit_RoutingNumber:
                            Raw_Fields[i] =  value;
                            Fields[i] = value;
                            break;
    
                        case SKS_LB_FieldType::CheckAmount:
                            Raw_Fields[i] = value;
    
                            TranAmount = SKS_PP_StringFormats::CurrStr2CurrNum(value);
                            // Decimal places will be a Yes No item
                            // If its Yes then use the currency decimal places from the
                            // currency assocaited with this Bank Account
                            // If its NO, then use the value as is
    
                            // So if the the value is Yes, then there are decimal points in the file
                            // If NOT then we have to figure it out.
                            if (Decimal_Places == 1)
                            {
                                TranAmount = TranAmount / power(10, 2);
                                Fields[i] = num2str(TranAmount, 0, 2, 1, 3);
                            }
                            else
                            {
                                Fields[i] = value;
                            }
                            break;
    
                        case SKS_LB_FieldType::DateMM_DD_YY:
                            Raw_Fields[i] = value;
                            TranDate = str2date(value, 213);
                            Fields[i] = Date2str(TranDate, 213, DateDay::Digits2, DateSeparator::Slash,
                                DateMonth::Digits2, DateSeparator::Slash, DateYear::Digits2, DateFlags::None);
                            break;
    
                        case SKS_LB_FieldType::DateMM_DD_YYYY:
                            Raw_Fields[i] = value;
                            TranDate = str2date(value, 213);
                            Fields[i] = Date2str(TranDate, 213, DateDay::Digits2, DateSeparator::Slash,
                                DateMonth::Digits2, DateSeparator::Slash, DateYear::Digits4, DateFlags::None);
                            break;
    
                        case SKS_LB_FieldType::DateMMDDYY:
                            Raw_Fields[i] = value;
                            TranDate = str2date(value, 213);
                            Fields[i] =  Date2str(TranDate, 213, DateDay::Digits2, DateSeparator::None,
                                DateMonth::Digits2, DateSeparator::None, DateYear::Digits2, DateFlags::None);
                            break;
    
                        case SKS_LB_FieldType::DateMMDDYYYY:
                            Raw_Fields[i] =  value;
                            TranDate = str2date(value, 213);
                            Fields[i] = Date2str(TranDate, 213, DateDay::Digits2, DateSeparator::None,
                                DateMonth::Digits2, DateSeparator::None, DateYear::Digits4, DateFlags::None);
                            break;
    
                        // 321 format
                        case SKS_LB_FieldType::DateYY_MM_DD:
                            Raw_Fields[i] = value;
                            TranDate = str2date(value, 321);
                            Fields[i] = Date2str(TranDate, 321, DateDay::Digits2, DateSeparator::Slash,
                                DateMonth::Digits2, DateSeparator::Slash, DateYear::Digits2, DateFlags::None);
                            break;
    
                        case SKS_LB_FieldType::DateYYMMDD:
                            Raw_Fields[i] =  value;
                            TranDate = str2date(value, 321);
                            Fields[i] =  Date2str(TranDate, 321, DateDay::Digits2, DateSeparator::None,
                                DateMonth::Digits2, DateSeparator::None, DateYear::Digits2, DateFlags::None);
                            break;
    
                        case SKS_LB_FieldType::DateYYYY_MM_DD:
                            Raw_Fields[i] =  value;
                            TranDate = str2date(value, 321);
                            Fields[i] =  Date2str(TranDate, 321, DateDay::Digits2, DateSeparator::Slash,
                                DateMonth::Digits2, DateSeparator::Slash, DateYear::Digits4, DateFlags::None);
                            break;
    
                        case SKS_LB_FieldType::DateYYYYMMDD:
                            Raw_Fields[i] =  value;
                            TranDate = str2date(value, 321);
                            Fields[i] =  Date2str(TranDate, 321, DateDay::Digits2, DateSeparator::None,
                                DateMonth::Digits2, DateSeparator::None, DateYear::Digits4, DateFlags::None);
                            break;
    
                        // 123 form.....
                        case SKS_LB_FieldType::DateDD_MM_YY:
                            Raw_Fields[i] =  value;
                            TranDate = str2date(value, 123);
                            Fields[i] =  Date2str(TranDate, 123, DateDay::Digits2, DateSeparator::Slash,
                                DateMonth::Digits2, DateSeparator::Slash, DateYear::Digits2, DateFlags::None);
                            break;
    
                        case SKS_LB_FieldType::DateDD_MM_YYYY:
                            Raw_Fields[i] =  value;
                            TranDate = str2date(value, 123);
                            Fields[i] =  Date2str(TranDate, 123, DateDay::Digits2, DateSeparator::Slash,
                                DateMonth::Digits2, DateSeparator::Slash, DateYear::Digits4, DateFlags::None);
                            break;
    
                        case SKS_LB_FieldType::DateDDMMYY:
                            Raw_Fields[i] =  value;
                            TranDate = str2date(value, 123);
                            Fields[i] =  Date2str(TranDate, 123, DateDay::Digits2, DateSeparator::None,
                                DateMonth::Digits2, DateSeparator::None, DateYear::Digits2, DateFlags::None);
                            break;
    
                        case SKS_LB_FieldType::DateDDMMYYYY:
                            Raw_Fields[i] =  value;
                            TranDate = str2date(value, 123);
                            Fields[i] =  Date2str(TranDate, 123, DateDay::Digits2, DateSeparator::None,
                                DateMonth::Digits2, DateSeparator::None, DateYear::Digits4, DateFlags::None);
                            break;
    
                        case SKS_LB_FieldType::TxnDescription:
                            Raw_Fields[i] = value;
                            Fields[i] =  value;
                            break;
    
                        case SKS_LB_FieldType::CheckNumber:
                            Raw_Fields[i] =  value;
                            Fields[i] = value;
                            break;
    
                        case SKS_LB_FieldType::BatchNumber:
                            Raw_Fields[i] =  value;
                            Fields[i] = value;
                            break;
                    }
                    fieldPos++;
                }
    
        }// Correct number of fields in the line
        return 0;

    }

]]></Source>
			</Method>
			<Method>
				<Name>readFile</Name>
				<Source><![CDATA[
    TmpSKS_LB_Importing readFile()
    {
        int linecnt = 0;
        container line;
        str lineStr;
        str value;
        int lineCount = this.fileLineCount();
        ListEnumerator fieldFormatsListEnumerator;
        SKS_LB_FileFormatDet localSKS_LB_FileFormatDet;
        ;
    
        fieldFormatsListEnumerator = FieldFormatsList.getEnumerator();
        ImportCount = 0;
        this.closeFile();
        this.openFile();
        ttsbegin;
        while (fixedFile.status() == IO_status::Ok || (line != conNull() && fixedFile.status() == IO_Status::FileTooShort))
        {
            fieldFormatsListEnumerator.reset();
            line = fixedFile.read();
            linecnt++;
    
            if (line && linecnt > OmitHeaderRecsNbr && linecnt < (lineCount - OmitTrailerRecsNbr + 1))
            {
                [lineStr] = line;
                lineStr = strrem(lineStr, '\n\r');
    
                if(strlen(con2Str(line)) == 0) //skip blank lines
                {
                    continue;
                }

                while (fieldFormatsListEnumerator.moveNext())
                {
                    localSKS_LB_FileFormatDet = fieldFormatsListEnumerator.current();
                    value = substr(lineStr, localSKS_LB_FileFormatDet.FieldStart, localSKS_LB_FileFormatDet.FieldEnd - localSKS_LB_FileFormatDet.FieldStart + 1);
                    this.ReadOneField(value, localSKS_LB_FileFormatDet.FieldType);
                }
    
                importing.FileDate = FileDate;
                importing.FileLineNbrBegin = linecnt;
    
                if(this.ValidatePathAcctCombo(lbpath))
                {
                    ImportCount++;
                    importing.insert();
                    importing.Description = '';
                }
            }
        }
        ttscommit;
    
        return importing;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RetrieveBankAccountNumberFromFile</Name>
				<Source><![CDATA[
    Container RetrieveBankAccountNumberFromFile()
    {
        container   BankAcctCon;
        Container   line;
        str         AcctNum;
        str         lineStr;
        Boolean     Exit = false;
        while (fixedFile.status() == IO_status::Ok && !Exit)
        {
            line = fixedFile.read();
            if (strlen(con2Str(line)) == 0) //skip blank lines
            {
                continue;
            }
            [lineStr] = line;
            lineStr = strrem(lineStr, '\n\r');
            AcctNum = substr(lineStr, BankAcctFieldFormat.FieldStart, BankAcctFieldFormat.FieldEnd - BankAcctFieldFormat.FieldStart + 1);
            if(conFind(BankAcctCon,AcctNum) == 0)//Makes sure the account number is unique and not already in the container
            {
                BankAcctCon += AcctNum;
                Exit = !FileFormat.VerifyAcct ? true : false;
            }
        }
        return BankAcctCon;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>