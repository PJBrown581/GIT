<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_US_ACH</Name>
	<SourceCode>
		<Declaration><![CDATA[
// H
// P
//   EC1
//       V
//           A/S1    (Batch 5)
//                   (Batch 8)
//           A/S2    (Batch 5)
//                   (Batch 8)
//       P           (Batch 5)
//                   (Batch 8)
//   EC2
// B
// T
/// <summary>
/// SKS_EFT_Format_US_ACH extends SKS_EFT_Format
/// </summary>
class SKS_EFT_Format_US_ACH extends SKS_EFT_Format
{
    #define.FormatVersion('20230517')
    int mBatchCount; // Batch Count
    AmountMST mBatchCreditAmount; // Batch DR amount
    AmountMST mBatchDebitAmount; // Batch CR amount
    int64 mBatchHash; // Batch Hash Total
    int mBatchNumber; // Batch Number

    int mFileEntryCount; // File Entry Count
    AmountMST mFileCreditAmount; // File DR amount
    AmountMST mFileDebitAmount; // File CR amount
    int64 mFileHash; // File Hash Total

    SKS_EFT_FileDetail prevSKS_EFT_FileDetail;
    SKS_EFT_BankGateway mSKS_EFT_BankGateway;

    SKS_EFT_Addenda mSKS_EFT_Addenda;

    str mServiceCode;
    str mACHFileIdMod;
    str mCTXString;
    int mCTXAddenda;

    int mFileCreditCount;
    int mFileDebitCount;
    EffectiveDate firstEffectiveDate;
    str msetSourceOfInput;
    str msetACISCustNum;
    str msetFileId;
    str msetCustphone;

    #define.IAT('IAT')
    SKS_EFT_AddendaFormats mSKS_EFT_AddendaFormats;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>controlfilespecific</Name>
				<Source><![CDATA[
    protected void controlfilespecific(SysDictClass _obj, Object _classInstance)
    {
        _obj.callObject('setCreditTotal', _classInstance, mFileCreditAmount);
        _obj.callObject('setDebitTotal', _classInstance, mFileDebitAmount);
        _obj.callObject('setCustID', _classInstance, prevSKS_EFT_FileDetail.FileACHCompanyId);
        _obj.callObject('setCustPhone', _classInstance, msetCustphone); //FDD-10590
        _obj.callObject('setSourceOfInput', _classInstance, msetSourceOfInput); //FDD-10590
    
        if(mSKS_EFT_File.controlfileformatid == 'US-ACH-94')
        {
            _obj.callObject('setCustName', _classInstance, prevSKS_EFT_FileDetail.FileACHCompanyName);
            _obj.callObject('setCCName', _classInstance, mSKS_EFT_Bank.APContactName);
            _obj.callObject('setCCNumber', _classInstance, mSKS_EFT_Bank.APContactPhone);
            _obj.callObject('setSDate', _classInstance, firstEffectiveDate);
            _obj.callObject('setCreditCount', _classInstance, mFileCreditCount);
            _obj.callObject('setDeditCount', _classInstance, mFileDebitCount);
        }
        if(mSKS_EFT_File.ControlFileFormatId == 'US-ACH-PNC') //SKS_DevOps_20950
        {
            _obj.callObject('setACISCustNum', _classInstance, msetACISCustNum);
        }

        //SKS_DevOps_20799
        if(mSKS_EFT_File.controlfileformatid == 'US-ACH-SIGNBANK')
        {
            _obj.callObject('setSDate', _classInstance, firstEffectiveDate);
            _obj.callObject('setEntryCount', _classInstance, mFileEntryCount);
            _obj.callObject('setFileId', _classInstance, msetFileId);
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>EDI820_003010</Name>
				<Source><![CDATA[
    str EDI820_003010(SKS_EFT_FileDetail _sks_eft_FileDetail)
    {
        //BP Deviation Documented
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        str ret;
        int pmtCuryPrec;
        int invCuryPrec;
        str invAmt;
        ;
    
        pmtCuryPrec = SKS_EB_Currency::getCurrencyPrecision(_sks_eft_FileDetail.PaymentCurrencyCode);
        invCuryPrec = SKS_EB_Currency::getCurrencyPrecision(_sks_eft_FileDetail.InvoiceCurrencyCode);
    
        sb.Append('RMT');
        sb.Append('*');
        if(_sks_eft_FileDetail.InvoiceSettleAmountPmtCur > 0)
        {
            sb.Append('CM');
        }
        else
        {
            sb.Append('IV');
        }
        sb.Append('*');
        sb.Append(substr(_sks_eft_FileDetail.InvoiceNumber,1,30));
        sb.Append('*');
        sb.Append(num2str(this.getPositiveAmount(_sks_eft_FileDetail.InvoiceSettleAmountPmtCur),0,pmtCuryPrec,0,0));
        sb.Append('*');
    
        invAmt = num2str(this.getPositiveAmount(_sks_eft_FileDetail.InvoiceOrigAmountCur),0,invCuryPrec,0,0);
        invAmt = strRem(invAmt, '.');
        sb.Append(invAmt);
    
        sb.Append('*');
        sb.Append('0');
        sb.Append('*');
        sb.Append('0');
        sb.Append('*');
        sb.Append('0');
        sb.Append('*');
        sb.Append(num2str(this.getPositiveAmount(_sks_eft_FileDetail.InvoiceSettleAmountPmtCur),0,pmtCuryPrec,0,0));
        sb.Append('*');
        sb.Append('0');
        sb.Append('*');
        sb.Append(substr(this.CharacterReplacement(_sks_eft_FileDetail.InvoiceTransactionTxt),1,80));
    
        ret = sb.ToString();
        return substr(ret,1,79) + @'\';
    }

]]></Source>
			</Method>
			<Method>
				<Name>EDI820_003040</Name>
				<Source><![CDATA[
    str EDI820_003040(SKS_EFT_FileDetail _sks_eft_FileDetail)
    {
        //BP Deviation Documented
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        str ret;
        int pmtCuryPrec;
        ;
    
        pmtCuryPrec = SKS_EB_Currency::getCurrencyPrecision(_sks_eft_FileDetail.PaymentCurrencyCode);
    
        sb.Append('RMR');
        sb.Append('*');
        if(_sks_eft_FileDetail.InvoiceSettleAmountPmtCur > 0)
        {
            sb.Append('CM');
        }
        else
        {
            sb.Append('IV');
        }
        sb.Append('*');
        sb.Append(substr(_sks_eft_FileDetail.InvoiceNumber,1,30));
        sb.Append('*');
        sb.Append('*');
        sb.Append(num2str(this.getPositiveAmount(_sks_eft_FileDetail.InvoiceSettleAmountPmtCur),0,pmtCuryPrec,0,0));
    
        ret = sb.ToString();
        return substr(ret,1,79) + @'\';
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    protected void formatStructure()
    {
        boolean offSet;
        boolean ret;
        str groupKey;
        ;
    
        // Format header
        this.rec_One();

        firstEffectiveDate = mSKS_EFT_FileDetail.EffectiveDate;
    
        while(mSKS_EFT_FileDetail)
        {
            mSKS_EFT_BankGateway = SKS_EFT_BankGateway::find(mSKS_EFT_FileDetail.BankAccountId, mSKS_EFT_FileDetail.PaymMode, mSKS_EFT_FileDetail.DepCountryRegionId);
    
            mSKS_EFT_FileDetail_BankAccount = SKS_EFT_FileDetail_BankAccount::find(mSKS_EFT_FileDetail.RecId);          
            // Get SKS_EFT_FileFormatPaymSpec
            this.getSKS_EFT_FileFormatPaymSpec();

            // Get Tax/Child Support Addenda Information
            if(mSKS_EFT_FileFormatPaymSpec.AddendaSpec || mSKS_EFT_FileFormatPaymSpec.PaymSpec == 'CCD+' || mSKS_EFT_FileFormatPaymSpec.PaymSpec == 'PPD+') //FDD-10590
            {
                select msks_eft_FileDetail_AddendaHeader where msks_eft_FileDetail_AddendaHeader.RefRecId == mSKS_EFT_FileDetail.RecId; //FDD-10590
                mSKS_EFT_Addenda = new SKS_EFT_Addenda();
                mSKS_EFT_Addenda.setAddendaHeaderFormats(msks_eft_FileDetail_AddendaHeader); //FDD-10590
                mSKS_EFT_Addenda.setFileFormatPaymSpec(mSKS_EFT_FileFormatPaymSpec);
                mSKS_EFT_Addenda.setFile(mSKS_EFT_File);
                mSKS_EFT_Addenda.setFileDetail(mSKS_EFT_FileDetail);
            }
    
            if(groupKey != mSKS_EFT_FileDetail.PaymMode + mSKS_EFT_FileDetail.PaymSpec + mSKS_EFT_FileDetail.BankAccountId +
                SKS_PP_StringFormats::strDateMMDDYY(mSKS_EFT_FileDetail.EffectiveDate,DateSeparator::Hyphen) + enum2str(mSKS_EFT_FileDetail.RecordType))
            {
                mBatchHash = 0;
                mBatchCreditAmount = 0;
                mBatchDebitAmount = 0;
                mBatchCount = 0;
    
                this.rec_Five();
            }
            groupKey = mSKS_EFT_FileDetail.PaymMode + mSKS_EFT_FileDetail.PaymSpec + mSKS_EFT_FileDetail.BankAccountId +
                SKS_PP_StringFormats::strDateMMDDYY(mSKS_EFT_FileDetail.EffectiveDate,DateSeparator::Hyphen) + enum2str(mSKS_EFT_FileDetail.RecordType);
    
            if(mSKS_EFT_FileDetail.RecordType == SKS_EFT_RecordType::PreNote && mSKS_EFT_FileDetail.AccountNum == '')
            {
                offSet = true;
            }
            else
            {
                offSet = false;
            }
    
            ret = this.rec_Six(offSet, mSKS_EFT_FileDetail);
            if(!ret)
            {
                return;
            }
    
            // Save values to use in group trailer
            buf2buf(mSKS_EFT_FileDetail, prevSKS_EFT_FileDetail);
            
            msetSourceOfInput   = SKS_EFT_Format::getCodelookupvalue('SourceOfInput', mSKS_EFT_FileDetail.RecId);
            msetACISCustNum     = SKS_EFT_Format::getCodelookupvalue('ACISCustNum', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank);     //SKS#DevOps:20950
            msetFileId = SKS_EFT_Format::getCodelookupvalue('FileId', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank);
            msetCustphone = SKS_EFT_Format::getCodelookupvalue('CustPhone', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank);

            next mSKS_EFT_FileDetail;
    
            // Group trailer
            if((groupKey != mSKS_EFT_FileDetail.PaymMode + mSKS_EFT_FileDetail.PaymSpec + mSKS_EFT_FileDetail.BankAccountId +
                SKS_PP_StringFormats::strDateMMDDYY(mSKS_EFT_FileDetail.EffectiveDate,DateSeparator::Hyphen) + enum2str(mSKS_EFT_FileDetail.RecordType)) && mBatchCount > 0)
            {
                this.rec_Eight(prevSKS_EFT_FileDetail);
            }
        }
    
        // Format trailer
        this.rec_Nine();
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Eight</Name>
				<Source><![CDATA[
    // Record Eight - output at end of a batch
    // also may output an offset Six Record
    void rec_Eight(SKS_EFT_FileDetail _sks_eft_FileDetail)
    {
        //BP Deviation Documented
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        SKS_EFT_FileDetail locSKS_EFT_FileDetail;
        ;
    
        mFileRecCount++;
    
        sb.Append('8');
    
        if((mSKS_EFT_File.EFTFileType == SKS_EFT_Module::AP && mSKS_EFT_FileDetail_BankAccount.APACHInclDR) || 
           (mSKS_EFT_File.EFTFileType == SKS_EFT_Module::AR && mSKS_EFT_FileDetail_BankAccount.ARACHInclCR) || mSKS_EFT_File.EFTFileType == SKS_EFT_Module::CNP) //FDD-10590
        {
            select maxOf(paymentreference) from locSKS_EFT_FileDetail
                where locSKS_EFT_FileDetail.FileRecId == _sks_eft_FileDetail.FileRecId
                && locSKS_EFT_FileDetail.PaymMode == _sks_eft_FileDetail.PaymMode
                && locSKS_EFT_FileDetail.PaymSpec == _sks_eft_FileDetail.PaymSpec
                && locSKS_EFT_FileDetail.BankAccountId == _SKS_EFT_FileDetail.BankAccountId;
            _sks_eft_FileDetail.PaymentReference = int2str(str2int(locSKS_EFT_FileDetail.paymentReference) + 1);
            this.rec_Six(true, _sks_eft_FileDetail);
        }
    
        sb.Append(mServiceCode); // Determined in 5 record
    
        mFileDebitAmount += mBatchDebitAmount;
        mFileCreditAmount += mBatchCreditAmount;
    
        sb.Append(SKS_PP_StringFormats::strFill(6, num2str(mBatchCount,0,0,0,0), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        sb.Append(SKS_PP_StringFormats::strFill(10, int642str(mBatchHash), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        sb.Append(SKS_PP_StringFormats::strMoney(mBatchDebitAmount, 12));
        sb.Append(SKS_PP_StringFormats::strMoney(mBatchCreditAmount * -1, 12));
        sb.Append(SKS_PP_StringFormats::strFill(10, _sks_eft_FileDetail.FileACHCompanyId, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        sb.Append(SKS_PP_StringFormats::strFill(25, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        sb.Append(SKS_PP_StringFormats::strFill(8, this.CharacterReplacement(_sks_eft_FileDetail.BankOrigDFI), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        sb.Append(SKS_PP_StringFormats::strFill(7, num2str(mBatchNumber,0,0,0,0), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
    
        mFileHash = SKS_EFT_Format_US_ACH::hashTotal(mFileHash, mBatchHash);
    
        this.fileWrite(sb.ToString());
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Five</Name>
				<Source><![CDATA[
    void rec_Five()
    {
        //BP Deviation Documented
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        //BankAccountTable bankAccountTable;
        SKS_EFT_FileDetail sks_eft_FileDetailCR;
        SKS_EFT_FileDetail sks_eft_FileDetailDR;
        ;
    
        mBatchNumber++;
        mFileRecCount++;
    
        //   1
        sb.Append('5');
        if(mModule == SKS_EFT_Module::AP)
        {
            if(mSKS_EFT_FileDetail_BankAccount.APACHInclDR) //AP //FDD-10590
            {
                mServiceCode = '200'; // Mixed credits/debits
            }
            else
            {
                //Check for Debits (Customer payments or Vendor credits)
                select firstonly InvoiceSettleAmountPmtCur from sks_eft_FileDetailDR where
                    sks_eft_FileDetailDR.InvoiceSettleAmountPmtCur > 0
                    && sks_eft_FileDetailDR.RecordSummary != SKS_EFT_RecordSummary::NonSummary
                    && sks_eft_FileDetailDR.BankAccountId == mSKS_EFT_FileDetail.BankAccountId
                    && sks_eft_FileDetailDR.PaymMode == mSKS_EFT_FileDetail.PaymMode
                    && sks_eft_FileDetailDR.PaymSpec == mSKS_EFT_FileDetail.PaymSpec
                    && sks_eft_FileDetailDR.FileRecId == mSKS_EFT_FileDetail.FileRecId;
    
                //Check for Credits (Vendor payments or Customer credits)
                select firstonly InvoiceSettleAmountPmtCur from sks_eft_FileDetailCR where
                    sks_eft_FileDetailCR.InvoiceSettleAmountPmtCur <= 0
                    && sks_eft_FileDetailCR.RecordSummary != SKS_EFT_RecordSummary::NonSummary
                    && sks_eft_FileDetailCR.BankAccountId == mSKS_EFT_FileDetail.BankAccountId
                    && sks_eft_FileDetailCR.PaymMode == mSKS_EFT_FileDetail.PaymMode
                    && sks_eft_FileDetailCR.PaymSpec == mSKS_EFT_FileDetail.PaymSpec
                    && sks_eft_FileDetailCR.FileRecId == mSKS_EFT_FileDetail.FileRecId;
    
                if(sks_eft_FileDetailCR && !sks_eft_FileDetailDr)
                {
                    mServiceCode = '220'; // Credits only
                }
                else if(!sks_eft_FileDetailCR && sks_eft_FileDetailDr)
                {
                    mServiceCode = '225'; // Debits only
                }
                else
                {
                    mServiceCode = '200'; // Mixed credits/debits
                }
            }
        }
        else
        {
            if(mSKS_EFT_FileDetail_BankAccount.ARACHInclCR) //AR //FDD-10590
            {
                mServiceCode = '200'; // Mixed credits/debits
            }
            else
            {
    
                //Check for Credits
                select firstonly InvoiceSettleAmountPmtCur from sks_eft_FileDetailDR where
                    sks_eft_FileDetailDR.InvoiceSettleAmountPmtCur <= 0
                    && sks_eft_FileDetailDR.RecordSummary != SKS_EFT_RecordSummary::NonSummary
                    && sks_eft_FileDetailDR.BankAccountId == mSKS_EFT_FileDetail.BankAccountId
                    && sks_eft_FileDetailDR.PaymMode == mSKS_EFT_FileDetail.PaymMode
                    && sks_eft_FileDetailDR.PaymSpec == mSKS_EFT_FileDetail.PaymSpec
                    && sks_eft_FileDetailDR.FileRecId == mSKS_EFT_FileDetail.FileRecId;
    
                //Check for Debits
                select firstonly InvoiceSettleAmountPmtCur from sks_eft_FileDetailCR where
                    sks_eft_FileDetailCR.InvoiceSettleAmountPmtCur > 0
                    && sks_eft_FileDetailCR.RecordSummary != SKS_EFT_RecordSummary::NonSummary
                    && sks_eft_FileDetailCR.BankAccountId == mSKS_EFT_FileDetail.BankAccountId
                    && sks_eft_FileDetailCR.PaymMode == mSKS_EFT_FileDetail.PaymMode
                    && sks_eft_FileDetailCR.PaymSpec == mSKS_EFT_FileDetail.PaymSpec
                    && sks_eft_FileDetailCR.FileRecId == mSKS_EFT_FileDetail.FileRecId;
    
    
                if(sks_eft_FileDetailDR && !sks_eft_FileDetailCR)
                {
                    mServiceCode = '220'; // Debits only
                }
                else if(!sks_eft_FileDetailDR && sks_eft_FileDetailCr)
                {
                    mServiceCode = '225'; // Credits only
                }
                else
                {
                    mServiceCode = '200'; // Mixed credits/debits
                }
            }
        }
    
        // 2- 4
        sb.Append(mServiceCode);
    
        // IAT
        if(substr(mSKS_EFT_FileDetail.PaymSpec,1,3) == #IAT)
        {
            // 05-20 IAT Indicator " "
            sb.Append(SKS_PP_StringFormats::strFill(16,strupr(this.CharacterReplacement(mSKS_EFT_FileDetail.FileACHCompanyName)), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
            // 21-22 Foreign Exchange Indicator FF-fixed-fixed, FV-fixed-var (orig fixed), VF-var-fixed (recv fixed)
            switch(mSKS_EFT_BankGateway.FXIndicator)
            {
                case SKS_EFT_ForeignExchInd::FixedToFixed:
                    sb.Append('FF');
                    break;
                case SKS_EFT_ForeignExchInd::FixedToVariable:
                    sb.Append('FV');
                    break;
                case SKS_EFT_ForeignExchInd::VariableToFixed:
                    sb.Append('VF');
                    break;
            }
    
            // 23-23 Foreign Exchange Ref Indicator - 1-FX rate, 2-FX refnbr, 3-space
            sb.Append('3');
    
            // 24-38 Foreign Exchange Reference - Rate (if FF, then blank)
            sb.Append(SKS_PP_StringFormats::strFill(15, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
            // 39-40 IS Destination Country Code
            sb.Append(SKS_PP_StringFormats::strFill(2, this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_BenBank.BenBankCountryRegionId), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));//FDD-10590
    
            // 41-50 Originator Identification (TIN number) (Wire Plus/IAT tab, ID)
            sb.Append(SKS_PP_StringFormats::strFill(10, mSKS_EFT_FileDetail_BankAccount.WOrdPartyId, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right)); //FDD-10590
    
            // 51-53 Standard Entry Class Code
            sb.Append(SKS_PP_StringFormats::strFill(3, mSKS_EFT_FileFormatPaymSpec.TransactionCode, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
            // 54-63 Company Entry Description
            sb.Append(SKS_PP_StringFormats::strFill(10, mSKS_EFT_FileFormatPaymSpec.PaymSpecName, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
            // 64-66 ISO Originating Currency Code
            //select CurrencyCode from bankAccountTable where bankAccountTable.AccountID == mSKS_EFT_FileDetail.BankAccountId; //FDD-10590
            sb.Append(SKS_PP_StringFormats::strFill(3, mSKS_EFT_FileDetail.CurrencyCode, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right)); //FDD-10590
    
            // 67-69 ISO Destination Currency Code
            if (mSKS_EFT_BankGateway.FXIndicator == SKS_EFT_ForeignExchInd::FixedToVariable)
            {
                sb.Append(mSKS_EFT_BankGateway.DestCntryCurrenceyCode);
            }
            else
            {
                sb.Append(mSKS_EFT_FileDetail.PaymentCurrencyCode);
            }
        }
        // All Others
        else
        {
            // 5-20
            if(msks_eft_FileDetail_AddendaHeader.CompanyName != '')
            {
                sb.Append(SKS_PP_StringFormats::strFill(strLen(mSKS_EFT_FileFormat.CompanyNameMask), strupr(this.CharacterReplacement(msks_eft_FileDetail_AddendaHeader.CompanyName)), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
            }
            else
            {
                sb.Append(SKS_PP_StringFormats::strFill(strLen(mSKS_EFT_FileFormat.CompanyNameMask), strupr(this.CharacterReplacement(mSKS_EFT_FileDetail.FileACHCompanyName)), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
            }
            //21-40
            if(msks_eft_FileDetail_AddendaHeader.CompanyDiscretionaryData != '')
            {
                sb.Append(SKS_PP_StringFormats::strFill(20, strupr(this.CharacterReplacement(msks_eft_FileDetail_AddendaHeader.CompanyDiscretionaryData)), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
            }
            else
            {
                sb.Append(SKS_PP_StringFormats::strFill(20, strupr(this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('CompanyDiscretionaryData', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank))), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right)); //FDD-10590
            }
            //41-50
            if(msks_eft_FileDetail_AddendaHeader.CompanyID != '')
            {
                sb.Append(SKS_PP_StringFormats::strFill(strLen(mSKS_EFT_FileFormat.CompanyIdMask), strupr(this.CharacterReplacement(msks_eft_FileDetail_AddendaHeader.CompanyID)), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
            }
            else
            {
                sb.Append(SKS_PP_StringFormats::strFill(strLen(mSKS_EFT_FileFormat.CompanyIdMask), strupr(mSKS_EFT_FileDetail.FileACHCompanyId), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
            }
            //51-53
            sb.Append(substr(mSKS_EFT_FileFormatPaymSpec.TransactionCode,1,3));
    
            //54-63
            if(msks_eft_FileDetail_AddendaHeader.CompanyDescription != '')
            {
                sb.Append(SKS_PP_StringFormats::strFill(10, strupr(this.CharacterReplacement(msks_eft_FileDetail_AddendaHeader.CompanyDescription)), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
            }
            else
            {
                if(mModule == SKS_EFT_Module::AP)
                {
                    sb.Append(SKS_PP_StringFormats::strFill(10, strupr(mSKS_EFT_FileFormatPaymSpec.PaymSpecName), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
                }
                else
                {
                    sb.Append(SKS_PP_StringFormats::strFill(10, strupr(mSKS_EFT_FileFormatPaymSpec.ARPaymSpecName), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
                }
    
            }
            //64-69
            sb.Append(busDate); //this is already stored in the DB from rec_One
        }
    
        // 70-75 Effective Entry Date
        sb.Append(SKS_PP_StringFormats::strDateYYMMDD( mSKS_EFT_FileDetail.EffectiveDate));
        if(firstEffectiveDate == dateNull())
        {
            firstEffectiveDate = mSKS_EFT_FileDetail.EffectiveDate;
        }
        // 76-78 Settlement Date
        sb.Append(SKS_PP_StringFormats::strFill(3, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        // 79-79 Originator Status Code
        sb.Append('1');
        // 80-87 GO Originating DFI Identification
        sb.Append(SKS_PP_StringFormats::strFill(8, this.CharacterReplacement(mSKS_EFT_FileDetail.BankOrigDFI), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        // 88-94 Batch Number
        sb.Append(SKS_PP_StringFormats::strFill(7, num2str(mBatchNumber,0,0,0,0), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
    
        this.fileWrite(sb.ToString());
    
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_IAT_710</Name>
				<Source><![CDATA[
    void rec_IAT_710(SKS_EFT_FileDetail _sks_eft_FileDetail, str _entryDetailSeqNbr, AmountMST _amt)
    {
        //BP Deviation Documented
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        ;
        
        if(_sks_eft_FileDetail.PaymSpec == 'IATB')
        {
            // 1-3 Record Type/Addenda Type
            sb.Append('710');
    
            // 4-6 Transaction Type Code
            sb.Append('BUS');
    
            // 7-24 Foreign Payment Amount
            if(mSKS_EFT_BankGateway.FXIndicator == SKS_EFT_ForeignExchInd::FixedToVariable)
            {
                sb.Append(SKS_PP_StringFormats::strFill(18, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
            }
            else
            {
                sb.Append(SKS_PP_StringFormats::strMoney(this.getPositiveAmount(_amt), 18));
            }
    
            //25-46 Foreign Trace Number
            sb.Append(SKS_PP_StringFormats::strFill(22, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
            // 47-81 Receiving Company/Indiv Name
            sb.Append(SKS_PP_StringFormats::strFill(35, this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneName), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right)); //FDD-10590
    
            // 82-87 Reserved
            sb.Append(SKS_PP_StringFormats::strFill(6, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
        else
        {
            sb.Append(SKS_PP_StringFormats::strFill(87, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
    
        this.rec_IAT_write(sb.ToString(), _entryDetailSeqNbr);
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_IAT_711</Name>
				<Source><![CDATA[
    void rec_IAT_711(SKS_EFT_FileDetail _sks_eft_FileDetail, str _entryDetailSeqNbr)
    {
        //BP Deviation Documented
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        ;
    
        // 1-3 Record Type/Addenda Type
        sb.Append('711');
    
        // 4-38 Originator Name
        sb.Append(SKS_PP_StringFormats::strFill(35, this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyName), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right)); //FDD-10590
    
        // 39-73 Originator Street Address
        sb.Append(SKS_PP_StringFormats::strFill(35, this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right)); //FDD-10590
    
        // 74-87 Reserved
        sb.Append(SKS_PP_StringFormats::strFill(14, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        this.rec_IAT_write(sb.ToString(), _entryDetailSeqNbr);
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_IAT_712</Name>
				<Source><![CDATA[
    void rec_IAT_712(SKS_EFT_FileDetail _sks_eft_FileDetail, str _entryDetailSeqNbr)
    {
        //BP Deviation Documented
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        ;
    
        // 1-3 Record Type/Addenda Type
        sb.Append('712');
    
        // 4-38 Originator City & State/Prov
        if(mSKS_EFT_FileDetail_BankAccount.WOrdPartyState == '') //FDD-10590
        {
            sb.Append(SKS_PP_StringFormats::strFill(35, this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyCity) + @'\', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));//FDD-10590
        }
        else
        {
            sb.Append(SKS_PP_StringFormats::strFill(35, this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyCity) + '*' + this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyState) + @'\', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));//FDD-10590
        }
    
        // 39-73 Originator Country & Postalcd
        if(mSKS_EFT_FileDetail_BankAccount.WOrdPartyZipCode == '') //FDD-10590
        {
            sb.Append(SKS_PP_StringFormats::strFill(35,this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_BankAccount.WOrdPartyCountryRegionId) + @'\', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right)); //FDD-10590
        }
        else
        {
            sb.Append(SKS_PP_StringFormats::strFill(35, this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_BankAccount.WOrdPartyCountryRegionId) + '*' + mSKS_EFT_FileDetail_BankAccount.WOrdPartyZipCode + @'\', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right)); //FDD-10590
        }
    
        // 74-87 Reserved
        sb.Append(SKS_PP_StringFormats::strFill(14, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        this.rec_IAT_write(sb.ToString(), _entryDetailSeqNbr);
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_IAT_713</Name>
				<Source><![CDATA[
    void rec_IAT_713(SKS_EFT_FileDetail _sks_eft_FileDetail, str _entryDetailSeqNbr)
    {
        str value;
        //BP Deviation Documented
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        ;
    
        // 1-3 Record Type/Addenda Type
        sb.Append('713');
    
        // 4-38 Originating DFI Name
        sb.Append(SKS_PP_StringFormats::strFill(35, this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.ACHOrigDFIName), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        // 39-40 ODFI Number Qualifier
        sb.Append('01');
    
        // 41-74 ODFI ID
        value = SKS_EFT_Format::getCodelookupvalue('IAT713DFIId', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank);
        if(value) //FDD-10590
        {
            sb.Append(SKS_PP_StringFormats::strFill(34, this.CharacterReplacement(value), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right)); //FDD-10590
        }
        else
        {
            sb.Append(SKS_PP_StringFormats::strFill(34, this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.ACHOrigDFI), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right)); //FDD-10590
        }
    
        // 75-77 ODFI Brank Country Code
        sb.Append(SKS_PP_StringFormats::strFill(3, this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_BankAccount.WOrdPartyCountryRegionId), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right)); //FDD-10590
    
        // 78-87 Reserved
        sb.Append(SKS_PP_StringFormats::strFill(10, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        this.rec_IAT_write(sb.ToString(), _entryDetailSeqNbr);
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_IAT_714</Name>
				<Source><![CDATA[
    void rec_IAT_714(SKS_EFT_FileDetail _sks_eft_FileDetail, str _entryDetailSeqNbr)
    {
        //BP Deviation Documented
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        ;
    
        // 1-3 Record Type/Addenda Type
        sb.Append('714');
    
        // 4-38 Receiving DFI Name
        sb.Append(SKS_PP_StringFormats::strFill(35, this.CharacterReplacement(mSKS_EFT_FileDetail_BenBank.BenBankName), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right)); //FDD-10590
    
        // 39-40 RDFI Number Qualifier
        //sb.Append(SKS_PP_StringFormats::strFill(2, mSKS_EFT_VendorPaym.WBenBankQualifier, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        // 39-40 RDFI Number Qualifier AND 41-74 RDFI ID
        if(_sks_eft_FileDetail.DepBankIBAN != '') // IBAN
        {
            sb.Append(SKS_PP_StringFormats::strFill(2, '03', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
            sb.Append(SKS_PP_StringFormats::strFill(34, _sks_eft_FileDetail.DepBankIBAN, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
        else if(_sks_eft_FileDetail.DepSwiftNo != '') // SWIFT
        {
            sb.Append(SKS_PP_StringFormats::strFill(2, '02', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
            sb.Append(SKS_PP_StringFormats::strFill(34, _sks_eft_FileDetail.DepSwiftNo, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
        else // ABA
        {
            sb.Append(SKS_PP_StringFormats::strFill(2, '01', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
            sb.Append(SKS_PP_StringFormats::strFill(34, _sks_eft_FileDetail.DepBankTransit, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
        // 75-77 RDFI Branch Country Code
        sb.Append(SKS_PP_StringFormats::strFill(3, this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_BenBank.BenBankCountryRegionId), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right)); //FDD-10590
    
        // 78-87 Reserved
        sb.Append(SKS_PP_StringFormats::strFill(10, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        this.rec_IAT_write(sb.ToString(), _entryDetailSeqNbr);
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_IAT_715</Name>
				<Source><![CDATA[
    void rec_IAT_715(SKS_EFT_FileDetail _sks_eft_FileDetail, str _entryDetailSeqNbr)
    {
        //BP Deviation Documented
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        ;
    
        // 1-3 Record Type/Addenda Type
        sb.Append('715');
    
        // 4-18 Receiver ID Number
        sb.Append(SKS_PP_StringFormats::strFill(15, this.CharacterReplacement(_sks_eft_FileDetail.AccountNum), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        // 19-53 Receiver Street Address
        sb.Append(SKS_PP_StringFormats::strFill(35, this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneAddr), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right)); //FDD-10590
    
        // 54-87 Reserved
        sb.Append(SKS_PP_StringFormats::strFill(34, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        this.rec_IAT_write(sb.ToString(), _entryDetailSeqNbr);
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_IAT_716</Name>
				<Source><![CDATA[
    void rec_IAT_716(SKS_EFT_FileDetail _sks_eft_FileDetail, str _entryDetailSeqNbr)
    {
        //BP Deviation Documented
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        ;
    
        // 1-3 Record Type/Addenda Type
        sb.Append('716');
    
        // 4-38 Receiver City & State
        if(mSKS_EFT_FileDetail_VendAddress.BeneState == '') //FDD-10590
        {
            sb.Append(SKS_PP_StringFormats::strFill(35, this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneCity) + @'\', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right)); //FDD-10590
        }
        else
        {
            sb.Append(SKS_PP_StringFormats::strFill(35, this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneCity) + '*' + this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneState) + @'\', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right)); //FDD-10590
        }
    
        // 39-73 Receiver Country & Postalcode
        if(mSKS_EFT_FileDetail_VendAddress.BeneZipPostal == '') //FDD-10590
        {
            sb.Append(SKS_PP_StringFormats::strFill(35, this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_VendAddress.BeneCountryRegionId) + @'\', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right)); //FDD-10590
        }
        else
        {
            sb.Append(SKS_PP_StringFormats::strFill(35, this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_VendAddress.BeneCountryRegionId) + '*' + mSKS_EFT_FileDetail_VendAddress.BeneZipPostal + @'\', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right)); //FDD-10590
        }
    
        // 74-87 Reserved
        sb.Append(SKS_PP_StringFormats::strFill(14, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        this.rec_IAT_write(sb.ToString(), _entryDetailSeqNbr);
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_IAT_717</Name>
				<Source><![CDATA[
    void rec_IAT_717(SKS_EFT_FileDetail _sks_eft_FileDetail, str _entryDetailSeqNbr)
    {
        //BP Deviation Documented
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        str addenda;
        ;
    
        // 1-3 Record Type/Addenda Type
        sb.Append('717');
    
        // 4-83 Segment of 820 txn
        addenda = this.EDI820_003040(_sks_eft_FileDetail);
        sb.Append(SKS_PP_StringFormats::strFill(80, addenda, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // Addenda Sequence Number 84-87
        sb.Append('0001');
    
        this.rec_IAT_write(sb.ToString(), _entryDetailSeqNbr);
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_IAT_718_A</Name>
				<Source><![CDATA[
    void rec_IAT_718_A(SKS_EFT_FileDetail _sks_eft_FileDetail, str _entryDetailSeqNbr)
    {
        //BP Deviation Documented
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        str intrBankQual;
        ;
    
        // 1-3 Record Type/Addenda Type
        sb.Append('718');
    
        // 4-38 Intermediary Bank Name
        sb.Append(SKS_PP_StringFormats::strFill(35, this.CharacterReplacement(mSKS_EFT_FileDetail_Intermediary.IntBankName), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right)); //FDD-10590
    
        // 39-40 Intermediary Bank Number Qualifier
        intrBankQual = SKS_EFT_Format::getCodelookupvalue('IntrBankQual', mSKS_EFT_FileDetail.RecId);
        sb.Append(SKS_PP_StringFormats::strFill(2, this.CharacterReplacement(intrBankQual), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right)); //FDD-10590
    
        // 41-74 Intermediary Bank ID
        if(intrBankQual == 'SWIFT-BIC') // BIC-SWIFT //FDD-10590
        {
            sb.Append(SKS_PP_StringFormats::strFill(34, mSKS_EFT_FileDetail_Intermediary.IntBankSwift, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right)); //FDD-10590
        }
        else if(intrBankQual == 'IBAN') // IBAN //FDD-10590
        {
            sb.Append(SKS_PP_StringFormats::strFill(34, mSKS_EFT_FileDetail_Intermediary.IntBankSwift + mSKS_EFT_FileDetail_Intermediary.IntBankAcct, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right)); //FDD-10590
        }
        else // ABA
        {
            sb.Append(SKS_PP_StringFormats::strFill(34, mSKS_EFT_FileDetail_Intermediary.IntBankId, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right)); //FDD-10590
        }
    
        // 75-77 Intermediary Bank Branch Country Code
        sb.Append(SKS_PP_StringFormats::strFill(3, this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_Intermediary.IntBankCountryRegionId), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right)); //FDD-10590
    
        // 78-87 Reserved
        sb.Append(SKS_PP_StringFormats::strFill(10, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        this.rec_IAT_write(sb.ToString(), _entryDetailSeqNbr);
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_IAT_718_B</Name>
				<Source><![CDATA[
    void rec_IAT_718_B(SKS_EFT_FileDetail _sks_eft_FileDetail, str _entryDetailSeqNbr)
    {
        //BP Deviation Documented
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        ;
    
        // 1-3 Record Type/Addenda Type
        sb.Append('718');
    
        // 4-38 Credit Party Bank Name
        sb.Append(SKS_PP_StringFormats::strFill(35, this.CharacterReplacement(mSKS_EFT_FileDetail_CreditParty.CrePartyBankName), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        // 39-40 Credit Party Bank Number Qualifier
        // 41-74 Credit Party Bank ID
        if(mSKS_EFT_FileDetail_CreditParty.CrePartyBankId != '')
        {
            sb.Append('01');
            sb.Append(SKS_PP_StringFormats::strFill(34, mSKS_EFT_FileDetail_CreditParty.CrePartyBankId, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
        else if(mSKS_EFT_FileDetail_CreditParty.CrePartySwift != '' && mSKS_EFT_FileDetail_CreditParty.CrePartyAcct == '')
        {
            sb.Append('02');
            sb.Append(SKS_PP_StringFormats::strFill(34, mSKS_EFT_FileDetail_CreditParty.CrePartySwift, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
        else if(mSKS_EFT_FileDetail_CreditParty.CrePartySwift != '' && mSKS_EFT_FileDetail_CreditParty.CrePartyAcct != '')
        {
            sb.Append('03');
            sb.Append(SKS_PP_StringFormats::strFill(34, mSKS_EFT_FileDetail_CreditParty.CrePartySwift + mSKS_EFT_FileDetail_CreditParty.CrePartyAcct, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
        else
        {
            sb.Append(SKS_PP_StringFormats::strFill(2, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
            sb.Append(SKS_PP_StringFormats::strFill(34, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
    
        // 75-77 Intermediary Bank Branch Country Code
        sb.Append(SKS_PP_StringFormats::strFill(3, this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_CreditParty.CrePartyCountryRegionId), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        // 78-87 Reserved
        sb.Append(SKS_PP_StringFormats::strFill(10, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        this.rec_IAT_write(sb.ToString(), _entryDetailSeqNbr);
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_IAT_write</Name>
				<Source><![CDATA[
    void rec_IAT_write(str _sevenRec, str _entryDetailSeqNbr)
    {
        ;
        this.fileWrite(strUpr(_sevenRec) + _entryDetailSeqNbr);
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Nine</Name>
				<Source><![CDATA[
    void rec_Nine()
    {
        //BP Deviation Documented
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        int blockCount;
        ;
        // File control - file record count includes "9" record
        mFileRecCount++;
    
        sb.Append('9');
    
        // Record count/block count - totals records/10 rounded up
        if((mFileRecCount/10) == real2int(mFileRecCount/10))
        {
            blockCount = real2int(mFileRecCount/10);
        }
        else
        {
            blockCount = real2int(mFileRecCount/10) + 1;
        }
    
        sb.Append(SKS_PP_StringFormats::strFill(6, num2str(mBatchNumber,0,0,0,0), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        sb.Append(SKS_PP_StringFormats::strFill(6, num2str(blockCount,0,0,0,0), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        sb.Append(SKS_PP_StringFormats::strFill(8, num2str(mFileEntryCount,0,0,0,0), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        sb.Append(SKS_PP_StringFormats::strFill(10, int642str(mFileHash), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        sb.Append(SKS_PP_StringFormats::strMoney(mFileDebitAmount, 12));
        sb.Append(SKS_PP_StringFormats::strMoney(mFileCreditAmount * -1, 12));
        sb.Append(SKS_PP_StringFormats::strFill(39, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        this.fileWrite(sb.ToString());
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_One</Name>
				<Source><![CDATA[
    protected void rec_One()
    {
        //BP Deviation Documented
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        ;
    
        mFileRecCount++;
    
        sb.Append('1');
        sb.Append('01');
        sb.Append(SKS_PP_StringFormats::strFill(strLen(mSKS_EFT_FileFormat.ImmDestMask), this.CharacterReplacement(mSKS_EFT_FileDetail.FileACHImmDest), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left));
        sb.Append(SKS_PP_StringFormats::strFill(strLen(mSKS_EFT_FileFormat.ImmOriginMask), this.CharacterReplacement(mSKS_EFT_FileDetail.FileACHImmOrigin), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left));
        sb.Append(busDate);
        this.addFieldElement(gXmlNodeHeaderFieldValues, 'busDate', busDate, mSKS_EFT_File.RecId);
        sb.Append(busTime);
        this.addFieldElement(gXmlNodeHeaderFieldValues, 'busTime', busTime, mSKS_EFT_File.RecId);
    
        if((mSKS_EFT_File.EFTFileType == SKS_EFT_Module::AP && mSKS_EFT_FileDetail_BankAccount.ACHFileIDModifier == SKS_AlphaNumeric::Numeric) ||
           (mSKS_EFT_File.EFTFileType == SKS_EFT_Module::AR && mSKS_EFT_FileDetail_BankAccount.ACHFileIDModifier == SKS_AlphaNumeric::Numeric)) //FDD-10590
        {
            mACHFileIdMod = num2str(mFileIdMod,0,0,0,0);
        }
        else
        {
            mACHFileIdMod = num2char(64 + mFileIdMod); //ASCII A starts at 65
        }
        sb.Append(mACHFileIdMod);
        this.addFieldElement(gXmlNodeHeaderFieldValues, 'FileIdModifier', mACHFileIdMod, mSKS_EFT_File.RecId);
    
        sb.Append('094101');
        sb.Append(SKS_PP_StringFormats::strFill(strLen(mSKS_EFT_FileFormat.ImmOriginNameMask), this.CharacterReplacement(mSKS_EFT_FileDetail.FileACHImmDestName), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        sb.Append(SKS_PP_StringFormats::strFill(strLen(mSKS_EFT_FileFormat.ImmOriginNameMask), this.CharacterReplacement(mSKS_EFT_FileDetail.FileACHImmOriginName), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        sb.Append(SKS_PP_StringFormats::strFill(8, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        this.fileWrite(sb.ToString());
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Seven</Name>
				<Source><![CDATA[
    boolean rec_Seven(str entryDetailSeqNbr, SKS_EFT_FileDetail _sks_eft_FileDetail)
    {
        //BP Deviation Documented
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        str addenda;
        mSKS_EFT_FileDetail_AddendaDetailConfig = SKS_EFT_FileDetail_AddendaDetailConfig::find(_sks_eft_FileDetail.RecId); //FDD-10590
        ;
    
        sb.Append('705');
        addenda = mSKS_EFT_Addenda.buildAddenda();
        /*if(mSKS_EFT_FileFormatPaymSpec.AddendaSpec) //FDD-10590 --->
        {
            addenda = mSKS_EFT_Addenda.buildAddenda();
        }
        else if(mSKS_EFT_FileDetail_AddendaDetailConfig.EDIVersion)
        {
            addenda = mSKS_EFT_FileDetail_AddendaDetailConfig.EDI820Addenda;
           
             /*switch(mSKS_EFT_FileDetail_AddendaDetailConfig.EDIVersion)
            {
                case SKS_EFT_EDIVersion::v003010:
                    addenda = this.EDI820_003010(_sks_eft_FileDetail);
                    break;
    
                case SKS_EFT_EDIVersion::v003040:
                    addenda = this.EDI820_003040(_sks_eft_FileDetail);
                    break;
            }*/
        }*/ //<--- FDD-10590
        // Pmt Related Info 04-83
        sb.Append(SKS_PP_StringFormats::strFill(80, addenda, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        // Addenda Sequence Number 84-87
        sb.Append('0001');
    
        // Entry Detail Sequence Number (TraceNbr) 88-94
        sb.Append(entryDetailSeqNbr);
    
        // Write Seven record
        this.fileWrite(sb.ToString());
    
        mBatchCount++;
        mFileRecCount++;
        mFileEntryCount++;
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Seven_CTX_Build</Name>
				<Source><![CDATA[
    boolean rec_Seven_CTX_Build(SKS_EFT_FileDetail _sks_eft_FileDetail)
    {
        SKS_EFT_EDI sks_eft_edi;
        str ediError;
        int ctxAddendaMod;
        int length;
        ;
    
        mCTXString = '';
        mCTXAddenda = 0;
        mSKS_EFT_FileDetail_AddendaDetailConfig = SKS_EFT_FileDetail_AddendaDetailConfig::find(_sks_eft_FileDetail.RecId); //FDD-10590
        sks_eft_edi = new SKS_EFT_EDI(_sks_eft_FileDetail.FormatId, _sks_eft_FileDetail.PaymSpec, _sks_eft_FileDetail.EDI820Layout, _sks_eft_FileDetail.FileRecId, _sks_eft_FileDetail); //FDD-10590
        sks_eft_edi.setEFTFileId(mACHFileIdMod);
        // Check for error text to make sure class could be created
        ediError = sks_eft_edi.getErrorText();
    
        // If no error, build EDI data
        if(ediError == '')
        {
            mCTXString = sks_eft_edi.build_CTX(_sks_eft_FileDetail);
            if(mCTXString == '')
            {
                ediError = sks_eft_edi.getErrorText();
                if(ediError == '')
                {
                    ediError = "@SKS2103";
                }
            }
            else
            {
                // Determine how many addenda records will be created
                // EDI data is broken into 80 character chunks
                // This number is used in the 6 record
                length = strLen(mCTXString);
                mCTXAddenda = length div 80;
                ctxAddendaMod = length mod 80;
    
                if(ctxAddendaMod > 0)
                {
                    mCTXAddenda++;
                }
    
                if(mCTXAddenda > 9999)
                {
                    ediError = "@SKS2104";
                }
            }
        }
    
        if(ediError != '')
        {
            mErrorText = strFmt("@SKS2105", this.CharacterReplacement(_sks_eft_filedetail.PaymentReference), ediError); // Add context to the error
            return false;
        }
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Seven_CTX_Write</Name>
				<Source><![CDATA[
    boolean rec_Seven_CTX_Write(str entryDetailSeqNbr, SKS_EFT_FileDetail _sks_eft_FileDetail)
    {
        //BP Deviation Documented
        System.Text.StringBuilder sb;
        int pos = 1;
        str value;
        int addendaSequence = 1;
        ;
    
        // Create the "Seven" records
        while(mCTXAddenda >= addendaSequence)
        {
            sb = new System.Text.StringBuilder();
            value = subStr(mCTXString, pos, 80);
            pos = pos + 80;
    
            sb.Append('705');
    
            // Pmt Related Info 04-83
            sb.Append(SKS_PP_StringFormats::strFill(80, value, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
            // Addenda Sequence Number 84-87
            sb.Append(SKS_PP_StringFormats::strFill(4, num2str(addendaSequence,0,0,0,0), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
    
            // Entry Detail Sequence Number (TraceNbr) 88-94
            sb.Append(entryDetailSeqNbr);
    
            // Write Seven record
            this.fileWrite(sb.ToString());
    
            addendaSequence++;
            mBatchCount++;
            mFileRecCount++;
            mFileEntryCount++;
        }
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Six</Name>
				<Source><![CDATA[
    boolean rec_Six(boolean offSet, SKS_EFT_FileDetail _sks_eft_FileDetail)
    {
        //BP Deviation Documented
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        boolean zeroDollar;
        boolean preNote = false;
        boolean achTest = false;
        boolean sevenRec = false;
        boolean debitAmount = false;
        boolean ret;
    
        BankAccountType acctType;
        str bankTransit;
        str bankAccount;
        AmountMST amt;
        str uprSix;
        str id;
        str name;
        str entryDetailSeqNbr;
        int sevenRecCount;
        boolean ctxAddenda;
        SKS_EFT_FileDetail invSKS_EFT_FileDetail;
        str identnum;
        ;
    
        mSeqNumber++;
        //    1
        sb.Append('6');
    
        if(_sks_eft_FileDetail.RecordType == SKS_EFT_RecordType::PreNote)
        {
            preNote = true;
        }
    
        if(mModule == SKS_EFT_Module::AP)
        {
            achTest = mSKS_EFT_FileDetail_BankAccount.APTest; //FDd-10590
        }
        else
        {
            achTest = mSKS_EFT_FileDetail_BankAccount.ARTest; //FDD-10590
        }
    
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == 'CTX')
        {
            //SKS_VSTS_14506--->
            // See if invoice exists.  Need to factor in summary level
            // If no invoice exists there will be no CTX addenda records created
            if(_sks_eft_FileDetail.RecordSummary == SKS_EFT_RecordSummary::Invoice) // Summary by invoice
            {
                if(_sks_eft_FileDetail.VendTransRecId == 0) // If no invoice there will be no addenda
                {
                    ctxAddenda = false;
                }
                else
                {
                    ctxAddenda = true;
                }
            }
            else // Summary by payment
            {
                select firstOnly VendTransRecId, RecordSummaryRecId from invSKS_EFT_FileDetail
                where invSKS_EFT_FileDetail.RecordSummaryRecId == _sks_eft_FileDetail.RecId &&
                      invSKS_EFT_FileDetail.VendTransRecId == 0;
    
                if(invSKS_EFT_FileDetail) // Found with no invoice
                {
                    ctxAddenda = false;
                }
                else
                {
                    ctxAddenda = true;
                }
            }
            
            //ctxAddenda = true; //SKS_VSTS_14506<---
        }
        if(((substr(mSKS_EFT_FileFormatPaymSpec.TransactionCode,1,3) == 'CCD' || substr(mSKS_EFT_FileFormatPaymSpec.TransactionCode,1,3) == 'PPD') &&
            strLen(mSKS_EFT_FileFormatPaymSpec.TransactionCode) == 4) || (ctxAddenda))
        {
            if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == 'CCDT' && preNote)
            {
                zeroDollar = true;
            }
    
            sevenRec = !preNote && !offSet && !achTest;
        }
    
        if(offSet)
        {
    
            acctType = _sks_eft_FileDetail.BankAcctType;
            bankTransit = SKS_PP_StringFormats::strFill(9, _sks_eft_FileDetail.BankBankTransit, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right);
            bankAccount = SKS_PP_StringFormats::strFill(17, _sks_eft_FileDetail.BankBankAcct, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right);
            amt = ((mBatchCreditAmount * -1) - mBatchDebitAmount);
    
        }
        else
        {
            acctType = _sks_eft_FileDetail.DepBankAcctType;
            bankTransit = SKS_PP_StringFormats::strFill(9, _sks_eft_FileDetail.DepBankTransit, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right);
            bankAccount = SKS_PP_StringFormats::strFill(17, _sks_eft_FileDetail.DepBankAcct, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right);
            amt = _sks_eft_FileDetail.InvoiceSettleAmountPmtCur;
        }
    
        if(achTest)
        {
            if(!offSet)
            {
                if(_sks_eft_FileDetail.Module == sks_eft_module::AP)
                {
                    amt = -0.01;
                }
                else
                {
                    amt = 0.01;
                }
    
            }
        }
        else
        {
            if(preNote)
            {
                amt = 0.00;
            }
        }
    
        // ----------------------------------------------
        // Determine Credit or Debit
        // ----------------------------------------------
        if(amt > 0 )
        {
            debitAmount = true;
        }
        else if (amt < 0)
        {
            debitAmount = false;
        }
        else
        {
            if(_sks_eft_FileDetail.Module == sks_eft_module::AP)
            {
                debitAmount = false;
            }
            else
            {
                debitAmount = true;
            }
        }
    
        //02-03
        if(acctType == BankAccountType::CheckingAccount) // Checking
        {
            if(debitAmount) // Demand Debit Records
            {
                if(zeroDollar)
                {
                    sb.Append('29'); // checking/debit/zero-dollar
                }
                else if (preNote)
                {
                    sb.Append('28'); // checking/debit/prenote
                }
                else
                {
                    sb.Append('27'); // checking/debit/regular
                }
            }
            else // Demand Credit Records
            {
                if(zeroDollar)
                {
                    sb.Append('24'); // checking/credit/zero-dollar
                }
                else if (preNote)
                {
                    sb.Append('23'); // checking/credit/prenote
                }
                else
                {
                    sb.Append('22'); // checking/credit/regular
                }
            }
        }
        else if(acctType == BankAccountType::SavingsAccount) // Savings
        {
            if(debitAmount) // Savings Account Debit Records
            {
                if(zeroDollar)
                {
                    sb.Append('39'); // savings/debit/zero-dollar
                }
                else if (preNote)
                {
                    sb.Append('38'); // savings/debit/prenote
                }
                else
                {
                    sb.Append('37'); // savings/debit/regular
                }
            }
            else // Savings Account Credit Records
            {
                if(zeroDollar)
                {
                    sb.Append('34'); // savings/credit/zero-dollar
                }
                else if (preNote)
                {
                    sb.Append('33'); // savings/credit/prenote
                }
                else
                {
                    sb.Append('32'); // savings/credit/regular
                }
            }
        }
        else if(acctType == BankAccountType::FinancialInstitutionAccount) // Financial institution GL
        {
            if(debitAmount) // Financial institution GL Debit Records
            {
                if(zeroDollar)
                {
                    sb.Append('49'); // fin inst GL/debit/zero-dollar
                }
                else if (preNote)
                {
                    sb.Append('48'); // fin inst GL/debit/prenote
                }
                else
                {
                    sb.Append('47'); // fin inst GL/debit/regular
                }
            }
            else // Financial institution GL Credit Records
            {
                if(zeroDollar)
                {
                    sb.Append('44'); // fin inst GL/credit/zero-dollar
                }
                else if (preNote)
                {
                    sb.Append('43'); // fin inst GL/credit/prenote
                }
                else
                {
                    sb.Append('42'); // fin inst GL/credit/regular
                }
            }
        }
        else if(acctType == BankAccountType::LoanAccount) // Loan Account
        {
            if(debitAmount) // Loan Account Debit Records
            {
                if(!zeroDollar && !preNote)
                {
                    sb.Append('55'); // loan/debit/regular
                }
            }
            else // Loan Account Credit Records
            {
                if(zeroDollar)
                {
                    sb.Append('54'); // loan/credit/zero-dollar
                }
                else if (preNote)
                {
                    sb.Append('53'); // loan/credit/prenote
                }
                else
                {
                    sb.Append('52'); // loan/credit/regular
                }
            }
        }
    
        // IAT
        if(!offSet && substr(_sks_eft_FileDetail.PaymSpec,1,3) == #IAT)
        {
            // 04-12 - GO Identification + Check Digit,
            // For US bank destinations, it is the routing number of the receiving account,
            // which is already in the loaded in banktransit
            if(mSKS_EFT_BankGateway.GatewayOperID != '')
            {
                bankTransit = SKS_PP_StringFormats::strFill(9, mSKS_EFT_BankGateway.GatewayOperID, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right);  //SKS#DevOps:14838
            }
            else if(_sks_eft_FileDetail.DepBankTransit)
            {
                bankTransit = SKS_PP_StringFormats::strFill(9, _sks_eft_FileDetail.DepBankTransit, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right);  //SKS#DevOps:14838
            }
            sb.Append(bankTransit);
    
            // Always have at least 7 seven addenda records
            sevenRecCount = 7;
    
            // Count optional 7 seven addenda records
            if(mSKS_EFT_FileDetail_Intermediary.IntBankName != '')
            {
                sevenRecCount++;
            }
            if(mSKS_EFT_FileDetail_CreditParty.CrePartyBankName != '' && (mSKS_EFT_FileDetail_CreditParty.CrePartyBankId + mSKS_EFT_FileDetail_CreditParty.CrePartySwift) != '')
            {
                sevenRecCount++;
            }
            if(_sks_eft_FileDetail.RecordSummary == SKS_EFT_RecordSummary::Invoice)
            {
                sevenRecCount++;
            }
    
            // 13-16 Number of seven addenda records
            sb.Append(SKS_PP_StringFormats::strFill(4, num2str(sevenRecCount,0,0,0,0), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
            this.addFieldElement(gXmlNodeDetailFieldValues, 'sevenRecordCount', int2str(sevenRecCount), mSKS_EFT_File.RecId);
    
    
            // 17-29 Reserved - blank
            sb.Append(SKS_PP_StringFormats::strFill(13, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
        else
        {
            //04-12
            sb.Append(bankTransit);
            //13-29
            sb.Append(bankAccount);
        }
    
        // Amount 30-39
        sb.Append(SKS_PP_StringFormats::strMoney(this.getPositiveAmount(amt), 10));
    
        // IAT
        if(!offSet && substr(_sks_eft_FileDetail.PaymSpec,1,3) == #IAT)
        {
            // 40-74 Foreign Receiver's Account Number/DFI Account Number (35)
            sb.Append(SKS_PP_StringFormats::strFill(35, _sks_eft_FileDetail.DepBankAcct, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
            // 75-76 Reserved
            sb.Append(SKS_PP_StringFormats::strFill(2, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
            //' 77-77 GO OFAC Screening Indicator
            sb.Append(' '); // changed from "0" to blank
    
            // 78-78 Secondary OFAC Screening Indicator
            sb.Append(' ');
    
            // 79-79 Addenda record indicator
            sb.Append('1');
    
            sevenRec = true;
    
        }
        else
        {
            if(offSet || (preNote && _sks_eft_FileDetail.AccountNum == ''))
            {
                // Bank Offset
                // or A prenote to a Bank record (will not have Vendor ID)
                id = _sks_eft_FileDetail.BankBankTransit;
                name = _sks_eft_FileDetail.FileACHCompanyName;
            }
            else
            {
                id = this.CharacterReplacement(_sks_eft_FileDetail.AccountNum);
                name = _sks_eft_FileDetail.AccountName;
            }
    
            if(mSKS_EFT_FileDetail.TransactionCode == 'CCD')
            {
                str  PayRefIDNbr = SKS_EFT_Format::getCodelookupvalue('PayRefIDNbr', mSKS_EFT_FileDetail.RecId);//DevOps21286
                if(PayRefIDNbr == 'Yes')
                {
                    identnum = _sks_eft_FileDetail.PaymentReference;
                }
                else
                {
                    identnum = SKS_EFT_Format::getCodelookupvalue('RecSix_Idnum', mSKS_EFT_FileDetail.RecId);
                }
            }

            if(identnum)
            {
                sb.Append(SKS_PP_StringFormats::strFill(15, this.CharacterReplacement(identnum), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
            }
            else
            {
                // ID Number 40-54 (15)
                switch(msks_eft_FileDetail_AddendaHeader.AccountIDOvr)
                {
                    case SKS_EFT_AddendaOverwrite::AccountName:
                        sb.Append(SKS_PP_StringFormats::strFill(15, this.CharacterReplacement(_sks_eft_FileDetail.AccountName), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
                        break;
                    case SKS_EFT_AddendaOverwrite::AccountNum:
                        sb.Append(SKS_PP_StringFormats::strFill(15, this.CharacterReplacement(_sks_eft_FileDetail.AccountNum), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
                        break;
                    case SKS_EFT_AddendaOverwrite::BeneName:
                        sb.Append(SKS_PP_StringFormats::strFill(15, this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneName), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right)); //FDD-10590
                        break;
                    case SKS_EFT_AddendaOverwrite::Fixed:
                        sb.Append(SKS_PP_StringFormats::strFill(15, msks_eft_FileDetail_AddendaHeader.IdentificationFixedValue, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
                        break;
                    default:
                        sb.Append(SKS_PP_StringFormats::strFill(15, id, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
                        break;
                }
            }
    
            // Receiving Company Name 55-76 (22)
            if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == 'CTX')
            {
                if(SevenRec)
                {
                    ret = this.rec_Seven_CTX_Build(_sks_eft_FileDetail);
                    if(!ret)
                    {
                        return false;
                    }
                }
    
                // Number of addenda recods 55-58
                sb.Append(SKS_PP_StringFormats::strFill(4, int2str(mCTXAddenda), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
    
                // Receiving Company Name/ID Number 59-74
                sb.Append(SKS_PP_StringFormats::strFill(16, this.CharacterReplacement(name), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
                // Reserved 75-76
                sb.Append(SKS_PP_StringFormats::strFill(2, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
            }
            else
            {
                // Receiving Company Name/ID Number 55-76
                switch(msks_eft_FileDetail_AddendaHeader.RecCompany)
                {
                    case SKS_EFT_AddendaOverwrite::AccountName:
                        sb.Append(SKS_PP_StringFormats::strFill(22, this.CharacterReplacement(_sks_eft_FileDetail.AccountName), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
                        break;
                    case SKS_EFT_AddendaOverwrite::AccountNum:
                        sb.Append(SKS_PP_StringFormats::strFill(22, this.CharacterReplacement(_sks_eft_FileDetail.AccountNum), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
                        break;
                    case SKS_EFT_AddendaOverwrite::BeneName:
                        sb.Append(SKS_PP_StringFormats::strFill(22, this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneName), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right)); //FDD-10590
                        break;
                    case SKS_EFT_AddendaOverwrite::Fixed:
                        sb.Append(SKS_PP_StringFormats::strFill(22, this.CharacterReplacement(msks_eft_FileDetail_AddendaHeader.RecCompanyFixedValue), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
                        break;
                    default:
                        sb.Append(SKS_PP_StringFormats::strFill(22, this.CharacterReplacement(name), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
                        break;
                }
            }
    
            // Discretionary Data 77-78
            sb.Append('  ');
    
            // Addenda Record Indicator 79-79
            if(SevenRec)
            {
                sb.Append('1');
            }
            else
            {
                sb.Append('0');
            }
        }
    
        // Trace Number 80-87
        if(mSKS_EFT_File.EFTFileType == SKS_EFT_Module::AP)
        {
            sb.Append(SKS_PP_StringFormats::strFill(8, this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.ACHOrigDFI), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right)); //FDD-10590
        }
        else
        {
            sb.Append(SKS_PP_StringFormats::strFill(8, this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.ACHOrigDFI), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right)); //FDD-10590
        }
    
        // Trace Number 88-94
        entryDetailSeqNbr = SKS_PP_StringFormats::strFill(7, num2str(mSeqNumber,0,0,0,0), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left);
        sb.Append(entryDetailSeqNbr);
    
        this.addFieldElement(gXmlNodeDetailFieldValues, 'BatchNumber', SKS_PP_StringFormats::strFill(7, num2str(mBatchNumber,0,0,0,0), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left), _SKS_EFT_FileDetail.RecId);
        // Set IN/Out keys for return files
        // Trace Number 80-87
        if(mSKS_EFT_File.EFTFileType == SKS_EFT_Module::AP)
        {
            this.addFieldElement(gXmlNodeDetailFieldValues, 'TraceNumber', SKS_PP_StringFormats::strFill(8, this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.ACHOrigDFI), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right) + entryDetailSeqNbr,_SKS_EFT_FileDetail.RecId);//FDD-10590
        }
        else
        {
            this.addFieldElement(gXmlNodeDetailFieldValues, 'TraceNumber', SKS_PP_StringFormats::strFill(8, this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.ACHOrigDFI), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right) + entryDetailSeqNbr,_SKS_EFT_FileDetail.RecId); //FDD-10590
        }
    
    
        // Write Six record
        uprSix = sb.ToString();
        this.fileWrite(strUpr(uprSix));
    
        mBatchCount++;
        mFileRecCount++;
        mFileEntryCount++;
        
    
        if(debitAmount)
        {
            mBatchDebitAmount += amt;
            mFileDebitCount++;
        }
        else
        {
            mBatchCreditAmount += amt;
            mFileCreditCount++;
        }
    
        mBatchHash = SKS_EFT_Format_US_ACH::hashTotal(mBatchHash, str2int64(substr(bankTransit,1,8)));
    
        if(sevenRec)
        {
            if(!offSet && substr(_sks_eft_FileDetail.PaymSpec,1,3) == #IAT)
            {
                // 710  Foreign Pmt Amt/Receiver's Name
                this.rec_IAT_710(_sks_eft_FileDetail, entryDetailSeqNbr, amt);
    
                // 711  Originator's Name/Street
                this.rec_IAT_711(_sks_eft_FileDetail, entryDetailSeqNbr);
    
                // 712  Originator's City/State/Country/PostalCode
                this.rec_IAT_712(_sks_eft_FileDetail, entryDetailSeqNbr);
    
                // 713  ODFI Name/Qual/ID/Branch Country Code
                this.rec_IAT_713(_sks_eft_FileDetail, entryDetailSeqNbr);
    
                // 714  RDFI Name/Qual/ID/Branch Country Code
                this.rec_IAT_714(_sks_eft_FileDetail, entryDetailSeqNbr);
    
                // 715  Receiver's ID Nbr (VendID)/Street
                this.rec_IAT_715(_sks_eft_FileDetail, entryDetailSeqNbr);
    
                // 716  Receivers' City/State/Cntry/Postal Code
                this.rec_IAT_716(_sks_eft_FileDetail, entryDetailSeqNbr);
    
                // 717  Remittance
                if(_sks_eft_FileDetail.RecordSummary == SKS_EFT_RecordSummary::Invoice)
                {
                    this.rec_IAT_717(_sks_eft_FileDetail, entryDetailSeqNbr);
                }
    
                // A718_A - Intermediary Bank
                if(mSKS_EFT_FileDetail_Intermediary.IntBankName != '') //FDD-10590
                {
                    this.rec_IAT_718_A(_sks_eft_FileDetail, entryDetailSeqNbr);
                }
    
                // A718_B - Credit Party Bank
                if(mSKS_EFT_FileDetail_CreditParty.CrePartyBankName != '' && (mSKS_EFT_FileDetail_CreditParty.CrePartyBankId + mSKS_EFT_FileDetail_CreditParty.CrePartySwift) != '')
                {
                    this.rec_IAT_718_B(_sks_eft_FileDetail, entryDetailSeqNbr);
                }
    
                mBatchCount = mBatchCount+sevenRecCount;
                mFileRecCount = mFileRecCount+sevenRecCount;
                mFileEntryCount = mFileEntryCount+sevenRecCount;
            }
            if((substr(mSKS_EFT_FileFormatPaymSpec.TransactionCode,1,3) == 'CCD' ||
                substr(mSKS_EFT_FileFormatPaymSpec.TransactionCode,1,3) == 'PPD') &&
                strLen(mSKS_EFT_FileFormatPaymSpec.TransactionCode) == 4)
            {
                this.rec_Seven(entryDetailSeqNbr, _sks_eft_FileDetail);
            }
            else if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == 'CTX')
            {
                ret = this.rec_Seven_CTX_Write(entryDetailSeqNbr, _sks_eft_FileDetail);
                if(!ret)
                {
                    return false;
                }
            }
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectPaymentRecords</Name>
				<Source><![CDATA[
    protected void selectPaymentRecords()
    {
        //------------------------------------------------------------------------------------------------------
        // Standard payment selction
        // Override if different selection is need for a format
        //------------------------------------------------------------------------------------------------------
    
        //Order by clause must match the clause in the SKS_EFT_Processing.SumByPayment
        
        if(mModule == SKS_EFT_Module::AR)
        {
            select * from mSKS_EFT_FileDetail
                order by mSKS_EFT_FileDetail.RecordSection,
                    mSKS_EFT_FileDetail.PaymMode,
                    mSKS_EFT_FileDetail.PaymSpec,
                    mSKS_EFT_FileDetail.EffectiveDate,
                    mSKS_EFT_FileDetail.DepCountryRegionId,
                    mSKS_EFT_FileDetail.RecordType,
                    mSKS_EFT_FileDetail.BankAccountId,
                    mSKS_EFT_FileDetail.AccountNum,
                    mSKS_EFT_FileDetail.PaymentReference,
                    mSKS_EFT_FileDetail.RecId
                where mSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                    mSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                    mSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary;
        }
        else
        {
            select * from mSKS_EFT_FileDetail
                join mSKS_EFT_FileDetail_VendAddress
                join mSKS_EFT_FileDetail_BenBank
                join mSKS_EFT_FileDetail_Intermediary
                join mSKS_EFT_FileDetail_CreditParty
                join msKS_EFT_FileDetail_Instructions
                    order by mSKS_EFT_FileDetail.RecordSection,
                        mSKS_EFT_FileDetail.PaymMode,
                        mSKS_EFT_FileDetail.BankAccountId,
                        mSKS_EFT_FileDetail.PaymentCurrencyCode,
                        mSKS_EFT_FileDetail.PaymSpec,
                        mSKS_EFT_FileDetail.EffectiveDate,
                        mSKS_EFT_FileDetail.DepCountryRegionId,
                        mSKS_EFT_FileDetail.RecordType,
                        mSKS_EFT_FileDetail.AccountNum,
                        mSKS_EFT_FileDetail.PaymentReference,
                        mSKS_EFT_FileDetail.RecId
                where mSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                    mSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                    mSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary &&
                    mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_VendAddress.RefRecId &&
                    mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_BenBank.RefRecId &&
                    mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_Intermediary.RefRecId &&
                    mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_CreditParty.RefRecId &&
                    mSKS_EFT_FileDetail.RecId == msKS_EFT_FileDetail_Instructions.RefRecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>hashTotal</Name>
				<Source><![CDATA[
    // Reduce hash total so it is always 10 digits or less
    public static int64 hashTotal(int64 _hash, int64 _addHash)
    {
        str strNum;
        int64 value;
        ;
    
        value = _hash + _addHash; // Add new hash
        if(value > 9999999999)
        {
            strNum = SKS_PP_StringFormats::strRight(int642Str(value), 10);
            value = str2int64(strNum);
        }
    
        return value;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>