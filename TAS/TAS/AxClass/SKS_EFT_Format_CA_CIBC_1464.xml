<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_CA_CIBC_1464</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_CA_CIBC_1464 extends SKS_EFT_Format
/// </summary>
class SKS_EFT_Format_CA_CIBC_1464 extends SKS_EFT_Format
{
    #define.FormatVersion('20220512')
    #define.PAYMT('PMT')
    #define.LineEnd('\r\n')
    str mControlID;
    str payeeName;
    System.Text.StringBuilder msb;

    int mLogicRecCount;
    int mCRecordCount;
    int mDRecordCount;
    container counter;

    AmountMST mPaymentAmount;
    AmountMST mWithdrawalAmount;
    SKS_EFT_SequenceNumber mSequenceNumber;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    protected void formatStructure()
    {
        int rec = 1;
        RecId nextRecId;
        msb = new System.Text.StringBuilder();
        mLogicRecCount = 0;

        // Get sequence number
        this.getSequence();

        // Format header
        this.rec_File_Header();

        while(mSKS_EFT_FileDetail)
        {
            // Get SKS_EFT_FileFormatPaymSpec
            this.getSKS_EFT_FileFormatPaymSpec();

            // Get SKS_EFT_VendorPaym
            this.getSKS_EFT_VendorPaym();

            mSKS_EFT_FileDetail_BankAccount = SKS_EFT_FileDetail_BankAccount::find(mSKS_EFT_FileDetail.RecId);  //SKG#VSTS:13920


            if(mSKS_EFT_FileDetail.Module == SKS_EFT_Module::AP)
            {
                // Detail Record
                this.rec_Detail_C(rec == 1);
            }
            else
            {
                // Detail Record
                this.rec_Detail_D(rec == 1);
            }

            next mSKS_EFT_FileDetail;
            nextRecId = mSKS_EFT_FileDetail.recId;

            if(rec < 6)
            {
                if(nextRecId != 0)
                {
                    rec++;
                }
                else
                {
                    this.padRecord(rec);
                    msb.Append(#LineEnd);
                }
            }
            else
            {
                rec = 1;
                msb.Append(#LineEnd);
            }
        }

        // Format trailer
        this.rec_Trailer();

        // Write to file
        this.fileWrite(msb.ToString());

        // Increment sequence number
        this.incrementSequenceNumber();

        // Set sequence number
        this.setSequence();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRemittanceName</Name>
				<Source><![CDATA[
    void getRemittanceName()
    {
        EventHandlerResult result = new EventHandlerResult();
        
        this.getRemittanceName_delegate(mSKS_EFT_FileDetail, result);

        if(!result.result())
        {
            payeeName =  mSKS_EFT_FileDetail_VendAddress.BeneName;
        }
        else
        {
            payeeName =  result.result();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRemittanceName_delegate</Name>
				<Source><![CDATA[
    delegate void getRemittanceName_delegate(SKS_EFT_FileDetail sks_EFT_FileDetail, EventHandlerResult _result)
    {
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJulianDate</Name>
				<Source><![CDATA[
    private str getJulianDate(date _Date)
    {
        str value;

        value = '0' + subStr(date2julian(_Date),3,5);

        return value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSequence</Name>
				<Source><![CDATA[
    private void getSequence()
    {
        SKS_EFT_FileCreationNumber  FileCreationNumber;

        if(mSKS_EFT_FileFormat)
        {
            //Get Next Sequence Number
            select firstonly forupdate FileCreationNumber where FileCreationNumber.SKS_EFT_FormatGroup == mSKS_EFT_FileFormat.FormatGroup
                && FileCreationNumber.OrigId == mSKS_EFT_FileDetail_BankAccount.WOrdPartyId;
            if(FileCreationNumber)
            {
                ttsbegin;
                FileCreationNumber.lastValue += 1;
                FileCreationNumber.update();
                ttscommit;
                mSequenceNumber = FileCreationNumber.LastValue;
            }
            else
            {
                ttsbegin;
                FileCreationNumber.SKS_EFT_FormatGroup = mSKS_EFT_FileFormat.FormatGroup;
                FileCreationNumber.OrigId = mSKS_EFT_FileDetail_BankAccount.WOrdPartyId;
                FileCreationNumber.lastValue = mSKS_EFT_FileFormat.NextSequenceNumber + 1;
                FileCreationNumber.insert();
                ttscommit;
                mSequenceNumber = FileCreationNumber.LastValue;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>incrementSequenceNumber</Name>
				<Source><![CDATA[
    private void incrementSequenceNumber()
    {
        if(mSequenceNumber >= 9999 || mSequenceNumber == 0)
        {
            mSequenceNumber = 1;
        }
        else
        {
            mSequenceNumber++;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>padRecord</Name>
				<Source><![CDATA[
    boolean padRecord(int _records)
    {
        //Fill remaining segments with blanks
        int x;

        for(x = _records; x < 6; x++)
        {
            msb.Append(SKS_PP_StringFormats::strFill(240, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Detail_C</Name>
				<Source><![CDATA[
    boolean rec_Detail_C(boolean _newRec)
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Content                                    Position    Size
        // 1    Logical Record Type                     (        1)       1
        // 2    Logical Record Count                    (   2-  10)       9
        // 3    Origination Control Numbers             (  11-  24)      14
        //--
        // 4    Transaction Type                        (  25-  27)       3
        // 5    Amount                                  (  28-  37)      10
        // 6    Value Date                              (  38-  43)       6
        // 7    Settlement Institution ID and Branch Transit                  (  44-  52)       9
        // 8    Payee Account Number                    (  53-  64)      12
        // 9    Filler                                  (  65-  86)      22
        //10    Stored Transaction Type                 (  87-  89)       3
        //11    Originator's Short Name                 (  90- 104)      15
        //12    Payee's Name                            ( 105- 134)      30
        //13    Originator's Long Name                  ( 135- 164)      30
        //14    Originator Number                       ( 165- 174)      10
        //15    Cross Reference No.                     ( 175- 193)      19
        //16    Institution ID  and Branch Transit for Returns                 ( 194- 202)       9
        //17    Account Number for return               ( 203- 214)      12
        //18    Originatorâ€™s Sundry Information         ( 215- 229)      15
        //19    Filler                                  ( 230- 251)      22
        //20    Settlement Account Indicator            ( 252- 253)       3
        //21    Invalid Field Indicator                 ( 254- 264)      11
        //------------------------------------------------------------------------------------------------------        
        str shortName,origName;//SKS_VSTS_13691
        int indicator;


        if(_newRec)
        {
            // 1    Logical Record Type                 (        1)       1
            // 2    Logical Record Count                (   2-  10)       9
            // 3    Origination Control Numbers         (  11-  24)      14
            this.rec_FileLead('C');
        }
        mCRecordCount++;

        // 4    Transaction Type                        (  25-  27)       3
        msb.Append(mSKS_EFT_FileFormatPaymSpec.TransactionCode);

        // 5    Amount                                  (  28-  37)      10
        mPaymentAmount += mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur;
        msb.Append(SKS_PP_StringFormats::strMoney(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1, 10));

        // 6    Value Date                              (  38-  43)       6
        msb.Append(this.getJulianDate(mSKS_EFT_FileDetail.EffectiveDate));

        // 7    Settlement Institution ID and Branch Transit                  (  44-  52)       9
        msb.Append(SKS_PP_StringFormats::strFill(9, mSKS_EFT_FileDetail.DepBankTransit, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        // 8    Payee Account Number                    (  53-  64)      12
        msb.Append(SKS_PP_StringFormats::strFill(12, mSKS_EFT_FileDetail.DepBankAcct, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 9    Filler                                  (  65-  86)      22
        msb.Append(SKS_PP_StringFormats::strFill(22, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //10    Stored Transaction Type                 (  87-  89)       3
        msb.Append(SKS_PP_StringFormats::strFill(3, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //11    Originator's Short Name                 (  90- 104)      15
        shortName = SKS_EFT_Format::getCodelookupvalue('ShortName', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank);
        if(shortName)//SKS_VSTS_13691
        {
            origName = shortName;
            
        }
        else
        {
            origName = mSKS_EFT_FileDetail_BankAccount.WOrdPartyName;
        }

        msb.Append(SKS_PP_StringFormats::strFill(15, this.CharacterReplacement(origName), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        
        //12    Payee's Name                            ( 105- 134)      30
        this.getRemittanceName();       //SKS#DevOps:16507

        msb.Append(SKS_PP_StringFormats::strFill(30, this.CharacterReplacement(payeeName), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //13    Originator's Long Name                  ( 135- 164)      30
        msb.Append(SKS_PP_StringFormats::strFill(30, this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyName), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));//SKS_VSTS_13691

        //14    Originator Number                       ( 165- 174)      10
        msb.Append(SKS_PP_StringFormats::strFill(10, strUpr(mSKS_EFT_FileDetail_BankAccount.WOrdPartyId), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));//SKS_VSTS_13691

        //15    Cross Reference No.                     ( 175- 193)      19
        msb.Append(SKS_PP_StringFormats::strFill(19, mSKS_EFT_FileDetail.PaymentReference, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //16    Institution ID  and Branch Transit for Returns                 ( 194- 202)       9
        msb.Append(SKS_PP_StringFormats::strFill(9, mSKS_EFT_FileDetail.BankBankTransit, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Right));

        //17    Account Number for return               ( 203- 214)      12
        msb.Append(SKS_PP_StringFormats::strFill(12, mSKS_EFT_FileDetail.BankBankAcct, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //18    Originatorâ€™s Sundry Information         ( 215- 229)      15
        msb.Append(SKS_PP_StringFormats::strFill(15, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //19    Filler                                  ( 230- 251)      22
        msb.Append(SKS_PP_StringFormats::strFill(22, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //20    Settlement Account Indicator            ( 252- 253)       2        
        indicator = conFind(counter, mSKS_EFT_FileDetail.BankBankTransit + mSKS_EFT_FileDetail.BankBankAcct);

        msb.Append(SKS_PP_StringFormats::strFill(2, num2Str(indicator, 0,0,0,0), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));   //SKG#VSTS:13920

        //21    Invalid Field Indicator                 ( 254- 264)      11
        msb.Append(SKS_PP_StringFormats::strFill(11, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Detail_D</Name>
				<Source><![CDATA[
    boolean rec_Detail_D(boolean _newRec)
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Content                                    Position    Size
        // 1    Logical Record Type                     (        1)       1
        // 2    Logical Record Count                    (   2-  10)       9
        // 3    Origination Control Numbers             (  11-  24)      14
        //--
        // 4    Transaction Type                        (  25-  27)       3
        // 5    Amount                                  (  28-  37)      10
        // 6    Value Date                              (  38-  43)       6
        // 7    Settlement Institution ID and Branch Transit                  (  44-  52)       9
        // 8    Payor Account Number                    (  53-  64)      12
        // 9    Filler                                  (  65-  86)      22
        //10    Stored Transaction Type                 (  87-  89)       3
        //11    Originator's Short Name                 (  90- 104)      15
        //12    Payor's Name                            ( 105- 134)      30
        //13    Originator's Long Name                  ( 135- 164)      30
        //14    Originator Number                       ( 165- 174)      10
        //15    Cross Reference No.                     ( 175- 193)      19
        //16    Institution ID  and Branch Transit for Returns                 ( 194- 202)       9
        //17    Account Number for return               ( 203- 214)      12
        //18    Originatorâ€™s Sundry Information         ( 215- 229)      15
        //19    Filler                                  ( 230- 251)      22
        //20    Settlement Account Indicator            ( 252- 253)       3
        //21    Invalid Field Indicator                 ( 254- 264)      11
        //------------------------------------------------------------------------------------------------------
        str shortName,origName;//SKS_VSTS_13691
        int indicator;
        if(_newRec)
        {
            // 1    Record Type                         (        1)       1
            // 2    Logical Record Count                (   2-  10)       9
            // 3    Origination Control Numbers         (  11-  24)      14
            this.rec_FileLead('D');
        }
        mDRecordCount++;

        // 4    Transaction Type                        (  25-  27)       3
        msb.Append(mSKS_EFT_FileFormatPaymSpec.TransactionCode);

        // 5    Amount                                  (  28-  37)      10
        mWithdrawalAmount += mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur;
        msb.Append(SKS_PP_StringFormats::strMoney(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur, 10));

        // 6    Value Date                              (  38-  43)       6
        msb.Append(this.getJulianDate(mSKS_EFT_FileDetail.EffectiveDate));

        // 7    Settlement Institution ID and Branch Transit                  (  44-  52)       9
        msb.Append(SKS_PP_StringFormats::strFill(9, mSKS_EFT_FileDetail.DepBankTransit, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        // 8    Payor Account Number                    (  53-  64)      12
        msb.Append(SKS_PP_StringFormats::strFill(12, mSKS_EFT_FileDetail.DepBankAcct, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 9    Filler                                  (  65-  86)      22
        msb.Append(SKS_PP_StringFormats::strFill(22, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //10    Stored Transaction Type                 (  87-  89)       3
        msb.Append(SKS_PP_StringFormats::strFill(3, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //11    Originator's Short Name                 (  90- 104)      15
        shortName = SKS_EFT_Format::getCodelookupvalue('ShortName', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank);
        if(shortName)//SKS_VSTS_13691
        {
            origName = shortName;
            
        }
        else
        {
            origName = mSKS_EFT_FileDetail.FileACHCompanyName;
        }

        msb.Append(SKS_PP_StringFormats::strFill(15, this.CharacterReplacement(origName), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        

        //12    Payor's Name                            ( 105- 134)      30
        msb.Append(SKS_PP_StringFormats::strFill(30, this.CharacterReplacement(mSKS_EFT_FileDetail.AccountName), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //13    Originator's Long Name                  ( 135- 164)      30
        msb.Append(SKS_PP_StringFormats::strFill(30, this.CharacterReplacement(mSKS_EFT_FileDetail.FileACHCompanyName), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));//SKS_VSTS_13691

        //14    Originator Number                       ( 165- 174)      10
        msb.Append(SKS_PP_StringFormats::strFill(10, strUpr(mSKS_EFT_FileDetail.FileACHCompanyId), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));//SKS_VSTS_13691

        //15    Cross Reference No.                     ( 175- 193)      19
        msb.Append(SKS_PP_StringFormats::strFill(19, mSKS_EFT_FileDetail.PaymentReference, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //16    Institution ID  and Branch Transit for Returns                 ( 194- 202)       9
        msb.Append(SKS_PP_StringFormats::strFill(9, mSKS_EFT_FileDetail.BankBankTransit, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Right));

        //17    Account Number for return               ( 203- 214)      12
        msb.Append(SKS_PP_StringFormats::strFill(12, mSKS_EFT_FileDetail.BankBankAcct, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //18    Originatorâ€™s Sundry Information         ( 215- 229)      15
        msb.Append(SKS_PP_StringFormats::strFill(15, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //19    Filler                                  ( 230- 251)      22
        msb.Append(SKS_PP_StringFormats::strFill(22, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //20    Settlement Account Indicator            ( 252- 253)       2
        indicator = conFind(counter, mSKS_EFT_FileDetail.BankBankTransit + mSKS_EFT_FileDetail.BankBankAcct);

        msb.Append(SKS_PP_StringFormats::strFill(2, num2Str(indicator, 0,0,0,0), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));   //SKG#VSTS:13920

        //21    Invalid Field Indicator                 ( 254- 264)      11
        msb.Append(SKS_PP_StringFormats::strFill(11, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_File_Header</Name>
				<Source><![CDATA[
    boolean rec_File_Header()
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Content                                                 Position      Size
        // 1    Logical Record Type                                     (        1)      1
        // 2    Logical Record Count                                    (   2-  10)      9
        // 3    Originator Number                                       (  11-  20)     10
        // 4    File Creation Number                                    (  21-  24)      4
        // 5    File Creation Date                                      (  25-  30)      6
        // 6    Destination Date Centre                                 (  31-  35)      5
        // 7    Filler                                                  (  36-  55)     20
        // 8    Currency Identifier                                     (  56-  58)      3
        // 9    Filler                                                  (  59-1248)   1190
        //10    Version Number                                          (1249-1252)      4
        //11    Number of Settlement Account Series                     (1253-1254)      2
        //12    Settlement Account Series 01
        //12a   Settlement Institution ID and Branch Transit            (1255-1263)      9
        //12b   Settlement Account                                      (1264-1275)     12
        //      Settlement Account Series 02                            (1276-1296)     21
        //      Settlement Account Series 03                            (1297-1317)     21
        //      Settlement Account Series 04                            (1318-1338)     21
        //      Settlement Account Series 05                            (1339-1359)     21
        //      Settlement Account Series 06                            (1360-1380)     21
        //      Settlement Account Series 07                            (1381-1401)     21
        //      Settlement Account Series 08                            (1402-1422)     21
        //      Settlement Account Series 09                            (1423-1443)     21
        //      Settlement Account Series 10                            (1444-1464)     21
        //------------------------------------------------------------------------------------------------------
        str OrigID;
        str FileCN;
        int noOfAcct;
        int i;
        SKS_EFT_FileDetail  tmpSKS_EFT_FileDetail;
        SKS_EFT_FileDetail  invSKS_EFT_FileDetail;
        str prevBankBankTransit;
        str prevBankBankAcct;


        //Nbr   Content
        // 1    Record Type                                             (        1)      1
        msb.Append('A');

        // 2    Logical Record Count                                    (   2-  10)      9
        mLogicRecCount = 1;
        msb.Append(SKS_PP_StringFormats::strFill(9, int2str(mLogicRecCount), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        // 3    Originator  Number                                      (  11-  20)     10
        if(mSKS_EFT_FileDetail.Module == SKS_EFT_Module::AP)
        {
            OrigID = SKS_PP_StringFormats::strFill(10, strUpr(mSKS_EFT_FileDetail_BankAccount.WOrdPartyId), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right);//SKS_VSTS_13691
        }
        else
        {
            OrigID = SKS_PP_StringFormats::strFill(10, strUpr(mSKS_EFT_FileDetail.FileACHCompanyId), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right);//SKS_VSTS_13691
        }

        msb.Append(OrigID);

        // 4    File Creation Number                                    (  21-  24)      4
        FileCN = SKS_PP_StringFormats::strFill(4, num2str(mSequenceNumber,0,0,0,0), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left);
        this.addFieldElement(gXmlNodeHeaderFieldValues, 'FileCreationNumber', FileCN, mSKS_EFT_File.RecId);
        msb.Append(FileCN);

        // 5    File Creation Date                                      (  25-  30)      6
        msb.Append(this.getJulianDate(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone())));

        // 6    Destination Data Center                                 (  31-  35)      5
        msb.Append(SKS_PP_StringFormats::strFill(5, this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('DataCentCode', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank)), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        
        // 7    Filler                                                  (  36-  55)     20
        msb.Append(SKS_PP_StringFormats::strFill(20, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 8    Currency Identifier                                     (  56-  58)      3
        msb.Append(mSKS_EFT_FileDetail.PaymentCurrencyCode);

        // 9    Filler                                                  (  59-1248)   1190
        msb.Append(SKS_PP_StringFormats::strFill(1190, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //10    Version Number                                          (1249-1252)      4
        msb.Append('0001');

        //SKG#VSTS:13920  -->
        //11    Number of Settlement Account Series                     (1253-1254)      2
        while select tmpSKS_EFT_FileDetail
            group by tmpSKS_EFT_FileDetail.BankBankTransit, tmpSKS_EFT_FileDetail.BankBankAcct
            where
                tmpSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                tmpSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments  &&
                tmpSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary
        {
            noOfAcct += 1;
        }

        msb.Append(SKS_PP_StringFormats::strFill(2, int2Str(noOfAcct), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        while select invSKS_EFT_FileDetail
            group by invSKS_EFT_FileDetail.BankBankTransit, invSKS_EFT_FileDetail.BankBankAcct
            where
                invSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                invSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments  &&
                invSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary
        { 
            if(prevBankBankTransit != invSKS_EFT_FileDetail.BankBankTransit ||
               prevBankBankAcct != invSKS_EFT_FileDetail.BankBankAcct)
            {
                counter += [invSKS_EFT_FileDetail.BankBankTransit + invSKS_EFT_FileDetail.BankBankAcct];

                //12    Settlement Account Series 02
                //12a   Settlement Institution ID and Branch Transit            (1255-1263)      9
                msb.Append(SKS_PP_StringFormats::strFill(9, invSKS_EFT_FileDetail.BankBankTransit, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

                //12b   Settlement Account                                      (1264-1275)     12
                msb.Append(SKS_PP_StringFormats::strFill(12, invSKS_EFT_FileDetail.BankBankAcct, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
 
                prevBankBankTransit = invSKS_EFT_FileDetail.BankBankTransit;
                prevBankBankAcct    = invSKS_EFT_FileDetail.BankBankAcct;
            }
        }
        if(noOfAcct > 10)
        {
            mErrorText = "@SKS:SKGPaymBankAcctNotExceed";
        }
        
        for(i = noOfAcct+1; i <= 10; i++)
        {
            msb.Append(SKS_PP_StringFormats::strFill(21, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
        // SKG#VSTS:13920 <--

        mControlID = OrigID + FileCN;

        msb.Append(#LineEnd);
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_FileLead</Name>
				<Source><![CDATA[
    boolean rec_FileLead(str _Type)
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Content                                    Position    Size
        // 1    Logical Record Type                     (        1)       1
        // 2    Logical Record Count                    (   2-  10)       9
        // 3    Origination Control Numbers             (  11-  24)      14
        //------------------------------------------------------------------------------------------------------

        // 1    Logical Record Type                     (        1)       1
        msb.Append(_Type);

        // 2    Logical Record Count                    (   2-  10)       9
        mLogicRecCount++;
        msb.Append(SKS_PP_StringFormats::strFill(9, int2str(mLogicRecCount), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        // 3    Origination Control Numbers             (  11-  24)      14
        msb.Append(SKS_PP_StringFormats::strFill(14, mControlID, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Trailer</Name>
				<Source><![CDATA[
    boolean rec_Trailer()
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Content                                    Position    Size
        // 1    Logical Record Type                     (        1)       1
        // 2    Logical Record Count                    (   2-  10)       9
        // 3    Originator Control Number               (  11-  24)      14
        // 4    Total Value of Debit Transactions       (  25-  38)      14
        // 5    Total Number of Debit Transactions      (  39-  46)       8
        // 6    Total Value of Credit Transactions      (  47-  60)      14
        // 7    Total Number of Credit Transactions     (  61-  68)       8
        // 8    Filler                                  (  69-1464)    1396
        //------------------------------------------------------------------------------------------------------

        // 1    Logical Record Type                     (        1)       1
        // 2    Logical Record Count                    (   2-  10)       9
        // 3    Originator Control Number               (  11-  24)      14
        this.rec_FileLead('Z');

        // 4    Total Value of Debit Transactions       (  25-  38)      14
        msb.Append(SKS_PP_StringFormats::strMoney(mWithdrawalAmount, 14));

        // 5    Total Number of Debit Transactions      (  39-  46)       8
        msb.Append(SKS_PP_StringFormats::strFill(8, int2str(mDRecordCount), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        // 6    Total Value of Credit Transactions      (  47-  60)      14
        msb.Append(SKS_PP_StringFormats::strMoney(mPaymentAmount * -1, 14));

        // 7    Total Number of Credit Transactions     (  61-  68)       8
        msb.Append(SKS_PP_StringFormats::strFill(8, int2str(mCRecordCount), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        // 8    Filler                                  (  69-1464)    1396
        msb.Append(SKS_PP_StringFormats::strFill(1396, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSequence</Name>
				<Source><![CDATA[
    private void setSequence()
    {
        SKS_EFT_FileFormat sks_eft_fileformat;
        ;

        select firstOnly forUpdate sks_eft_fileformat
        where sks_eft_fileformat.FormatId == mSKS_EFT_FileFormat.FormatId;

        if(sks_eft_fileformat)
        {
            sks_eft_fileformat.NextSequenceNumber = mSequenceNumber;
            sks_eft_fileformat.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectPaymentRecords</Name>
				<Source><![CDATA[
    [SuppressBPWarning('BPErrorSelectUsingFirstOnly', 'The buffer is used in next statement or in a datasource query loop.')]
    protected void selectPaymentRecords()//SKS_VSTS_13691
    {
        //------------------------------------------------------------------------------------------------------
        // Standard payment selction
        // Override if different selection is need for a format
        //------------------------------------------------------------------------------------------------------
    
        //Order by clause must match the clause in the SKS_EFT_Processing.SumByPayment
        if(mSKS_EFT_FileDetail.Module == SKS_EFT_Module::AP)
        {
            select * from mSKS_EFT_FileDetail
                order by mSKS_EFT_FileDetail.RecordSection,
                        mSKS_EFT_FileDetail.PaymMode,
                        mSKS_EFT_FileDetail.PaymSpec,
                        mSKS_EFT_FileDetail.EffectiveDate,
                        mSKS_EFT_FileDetail.DepCountryRegionId,
                        mSKS_EFT_FileDetail.RecordType,
                        mSKS_EFT_FileDetail.BankAccountId,
                        mSKS_EFT_FileDetail.AccountNum,
                        mSKS_EFT_FileDetail.PaymentReference,
                        mSKS_EFT_FileDetail.RecId
            join mSKS_EFT_FileDetail_VendAddress
            join mSKS_EFT_FileDetail_BankAccount
                where mSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                    mSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                    mSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary &&
                    mSKS_EFT_FileDetail_VendAddress.RefRecId == mSKS_EFT_FileDetail.RecId &&
                    mSKS_EFT_FileDetail_BankAccount.RefRecId == mSKS_EFT_FileDetail.RecId;
        }
        else
        {
            select * from mSKS_EFT_FileDetail
                order by mSKS_EFT_FileDetail.RecordSection,
                        mSKS_EFT_FileDetail.PaymMode,
                        mSKS_EFT_FileDetail.PaymSpec,
                        mSKS_EFT_FileDetail.EffectiveDate,
                        mSKS_EFT_FileDetail.DepCountryRegionId,
                        mSKS_EFT_FileDetail.RecordType,
                        mSKS_EFT_FileDetail.BankAccountId,
                        mSKS_EFT_FileDetail.AccountNum,
                        mSKS_EFT_FileDetail.PaymentReference,
                        mSKS_EFT_FileDetail.RecId
                join msks_EFT_FileDetail_Mandate
                join mSKS_EFT_FileDetail_CustAddress
                where mSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                    mSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                    mSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary &&
                    msks_EFT_FileDetail_Mandate.RefRecId == mSKS_EFT_FileDetail.RecId &&
                    mSKS_EFT_FileDetail_CustAddress.RefRecId == mSKS_EFT_FileDetail.RecId;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>