<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_LB_ReadFileCAMT54V1</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Contains reading process of CAMT54V1 files.
/// </summary>
class SKS_LB_ReadFileCAMT54V1 extends SKS_LB_ReadFileCAMT54
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>processNode</Name>
				<Source>
  <![CDATA[
    public void processNode(System.Xml.XmlNode _XmlNode)
    {
        System.Xml.XmlNode locParentXMLNode;
        SKS_LB_CustomerMatching sks_lb_customermatching;
        System.Xml.XmlNode  locXMLNode;
        str                 locNodeName;
        System.Xml.XmlNode locGrandParentXMLNode;
        System.Xml.XmlNode locGreatGrandParentXMLNode;
        System.Xml.XmlNode locGreatGreatGrandParentXMLNode;
        str locTempGreatGreatGrandParentNodeName;
        str locTempGreatGrandParentNodeName;
        str locTempGrandParentNodeName;
        Str locTempParentNodeName;
        Str locTempNodeName;
        str InnerText;
        locParentXMLNode = _XmlNode.get_ParentNode();
        locTempParentNodeName = locParentXMLNode.get_Name();
        locTempNodeName = _XmlNode.get_Name();

        if(locParentXMLNode != null)
        {
            locTempParentNodeName = locParentXMLNode.get_Name();
            locTempParentNodeName = strUpr(locTempParentNodeName);
            locGrandParentXMLNode = locParentXMLNode.get_ParentNode();
            if(locGrandParentXMLNode != null)
            {
                locTempGrandParentNodeName = locGrandParentXMLNode.get_Name();
                locTempGrandParentNodeName = strUpr(locTempGrandParentNodeName);
                locGreatGrandParentXMLNode = locGrandParentXMLNode.get_ParentNode();
                if(locGreatGrandParentXMLNode != null)
                {
                    locTempGreatGrandParentNodeName = locGreatGrandParentXMLNode.get_Name();
                    locTempGreatGrandParentNodeName = strUpr(locTempGreatGrandParentNodeName);
                    locGreatGreatGrandParentXMLNode = locGreatGrandParentXMLNode.get_ParentNode();
                    if(locGreatGreatGrandParentXMLNode != null)
                    {
                        locTempGreatGreatGrandParentNodeName = locGreatGreatGrandParentXMLNode.get_Name();
                        locTempGreatGreatGrandParentNodeName = strUpr(locTempGreatGreatGrandParentNodeName);
                    }
                }
            }
        }

        switch(strUpr(locTempNodeName))
        {
            case 'DOCUMENT', 'BkToCstmrDbtCdtNtfctnV01', 'NTFCTN', 'AmtDtls', 'PrtryAmt', 'TtlNtriesPerBkTxCd', 'TxsSummry',
                 'RltdPties', 'Dbtr', 'DbtrAcct', 'RltdAgts', 'DbtrAgt', 'CmbndId', 'RmtInf', 'RfrdDocInf',
                 'Acct', 'Refs', 'Svcr', 'FinInstnId', 'ClrSysMmbld', 'Btch', 'TxAmt',  'RltdDts', 'PrtryAcct', 'Prtry':
                this.EnterChildNode(_XmlNode);
                break;
            case 'NTRY':
                this.EnterChildNode(_XmlNode);
                break;
            case 'Dt':
                if(strUpr(locTempParentNodeName) == 'ValDt'
                    && strUpr(locTempGrandParentNodeName) == 'NTRY'
                    && strUpr(locTempGreatGrandParentNodeName) == 'NTFCTN' )
                {
                    this.ReadOneField(_XmlNode.get_InnerText(), SKS_LB_FieldType::HeadDateYYYYMMDD);
                }
                break;
            case 'MsgId':
                if(strUpr(locTempParentNodeName) == 'Refs'
                    && strUpr(locTempGrandParentNodeName) == 'TxDtls'
                    && strUpr(locTempGreatGrandParentNodeName) == 'Ntry' )
                {
                    if(Fileformat.CAMTChkNumType == SKS_LB_CAMTChkNumType::MsgId)
                    {
                        this.ReadOneField(_XmlNode.get_InnerText(), SKS_LB_FieldType::CheckNumber);
                    }
                    this.ReadOneField(_XmlNode.get_InnerText(), SKS_LB_FieldType::PaymentType);
                }
                break;
            case 'Amt':
                if(strUpr(locTempParentNodeName) == 'PrtryAmt'
                    && strUpr(locTempGrandParentNodeName) == 'AmtDtls'
                    && strUpr(locTempGreatGrandParentNodeName) == 'Ntry' )
                {
                    this.ReadOneField(_XmlNode.get_InnerText(), SKS_LB_FieldType::BankPmtTotal);
                }
                else if(strUpr(locTempParentNodeName) == 'TxAmt'
                    && strUpr(locTempGrandParentNodeName) == 'AmtDtls'
                    && strUpr(locTempGreatGrandParentNodeName) == 'TxDtls' )
                {
                    this.ReadOneField(_XmlNode.get_InnerText(), SKS_LB_FieldType::CheckAmount);
                }
                // SKS_19380_FlintfoxAresInvoiceApplicaiton
                // TODO: BUG
                else if(strUpr(locTempParentNodeName) == 'TxAmt'
                       && strUpr(locTempGrandParentNodeName) == 'AmtDtls'
                       && strUpr(locTempGreatGrandParentNodeName) == 'Ntry' )
                {
                    this.ReadOneField(_XmlNode.get_InnerText(), SKS_LB_FieldType::CheckAmount);
                }
                // SKS_19380_FlintfoxAresInvoiceApplicaiton
                break;
            case 'TxDtls':
                this.EnterChildNode(_XmlNode);
                if(ValidAcctPathcombo)
                {
                    importing.ParentRecid = parentRecid;
                    importing.insert();
                }
                importing.InvAmount = 0;
                importing.InvoiceNumber = '';
                importing.LBInvoice = '';
                importing.DiscAmount = 0;
                importing.Description = '';
                importing.CustName = '';
                importing.CustAccount = '';
                importing.BankPmtTotal = 0;
                importing.CustBankAccountNum = '';
                importing.CustBankRegNum = '';
                importing.PaymNote = '';
                importing.InvSettleType = SKS_LB_Invoicesettletype::Debit;
                parentRecid++;
                break;
            case 'Nm':
                if(strUpr(locTempParentNodeName) == 'Dbtr'
                    && strUpr(locTempGrandParentNodeName) == 'RltdPties'
                    && strUpr(locTempGreatGrandParentNodeName) == 'TxDtls' )
                {
                    InnerText = _XmlNode.get_InnerText();
                    if(importing.CustAccount == '' && InnerText != '')
                    {
                        SKS_LB_Bank lbBank;

                        if (SKS_BF_BankIntType == SKS_BF_BankIntType::FileHubLocal)
                        {
                            select firstOnly lbBank where lbBank.LBPath == lbPath && lbBank.LBFormatId == FormatId;
                        }
                        else
                        {
                            select firstOnly lbBank where lbBank.LBBankFabricLocation == lbPath && lbBank.LBFormatId == FormatId;
                        }

                        container virtualCompanyCompanies = SKS_LB_54000Bas::LBFindSharedServiceCompanies(lbBank);

                        sks_lb_customermatching = new sks_lb_customermatching();
                        SKS_LB_CustomerMatching.GetSetCrossCompanyContainer(virtualCompanyCompanies);
                        sks_lb_customermatching.CustNameMatch(InnerText);

                        if(sks_lb_customermatching.ParmCustomerName() != '')
                        {
                            this.ReadOneField(sks_lb_customermatching.ParmCustomerName(), SKS_LB_FieldType::CustomerName);
                        }
                        this.ReadOneField(sks_lb_customermatching.ParmAccountNum(), SKS_LB_FieldType::CustomerId);
                    }
                }
                break;
            case 'Id':
                if(strUpr(locTempParentNodeName) == 'PrtryAcct'
                        && strUpr(locTempGrandParentNodeName) == 'Id'
                        && strUpr(locTempGreatGrandParentNodeName) == 'Acct' )
                {
                    InnerText = _XmlNode.get_InnerText();
                    this.ReadOneField(InnerText, SKS_LB_FieldType::LBBankAccount);
                    ValidAcctPathcombo = this.validatepathacctcombo(lbPath);
                }
                else
                {
                    this.EnterChildNode(_XmlNode);
                }
                break;
            case 'BIC':
                if(strUpr(locTempParentNodeName) == 'CmbndId'
                    && strUpr(locTempGrandParentNodeName) == 'FinInstnId'
                    && strUpr(locTempGreatGrandParentNodeName) == 'DbtrAgt' )
                {
                    this.ReadOneField(_XmlNode.get_InnerText(), SKS_LB_FieldType::BankTransit_RoutingNumber);
                }
                break;
            case 'ValDt':
                if(strUpr(locTempParentNodeName) == 'NTRY'
                    && strUpr(locTempGrandParentNodeName) == 'NTFCTN')
                {
                    // SKS_19380_FlintfoxAresInvoiceApplicaiton
                    // TODO: BUG
                    //this.ReadOneField(_XmlNode.get_InnerText(), SKS_LB_FieldType::BankAccountNumber);
                    this.ReadOneField(_XmlNode.get_InnerText(), SKS_LB_FieldType::DateYYYY_MM_DD);
                    // SKS_19380_FlintfoxAresInvoiceApplicaiton
                }
                else
                {
                    this.EnterChildNode(_XmlNode);
                }
                break;
            case 'Strd':
                this.EnterChildNode(_XmlNode);
                locXMLNode = _XmlNode.get_NextSibling();
                if(locXMLNode != null)
                {
                    locNodeName = locXMLNode.get_Name();
                    if(strUpr(locNodeName) == 'Strd')
                    {
                        importing.ParentRecid = parentRecid;
                        if(ValidAcctPathcombo)
                        {
                            importing.insert();
                        }
                        importing.InvAmount = 0;
                        importing.InvoiceNumber = '';
                        importing.LBInvoice = '';
                        importing.DiscAmount = 0;
                        importing.Description = '';
                        importing.InvSettleType = SKS_LB_Invoicesettletype::Debit;
                    }
                }
                break;
            case 'Ref':
                if(strUpr(locTempParentNodeName) == 'Prtry'
                    && strUpr(locTempGrandParentNodeName) == 'Refs'
                    && strUpr(locTempGreatGrandParentNodeName) == 'TxDtls' )
                {
                    importing.FileLineNbrBegin = FileRecNum;
                    FileRecNum++;
                    this.ReadOneField(_XmlNode.get_InnerText(), SKS_LB_FieldType::Note);
                }
                break;
            case 'Ustrd':
                importing.FileLineNbrBegin = FileRecNum;
                FileRecNum++;
                this.ReadOneField(_XmlNode.get_InnerText(), SKS_LB_FieldType::Note);
                break;
            case 'RfrdDocNb':
                if(strUpr(locTempParentNodeName) == 'RfrdDocInf'
                    && strUpr(locTempGrandParentNodeName) == 'Strd'
                    && strUpr(locTempGreatGrandParentNodeName) == 'RmtInf' )
                {
                    this.ReadOneField(_XmlNode.get_InnerText(), SKS_LB_FieldType::InvNumber);
                }
                break;
            case 'RfrdDocAmt':
                this.EnterChildNode(_XmlNode);
                break;
            case 'DscntApldAmt':
                if(strUpr(locTempParentNodeName) == 'RfrdDocAmt'
                    && strUpr(locTempGrandParentNodeName) == 'RfrdDocInf'
                    && strUpr(locTempGreatGrandParentNodeName) == 'Strd' )
                {
                    this.ReadOneField(_XmlNode.get_InnerText(), SKS_LB_FieldType::DiscAmt);
                }
                break;
            case 'RmtdAmt':
                if(strUpr(locTempParentNodeName) == 'RfrdDocAmt'
                    && strUpr(locTempGrandParentNodeName) == 'RfrdDocInf'
                    && strUpr(locTempGreatGrandParentNodeName) == 'Strd' )
                {
                    this.ReadOneField(_XmlNode.get_InnerText(), SKS_LB_FieldType::InvAmt);
                }
                break;
            case 'CdtNoteAmt':
                if(strUpr(locTempParentNodeName) == 'RfrdDocAmt'
                    && strUpr(locTempGrandParentNodeName) == 'RfrdDocInf'
                    && strUpr(locTempGreatGrandParentNodeName) == 'Strd' )
                {
                    this.ReadOneField(_XmlNode.get_InnerText(), SKS_LB_FieldType::InvAmt);
                }
                break;
            case 'ChqNb':
                if(strUpr(locTempParentNodeName) == 'Refs'
                    && strUpr(locTempGrandParentNodeName) == 'TxDtls'
                    && strUpr(locTempGreatGrandParentNodeName) == 'Ntry' )
                {
                    if(Fileformat.CAMTChkNumType == SKS_LB_CAMTChkNumType::ChqNb)
                    {
                        this.ReadOneField(_XmlNode.get_InnerText(), SKS_LB_FieldType::CheckNumber);
                    }
                }
                break;
            case 'AcctSvcrRef':
                if(strUpr(locTempParentNodeName) == 'Ntry'
                    && strUpr(locTempGrandParentNodeName) == 'Ntfctn')
                {
                    if(Fileformat.CAMTChkNumType == SKS_LB_CAMTChkNumType::AcctSvcrRef)
                    {
                        this.ReadOneField(_XmlNode.get_InnerText(), SKS_LB_FieldType::CheckNumber);
                    }
                }
                else if(strUpr(locTempParentNodeName) == 'Refs'
                    && strUpr(locTempGrandParentNodeName) == 'TxDtls'
                    && strUpr(locTempGreatGrandParentNodeName) == 'Ntry' )
                {
                    this.ReadOneField(_XmlNode.get_InnerText(), SKS_LB_FieldType::BankAccountNumber);
                }
                break;
            case 'IBAN':
                if(strUpr(locTempParentNodeName) == 'Id'
                    && strUpr(locTempGrandParentNodeName) == 'DbtrAcct'
                    && strUpr(locTempGreatGrandParentNodeName) == 'RltdPties' )
                {
                    this.ReadOneField(_XmlNode.get_InnerText(), SKS_LB_FieldType::BankAccountNumber);
                }
                break;
            case 'NbOfTxs':
                if(strUpr(locTempParentNodeName) == 'Btch'
                    && strUpr(locTempGrandParentNodeName) == 'TxDtls'
                    && strUpr(locTempGreatGrandParentNodeName) == 'Ntry')
                {
                    this.ReadOneField(_XmlNode.get_InnerText(), SKS_LB_FieldType::BankPmtCnt);
                }
                break;
            case 'TxDtTm':
                if(strUpr(locTempParentNodeName) == 'RltdDts'
                    && strUpr(locTempGrandParentNodeName) == 'TxDtls'
                    && strUpr(locTempGreatGrandParentNodeName) == 'Ntry')
                {
                    this.ReadOneField(_XmlNode.get_InnerText(), SKS_LB_FieldType::DateYYYYMMDD);
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>RetrieveBankAccountNumberFromFile</Name>
				<Source><![CDATA[
    container RetrieveBankAccountNumberFromFile()
    {
        container   BankAcctCon;
        System.Xml.XmlDocument  locXmlDocument = new System.Xml.XmlDocument();
        System.Xml.XmlNode      locXMLNode;
        System.Xml.XmlNodeList  xmlNodeList;
        
        SKS_EB_BankIntegOptWithNoLicense bankIntOption = SKS_EB_FileStorage::find().StorageOption_LB;

        if(bankIntOption == SKS_EB_BankIntegOptWithNoLicense::BankFabricEnumValue)
        {
            SKS_BF_BankIntType = SKS_BF_BankIntType::BankFabric;
        }

        SKS_EB_FileHub lFileHub = SKS_EB_FileHub::construct(SKS_BF_BankIntType);
        
        int                     countxml;
        int                     iter;
        str                     TmpAcct;
        str                     NodeName;
        boolean                 NoteIDFound;

        lFileHub.runFileLoad(Filename);
        locXmlDocument.LoadXML(lFileHub.fileBody());

        if(locXmlDocument.get_HasChildNodes())
        {
            xmlNodeList = locXmlDocument.GetElementsByTagName('Ntfctn');
            countxml = xmlNodeList.get_Count();
            for(iter = 0; iter < countxml; iter++)
            {
                NoteIDFound = false;
                locXMLNode = xmlNodeList.Item(iter);
                locXMLNode = locXMLNode.get_FirstChild();
                while(locXMLNode != null)
                {
                    NodeName = locXMLNode.get_Name();
                    if(NodeName == 'Acct')
                    {
                        locXMLNode = this.EnterChildNodeBankAcct(locXMLNode);
                        NodeName = locXMLNode.get_Name();
                        if(NodeName == 'Id')
                        {
                            locXMLNode = this.EnterChildNodeBankAcct(locXMLNode);
                            NodeName = locXMLNode.get_Name();
                            if(NodeName == 'PrtryAcct')
                            {
                                locXMLNode = this.EnterChildNodeBankAcct(locXMLNode);
                                NodeName = locXMLNode.get_Name();
                                if(NodeName == 'Id')
                                {
                                    TmpAcct = locXMLNode.get_InnerText();
                                    if(conFind(BankAcctCon, TmpAcct) == 0)//Makes sure the account number is unique and not already in the container
                                    {
                                        BankAcctCon += TmpAcct;
                                        if(!FileFormat.VerifyAcct)
                                        {
                                            iter = countxml;
                                        }
                                        noteIDFound = true;
                                    }
                                }
                            }
                        }
                    }
                    locXMLNode = locXMLNode.get_NextSibling();
                }
            }
        }

        return BankAcctCon;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>