<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_AU_COMMBANK_CSV</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_AU_COMMBANK_CSV
/// </summary>
class SKS_EFT_Format_AU_COMMBANK_CSV extends SKS_EFT_Format
{
    #define.FormatVersion('20221212')
    #define.Separator(',')
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wrapField</Name>
				<Source><![CDATA[
    private str wrapField(str _field = '', int length = 0,  boolean _addSeparator = true)
    {
        str text;

        if(_addSeparator)
        {
            if(length != 0)
            {
                text = subStr(_field, 1, length) + #Separator;
            }
            else
            {
                text = _field + #Separator;
            }
        }
        else
        {
            text = _field;
        }

        return text;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    protected void formatStructure()
    {
        CompanyBankAccountId    prevBankAccountId;

        while(mSKS_EFT_FileDetail)
        {
            // Get SKS_EFT_FileFormatPaymSpec
            this.getSKS_EFT_FileFormatPaymSpec();

            mSKS_EFT_FileDetail_BankAccount = SKS_EFT_FileDetail_BankAccount::find(mSKS_EFT_FileDetail.RecId);

            if(prevBankAccountId != mSKS_EFT_FileDetail.BankAccountId)
            {
                // Header Record
                this.node_Header();
    
                prevBankAccountId = mSKS_EFT_FileDetail.BankAccountId;
            }

            // Payment Details
            this.rec_PaymentDetails();

            next mSKS_EFT_FileDetail;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_Header</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_Header
    /// </summary>
    /// <returns>true</returns>
    boolean node_Header()
    {
        //----------------------------------------------
        //1 	Record Type
        //2 	File Creation Date
        //3 	File Creation Time
        //4 	File Number
        //5 	Payment Account
        //6 	Payment Date
        //7 	Number of Payment Records
        //8 	Total Amount of Payments
        //-----------------------------------------------
        SKS_EFT_FileDetail tmpSKS_EFT_FileDetail;

        System.Text.StringBuilder sb = new System.Text.StringBuilder();


        //1 	Record Type
        sb.Append(this.wrapField('01'));

        //2 	File Creation Date
        sb.Append(this.wrapField(SKS_PP_StringFormats::strDateYYYYMMDD(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()), DateSeparator::None)));        
        
        //3 	File Creation Time
        sb.Append(this.wrapField(SKS_PP_StringFormats::strTimeHHMMSS()));

        //4 	File Number
        sb.Append(this.wrapField(SKS_PP_StringFormats::strFill(3, SKS_EFT_Format::getCodelookupvalue('NextSequenceNumber', mSKS_EFT_FileDetail.RecId), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left)));

        //5 	Payment Account
        sb.Append(this.wrapField(strRem(strRem(mSKS_EFT_FileDetail.BankBankTransit + mSKS_EFT_FileDetail.BankBankAcct, '-'), ' '), 20));

        //6 	Payment Date
        sb.Append(this.wrapField(SKS_PP_StringFormats::strDateYYYYMMDD(mSKS_EFT_FileDetail.PaymentTransDate, DateSeparator::None)));

        select COUNT(InvoiceOrigAmountCur), SUM(InvoiceSettleAmountPmtCur) from tmpSKS_EFT_FileDetail
            where
                tmpSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                tmpSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                tmpSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary &&
                tmpSKS_EFT_FileDetail.BankAccountId == mSKS_EFT_FileDetail.BankAccountId;
        //7 	Number of Payment Records
        sb.Append(this.wrapField(num2str(tmpSKS_EFT_FileDetail.InvoiceOrigAmountCur,0,0,0,0), 6));      

        //8 	Total Amount of Payments
        sb.Append(this.wrapField(strRem(num2str(tmpSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1, 1, 2, 1, 0), '.'), 12, false));
        

        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_PaymentDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_PaymentDetails
    /// </summary>
    /// <returns>true</returns>
    boolean rec_PaymentDetails()
    {
        //1 	Record Type
        //2 	Payment Instruction Type
        //3 	BPAY Transaction Type
        //4 	Payer Institution Code
        //5 	Payment Account Detail
        //6 	Country of Payment
        //7 	State of Payment
        //8 	Currency Code of Payment
        //9 	Biller Code
        //10 	Service Code
        //11 	Customer Reference Number
        //12 	Payment Method
        //13 	Entry Method
        //14 	Amount
        //15 	Transaction Reference Number
        //16 	Original Reference Number
        //17 	BPAY Settlement Date
        //18 	Date  Payment Accepted
        //19 	Time  Payment Accepted
        //20 	Payer Name
        //21 	Additional Reference Code
        //22 	Error Correction Reason
        //23 	Discount Method
        //24 	Discount Reference
        //25 	Discretionary Data
        //----------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        str billerCode;

        //1 	Record Type
        sb.Append(this.wrapField('50'));

        //2 	Payment Instruction Type
        sb.Append(this.wrapField(''));

        //3 	BPAY Transaction Type
        sb.Append(this.wrapField(''));

        //4 	Payer Institution Code
        sb.Append(this.wrapField(''));

        //5 	Payment Account Detail
        sb.Append(this.wrapField(''));

        //6 	Country of Payment
        sb.Append(this.wrapField(''));

        //7 	State of Payment
        sb.Append(this.wrapField(''));

        //8 	Currency Code of Payment
        sb.Append(this.wrapField(''));

        //9 	Biller Code
        billerCode = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('BillerCode', mSKS_EFT_FileDetail.RecId));
        sb.Append(this.wrapField(billerCode));

        //10 	Service Code
        sb.Append(this.wrapField(''));

        //11 	Customer Reference Number
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.PaymId, 20));      //SKS#DevOps:17585

        //12 	Payment Method
        sb.Append(this.wrapField(''));

        //13 	Entry Method
        sb.Append(this.wrapField(''));

        //14 	Amount
        sb.Append(this.wrapField(strRem(num2str(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1, 1, 2, 1, 0), '.'), 12, false));

        //15 	Transaction Reference Number
        sb.Append(this.wrapField(''));

        //16 	Original Reference Number
        sb.Append(this.wrapField(''));

        //17 	BPAY Settlement Date
        sb.Append(this.wrapField(''));

        //18 	Date  Payment Accepted
        sb.Append(this.wrapField(''));

        //19 	Time  Payment Accepted
        sb.Append(this.wrapField(''));

        //20 	Payer Name
        sb.Append(this.wrapField(''));

        //21 	Additional Reference Code
        sb.Append(this.wrapField(''));

        //22 	Error Correction Reason
        sb.Append(this.wrapField(''));

        //23 	Discount Method
        sb.Append(this.wrapField(''));

        //24 	Discount Reference
        sb.Append(this.wrapField(''));

        //25 	Discretionary Data
        sb.Append(this.wrapField('', 0, false));


        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectPaymentRecords</Name>
				<Source><![CDATA[
    [SuppressBPWarning('BPErrorSelectUsingFirstOnly', 'The buffer is used in next statement or in a datasource query loop.')]
    protected void selectPaymentRecords()
    {
        //------------------------------------------------------------------------------------------------------
        // Standard payment selction
        // Override if different selection is need for a format
        //------------------------------------------------------------------------------------------------------
    
        //Order by clause must match the clause in the SKS_EFT_Processing.SumByPayment
        select * from mSKS_EFT_FileDetail
            join mSKS_EFT_FileDetail_VendAddress
            join mSKS_EFT_FileDetail_BenBank
              order by mSKS_EFT_FileDetail.RecordSection,
                   mSKS_EFT_FileDetail.PaymMode,
                   mSKS_EFT_FileDetail.BankAccountId,
                   mSKS_EFT_FileDetail.PaymentCurrencyCode,
                   mSKS_EFT_FileDetail.PaymSpec,
                   mSKS_EFT_FileDetail.EffectiveDate,
                   mSKS_EFT_FileDetail.DepCountryRegionId,
                   mSKS_EFT_FileDetail.RecordType,
                   mSKS_EFT_FileDetail.AccountNum,
                   mSKS_EFT_FileDetail.PaymentReference,
                   mSKS_EFT_FileDetail.RecId
          where mSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                mSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                mSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_VendAddress.RefRecId &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_BenBank.RefRecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>