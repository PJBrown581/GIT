<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_CustDirectMandate_EventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_CustDirectMandate_EventHandler
{  
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>CustDirectDebitMandate_Post_init</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="args"></param>
    [PostHandlerFor(formStr(CustDirectDebitMandate), formMethodStr(CustDirectDebitMandate, init))]
    public static void CustDirectDebitMandate_Post_init(XppPrePostArgs args)
    {
        FormRun formRun = args.getThis();
        FormDesign formDesign = formRun.design(0);
        FormControl identification = formDesign.controlName(formControlStr(CustDirectDebitMandate, Identification));
        FormControl customerAccount = formDesign.controlName(formControlStr(CustDirectDebitMandate, CustomerAccount));
        FormControl custDirectDebitMandate_CustAccount = formDesign.controlName(formControlStr(CustDirectDebitMandate, CustDirectDebitMandate_CustAccount));
        FormControl sks_DD_CustomerSettings = formDesign.controlName(formControlStr(CustDirectDebitMandate, SKS_DD_CustomerSettings));
        FormControl sks_DD_Default = formDesign.controlName(formControlStr(CustDirectDebitMandate, SKS_DD_CustomerSettings_SKS_DD_Default));//Sks_7471

        // Based on the caller customer account field on direct debit mandate form will be enabled.
        if ((SKS_PP_setup::find().RegAREFT))
        {
            if (formRun.args().menuItemName() == menuitemDisplayStr(SKS_DD_MandatesNew) || 
                formRun.args().menuItemName() == menuitemDisplayStr(SKS_DD_MandatesEdit))
            {
                customerAccount.allowEdit(true);
                identification.allowEdit(true);                
            }
            else
            {
                customerAccount.allowEdit(false);

                // 21112
                if (!NumberSequenceTable::find(CustParameters::numRefCustMandateId().NumberSequenceId).numAllowEdit())
                {
                    identification.allowEdit(false);
                }
            }
            
            custDirectDebitMandate_CustAccount.visible(true);
            sks_DD_CustomerSettings.visible(true);
            
            //Sks_7471 -->
            if (formRun.args().callerName() == 'CustTable')
            {
                sks_DD_Default.visible(false);
            }
            //Sks_7471 <--
        }
        else
        {
            custDirectDebitMandate_CustAccount.visible(false);
            sks_DD_CustomerSettings.visible(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>CustDirectDebitMandate_OnClosing</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormEventHandler(formStr(CustDirectDebitMandate), FormEventType::Closing)]
    public static void CustDirectDebitMandate_OnClosing(xFormRun sender, FormEventArgs e)
    {
        FormRun formRun;
        CustDirectDebitMandate custDirectDebitMandateTable;
        common currentRecord;
        RefRecId mandateRecid;
        int position;
        
        // Get an instance of the calling form.
        formRun = sender.args().caller();

        // If the caller is a form, refresh that form.
        if (formRun)
        {
            if (sender.args().menuItemName() == menuitemDisplayStr(SKS_DD_MandatesEdit) || 
                sender.args().menuItemName() == menuitemDisplayStr(SKS_DD_Mandatesview))
            {
                currentRecord = formRun.dataSource().cursor();
                mandateRecid = currentRecord.RecId;
                custDirectDebitMandateTable = CustDirectDebitMandate::find(mandateRecid);

                formRun.dataSource().findRecord(custDirectDebitMandateTable);
                position =  formRun.dataSource().getPosition();
                formRun.dataSource().research(true);
                formRun.dataSource().reread();
                formRun.dataSource().research(true);
                formRun.dataSource().setPosition(position);
            }
        }       
    }

]]></Source>
			</Method>
			<Method>
				<Name>CustDirectDebitMandate_OnQueryExecuting</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormDataSourceEventHandler(formDataSourceStr(CustDirectDebitMandate, CustDirectDebitMandate), FormDataSourceEventType::QueryExecuting)]
    public static void CustDirectDebitMandate_OnQueryExecuting(FormDataSource sender, FormDataSourceEventArgs e)
    {       
        CustDirectDebitMandate custDirectDebitMandateTableloc;
        FormRun formRun = sender.formRun();
        FormDataSource custDirectDebitMandate_ds = sender;

        // This method used the point the corresponding record on listpage during edit and view.
        if (formRun.args().menuItemName() == menuitemDisplayStr(SKS_DD_MandatesEdit) || 
            formRun.args().menuItemName() == menuitemDisplayStr(SKS_DD_MandatesView))
        {
            custDirectDebitMandateTableloc = formRun.args().record();

            if (custDirectDebitMandateTableloc)
            {
                sender.query().dataSourceName(custDirectDebitMandate_ds.name()).addRange(fieldnum(CustDirectDebitMandate, RecId)).value(queryValue(custDirectDebitMandateTableloc.RecId));
            }
        }       
    }

]]></Source>
			</Method>
			<Method>
				<Name>CustDirectDebitMandate_onValidatedWrite</Name>
				<Source><![CDATA[
    /// <summary>
    ///update customer mandate
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    /// Sks_7471
    [DataEventHandler(tableStr(CustDirectDebitMandate), DataEventType::ValidatedWrite)]
    public static void CustDirectDebitMandate_onValidatedWrite(Common sender, DataEventArgs e)
    {
        SKS_CustDirectMandate_EventHandler::UpdateDefaultMandate(sender);
    }

]]></Source>
			</Method>
			<Method>
				<Name>CustDirectDebitMandate_Post_insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// update customer mandate
    /// </summary>
    /// <param name="args"></param>
    /// Sks_7471
    [PostHandlerFor(tableStr(CustDirectDebitMandate), tableMethodStr(CustDirectDebitMandate, insert))]
    public static void CustDirectDebitMandate_Post_insert(XppPrePostArgs args)
    {
        CustDirectDebitMandate custDirectDebitMandate = args.getThis() as CustDirectDebitMandate ;
        CustDirectDebitMandate.reread();
        SKS_CustDirectMandate_EventHandler::UpdateDefaultMandate(CustDirectDebitMandate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>UpdateDefaultMandate</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// Sks_7471
    public static void UpdateDefaultMandate(CustDirectDebitMandate _custDirectDebitMandate)
    {
        CustDirectDebitMandate custDirectDebitMandateOldDefault;
        CustDirectDebitMandate existingMandates;
        CustTable custTable;
      
        ttsbegin;
        custTable = CustTable::find(_custDirectDebitMandate.CustAccount, true);

        if (_custDirectDebitMandate.SKS_DD_Default == NoYes::Yes && _custDirectDebitMandate.RecId)
        {
            update_recordset custDirectDebitMandateOldDefault
                setting SKS_DD_Default = NoYes::No
                where custDirectDebitMandateOldDefault.CustAccount  == _custDirectDebitMandate.CustAccount &&
                    custDirectDebitMandateOldDefault.SKS_DD_Default   == NoYes::Yes &&
                    custDirectDebitMandateOldDefault.MandateReference != _custDirectDebitMandate.MandateReference;
            
            custTable.DefaultDirectDebitMandate  = _custDirectDebitMandate.Recid;   
        }
        else if (_custDirectDebitMandate.RecId)  //Devops 15091
        {
            select count(RecId) from existingMandates
                where existingMandates.CustAccount == _custDirectDebitMandate.CustAccount;

            if (existingMandates.RecId == 1 && _custDirectDebitMandate.RecId == custTable.DefaultDirectDebitMandate && 
                _custDirectDebitMandate.SKS_DD_Default == NoYes::No && _custDirectDebitMandate.orig().SKS_DD_Default == NoYes::No)
            {
                _custDirectDebitMandate.selectForUpdate(true);
                _custDirectDebitMandate.SKS_DD_Default = NoYes::Yes;
                _custDirectDebitMandate.doUpdate();
                _custDirectDebitMandate.reread();
            }
            else if (_custDirectDebitMandate.RecId == custTable.DefaultDirectDebitMandate)
            {
                custTable.DefaultDirectDebitMandate = 0;        
            }
        }

        custTable.doUpdate();
        custTable.reread();
        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>