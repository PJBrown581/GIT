<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_UK_RBS_MT103</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_UK_RBS_MT103 extends SKS_EFT_Format
/// </summary>
class SKS_EFT_Format_UK_RBS_MT103 extends SKS_EFT_Format
{
    #define.FormatVersion('20220603')
    #define.SIP('SIP')
    #define.FDFP('FDFP')
    #define.CHAPS('CHAPS')
    #define.SIAT('SIAT')   
    #define.CIAT('CIAT') 
    #define.INTL('INTL')

    BankAccountTable        mBankAccountTable;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    protected void formatStructure()
    {
        while(mSKS_EFT_FileDetail)
        {
            // Get SKS_EFT_FileFormatPaymSpec
            this.getSKS_EFT_FileFormatPaymSpec();

            // Get SKS_EFT_VendorPaym
            this.getSKS_EFT_VendorPaym();
    
            // Get SKS_EFT_Bank
            this.getSKS_EFT_Bank();
            
            // Get Bank account
            mBankAccountTable = BankAccountTable::find(mSKS_EFT_FileDetail.BankAccountId);

            this.rec_BasicHeaderBlock();

            this.rec_ApplicationHeaderBlock();            
    
            this.rec_TextBlock();
    
            next mSKS_EFT_FileDetail;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_BasicHeaderBlock</Name>
				<Source><![CDATA[
    private void rec_BasicHeaderBlock()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
    
        //Block Id
        sb.Append('{1:');
    
        //Application ID
        sb.Append('F');

        //Service ID
        sb.Append('01');

        //Service Identifier
        sb.Append(subStr(mBankAccountTable.SWIFTNo, 1, 12));

        //Service number
        sb.Append('0000');

        //Sequence number
        sb.Append('000000');

        //Block Terminato
        sb.Append('}');

        this.fileWrite(sb.ToString());
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_ApplicationHeaderBlock</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    private void rec_ApplicationHeaderBlock()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();

        //Block Id
        sb.Append('{2:');
    
        //I_O_TYPE
        sb.Append('I');

        //MESSAGE_TYPE
        sb.Append('103');

        //RECEIVER_ADDRESS
        sb.Append(subStr(mSKS_EFT_FileDetail.DepSwiftNo, 1, 12));

        //MESSAGE _PRIORITY
        sb.Append('N');       

        //Block Terminator
        sb.Append('}');

        this.fileWrite(sb.ToString());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceDetails</Name>
				<Source><![CDATA[
    private str getInvoiceDetails()
    {
        SKS_EFT_FileDetail invSKS_EFT_FileDetail;
        str invDetailsString;
        boolean firstRec = true;
    
        while select InvoiceNumber, EffectiveDate, InvoiceSettleAmountPmtCur, PaymentCurrencyCode from invSKS_EFT_FileDetail
            where invSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId
               && invSKS_EFT_FileDetail.InvoiceNumber != ''
        {
            invDetailsString += strFmt('%1, %2, %3 ', SKS_PP_StringFormats::strDateYYMMDD(invSKS_EFT_FileDetail.EffectiveDate), invSKS_EFT_FileDetail.InvoiceNumber, num2str(invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1,0,2,2,0));
        }
        if(invDetailsString)
        {
            invDetailsString = subStr(invDetailsString, 1, strLen(invDetailsString)-2);
        }
        return invDetailsString;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Beneficiary</Name>
				<Source><![CDATA[
    private void rec_Beneficiary()
    {
        //------------------------------------------------------------------
        //  :59:Beneficiary Account
        //  Beneficiary Name/Address
        //------------------------------------------------------------------
        
        //  :59:Beneficiary Account
        if(mSKS_EFT_FileDetail.DepBankIBAN != '')
        {
            this.fileWrite(':59:/' + subStr(mSKS_EFT_FileDetail.DepBankIBAN, 1, 34));
        }
        else
        {
            this.fileWrite(':59:/' + subStr(mSKS_EFT_FileDetail.DepBankAcct, 1, 8));
        }
    
        //  Beneficiary Name/Address
        if(mSKS_EFT_VendorPaym.WBeneName != '')
        {
            this.fileWrite(subStr(mSKS_EFT_VendorPaym.WBeneName, 1, 35)); 
        }

        if(mSKS_EFT_VendorPaym.WBeneAddr != '' || mSKS_EFT_VendorPaym.WBeneAddr2 != '')
        {
            this.fileWrite(subStr(strLRTrim(mSKS_EFT_VendorPaym.WBeneAddr + ' ' + mSKS_EFT_VendorPaym.WBeneAddr2), 1, 35));
        }

        if(mSKS_EFT_VendorPaym.WBeneCity != '' || mSKS_EFT_VendorPaym.WBeneZipPostal != '')
        {
            this.fileWrite(subStr(strLRTrim(mSKS_EFT_VendorPaym.WBeneCity + ' ' + mSKS_EFT_VendorPaym.WBeneZipPostal), 1, 35));
        }

        if(mSKS_EFT_VendorPaym.WBeneState != '' || mSKS_EFT_VendorPaym.WBeneCountryRegionId != '')
        {
            this.fileWrite(subStr(strLRTrim(mSKS_EFT_VendorPaym.WBeneState + ' ' + this.getLogisticsAddressCountryISO(mSKS_EFT_VendorPaym.WBeneCountryRegionId)), 1, 35));
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_TextBlock</Name>
				<Source><![CDATA[
    private void rec_TextBlock()
    {
        str amount;
        str value;
        
        //BLOCK_ID
        this.fileWrite('{4:');
    
        //  :20:Sender's reference Number
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #SIP)
        {
            value = '/SIP';
        }
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #FDFP)
        {
            value = '/FDP';
        }
        this.fileWrite(':20:' + subStr(mSKS_EFT_FileDetail.PaymentReference, 1, 16) + value);
        
        // :23B:CRED Bank Operation Code
        this.fileWrite(':23B:CRED');

        // :23E:Instruction Code
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CHAPS ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #INTL)
        {
            this.fileWrite(':23E:SDVA');
        }

        //  :32A:Value Date/Msg Date/Currency/Amount
        amount = num2str(-1 * mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur, 0, 2, 2, 0);
    
        this.fileWrite(':32A:' + SKS_PP_StringFormats::strDateYYMMDD(mSKS_EFT_FileDetail.EffectiveDate)
                               + mSKS_EFT_FileDetail.PaymentCurrencyCode
                               + amount);
    
        //:33B: Currency  / instructed amount 
        this.fileWrite(':33B:' + mSKS_EFT_FileDetail.PaymentCurrencyCode
                               + amount);

        this.rec_OrderingCustomer();

        //  :53B:Debit Account Identifier
        this.fileWrite(':53B:/' + subStr(mBankAccountTable.BankSortCode, 1, 6) + subStr(mSKS_EFT_FileDetail.BankBankAcct, 1, 8));
        
        // :57A: Account With Institution â€“ BIC or sort code
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #SIP  ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #FDFP)
        {
            this.fileWrite(':57A://' + subStr(mSKS_EFT_FileDetail.DepSwiftNo, 1, 11));
        }
    
        //  :59:Beneficiary Account/ Beneficiary Name / Address
        this.rec_Beneficiary();
    
        //  :70:Remittance Information
        this.rec_RemitInfo();
    
        //  :71A:Details of Charges
        value = SKS_EFT_Format::getCodelookupvalue('Charges', mSKS_EFT_FileDetail.RecId);

        if(value)
        {
            this.fileWrite(':71A:' + value);
        }
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #FDFP)
        {
            this.fileWrite(':72:/FDP/');
        }
    
        //  Text  Block Terminator
        this.fileWrite('-}');
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_OrderingCustomer</Name>
				<Source><![CDATA[
    private void rec_OrderingCustomer()
    {
        //------------------------------------------------------------------
        //  :50:Ordering Customer
        //  Ordering Customer Name/Address
        //------------------------------------------------------------------

        //  :50:Ordering Customer
        this.fileWrite(':50K:');

        //  Ordering Customer Name/Address
        if(mSKS_EFT_Bank.WOrdPartyName != '')
        {
            this.fileWrite(subStr(mSKS_EFT_Bank.WOrdPartyName, 1, 35));
        }
        
        if(mSKS_EFT_Bank.WOrdPartyAddr != '' || mSKS_EFT_Bank.WOrdPartyAddr2 != '')
        {
            this.fileWrite(subStr(strLRTrim(mSKS_EFT_Bank.WOrdPartyAddr + ' ' + mSKS_EFT_Bank.WOrdPartyAddr2), 1, 35));
        }

        if(mSKS_EFT_Bank.WOrdPartyCity != '' || mSKS_EFT_Bank.WOrdPartyZipCode != '')
        {
            this.fileWrite(subStr(strLRTrim(mSKS_EFT_Bank.WOrdPartyCity + ' ' + mSKS_EFT_Bank.WOrdPartyZipCode), 1, 35));
        }

        if(mSKS_EFT_Bank.WOrdPartyState != '' || mSKS_EFT_Bank.WOrdPartyCountryRegionId != '')
        {
            this.fileWrite(subStr(strLRTrim(mSKS_EFT_Bank.WOrdPartyState + ' ' + this.getLogisticsAddressCountryISO(mSKS_EFT_Bank.WOrdPartyCountryRegionId)), 1, 35));
        }
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_RemitInfo</Name>
				<Source><![CDATA[
    private void rec_RemitInfo()
    {
        str invNum;
    
        invNum = this.getInvoiceDetails();
        
        if(subStr(invNum, 1, 35) != '')
        {
            this.fileWrite(':70:/INV/' + subStr(invNum, 1, 35));
        }
        if(subStr(invNum, 36, 35) != '')
        {
            this.fileWrite(':70:/INV/' + subStr(invNum, 36, 35));
        }
        if(subStr(invNum, 71, 35) != '')
        {
            this.fileWrite(':70:/INV/' + subStr(invNum, 71, 35));
        }
        if(subStr(invNum, 106, 35) != '')
        {
            this.fileWrite(':70:/INV/' + subStr(invNum, 106, 35));
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>