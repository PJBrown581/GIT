<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EB_RunProcess</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_EB_RunProcess
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>runWindowsProcess</Name>
				<Source><![CDATA[
    static boolean runWindowsProcess(  FileName    _fileName
                                ,   str         _arguments
                                ,   int         _timeOut
                                ,   boolean     _waitForExit        = false)
    {
        System.Diagnostics.ProcessStartInfo processStartInfo;
        System.Diagnostics.Process          process;
        System.OperatingSystem              operatingSystem;
        System.Version                      operatingSystemVersion;
        System.Exception                    ex;
        boolean                             start;
        boolean                             ret = true;
        ;
    
        try
        {
            // Assert CLRInterop permission
            new InteropPermission(InteropKind::ClrInterop).assert();
    
            // BP deviation documented
            processStartInfo    = new System.Diagnostics.ProcessStartInfo(_fileName, _arguments);
    
            // BP deviation documented
            process             = new System.Diagnostics.Process();
    
            // Get an instance of the System.OperatingSystem class
            operatingSystem         = System.Environment::get_OSVersion();
    
            // Get the OS version number
            operatingSystemVersion  = operatingSystem.get_Version();
    
            // Attach the starting information to the process
            process.set_StartInfo(processStartInfo);
    
            // Start the process and wait for it to complete
            start = process.Start();
    
            // Wait for the process to finish
            if(_waitForExit)
            {
                if(_timeOut > 0)
                {
                    ret = process.WaitForExit(_timeOut * 60000); // convert minutes to milliseconds
                }
                else
                {
                    ret = process.WaitForExit(600000); // If no timeout, use 10 minutes
                }
    
                if(!ret)
                {
                    info("@SKS3753");
                }
            }
    
            // Revert permission
            CodeAccessPermission::revertAssert();
        }
        catch(Exception::CLRError)
        {
            // BP Deviation documented
            ex = ClrInterop::getLastException();
    
            while (ex != null)
            {
                info(ex.ToString());
    
                ex = ex.get_InnerException();
            }
    
            ret = false;
        }
    
        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>