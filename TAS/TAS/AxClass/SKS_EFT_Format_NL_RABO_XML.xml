<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_NL_RABO_XML</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_NL_RABO_XML extends SKS_EFT_Format_ISO_20022_001001003
/// </summary>
/// <summary>
/// SKS_EFT_Format_NL_RABO_XML extends SKS_EFT_Format_ISO_20022_001001003
/// </summary>
class SKS_EFT_Format_NL_RABO_XML extends SKS_EFT_Format_ISO_20022_001001003
{
    #define.FormatVersion('20220816')
    #define.EURPAY('EUR-PAY')
    #define.URGDOMEUR('URG-DOMEUR')
    #define.URGEUR('URG-EUR')
    #define.WORLDPAY('WORLD-PAY')
    #define.MULBNKPAY('MUL-BNKPAY')

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_GrpHdr_InitgPty_Id</Name>
				<Source><![CDATA[
    protected void node_GrpHdr_InitgPty_Id(XmlElement _nodeInitgPty)
    {
        //------------------------------------------------------------------------------------------------------
        //      1.8: InitgPty
        //          9.1.12: Id
        //              9.1.13: OrgId
        //                  9.1.15: Othr
        //                      9.1.1.16: Id
        //                      9.1.17: SchmeNm
        //                          9.1.18: Cd
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeId;
        XmlElement nodeOrgId;
        XmlElement nodeOther;
        XmlElement nodeSchmeNm;
        str initiatingPartyId;

        this.getSKS_EFT_FileFormatPaymSpec();

        initiatingPartyId = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('InitiatingPartyId', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank));

        if(initiatingPartyId != '' && mSKS_EFT_FileFormatPaymSpec.TransactionCode == #EURPAY)
        {
            //          9.1.12: Id
            nodeId = _nodeInitgPty.appendChild(xmlDoc.createElement('Id'));

            //              9.1.13: OrgId
            nodeOrgId = nodeId.appendChild(xmlDoc.createElement('OrgId'));

            //                  9.1.15: Other
            nodeOther = nodeOrgId.appendChild(xmlDoc.createElement('Othr'));

            //                      9.1.1.16: Id
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeOther, 'Id', this.CharacterReplacement(initiatingPartyId), 35);

            //                      9.1.17: SchmeNm
            nodeSchmeNm = nodeOther.appendChild(xmlDoc.createElement('SchmeNm'));

            //                          9.1.18: Cd
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeSchmeNm, 'Cd', 'CUST');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_BtchBookg</Name>
				<Source><![CDATA[
    protected void node_PmtInf_BtchBookg(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.23 BtchBookg
        //------------------------------------------------------------------------------------------------------
        str btchbkg;

        btchbkg = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('Btchbkg', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank));

        if(strUpr(btchbkg) == 'Y')
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodePmtInf, 'BtchBookg', 'true');
        }
        else
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodePmtInf, 'BtchBookg', 'false');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_PmtTpInf_SvcLvl_Cd</Name>
				<Source><![CDATA[
    protected void node_PmtInf_PmtTpInf_SvcLvl_Cd(XmlElement _nodeSvcLvl)
    {
        //------------------------------------------------------------------------------------------------------
        //              2.9: Cd
        //------------------------------------------------------------------------------------------------------
        str value;

        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #URGDOMEUR:
            case #URGEUR:
            case #MULBNKPAY:
                value = 'URGP';
                break;
            case #WORLDPAY:
                value = 'NURG';
                break;
            case #EURPAY:
                value = 'SEPA';
                break;
        }

        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeSvcLvl, 'Cd', value, 0, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_PmtTpInf_LclInstrm</Name>
				<Source><![CDATA[
    protected void node_PmtInf_PmtTpInf_LclInstrm(XmlElement _nodePmftTpInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.11: LclInstrm
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeLclInstrm;

        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #EURPAY && this.getLogisticsAddressCountryISO(mSKS_EFT_VendorPaym.WBenBankCountryRegionId) == 'NL' )
        {
            nodeLclInstrm = _nodePmftTpInf.appendChild(xmlDoc.createElement('LclInstrm'));
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeLclInstrm, 'Cd', 'ACCEPT');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_PmtTpInf_CtgyPurp</Name>
				<Source><![CDATA[
    protected void node_PmtInf_PmtTpInf_CtgyPurp(XmlElement _nodePmftTpInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.14: CtgyPurp
        //              2.15: Cd
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeCtgyPurp;
        str value;

        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #EURPAY:
            case #MULBNKPAY:        //SKS#DevOps:17035
                value = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('CtgyPurp', mSKS_EFT_FileDetail.RecId));
                break;
        }
        if(value)
        {
            //          2.14: CtgyPurp
            nodeCtgyPurp = _nodePmftTpInf.appendChild(xmlDoc.createElement('CtgyPurp'));

            //              2.15: Cd
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCtgyPurp, 'Cd',value);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_Dbtr_PstlAdr</Name>
				<Source><![CDATA[
    protected void node_PmtInf_Dbtr_PstlAdr(XmlElement _nodeDbtr)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.19: Dbtr
        //          PstlAdr
        //------------------------------------------------------------------------------------------------------

        XmlElement nodePstlAdr;


        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #URGEUR:
            case #WORLDPAY:
            case #MULBNKPAY:
                //      PstlAdr
                nodePstlAdr = _nodeDbtr.appendChild(xmlDoc.createElement('PstlAdr'));

                //          StrtNm
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePstlAdr, 'StrtNm',this.CharacterReplacement( mSKS_EFT_Bank.WOrdPartyAddr + mSKS_EFT_Bank.WOrdPartyAddr2), 70, false);

                //          PstCd
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePstlAdr, 'PstCd', mSKS_EFT_Bank.WOrdPartyZipCode, 16, false);

                //          TwnNm
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePstlAdr, 'TwnNm', this.CharacterReplacement(mSKS_EFT_Bank.WOrdPartyCity), 35, false);

                //          Ctry
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePstlAdr, 'Ctry', this.getLogisticsAddressCountryISO(mSKS_EFT_Bank.WOrdPartyCountryRegionId), 2, false);
                break;
            case #EURPAY:
            case #URGDOMEUR:
                this.node_PstlAdr(_nodeDbtr, mSKS_EFT_Bank.WOrdPartyCountryRegionId, mSKS_EFT_Bank.WOrdPartyAddr, mSKS_EFT_Bank.WOrdPartyZipCode, mSKS_EFT_Bank.WOrdPartyCity);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_DbtrAcct</Name>
				<Source><![CDATA[
    protected void node_PmtInf_DbtrAcct(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.20: DbtrAcct
        //          Id
        //              IBAN
        //              Othr
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeDbtrAcct;
        XmlElement nodeDbtrAcctId;

        //      2.20: DbtrAcct
        nodeDbtrAcct = nodePmtInf.appendChild(xmlDoc.createElement('DbtrAcct'));

        //          Id
        nodeDbtrAcctId = nodeDbtrAcct.appendChild(xmlDoc.createElement('Id'));

        if(mBankAccountTable.IBAN)
        {
            //              IBAN
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeDbtrAcctId, 'IBAN', mBankAccountTable.IBAN);
        }
        else if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #MULBNKPAY )
        {
            //              Othr
            this.node_PmtInf_DbtrAcct_Id_Othr(nodeDbtrAcctId);
        }

        //          Ccy
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeDbtrAcct, 'Ccy', mBankAccountTable.CurrencyCode, 0, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_DbtrAgt</Name>
				<Source><![CDATA[
    protected void node_PmtInf_DbtrAgt(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.21: DbtrAgt
        //          FinInstnId
        //              BIC
        //              ClrSysMmbId
        //                  ClrSysId
        //                      Cd
        //                  MmbId
        //              Othr
        //                  Id
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeDbtrAgt;
        XmlElement nodeFinInstnId;
        XmlElement nodeOther;

        //      2.21: DbtrAgt
        nodeDbtrAgt = nodePmtInf.appendChild(xmlDoc.createElement('DbtrAgt'));

        //          FinInstnId
        nodeFinInstnId = nodeDbtrAgt.appendChild(xmlDoc.createElement('FinInstnId'));

        if(mBankAccountTable.SWIFTNo != '')
        {
            //                  BIC
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeFinInstnId, 'BIC', mBankAccountTable.SWIFTNo, 0, false);
        }
        else
        {
            //              Othr
            nodeOther = nodeFinInstnId.appendChild(xmlDoc.createElement('Othr'));

            //                  Id
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeOther, 'Id', 'NOTPROVIDED');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf()
    {
        //------------------------------------------------------------------------------------------------------
        //      2.27: CdtTrfTxInf
        //          2.28: PmtId
        //          2.31: PmtTpInf
        //          2.42: Amt
        //          2.51: ChrgBr
        //          2.52: ChqInstr
        //          2.77: CdtrAgt
        //          2.79: Cdtr
        //          2.80: CdtrAcct
        //          2.98: RmtInf
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeCdtTrfTxInf;
    
        //      2.27: CdtTrfTxInf
        nodeCdtTrfTxInf = nodePmtInf.appendChild(xmlDoc.createElement('CdtTrfTxInf'));
    
        //          2.28: PmtId
        this.node_CdtTrfTxInf_PmtId(nodeCdtTrfTxInf);
    
        //          2.31 PmtTpInf
        this.node_CdtTrfTxInf_PmtTpInf(nodeCdtTrfTxInf);
    
        //          2.42: Amt
        this.node_CdtTrfTxInf_Amt(nodeCdtTrfTxInf);
    
        //          2.51: ChrgBr
        this.node_CdtTrfTxInf_ChrgBr(nodeCdtTrfTxInf);
    
        //          2.52 ChqInstr
        if(mSKS_EFT_FileFormatPaymSpec.UseCheckNumber == NoYes::Yes || subStr(mSKS_EFT_FileDetail.PaymSpec, 1, 3) == 'CHK')
        {
            this.node_CdtTrfTxInf_ChqInstr(nodeCdtTrfTxInf);
        }
    
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #WORLDPAY ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #URGEUR )
        {
            //          2.71: IntrmyAgt1
            this.node_CdtTrfTxInf_IntrmyAgt1(nodeCdtTrfTxInf);
        }
    
        //          2.77: CdtrAgt
        this.node_CdtTrfTxInf_CdtrAgt(nodeCdtTrfTxInf);
    
        //          2.79: Cdtr
        this.node_CdtTrfTxInf_Cdtr(nodeCdtTrfTxInf);
    
        //          2.80: CdtrAcct
        this.node_CdtTrfTxInf_CdtrAcct(nodeCdtTrfTxInf);
    
        //          2.82: InstrForCdtrAgt
        this.node_CdtTrfTxInf_InstrForCdtrAgt(nodeCdtTrfTxInf);
    
        //          2.86: Purp
        this.node_CdtTrfTxInf_Purp(nodeCdtTrfTxInf);
    
        //          2.89: RgltryRptg
        this.node_CdtTrfTxInf_RgltryRptg(nodeCdtTrfTxInf);
    
        //          2.91: RltdRmtInf
        this.node_CdtTrfTxInf_RltdRmtInf(nodeCdtTrfTxInf);
    
        //          2.98: RmtInf
        this.node_CdtTrfTxInf_RmtInf(nodeCdtTrfTxInf);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_PmtId</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_PmtId(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.28: PmtId
        //              2.30: EndToEndId
        //------------------------------------------------------------------------------------------------------

        XmlElement nodePmtId;

        //          2.28: PmtId
        nodePmtId = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('PmtId'));

        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #EURPAY)
        {
            //              2.29: InstrId
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtId, 'InstrId', SKS_PP_StringFormats::strRight(this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference), 35));
        }

        //              2.30: EndToEndId
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtId, 'EndToEndId', SKS_PP_StringFormats::strRight(this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference), 35));
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_ChrgBr</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_ChrgBr(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.51: ChrgBr
        //------------------------------------------------------------------------------------------------------
        str value = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('Charges', mSKS_EFT_FileDetail.RecId));

        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #EURPAY)
        {
            value = 'SLEV';
        }

        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeCdtTrfTxInf, 'ChrgBr', value, 0, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_CdtrAgt</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_CdtrAgt(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.77: CdtrAgt
        //              FinInstnId
        //                  BIC
        //                  PstlAdr
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeCdtrAgt;
        XmlElement nodeFinInstnId;
        XmlElement nodeClrSysMmBId;
        XmlElement nodeClrSysId;
        str cd;

        //          2.77: CdtrAgt
        nodeCdtrAgt = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('CdtrAgt'));

        //              FinInstnId
        nodeFinInstnId = nodeCdtrAgt.appendChild(xmlDoc.createElement('FinInstnId'));

        if(mSKS_EFT_FileDetail.DepSwiftNo)
        {
            //                  BIC
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeFinInstnId, 'BIC', mSKS_EFT_FileDetail.DepSwiftNo, 0, false);
        }
        else if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #WORLDPAY || mSKS_EFT_FileFormatPaymSpec.TransactionCode == #URGEUR)
        {
            //              ClrSysMmbId
            nodeClrSysMmBId = nodeFinInstnId.appendChild(xmlDoc.createElement('ClrSysMmbId'));
            
            cd = SKS_EFT_Format::getValueFromCode('ClrSysIdCd', mSKS_EFT_FileFormatPaymSpec, mSKS_EFT_VendorPaym.RecId);

            if(cd)
            {
                //              ClrSysId
                nodeClrSysId = nodeClrSysMmBId.appendChild(xmlDoc.createElement('ClrSysId'));

                //                  2.59: Cd           
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeClrSysId, 'Cd', this.CharacterReplacement(cd));
            }

            //                  MmbId
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeClrSysMmBId, 'MmbId', mSKS_EFT_FileDetail.DepBankTransit, 0, false);

            //                  Nm
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeFinInstnId, 'Nm', this.CharacterReplacement(mSKS_EFT_VendorPaym.WBenBankName), 0, false);

            //                  PstlAdr
            this.node_CdtTrfTxInf_CdtrAgt_PstlAdr(nodeFinInstnId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_Cdtr_PstlAdr</Name>
				<Source><![CDATA[
    protected void node_PmtInf_Cdtr_PstlAdr(XmlElement _nodeCdtr)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.19: Cdtr
        //          PstlAdr
        //------------------------------------------------------------------------------------------------------
        XmlElement nodePstlAdr;

        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #WORLDPAY:
            case #URGEUR:
            case #MULBNKPAY:
                if((mRemittanceZipCode != '' ||
                    mRemittanceCity != '' ||
                    mRemittanceCountryRegionId != '' ||
                    mRemittanceAdrline1 != '' ||
                    mRemittanceAdrline2 != '') ||
                    mRemittanceState != '')
                {
                    //      PstlAdr
                    nodePstlAdr = _nodeCdtr.appendChild(xmlDoc.createElement('PstlAdr'));

                    //          StrtNm
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePstlAdr, 'StrtNm', this.CharacterReplacement(mRemittanceAdrline1+mRemittanceAdrLine2), 70, false);

                    //          PstCd
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePstlAdr, 'PstCd', mRemittanceZipCode, 16, false);

                    //          TwnNm
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePstlAdr, 'TwnNm', this.CharacterReplacement(mRemittanceCity), 35, false);

                    //          Ctry
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePstlAdr, 'Ctry', mRemittanceCountryRegionId, 2, false);
                }
                break;
            case #EURPAY:
            case #URGDOMEUR:
                this.node_PstlAdr(_nodeCdtr, mSKS_EFT_VendorPaym.WBeneCountryRegionId, mSKS_EFT_VendorPaym.WBeneAddr, mSKS_EFT_VendorPaym.WBeneZipPostal, mSKS_EFT_VendorPaym.WBeneCity);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_Cdtr_Id</Name>
				<Source><![CDATA[
    protected void node_PmtInf_Cdtr_Id(XmlElement _nodeCdtr)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.79: Cdtr
        //          Id
        //              OrgId
        //                  Othr
        //                      Id
        //                      SchemeName
        //------------------------------------------------------------------------------------------------------

        XmlElement nodeId;
        XmlElement nodeOrgPvtId;
        XmlElement nodeOthr;
        XmlElement nodeSchmeNm;

        if(mSKS_EFT_VendorPaym.VendAccount != '' && mSKS_EFT_FileFormatPaymSpec.TransactionCode== #EURPAY )
        {
            //          Id
            nodeId = _nodeCdtr.appendChild(xmlDoc.createElement('Id'));

            nodeOrgPvtId = nodeId.appendChild(xmlDoc.createElement('OrgId'));

            nodeOthr = nodeOrgPvtId.appendChild(xmlDoc.createElement('Othr'));

            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeOthr, 'Id', mSKS_EFT_VendorPaym.VendAccount);

            nodeSchmeNm = nodeOthr.appendChild(xmlDoc.createElement('SchmeNm'));

            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeSchmeNm, 'Cd', 'CUST');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_CdtrAcct</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_CdtrAcct(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.80: CdtrAcct
        //              Id
        //                  Othr
        //                      Id
        //              Nm
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeCdtrAcct;
        XmlElement nodeCdtrAcctId;
        XmlElement nodeCdtrAcctIdOthr;

        //          2.80: CdtrAcct
        nodeCdtrAcct = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('CdtrAcct'));

        //              Id
        nodeCdtrAcctId = nodeCdtrAcct.appendChild(xmlDoc.createElement('Id'));

        if(mSKS_EFT_FileDetail.DepBankIBAN != '')
        {
            //                  IBAN
            nodeCdtrAcctId = SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdtrAcctId, 'IBAN', mSKS_EFT_FileDetail.DepBankIBAN);
        }
        else if( mSKS_EFT_FileFormatPaymSpec.TransactionCode== #WORLDPAY ||
                 mSKS_EFT_FileFormatPaymSpec.TransactionCode== #URGEUR ||
                 mSKS_EFT_FileFormatPaymSpec.TransactionCode== #MULBNKPAY )
        {
            //                  Othr
            nodeCdtrAcctIdOthr = nodeCdtrAcctId.appendChild(xmlDoc.createElement('Othr'));

            //                      Id
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdtrAcctIdOthr, 'Id', mSKS_EFT_FileDetail.DepBankAcct);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_RmtInf_Ustrd</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_RmtInf_Ustrd(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //              2.99: Ustrd
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeRmtInf;
        str invDetailsString;
        int size;

        invDetailsString = this.getInvoiceDetails();

        if(invDetailsString)
        {
            switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
            {
                case #EURPAY:
                    size = 140;
                    break;

                case #URGDOMEUR:
                    size = 96;
                    break;

                case #WORLDPAY:
                case #URGEUR:
                case #MULBNKPAY:
                    size = 98;
                    break;
            }
            nodeRmtInf = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('RmtInf'));

            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRmtInf, 'Ustrd', invDetailsString, size);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceDetails</Name>
				<Source><![CDATA[
    public str getInvoiceDetails()
    {
        SKS_EFT_FileDetail invSKS_EFT_FileDetail;
        str invDetailsString;

        while select InvoiceNumber, InvoiceSettleAmountPmtCur, PaymentCurrencyCode from invSKS_EFT_FileDetail
            where invSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId
               && invSKS_EFT_FileDetail.InvoiceNumber != ''
        {
            invDetailsString += strFmt('%1, %2 %3, ', invSKS_EFT_FileDetail.InvoiceNumber, num2str(invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1,0,2,1,0), invSKS_EFT_FileDetail.PaymentCurrencyCode);
        }

        invDetailsString = subStr(invDetailsString, 1, strLen(invDetailsString)-2);

        return invDetailsString;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>