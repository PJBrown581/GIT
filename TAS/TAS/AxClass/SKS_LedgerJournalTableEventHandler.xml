<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_LedgerJournalTableEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_LedgerJournalTableEventHandler
{
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>LedgerJournalTable_Pre_update</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="args"></param>
    [PreHandlerFor(tableStr(LedgerJournalTable), tableMethodStr(LedgerJournalTable, update))]
    public static void LedgerJournalTable_Pre_update(XppPrePostArgs args)
    {
        LedgerJournalTable ledgerJournalTable = args.getThis();

        SKS_PP_CreateFile::PPCreate(ledgerJournalTable, ledgerJournalTable.orig());
    }

]]></Source>
			</Method>
			<Method>
				<Name>LedgerJournalTable_Pre_delete</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="args"></param>
    [PreHandlerFor(tableStr(LedgerJournalTable), tableMethodStr(LedgerJournalTable, delete))]
    public static void LedgerJournalTable_Pre_delete(XppPrePostArgs args)
    {
        LedgerJournalTable ledgerJournalTable = args.getThis();

        SKS_DD_CustVendPaymExceptionList::deleteExceptionList_JournalNum(LedgerJournalTable.JournalNum);//SKS_Bug_10240
    }

]]></Source>
			</Method>
			<Method>
				<Name>LedgerJournalTable_onValidatedDelete</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [DataEventHandler(tableStr(LedgerJournalTable), DataEventType::ValidatedDelete)]
    public static void LedgerJournalTable_onValidatedDelete(Common sender, DataEventArgs e)
    {
        ValidateEventArgs validateEventArgs = e as ValidateEventArgs;
        LedgerJournalTable ledgerJournalTable = sender as LedgerJournalTable;

        if(ledgerJournalTable.SKS_EFT_JournalState == SKS_EFT_JournalState::Transferred || ledgerJournalTable.SKS_EFT_JournalState == SKS_EFT_JournalState::PartiallyTransferred)
        {
            warning(strFmt("@SKS3080", ledgerJournalTable.JournalNum));
            validateEventArgs.parmValidateResult(false);
        }

        //SKS_FDD_13662--->
        if(SKS_PP_Setup::find().ModBR)
        {
            DialogButton    diagButton;
            SKS_BR_BankTran locSKS_BR_BankTran;

            select firstonly locSKS_BR_BankTran where locSKS_BR_BankTran.PaymentJournalNum == ledgerJournalTable.JournalNum;

            if(locSKS_BR_BankTran)
            {
                diagButton = box::okCancel(strFmt("@SKS:SKGBRUnlinkingValidationMsg", locSKS_BR_BankTran.AccountId, locSKS_BR_BankTran.ImportedStatementNum, locSKS_BR_BankTran.ImportedStatementDate),
                    DialogButton::Ok, "@SKS311");

                if(diagButton == DialogButton::Ok)
                {
                    SKS_BR_BankTran lSKS_BR_BankTran;

                    while select forupdate lSKS_BR_BankTran where lSKS_BR_BankTran.PaymentJournalNum == ledgerJournalTable.JournalNum
                    {
                        SKS_LB_JournalARApplic lSKS_LB_JournalARApplic;

                        lSKS_LB_JournalARApplic = null;

                        select count(RecId) from lSKS_LB_JournalARApplic
                            where lSKS_LB_JournalARApplic.SKS_BR_BankTran == lSKS_BR_BankTran.RecId;

                        ttsbegin;
                        lSKS_BR_BankTran.JournalName = '';
                        lSKS_BR_BankTran.ManualJournalName = '';
                        lSKS_BR_BankTran.PaymentJournalNum = '';
                        lSKS_BR_BankTran.Voucher = '';
                        lSKS_BR_BankTran.IsManual= NoYes::No;

                        if(lSKS_LB_JournalARApplic.RecId == 0)
                        {
                            lSKS_BR_BankTran.MatchIndicator = SKS_BR_MatchIndicator::Red;
                        }
                        else
                        {
                            lSKS_BR_BankTran.MatchIndicator = SKS_BR_MatchIndicator::Yellow;
                        }

                        lSKS_BR_BankTran.update();
                        ttscommit;
                    }
                }
                else
                {
                    validateEventArgs.parmValidateResult(false);
                }
            }
        }
        //SKS_FDD_13662<----
    }

]]></Source>
			</Method>
			<Method>
				<Name>LedgerJournalTable_Post_update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delete customer journal if any error.
    /// </summary>
    /// <param name="args"></param>
    [PostHandlerFor(tableStr(LedgerJournalTable), tableMethodStr(LedgerJournalTable, update))]
    public static void LedgerJournalTable_Post_update(XppPrePostArgs args)
    {
        LedgerJournalTable  ledgerJournalTable = args.getThis();
        LedgerJournalTrans  ledgerJournalTrans;

        if(strlen(ledgerJournalTable.Log) > 0 &&
            !ledgerJournalTable.SKS_EFTAP_IsIHBJournal &&
            ledgerJournalTable.SystemBlocked == NoYes::No)
        {
            select count(RecId) from ledgerJournalTrans
            where ledgerJournalTrans.JournalNum == ledgerJournalTable.JournalNum &&
                ledgerJournalTrans.SKS_IHB_InterComp == NoYes::Yes;

            if(ledgerJournalTrans.RecId > 0)
            {
                SKS_EFTAP_CreateCustomerTradingJournal::deleteCustomerJournal(ledgerJournalTable);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>