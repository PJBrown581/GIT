<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_PT_MILLENNIUMBCP_XML</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class SKS_EFT_Format_PT_MILLENNIUMBCP_XML
/// </summary>
class SKS_EFT_Format_PT_MILLENNIUMBCP_XML extends SKS_EFT_Format_ISO_20022_001001003
{
    #define.FormatVersion('20221122')
    #define.SEPA_URG('SEPA URG')
    #define.SEPA('SEPA')

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_Cdtr_PstlAdr</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_PmtInf_Cdtr_PstlAdr
    /// </summary>
    /// <param name = "_nodeCdtr">_nodeCdtr</param>
    protected void node_PmtInf_Cdtr_PstlAdr(XmlElement _nodeCdtr)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.19: Cdtr
        //          PstlAdr
        //------------------------------------------------------------------------------------------------------
        XmlElement nodePstlAdr;
        LogisticsAddressCountryRegionISOCode countryRegion;
    
        countryRegion = this.getLogisticsAddressCountryISO(mRemittanceCountryRegionId);

        str address =  mSKS_EFT_FileDetail_VendAddress.BeneAddr + ' '+ mSKS_EFT_FileDetail_VendAddress.BeneAddr2 +' '+mSKS_EFT_FileDetail_VendAddress.BeneZipPostal + ' ' +mSKS_EFT_FileDetail_VendAddress.BeneCity + ' '+ mSKS_EFT_FileDetail_VendAddress.BeneState;//DevOps20788
    
        if(address)
        {
            //      PstlAdr
            nodePstlAdr = _nodeCdtr.appendChild(xmlDoc.createElement('PstlAdr'));
    
            //          Ctry
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePstlAdr, 'Ctry', mSKS_EFT_FileDetail_VendAddress.BeneCountryRegionId, 2, false);


            //          AdrLine
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePstlAdr,'AdrLine',strLTrim(address),70, false);
    
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_GrpHdr_InitgPty_Id</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_GrpHdr_InitgPty_Id
    /// </summary>
    /// <param name = "_nodeInitgPty">_nodeInitgPty</param>
    protected void node_GrpHdr_InitgPty_Id(XmlElement _nodeInitgPty)
    {
        //------------------------------------------------------------------------------------------------------
        //      1.8: InitgPty
        //          9.1.12: Id
        //              9.1.13: OrgId
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeId;
        XmlElement nodeOthr;
        XmlElement nodePrvtId;
        str value;

        value= this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('InitiatingprtyId', mSKS_EFT_FileDetail.RecId,SKS_EFT_CodeLookupType::CodeLookupBank));
        
        if(value)
        {
            //          9.1.12: Id
            nodeId = _nodeInitgPty.appendChild(xmlDoc.createElement('Id'));

            //          PrvtId
            nodePrvtId = nodeId.appendChild(xmlDoc.createElement('PrvtId'));
            
            
            //                      9.1.15 Othr
            nodeOthr = nodePrvtId.appendChild(xmlDoc.createElement('Othr'));
                
            //                              Id
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeOthr, 'Id', value, 35);

             
        }
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_ChrgBr</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_PmtInf_ChrgBr
    /// </summary>
    /// <param name = "_nodePmtInf">_nodePmtInf</param>
    protected void node_PmtInf_ChrgBr(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.24 ChrgBr
        //------------------------------------------------------------------------------------------------------
    
        str value;
        value =SKS_EFT_Format::getCodelookupvalue('ChrgBr', mSKS_EFT_FileDetail.RecId,SKS_EFT_CodeLookupType::CodeLookup);

        if(value)
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodePmtInf, 'ChrgBr', this.CharacterReplacement(value), 0, false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_PmtTpInf</Name>
				<Source><![CDATA[
    protected void node_PmtInf_PmtTpInf(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.6: PmtTpInf
        //          2.8: SvcLvl
        //              2.9: Cd
        //          2.11: LclInstrm
        //              2.13: Prtry
        //------------------------------------------------------------------------------------------------------
        XmlElement nodePmftTpInf;
        XmlElement nodeLclInstrm;
        str value;

        value= this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('CtgyPurp', mSKS_EFT_FileDetail.RecId,SKS_EFT_CodeLookupType::CodeLookup));

       
        if(value || mSKS_EFT_FileDetail.PaymSpec == #SEPA_URG)
        {
            //      2.6: PmtTpInf
            nodePmftTpInf = _nodePmtInf.appendChild(xmlDoc.createElement('PmtTpInf'));

            if(mSKS_EFT_FileDetail.PaymSpec == #SEPA_URG)
            {

                //          2.11: LclInstrm
                nodeLclInstrm = nodePmftTpInf.appendChild(xmlDoc.createElement('LclInstrm'));

      
                //              2.13: Prtry
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeLclInstrm, 'Prtry', 'URG');
            }
       
            this.node_PmtInf_PmtTpInf_CtgyPurp(nodePmftTpInf);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_PmtTpInf_CtgyPurp</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_PmtInf_PmtTpInf_CtgyPurp
    /// </summary>
    /// <param name = "_nodePmftTpInf">_nodePmftTpInf</param>
    protected void node_PmtInf_PmtTpInf_CtgyPurp(XmlElement _nodePmftTpInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.14: CtgyPurp
        //------------------------------------------------------------------------------------------------------
        XmlElement  nodeCtgyPurp;
        str value;

        value= this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('CtgyPurp', mSKS_EFT_FileDetail.RecId,SKS_EFT_CodeLookupType::CodeLookup));
        if(value)
        {
        
            //              2.15: CtgyPurp
            nodeCtgyPurp = _nodePmftTpInf.appendChild(xmlDoc.createElement('CtgyPurp'));
    
            //                  2.16: Prtry
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCtgyPurp, 'Cd', value);
        }
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_Purp</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_CdtTrfTxInf_Purp
    /// </summary>
    /// <param name = "_nodeCdtTrfTxInf">_nodeCdtTrfTxInf</param>
    protected void node_CdtTrfTxInf_Purp(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.88: Purp
        //              Prtry
        //------------------------------------------------------------------------------------------------------

        XmlElement nodeId;
        str value;
    
        value =  this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('Purp',  mSKS_EFT_FileDetail.RecId,SKS_EFT_CodeLookupType::CodeLookup));
       
        if(value)
        {
            // Purp
            nodeId = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('Purp'));

            //  Prtry
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeId, 'Prtry', value);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectPaymentRecords</Name>
				<Source><![CDATA[
    [SuppressBPWarning('BPErrorSelectUsingFirstOnly', 'The buffer is used in next statement or in a datasource query loop.')]
    protected void selectPaymentRecords()
    {
        //------------------------------------------------------------------------------------------------------
        // Standard payment selction
        // Override if different selection is need for a format
        //------------------------------------------------------------------------------------------------------
    
        //Order by clause must match the clause in the SKS_EFT_Processing.SumByPayment
        select * from mSKS_EFT_FileDetail
            join mSKS_EFT_FileDetail_VendAddress
            join mSKS_EFT_FileDetail_BenBank
            join mSKS_EFT_FileDetail_Intermediary
            join mSKS_EFT_FileDetail_CreditParty
            join msKS_EFT_FileDetail_Instructions
              order by mSKS_EFT_FileDetail.PaymentCompany, //SKS_VSTS_12798
        mSKS_EFT_FileDetail.RecordSection,
                   mSKS_EFT_FileDetail.PaymMode,
                   mSKS_EFT_FileDetail.BankAccountId,
                   mSKS_EFT_FileDetail.PaymentCurrencyCode,
                   mSKS_EFT_FileDetail.PaymSpec,
                   mSKS_EFT_FileDetail.EffectiveDate,
                   mSKS_EFT_FileDetail.DepCountryRegionId,
                   mSKS_EFT_FileDetail.RecordType,
                   mSKS_EFT_FileDetail.AccountNum,
                   mSKS_EFT_FileDetail.PaymentReference,
                   mSKS_EFT_FileDetail.RecId
          where mSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                mSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                mSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_VendAddress.RefRecId &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_BenBank.RefRecId &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_Intermediary.RefRecId &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_CreditParty.RefRecId &&
                mSKS_EFT_FileDetail.RecId == msKS_EFT_FileDetail_Instructions.RefRecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>