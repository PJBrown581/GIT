<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_US_HUNTINGTON_IP_CSV</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_US_HUNTINGTON_IP_CSV extends SKS_EFT_Format
/// </summary>
class SKS_EFT_Format_US_HUNTINGTON_IP_CSV extends SKS_EFT_Format
{
    #define.FormatVersion('20220721')
    #define.ACH('ACH')
    #define.CHK('CHK')
    #define.VCARD('VCARD')

    #define.Separator(',')
    #define.DoubleQuote('"')

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    [SuppressBPWarningAttribute("BPCheckNestedLoopinCode","Necessary to allow the processing of every invoice(inner loop) for every relevant parent file detail record(outer loop)")]
    protected void formatStructure()
    {
        SKS_EFT_FileDetail invSKS_EFT_FileDetail;

        if(mSKS_EFT_FileDetail.PaymSpec == 'CHK')
        {
            this.rec_Header_CHK();
        }
        else
        {
            this.rec_Header_ACH_VCARD();
        }

        while(mSKS_EFT_FileDetail)
        {
            while select invSKS_EFT_FileDetail where invSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId
            {
                if(mSKS_EFT_FileDetail.PaymSpec == 'CHK')
                {
                    // Detail Record
                    this.rec_Detail_CHK(invSKS_EFT_FileDetail);
                }
                else
                {
                    // Detail Record
                    this.rec_Detail_ACH_VCARD(invSKS_EFT_FileDetail);
                }
            }

            next mSKS_EFT_FileDetail;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Header_CHK</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_Header_CHK() method for checks
    /// </summary>
    /// <returns>true</returns>
    public boolean rec_Header_CHK()
    {
        //---------------------------------------------------------------------------------
        //Nbr   Description
        //1	    Payee Identifier - Vendor ID
        //2	    Payee Name - Vendor Name
        //3	    Email Address of Vendor
        //4	    Phone Number of Vendor
        //5	    Fax Number of Vendor
        //6	    Gross Amount
        //7	    Discount Amount
        //8	    Net Amount
        //9	    Check Number
        //10	Invoice Number
        //11	Invoice Date
        //12	Payment Date
        //13	Description
        //14	Customer Code
        //15	Customer ID
        //16	Address Line 1
        //17	Address Line 2
        //18	City
        //19	State
        //20	Zip Code
        //21	Country Code
        //---------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();

        //1	    Payee Identifier - Vendor ID
        sb.Append(this.wrapField('Payee Identifier - Vendor ID'));

        //2	    Payee Name - Vendor Name
        sb.Append(this.wrapField('Payee Name - Vendor Name'));

        //3	    Email Address of Vendor
        sb.Append(this.wrapField('Email Address of Vendor'));

        //4	    Phone Number of Vendor
        sb.Append(this.wrapField('Phone Number of Vendor'));

        //5	    Fax Number of Vendor
        sb.Append(this.wrapField('Fax Number of Vendor'));

        //6	    Gross Amount
        sb.Append(this.wrapField('Gross Amount'));

        //7	    Discount Amount
        sb.Append(this.wrapField('Discount Amount'));

        //8	    Net Amount
        sb.Append(this.wrapField('Net Amount'));

        //9	    Check Number
        sb.Append(this.wrapField('Check Number'));

        //10	Invoice Number
        sb.Append(this.wrapField('Invoice Number'));

        //11	Invoice Date
        sb.Append(this.wrapField('Invoice Date'));

        //12	Payment Date
        sb.Append(this.wrapField('Payment Date'));

        //13	Description
        sb.Append(this.wrapField('Description'));

        //14	Customer Code
        sb.Append(this.wrapField('Customer Code'));

        //15	Customer ID
        sb.Append(this.wrapField('Customer ID'));

        //16	Address Line 1
        sb.Append(this.wrapField('Address Line 1'));

        //17	Address Line 2
        sb.Append(this.wrapField('Address Line 2'));

        //18	City
        sb.Append(this.wrapField('City'));

        //19	State
        sb.Append(this.wrapField('State'));

        //20	Zip Code
        sb.Append(this.wrapField('Zip Code'));

        //21	Country Code
        sb.Append(this.wrapField('Country Code', 12, false));

        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Detail_CHK</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_Detail_CHK() method for checks
    /// </summary>
    /// <param name = "invSKS_EFT_FileDetail">rec_Detail_CHK</param>
    /// <returns>true</returns>
    public boolean rec_Detail_CHK(SKS_EFT_FileDetail invSKS_EFT_FileDetail)
    {
        //---------------------------------------------------------------------------------
        //Nbr   Description
        //1	    Payee Identifier - Vendor ID
        //2	    Payee Name - Vendor Name
        //3	    Email Address of Vendor
        //4	    Phone Number of Vendor
        //5	    Fax Number of Vendor
        //6	    Gross Amount
        //7	    Discount Amount
        //8	    Net Amount
        //9	    Check Number
        //10	Invoice Number
        //11	Invoice Date
        //12	Payment Date
        //13	Description
        //14	Customer Code
        //15	Customer ID
        //16	Address Line 1
        //17	Address Line 2
        //18	City
        //19	State
        //20	Zip Code
        //21	Country Code
        //---------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        VendTable                       lVendTable;
        DirPartyContactInfoview         lDirPartyContactInfoview;

        lVendTable = VendTable::findByCompany(mSKS_EFT_FileDetail.AccountCompany, mSKS_EFT_FileDetail.AccountNum);

        //1	    Payee Identifier - Vendor ID
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.AccountNum, 15));

        //2	    Payee Name - Vendor Name
        sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneName), 40));

        //3	    Email Address of Vendor
        select firstonly * from lDirPartyContactInfoview
                        where lDirPartyContactInfoview.Party == lVendTable.Party && lDirPartyContactInfoview.IsPrimary == true
                            &&  lDirPartyContactInfoview.Type == LogisticsElectronicAddressMethodType::Email;

        sb.Append(this.wrapField(lDirPartyContactInfoview.Locator));

        //4	    Phone Number of Vendor
        select firstonly * from lDirPartyContactInfoview
                        where lDirPartyContactInfoview.Party == lVendTable.Party && lDirPartyContactInfoview.IsPrimary == true
                            &&  lDirPartyContactInfoview.Type == LogisticsElectronicAddressMethodType::Phone;

        sb.Append(this.wrapField(lDirPartyContactInfoview.Locator, 15));

        //5	    Fax Number of Vendor
        sb.Append(this.wrapField());

        //6	    Gross Amount
        sb.Append(this.wrapField(num2str((invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur + invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur) * -1,0,2,1,0), 15));

        //7	    Discount Amount
        sb.Append(this.wrapField(num2str(invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur,0,2,1,0), 15));

        //8	    Net Amount
        sb.Append(this.wrapField(num2str((invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur) * -1,0,2,1,0), 15));

        //9	    Check Number
        sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference), 10));

        //10	Invoice Number
        sb.Append(this.wrapField(this.CharacterReplacement(invSKS_EFT_FileDetail.InvoiceNumber), 25));

        //11	Invoice Date
        sb.Append(this.wrapField(SKS_PP_StringFormats::strDateMMDDYYYY(invSKS_EFT_FileDetail.InvoiceDate, DateSeparator::Slash)));

        //12	Payment Date
        sb.Append(this.wrapField(SKS_PP_StringFormats::strDateMMDDYYYY(mSKS_EFT_FileDetail.PaymentTransDate, DateSeparator::Slash)));

        //13	Description
        sb.Append(this.wrapField(this.CharacterReplacement(invSKS_EFT_FileDetail.InvoiceTransactionTxt), 20));

        //14	Customer Code
        sb.Append(this.wrapField());

        //15	Customer ID
        sb.Append(this.wrapField());

        //16	Address Line 1
        sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneAddr), 40));

        //17	Address Line 2
        sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneAddr2), 40));

        //18	City
        sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneCity), 23));

        //19	State
        sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneState), 2));

        //20	Zip Code
        sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneZipPostal), 10));

        //21	Country Code
        sb.Append(this.wrapField(this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_VendAddress.BeneCountryRegionId), 2, false));

        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Header_ACH_VCARD</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_Header_ACH_VCARD() method for ACH and VCARD payments
    /// </summary>
    /// <returns>true</returns>
    public boolean rec_Header_ACH_VCARD()
    {
        //---------------------------------------------------------------------------------
        //Nbr   Description
        //1	    Payee Identifier - Vendor ID
        //2	    Payee Name - Vendor Name
        //3	    Email Address of Vendor
        //4	    Phone Number of Vendor
        //5	    Fax Number of Vendor
        //6	    Gross Amount
        //7	    Discount Amount
        //8	    Net Amount
        //9	    Check Number
        //10	Invoice Number
        //11	Invoice Date
        //12	Payment Date
        //13	Description
        //14	Customer Code
        //15	Customer ID
        //16	Address Line 1
        //17	Address Line 2
        //18	City
        //19	State
        //20	Zip Code
        //21	Country Code
        //---------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();

        //1	    Payee Identifier - Vendor ID
        sb.Append(this.wrapField('Payee Identifier - Vendor ID'));

        //2	    Payee Name - Vendor Name
        sb.Append(this.wrapField('Payee Name - Vendor Name'));

        //3	    Email Address of Vendor
        sb.Append(this.wrapField('Email Address of Vendor'));

        //4	    Phone Number of Vendor
        sb.Append(this.wrapField('Phone Number of Vendor'));

        //5	    Fax Number of Vendor
        sb.Append(this.wrapField('Fax Number of Vendor'));

        //6	    Gross Amount
        sb.Append(this.wrapField('Gross Amount'));

        //7	    Discount Amount
        sb.Append(this.wrapField('Discount Amount'));

        //8	    Net Amount
        sb.Append(this.wrapField('Net Amount'));

        //9	    Check Number
        sb.Append(this.wrapField('Check Number'));

        //10	Invoice Number
        sb.Append(this.wrapField('Invoice Number'));

        //11	Invoice Date
        sb.Append(this.wrapField('Invoice Date'));

        //12	Payment Date
        sb.Append(this.wrapField('Payment Date'));

        //13	Description
        sb.Append(this.wrapField('Description'));

        //14	Customer Code
        sb.Append(this.wrapField('Customer Code'));

        //15	Customer ID
        sb.Append(this.wrapField('Customer ID'));

        //16	Address Line 1
        sb.Append(this.wrapField('Address Line 1'));

        //17	Address Line 2
        sb.Append(this.wrapField('Address Line 2'));

        //18	City
        sb.Append(this.wrapField('City'));

        //19	State
        sb.Append(this.wrapField('State'));

        //20	Zip Code
        sb.Append(this.wrapField('Zip Code'));

        //21	Country Code
        sb.Append(this.wrapField('Country Code', 12, false));

        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Detail_ACH_VCARD</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_Detail_ACH_VCARD() method for ACH and VCARD payments
    /// </summary>
    /// <param name = "invSKS_EFT_FileDetail">rec_Detail_ACH_VCARD</param>
    /// <returns>true</returns>
    public boolean rec_Detail_ACH_VCARD(SKS_EFT_FileDetail invSKS_EFT_FileDetail)
    {
        //---------------------------------------------------------------------------------
        //Nbr   Description
        //1	    Payee Identifier - Vendor ID
        //2	    Payee Name - Vendor Name
        //3	    Email Address of Vendor
        //4	    Phone Number of Vendor
        //5	    Fax Number of Vendor
        //6	    Gross Amount
        //7	    Discount Amount
        //8	    Net Amount
        //9	    Check Number
        //10	Invoice Number
        //11	Invoice Date
        //12	Payment Date
        //13	Description
        //14	Customer Code
        //15	Customer ID
        //16	Address Line 1
        //17	Address Line 2
        //18	City
        //19	State
        //20	Zip Code
        //21	Country Code
        //---------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        VendTable                       lVendTable;
        DirPartyContactInfoview         lDirPartyContactInfoview;

        lVendTable = VendTable::findByCompany(mSKS_EFT_FileDetail.AccountCompany, mSKS_EFT_FileDetail.AccountNum);

        //1	    Payee Identifier - Vendor ID
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.AccountNum, 25));

        //2	    Payee Name - Vendor Name
        sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneName), 50));

        //3	    Email Address of Vendor
        select firstonly * from lDirPartyContactInfoview
                        where lDirPartyContactInfoview.Party == lVendTable.Party && lDirPartyContactInfoview.IsPrimary == true
                            &&  lDirPartyContactInfoview.Type == LogisticsElectronicAddressMethodType::Email;

        sb.Append(this.wrapField(lDirPartyContactInfoview.Locator, 50));

        //4	    Phone Number of Vendor
        select firstonly * from lDirPartyContactInfoview
                        where lDirPartyContactInfoview.Party == lVendTable.Party && lDirPartyContactInfoview.IsPrimary == true
                            &&  lDirPartyContactInfoview.Type == LogisticsElectronicAddressMethodType::Phone;

        sb.Append(this.wrapField(lDirPartyContactInfoview.Locator, 12));

        //5	    Fax Number of Vendor
        sb.Append(this.wrapField());

        //6	    Gross Amount
        sb.Append(this.wrapField(num2str((invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur + invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur) * -1,0,2,1,0), 10));

        //7	    Discount Amount
        sb.Append(this.wrapField(num2str(invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur,0,2,1,0), 10));

        //8	    Net Amount
        sb.Append(this.wrapField(num2str((invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur) * -1,0,2,1,0), 10));

        //9	    Check Number
        sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference), 10));     //SKS#DevOps:17595

        //10	Invoice Number
        sb.Append(this.wrapField(this.CharacterReplacement(invSKS_EFT_FileDetail.InvoiceNumber), 15));

        //11	Invoice Date
        sb.Append(this.wrapField(SKS_PP_StringFormats::strDateMMDDYYYY(invSKS_EFT_FileDetail.InvoiceDate, DateSeparator::Slash)));

        //12	Payment Date
        sb.Append(this.wrapField(SKS_PP_StringFormats::strDateMMDDYYYY(mSKS_EFT_FileDetail.PaymentTransDate, DateSeparator::Slash)));

        //13	Description
        sb.Append(this.wrapField(this.CharacterReplacement(invSKS_EFT_FileDetail.InvoiceTransactionTxt), 60));

        //14	Customer Code
        sb.Append(this.wrapField());

        //15	Customer ID
        sb.Append(this.wrapField());

        //16	Address Line 1
        sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneAddr), 60));

        //17	Address Line 2
        sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneAddr2), 60));

        //18	City
        sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneCity), 60));

        //19	State
        sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneState), 60));

        //20	Zip Code
        sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneZipPostal), 60));

        //21	Country Code
        sb.Append(this.wrapField(this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_VendAddress.BeneCountryRegionId), 2, false));

        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wrapField</Name>
				<Source><![CDATA[
    private str wrapField(str _field = '', int _fieldLength = 0,  boolean _addSeparator = true)
    {
        str text;

        if(_addSeparator)
        {
            if(_field != '' && _fieldLength > 0)
            {
                text = #DoubleQuote + subStr(_field, 1, _fieldLength) + #DoubleQuote + #Separator;
            }
            else
            {
                text = #DoubleQuote + _field + #DoubleQuote + #Separator;
            }
        }
        else
        {
            text = subStr(_field, 1, _fieldLength);
        }

        return text;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectPaymentRecords</Name>
				<Source><![CDATA[
    [SuppressBPWarning('BPErrorSelectUsingFirstOnly', 'The buffer is used in next statement or in a datasource query loop.')]
    protected void selectPaymentRecords()
    {
        //------------------------------------------------------------------------------------------------------
        // Standard payment selction
        // Override if different selection is need for a format
        //------------------------------------------------------------------------------------------------------
    
        //Order by clause must match the clause in the SKS_EFT_Processing.SumByPayment
        select * from mSKS_EFT_FileDetail
            join mSKS_EFT_FileDetail_VendAddress
              order by mSKS_EFT_FileDetail.PaymentCompany, //SKS_VSTS_12798
                   mSKS_EFT_FileDetail.RecordSection,
                   mSKS_EFT_FileDetail.PaymMode,
                   mSKS_EFT_FileDetail.BankAccountId,
                   mSKS_EFT_FileDetail.PaymentCurrencyCode,
                   mSKS_EFT_FileDetail.PaymSpec,
                   mSKS_EFT_FileDetail.EffectiveDate,
                   mSKS_EFT_FileDetail.DepCountryRegionId,
                   mSKS_EFT_FileDetail.RecordType,
                   mSKS_EFT_FileDetail.AccountNum,
                   mSKS_EFT_FileDetail.PaymentReference,
                   mSKS_EFT_FileDetail.RecId
          where mSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                mSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                mSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_VendAddress.RefRecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>