<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_PP_Format_ORIENTALBANK_80</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_PP_Format_ORIENTALBANK_80 extends SKS_PP_Format_BankGroup
{
    SKS_PP_Bank mSKS_PP_BANK;

    //1     001 – 001           Constant Value = C
    //2     002 – 004           Bank Number = "878"
    //3     005 – 006           Filler - Zeros
    //4     007 – 016           Account Number
    //5     017 – 017           Filler-Blanks/Spaces
    //6     018 – 018           Transaction Type
    //7     019 – 019           Action Indicator
    //8     020 – 020           Filler – Blanks/Spaces
    //9     021 – 030           Check Serial Number
    //10    031 – 040           Check Amount
    //11    041 – 046           Issue Date(MMDDYY)
    //12    047 – 066           User Information
    //13    067 – 080           Filler-Blanks/Spaces

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>txtDetail</Name>
				<Source><![CDATA[
    protected str txtDetail()
    {
        Str ItemType;
        int Mult = 1;
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        container   company;
        str         vendorDetails1, vendorDetails2;
        DirPartyNamePrimaryAddressView DirPartyNamePrimaryAddressView;
        VendTable   vendtable;

        if((!mSKS_PP_BANK) || (mSKS_PP_BANK.BankAccountId != mSKS_PP_FileDetail.ChkBankAcct))
        {
            mSKS_PP_BANK = null;
            company = [mSKS_PP_FileDetail.ChkCpnyId];
            select crossCompany:company BankAccountId, PP01 from mSKS_PP_BANK
                where mSKS_PP_BANK.BankAccountId == mSKS_PP_FileDetail.ChkBankAcct;
        }

        // Convert negative void numbers to positives
        if (mSKS_PP_FileDetail.ChkType != SKS_PP_ChequeType::Cheque)
        {
            ItemType = 'V';
            if (mSKS_PP_FileDetail.ChkCuryAmt < 0)
            {
                Mult = -1;
            }
        }
        else
        {
            ItemType = 'R';
        }

        //1     001 – 001           Constant Value = C
        sb.Append('C');

        //2     002 – 004           Bank Number = "878"
        sb.Append(SKS_PP_StringFormats::strFill(3, mSKS_PP_BANK.PP01, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //3     005 – 006           Filler - Zeros
        sb.Append(SKS_PP_StringFormats::strFill(2, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //4     007 – 016           Account Number
        sb.Append(SKS_PP_StringFormats::strFill(10, mSKS_PP_FileDetail.BnkBankAcct, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //5     017 – 017           Filler-Blanks/Spaces
        sb.Append(SKS_PP_StringFormats::strFill(1, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //6     018 – 018           Transaction Type
        sb.Append(ItemType);

        //7     019 – 019           Action Indicator
        sb.Append('A');

        //8     020 – 020           Filler – Blanks/Spaces
        sb.Append(SKS_PP_StringFormats::strFill(1, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //9     021 – 030           Check Serial Number
        sb.Append(SKS_PP_StringFormats::strFill(10, mSKS_PP_FileDetail.ChkRefNbr,SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //10    031 – 040           Check Amount
        sb.Append(SKS_PP_StringFormats::strMoney(Mult * mSKS_PP_FileDetail.ChkCuryAmt, 10));

        //11    041 – 046           Issue Date(MMDDYY)
        sb.Append(SKS_PP_StringFormats::strDateMMDDYY(mSKS_PP_FileDetail.ChkDocDate));

        //12    047 – 066           User Information
        sb.Append(SKS_PP_StringFormats::strFill(20, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //13    067 – 080           Filler-Blanks/Spaces
        sb.Append(SKS_PP_StringFormats::strFill(14, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        return sb.ToString();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>