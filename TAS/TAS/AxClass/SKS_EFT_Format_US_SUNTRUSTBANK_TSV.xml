<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_US_SUNTRUSTBANK_TSV</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_US_SUNTRUSTBANK_TSV extends SKS_EFT_Format
/// </summary>
class SKS_EFT_Format_US_SUNTRUSTBANK_TSV extends SKS_EFT_Format
{
    #define.FormatVersion('20220708')

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wrapField</Name>
				<Source><![CDATA[
    private str wrapField(str _field = '', int length = 0,  boolean _addSeparator = true)
    {
        str text;

        if(_addSeparator)
        {
            text = subStr(_field, 1, length) + '\t';
        }
        else
        {
            text = _field;
        }

        return text;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    [SuppressBPWarningAttribute("BPCheckNestedLoopinCode","Necessary to allow the processing of every invoice(inner loop) for every relevant parent file detail record(outer loop)")]
    protected void formatStructure()
    {
        SKS_EFT_FileDetail invSKS_EFT_FileDetail;

        while(mSKS_EFT_FileDetail)
        {
            while select invSKS_EFT_FileDetail 
                where invSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId && 
                   invSKS_EFT_FileDetail.InvoiceNumber != ''
            {
                //Invoice Record
                this.rec_InvoiceRecord(invSKS_EFT_FileDetail);
            }

            next mSKS_EFT_FileDetail;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_InvoiceRecord</Name>
				<Source><![CDATA[
    boolean rec_InvoiceRecord(SKS_EFT_FileDetail tmpSKS_EFT_FileDetail)
    {
        //1     Interface Type
        //2     Invoice Number
        //3     Amount
        //4     Purchase Order Number
        //5     Supplier Description            
        //6     Supplier Number
        //7     Contact Text
        //8     Check ID
        //9     Supplier Sub Number
        //10    Tax Amount
        //11    Discount Amount
        //12    Freight Amount
        //13    Invoice Date

        VendInvoiceJour   vendinvoicejour;
        MarkupTrans       markuptrans;
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        
        //1     Interface Type
        sb.Append(this.wrapField('PAYABLES', 8));

        //2     Invoice Number
        sb.Append(this.wrapField(this.CharacterReplacement(tmpSKS_EFT_FileDetail.InvoiceNumber), 100));

        //3     Amount
        sb.Append(this.wrapField(num2str(tmpSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1,0,2,1,0), 16));

        //4     Purchase Order Number
        sb.Append(this.wrapField(this.CharacterReplacement(tmpSKS_EFT_FileDetail.PurchId), 100));

        //5     Supplier Description
        sb.Append(this.wrapField(this.CharacterReplacement(tmpSKS_EFT_FileDetail.InvoiceTransactionTxt), 100));

        //6     Supplier Number
        sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_FileDetail.AccountNum), 30));

        //7     Contact Text
        sb.Append(this.wrapField());

        //8     Check ID
        sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference), 100));

        //9     Supplier Sub Number
        sb.Append(this.wrapField());

        select crossCompany  vendinvoicejour where
            vendinvoicejour.InvoiceId == tmpSKS_EFT_FileDetail.InvoiceNumber;
        
        //10    Tax Amount
        sb.Append(this.wrapField(num2str(vendinvoicejour.SumTax,0,2,1,0), 16));
        
        //11    Discount Amount
        sb.Append(this.wrapField(num2str(tmpSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur * -1,0,2,1,0), 16));

        //12    Freight Amount
        select Value from markuptrans where markuptrans.TransRecId == vendinvoicejour.RecId && 
                                 markuptrans.TransTableId == vendinvoicejour.TableId &&
                                 markuptrans.MarkupCode == 'FREIGHT'  ;
        sb.Append(this.wrapField(num2str(markuptrans.Value,0,2,1,0), 16));

        //13    Invoice Date
        sb.Append(this.wrapField(SKS_PP_StringFormats::strDateMMDDYYYY(tmpSKS_EFT_FileDetail.InvoiceDate, DateSeparator::Slash), 10, false));

        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectPaymentRecords</Name>
				<Source><![CDATA[
    protected void selectPaymentRecords()
    {
        //------------------------------------------------------------------------------------------------------
        // Standard payment selction
        // Override if different selection is need for a format
        //------------------------------------------------------------------------------------------------------
    
        //Order by clause must match the clause in the SKS_EFT_Processing.SumByPayment
        select * from mSKS_EFT_FileDetail
              order by mSKS_EFT_FileDetail.RecordSection,
                   mSKS_EFT_FileDetail.PaymMode,
                   mSKS_EFT_FileDetail.BankAccountId,
                   mSKS_EFT_FileDetail.PaymentCurrencyCode,
                   mSKS_EFT_FileDetail.PaymSpec,
                   mSKS_EFT_FileDetail.EffectiveDate,
                   mSKS_EFT_FileDetail.DepCountryRegionId,
                   mSKS_EFT_FileDetail.RecordType,
                   mSKS_EFT_FileDetail.AccountNum,
                   mSKS_EFT_FileDetail.PaymentReference,
                   mSKS_EFT_FileDetail.RecId
          where mSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                mSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                mSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>