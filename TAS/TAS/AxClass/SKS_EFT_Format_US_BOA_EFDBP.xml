<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_US_BOA_EFDBP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_US_BOA_EFDBP  extends SKS_EFT_Format
/// </summary>
class SKS_EFT_Format_US_BOA_EFDBP  extends SKS_EFT_Format
{
    #define.FormatVersion('20220616')
    #define.Comma(',')
    #define.DoubleQuote('"')

    #define.ACH('ACH')
    #define.EFT('EFT')
    #define.CHK('CHK')

    int         mRecordCount;
    AmountMST   mtotalTransAmt;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    [SuppressBPWarningAttribute("BPCheckNestedLoopinCode","Necessary to allow the processing of every invoice(inner loop) for every relevant parent file detail record(outer loop)")]
    protected void formatStructure()
    {
        SKS_EFT_FileDetail invSKS_EFT_FileDetail;
        //Header Row
        this.rec_Header();

        while(mSKS_EFT_FileDetail)
        {
            // Get SKS_EFT_FileFormatPaymSpec
            this.getSKS_EFT_FileFormatPaymSpec();

            // Get Remittance
            this.getRemittanceAddress(mSKS_EFT_FileFormatPaymSpec.UseCheckNumber);
    
            // Transaction row
            this.rec_Transaction();

            while select invSKS_EFT_FileDetail where invSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId && invSKS_EFT_FileDetail.InvoiceNumber != ''
            {
                //  Remittance Detail Record
                this.rec_RemitDetail(invSKS_EFT_FileDetail);
            }
            next mSKS_EFT_FileDetail;
        }
        //  Footer Row
        this.rec_Trailer();
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Header</Name>
				<Source><![CDATA[
    //Nbr    Description
    // 1    File Type
    // 2    Company Name
    // 3    Company ID
    // 4    Company EFT Key
    // 5    Creation Date
    // 6    File Name
    // 7    Test/Production Indicator
    
    private boolean rec_Header()
    {
        //BP Deviation Documented
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        str value1,value2;
        

        //0  File Type
        sb.Append(this.wrapField('BULKCSV'));

        //1 Compant Name
        sb.Append(this.wrapField(subStr(mSKS_EFT_FileDetail.FileACHCompanyName, 1, 35)));
            
        //2  Company ID
        sb.Append(this.wrapField(subStr(mSKS_EFT_FileDetail.FileACHCompanyId, 1, 10)));
            
        //3  Company EFT Key
        value1 = SKS_EFT_Format::getCodelookupvalue('CompanyEFTKey', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank);
        sb.Append(this.wrapField(value1));
            
        //4  Creation Date
        sb.Append(this.wrapField(SKS_PP_StringFormats::strDateYYYYMMDD(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()))));
            
        //5  File Name
        sb.Append(this.wrapField(subStr(mSKS_EFT_File.FileName, 1, 32)));

        //6 Test/Production Indicator
        value2 = SKS_EFT_Format::getCodelookupvalue('TEST_PROD_Indicator', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank);
        sb.Append(this.wrapField(value2, false));
    
        this.fileWrite(sb.ToString());
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Transaction</Name>
				<Source><![CDATA[
    private boolean rec_Transaction()
    {
        //BP Deviation Documented
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        ;
        mRecordCount++;

        //0  Record Type
        sb.Append(this.wrapField('TRN'));
            
        //1  Transaction Type
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #CHK:
                sb.Append(this.wrapField('CHK'));
                break;
            case #ACH:
                sb.Append(this.wrapField('ACH'));
                break;
            case #EFT:
                sb.Append(this.wrapField('EFT'));
                break;
        }
        //2  Alternate Transaction Type
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #ACH)
        {
            sb.Append(this.wrapField('CCP'));
        }
        else
        {
            sb.Append(this.wrapField(''));
        }
            
        //3  U.S. ACH Company ID
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #ACH:
            case #EFT:
                sb.Append(this.wrapField(subStr(mSKS_EFT_FileDetail.FileACHCompanyId, 1, 10)));
                break;
            default:
                sb.Append(this.wrapField(''));
                break;
        }
            
        //4  Branch Code
        sb.Append(this.wrapField(''));

        //5  Originator Account
        sb.Append(this.wrapField(subStr(mSKS_EFT_FileDetail.BankBankAcct, 1, 31)));
            

        //6  ABA Routing Number for U.S
        sb.Append(this.wrapField(subStr(mSKS_EFT_FileDetail.BankBankTransit, 1, 9)));
        
        //7  Originator Account Currency
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.CurrencyCode));
            
        //8  Payment/Collection Indicator
        sb.Append(this.wrapField('PAY'));
            
        //9  Transaction Handling Code
        sb.Append(this.wrapField(SKS_EFT_Format::getCodelookupvalue('TransHandling', mSKS_EFT_FileDetail.RecId)));

        //10  Posting Indicator
        sb.Append(this.wrapField(''));
            
        //11  Consolidated Reference
        sb.Append(this.wrapField(''));
            
        //12  Priority Indicator
        sb.Append(this.wrapField(''));
            
        //13  Transaction Reference
        sb.Append(this.wrapField(subStr(mSKS_EFT_FileDetail.PaymentReference, 1, 16)));
            
        //14  Receiving Party Mail Handling Code
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CHK)
        {
            sb.Append(this.wrapField(SKS_EFT_Format::getCodelookupvalue('MailHandleCode', mSKS_EFT_FileDetail.RecId)));
        }
        else
        {
            sb.Append(this.wrapField(''));
        }
            
        //15  Ordering Party Name
        sb.Append(this.wrapField(subStr(this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyName), 1, 35)));
            
        //16  Ordering Party ID
        sb.Append(this.wrapField(subStr(this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyId), 1, 15)));

        //17  Ordering Party Address 1
        sb.Append(this.wrapField(subStr(this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr), 1, 35)));
            
        //18  Ordering Party Address 2
        sb.Append(this.wrapField(subStr(this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr2), 1, 35)));

        //19  Ordering Party City Name
        sb.Append(this.wrapField(subStr(this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyCity), 1, 30)));
            
        //20  Ordering Party State Code
        sb.Append(this.wrapField(subStr(this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyState), 1, 2)));
            
        //21  Ordering Party Zip/Postal Code
        sb.Append(this.wrapField(subStr(mSKS_EFT_FileDetail_BankAccount.WOrdPartyZipCode, 1, 11)));

        //22  Ordering Party ISO Country Code
        sb.Append(this.wrapField(this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_BankAccount.WOrdPartyCountryRegionId)));

        //23  Receiving Party Name
        sb.Append(this.wrapField(subStr(this.CharacterReplacement(mRemittanceName), 1, 70)));
        
        //24  Receiving Party ID
        sb.Append(this.wrapField(''));
        
        //25  Receiving Party Address 1
        sb.Append(this.wrapField(subStr(this.CharacterReplacement(mRemittanceAdrLine1), 1, 35)));
        
        //26  Receiving Party Address 2
        sb.Append(this.wrapField(subStr(this.CharacterReplacement(mRemittanceAdrLine2), 1, 35)));
        
        //27  Receiving Party City Name
        sb.Append(this.wrapField(subStr(this.CharacterReplacement(mRemittanceCity), 1, 30)));

        //28  Receiving Party State Code
        sb.Append(this.wrapField(subStr(this.CharacterReplacement(mRemittanceState), 1, 2)));
        
        //29  Receiving Party Zip/Postal Code
        sb.Append(this.wrapField(subStr(mRemittanceZipCode, 1, 11)));

        //30  Receiving Party ISO Country Code
        sb.Append(this.wrapField(this.getLogisticsAddressCountryISO(mRemittanceCountryRegionId)));

        //31  Effective Entry Date
        sb.Append(this.wrapField(SKS_PP_StringFormats::strDateYYYYMMDD(mSKS_EFT_FileDetail.EffectiveDate)));

        //32  Transaction Description
        sb.Append(this.wrapField(''));

        //33  Transaction Currency Code
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.PaymentCurrencyCode));

        //34  Transaction Amount
        sb.Append(this.wrapField(num2str(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1,0,2,1,0)));
        
        mtotalTransAmt += mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur;

        //35  Charges Indicator
        sb.Append(this.wrapField(SKS_EFT_Format::getCodelookupvalue('Charges', mSKS_EFT_FileDetail.RecId)));

        //36  Cheque Number
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CHK)
        {
            sb.Append(this.wrapField(mSKS_EFT_FileDetail.PaymentReference));
        }
        else
        {
            sb.Append(this.wrapField(''));
        }
        
        //37  Receiving Bank Name
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #ACH ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #EFT)
        {
            sb.Append(this.wrapField(subStr(this.CharacterReplacement(mSKS_EFT_FileDetail_BenBank.BenBankName), 1, 33)));
        }
        else
        {
            sb.Append(this.wrapField(''));
        }
        
        //38  Receiving Bank Account Type and Receiving Bank ID Type
        sb.Append(this.wrapField(''));

        //39  Receiving Bank ID/Sort Code
        sb.Append(this.wrapField(subStr(mSKS_EFT_FileDetail.DepBankTransit, 1, 12)));

        //40  Receiving Bank SWIFT Address
        sb.Append(this.wrapField(subStr(mSKS_EFT_FileDetail.DepSwiftNo, 1, 11)));

        //41  Receiving Bank Account Number
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #ACH ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #EFT)
        {
            sb.Append(this.wrapField(subStr(mSKS_EFT_FileDetail.DepBankAcct, 1, 35)));
        }
        else
        {
            sb.Append(this.wrapField(''));
        }

        //42  Receiving Bank Branch Number (Reserved for Future Use)
        sb.Append(this.wrapField(''));

        //43  Receiving Bank City Name (Mandatory Except for Cheque/Draft Transactions)
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #ACH ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #EFT)
        {
            sb.Append(this.wrapField(subStr(mSKS_EFT_FileDetail_BenBank.BenBankCity, 1, 30)));
        }
        else
        {
            sb.Append(this.wrapField(''));
        }

        //44  Receiving Bank ISO Country Code (Mandatory Except for Cheque/Draft Transactions)
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #ACH ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #EFT)
        {
            sb.Append(this.wrapField(this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_BenBank.BenBankCountryRegionId), false));
        }
        else
        {
            sb.Append(this.wrapField('', false));
        }

        this.fileWrite(sb.ToString());
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_RemitDetail</Name>
				<Source><![CDATA[
    boolean rec_RemitDetail(SKS_EFT_FileDetail _invSKS_EFT_FileDetail)
    {
        System.Text.StringBuilder   sb = new System.Text.StringBuilder();        
        AmountMST amt;
    
        //0  Record Type
        sb.Append(this.wrapField('RDS'));

            
        //1  Remittance Type
        if(_invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur <= 0)
        {
            sb.Append(this.wrapField('INV'));
        }
        else
        {
            sb.Append(this.wrapField('CRM'));
        }
        
        //2  Item Reference
        sb.Append(this.wrapField(subStr(_invSKS_EFT_FileDetail.InvoiceNumber, 1, 30)));
            
        //3  Item Date
        sb.Append(this.wrapField(SKS_PP_StringFormats::strDateYYYYMMDD(_invSKS_EFT_FileDetail.InvoiceDate)));

        //4  Amount Paid
        sb.Append(this.wrapField(num2str(-1 * _invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur,0,2,1,0)));
            
        //5  Original Amount
        amt = _invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur + _invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur;
        sb.Append(this.wrapField(num2str(-1 * amt,0,2,1,0)));
            
        //6  Additional Reference
        sb.Append(this.wrapField(''));
            
        //7  Response Code
        sb.Append(this.wrapField(''));
            
        //8  Adjustment Code
        sb.Append(this.wrapField(''));
            
        //9  Discount Amount
        sb.Append(this.wrapField(''));

        //10  Adjustment Note
        sb.Append(this.wrapField(''));
            
        //11  Additional Free Text
        sb.Append(this.wrapField('', false));

        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Trailer</Name>
				<Source><![CDATA[
    private boolean rec_Trailer()
    {
        //BP Deviation Documented
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        ;
        //0  Record Type
        sb.Append(this.wrapField('BULKCSVTRAILER'));
            
        //1 Transaction Count
        sb.Append(this.wrapField(num2str(mRecordCount,0,0,0,0)));
            
        //2  Amount Hash Total
        sb.Append(this.wrapField(strRem(num2str(mtotalTransAmt * -1,0,2,0,0),'.'), false));
             
        this.fileWrite(sb.ToString());
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wrapField</Name>
				<Source><![CDATA[
    private str wrapField(str _field = '', boolean _commaDelimit = true)
    {
        if(_commaDelimit)
        {
            return #DoubleQuote + _field + #DoubleQuote + #Comma;
        }
        else
        {
            return #DoubleQuote + _field + #DoubleQuote;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectPaymentRecords</Name>
				<Source><![CDATA[
    protected void selectPaymentRecords()
    {
        //------------------------------------------------------------------------------------------------------
        // Standard payment selction
        // Override if different selection is need for a format
        //------------------------------------------------------------------------------------------------------
    
        //Order by clause must match the clause in the SKS_EFT_Processing.SumByPayment
        select * from mSKS_EFT_FileDetail
            join mSKS_EFT_FileDetail_VendAddress
            join mSKS_EFT_FileDetail_BenBank
              order by mSKS_EFT_FileDetail.RecordSection,
                   mSKS_EFT_FileDetail.PaymMode,
                   mSKS_EFT_FileDetail.BankAccountId,
                   mSKS_EFT_FileDetail.PaymentCurrencyCode,
                   mSKS_EFT_FileDetail.PaymSpec,
                   mSKS_EFT_FileDetail.EffectiveDate,
                   mSKS_EFT_FileDetail.DepCountryRegionId,
                   mSKS_EFT_FileDetail.RecordType,
                   mSKS_EFT_FileDetail.AccountNum,
                   mSKS_EFT_FileDetail.PaymentReference,
                   mSKS_EFT_FileDetail.RecId
          where mSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                mSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                mSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_VendAddress.RefRecId &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_BenBank.RefRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRemittanceAddress</Name>
				<Source><![CDATA[
    void getRemittanceAddress(boolean UseCheckNum)
    {
        //Populate Remittance Information from Vendor eBanking details
        mRemittanceName = this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneName);
        mRemittanceAdrLine1 = this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneAddr);
        mRemittanceAdrLine2 = this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneAddr2);
        mRemittanceCity = this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneCity);
        mRemittanceState = this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneState);
        mRemittanceZipCode = this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneZipPostal);
        mRemittanceCountryRegionId = this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_VendAddress.BeneCountryRegionId);

    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>