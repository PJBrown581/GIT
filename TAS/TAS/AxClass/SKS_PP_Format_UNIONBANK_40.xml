<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_PP_Format_UNIONBANK_40</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_PP_Format_UNIONBANK_40 Extends SKS_PP_Format
{
    int mTotal_Cnt;
    real mAmtTotal;
    str mBranch;
    SKS_EB_Date mIssueDate;
    int mPrintFooter;
    str mFooterBankAcct;
    SKS_PP_Bank mSKS_PP_Bank;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateAmt</Name>
				<Source><![CDATA[
    real calculateAmt(SKS_PP_FileDetail SKS_PP_FileDetail_2)
    {
        real retVal;
        ;
    
        if (SKS_PP_FileDetail_2.ChkType != SKS_PP_ChequeType::Cheque)
        {
            retVal = 0;
        }
        else
        {
            retVal = Abs(SKS_PP_FileDetail_2.ChkCuryAmt);
        }
    
        return retVal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectPaymentRecords</Name>
				<Source><![CDATA[
    protected void selectPaymentRecords()
    {
    
        select * from mSKS_PP_FileDetail join mSKS_PP_Bank
                  order by mSKS_PP_FileDetail.BnkBankAcct, mSKS_PP_FileDetail.ChkDocDate, mSKS_PP_Bank.PP01
                  where mSKS_PP_FileDetail.ChkBankAcct == mSKS_PP_Bank.BankAccountId &&
                        mSKS_PP_FileDetail.FileNbr == mFileNumber &&
                        mSKS_PP_FileDetail.RecSection == SKS_PP_RecSection::Payments;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtDetail</Name>
				<Source><![CDATA[
    protected str txtDetail()
    {
    
        // Union Bank 40
        // 1-10   Account Number
        // 11-20  Check Number (Left padded with zeros)
        // 21-26  Issue Date (MMDDYY)
        // 27-36  Check Amount (Left padded with zeros)
        // 37-38  FILLER-SPACES
        // 39-39  0 = Issue / 1 = Void (with a zero amount) / 1 = Cancelled (with a non-zero amaount)
        // 40-40  "T"
    
    
        Str ItemType;
        real Amt;
    
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        ;
    
        //Compute Running Totals
        mAmtTotal = mAmtTotal + this.calculateAmt(mSKS_PP_FileDetail);
        mFooterBankAcct = mSKS_PP_FileDetail.BnkBankAcct;
        mTotal_Cnt = mTotal_Cnt + 1;
        mBranch = mSKS_PP_Bank.PP01;
        mIssueDate = mSKS_PP_FileDetail.ChkDocDate;
    
    
    
        if(mSKS_PP_FileDetail.ChkType != SKS_PP_ChequeType::Cheque)
        {
            ItemType = '1';
            Amt = mSKS_PP_FileDetail.ChkCuryAmt;
            if(mSKS_PP_FileDetail.ChkType == SKS_PP_ChequeType::VoidCheque || mSKS_PP_FileDetail.ChkType == SKS_PP_ChequeType::RejectedCheque)
            {
                Amt = 0.0;//if it is a voidcheque, Union Bank 40 needs a zero amount
            }
        }
        else
        {
            ItemType = '0';
            Amt = mSKS_PP_FileDetail.ChkCuryAmt;
        }
    
        //remove negative signs
        Amt = abs(Amt);
        sb.Append(SKS_PP_StringFormats::strFill(10, mSKS_PP_FileDetail.BnkBankAcct, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::LEFT));
        sb.Append(SKS_PP_StringFormats::strFill(10, mSKS_PP_FileDetail.ChkRefNbr, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::LEFT));
        sb.Append(SKS_PP_StringFormats::strDateMMDDYY(mSKS_PP_FileDetail.ChkDocDate));
        sb.Append(SKS_PP_StringFormats::strMoney(Amt,10));
        sb.Append(SKS_PP_StringFormats::strFill(2, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left));
        sb.Append(ItemType);
        sb.Append('T');
    
    
    
        return sb.ToString();
    
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtGroupTrailer</Name>
				<Source><![CDATA[
    protected str txtGroupTrailer()
    {
        // Union Bank - 40 Trailer Record
    
        // 1-10   Account Number
        // 11-14  Branch Number
        // 15-20  Control Count
        // 21-26  Issue Date MMDDYY
        // 27-36  Control Amoun
        // 37-39  Filler (Spaces)
        // 40-40  "X"
    
    
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        ;
    
        if(mFooterBankAcct != mSKS_PP_FileDetail.BnkBankAcct || mIssueDate != mSKS_PP_FileDetail.ChkDocDate || mBranch != mSKS_PP_Bank.PP01)
        {
            sb.Append(SKS_PP_StringFormats::strFill(10, mFooterBankAcct, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::LEFT));
            sb.Append(SKS_PP_StringFormats::strFill(4, mBranch, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::LEFT));
            sb.Append(SKS_PP_StringFormats::strFill(6, int2str(mTotal_Cnt), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::LEFT));
            sb.Append(SKS_PP_StringFormats::strDateMMDDYY(mIssueDate));
            sb.Append(SKS_PP_StringFormats::strMoney(mAmtTotal,10));
            sb.Append(SKS_PP_StringFormats::strFill(3, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left));
            sb.Append(SKS_PP_StringFormats::strFill(1, 'X', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
            mTotal_Cnt = 0;
            mAmtTotal = 0.0;
        }
        return sb.ToString();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>