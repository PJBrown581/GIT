<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_IHB_CommaStreamIo_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// //*** implments a broken fields parse and malfuctions on non-comma separated files(like semi-colon delimited) with empty fields.
/// </summary>
[ExtensionOf(classStr(CommaStreamIo))]
final class SKS_IHB_CommaStreamIo_Extension
{
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>read_IHB</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the next full record from the <c>StreamIo</c> object.
    /// </summary>
    /// <returns>A container that holds the next full record from the <c>IoStream</c> object.</returns>
    /// <remarks>
    /// The definition of the next full record is controlled by the <c>inFieldDelimiter</c>, <c>inRecordDelimiter</c>,
    /// and <c>inRecordLength</c> properties. The record is returned as a container. Each entry in the container equals
    /// one field in the record.
    ///
    /// Each of the specialized <c>StreamIo</c> classes has default settings for <c>inFieldDelimiter</c>,
    /// <c>inRecordDelimiter</c>, and <c>inRecordLength</c> enabling input and output of the most common formats.
    /// You might have to adjust these to support the wanted format.
    /// </remarks>
    public container read_IHB()
    {
        container line = conNull();

        if (!this.canRead)
        {
            this.currentStatus = IO_Status::FileProtected;
        }
        else if(reader.EndOfStream)
        {
            this.currentStatus = IO_Status::FileTooShort;
        }
        else
        {
            System.String lineRecordBufferStr;
            lineRecordBufferStr = this.readNettingLine();

            System.String[] locRowArray;
            str value;
            if(!System.String::IsNullOrEmpty(lineRecordBufferStr))
            {

                locRowArray = System.Text.RegularExpressions.Regex::Split(lineRecordBufferStr, inFieldDelimiter + '(?=(?:[^\"]*\"[^\"]*\")*[^\"]*$)');
                for(int forCounter = 0; forCounter < locRowArray.Length; forCounter++)
                {
                    value = locRowArray.GetValue(forCounter);
                    line += value;
                }
            }

            int i =1;
            anytype fieldValue;
            while (i <= conLen(line))
            {
                fieldValue = conpeek(line, i);

                fieldValue = strLRTrim(fieldValue);
                if(strStartsWith(fieldValue,'\"') && strEndsWith(fieldValue,'\"'))
                {
                    fieldValue = SKS_PP_StringFormats::strSub(fieldValue, 2);
                    fieldValue = SKS_PP_StringFormats::strSub(fieldValue, 1, strLen(fieldValue) - 1);
                }
                fieldValue = strRem(fieldValue, '\n\r');

                if (fieldValue == '\"')
                {
                    fieldValue = strReplace(fieldValue, '\"',''); 
                }

                line = conPoke(line, i, fieldValue);

                i++;
            }
            
        }

        return line;
    }

]]></Source>
			</Method>
			<Method>
				<Name>readNettingLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Read each netting lines
    /// </summary>
    /// <returns>line record buffer</returns>
    public str readNettingLine()
    {
        int currentCharAsInt;
        str currentChar;
        TextBuffer buffer;
        str recordDelimiter = inRecordDelimiter;

        int recordDelimiterLength = strlen(recordDelimiter);

        buffer = new TextBuffer();

        // Read through the stream one character at a time until we find a delimiter.
        while(true)
        {
            currentCharAsInt = reader.Read();
            currentChar = num2char(currentCharAsInt);

            if (currentCharAsInt < 0)
            {
                this.currentStatus = IO_Status::FileTooShort;
                break;
            }

            if (inRecordLength != 0)
            {
                // Don't look for line endings
            }
            else if (recordDelimiterLength == 0)
            {
                // If we have an empty record delimiter end reading input on carriage returns and newlines.
                if (currentChar == '\r' || currentChar == '\n')
                {
                    // Eat any newlines that come immediately after this line
                    this.clearNewLines_IHB();
                    break;
                }
            }
            else if(currentChar == substr(recordDelimiter, recordDelimiterLength  , 1))
            {
                // This character matches the last character for the in record delimiter...
                // Check the previous characters to see if we have finished reading a record.
                str tempBuffer = buffer.getText() + currentChar;
                if (this.endsWith_IHB(tempBuffer, recordDelimiter))
                {
                    // Buffer should be the temp buffer minus the delimiter
                    buffer.setText(substr(tempBuffer, 1, strlen(tempBuffer) - recordDelimiterLength));
                    break;
                }
            }

            // Didn't find the record delimiter so just add the current character to the buffer
            buffer.appendText(currentChar);

            if (inRecordLength != 0 && inRecordLength == buffer.size())
            {
                // We have finished reading a fixed length record.
                break;
            }
        }

        System.String csString = buffer.getText();
        return csString;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearNewLines_IHB</Name>
				<Source><![CDATA[
    private void clearNewLines_IHB()
    {
        int nextCharAsInt;
        str nextChar;

        nextCharAsInt = reader.Peek();
        nextChar = num2char(nextCharAsInt);

        if (nextChar == '\n')
        {
            // Advance the stream and eat the character.
            reader.Read();

            // Check for more newlines in a row.
            this.clearNewLines_IHB();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>endsWith_IHB</Name>
				<Source><![CDATA[
    private boolean endsWith_IHB(str buffer, str ending)
    {
        int endingLength = strlen(ending);
        int bufferLength = strlen(buffer);
        str bufferEnding = substr(buffer, bufferLength, -1 * endingLength);


        return 0 == strcmp(bufferEnding, ending);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>