<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_BankFabricPayment_1_2</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.Collections;
class SKS_EFT_BankFabricPayment_1_2 extends SKS_EFT_BankFabricPayment_1_1
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>creditor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creditor
    /// </summary>
    protected void creditor()
    {
        EFT.DataContract_1_0.PaymentCreditor creditor = new EFT.DataContract_1_0.PaymentCreditor();
        EFT.DataContract_1_0.PaymentCreditorXOther creditorxOther = new EFT.DataContract_1_0.PaymentCreditorXOther();
        EFT.DataContract_1_0.PaymentPostalAddress creditorAddress = new EFT.DataContract_1_0.PaymentPostalAddress();
        EFT.DataContract_1_0.PaymentPostalAddressxOther creditorAddressxOther = new EFT.DataContract_1_0.PaymentPostalAddressxOther();

        if(paymentFile.Module == EFT.DataContract_1_0.Module::DirectDebit)
        {
            creditor.Id = lSKS_EFT_FileDetail.FileACHCompanyId;
            creditor.Name = lSKS_EFT_FileDetail.FileACHCompanyName;

            creditorAddress.AddressLine1 = gSKS_EFT_FileDetail_BankAccount.Addr;
            creditorAddress.AddressLine2 = gSKS_EFT_FileDetail_BankAccount.Addr2;
            creditorAddress.TownName = gSKS_EFT_FileDetail_BankAccount.City;
            creditorAddress.Country = SKS_EFT_BankFabricPayment::getLogisticsAddressCountryISO(gSKS_EFT_FileDetail_BankAccount.CountryRegionId);
            creditorAddress.CountrySubDivision = gSKS_EFT_FileDetail_BankAccount.State;
            creditorAddress.StreetName = gSKS_EFT_FileDetail_BankAccount.Street;
            creditorAddress.PostCode = gSKS_EFT_FileDetail_BankAccount.ZipPostal;
            creditorAddressxOther.CountryISO3 = LogisticsAddressCountryRegion::findByISOCode(gSKS_EFT_FileDetail_BankAccount.CountryRegionId).CountryRegionId;
            creditorAddressxOther.CountryName = LogisticsAddressCountryRegion::findByISOCode(gSKS_EFT_FileDetail_BankAccount.CountryRegionId).displayName();
        }
        else
        {
            switch(gsks_eft_FileDetail_AddendaHeader.AccountIDOvr)
            {
                case SKS_EFT_AddendaOverwrite::AccountName:
                    creditor.Id = lSKS_EFT_FileDetail.AccountName;
                    break;
                case SKS_EFT_AddendaOverwrite::AccountNum:
                    creditor.Id = lSKS_EFT_FileDetail.AccountNum;
                    break;
                case SKS_EFT_AddendaOverwrite::BeneName:
                    creditor.Id = gSKS_EFT_FileDetail_VendAddress.BeneName;
                    break;
                case SKS_EFT_AddendaOverwrite::Fixed:
                    creditor.Id = gsks_eft_FileDetail_AddendaHeader.IdentificationFixedValue;
                    break;
                default:
                    creditor.Id = lSKS_EFT_FileDetail.AccountNum;
                    break;
            }
            
            switch(gsks_eft_FileDetail_AddendaHeader.RecCompany)
            {
                case SKS_EFT_AddendaOverwrite::AccountName:
                    creditor.Name = lSKS_EFT_FileDetail.AccountName;
                    break;
                case SKS_EFT_AddendaOverwrite::AccountNum:
                    creditor.Name = lSKS_EFT_FileDetail.AccountNum;
                    break;
                case SKS_EFT_AddendaOverwrite::BeneName:
                    creditor.Name = gSKS_EFT_FileDetail_VendAddress.BeneName;
                    break;
                case SKS_EFT_AddendaOverwrite::Fixed:
                    creditor.Name = gsks_eft_FileDetail_AddendaHeader.RecCompanyFixedValue;
                    break;
                default:
                    creditor.Name = gSKS_EFT_FileDetail_VendAddress.BeneName;
                    break;
            }

            if(lSKS_EFT_FileDetail.FormatId == 'US-PNC-XML' && lSKS_EFT_FileDetail.TransactionCode == 'CHK')
            {
                SKS_EFT_FileDetail_Extra sKS_EFT_FileDetail_Extra;
                LogisticsPostalAddress postalAddress;

                select firstonly * from sKS_EFT_FileDetail_Extra  order by RecId desc
                where sKS_EFT_FileDetail_Extra.FieldName == 'UseCdtrAddressPurpose'
                && sKS_EFT_FileDetail_Extra.RefRecId == lSKS_EFT_FileDetail.RecId
                && sKS_EFT_FileDetail_Extra.CodeLookupType == SKS_EFT_CodeLookupType::CodeLookup;

                postalAddress = this.findPostalAddressLineByPartyLocationRole(VendTable::findByCompany(lSKS_EFT_FileDetail.AccountCompany, lSKS_EFT_FileDetail.AccountNum).Party, sKS_EFT_FileDetail_Extra.Value);

                if(postalAddress)
                {
                    creditor.Name = LogisticsLocation::find(postalAddress.Location).description;

                    creditorAddress.PostCode = postalAddress.ZipCode;
                    creditorAddress.TownName = postalAddress.City;
                    creditorAddress.Country = SKS_EFT_BankFabricPayment::getLogisticsAddressCountryISO(postalAddress.CountryRegionId);
                    creditorAddress.CountrySubDivision = postalAddress.State;
                    creditorAddress.AddressLine1 = postalAddress.Address;
                }
                else
                {
                    creditor.VATNum = lSKS_EFT_FileDetail.VATNum;
                    creditorAddress.AddressLine1 = gSKS_EFT_FileDetail_VendAddress.BeneAddr;
                    creditorAddress.AddressLine2 = gSKS_EFT_FileDetail_VendAddress.BeneAddr2;
                    creditorAddress.TownName = gSKS_EFT_FileDetail_VendAddress.BeneCity;
                    creditorAddress.Country = SKS_EFT_BankFabricPayment::getLogisticsAddressCountryISO(gSKS_EFT_FileDetail_VendAddress.BeneCountryRegionId);
                    creditorAddress.CountrySubDivision = gSKS_EFT_FileDetail_VendAddress.BeneState;
                    creditorAddress.StreetName = gSKS_EFT_FileDetail_VendAddress.BeneStreet;
                    creditorAddress.BuildingNumber = gSKS_EFT_FileDetail_VendAddress.BeneStreetNumber;
                    creditorAddress.PostCode = gSKS_EFT_FileDetail_VendAddress.BeneZipPostal;
                        
                    creditorAddressxOther.AddressLine3 = gSKS_EFT_FileDetail_VendAddress.BeneAddr3;
                    creditorAddressxOther.BuildingCompliment = gSKS_EFT_FileDetail_VendAddress.BeneBuildingCompliment;
                    creditorAddressxOther.County = gSKS_EFT_FileDetail_VendAddress.BeneCounty;
                    creditorAddressxOther.DistrictName = gSKS_EFT_FileDetail_VendAddress.BeneDistrictName;
                    creditorAddressxOther.CountryISO3 = LogisticsAddressCountryRegion::findByISOCode(gSKS_EFT_FileDetail_VendAddress.BeneCountryRegionId).CountryRegionId;
                    creditorAddressxOther.CountryName = LogisticsAddressCountryRegion::findByISOCode(gSKS_EFT_FileDetail_VendAddress.BeneCountryRegionId).displayName();
                }

            }
            else if(SKS_PP_Setup::find().RegCustomerID == 'f4e21a' && gSKS_EFT_File.EFTFileType == SKS_EFT_Module::AP &&
                    gSKS_EFT_FileFormat.FormatGroup == 'US-WF-PMS-XML-R1201212' && lSKS_EFT_FileDetail.PaymSpec == 'CHK-ND')
            {
                LedgerJournalTrans      lLedgerJournalTrans;
                LogisticsPostalAddress  lRemittancePostalAddress;
                Array vendAddrArray = new Array(Types::String);

                select firstonly lRemittancePostalAddress join  RemittanceAddress from lLedgerJournalTrans
                    where lRemittancePostalAddress.Location == lLedgerJournalTrans.RemittanceLocation
                        && lLedgerJournalTrans.RecId == lSKS_EFT_FileDetail.PaymentLineRecId;

                vendAddrArray = SKS_PP_50000Bas::StreetToAddressLineArray(lRemittancePostalAddress.Street,3);
    
                if(vendAddrArray.exists(1))
                {
                    creditorAddress.AddressLine1 = vendAddrArray.value(1);
                    if (vendAddrArray.exists(2))
                    {
                        creditorAddress.AddressLine2 = vendAddrArray.value(2);
                    }
                    if (vendAddrArray.exists(3))
                    {
                        creditorAddressxOther.AddressLine3 = vendAddrArray.value(3);
                    }
                }

                creditorAddress.TownName = lRemittancePostalAddress.City;
                creditorAddress.CountrySubDivision = lRemittancePostalAddress.State;
                creditorAddress.PostCode = lRemittancePostalAddress.ZipCode;
                creditorAddress.Country = SKS_EFT_BankFabricPayment::getLogisticsAddressCountryISO(lRemittancePostalAddress.CountryRegionId);
                creditorAddressxOther.CountryISO3 = LogisticsAddressCountryRegion::findByISOCode(lRemittancePostalAddress.CountryRegionId).CountryRegionId;
                creditorAddressxOther.CountryName = LogisticsAddressCountryRegion::findByISOCode(lRemittancePostalAddress.CountryRegionId).displayName();
                creditorAddress.BuildingNumber = lRemittancePostalAddress.BuildingCompliment;
                creditorAddress.StreetName = SKS_PP_StringFormats::strRemoveCRLF(lRemittancePostalAddress.Street);
            }
            else if(SKS_PP_Setup::find().RegCustomerID == 'f4e21a' && gSKS_EFT_File.EFTFileType == SKS_EFT_Module::CNP &&
                    gSKS_EFT_FileFormat.FormatGroup == 'US-WF-PMS-XML-R1201212' && lSKS_EFT_FileDetail.PaymSpec == 'CHK-ND')
            {
                Array       vendAddrArray = new Array(Types::String);

                SKS_EFT_CustReimbursementPaym       lSKS_EFT_CustReimbursementPaym;

                LogisticsPostalAddress  lRemittancePostalAddress;

                lSKS_EFT_CustReimbursementPaym = SKS_EFT_CustReimbursementPaym::find(lSKS_EFT_FileDetail.AccountCompany, lSKS_EFT_FileDetail.AccountNum, lSKS_EFT_FileDetail.PaymMode, lSKS_EFT_FileDetail.PaymSpec, lSKS_EFT_FileDetail.DepBankAccountId);

                if (lSKS_EFT_CustReimbursementPaym.WBeneUseCustAddr && lSKS_EFT_CustReimbursementPaym.WBeneRemittanceLocation)
                {
                    changecompany(lSKS_EFT_CustReimbursementPaym.CustCompany)
                    {
                        select firstonly lRemittancePostalAddress
                            where lRemittancePostalAddress.Location == lSKS_EFT_CustReimbursementPaym.WBeneRemittanceLocation;
                    }

                    vendAddrArray = SKS_PP_50000Bas::StreetToAddressLineArray(lRemittancePostalAddress.Street,2);
    
                    if(vendAddrArray.exists(1))
                    {
                        creditorAddress.AddressLine1 = vendAddrArray.value(1);
                        if (vendAddrArray.exists(2))
                        {
                            creditorAddress.AddressLine2 = vendAddrArray.value(2);
                        }
                        if (vendAddrArray.exists(3))
                        {
                            creditorAddressxOther.AddressLine3 = vendAddrArray.value(3);
                        }
                    }

                    creditorAddress.TownName = lRemittancePostalAddress.City;
                    creditorAddress.CountrySubDivision = lRemittancePostalAddress.State;
                    creditorAddress.PostCode = lRemittancePostalAddress.ZipCode;
                    creditorAddress.Country =  SKS_EFT_BankFabricPayment::getLogisticsAddressCountryISO(lRemittancePostalAddress.CountryRegionId);
                    creditorAddressxOther.CountryISO3 = LogisticsAddressCountryRegion::findByISOCode(lRemittancePostalAddress.CountryRegionId).CountryRegionId;
                    creditorAddressxOther.CountryName = LogisticsAddressCountryRegion::findByISOCode(lRemittancePostalAddress.CountryRegionId).displayName();
                    creditorAddress.BuildingNumber = lRemittancePostalAddress.BuildingCompliment;
                    creditorAddress.StreetName = SKS_PP_StringFormats::strRemoveCRLF(lRemittancePostalAddress.Street);
                }
            }
            else
            {
                creditor.VATNum = lSKS_EFT_FileDetail.VATNum;
                creditorAddress.AddressLine1 = gSKS_EFT_FileDetail_VendAddress.BeneAddr;
                creditorAddress.AddressLine2 = gSKS_EFT_FileDetail_VendAddress.BeneAddr2;
                creditorAddress.TownName = gSKS_EFT_FileDetail_VendAddress.BeneCity;
                creditorAddress.Country = SKS_EFT_BankFabricPayment::getLogisticsAddressCountryISO(gSKS_EFT_FileDetail_VendAddress.BeneCountryRegionId);
                creditorAddress.CountrySubDivision = gSKS_EFT_FileDetail_VendAddress.BeneState;
                creditorAddress.StreetName = gSKS_EFT_FileDetail_VendAddress.BeneStreet;
                creditorAddress.BuildingNumber = gSKS_EFT_FileDetail_VendAddress.BeneStreetNumber;
                creditorAddress.PostCode = gSKS_EFT_FileDetail_VendAddress.BeneZipPostal;
                        
                creditorAddressxOther.AddressLine3 = gSKS_EFT_FileDetail_VendAddress.BeneAddr3;
                creditorAddressxOther.BuildingCompliment = gSKS_EFT_FileDetail_VendAddress.BeneBuildingCompliment;
                creditorAddressxOther.County = gSKS_EFT_FileDetail_VendAddress.BeneCounty;
                creditorAddressxOther.DistrictName = gSKS_EFT_FileDetail_VendAddress.BeneDistrictName;
                creditorAddressxOther.CountryISO3 = LogisticsAddressCountryRegion::findByISOCode(gSKS_EFT_FileDetail_VendAddress.BeneCountryRegionId).CountryRegionId;
                creditorAddressxOther.CountryName = LogisticsAddressCountryRegion::findByISOCode(gSKS_EFT_FileDetail_VendAddress.BeneCountryRegionId).displayName();
            }

            creditorxOther.ERPCompany = lSKS_EFT_FileDetail.AccountCompany;
            creditorxOther.ExternalIdentifier = lSKS_EFT_FileDetail.VendYourAccountNum;
            creditorxOther.Fax = gSKS_EFT_FileDetail_VendAddress.Fax;

            VendTable lVendTable = VendTable::findByCompany(lSKS_EFT_FileDetail.AccountCompany, lSKS_EFT_FileDetail.AccountNum);

            DirPartyContactInfoview lDirPartyContactInfoview;
            select * from lDirPartyContactInfoview where lDirPartyContactInfoview.Party == lVendTable.Party && lDirPartyContactInfoview.IsPrimary == true
                &&  lDirPartyContactInfoview.Type == LogisticsElectronicAddressMethodType::Phone;

            creditorxOther.Phone = lDirPartyContactInfoview.Locator;

            creditorxOther.TaxWithholdGroup = lVendTable.TaxWithholdGroup;

            Generic.List<EFT.DataContract_1_0.PaymentEmailAddress> PaymentEmailAddresses = new Generic.List<EFT.DataContract_1_0.PaymentEmailAddress>();
            if(gSKS_EFT_FileDetail_VendAddress.Locator || gSKS_EFT_FileDetail_VendAddress.LocationName)
            {
                EFT.DataContract_1_0.PaymentEmailAddress emailp = new EFT.DataContract_1_0.PaymentEmailAddress();
                emailp.EmailIdentifer = 'Primary';
                emailp.EmailAddress = gSKS_EFT_FileDetail_VendAddress.Locator;
                emailp.EmailName = gSKS_EFT_FileDetail_VendAddress.LocationName;
                PaymentEmailAddresses.Add(emailp);
            }
            SKS_EB_Vendor lSKS_EB_Vendor = SKS_EB_Vendor::findByCompany(lSKS_EFT_FileDetail.PaymentCompany, lSKS_EFT_FileDetail.AccountCompany, lSKS_EFT_FileDetail.AccountNum);

            if(lSKS_EB_Vendor.EM1Vendor)
            {
                SKS_EFT_VendorPaym lSKS_EFT_VendorPaym;
                lSKS_EFT_VendorPaym = SKS_EFT_VendorPaym::findbycompany(lSKS_EFT_FileDetail.PaymentCompany ? lSKS_EFT_FileDetail.PaymentCompany :
                                    lSKS_EFT_FileDetail.DataAreaId, lSKS_EFT_FileDetail.AccountCompany, lSKS_EFT_FileDetail.AccountNum,
                                    lSKS_EFT_FileDetail.PaymMode, lSKS_EFT_FileDetail.PaymSpec, lSKS_EFT_FileDetail.DepBankAccountId);

                container email = SKS_EFT_VendorLoad::primaryEmail(lSKS_EFT_FileDetail.AccountCompany, lSKS_EFT_FileDetail.AccountNum, lSKS_EFT_VendorPaym.WBeneRemittanceLocation);
                DirPartyContactInfoview mDirPartyContactInfoview = conPeek(email,2);

                if(mDirPartyContactInfoview.Locator)
                {
                    EFT.DataContract_1_0.PaymentEmailAddress email1 = new EFT.DataContract_1_0.PaymentEmailAddress();
                    email1.EmailIdentifer = 'EMail1';
                    email1.EmailAddress = mDirPartyContactInfoview.Locator;
                    email1.EmailName = mDirPartyContactInfoview.LocationName;
                    PaymentEmailAddresses.Add(email1);
                }
            }

            if(lSKS_EB_Vendor.EM2Addr || lSKS_EB_Vendor.EM2Name)
            {
                EFT.DataContract_1_0.PaymentEmailAddress email2 = new EFT.DataContract_1_0.PaymentEmailAddress();
                email2.EmailIdentifer = 'EMail2';
                email2.EmailAddress = lSKS_EB_Vendor.EM2Addr;
                email2.EmailName = lSKS_EB_Vendor.EM2Name;
                PaymentEmailAddresses.Add(email2);
            }

            if(lSKS_EB_Vendor.EM3Addr || lSKS_EB_Vendor.EM3Name)
            {
                EFT.DataContract_1_0.PaymentEmailAddress email3 = new EFT.DataContract_1_0.PaymentEmailAddress();
                email3.EmailIdentifer = 'EMail3';
                email3.EmailAddress = lSKS_EB_Vendor.EM3Addr;
                email3.EmailName = lSKS_EB_Vendor.EM3Name;
                PaymentEmailAddresses.Add(email3);
            }

            if(lSKS_EB_Vendor.EM4Addr || lSKS_EB_Vendor.EM4Name)
            {
                EFT.DataContract_1_0.PaymentEmailAddress email4 = new EFT.DataContract_1_0.PaymentEmailAddress();
                email4.EmailIdentifer = 'EMail4';
                email4.EmailAddress = lSKS_EB_Vendor.EM4Addr;
                email4.EmailName = lSKS_EB_Vendor.EM4Name;
                PaymentEmailAddresses.Add(email4);
            }
            
            this.creditorxother_Extension(PaymentEmailAddresses);

            // Note: Explicit conversion to System.Object is required by the X++ compiler to return a System.Collections.Generic object in an X++ method.
            System.Object asObject = PaymentEmailAddresses;
            creditorxOther.PaymentEmailAddresses = asObject;

        }
        creditor.XOther = creditorxOther;
        creditorAddress.XOther = creditorAddressxOther;
        creditor.PostalAddress = creditorAddress;
        this.creditor_Extension(creditor);
        payment.Creditor = creditor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>debtor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Debtor
    /// </summary>
    protected void debtor()
    {
        EFT.DataContract_1_0.PaymentDebtor debtor = new EFT.DataContract_1_0.PaymentDebtor();
        EFT.DataContract_1_0.PaymentDebtorXOther debtorxOther = new EFT.DataContract_1_0.PaymentDebtorXOther();
        EFT.DataContract_1_0.PaymentPostalAddress debtorAddress = new EFT.DataContract_1_0.PaymentPostalAddress();
        EFT.DataContract_1_0.PaymentPostalAddressxOther debtorAddressxOther = new EFT.DataContract_1_0.PaymentPostalAddressxOther();
        CustTable   lCustTable;
        DirPartyTable  lDirPartyTable;
        LogisticsPostalAddress postalAddress;
        
        if(paymentFile.Module == EFT.DataContract_1_0.Module::DirectDebit)
        {
            if(lSKS_EFT_FileDetail.FormatId == 'DK-NETS-BS-601-AR')
            {
                postalAddress = this.findPostalAddressLineByPartyLocationRole(CustTable::findByCompany(lSKS_EFT_FileDetail.AccountCompany, lSKS_EFT_FileDetail.AccountNum).Party, 'Business');

                if(postalAddress)
                {
                    Array custAddrArray = new Array(Types::String);
                    custAddrArray = SKS_PP_50000Bas::StreetToAddressLineArray(postalAddress.Street,3);

                    if(custAddrArray.exists(1))
                    {
                        debtorAddress.AddressLine1 = custAddrArray.value(1);
                
                        if (custAddrArray.exists(2))
                        {
                            debtorAddress.AddressLine2 = custAddrArray.value(1);
                        }
                        if (custAddrArray.exists(3))
                        {
                            debtorAddressxOther.AddressLine3 = custAddrArray.value(1);
                        }
                    }

                    debtorAddress.TownName = postalAddress.City;
                    debtorAddress.Country = SKS_EFT_BankFabricPayment::getLogisticsAddressCountryISO(postalAddress.CountryRegionId);
                    debtorAddressxOther.CountryISO3 = LogisticsAddressCountryRegion::findByISOCode(postalAddress.CountryRegionId).CountryRegionId;
                    debtorAddress.PostCode = postalAddress.ZipCode;
                }
                else
                {
                    debtorAddress.AddressLine1 = gSKS_EFT_FileDetail_CustAddress.CustAddr;
                    debtorAddress.AddressLine2 = gSKS_EFT_FileDetail_CustAddress.CustAddr2;
                    debtorAddress.TownName = gSKS_EFT_FileDetail_CustAddress.CustCity;
                    debtorAddress.Country = SKS_EFT_BankFabricPayment::getLogisticsAddressCountryISO(gSKS_EFT_FileDetail_CustAddress.CustCountryRegionId);
                    debtorAddressxOther.CountryISO3 = LogisticsAddressCountryRegion::findByISOCode(gSKS_EFT_FileDetail_CustAddress.CustCountryRegionId).CountryRegionId;
                    debtorAddressxOther.CountryName = LogisticsAddressCountryRegion::findByISOCode(gSKS_EFT_FileDetail_CustAddress.CustCountryRegionId).displayName();
                    debtorAddress.CountrySubDivision = gSKS_EFT_FileDetail_CustAddress.CustState;
                    debtorAddress.PostCode = gSKS_EFT_FileDetail_CustAddress.CustZipPostal;
                }

            }
            else
            {
                debtorAddress.AddressLine1 = gSKS_EFT_FileDetail_CustAddress.CustAddr;
                debtorAddress.AddressLine2 = gSKS_EFT_FileDetail_CustAddress.CustAddr2;
                debtorAddress.TownName = gSKS_EFT_FileDetail_CustAddress.CustCity;
                debtorAddress.Country = SKS_EFT_BankFabricPayment::getLogisticsAddressCountryISO(gSKS_EFT_FileDetail_CustAddress.CustCountryRegionId);
                debtorAddressxOther.CountryISO3 = LogisticsAddressCountryRegion::findByISOCode(gSKS_EFT_FileDetail_CustAddress.CustCountryRegionId).CountryRegionId;
                debtorAddressxOther.CountryName = LogisticsAddressCountryRegion::findByISOCode(gSKS_EFT_FileDetail_CustAddress.CustCountryRegionId).displayName();
                debtorAddress.CountrySubDivision = gSKS_EFT_FileDetail_CustAddress.CustState;
                debtorAddress.PostCode = gSKS_EFT_FileDetail_CustAddress.CustZipPostal;
            }

            debtor.Id = lSKS_EFT_FileDetail.AccountNum;
            debtor.Name = lSKS_EFT_FileDetail.AccountName;

            lCustTable = CustTable::findByCompany(lSKS_EFT_FileDetail.AccountCompany, lSKS_EFT_FileDetail.AccountNum);

            select * from lDirPartyTable where lDirPartyTable.RecId == lCustTable.Party;

            debtorxOther.Language = lDirPartyTable.LanguageId;
        }
        else
        {
            debtor.BICOrBEI = gSKS_EFT_FileDetail_BankAccount.WOrdPartySWIFTNo;
            debtor.Id = gSKS_EFT_FileDetail_BankAccount.WOrdPartyId;
            debtor.Name = gSKS_EFT_FileDetail_BankAccount.WOrdPartyName;

            debtorAddress.AddressLine1 = gSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr;
            debtorAddress.AddressLine2 = gSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr2;
            debtorAddress.TownName = gSKS_EFT_FileDetail_BankAccount.WOrdPartyCity;
            debtorAddress.Country = SKS_EFT_BankFabricPayment::getLogisticsAddressCountryISO(gSKS_EFT_FileDetail_BankAccount.WOrdPartyCountryRegionId);
            debtorAddressxOther.CountryISO3 = LogisticsAddressCountryRegion::findByISOCode(SKS_EFT_BankFabricPayment::getLogisticsAddressCountryISO(gSKS_EFT_FileDetail_BankAccount.WOrdPartyCountryRegionId)).CountryRegionId;
            debtorAddressxOther.CountryName = LogisticsAddressCountryRegion::findByISOCode(SKS_EFT_BankFabricPayment::getLogisticsAddressCountryISO(gSKS_EFT_FileDetail_BankAccount.WOrdPartyCountryRegionId)).displayName();
            debtorAddress.CountrySubDivision = gSKS_EFT_FileDetail_BankAccount.WOrdPartyState;
            debtorAddress.PostCode = gSKS_EFT_FileDetail_BankAccount.WOrdPartyZipCode;

            debtorxOther.TaxId = lSKS_EFT_FileDetail.CoRegNum;
        }
        debtor.XOther = debtorxOther;
        debtorAddress.XOther = debtorAddressxOther;
        debtor.PostalAddress = debtorAddress;
        payment.Debtor = debtor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>companyInfoAddress</Name>
				<Source><![CDATA[
    protected void companyInfoAddress()
    {
        EFT.DataContract_1_0.PaymentCompanyInfo companyInfo = new EFT.DataContract_1_0.PaymentCompanyInfo();
        EFT.DataContract_1_0.PaymentPostalAddress companyInfoAddress = new EFT.DataContract_1_0.PaymentPostalAddress();
        EFT.DataContract_1_0.PaymentPostalAddressxOther companyInfoAddressxOther = new EFT.DataContract_1_0.PaymentPostalAddressxOther();

        if(paymentFile.Module == EFT.DataContract_1_0.Module::AccountsPayable)
        {
            if(gSKS_EFT_FileFormat.FormatGroup == 'US-REGIONS-XML' || gSKS_EFT_FileFormat.FormatGroup == 'ZA-FIRSTNATIONALBANK-XML-08' || gSKS_EFT_FileFormat.FormatGroup == 'US-BOA-XML-JP')
            {
                LogisticsPostalAddress  postalAddress;

                postalAddress = this.findPostalAddressLineByPartyLocationRole(CompanyInfo::current(), 'APEFT');

                companyInfoAddress.AddressLine1 = postalAddress.Street;
                companyInfoAddress.TownName = postalAddress.City;
                companyInfoAddress.Country = SKS_EFT_BankFabricPayment::getLogisticsAddressCountryISO(postalAddress.CountryRegionId);
                companyInfoAddress.CountrySubDivision = postalAddress.State;
                companyInfoAddress.PostCode = postalAddress.ZipCode;
                companyInfoAddressxOther.CountryISO3 = LogisticsAddressCountryRegion::findByISOCode(postalAddress.CountryRegionId).CountryRegionId;
                companyInfoAddressxOther.CountryName = LogisticsAddressCountryRegion::findByISOCode(postalAddress.CountryRegionId).displayName();
            }
            else
            {
                companyInfoAddress.AddressLine1 = gSKS_EFT_FileDetail_Addresses.Addr;
                companyInfoAddress.AddressLine2 = gSKS_EFT_FileDetail_Addresses.Addr2;
                companyInfoAddress.TownName = gSKS_EFT_FileDetail_Addresses.City;
                companyInfoAddress.Country = SKS_EFT_BankFabricPayment::getLogisticsAddressCountryISO(gSKS_EFT_FileDetail_Addresses.CountryRegionId);
                companyInfoAddress.CountrySubDivision = gSKS_EFT_FileDetail_Addresses.State;
                companyInfoAddress.PostCode = gSKS_EFT_FileDetail_Addresses.ZipCode;
                companyInfoAddressxOther.CountryISO3 = LogisticsAddressCountryRegion::findByISOCode(gSKS_EFT_FileDetail_Addresses.CountryRegionId).CountryRegionId;
                companyInfoAddressxOther.CountryName = LogisticsAddressCountryRegion::findByISOCode(gSKS_EFT_FileDetail_Addresses.CountryRegionId).displayName();
            }

        }
        else if(paymentFile.Module == EFT.DataContract_1_0.Module::DirectDebit)
        {
            if(gSKS_EFT_FileFormat.FormatGroup == 'UK-HSBC-XML-EU-AR' || gSKS_EFT_FileFormat.FormatGroup == 'PT-MILLENNIUMBCP-XML-AR' ||
                gSKS_EFT_FileFormat.FormatGroup == 'IT-CONSORZIOCBI-XML-AR')
            {
                LogisticsPostalAddress  postalAddress;

                postalAddress = this.findPostalAddressLineByPartyLocationRole(CompanyInfo::current(), 'Previous Mandate Address');

                companyInfoAddress.AddressLine1 = postalAddress.Street;
                companyInfoAddress.TownName = postalAddress.City;
                companyInfoAddress.Country = SKS_EFT_BankFabricPayment::getLogisticsAddressCountryISO(postalAddress.CountryRegionId);
                companyInfoAddress.CountrySubDivision = postalAddress.State;
                companyInfoAddress.PostCode = postalAddress.ZipCode;
                companyInfoAddressxOther.CountryISO3 = LogisticsAddressCountryRegion::findByISOCode(postalAddress.CountryRegionId).CountryRegionId;
                companyInfoAddressxOther.CountryName = LogisticsAddressCountryRegion::findByISOCode(postalAddress.CountryRegionId).displayName();
            }
            else
            {
                companyInfoAddress.AddressLine1 = gSKS_EFT_FileDetail_BankAccount.Addr;
                companyInfoAddress.AddressLine2 = gSKS_EFT_FileDetail_BankAccount.Addr2;
                companyInfoAddress.TownName = gSKS_EFT_FileDetail_BankAccount.City;
                companyInfoAddress.Country = SKS_EFT_BankFabricPayment::getLogisticsAddressCountryISO(gSKS_EFT_FileDetail_BankAccount.CountryRegionId);
                companyInfoAddress.CountrySubDivision = gSKS_EFT_FileDetail_BankAccount.State;
                companyInfoAddress.PostCode = gSKS_EFT_FileDetail_BankAccount.ZipPostal;
                companyInfoAddressxOther.CountryISO3 = LogisticsAddressCountryRegion::findByISOCode(gSKS_EFT_FileDetail_BankAccount.CountryRegionId).CountryRegionId;
                companyInfoAddressxOther.CountryName = LogisticsAddressCountryRegion::findByISOCode(gSKS_EFT_FileDetail_BankAccount.CountryRegionId).displayName();
            }
        }
        CompanyInfo.PostalAddress = companyInfoAddress;
        companyInfoAddress.XOther = companyInfoAddressxOther;
        paymentFile.CompanyInfo = CompanyInfo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>payment_Extras</Name>
				<Source><![CDATA[
    /// <summary>
    /// Payment extra key value pairs
    /// </summary>
    [SuppressBPWarningAttribute("BPCheckNestedLoopinCode","Necessary to allow the processing of every WorkflowTrackingStatusTable record(inner loop) for every relevant WorkflowTrackingTable record(outer loop)")]
    protected void payment_Extras()
    {
        Generic.List<EFT.DataContract_1_0.PaymentExtra> lookups = new Generic.List<EFT.DataContract_1_0.PaymentExtra>();
        EFT.DataContract_1_0.PaymentExtra lookup;

        SKS_EFT_FileDetail_Extra lSKS_EFT_FileDetail_Extra;
        while select lSKS_EFT_FileDetail_Extra where lSKS_EFT_FileDetail_Extra.RefRecId == lSKS_EFT_FileDetail.RecId && lSKS_EFT_FileDetail_Extra.CodeLookupType == SKS_EFT_CodeLookupType::Extra
        {
            lookup = new EFT.DataContract_1_0.PaymentExtra();
            lookup.Key = lSKS_EFT_FileDetail_Extra.FieldName;
            lookup.Value = lSKS_EFT_FileDetail_Extra.Value;
            lookups.Add(lookup);
        }
               
        
        if(paymentFile.Module == EFT.DataContract_1_0.Module::AccountsPayable)
        {
            str dbtrAgtName = LogisticsLocation::find(gSKS_EFT_FileDetail_BankAddresses.Location).Description;

            if(dbtrAgtName)
            {
                lookup = new EFT.DataContract_1_0.PaymentExtra();
                lookup.Key = 'DbtrAgtNm';
                lookup.Value = dbtrAgtName;
                lookups.Add(lookup);
            }
        }

        if(paymentFile.Module == EFT.DataContract_1_0.Module::DirectDebit) //UK-HSBC-XML-UK-AR
        {
            if(lSKS_EFT_FileDetail.BankBankSortCode)
            {
                lookup = new EFT.DataContract_1_0.PaymentExtra();
                lookup.Key = 'BankBankSortCode';
                lookup.Value = lSKS_EFT_FileDetail.BankBankSortCode;
                lookups.Add(lookup);
            }
        }
        
        if(lSKS_EFT_FileDetail.FormatId == 'CH-SIX-LSV')
        {
            LogisticsPostalAddress postalAddress = this.findPostalAddressLineByPartyLocationRole(CompanyInfo::current(),'Direct Debit');
            str cmpDescription = LogisticsLocation::find(postalAddress.Location).Description;

            if(cmpDescription)
            {
                lookup = new EFT.DataContract_1_0.PaymentExtra();
                lookup.Key = 'CompanyDescription';
                lookup.Value = cmpDescription;
                lookups.Add(lookup);
            }
        }
        if(lSKS_EFT_FileDetail.FormatId == 'AT-RAIFFEISENBANK-CFD-CZ')
        {
            VendBankAccount mVendBankAccount = VendBankAccount::findByCompany(lSKS_EFT_FileDetail.AccountCompany, lSKS_EFT_FileDetail.AccountNum, lSKS_EFT_FileDetail.DepBankAccountId);

            lookup = new EFT.DataContract_1_0.PaymentExtra();
            lookup.Key = 'BankConstantSymbol';
            lookup.Value = int642Str(mVendBankAccount.BankConstantSymbol);
            lookups.Add(lookup);
        }

        if(lSKS_EFT_FileDetail.FormatId == 'US-WESTERN-UNION-XML')
        {
            str PTPayeeID = SKS_EFT_Format::getCodelookupvalue('PTPayeeIDOption', lSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank);

            lookup = new EFT.DataContract_1_0.PaymentExtra();
            lookup.Key = 'PTPayeeIDOptionValue';
            lookup.Value = VendTable::find(PTPayeeID).AccountNum;   //VendTable::find(PTPayeeID).RecId
            lookups.Add(lookup);
        }
        if(lSKS_EFT_FileDetail.FormatId == 'US-UNION-PAYER-DIRECT-CSV')
        {
            lookup = new EFT.DataContract_1_0.PaymentExtra();
            lookup.Key = 'YourAccountNum';
            lookup.Value = VendTable::findByCompany(lSKS_EFT_FileDetail.AccountCompany, lSKS_EFT_FileDetail.AccountNum).YourAccountNum;
            lookups.Add(lookup);
        }

        if(lSKS_EFT_FileDetail.FormatId == 'CH-UBS-KEYLINK-TREA-CSV')
        {
            WorkflowTrackingStatusTable     workflowTrackingStatus;
            WorkflowTrackingTable           workflowTrackingTable;
            WorkflowTrackingCommentTable    workflowTrackingCommentTable;
            UserInfo userInfo;
            TransDateTime                   approvaldate1, approvaldate2;
            int approvecount;
            str approvalname1, approvalname2;

            while select firstFast RecId,CreatedDateTime, User from workflowTrackingTable
                order by workflowTrackingTable.CreatedDateTime,workflowTrackingTable.RecId asc
                join workflowTrackingCommentTable
                where workflowTrackingCommentTable.WorkflowTrackingTable == workflowTrackingTable.RecId
                join UserInfo where UserInfo.id == WorkflowTrackingTable.User
                exists join workflowTrackingStatus
                where workflowTrackingTable.WorkflowTrackingStatusTable ==  workflowTrackingStatus.RecId
                    && workflowTrackingStatus.ContextRecId == LedgerJournalTable::find(LedgerJournalTrans::findByRef(curExt(),lSKS_EFT_FileDetail.PaymentLineRecId).JournalNum).RecId   //SKS#DevOps:15791
            && workflowTrackingTable.TrackingType == WorkflowTrackingType::Approval
            {
                approvecount++;
                if(approvecount == 1)
                {
                    approvalname1 = userInfo.name;
                    approvaldate1 = workflowTrackingCommentTable.CreatedDateTime;
                }
                if(approvecount == 2)
                {
                    approvalname2 = userInfo.name;
                    approvaldate2 = workflowTrackingCommentTable.CreatedDateTime;
                }
            }

            lookup = new EFT.DataContract_1_0.PaymentExtra();
            lookup.Key = 'Approver1';
            lookup.Value = approvalname1;
            lookups.Add(lookup);

            lookup = new EFT.DataContract_1_0.PaymentExtra();
            lookup.Key = 'Approver2';
            lookup.Value = approvalname2;
            lookups.Add(lookup);

            lookup = new EFT.DataContract_1_0.PaymentExtra();
            lookup.Key = 'ApproverDate1';
            lookup.Value = datetime2Str(approvaldate1);
            lookups.Add(lookup);

            lookup = new EFT.DataContract_1_0.PaymentExtra();
            lookup.Key = 'ApproverDate2';
            lookup.Value = datetime2Str(approvaldate2);
            lookups.Add(lookup);

        }

        if(lSKS_EFT_FileDetail.FormatId == 'JP-ZENGINBANK-120' || lSKS_EFT_FileDetail.FormatId == 'US-SANTANDER-SPEI' ||
            lSKS_EFT_FileDetail.FormatId == 'JP-MUFGBANK-XML' || lSKS_EFT_FileDetail.FormatId == 'US-CITI-PAYLINK-1024-TT' ||
            lSKS_EFT_FileDetail.FormatId == 'JP-SMBC-XML')
        {
            VendBankAccount     lVendBankAccount = VendBankAccount::findByCompany(lSKS_EFT_FileDetail.AccountCompany, lSKS_EFT_FileDetail.AccountNum, lSKS_EFT_FileDetail.DepBankAccountId);

            BankGroupId AccountGroupId = BankAccountTable::findByCompany(lSKS_EFT_FileDetail.AccountCompany, lSKS_EFT_FileDetail.BankAccountId).BankGroupId;
            BankGroup bankGroup = BankGroup::find(AccountGroupId);

            BankGroupId vendBankGroupId = lVendBankAccount.BankGroupId;
            BankGroup vendBankGroup = BankGroup::find(vendBankGroupId);

            if(bankGroup)
            {
                lookup = new EFT.DataContract_1_0.PaymentExtra();
                lookup.Key = 'RemittingBankNumber';
                lookup.Value = bankgroup.Code_JP;
                lookups.Add(lookup);

                lookup = new EFT.DataContract_1_0.PaymentExtra();
                lookup.Key = 'RemittingBankName';
                lookup.Value = bankgroup.NameKana_JP;
                lookups.Add(lookup);

                lookup = new EFT.DataContract_1_0.PaymentExtra();
                lookup.Key = 'RemittingBranchNumber';
                lookup.Value = bankgroup.BranchCode_JP;
                lookups.Add(lookup);

                lookup = new EFT.DataContract_1_0.PaymentExtra();
                lookup.Key = 'RemittingBranchName';
                lookup.Value = bankgroup.BranchNameKana_JP;
                lookups.Add(lookup);
            }

            if(vendBankGroup)
            {
                lookup = new EFT.DataContract_1_0.PaymentExtra();
                lookup.Key = 'ReceivingBankNumber';
                lookup.Value = vendBankGroup.Code_JP;
                lookups.Add(lookup);

                lookup = new EFT.DataContract_1_0.PaymentExtra();
                lookup.Key = 'ReceivingBankName';
                lookup.Value = vendBankGroup.NameKana_JP;
                lookups.Add(lookup);

                lookup = new EFT.DataContract_1_0.PaymentExtra();
                lookup.Key = 'ReceivingBranchNumber';
                lookup.Value = vendBankGroup.BranchCode_JP;
                lookups.Add(lookup);

                lookup = new EFT.DataContract_1_0.PaymentExtra();
                lookup.Key = 'ReceivingBranchName';
                lookup.Value = vendBankGroup.BranchNameKana_JP;
                lookups.Add(lookup);

                lookup = new EFT.DataContract_1_0.PaymentExtra();
                lookup.Key = 'BankAccountNameKana_JP';
                lookup.Value = lVendBankAccount.BankAccountNameKana_JP;
                lookups.Add(lookup);
            }

            if(vendBankGroupId)
            {
                lookup = new EFT.DataContract_1_0.PaymentExtra();
                lookup.Key = 'vendBankGroupId';
                lookup.Value = vendBankGroupId;
                lookups.Add(lookup);
            }
            
            if(lVendBankAccount.TransType_JP)
            {
                str typeVal;

                switch(lVendBankAccount.TransType_JP)//DevOps20748
                {
                    case VendBankTransType_JP::OrdinarySavings:
                        typeVal = '1';
                        break;
                    case VendBankTransType_JP::Checking:
                        typeVal = '2';
                        break;
                    case VendBankTransType_JP::Savings:
                        typeVal = '4';
                        break;
                }

                lookup = new EFT.DataContract_1_0.PaymentExtra();
                lookup.Key = 'vendBankTransType_JP';
                lookup.Value = typeVal;
                lookups.Add(lookup);
            }
        }
        
        if(lSKS_EFT_FileDetail.FormatId == 'MX-HSBC-SIP-CSV' || lSKS_EFT_FileDetail.FormatId == 'US-SANTANDER-CECOBAN')
        {
            CompanyInfo companyInfo;
            SKS_EFT_VendorPaym lSKS_EFT_VendorPaym;
            lSKS_EFT_VendorPaym = SKS_EFT_VendorPaym::findbycompany(lSKS_EFT_FileDetail.PaymentCompany ? lSKS_EFT_FileDetail.PaymentCompany :
                                    lSKS_EFT_FileDetail.DataAreaId, lSKS_EFT_FileDetail.AccountCompany, lSKS_EFT_FileDetail.AccountNum,
                                    lSKS_EFT_FileDetail.PaymMode, lSKS_EFT_FileDetail.PaymSpec, lSKS_EFT_FileDetail.DepBankAccountId);

            companyInfo = CompanyInfo::findDataArea(lSKS_EFT_VendorPaym.VendCompany);

            if(companyInfo)
            {
                lookup = new EFT.DataContract_1_0.PaymentExtra();
                lookup.Key = 'CompanyInforRfcMX';
                lookup.Value = companyInfo.Rfc_MX;
                lookups.Add(lookup);
            }
        }

        if(lSKS_EFT_FileDetail.FormatId == 'EU-DANSKEBANK-XML-PL' ||
           lSKS_EFT_FileDetail.FormatId == 'PL-MBANK-XML' ||
           lSKS_EFT_FileDetail.FormatId == 'EU-SEB-XML-PL')
        {
            SplitPaymentMandatoryRule_PL splitPaymentMandatoryRule_PL;

            select splitPaymentMandatoryRule_PL
                where splitPaymentMandatoryRule_PL.PaymMode == lSKS_EFT_FileDetail.PaymMode && splitPaymentMandatoryRule_PL.Specification == lSKS_EFT_FileDetail.PaymSpec; //DevOps 18774


            if(splitPaymentMandatoryRule_PL)
            {
                lookup = new EFT.DataContract_1_0.PaymentExtra();
                lookup.Key = 'PaymentMandatoryRulePL';
                lookup.Value = 'True';
                lookups.Add(lookup);

                lookup = new EFT.DataContract_1_0.PaymentExtra();
                lookup.Key = 'PaymentMandatoryRulePLCtgyPurp';
                lookup.Value = 'SPLT';
                lookups.Add(lookup);
            }
        }

        if(lSKS_EFT_FileDetail.FormatId == 'EU-DANSKEBANK-XML-NO' ||
           lSKS_EFT_FileDetail.FormatId == 'EU-SEB-XML-NO')         //SKS#DevOps:22273
        {
            str idNumber;
            str idType;

            WorkflowTrackingStatusTable     workflowTrackingStatus;
            WorkflowTrackingTable           workflowTrackingTable;
            WorkflowTrackingCommentTable    workflowTrackingCommentTable;
            UserInfo userInfo;
            HcmPersonIdentificationNumber   lHcmPersonIdentificationNumber;
            DirPerson   lDirPerson;
            int approvecount;

            while select firstFast RecId,CreatedDateTime, User from workflowTrackingTable
            order by workflowTrackingTable.CreatedDateTime,workflowTrackingTable.RecId asc
            join workflowTrackingCommentTable
            where workflowTrackingCommentTable.WorkflowTrackingTable == workflowTrackingTable.RecId
            join UserInfo where UserInfo.id == WorkflowTrackingTable.User
            exists join workflowTrackingStatus
            where workflowTrackingTable.WorkflowTrackingStatusTable ==  workflowTrackingStatus.RecId
                && workflowTrackingStatus.ContextRecId == LedgerJournalTable::find(LedgerJournalTrans::findByRef(curExt(),lSKS_EFT_FileDetail.PaymentLineRecId).JournalNum).RecId   //SKS#DevOps:15791
            && workflowTrackingTable.TrackingType == WorkflowTrackingType::Approval
            {
                lDirPerson = DirPerson::find(DirPersonUser::find(userInfo.id).PersonParty);
                boolean first = true;

                while select lHcmPersonIdentificationNumber where lHcmPersonIdentificationNumber.Person == lDirPerson.RecId
                {
                    if(first && (HcmIdentificationType::find(lHcmPersonIdentificationNumber.IdentificationType).IdentificationTypeId == 'SOSE' ||
                    HcmIdentificationType::find(lHcmPersonIdentificationNumber.IdentificationType).IdentificationTypeId == 'NIDN'))
                    {
                        first = false;

                        approvecount++;
                        idNumber = lHcmPersonIdentificationNumber.IdentificationNumber;
                        idType = HcmIdentificationType::find(lHcmPersonIdentificationNumber.IdentificationType).IdentificationTypeId;

                        lookup = new EFT.DataContract_1_0.PaymentExtra();
                        lookup.Key = 'idNumber'+int2Str(approvecount);
                        lookup.Value = idNumber;
                        lookups.Add(lookup);

                        lookup = new EFT.DataContract_1_0.PaymentExtra();
                        lookup.Key = 'idType'+int2Str(approvecount);
                        lookup.Value = idType;
                        lookups.Add(lookup);
                    }
                }
            }

            lookup = new EFT.DataContract_1_0.PaymentExtra();
            lookup.Key = 'idTypeCount';
            lookup.Value = int2Str(approvecount);
            lookups.Add(lookup);
        }

        if(lSKS_EFT_FileDetail.FormatId == 'US-CHASE-SD-SUA-CSV')
        {
            CompanyInfo     companyinfo;
            DataArea        dataarea;
            str             timezone, finaltimezone;
   
            companyinfo = CompanyInfo::find();

            select dataarea where dataarea.id == companyinfo.DataArea;
            timezone = strFmt('%1', dataarea.timeZone);
            finaltimezone = subStr(timezone,5,6);
            finaltimezone = strRem(finaltimezone, ':');

            if(finaltimezone)
            {
                lookup = new EFT.DataContract_1_0.PaymentExtra();
                lookup.Key = 'CompanyTimeZone';
                lookup.Value = finaltimezone;
                lookups.Add(lookup);
            }
        }

        if(lSKS_EFT_FileDetail.FormatId == 'US-SUNTRUSTBANK-TSV')
        {
            MarkupTrans       markuptrans;
            VendInvoiceJour   vendinvoicejour;

            select crossCompany  vendinvoicejour where
            vendinvoicejour.InvoiceId == lSKS_EFT_FileDetail.InvoiceNumber;

            select Value from markuptrans where markuptrans.TransRecId == vendinvoicejour.RecId &&
                                     markuptrans.TransTableId == vendinvoicejour.TableId &&
                                     markuptrans.MarkupCode == 'FREIGHT'  ;

           
            lookup = new EFT.DataContract_1_0.PaymentExtra();
            lookup.Key = 'MarkupTransValue';
            lookup.Value = num2str(markuptrans.Value,0,0,0,0);
            lookups.Add(lookup);
        }

        if(lSKS_EFT_FileDetail.FormatId == 'US-COMERICA-XML' || lSKS_EFT_FileDetail.FormatId == 'EU-BNP-SWIFT-MT100' || lSKS_EFT_FileDetail.FormatId == 'US-CNB-XML')
        {
            LedgerJournalTrans lLedgerJournalTrans;

            select firstonly ExchRate from lLedgerJournalTrans where lLedgerJournalTrans.RecId == lSKS_EFT_FileDetail.PaymentLineRecId;
           
            lookup = new EFT.DataContract_1_0.PaymentExtra();
            lookup.Key = 'ExchRate';
            lookup.Value = num2str(lLedgerJournalTrans.ExchRate,0,2,1,0);
            lookups.Add(lookup);
        }

        if(lSKS_EFT_FileDetail.FormatId == 'US-BOA-CPPX-2015')
        {
            LedgerJournalTrans lLedgerJournalTrans;
            LogisticsLocation lLogisticsLocation;
            str mLocationID;

            if (lSKS_EFT_FileDetail.PaymentLineRecId != 0)
            {
                select RemittanceLocation from lLedgerJournalTrans where lLedgerJournalTrans.RecId == lSKS_EFT_FileDetail.PaymentLineRecId;
                lLogisticsLocation = LogisticsLocation::find(lLedgerJournalTrans.RemittanceLocation);

                mLocationID = lLogisticsLocation.LocationId;

                lookup = new EFT.DataContract_1_0.PaymentExtra();
                lookup.Key = 'LocationID';
                lookup.Value = mLocationID;
                lookups.Add(lookup);
            }
        }
        if(lSKS_EFT_FileDetail.FormatId == 'US-BOA-GRAM-CSV')           //SKS#DevOps:22667
        {
            LedgerJournalTrans lLedgerJournalTrans;
            LogisticsLocation lLogisticsLocation;
            str mLocationDesc;

            if (lSKS_EFT_FileDetail.PaymentLineRecId != 0)
            {
                select RemittanceLocation from lLedgerJournalTrans where lLedgerJournalTrans.RecId == lSKS_EFT_FileDetail.PaymentLineRecId;
                lLogisticsLocation = LogisticsLocation::find(lLedgerJournalTrans.RemittanceLocation);

                mLocationDesc = lLogisticsLocation.Description;

                lookup = new EFT.DataContract_1_0.PaymentExtra();
                lookup.Key = 'RemitToCode';
                lookup.Value = mLocationDesc;
                lookups.Add(lookup);
            }
        }
        if(lSKS_EFT_FileDetail.FormatId == 'EU-BNP-SWIFT-MT100')
        {
            LedgerJournalTrans lLedgerJournalTrans;

            select firstonly ExchRate from lLedgerJournalTrans where lLedgerJournalTrans.RecId == lSKS_EFT_FileDetail.PaymentLineRecId;
           
            lookup = new EFT.DataContract_1_0.PaymentExtra();
            lookup.Key = 'SequenceNum';
            lookup.Value = num2str(lSKS_EFT_FileDetail.SequenceNum,0,0,0,0);
            lookups.Add(lookup);
        }

        if(lSKS_EFT_FileDetail.FormatId == 'BR-ITAUBANK-240')
        {
            LedgerJournalTransPayment_BR lLedgerJournalTransPayment_BR;

            select firstonly EPPaymentType_BR, EPPaymentWay_BR from lLedgerJournalTransPayment_BR where lLedgerJournalTransPayment_BR.RefRecId == lSKS_EFT_FileDetail.PaymentLineRecId;

            VendTable lVendTable = VendTable::findByCompany(lSKS_EFT_FileDetail.AccountCompany, lSKS_EFT_FileDetail.AccountNum);

            BankAccountTable lBankAccountTable = BankAccountTable::findByCompany(lSKS_EFT_FileDetail.AccountCompany, lSKS_EFT_FileDetail.BankAccountId);
            
            lookup = new EFT.DataContract_1_0.PaymentExtra();
            lookup.Key = 'CompanyPaymId';
            lookup.Value = lBankAccountTable.CompanyPaymId;
            lookups.Add(lookup);

            lookup = new EFT.DataContract_1_0.PaymentExtra();
            lookup.Key = 'EPPaymentTypeBR';
            lookup.Value = lLedgerJournalTransPayment_BR.EPPaymentType_BR;
            lookups.Add(lookup);

            lookup = new EFT.DataContract_1_0.PaymentExtra();
            lookup.Key = 'EPPaymentWayBR';
            lookup.Value = lLedgerJournalTransPayment_BR.EPPaymentWay_BR;
            lookups.Add(lookup);

            lookup = new EFT.DataContract_1_0.PaymentExtra();
            lookup.Key = 'EPCompanyDocumentBR';
            lookup.Value = lLedgerJournalTransPayment_BR.EPCompanyDocument_BR;
            lookups.Add(lookup);

            lookup = new EFT.DataContract_1_0.PaymentExtra();
            lookup.Key = 'CNPJCPFNumBR';
            lookup.Value = lVendTable.CNPJCPFNum_BR;
            lookups.Add(lookup);
        }

        if (gSKS_EFT_FileFormat.FormatGroup == 'UK-NATWEST-XML-AR' || gSKS_EFT_FileFormat.FormatGroup == 'UK-HSBC-XML-EU-AR' ||
            gSKS_EFT_FileFormat.FormatGroup == 'PT-MILLENNIUMBCP-XML-AR' ||
            gSKS_EFT_FileFormat.FormatGroup == 'IE-BANKIRELAND-XML-AR' ||
            gSKS_EFT_FileFormat.FormatGroup == 'IT-UNICREDIT-XML-AR' ||
            gSKS_EFT_FileFormat.FormatGroup == 'IT-CONSORZIOCBI-XML-AR')
            
        {
            LogisticsPostalAddress  postalAddress;
            LogisticsLocation       lLogisticsLocation;

            postalAddress = this.findPostalAddressLineByPartyLocationRole(CompanyInfo::current(), 'Previous Mandate Address');
            

            lLogisticsLocation = LogisticsLocation::find(postalAddress.Location);

            if(lLogisticsLocation.Description)
            {
                lookup = new EFT.DataContract_1_0.PaymentExtra();
                lookup.Key = 'DrctDbtTxNm';
                lookup.Value = lLogisticsLocation.Description;
                lookups.Add(lookup);
            }
        }

        if(gSKS_EFT_FileFormat.FormatGroup == 'US-CITICONNECT-XML' || gSKS_EFT_FileFormat.FormatGroup == 'US-REGIONS-XML')
        {
            VendTable lVendTable;
            DirPartyLocation dirPartyLocation;
            LogisticsElectronicAddress lLogisticsElectronicAddress;
            LogisticsElectronicAddressRole lLogisticsElectronicAddressRole;
            LogisticsLocationRole lLogisticsLocationRole;
            str telNo;
            str email;

            boolean telephonenumber = true;
            boolean emailvalue = true;

            lVendTable = VendTable::findByCompany(lSKS_EFT_FileDetail.AccountCompany, lSKS_EFT_FileDetail.AccountNum);

            while select Location from DirPartyLocation where dirPartyLocation.party == lVendTable.Party
                join lLogisticsElectronicAddress where lLogisticsElectronicAddress.Location == dirPartyLocation.Location
                    join LocationRole from lLogisticsElectronicAddressRole where lLogisticsElectronicAddressRole.ElectronicAddress == lLogisticsElectronicAddress.RecId
                                join Name from lLogisticsLocationRole
                                    where lLogisticsLocationRole.RecId == lLogisticsElectronicAddressRole.LocationRole && lLogisticsLocationRole.Name == 'SKGPaymentContact'
            {
                if (lLogisticsElectronicAddress.Type == LogisticsElectronicAddressMethodType::Phone && telephonenumber)
                {
                    if (lLogisticsElectronicAddress.Locator)
                    {
                        telNo = lLogisticsElectronicAddress.Locator;
                        telephonenumber = false;
                    }
                }
                else if (lLogisticsElectronicAddress.Type == LogisticsElectronicAddressMethodType::Email && emailvalue)
                {
                    if (lLogisticsElectronicAddress.Locator)
                    {
                        email = lLogisticsElectronicAddress.Locator;
                        emailvalue = false;
                    }
                }
            }

            if(telNo)
            {
                lookup = new EFT.DataContract_1_0.PaymentExtra();
                lookup.Key = 'SKGPaymentContactPhone';
                lookup.Value = telNo;
                lookups.Add(lookup);
            }

            if(email)
            {
                lookup = new EFT.DataContract_1_0.PaymentExtra();
                lookup.Key = 'SKGPaymentContactEmail';
                lookup.Value = email;
                lookups.Add(lookup);
            }

            VendBankAccount     lVendBankAccount = VendBankAccount::findByCompany(lSKS_EFT_FileDetail.AccountCompany, lSKS_EFT_FileDetail.AccountNum, lSKS_EFT_FileDetail.DepBankAccountId);

            if(lVendBankAccount.BankAccountNameKana_JP)
            {
                lookup = new EFT.DataContract_1_0.PaymentExtra();
                lookup.Key = 'VendBankAccountNameKana_JP';
                lookup.Value = lVendBankAccount.BankAccountNameKana_JP;
                lookups.Add(lookup);
            }

            str acctType;

            switch (lVendBankAccount.TransType_JP)
            {
                case VendBankTransType_JP::Checking:
                    acctType = 'TO';
                    break;
                case VendBankTransType_JP::OrdinarySavings:
                    acctType = 'FU';
                    break;
                case VendBankTransType_JP::Others:
                    acctType = 'SO';
                    break;
                case VendBankTransType_JP::Savings:
                    acctType = 'TI';
                    break;
            }


            if(acctType)
            {
                lookup = new EFT.DataContract_1_0.PaymentExtra();
                lookup.Key = 'VendBankTransType_JP';
                lookup.Value = acctType;
                lookups.Add(lookup);
            }

            PeriodStart start;       //SKSDevOps:15853
            PeriodEnd End;

            start = FiscalCalendarYear::findYearByCalendarDate(Ledger::fiscalCalendar(CompanyInfo::find().RecId), systemDateGet()).StartDate;
            End = FiscalCalendarYear::findYearByCalendarDate(Ledger::fiscalCalendar(CompanyInfo::find().RecId), systemDateGet()).enddate;

            
            lookup = new EFT.DataContract_1_0.PaymentExtra();
            lookup.Key = 'PeriodStart';
            if(lSKS_EFT_FileDetail.TransactionCode == 'TAX-908')
            {
                lookup.Value = int2str(year(start)) + '-' + subStr(int2str(year(End)),3,4);
            }
            else
            {
                lookup.Value = SKS_PP_StringFormats::strDateYYYYMMDD(start, DateSeparator::Hyphen);
            }

            lookups.Add(lookup);

            lookup = new EFT.DataContract_1_0.PaymentExtra();
            lookup.Key = 'PeriodEnd';
            if(lSKS_EFT_FileDetail.TransactionCode == 'TAX-908')
            {
                lookup.Value = int2str(year(start)) + '-' + subStr(int2str(year(End)),3,4);
            }
            else
            {
                lookup.Value = SKS_PP_StringFormats::strDateYYYYMMDD(End, DateSeparator::Hyphen);
            }

            lookups.Add(lookup);


        }

        if(gSKS_EFT_FileFormat.FormatGroup == 'US-WF-PMS-FF-DSV')
        {
            VendBankAccount mVendBankAccount = VendBankAccount::findByCompany(lSKS_EFT_FileDetail.AccountCompany, lSKS_EFT_FileDetail.AccountNum, lSKS_EFT_FileDetail.DepBankAccountId);

            lookup = new EFT.DataContract_1_0.PaymentExtra();
            lookup.Key = 'VendBankAccount_Email';
            lookup.Value = mVendBankAccount.Email;
            lookups.Add(lookup);

            DirPartyLocation dirPartyLocation;
            LogisticsElectronicAddress lLogisticsElectronicAddress;
            LogisticsElectronicAddressRole lLogisticsElectronicAddressRole;
            LogisticsLocationRole lLogisticsLocationRole;
            VendTable lVendTable;
            str contactEmail;

            lVendTable = VendTable::findByCompany(lSKS_EFT_FileDetail.AccountCompany, lSKS_EFT_FileDetail.AccountNum);  //SKSDevOps:22119

            while select DirPartyLocation where dirPartyLocation.party == lVendTable.Party join lLogisticsElectronicAddress where lLogisticsElectronicAddress.Location == dirPartyLocation.Location
                    join LocationRole from lLogisticsElectronicAddressRole where lLogisticsElectronicAddressRole.ElectronicAddress == lLogisticsElectronicAddress.RecId
                                join Name from lLogisticsLocationRole
                                    where lLogisticsLocationRole.RecId == lLogisticsElectronicAddressRole.LocationRole && lLogisticsLocationRole.Name == 'AP EFT'
            {
                if(LogisticsElectronicAddressMethodType::Email)
                {
                    if(lLogisticsElectronicAddress.Locator)
                    {
                        contactEmail = lLogisticsElectronicAddress.Locator;
                    }
                }
            }
            lookup = new EFT.DataContract_1_0.PaymentExtra();
            lookup.Key = 'SKGPaymentContact_Email';
            lookup.Value = contactEmail;
            lookups.Add(lookup);
           
        }


        if(lSKS_EFT_FileDetail.FormatId == 'US-CITICONNECT-WL-XML-IN')
        {
            lookup = new EFT.DataContract_1_0.PaymentExtra();
            lookup.Key = 'PurpCodeDescription';

            lookup.Value = this.getCodelookupDescriptionValue('PurpCode', gSKS_EFT_FileFormatPaymSpec);

            lookups.Add(lookup);
        }

        if(lSKS_EFT_FileDetail.FormatId == 'US-CITICONNECT-WL-XML-PK')
        {
            lookup = new EFT.DataContract_1_0.PaymentExtra();
            lookup.Key = 'PurpOfPmtPKDescription';

            lookup.Value = this.getCodelookupDescriptionValue('PurpOfPmtPK', gSKS_EFT_FileFormatPaymSpec);

            lookups.Add(lookup);

            lookup = new EFT.DataContract_1_0.PaymentExtra();
            lookup.Key = 'RelationPKDescription';

            lookup.Value = this.getCodelookupDescriptionValue('RelationPK', gSKS_EFT_FileFormatPaymSpec);

            lookups.Add(lookup);
        }

        if(lSKS_EFT_FileDetail.FormatId == 'US-CITICONNECT-WL-XML-US' || lSKS_EFT_FileDetail.FormatId == 'US-CITICONNECT-WL-XML-CA')
        {
            lookup = new EFT.DataContract_1_0.PaymentExtra();
            lookup.Key = 'APEMReplyToAddr';

            lookup.Value = SKS_EFT_Setup::find().APEMReplyToAddr;

            lookups.Add(lookup);
        }

        if(gSKS_EFT_FileFormat.FormatGroup == 'US-BOA-XML' || gSKS_EFT_FileFormat.FormatGroup == 'US-REGIONS-XML')
        {
            VendBankAccount mVendBankAccount = VendBankAccount::findByCompany(lSKS_EFT_FileDetail.AccountCompany, lSKS_EFT_FileDetail.AccountNum, lSKS_EFT_FileDetail.DepBankAccountId);

            lookup = new EFT.DataContract_1_0.PaymentExtra();
            lookup.Key = 'VendBankAccount_Phone';
            lookup.Value = mVendBankAccount.Phone;
            lookups.Add(lookup);

            lookup = new EFT.DataContract_1_0.PaymentExtra();
            lookup.Key = 'VendBankAccount_ContactPerson';
            lookup.Value = mVendBankAccount.ContactPerson;
            lookups.Add(lookup);

            DirPartyLocation dirPartyLocation;
            LogisticsElectronicAddress lLogisticsElectronicAddress;
            LogisticsElectronicAddressRole lLogisticsElectronicAddressRole;
            LogisticsLocationRole lLogisticsLocationRole;
            VendTable lVendTable;
            str contactName, contactPhone;

            lVendTable = VendTable::findByCompany(lSKS_EFT_FileDetail.AccountCompany, lSKS_EFT_FileDetail.AccountNum);  //SKSDevOps:17662

            while select Location from DirPartyLocation where dirPartyLocation.party == lVendTable.Party
                    join lLogisticsElectronicAddress where lLogisticsElectronicAddress.Location == dirPartyLocation.Location
                        join LocationRole from lLogisticsElectronicAddressRole where lLogisticsElectronicAddressRole.ElectronicAddress == lLogisticsElectronicAddress.RecId
                                          join Name from lLogisticsLocationRole
                                              where lLogisticsLocationRole.RecId == lLogisticsElectronicAddressRole.LocationRole && lLogisticsLocationRole.Name == 'SKGPaymentContact'
            {
                if (LogisticsElectronicAddressMethodType::Phone)
                {
                    if (lLogisticsElectronicAddress.Locator)
                    {
                        contactPhone = lLogisticsElectronicAddress.Locator;
                    }
                }

                contactName = lLogisticsElectronicAddress.Description;
            }

            lookup = new EFT.DataContract_1_0.PaymentExtra();
            lookup.Key = 'SKGPaymentContact_Name';
            lookup.Value = contactName;
            lookups.Add(lookup);

            lookup = new EFT.DataContract_1_0.PaymentExtra();
            lookup.Key = 'SKGPaymentContact_Phone';
            lookup.Value = contactPhone;
            lookups.Add(lookup);
        }

        //Customization on DevOps #17523--->
        if(gSKS_EFT_FileFormat.FormatGroup == 'US-BOA-XML' || gSKS_EFT_FileFormat.FormatGroup == 'US-CNB-XML')
        {
            SKS_PP_Setup locSKS_PP_Setup;

            select * from locSKS_PP_Setup;

            if(locSKS_PP_Setup.RegCustomerID == '8a02c1')
            {
                VendTable  locvendTable;

                locvendTable = VendTable::findByCompany(lSKS_EFT_FileDetail.AccountCompany, lSKS_EFT_FileDetail.AccountNum);

                lookup = new EFT.DataContract_1_0.PaymentExtra();
                lookup.Key = 'Cdtr_Nm_Extension';
                lookup.Value = DirPartyTable::getName(locvendTable.Party);
                lookups.Add(lookup);
            }
        }//<-----

        if(gSKS_EFT_FileFormat.FormatGroup == 'US-BNY-MELLON-FX')
        {
            LogisticsElectronicAddress lLogisticsElectronicAddress;
            LogisticsLocation lLogisticsLocation;
            DirPartyLocation lDirPartyLocation;

            while select Location, Party from lDirPartyLocation join lLogisticsElectronicAddress
                                        where lDirPartyLocation.Party == CompanyInfo::find().RecId
                                           && lLogisticsElectronicAddress.Location == lDirPartyLocation.Location
                                           && lLogisticsElectronicAddress.Type == LogisticsElectronicAddressMethodType::Email
                                         join Description from lLogisticsLocation
                                    where lLogisticsLocation.RecId == lLogisticsElectronicAddress.Location
                                       && lLogisticsLocation.Description like 'FASTTRACK*'
            {
                if(lLogisticsElectronicAddress.Locator)
                {
                    lookup = new EFT.DataContract_1_0.PaymentExtra();
                    lookup.Key = 'FASTTRACKEmail';
                    lookup.Value = lLogisticsElectronicAddress.Locator;
                    lookups.Add(lookup);
                }
            }
        }


        if(lSKS_EFT_FileDetail.PaymentCompany !=  lSKS_EFT_FileDetail.AccountCompany &&
           SKS_PP_Setup::find().IHB_Active)
        {
            LogisticsPostalAddress postalAddress;
            SKS_EB_Address                          addressBldgNb, addressStrtNm;
            container                               address;

            postalAddress = CompanyInfo::findDataArea(lSKS_EFT_FileDetail.AccountCompany).postalAddress();

            if(strScan(postalAddress.Street, ';', 1, strLen(postalAddress.Street)))
            {
                address = this.addressSplit(postalAddress.Street);
                addressStrtNm = SKS_PP_StringFormats::strRemoveCRLF(conpeek(address,1));
                addressBldgNb = SKS_PP_StringFormats::strRemoveCRLF(conpeek(address,2));
            }
            else
            {
                addressStrtNm = SKS_PP_StringFormats::strRemoveCRLF(postalAddress.Street);
            }

            lookup = new EFT.DataContract_1_0.PaymentExtra();
            lookup.Key = 'UltmtDbtr_Name';
            lookup.Value = CompanyInfo::findDataArea(lSKS_EFT_FileDetail.AccountCompany).name();
            lookups.Add(lookup);

            lookup = new EFT.DataContract_1_0.PaymentExtra();
            lookup.Key = 'UltmtDbtr_Address1';
            lookup.Value = addressStrtNm;
            lookups.Add(lookup);

            lookup = new EFT.DataContract_1_0.PaymentExtra();
            lookup.Key = 'UltmtDbtr_Address2';
            lookup.Value = addressBldgNb;
            lookups.Add(lookup);

            lookup = new EFT.DataContract_1_0.PaymentExtra();
            lookup.Key = 'UltmtDbtr_TownName';
            lookup.Value = postalAddress.City;
            lookups.Add(lookup);

            lookup = new EFT.DataContract_1_0.PaymentExtra();
            lookup.Key = 'UltmtDbtr_Country';
            lookup.Value = SKS_EFT_BankFabricPayment::getLogisticsAddressCountryISO(postalAddress.CountryRegionId);
            lookups.Add(lookup);

            lookup = new EFT.DataContract_1_0.PaymentExtra();
            lookup.Key = 'UltmtDbtr_CountryISO3';
            lookup.Value = LogisticsAddressCountryRegion::findByISOCode(postalAddress.CountryRegionId).CountryRegionId;
            lookups.Add(lookup);

            lookup = new EFT.DataContract_1_0.PaymentExtra();
            lookup.Key = 'UltmtDbtr_CountryName';
            lookup.Value = LogisticsAddressCountryRegion::findByISOCode(postalAddress.CountryRegionId).displayName();
            lookups.Add(lookup);

            lookup = new EFT.DataContract_1_0.PaymentExtra();
            lookup.Key = 'UltmtDbtr_CountrySubDivision';
            lookup.Value = postalAddress.State;
            lookups.Add(lookup);

            lookup = new EFT.DataContract_1_0.PaymentExtra();
            lookup.Key = 'UltmtDbtr_PostCode';
            lookup.Value = postalAddress.ZipCode;
            lookups.Add(lookup);

            lookup = new EFT.DataContract_1_0.PaymentExtra();
            lookup.Key = 'UltmtDbtr_StreetName';
            lookup.Value = postalAddress.Street;
            lookups.Add(lookup);
        }

        if(gSKS_EFT_FileFormat.FormatGroup == 'US-WF-PMS-XML-R1201212')
        {
            SKS_EFT_Setup locSKS_EFT_Setup;
            CustTable                       customerTable;
            DirPartyContactInfoview         mDirPartyContactInfoview;
            // 7536 -->
            LogisticsElectronicAddress      logisticsElectronicAddress;
            DirPartyLocation                dirPartyLocation;
            LogisticsLocationRole           locationRole;
            LogisticsElectronicAddressRole  logisticsElectronicAddressRole;
            str emailAddr, emailDescr;

            SKS_LB_Depositor lSKS_LB_Depositor = SKS_LB_Depositor::find(lSKS_EFT_FileDetail.AccountCompany, lSKS_EFT_FileDetail.AccountNum);

            if(gSKS_EFT_File.EFTFileType == SKS_EFT_Module::CNP)
            {
                locSKS_EFT_Setup = SKS_EFT_Setup::find();

                if(locSKS_EFT_Setup.ModAREFT == NoYes::Yes)
                {
                    if(lSKS_LB_Depositor.EM1Customer)
                    {
                        customerTable = CustTable::findByCompany(lSKS_LB_Depositor.CustomerCompany, lSKS_LB_Depositor.AccountNum);

                        if(locSKS_EFT_Setup.EmailContactPurpose != '')
                        {
                            select firstonly Locator, Description from logisticsElectronicAddress
                                    where logisticsElectronicAddress.Type == LogisticsElectronicAddressMethodType::Email
                                exists join dirPartyLocation
                                    where dirPartyLocation.Location == logisticsElectronicAddress.Location &&
                                            dirPartyLocation.Party == customerTable.Party
                                exists join logisticsElectronicAddressRole
                                    where logisticsElectronicAddressRole.ElectronicAddress == logisticsElectronicAddress.RecId
                                exists join locationRole
                                   where locationRole.RecId == logisticsElectronicAddressRole.LocationRole
                                        && locationRole.Name == locSKS_EFT_Setup.EmailContactPurpose;

                            emailDescr = logisticsElectronicAddress.Description;
                            emailAddr = logisticsElectronicAddress.Locator;

                        }
                        else
                        {
                            select firstonly LocationName, Locator from mDirPartyContactInfoview
                                     where mDirPartyContactInfoview.Party == customerTable.Party && mDirPartyContactInfoview.IsPrimary == true
                                           &&  mDirPartyContactInfoview.Type == LogisticsElectronicAddressMethodType::Email;


                            emailDescr = mDirPartyContactInfoView.LocationName;
                            emailAddr = mDirPartyContactInfoView.Locator;
                        }
                    }
                    else
                    {
                        emailDescr = lSKS_LB_Depositor.EM2Name;
                        emailAddr = lSKS_LB_Depositor.EM2Addr;
                    }
                }
                else
                {
                    customerTable = CustTable::findByCompany(lSKS_LB_Depositor.CustomerCompany, lSKS_LB_Depositor.AccountNum);

                    select firstonly LocationName, Locator from mDirPartyContactInfoview
                            where mDirPartyContactInfoview.Party == customerTable.Party && mDirPartyContactInfoview.IsPrimary == true
                                &&  mDirPartyContactInfoview.Type == LogisticsElectronicAddressMethodType::Email;


                    emailDescr = mDirPartyContactInfoView.LocationName;
                    emailAddr = mDirPartyContactInfoView.Locator;
                }

                if(emailAddr)
                {
                    lookup = new EFT.DataContract_1_0.PaymentExtra();
                    lookup.Key = 'CNP_Email_LocationName';
                    lookup.Value = mDirPartyContactInfoView.LocationName;
                    lookups.Add(lookup);

                    lookup = new EFT.DataContract_1_0.PaymentExtra();
                    lookup.Key = 'CNP_Email_Locator';
                    lookup.Value = mDirPartyContactInfoView.Locator;
                    lookups.Add(lookup);
                }
            }

            lookup = new EFT.DataContract_1_0.PaymentExtra();
            lookup.Key = 'PaymentLineRecId';
            lookup.Value = num2str(lSKS_EFT_FileDetail.PaymentLineRecId, 0,0,0,0);
            lookups.Add(lookup);

            if(SKS_PP_Setup::find().RegCustomerID == 'f4e21a')
            {
                str POBoxValue;

                if(gSKS_EFT_File.EFTFileType == SKS_EFT_Module::AP && lSKS_EFT_FileDetail.PaymSpec == 'CHK-ND')
                {
                    LedgerJournalTrans      lLedgerJournalTrans;
                    LogisticsPostalAddress  lRemittancePostalAddress;

                    select firstonly lRemittancePostalAddress join  RemittanceAddress from lLedgerJournalTrans
                        where lRemittancePostalAddress.Location == lLedgerJournalTrans.RemittanceLocation
                            && lLedgerJournalTrans.RecId == lSKS_EFT_FileDetail.PaymentLineRecId;

                    POBoxValue = lRemittancePostalAddress.PostBox;
                }
                else if(gSKS_EFT_File.EFTFileType == SKS_EFT_Module::CNP && lSKS_EFT_FileDetail.PaymSpec == 'CHK-ND')
                {
                    SKS_EFT_CustReimbursementPaym       lSKS_EFT_CustReimbursementPaym;

                    LogisticsPostalAddress  lRemittancePostalAddress;

                    lSKS_EFT_CustReimbursementPaym = SKS_EFT_CustReimbursementPaym::find(lSKS_EFT_FileDetail.AccountCompany, lSKS_EFT_FileDetail.AccountNum, lSKS_EFT_FileDetail.PaymMode, lSKS_EFT_FileDetail.PaymSpec, lSKS_EFT_FileDetail.DepBankAccountId);

                    if (lSKS_EFT_CustReimbursementPaym.WBeneUseCustAddr && lSKS_EFT_CustReimbursementPaym.WBeneRemittanceLocation)
                    {
                        changecompany(lSKS_EFT_CustReimbursementPaym.CustCompany)
                        {
                            select firstonly lRemittancePostalAddress
                                where lRemittancePostalAddress.Location == lSKS_EFT_CustReimbursementPaym.WBeneRemittanceLocation;
                        }
                    }
                    POBoxValue = lRemittancePostalAddress.PostBox;
                }

                lookup = new EFT.DataContract_1_0.PaymentExtra();
                lookup.Key = 'POBoxValue';
                lookup.Value = POBoxValue;
                lookups.Add(lookup);
            }
        }

        if(gSKS_EFT_FileFormat.FormatGroup == 'EU-HSBC-CCTI-V22')
        {
            VendTable locVendTable = VendTable::findByCompany(lSKS_EFT_FileDetail.AccountCompany, lSKS_EFT_FileDetail.AccountNum);
            str frmsCd;

            if(locVendTable)
            {
                if (locVendTable.TaxWithholdVendorType_TH == TaxWithholdVendorType_TH::Domestic)  //Use of Extra code looups
                {
                    frmsCd = '53';
                }
                else if (locVendTable.TaxWithholdVendorType_TH == TaxWithholdVendorType_TH::Foreign)
                {
                    frmsCd = '54';
                }
                else if (locVendTable.TaxWithholdVendorType_TH == TaxWithholdVendorType_TH::Individual)
                {
                    frmsCd = '03';
                }

                lookup = new EFT.DataContract_1_0.PaymentExtra();
                lookup.Key = 'TaxWithholdVendorType_TH';
                lookup.Value = frmsCd;
                lookups.Add(lookup);
            }


            DirPartyTable lDirPartyTable;
            str dirPartyBaseType;
            select firstonly lDirPartyTable where lDirPartyTable.RecId == locVendTable.Party;

            switch (lDirPartyTable.getInstanceRelationType())
            {
                case tableStr(DirPerson):
                    dirPartyBaseType = 'Person';
                    break;
                default:
                    dirPartyBaseType = 'Organization';
            }

            if(dirPartyBaseType)
            {
                lookup = new EFT.DataContract_1_0.PaymentExtra();
                lookup.Key = 'DirPartyBaseType';
                lookup.Value = dirPartyBaseType;
                lookups.Add(lookup);
            }


            VendBankAccount     locVendBankAccount = VendBankAccount::findByCompany(lSKS_EFT_FileDetail.AccountCompany, lSKS_EFT_FileDetail.AccountNum, lSKS_EFT_FileDetail.DepBankAccountId);

            if(locVendBankAccount.BankGroupId)
            {
                lookup = new EFT.DataContract_1_0.PaymentExtra();
                lookup.Key = 'vendBankGroupId';
                lookup.Value = locVendBankAccount.BankGroupId;
                lookups.Add(lookup);
            }

        }

        if(gSKS_EFT_File.FormatGroup == 'TH-BBL-ICASH')
        {
            VendBankAccount     locVendBankAccount = VendBankAccount::findByCompany(lSKS_EFT_FileDetail.AccountCompany, lSKS_EFT_FileDetail.AccountNum, lSKS_EFT_FileDetail.DepBankAccountId);

            if(locVendBankAccount.BankGroupId)
            {
                lookup = new EFT.DataContract_1_0.PaymentExtra();
                lookup.Key = 'vendBankGroupId';
                lookup.Value = locVendBankAccount.BankGroupId;
                lookups.Add(lookup);
            }
        }

        
        if(gSKS_EFT_FileFormat.FormatGroup == 'TH-BBL-ICASH-XML')
        {
            VendTable locVendTable = VendTable::findByCompany(lSKS_EFT_FileDetail.AccountCompany, lSKS_EFT_FileDetail.AccountNum);
            str frmsCd;

            if(locVendTable)
            {
                if (locVendTable.TaxWithholdVendorType_TH == TaxWithholdVendorType_TH::Domestic)  //Use of Extra code looups
                {
                    frmsCd = '53';
                }
                else if (locVendTable.TaxWithholdVendorType_TH == TaxWithholdVendorType_TH::Foreign)
                {
                    frmsCd = '54';
                }
                else if (locVendTable.TaxWithholdVendorType_TH == TaxWithholdVendorType_TH::Individual)
                {
                    frmsCd = '03';
                }

                lookup = new EFT.DataContract_1_0.PaymentExtra();
                lookup.Key = 'TaxWithholdVendorType_TH';
                lookup.Value = frmsCd;
                lookups.Add(lookup);
            }
        }

        if(gSKS_EFT_FileFormat.FormatGroup == 'AP-CITI-GDFF')
        {
            LedgerJournalTrans     mLedgerJournalTrans;
            TaxWithholdGroupHeading lTaxWithholdGroupHeading;


            select firstonly TaxWithholdGroup from mLedgerJournalTrans where mLedgerJournalTrans.RecId == lSKS_EFT_FileDetail.PaymentLineRecId;

            select firstonly TaxWithholdGroupName from lTaxWithholdGroupHeading where lTaxWithholdGroupHeading.TaxWithholdGroup == mLedgerJournalTrans.TaxWithholdGroup;


            if(lTaxWithholdGroupHeading.TaxWithholdGroupName)
            {
                lookup = new EFT.DataContract_1_0.PaymentExtra();
                lookup.Key = 'TaxWithholdGroupName';
                lookup.Value = lTaxWithholdGroupHeading.TaxWithholdGroupName;
                lookups.Add(lookup);
            }

            VendTable locVendTable = VendTable::findByCompany(lSKS_EFT_FileDetail.AccountCompany, lSKS_EFT_FileDetail.AccountNum);
            
            DirPartyTable lDirPartyTable;
            str dirPartyBaseType;
            select firstonly lDirPartyTable where lDirPartyTable.RecId == locVendTable.Party;

            switch (lDirPartyTable.getInstanceRelationType())
            {
                case tableStr(DirPerson):
                    dirPartyBaseType = 'Person';
                    break;
                default:
                    dirPartyBaseType = 'Organization';
            }

            if(dirPartyBaseType)
            {
                lookup = new EFT.DataContract_1_0.PaymentExtra();
                lookup.Key = 'DirPartyBaseType';
                lookup.Value = dirPartyBaseType;
                lookups.Add(lookup);
            }

            lookup = new EFT.DataContract_1_0.PaymentExtra();
            lookup.Key = 'DepBankAccountId';
            lookup.Value = lSKS_EFT_FileDetail.DepBankAccountId;
            lookups.Add(lookup);
        }
        
        if(gSKS_EFT_FileFormat.FormatGroup == 'DK-NETS-BS-601-AR' || gSKS_EFT_FileFormat.FormatGroup == 'DK-NETS-LS-DEBTORINFO-AR')
        {
            SKS_PP_Bank         lSKS_PP_Bank;
            SKS_EB_BankTable    lSKS_EB_BankTable;
            BankAccountTable mBankAccountTable = BankAccountTable::find(lSKS_EFT_FileDetail.BankAccountId);

            select lSKS_PP_Bank where lSKS_PP_Bank.BankAccountId == mBankAccountTable.AccountId
                        join lSKS_EB_BankTable where lSKS_EB_BankTable.BankAccountID == lSKS_PP_Bank.BankID;

            if(lSKS_EB_BankTable.CreditorNumber4)
            {
                lookup = new EFT.DataContract_1_0.PaymentExtra();
                lookup.Key = 'CreditorNumber4';
                lookup.Value = lSKS_EB_BankTable.CreditorNumber4;
                lookups.Add(lookup);
            }

            if(lSKS_EB_BankTable.CreditorNumber3)
            {
                lookup = new EFT.DataContract_1_0.PaymentExtra();
                lookup.Key = 'CreditorNumber3';
                lookup.Value = lSKS_EB_BankTable.CreditorNumber3;
                lookups.Add(lookup);
            }

            if(lSKS_EB_BankTable.CreditorNumber2)
            {
                lookup = new EFT.DataContract_1_0.PaymentExtra();
                lookup.Key = 'CreditorNumber2';
                lookup.Value = lSKS_EB_BankTable.CreditorNumber2;
                lookups.Add(lookup);
            }

            if(lSKS_EB_BankTable.CreditorNumber1)
            {
                lookup = new EFT.DataContract_1_0.PaymentExtra();
                lookup.Key = 'CreditorNumber1';
                lookup.Value = lSKS_EB_BankTable.CreditorNumber1;
                lookups.Add(lookup);
            }

            if(lSKS_EB_BankTable.DebtorGroupNumber)
            {
                lookup = new EFT.DataContract_1_0.PaymentExtra();
                lookup.Key = 'DebtorGroupNumber';
                lookup.Value = lSKS_EB_BankTable.DebtorGroupNumber;
                lookups.Add(lookup);
            }

            if(lSKS_EFT_FileDetail.FormatId == 'DK-NETS-BS-601-AR')
            {
                LogisticsPostalAddress postalAddress = this.findPostalAddressLineByPartyLocationRoleDDB(CustTable::findByCompany(lSKS_EFT_FileDetail.AccountCompany, lSKS_EFT_FileDetail.AccountNum).Party);//SKS_VSTS_14256

                str locDescription = LogisticsLocation::find(postalAddress.Location).Description;

                if(locDescription)
                {
                    lookup = new EFT.DataContract_1_0.PaymentExtra();
                    lookup.Key = 'locDescription';
                    lookup.Value = LocDescription;
                    lookups.Add(lookup);
                }
            }
        }

        if(lSKS_EFT_FileDetail.FormatId == 'US-PNC-XML')
        {
            LedgerJournalTrans ledgerJournalTransloc;

            SKS_EFT_FileDetail_Extra sKS_EFT_FileDetail_Extra;
            LogisticsPostalAddress postalAddress;

            select firstonly * from sKS_EFT_FileDetail_Extra  order by RecId desc
                    where sKS_EFT_FileDetail_Extra.FieldName == 'UseCdtrAddressPurpose'
                    && sKS_EFT_FileDetail_Extra.RefRecId == lSKS_EFT_FileDetail.RecId
                    && sKS_EFT_FileDetail_Extra.CodeLookupType == SKS_EFT_CodeLookupType::CodeLookup;

            postalAddress = this.findPostalAddressLineByPartyLocationRole(VendTable::findByCompany(lSKS_EFT_FileDetail.AccountCompany, lSKS_EFT_FileDetail.AccountNum).Party, sKS_EFT_FileDetail_Extra.Value);

            if(postalAddress)
            {
                lookup = new EFT.DataContract_1_0.PaymentExtra();
                lookup.Key = 'PNCPostalAddress';
                lookup.Value = any2Str(postalAddress);
                lookups.Add(lookup);
            }

            if(lSKS_EFT_FileDetail.PaymSpec == 'CHK')
            {
                select firstonly ledgerJournalTransloc where ledgerJournalTransloc.RecId == lSKS_EFT_FileDetail.PaymentLineRecId;

                if (ledgerJournalTransloc.DocumentDate)
                {
                    lookup = new EFT.DataContract_1_0.PaymentExtra();
                    lookup.Key = 'DocumentDate';
                    lookup.Value = any2Str(ledgerJournalTransloc.DocumentDate);
                    lookups.Add(lookup);
                }
            }
        }
        if(lSKS_EFT_FileDetail.FormatId == 'CZ-KOMERCNIBANKA-353')          //SKS#DevOps:22574
        {
            LedgerJournalTrans ledgerJournalTransloc;

            select firstonly ledgerJournalTransloc where ledgerJournalTransloc.RecId == lSKS_EFT_FileDetail.PaymentLineRecId;

            if (ledgerJournalTransloc.Due)
            {
                lookup = new EFT.DataContract_1_0.PaymentExtra();
                lookup.Key = 'DueDate';
                lookup.Value = any2Str(SKS_PP_StringFormats::strDateYYYYMMDD(ledgerJournalTransloc.Due));
                lookups.Add(lookup);
            }
        }

        if(lSKS_EFT_FileDetail.FormatId == 'CA-TDBANK-XML' || lSKS_EFT_FileDetail.FormatId == 'CA-TDBANK-XML-US' || lSKS_EFT_FileDetail.FormatId == 'CH-UBS-XML')
        {
            if (lSKS_EFT_FileDetail.AccountName)
            {
                lookup = new EFT.DataContract_1_0.PaymentExtra();
                lookup.Key = 'AccountName';
                lookup.Value =lSKS_EFT_FileDetail.AccountName;
                lookups.Add(lookup);
            }
        }

        if(lSKS_EFT_FileDetail.FormatId == 'UK-BARCLAYS-XML-AR')
        {
            str value;
            CustDirectDebitMandate  custDirectDebitMandate;
    
            //              SeqTp
            if(custDirectDebitMandate.MandatePaymentType == CustMandatePaymentType::OneTime)
            {
                value = 'OOFF';
            }
            else
            {
                value = 'RCUR';
            }

            if (value)
            {
                lookup = new EFT.DataContract_1_0.PaymentExtra();
                lookup.Key = 'MandatePaymentType';
                lookup.Value = value;
                lookups.Add(lookup);
            }
        }

        if(lSKS_EFT_FileDetail.FormatId == 'US-PNC-PAFF-v20140301')
        {
            SKS_EFT_FileDetail locSKS_EFT_FileDetail, chkSKS_EFT_FileDetail;
            int numofInvoices;

            if(lSKS_EFT_FileDetail.PaymSpec == 'CHK-UM' || lSKS_EFT_FileDetail.PaymSpec == 'CHK-ON' || lSKS_EFT_FileDetail.PaymSpec == 'CHK-BM' ||
                lSKS_EFT_FileDetail.PaymSpec == 'CHK-CN' || lSKS_EFT_FileDetail.PaymSpec == 'CHK-IT' || lSKS_EFT_FileDetail.PaymSpec == 'CHK-2D' || lSKS_EFT_FileDetail.PaymSpec == 'CHK-PM')
            {
                select count(Recid) from locSKS_EFT_FileDetail
                    where locSKS_EFT_FileDetail.RecordSummaryRecID == lSKS_EFT_FileDetail.RecId
                    && (lSKS_EFT_FileDetail.PaymSpec == 'CHK-UM'
                    || lSKS_EFT_FileDetail.PaymSpec ==  'CHK-ON'
                    || lSKS_EFT_FileDetail.PaymSpec ==  'CHK-BM'
                    || lSKS_EFT_FileDetail.PaymSpec ==  'CHK-CN'
                    || lSKS_EFT_FileDetail.PaymSpec ==  'CHK-IT'
                    || lSKS_EFT_FileDetail.PaymSpec ==  'CHK-2D'
                    || lSKS_EFT_FileDetail.PaymSpec ==  'CHK-PM' );

                numofInvoices = int642int(locSKS_EFT_FileDetail.Recid);

                while select chkSKS_EFT_FileDetail    //SKGVSTS:15351
                where chkSKS_EFT_FileDetail.RecordSummaryRecID == lSKS_EFT_FileDetail.RecId
                {
                    if(strLen(chkSKS_EFT_FileDetail.InvoiceTransactionTxt) > 30)
                    {
                        numofInvoices++;
                    }
                }
            }

            if(lSKS_EFT_FileDetail.PaymSpec == 'APCARD')
            {
                select count(Recid) from locSKS_EFT_FileDetail
                    where locSKS_EFT_FileDetail.RecordSummaryRecID == lSKS_EFT_FileDetail.RecId
                    && locSKS_EFT_FileDetail.PaymSpec == 'APCARD';

                numofInvoices = int642int(locSKS_EFT_FileDetail.Recid);
            }

            if(lSKS_EFT_FileDetail.PaymSpec == 'ACH-CTX')
            {
                select count(Recid) from locSKS_EFT_FileDetail
                    where locSKS_EFT_FileDetail.RecordSummaryRecID == lSKS_EFT_FileDetail.RecId
                    && locSKS_EFT_FileDetail.PaymSpec == 'ACH-CTX';

                numofInvoices = int642int(locSKS_EFT_FileDetail.Recid);
            }

            if (numofInvoices)
            {
                lookup = new EFT.DataContract_1_0.PaymentExtra();
                lookup.Key = 'InvCount';
                lookup.Value = any2str(numofInvoices);
                lookups.Add(lookup);
            }
        }

        if(lSKS_EFT_FileDetail.FormatId == 'US-CHASE-SUA-28')
        {
            int tzOffset;
            str formatTimeZone;
    
            tzOffset = any2Int(100 * DateTimeUtil::getTimeZoneOffset(DateTimeUtil::utcNow(), DateTimeUtil::getUserPreferredTimeZone())/60);

            if(tzOffset < 0)
            {
                tzOffset = -1*tzOffset;
                formatTimeZone = '-';
            }
            else
            {
                formatTimeZone = '+';
            }
    
            formatTimeZone += SKS_PP_StringFormats::strFill(4, int2str(tzOffset), 0, SKS_PP_FillSide::Left);

            if (formatTimeZone)
            {
                lookup = new EFT.DataContract_1_0.PaymentExtra();
                lookup.Key = 'FormatTimeZone';
                lookup.Value = formatTimeZone;
                lookups.Add(lookup);
            }
        }

        if(lSKS_EFT_FileDetail.FormatId == 'EU-BNP-XML-CH') //DevOps #20844
        {
            VendBankAccount lVendBankAccount_CH = VendBankAccount::findByCompany(lSKS_EFT_FileDetail.AccountCompany, lSKS_EFT_FileDetail.AccountNum, lSKS_EFT_FileDetail.DepBankAccountId);

            lookup = new EFT.DataContract_1_0.PaymentExtra();
            lookup.Key = 'QRIBAN_CH';
            lookup.Value = lVendBankAccount_CH.QRIBAN_CH;
            lookups.Add(lookup);
        }

        this.payment_Extras_Extension(lookups);
        // Note: Explicit conversion to System.Object is required by the X++ compiler to return a System.Collections.Generic object in an X++ method.
        System.Object asObject = lookups;
        payment.Payment_Extras = asObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCodelookupDescriptionValue</Name>
				<Source><![CDATA[
    public str getCodelookupDescriptionValue(SKS_EB_CodeId _FormatFieldID, SKS_EFT_FileFormatPaymSpec _SKS_EFT_FileFormatPaymSpec)
    {
        SKS_EFT_FileFormatPaymSpecFields lSKS_EFT_FileFormatPaymSpecFields;
        SKS_EB_CodeLookupValues lSKS_EB_CodeLookupValues;
        SKS_EFT_VendorPaymLookup lSKS_EFT_VendorPaymLookup;
        SKS_EFT_VendorPaym lSKS_EFT_VendorPaym = SKS_EFT_VendorPaym::findbycompany(lSKS_EFT_FileDetail.PaymentCompany ? lSKS_EFT_FileDetail.PaymentCompany :
                                    lSKS_EFT_FileDetail.DataAreaId, lSKS_EFT_FileDetail.AccountCompany, lSKS_EFT_FileDetail.AccountNum,
                                    lSKS_EFT_FileDetail.PaymMode, lSKS_EFT_FileDetail.PaymSpec, lSKS_EFT_FileDetail.DepBankAccountId);
        str ret = '';
    
        select FileFormatPaymSpecRecId, FormatFieldID, RecId, FieldType, FixedValue from lSKS_EFT_FileFormatPaymSpecFields
                                                                                   where lSKS_EFT_FileFormatPaymSpecFields.FileFormatPaymSpecRecId == _SKS_EFT_FileFormatPaymSpec.RecId &&
                                                                                         lSKS_EFT_FileFormatPaymSpecFields.FormatFieldID == _FormatFieldID join CodeLookupValuesRecId, FixedValue, FileFormatPaymSpecFieldsRecId
                                                                                    from lSKS_EFT_VendorPaymLookup
                                                                                   where lSKS_EFT_VendorPaymLookup.FileFormatPaymSpecFieldsRecId == lSKS_EFT_FileFormatPaymSpecFields.RecId
                                                                                      && lSKS_EFT_VendorPaymLookup.VendorPaymRecId == lSKS_EFT_VendorPaym.RecId;

        if(lSKS_EFT_FileFormatPaymSpecFields.FieldType == SKS_EFT_CodeFieldType::CodeLookup)
        {
            select DisplayValue, RecId from lSKS_EB_CodeLookupValues where lSKS_EB_CodeLookupValues.RecId == lSKS_EFT_VendorPaymLookup.CodeLookupValuesRecId;
            ret =  lSKS_EB_CodeLookupValues.DisplayValue;
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addressSplit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Splits an address
    /// </summary>
    /// <param name = "_address">Address</param>
    /// <returns>Returns a container</returns>
    protected container addressSplit(SKS_EB_Address  _address)
    {
        List            strList = new List(Types::String);
        container       address;
        ListIterator    iterator;
    
        strlist = strSplit(_address,';');
        iterator = new ListIterator(strlist);
    
        while(iterator.more())
        {
            address += iterator.value();
            iterator.next();
        }
    
        return address;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInvoiceFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Invoice fields
    /// </summary>
    /// <param name = "_invSKS_EFT_FileDetail">File detail</param>
    /// <returns>Payment invoice</returns>
    protected EFT.DataContract_1_0.PaymentInvoice setInvoiceFields(SKS_EFT_FileDetail _invSKS_EFT_FileDetail)
    {
        EFT.DataContract_1_0.PaymentInvoice invoice = new EFT.DataContract_1_0.PaymentInvoice();
        EFT.DataContract_1_0.PaymentInvoiceXOther invoicexOther = new EFT.DataContract_1_0.PaymentInvoiceXOther();
        VendInvoiceJour     vendInvoiceJour;
        CustTransOpen       lCustTransOpen;
        VendTransOpen       lVendTransOpen;
        invoice.CurrencyCode = _invSKS_EFT_FileDetail.InvoiceCurrencyCode;

        int multiplier = 1;
        if(_invSKS_EFT_FileDetail.Module == SKS_EFT_Module::AP || _invSKS_EFT_FileDetail.Module == SKS_EFT_Module::CNP
            || (_invSKS_EFT_FileDetail.Module == SKS_EFT_Module::BTB && gSKS_EFT_File.TransferDirection == SKS_BTB_TransferType::Transfer_out))
        {
            multiplier = -1;
        }
        invoice.DiscountAmountPmtCur = _invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur * multiplier;
        invoice.InvoiceDate = CLRSystemDateTime2UtcDateTime(DateTimeUtil::newDateTime(_invSKS_EFT_FileDetail.InvoiceDate,0));
        invoice.InvoiceDescription = _invSKS_EFT_FileDetail.InvoiceTransactionTxt;
        invoice.InvoiceNumber = _invSKS_EFT_FileDetail.InvoiceNumber;
        invoice.PaymentId = _invSKS_EFT_FileDetail.PaymId;
        invoice.PONumber = _invSKS_EFT_FileDetail.PurchId;
        invoice.SettleAmountInvCur = _invSKS_EFT_FileDetail.InvoiceSettleAmountCur * multiplier;
        invoice.SettleAmountPmtCur = _invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * multiplier;


        if(paymentFile.Module == EFT.DataContract_1_0.Module::AccountsPayable)
        {
            if(_invSKS_EFT_FileDetail.InvoiceNumber)
            {
                vendInvoiceJour.clear();

                if(lSKS_EFT_FileDetail.FormatId == 'EU-DANSKEBANK-XML-PL' ||
                    lSKS_EFT_FileDetail.FormatId == 'PL-MBANK-XML' ||
                    lSKS_EFT_FileDetail.FormatId == 'EU-SEB-XML-PL')
                {
                    TaxTrans taxTrans;
                    VendTrans vendTrans;

                    changecompany(_invSKS_EFT_FileDetail.InvoiceCompany)
                    {
                        select firstonly TaxAmountCur from taxTrans//DevOps20993
                        join vendTrans where
                            taxTrans.TransDate == vendTrans.TransDate &&
                            taxTrans.Voucher == vendTrans.Voucher &&
                            vendTrans.RecId == _invSKS_EFT_FileDetail.VendTransRecId;
                    }

                    invoicexOther.VATAmount = taxTrans.TaxAmountCur;
                }           //SKS_DevOps_19998&20811<---
                else
                {
                    changecompany(_invSKS_EFT_FileDetail.InvoiceCompany)
                    {
                        select firstOnly SumTax from  vendInvoiceJour
                            where vendInvoiceJour.InvoiceAccount    ==  _invSKS_EFT_FileDetail.AccountNum &&
                            vendInvoiceJour.InvoiceDate      ==  _invSKS_EFT_FileDetail.InvoiceDate &&
                            vendInvoiceJour.InvoiceId         ==  _invSKS_EFT_FileDetail.InvoiceNumber;

                        if(!vendInvoiceJour)
                        {
                            select firstOnly SumTax from  vendInvoiceJour
                                where vendInvoiceJour.InvoiceAccount    ==  _invSKS_EFT_FileDetail.AccountNum &&
                                vendInvoiceJour.DocumentDate            ==  _invSKS_EFT_FileDetail.InvoiceDate &&
                                vendInvoiceJour.InvoiceId               ==  _invSKS_EFT_FileDetail.InvoiceNumber;
                        }
                    }
                    
                    invoicexOther.VATAmount = vendInvoiceJour.SumTax;
                }
            }

            select crossCompany DueDate from lVendTransOpen
                where lVendTransOpen.RefRecId == _invSKS_EFT_FileDetail.VendTransRecId;

            if(lVendTransOpen)
            {
                invoicexOther.InvoiceDueDate = CLRSystemDateTime2UtcDateTime(DateTimeUtil::newDateTime(lVendTransOpen.DueDate,0));
            }
        }
        else
        {
            select crossCompany DueDate from lCustTransOpen
                where lCustTransOpen.RefRecId == _invSKS_EFT_FileDetail.VendTransRecId;

            if(lCustTransOpen)
            {
                invoicexOther.InvoiceDueDate = CLRSystemDateTime2UtcDateTime(DateTimeUtil::newDateTime(lCustTransOpen.DueDate,0));
            }
        }
        
        invoice.XOther = invoicexOther;

        this.setInvoiceFields_Extesnion(_invSKS_EFT_FileDetail, invoice);

        this.invoice_Extras(_invSKS_EFT_FileDetail, invoice);

        return invoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoice_Extras</Name>
				<Source><![CDATA[
    protected void invoice_Extras(SKS_EFT_FileDetail _invSKS_EFT_FileDetail, EFT.DataContract_1_0.PaymentInvoice invoice)
    {
        Generic.List<EFT.DataContract_1_0.PaymentExtra> lookups = new Generic.List<EFT.DataContract_1_0.PaymentExtra>();
        EFT.DataContract_1_0.PaymentExtra lookup;

        LedgerJournalTrans ledgerJournalTrans;

        select PurchIdRange from ledgerJournalTrans where ledgerJournalTrans.Invoice == _invSKS_EFT_FileDetail.InvoiceNumber;

        if(ledgerJournalTrans.PurchIdRange)
        {
            lookup = new EFT.DataContract_1_0.PaymentExtra();
            lookup.Key = 'PurchIdRange';
            lookup.Value = ledgerJournalTrans.PurchIdRange;
            lookups.Add(lookup);
        }

        if(_invSKS_EFT_FileDetail.PurchNumberSequence)
        {
            lookup = new EFT.DataContract_1_0.PaymentExtra();
            lookup.Key = 'PurchNumberSequence';
            lookup.Value = _invSKS_EFT_FileDetail.PurchNumberSequence;
            lookups.Add(lookup);
        }

        if(_invSKS_EFT_FileDetail.InvoiceVoucherNumber)
        {
            lookup = new EFT.DataContract_1_0.PaymentExtra();
            lookup.Key = 'InvoiceVoucherNumber';
            lookup.Value = _invSKS_EFT_FileDetail.InvoiceVoucherNumber;
            lookups.Add(lookup);
        }

        this.invoice_Extras_Extension(_invSKS_EFT_FileDetail, lookups);

        // Note: Explicit conversion to System.Object is required by the X++ compiler to return a System.Collections.Generic object in an X++ method.
        System.Object asObject = lookups;
        invoice.Invoice_Extras = asObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPostalAddressLineByPartyLocationRoleDDB</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds postal address by party location role DB
    /// </summary>
    /// <param name = "_party">Party record Id</param>
    /// <returns>Returns a postal address</returns>
    protected LogisticsPostalAddress findPostalAddressLineByPartyLocationRoleDDB(
        DirPartyRecId   _party)
    {
        DirPartyLocation        partyLocation;
        LogisticsLocation       logisticsLocation;
        LogisticsPostalAddress  postalAddress;
        
        while select partyLocation
            where partyLocation.Party == _party
        {
            if(partyLocation.IsPrimary == NoYes::Yes && strScan(partyLocation.locationRoleNames(),'Business',1,strLen(partyLocation.locationRoleNames())))//SKS_VSTS_14256
            {
                logisticsLocation = logisticsLocation::find(partyLocation.Location);
                if(logisticsLocation.IsPostalAddress)
                {
                    postalAddress = LogisticsPostalAddress::findByLocation(logisticsLocation.RecId);
                    break;
                }
            }
            else
            {
                if(strScan(partyLocation.locationRoleNames(),'Direct Debit',1,strLen(partyLocation.locationRoleNames())))
                {
                    logisticsLocation = logisticsLocation::find(partyLocation.Location);
                    if(logisticsLocation.IsPostalAddress)
                    {
                        postalAddress = LogisticsPostalAddress::findByLocation(logisticsLocation.RecId);
                        break;
                    }
                }
            }
        }
        return postalAddress;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>