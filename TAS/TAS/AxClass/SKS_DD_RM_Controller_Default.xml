<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_DD_RM_Controller_Default</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>CustDirectDebitMandateController</c> class is the controller class for the
///    <c>CustDirectDebitMandate</c> SSRS report.
/// </summary>
class SKS_DD_RM_Controller_Default extends SKS_DD_RM_Controller
{
    CustDirectDebitMandateContract contract;


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    protected void preRunModifyContract()
    {
        CustDirectDebitMandate selectedMandate = this.parmArgs() ? this.parmArgs().record() : null;
        CustTable custTable;

        contract = this.parmReportContract().parmRdpContract() as CustDirectDebitMandateContract;
        contract.parmMandateReference(selectedMandate.MandateReference);

        select firstonly Party from custTable where custTable.AccountNum == selectedMandate.CustAccount;

        this.parmReportContract().parmRdlContract().parmLanguageId(custTable.languageId());
        this.parmReportContract().parmRdlContract().parmLabelLanguageId(custTable.languageId());

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        CustDirectDebitMandate			   locCustDirectDebitMandate;
        SRSPrintDestinationSettings        SRSPrintDestinationSettings;
        str								   locFileName;
        #SRSFramework

        SKS_DD_RM_Controller_Default reportRunController = new SKS_DD_RM_Controller_Default();
        SRSReportExecutionInfo executionInfo = new SRSReportExecutionInfo();
        CustDirectDebitMandateContract contract = new CustDirectDebitMandateContract();
        SRSReportRunService srsReportRunService = new SrsReportRunService();
        Map reportParametersMap;
        Microsoft.Dynamics.AX.Framework.Reporting.Shared.ReportingService.ParameterValue[]  parameterValueArray;
        SRSProxy  srsProxy;
        System.Byte[]  reportBytes = null;

        locCustDirectDebitMandate = _args.record();
        locFileName = _args.name();

        contract.parmMandateReference(locCustDirectDebitMandate.MandateReference);

        reportRunController.parmArgs(_args);
        reportRunController.parmReportName(ssrsReportStr(SKS_CustDirectDebitMandate, PrecisionDesign2));
        reportRunController.parmShowDialog(false);
        reportRunController.parmLoadFromSysLastValue(false);
        reportRunController.parmReportContract().parmRdpContract(contract);

        SRSPrintDestinationSettings = reportRunController.parmReportContract().parmPrintSettings();
        SRSPrintDestinationSettings.printMediumType(SRSPrintMediumType::File);
        SRSPrintDestinationSettings.fileName(locFileName);
        SRSPrintDestinationSettings.fileFormat(SRSReportFileFormat::PDF);

        reportRunController.parmReportContract().parmReportServerConfig(SRSConfiguration::getDefaultServerConfiguration());
        reportRunController.parmReportContract().parmReportExecutionInfo(executionInfo);

        srsReportRunService.getReportDataContract(reportRunController.parmreportcontract().parmReportName());
        srsReportRunService.preRunReport(reportRunController.parmreportcontract());
        
        // 19239 Docentric integration
        SKS_RenderResult renderResult = new SKS_RenderResult();
        reportRunController.renderAttachment(reportRunController, renderResult);
        reportBytes = renderResult.reportBytes();

        if (!reportBytes)
        {
            reportParametersMap = srsReportRunService.createParamMapFromContract(reportRunController.parmReportContract());
            parameterValueArray = SrsReportRunUtil::getParameterValueArray(reportParametersMap);

            srsProxy = SRSProxy::constructWithConfiguration(reportRunController.parmReportContract().parmReportServerConfig());

            reportBytes = srsproxy.renderReportToByteArray(reportRunController.parmreportcontract().parmreportpath(),
                                              parameterValueArray,
                                              SRSPrintDestinationSettings.fileFormat(),
                                              SRSPrintDestinationSettings.deviceinfo());
        }

        if (reportBytes)
        {
            // Converting byte array to memory stream
            System.IO.MemoryStream stream = new System.IO.MemoryStream(reportBytes);
 
            stream.Position = 0;
            str fileContentType = System.Web.MimeMapping::GetMimeMapping(locFileName);
            // Attach the file to a record using stream object
            DocumentManagement::attachFile(locCustDirectDebitMandate.TableId,locCustDirectDebitMandate.RecId,locCustDirectDebitMandate.DataAreaId, SKS_EFT_Setup::find().UnsignedDocumentType, stream, locFileName, fileContentType,locFilename);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>renderAttachment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Docentric integration
    /// </summary>
    /// <param name = "_controller">Controller</param>
    /// <param name = "_result">Result</param>
    delegate void renderAttachment(SrsReportRunController _controller, SKS_RenderResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>renderAPAttachment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Docentric integration
    /// </summary>
    /// <param name = "_controller">Controller</param>
    /// <param name = "_result">Result</param>
    delegate void renderAPAttachment(SrsReportRunController _controller, SKS_RenderResult _result)
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>