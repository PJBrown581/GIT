<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_RF_Format_US_USBANK_EDI824</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_EFT_RF_Format_US_USBANK_EDI824 extends SKS_EFT_RF_Format
{
    //Class Variables
    //primities
    boolean gErrorsExist;
    str mFileName;
    str mFileID;
    str mTED; //Technical Error Description (and we will include the related Notes/Special Instructions
    str mFieldDelimiter;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getField</Name>
				<Source><![CDATA[
    private str getField(System.String _Record, int _FieldNumber)
    {
        str rtnval;
        //str locWorkingStr  = _Record;
        int locStartIndex, locEndIndex = 0;
        int locCounter = 0, locLength;
    
        ;
    
        while( locCounter < _FieldNumber - 1)
        {
            locCounter++;
            if(locStartindex > 0)
                locStartIndex = SKS_PP_StringFormats::strIndexOf(_Record, mFieldDelimiter, locStartIndex) + 1;
            else
                locStartIndex = SKS_PP_StringFormats::strIndexOf(_Record, mFieldDelimiter) + 1;
            if(locStartIndex <= 1)
                break;
        }
        locLength = _Record.get_Length();
        if(locStartIndex < locLength)
            if(locStartIndex > 1)
                locEndIndex = SKS_PP_StringFormats::strIndexOf(_Record, mFieldDelimiter, locStartIndex);
        if(locStartIndex > 1)
        {
            if(locStartIndex < locEndIndex)
                rtnval = SKS_PP_StringFormats::strSub(_Record,locStartIndex, locEndIndex - locStartIndex);
            else
                rtnval = SKS_PP_StringFormats::strSub(_Record,locStartIndex);
        }
    
    
        return rtnval;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFile</Name>
				<Source><![CDATA[
    public SKS_EFT_RF_File getFile(str _filename, boolean _serverPath, SKS_BF_BankIntType _SKS_BF_BankIntType = SKS_BF_BankIntType::FileHubLocal)
    {
        SKS_EB_FileHub locSKS_EB_FileHub = SKS_EB_FileHub::construct(_SKS_BF_BankIntType);
        boolean locProcessingInboundFile = false;
        boolean locProcessingBatch = false;
        System.String locString;
        locSKS_EB_FileHub.setFileName(_filename);
        locSKS_EB_FileHub.runFileInquire();
        if(!locSKS_EB_FileHub.attrFileExists())
        {
            // The file %1 does not exist.
            error(strfmt("@SYS62207", _filename));
            return null;
        }
        locSKS_EB_FileHub.runFileLoad(_filename);
        locSKS_EB_FileHub.StreamInit();
        System.IO.StreamReader locStreamReader = new System.IO.StreamReader(locSKS_EB_FileHub.streamGet());
    
        //priming read
        locString = locStreamReader.ReadLine();
        if(!mSKS_EFT_RF_File)
            mSKS_EFT_RF_File = new SKS_EFT_RF_File();
    
        while(locString != null)
        {
            if(!System.String::IsNullOrEmpty(locString))
            {
    
                if(locString.StartsWith('ISA'))
                {
                    mFieldDelimiter = locString.Substring(3,1);
                }
                if(locString.StartsWith('GS'))
                {
                    this.processGSRecord(locString);
                }
                Else if(locString.StartsWith('OTI'))
                {
                    this.processOTIRecord(locString);
                }
                Else if(locString.StartsWith('TED'))
                {
                    this.processTEDRecord(locString);
                }
                Else if(locString.StartsWith('NTE'))
                {
                    this.processTEDRecord(locString);
                }
                Else if(locString.StartsWith('SE'))
                {
                    this.processSERecord(locString);
                }
                Else if(locString.StartsWith('GE'))
                {
                    this.processSERecord(locString);
                }
    
    
    
            }
            locString = locStreamReader.ReadLine();
        }
    
        //must use the getSKS_EFT_RF_File() method becuase, if any pending mSKS_EFT_RF_SentFile have yet to be pushed into the list, this will do it.
        locStreamReader.Close();
        locSKS_EB_FileHub.StreamClose();
        if(gErrorsExist)
            mSKS_EFT_RF_File = null;
    
        return this.getSKS_EFT_RF_File();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFormatId</Name>
				<Source><![CDATA[
    public str getFormatId(str _filename, boolean _serverPath, SKS_BF_BankIntType _SKS_BF_BankIntType = SKS_BF_BankIntType::FileHubLocal)
    {
        SKS_EB_FileHub locSKS_EB_FileHub = SKS_EB_FileHub::construct(_SKS_BF_BankIntType);
        str rtnval = '';
        int classId;
        //BEGIN VALIDATION VARIABLES
        boolean FirstRecordWithTextIsISA00Found = false;
        boolean GSFound = false;
        boolean STFound = false;
        boolean triggerrebuild = true;
        int RecordsWithText = 0;
        //BEGIN DISQUALIFIER VARIABLES
        //none
        //END VALIDATION VARIABLES
        System.String locString;
        locSKS_EB_FileHub.setFileName(_filename);
        locSKS_EB_FileHub.runFileInquire();
        if(!locSKS_EB_FileHub.attrFileExists())
        {
            // The file %1 does not exist.
            error(strfmt("@SYS62207", _filename));
            return null;
        }
        locSKS_EB_FileHub.runFileLoad(_filename);
        locSKS_EB_FileHub.StreamInit();
        System.IO.StreamReader locStreamReader = new System.IO.StreamReader(locSKS_EB_FileHub.streamGet());
    
        //priming read
        locString = locStreamReader.ReadLine();
        while(locString != null)
        {
            if(!System.String::IsNullOrEmpty(locString))
            {
                //a valid ACH Acknowledgment file has records of length 94
                if(!System.String::IsNullOrWhiteSpace(locString))
                {
                    RecordsWithText++;
                    if(locString.StartsWith('ISA'))
                    {
                        mFieldDelimiter = locString.Substring(3,1);
                    }
                    if(locString.StartsWith(System.String::Concat(System.String::Concat(System.String::Concat('ISA',mFieldDelimiter),'00', mFieldDelimiter))) && RecordsWithText == 1)
                        FirstRecordWithTextIsISA00Found = true;
                    else if(locString.StartsWith(System.String::Concat('GS', mFieldDelimiter)))
                        GSFound = true;
                    else if(locString.StartsWith(System.String::Concat('ST', mFieldDelimiter)))
                        STFound = true;
                }
    
                if(FirstRecordWithTextIsISA00Found && GSFound && STFound)
                    break;
            }
            locString = locStreamReader.ReadLine();
        }
        if(FirstRecordWithTextIsISA00Found
        && GSFound
        && STFound)
        {
            //ALl Qualifers show this a SWIFT_ACKNAK_07262013 file
            classId = classIdGet(this);
            rtnval = classId2Name(ClassId);
        }
        locStreamReader.Close();
        locSKS_EB_FileHub.StreamClose();
        return rtnval;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSKS_EFT_RF_File</Name>
				<Source><![CDATA[
    public SKS_EFT_RF_File getSKS_EFT_RF_File()
    {
    
        if(mSKS_EFT_RF_SentFile != null)
        {
            mSKS_EFT_RF_File.addSentFile(mSKS_EFT_RF_SentFile);
            mSKS_EFT_RF_SentFile = null;
        }
    
        return mSKS_EFT_RF_File;
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>processGERecord</Name>
				<Source><![CDATA[
    //Process the Functional Group Trailer(GE) record
    private void processGERecord(System.String _GERecord)
    {
        mSKS_EFT_RF_File.addSentFile(mSKS_EFT_RF_SentFile);
        mSKS_EFT_RF_SentFile = null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processGSRecord</Name>
				<Source><![CDATA[
    //Process the Functional Group Header(GS) record
    private void processGSRecord(System.String _GSRecord)
    {
        mFileID =SKS_PP_StringFormats::strFill(9,this.getField(_GSRecord, 7),SKS_PP_FillCharacter::Zero,SKS_PP_FillSide::Left);
        if(!mSKS_EFT_RF_SentFile)
            mSKS_EFT_RF_SentFile = new SKS_EFT_RF_SentFile();
        this.setFileKey(mFileID);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processISARecord</Name>
				<Source><![CDATA[
    //Process the Interchange Control Header(ISA) record
    private void processISARecord(System.String _ISARecord)
    {
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>processNTERecord</Name>
				<Source><![CDATA[
    //Process the Note/Special Instruction(NTE) Record
    private void processNTERecord(System.String _NTERecord)
    {
        str locFreeFormMessage;
        ;
    
    
        if(mSKS_EFT_RF_Transaction)
        {
            locFreeFormMessage = this.getField(_NTERecord, 3);
            if(strLen(locFreeFormMessage) > 0)
            {
                if(strLen(mSKS_EFT_RF_Transaction.getAdditionalData()) > 0)
                    locFreeFormMessage = ' ' + locFreeFormMessage;
                mSKS_EFT_RF_Transaction.appendAdditionalData(locFreeFormMessage);
            }
        }
    
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>processOTIRecord</Name>
				<Source><![CDATA[
    //Process the Original Transaction Identification (OTI) record
    private void processOTIRecord(System.String _OTIRecord)
    {
        str locOTIStatus;
    
        ;
    
        if(mSKS_EFT_RF_Transaction)
        {
            mSKS_EFT_RF_SentFile.addTransaction(mSKS_EFT_RF_Transaction);
        }
        locOTIStatus = strUpr(strLRTrim(this.getField(_OTIRecord, 2)));
        if(strStartsWith(locOTIStatus,'G'))//if 'G' then this OTI is for the group
        {
            mSKS_EFT_RF_SentFile.setStatus(this.getField(_OTIRecord, 2));
        }
        else// if not 'G' then this is a transaction OTI.
        {
    
            mSKS_EFT_RF_Transaction = new SKS_EFT_RF_Transaction();
            mSKS_EFT_RF_Transaction.setStatus(strLRTrim(this.getField(_OTIRecord, 2)));
            mSKS_EFT_RF_Transaction.setID(mFileID + SKS_PP_StringFormats::strFill(30,strLRTrim(this.getField(_OTIRecord, 4)),SKS_PP_FillCharacter::Zero,SKS_PP_FillSide::Left));
    
        }
    
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>processSERecord</Name>
				<Source><![CDATA[
    //Process the Transaction Set Trailer(SE) record
    private void processSERecord(System.String _SERecord)
    {
        if(mSKS_EFT_RF_Transaction)
        {
            mSKS_EFT_RF_SentFile.addTransaction(mSKS_EFT_RF_Transaction);
            mSKS_EFT_RF_Transaction = null;
        }
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>processTEDRecord</Name>
				<Source><![CDATA[
    //Process the Technical Error Description(TED) record
    private void processTEDRecord(System.String _TEDRecord)
    {
        ;
    
    if(strLen(this.getField(_TEDRecord, 3)) > 0)
        {
            if(mSKS_EFT_RF_Transaction)
            {
                this.setStatusReason(mSKS_EFT_RF_Transaction, strLRTrim(this.getField(_TEDRecord, 2)), strLRTrim(this.getField(_TEDRecord, 3)));
    
            }
            else if(mSKS_EFT_RF_SentFile)
            {
                this.setStatusReason(mSKS_EFT_RF_SentFile, strLRTrim(this.getField(_TEDRecord, 2)), strLRTrim(this.getField(_TEDRecord, 3)));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFileKey</Name>
				<Source><![CDATA[
    protected void setFileKey(str _InboundFileKey)
    {
        mSKS_EFT_RF_SentFile.setID(_InboundFileKey);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setStatusReason</Name>
				<Source><![CDATA[
    private void setStatusReason(SKS_EFT_RF_Stucture _SKS_EFT_RF_Structure, str _StatusReasonCode, str _StatusReasonDesc = '')
    {
        System.Text.StringBuilder sb;
        ;
    
        sb = new System.Text.StringBuilder();
        if(strLen(_SKS_EFT_RF_Structure.getStatusReason()) == 0)
        {
            _SKS_EFT_RF_Structure.setStatusReason(_StatusReasonCode);
            _SKS_EFT_RF_Structure.setStatusReasonDesc(_StatusReasonDesc);
        }
        else
        {
            if(strLen(_SKS_EFT_RF_Structure.getAdditionalData()) > 0)
            {
                sb.Append('\\\\');//seperate this TED from the previous TED
            }
            sb.Append(_StatusReasonCode);
            sb.Append('-');
            sb.Append(_StatusReasonDesc);
            _SKS_EFT_RF_Structure.setAdditionalData(sb.ToString());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTextBlock</Name>
				<Source><![CDATA[
    private str setTextBlock()
    {
        str locTextBlock;
    
        return locTextBlock;
    }

]]></Source>
			</Method>
			<Method>
				<Name>outboundFileKeyGen</Name>
				<Source><![CDATA[
    public static str outboundFileKeyGen(str _OutFilename, SKS_EFTAP_File _SKS_EFTAP_File)
    {
        str locTemp;
        ;
    
        locTemp = SKS_PP_StringFormats::strSub(_SKS_EFTAP_FILE.FileNbr,1,9);
        return SKS_PP_StringFormats::strFill(9,locTemp,SKS_PP_FillCharacter::Zero,SKS_PP_FillSide::Left);
    }

]]></Source>
			</Method>
			<Method>
				<Name>outboundTransKeyGen</Name>
				<Source><![CDATA[
    public static str outboundTransKeyGen(str _FileName = '', SKS_EFT_FileDetail _SKS_EFT_FileDetail = null, SKS_EFTAP_File _SKS_EFTAP_FILE = null)
    {
        System.Text.StringBuilder sb;
        ;
    
        sb = new System.Text.StringBuilder();
    
        sb.Append(SKS_PP_StringFormats::strFill(9,SKS_PP_StringFormats::strSub(_SKS_EFTAP_FILE.FileNbr,1,9),SKS_PP_FillCharacter::Zero,SKS_PP_FillSide::Left));
        sb.Append(SKS_PP_StringFormats::strFill(30,SKS_PP_StringFormats::strSub(_SKS_EFT_FileDetail.PaymentReference,1,30),SKS_PP_FillCharacter::Zero,SKS_PP_FillSide::Left));
    
        return sb.ToString();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>