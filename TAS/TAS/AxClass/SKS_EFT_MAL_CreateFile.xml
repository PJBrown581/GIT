<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_MAL_CreateFile</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_EFT_MAL_CreateFile
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createMALFromCommId</Name>
				<Source><![CDATA[
    public void createMALFromCommId(SKS_EB_CommProcess _SKS_EB_CommProcess, boolean _isInBatch)
    {
        SKS_EFT_Bank locSKS_EFT_Bank;
        SKS_EFT_VendorPaym locSKS_EFT_VendorPaym;
        SKS_EFT_FileFormat locSKS_EFT_FileFormat;
        VendPaymModeTable locVendPaymModeTable;
        SKS_EFT_Processing locSKS_EFT_Processing;
        SKS_EFT_FileNbr locSKS_EFT_FileNbr;
        SelectableDataArea locDataArea;
        SKS_EFT_Setup locSKS_EFT_Setup;
        PaymMode locPaymMode;
        SKS_EFT_FileDetail locSKS_EFT_FileDetails;
        SKS_EFTAP_File locSKS_EFT_File;

        //Cannot use group by in the following clause as non-aggregate data is needed
        while select crossCompany
                BankAccountID,
                PaymMode,
                DataAreaId,
                MALFILENAME,
                APFILEPATH,
                recid
            from locSKS_EFT_Bank
            join locVendPaymModeTable
            join locSKS_EFT_FileFormat
            order by locSKS_EFT_Bank.PaymMode,
                        locSKS_EFT_Bank.dataAreaId,
                        locSKS_EFT_FileFormat.FormatId
            where locSKS_EFT_Bank.MALOutCommID == _SKS_EB_CommProcess.CommID
                    && locSKS_EFT_Bank.PaymMode == locVendPaymModeTable.PaymMode
                    && locVendPaymModeTable.SKS_EFT_FormatId == locSKS_EFT_FileFormat.FormatId
                    && locSKS_EFT_FileFormat.MastAcctList == NoYes::Yes
        {
            if(locDataArea != locSKS_EFT_Bank.company() || locPaymMode != locSKS_EFT_Bank.PaymMode)
            {
                locDataArea = locSKS_EFT_Bank.company();
                locPaymMode = locSKS_EFT_Bank.PaymMode;
                locVendPaymModeTable = null;
                changeCompany(locSKS_EFT_Bank.company())
                {
                    select firstOnly * from locSKS_EFT_VendorPaym
                        where locSKS_EFT_VendorPaym.PaymMode == locSKS_EFT_Bank.PaymMode
                              && (locSKS_EFT_VendorPaym.MALStatus == SKS_EFT_MALStatus::New
                                  || locSKS_EFT_VendorPaym.MALStatus == SKS_EFT_MALStatus::Update)
                        notexists join RecId from locSKS_EFT_File where locSKS_EFT_File.FormatId == locSKS_EFT_FileFormat.FormatId
                            && locSKS_EFT_File.FileStatus != SKS_EFT_FileStatus::Completed
                        join RecId from locSKS_EFT_FileDetails where locSKS_EFT_FileDetails.FileRecId == locSKS_EFT_File.RecId
                            && locSKS_EFT_FileDetails.AccountNum == locSKS_EFT_VendorPaym.VendAccount;

                    if(locSKS_EFT_VendorPaym)
                    {
                        select firstFast RecId from locSKS_EFT_Setup;

                        if(!locSKS_EFT_Setup.APServerSideFiles)
                        {
                            error(strFmt("@SKS2633",locSKS_EFT_FileFormat.FormatId, locSKS_EFT_Setup.company()));
                            continue;
                        }

                        locSKS_EFT_FileNbr = SKS_EFT_MAL_CreateFile::createHeader(_SKS_EB_CommProcess,
                                                                                    locSKS_EFT_FileFormat.FormatId,
                                                                                    locSKS_EFT_VendorPaym.PaymMode,
                                                                                    locSKS_EFT_Bank.BankAccountID,
                                                                                    locSKS_EFT_Bank.APFilePath,
                                                                                    locSKS_EFT_Bank.MALFileName);

                        //Becaues this is inside a ChangeCompany block,
                        //the buffer must be nulled and reinstantiated for each company.
                        //It's a good plan also so old file parts aren't sitting around in buffers
                        locSKS_EFT_Processing = null;
                        locSKS_EFT_Processing = new SKS_EFT_Processing();
                        //create the detail records while still in the same company
                        locSKS_EFT_Processing.APARrocess_EFT(locSKS_EFT_FileNbr,
                                                                SKS_PP_NextActionDisplay::CreateSendFile,
                                                                false/*print Report*/,
                                                                SKS_EFT_Module::AP,
                                                                _SKS_EB_CommProcess,
                                                                _isInBatch,
                                                                false);
                    }

                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {

    }

]]></Source>
			</Method>
			<Method>
				<Name>createHeader</Name>
				<Source><![CDATA[
    public static SKS_EFT_FileNbr createHeader(SKS_EB_CommProcess _SKS_EB_CommProcess,
                                                SKS_EFT_FormatID _FormatID,
                                                PaymMode _MALPaymMode,
                                                CompanyBankAccountId _MALBankAccountID,
                                                str _SKS_EFT_FilePath,
                                                str _SKS_EFT_Filename)
    {
        SKS_EFTAP_File locSKS_EFTAP_File;
        ;
        locSKS_EFTAP_File.EFTFileType = SKS_EFT_Module::AP;

        locSKS_EFTAP_File.EffectiveDate = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());
        ttsbegin;
        locSKS_EFTAP_File.FileNbr = NumberSeq::newGetNum(SKS_PP_Setup::numRefAPEFTPlusNextJournalNumber()).num();
        locSKS_EFTAP_File.CommID = _SKS_EB_CommProcess.CommID;
        locSKS_Eftap_file.FormatId = _FormatID;
        locSKS_EFTAP_File.JournalOption = SKS_EFT_FileJournalOption::MasterAccountList;
        locSKS_EFTAP_File.MALPaymMode = _MALPaymMode;
        locSKS_EFTAP_File.MALBankAccountId = _MALBankAccountID;
        locSKS_EFTAP_File.FilePath = _SKS_EFT_FilePath;
        locSKS_EFTAP_File.FileName = SKS_EFT_Common::getFileName(locSKS_EFTAP_File.FileNbr, _SKS_EFT_Filename, SKS_EFT_Module::AP);
        locSKS_EFTAP_File.insert();
        ttscommit;

        return locSKS_EFTAP_File.FileNbr;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>