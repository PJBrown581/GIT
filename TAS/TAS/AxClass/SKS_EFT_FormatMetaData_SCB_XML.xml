<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_FormatMetaData_SCB_XML</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_FormatMetaData_SCB_XML Extends SKS_EFT_Format_MetaData
/// </summary>
public class SKS_EFT_FormatMetaData_SCB_XML Extends SKS_EFT_Format_MetaData
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        productVersion = '';
        formatGroupVersion = '20220117';
        dataContractVersion = '1.0';
        conFormatID = ['IN-SCB-XML','ZA-SCB-XML'];
        formatfiletype = 'EFT';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFormatFileType</Name>
				<Source><![CDATA[
    protected str getFormatFileType()
    {
        return formatfiletype;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHeaderMetaData</Name>
				<Source><![CDATA[
    protected container getHeaderMetaData()
    {
        container   headerList;

        //Metadata column names of data elements
//ProductVersion,FormatGroupVersion,UseWithCustomer,UseWithVenodrs,UseWithBanktoBank,UsewithCustReimbursements,
//BeDesc01,BeDesc02,BeMask01,BeMask02,BlockFill,CompanyIdMask,CompanyIdTitle,CompanyNameTitle,CompanyNameMask,Crlf,Description,EffectiveDateOffset,EntryClassTitle,EntryClassMask,
//FormatId,FormatType,IMMDestMask,IMMDestTitle,IMMDestNameTitle,IMMDestNameMask,IMMOriginTitle,IMMOriginMask,IMMOriginNameTitle,IMMOriginNameMask,IncludeCpnyCredit,
//IncludeCpnyDebit,LastEffectiveDate,NextDailyReset,NextDailyResetDate,NextFileId,NextSequenceNumber,PreNote,RecordLength,Selected,TrimRecord,TwoFileNameAddition,
//WBank01Description,WBank01Mask,WBank01Required,WBank02Required,WBank02Mask,WBank02Description,WBank03Required,WBank03Mask,WBank03Description,WBank04Required,WBank04Mask,
//WBank04Description,PreNoteDays,EDI,PayDateIsEffDate,ARDateOffset,UseAddenda,MastAcctList,FormatGroup,MultiEffectiveDates,SupportsMultiCompany,ExternalFormat,FundTransferType

        headerList = ConIns(headerList,conLen(headerList)+1,[productVersion,formatGroupVersion,0,1,0,0,'','','','',0,'','','','',0,'IN - Standard Chartered Bank - ISO20022',0,'','','IN-SCB-XML',1,'','','','','','','','',0,0,'1900-01-01 00:00:00.000',0,'1900-01-01 00:00:00.000',1,1,0,0,0,0,'','','',0,0,'','',0,'','',0,'','',0,0,0,0,0,0,'SCB-XML',0,0,0]);
        headerList = ConIns(headerList,conLen(headerList)+1,[productVersion,formatGroupVersion,0,1,0,0,'','','','',0,'','','','',0,'ZA - Standard Chartered Bank - ISO20022',0,'','','ZA-SCB-XML',1,'','','','','','','','',0,0,'1900-01-01 00:00:00.000',0,'1900-01-01 00:00:00.000',1,1,0,0,0,0,'','','',0,0,'','',0,'','',0,'','',0,0,0,0,0,0,'SCB-XML',0,0,0]);

        return headerList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymSpecsMetaData</Name>
				<Source><![CDATA[
    protected container getPaymSpecsMetaData(str _formatID)
    {
        container   paymSpecList;

        //Metadata column names of data elements
//BARoutingReqd,VBAAccountReqd,VBASwiftReqd,VBAIBANReqd,ARPaymSpecName,BEBeneBankAcctReqd,BE01Reqd,BE02Reqd,BE01Use,BE02Use,PaymSpecFileDescr,RecordSummary,TransactionCode,
        //EmailNote,PaymSpec,PaymSpecName,FilterSeparateFile,FormatId,Selected,CpnyIDNameReq,EmailOff,VendorUse,WireTabs,SamePaymentDate,SelectByPaymentDate,PreNote,TxnNacha,UseCheckNumber,
        //UseWithCustomers,UseWithVendors,EDI,UseWithBanktoBank,FundTransferType,UseWithCustomerReimbursement,InvoiceDetail,RemitAvailability,RemitType,APNameType,APAddressType
        //DDNameType,DDAddressType,CRNameType,CRAddressType

        switch (_formatID)
        {
            case ('IN-SCB-XML'):
                paymSpecList = this.getPaymSpecsMetaData_IN_SCB_XML();
                break;

            case ('ZA-SCB-XML'):
                paymSpecList = this.getPaymSpecsMetaData_ZA_SCB_XML();
                break;

        }

        return paymSpecList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymSpecsMetaData_IN_SCB_XML</Name>
				<Source><![CDATA[
    private container getPaymSpecsMetaData_IN_SCB_XML()
    {
        container   paymSpecList;

        paymSpecList = ConIns(paymSpecList,conLen(paymSpecList)+1,[0,0,0,0,'',0,0,0,0,0,'Real Time Gross Settlement',1,'RTGS','','RTGS','TRADE PAY',0,'IN-SCB-XML',0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,1,1,0,0,0,0]);
        paymSpecList = ConIns(paymSpecList,conLen(paymSpecList)+1,[0,0,0,0,'',0,0,0,0,0,'ACH - Direct Credit',1,'ACH-DC','','ACH-DC','TRADE PAY',0,'IN-SCB-XML',0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,1,1,0,0,0,0]);
        paymSpecList = ConIns(paymSpecList,conLen(paymSpecList)+1,[0,0,0,0,'',0,0,0,0,0,'Book Transfer',1,'BKT','','BKT','TRADE PAY',0,'IN-SCB-XML',0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,1,1,0,0,0,0]);

        return paymSpecList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymSpecsMetaData_ZA_SCB_XML</Name>
				<Source><![CDATA[
    private container getPaymSpecsMetaData_ZA_SCB_XML()
    {
        container   paymSpecList;

        paymSpecList = ConIns(paymSpecList,conLen(paymSpecList)+1,[0,0,0,0,'',0,0,0,0,0,'Real Time Gross Settlement',1,'RTGS','','RTGS','TRADE PAY',0,'ZA-SCB-XML',0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,1,1,0,0,0,0]);
        paymSpecList = ConIns(paymSpecList,conLen(paymSpecList)+1,[0,0,0,0,'',0,0,0,0,0,'ACH - Direct Credit',1,'ACH-DC','','ACH-DC','TRADE PAY',0,'ZA-SCB-XML',0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,1,1,0,0,0,0]);
        paymSpecList = ConIns(paymSpecList,conLen(paymSpecList)+1,[0,0,0,0,'',0,0,0,0,0,'Book Transfer',1,'BKT','','BKT','TRADE PAY',0,'ZA-SCB-XML',0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,1,1,0,0,0,0]);

        return paymSpecList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getNotesMetaData</Name>
				<Source><![CDATA[
    protected container getNotesMetaData(str _formatID)
    {
        container   notesList;

        //Metadata column names of data elements
//FormatId,PaymSpec,Note

        switch (_formatID)
        {
            case ('IN-SCB-XML'):
                notesList = this.getNotesMetaData_IN_SCB_XML();
                break;

            case ('ZA-SCB-XML'):
                notesList = this.getNotesMetaData_ZA_SCB_XML();
                break;

        }

        return notesList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getNotesMetaData_IN_SCB_XML</Name>
				<Source><![CDATA[
    private container getNotesMetaData_IN_SCB_XML()
    {
        container   notesList;

        notesList = ConIns(notesList,conLen(notesList)+1,['IN-SCB-XML','RTGS','-Group Header > Initiating Party > Name is stored in Organization administration > Setup > Organization > Legal entities > Name field.::-This format uses fixed lookups. Please review the fields on these forms.:--Code lookup fields tab on EFT+ file formats > Payment specifications.::-Debtor Name and Country/region are stored in Bank account > AP EFT+ > Wire/IAT ordering party.::-Cash and bank management module > Bank Account:--Either IBAN or Bank account number is required.If both are populated IBAN will take precedence.:--SWIFT code is required and it must be 11 characters.::-Vendor Bank Account fields:--Either the Bank account number or the IBAN is required.If both are set then IBAN will take precedence.:--The IFSC code must be entered into the SWIFT field.::-Vendor eBanking details > Payment specifications fields > Wire transfer/IAT-1 tab:--Creditor Name is stored in the Beneficiary Name region field.:--Creditor > Postal Address information is stored in the Beneficiary section.:--Street is stored in the Address 1 field.:--Building number is stored in the Address 2 field.:--City, Zip/postal and Country Code are stored in their specified fields.:--The charges bearer is set on the Charges indicator field in the Other notes section::-Vendor eBanking details > Payment specifications fields > Wire transfer/IAT-2 tab:--Intermediary Agent BIC will be included if the SWIFT code or Bank Id on the Intermediary bank section is populated.::-Purpose code will be populated only if Central Bank Purpose Code is set either in the payment journal or in the code lookups. If both are populated then Payment journal level Central Bank Purpose Code will take precedence.']);
        notesList = ConIns(notesList,conLen(notesList)+1,['IN-SCB-XML','ACH-DC','-Group Header > Initiating Party > Name is stored in Organization administration > Setup > Organization > Legal entities > Name field.::-This format uses fixed lookups. Please review the fields on these forms.:--Code lookup fields tab on EFT+ file formats > Payment specifications.::-Debtor Name and Country/region are stored in Bank account > AP EFT+ > Wire/IAT ordering party.::-Cash and bank management module > Bank Account:--Either IBAN or Bank account number is required.If both are populated IBAN will take precedence.:--SWIFT code is required and it must be 11 characters.::-Vendor Bank Account fields:--Either the Bank account number or the IBAN is required.If both are set then IBAN will take precedence.:--The IFSC code must be entered into the SWIFT field.::-Vendor eBanking details > Payment specifications fields > Wire transfer/IAT-1 tab:--Creditor Name is stored in the Beneficiary Name region field.:--Creditor > Postal Address information is stored in the Beneficiary section.:--Street is stored in the Address 1 field.:--Building number is stored in the Address 2 field.:--City, Zip/postal and Country Code are stored in their specified fields.:--The charges bearer is set on the Charges indicator field in the Other notes section::-Vendor eBanking details > Payment specifications fields > Wire transfer/IAT-2 tab:--Intermediary Agent BIC will be included if the SWIFT code or Bank Id on the Intermediary bank section is populated.']);
        notesList = ConIns(notesList,conLen(notesList)+1,['IN-SCB-XML','BKT','-Group Header > Initiating Party > Name is stored in Organization administration > Setup > Organization > Legal entities > Name field.::-Debtor Name and Country/region are stored in Bank account > AP EFT+ > Wire/IAT ordering party.::-Cash and bank management module > Bank Account:--Either IBAN or Bank account number is required.If both are populated IBAN will take precedence.:--SWIFT code is required and it must be 11 characters.::--Vendor Bank Account fields:--Either the Bank account number or the IBAN is required.If both are set, IBAN will take precedence.:--Payee bank code must be entered into the SWIFT field.::-Vendor eBanking details > Payment specifications fields > Wire transfer/IAT-1 tab:--Creditor Name is stored in the Beneficiary Name region field.:--Creditor > Postal Address information is stored in the Beneficiary section.:--Street is stored in the Address 1 field.:--Building number is stored in the Address 2 field.:--City, Zip/postal and Country Code are stored in their specified fields.:--The charges bearer is set on the Charges indicator field in the Other notes section::-Vendor eBanking details > Payment specifications fields > Wire transfer/IAT-2 tab:--Intermediary Agent BIC will be included if the SWIFT code or Bank Id on the Intermediary bank section is populated.']);

        return notesList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getNotesMetaData_ZA_SCB_XML</Name>
				<Source><![CDATA[
    private container getNotesMetaData_ZA_SCB_XML()
    {
        container   notesList;

        notesList = ConIns(notesList,conLen(notesList)+1,['ZA-SCB-XML','RTGS','-Group Header > Initiating Party > Name is stored in Organization administration > Setup > Organization > Legal entities > Name field.::-This format uses fixed lookups. Please review the fields on these forms.:--Code lookup fields tab on EFT+ file formats > Payment specifications.::-Debtor Name and Country/region are stored in Bank account > AP EFT+ > Wire/IAT ordering party.::-Cash and bank management module > Bank Account:--Either IBAN or Bank account number is required.If both are populated IBAN will take precedence.:--SWIFT code is required and it must be 11 characters.::-Vendor Bank Account fields:--Either the Bank account number or the IBAN is required.If both are set then IBAN will take precedence.:--The Payee Bank Code must be entered into the SWIFT field and it is required::-Vendor eBanking details > Payment specifications fields > Wire transfer/IAT-1 tab:--Creditor Name is stored in the Beneficiary Name region field.:--Creditor > Postal Address information is stored in the Beneficiary section.:--Street is stored in the Address 1 field.:--Building number is stored in the Address 2 field.:--City, Zip/postal and Country Code are stored in their specified fields.:--The charges bearer is set on the Charges indicator field in the Other notes section::-Vendor eBanking details > Payment specifications fields > Wire transfer/IAT-2 tab:--Intermediary Agent BIC will be included if the SWIFT code or Bank Id on the Intermediary bank section is populated.']);
        notesList = ConIns(notesList,conLen(notesList)+1,['ZA-SCB-XML','ACH-DC','-Group Header > Initiating Party > Name is stored in Organization administration > Setup > Organization > Legal entities > Name field.::-This format uses fixed lookups. Please review the fields on these forms.:-Code lookup fields tab on EFT+ file formats > Payment specifications.::-Debtor Name and Country/region are stored in Bank account > AP EFT+ > Wire/IAT ordering party.::Cash and bank management module > Bank Account:-Either IBAN or Bank account number is required.If both are populated IBAN will take precedence.:-SWIFT code is required and it must be 11 characters.::Vendor Bank Account fields:-Either the Bank account number or the IBAN is required.If both are set, IBAN will take precedence.:-The Payee Bank Code must be set in the Code lookups and it is required.::Vendor eBanking details > Payment specifications fields > Wire transfer/IAT-1 tab:-Creditor Name is stored in the Beneficiary Name region field.:-Creditor agent Country code is stored in the Beneficiary bank Country/Region field.:-Creditor > Postal Address information is stored in the Beneficiary section.:--Street is stored in the Address 1 field.:--Building number is stored in the Address 2 field.:--City, Zip/postal and Country Code are stored in their specified fields.::Vendor eBanking details > Payment specifications fields > Wire transfer/IAT-2 tab:-Intermediary Agent BIC will be included if the SWIFT code on the Intermediary bank section is populated.']);
        notesList = ConIns(notesList,conLen(notesList)+1,['ZA-SCB-XML','BKT','-Group Header > Initiating Party > Name is stored in Organization administration > Setup > Organization > Legal entities > Name field.::-Debtor Name and Country/region are stored in Bank account > AP EFT+ > Wire/IAT ordering party.::-Cash and bank management module > Bank Account:--Either IBAN or Bank account number is required.If both are populated IBAN will take precedence.:--SWIFT code is required and it must be 11 characters.::--Vendor Bank Account fields:--Either the Bank account number or the IBAN is required.If both are set, IBAN will take precedence.:--Payee bank code must be entered into the SWIFTNo field.::-Vendor eBanking details > Vendor account:--Beneficiary Id is stored on Vendor account field.::-Vendor eBanking details > Payment specifications fields > Wire transfer/IAT-1 tab:--Creditor Name is stored in the Beneficiary Name region field.:--Creditor > Postal Address information is stored in the Beneficiary section.:--Street is stored in the Address 1 field.:--Building number is stored in the Address 2 field.:--City, Zip/postal and Country Code are stored in their specified fields.:--The charges bearer is set on the Charges indicator field in the Other notes section::-Vendor eBanking details > Payment specifications fields > Wire transfer/IAT-2 tab:--Intermediary Agent BIC will be included if the SWIFT code or Bank Id on the Intermediary bank section is populated.']);

        return notesList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getValidationsMetaData</Name>
				<Source><![CDATA[
    protected container getValidationsMetaData(str _formatID)
    {
        container   validationsList;

        //Metadata column names of data elements
//FormatId,PaymSpec,Id,SourceFieldDesc,SourceFieldLoc,TargetFieldLoc,Notes,SourceContext,SourceField,ISOCountrySpec,CountryContext,Required,LengthValidation,MinLength,MaxLength,UserUpdated,Module

        switch (_formatID)
        {
        }

        return validationsList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getCodeLookupMetaData</Name>
				<Source><![CDATA[
    protected container getCodeLookupMetaData()
    {
        container   codeLookupList;

        //Metadata column names of data elements
//FormatGroup,CodeID,Description

        codeLookupList = ConIns(codeLookupList,conLen(codeLookupList)+1,['SCB-XML','Purp','Purpose Code']);

        return codeLookupList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getCodeLookupValuesMetaData</Name>
				<Source><![CDATA[
    protected container getCodeLookupValuesMetaData()
    {
        container   codeLookupValuesList;

        //Metadata column names of data elements
//FormatGroup,CodeID,Display Value,CodeValue

        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['SCB-XML','Purp','Bonus Payment','BONU']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['SCB-XML','Purp','Cash Management Transfer','CASH']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['SCB-XML','Purp','Card Bulk Clearing','CBLK']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['SCB-XML','Purp','Credit Card Payment','CCRD']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['SCB-XML','Purp','Trade Settlement Payment','CORT']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['SCB-XML','Purp','Debit Card Payment','DCRD']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['SCB-XML','Purp','Dividend','DIVI']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['SCB-XML','Purp','Epayment','EPAY']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['SCB-XML','Purp','Fee Collection','FCOL']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['SCB-XML','Purp','Government Payment','GOVT']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['SCB-XML','Purp','Hedging','HEDG']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['SCB-XML','Purp','Irrevocable Credit Card Payment','ICCP']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['SCB-XML','Purp','Irrevocable Debit Card Payment','IDCP']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['SCB-XML','Purp','Intra Company Payment','INTC']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['SCB-XML','Purp','Interest','INTE']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['SCB-XML','Purp','Loan','LOAN']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['SCB-XML','Purp','Other Payment','OTHR']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['SCB-XML','Purp','Pension Payment','PENS']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['SCB-XML','Purp','Salary Payment','SALA']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['SCB-XML','Purp','Securities','SECU']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['SCB-XML','Purp','Social Security Benefit','SSBE']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['SCB-XML','Purp','Supplier Payment','SUPP']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['SCB-XML','Purp','Tax Payment','TAXS']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['SCB-XML','Purp','Trade','TRAD']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['SCB-XML','Purp','Treasury Payment','TREA']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['SCB-XML','Purp','Value Added Tax Payment','VATX']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['SCB-XML','Purp','WithHolding','WHLD']);

        return codeLookupValuesList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getFormatLookupsMetaData</Name>
				<Source><![CDATA[
    protected container getFormatLookupsMetaData(str _formatID)
    {
        container   formatLookupsList;

        //Metadata column names of data elements

        switch (_formatID)
        {
        }

        return formatLookupsList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymSpecFieldsMetaData</Name>
				<Source><![CDATA[
    protected container getPaymSpecFieldsMetaData(str _formatID)
    {
        container   paymSpecFieldsList;

        //Metadata column names of data elements
//FormatGroup,FormatID,PaymentSpec,FormatFieldID,Description,FieldType,CodeID,DefaultValue,Required,FixedValue,FixedValueMask,TechNotes

        switch (_formatID)
        {
            case ('IN-SCB-XML'):
                paymSpecFieldsList = this.getPaymSpecFieldsMetaData_IN_SCB_XML();
                break;

            case ('ZA-SCB-XML'):
                paymSpecFieldsList = this.getPaymSpecFieldsMetaData_ZA_SCB_XML();
                break;

        }

        return paymSpecFieldsList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymSpecFieldsMetaData_IN_SCB_XML</Name>
				<Source><![CDATA[
    private container getPaymSpecFieldsMetaData_IN_SCB_XML()
    {
        container   paymSpecFieldsList;

        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['SCB-XML','IN-SCB-XML','RTGS','Purp','Purpose',0,'Purp','Supplier Payment',0,'','','PmtInf > CdtTrfTxInf > Purp > Prtry']);
        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['SCB-XML','IN-SCB-XML','RTGS','ClrSysMmbId','Local Clearing Bank Code',1,'','',0,'','XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX','PmtInf > CdtTrfTxInf > CdtrAgt > ClrSysMmbId > MmbId']);
        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['SCB-XML','IN-SCB-XML','RTGS','BrnchId','Local Clearing Branch Code',1,'','',0,'','XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX','PmtInf > CdtTrfTxInf > CdtrAgt > Local Clearing Branch Code > Id']);
        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['SCB-XML','IN-SCB-XML','ACH-DC','ClrSysMmbId','Local Clearing Bank Code',1,'','',0,'','XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX','PmtInf > CdtTrfTxInf > CdtrAgt > ClrSysMmbId > MmbId']);
        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['SCB-XML','IN-SCB-XML','ACH-DC','BrnchId','Local Clearing Branch Code',1,'','',0,'','XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX','PmtInf > CdtTrfTxInf > CdtrAgt > Local Clearing Branch Code > Id']);

        return paymSpecFieldsList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymSpecFieldsMetaData_ZA_SCB_XML</Name>
				<Source><![CDATA[
    private container getPaymSpecFieldsMetaData_ZA_SCB_XML()
    {
        container   paymSpecFieldsList;

        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['SCB-XML','ZA-SCB-XML','RTGS','BrnchId','Local Clearing Branch Code',1,'','',0,'','XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX','PmtInf > CdtTrfTxInf > CdtrAgt > Local Clearing Branch Code > Id']);
        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['SCB-XML','ZA-SCB-XML','ACH-DC','BrnchId','Local Clearing Branch Code',1,'','',0,'','XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX','PmtInf > CdtTrfTxInf > CdtrAgt > Local Clearing Branch Code > Id']);
        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['SCB-XML','ZA-SCB-XML','ACH-DC','ClrSysMmbId','Payee Bank Code',1,'','',0,'','XXXXXX','PmtInf > CdtTrfTxInf > CdtrAgt > ClrSysMmbId > MmbId']);
        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['SCB-XML','ZA-SCB-XML','BKT','BrnchId','Local Clearing Branch Code',1,'','',0,'','XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX','PmtInf > CdtTrfTxInf > CdtrAgt > Local Clearing Branch Code > Id']);

        return paymSpecFieldsList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getControlFormatMetaData</Name>
				<Source><![CDATA[
    protected container getControlFormatMetaData(str _formatID)
    {
        container   ControlFormatList;

        //Metadata column names of data elements
//FileFormatID,ControlFileFormatID,ControlFileDescription

        switch (_formatID)
        {
        }

        return ControlFormatList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getDeleteMetaData</Name>
				<Source><![CDATA[
    protected container getDeleteMetaData()
    {
        container   deleteList;

        //FormatGroup, FormatId, DetailType, KeyID1, KeyId2, KeyId3

        return deleteList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankCodeLookupMetaData</Name>
				<Source><![CDATA[
    protected container getBankCodeLookupMetaData()
    {
        container   codeLookupList;

        return codeLookupList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankCodeLookupValuesMetaData</Name>
				<Source><![CDATA[
    protected container getBankCodeLookupValuesMetaData()
    {
        container   codeLookupValuesList;

        return codeLookupValuesList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFileFormatFieldsMetaData</Name>
				<Source><![CDATA[
    protected container getFileFormatFieldsMetaData(str _formatID)
    {
        container   paymSpecFieldsList;

        return paymSpecFieldsList;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>