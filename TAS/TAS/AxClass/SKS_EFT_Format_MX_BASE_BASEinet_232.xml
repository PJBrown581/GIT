<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_MX_BASE_BASEinet_232</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_MX_BASE_BASEinet_232  extends SKS_EFT_Format
/// </summary>
class SKS_EFT_Format_MX_BASE_BASEinet_232  extends SKS_EFT_Format
{
    #define.FormatVersion('20221019')
    #define.SPEI('SPEI')
    #define.INTL('INTL')
    #define.TPA('TPA')
    #define.SPID('SPID')

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    protected void formatStructure()
    {
        while(mSKS_EFT_FileDetail)
        {
            // Get SKS_EFT_FileFormatPaymSpec
            this.getSKS_EFT_FileFormatPaymSpec();            

            //Payment Record
            this.rec_Payment();
    
            next mSKS_EFT_FileDetail;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJournaltxt</Name>
				<Source><![CDATA[
    private str getJournaltxt()
    {
        LedgerJournalTrans ledgerJournalTrans;

        select firstonly crossCompany Txt from ledgerJournalTrans where
        ledgerJournalTrans.RecId == mSKS_EFT_FileDetail.PaymentLineRecId;

        return ledgerJournalTrans.Txt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVatAmount</Name>
				<Source><![CDATA[
    private Amount getVatAmount()
    {
        VendInvoiceJour vendInvoiceJour;
        SKS_EFT_FileDetail sks_EFT_FileDetail;
        Amount amt;

        while select InvoiceNumber, AccountNum, InvoiceDate from SKS_EFT_FileDetail where sks_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId
        {           
            select firstOnly SumTax from  vendInvoiceJour
                where vendInvoiceJour.InvoiceAccount    ==  sks_EFT_FileDetail.AccountNum &&
                vendInvoiceJour.InvoiceDate             ==  sks_EFT_FileDetail.InvoiceDate &&
                vendInvoiceJour.InvoiceId               ==  sks_EFT_FileDetail.InvoiceNumber;

            amt += vendInvoiceJour.SumTax;
        }
        return amt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Payment</Name>
				<Source><![CDATA[
    //  Number    Description                               Field length    Position
    //---------------------------------------------------------------------------------------
    //    1	    Operation type				                    2			1 – 2
    //    2	    Recipient´s name   			                    30			3 - 32
    //    3	    Destination account			                    48			33- 80
    //    4	    Amount						                    14			81 – 94
    //    5	    Numeric Reference			                    30			95 – 124
    //    6	    Reference / Concept			                    30			125 – 154
    //    7	    Reference 					                    30			155 – 184
    //    8	    Currency 					                    3			185 – 187
    //    9	    VAT 						                    14			188 – 201
    //    10	Recipient´s tax registration Id                 13			202 – 214
    //    11	Account Charge 				                    18			215 – 232
    //----------------------------------------------------------------------------------------
    public boolean rec_Payment()
    {
        str value;
        System.Text.StringBuilder sb = new System.Text.StringBuilder();


        //    1	    Operation type				                    2			1 – 2
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #SPEI:
                value = '01';
                break;
            case #INTL:
                value = '02';
                break;
            case #TPA:
                value = '04';
                break;
            case #SPID:
                value = '05';
                break;
        }
        sb.Append(value);

        //    2	    Recipient´s name   			                    30			3 - 32
        sb.Append(SKS_PP_StringFormats::strFill(30, this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneName), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //    3	    Destination account			                    48			33- 80
        sb.Append(SKS_PP_StringFormats::strFill(48, mSKS_EFT_FileDetail.DepBankAcct, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //    4	    Amount						                    14			81 – 94
        sb.Append(SKS_PP_StringFormats::strMoney(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1, 14));

        //    5	    Numeric Reference			                    30			95 – 124
        if(value == '01')
        {
            sb.Append(SKS_PP_StringFormats::strFill(30, strUpr(subStr(mSKS_EFT_FileDetail.PaymentReference, 1, 7)), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
        else
        {
            sb.Append(SKS_PP_StringFormats::strFill(30, strUpr(mSKS_EFT_FileDetail.PaymentReference), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }       

        //    6	    Reference / Concept			                    30			125 – 154
        sb.Append(SKS_PP_StringFormats::strFill(30, strUpr(this.getJournaltxt()), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        
        //    7	    Reference 					                    30			155 – 184
        if(value == '02')
        {
            sb.Append(SKS_PP_StringFormats::strFill(30, strUpr(mSKS_EFT_FileDetail.PaymentReference), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
        else
        {
            sb.Append(SKS_PP_StringFormats::strFill(30, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }

        //    8	    Currency 					                    3			185 – 187
        sb.Append(SKS_PP_StringFormats::strFill(3, mSKS_EFT_FileDetail.PaymentCurrencyCode, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //    9	    VAT 						                    14			188 – 201
        //    10	Recipient´s tax registration Id                 13			202 – 214
        if(value == '01' || value == '05')
        {
            sb.Append(SKS_PP_StringFormats::strMoney(this.getVatAmount() * -1, 14));
            sb.Append(SKS_PP_StringFormats::strFill(13, mSKS_EFT_FileDetail.VATNum, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
        else
        {
            sb.Append(SKS_PP_StringFormats::strFill(14, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
            sb.Append(SKS_PP_StringFormats::strFill(13, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
        
        //    11	Account Charge 				                    18			215 – 232
        sb.Append(SKS_PP_StringFormats::strFill(18, mSKS_EFT_FileDetail.BankBankAcct, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
    
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectPaymentRecords</Name>
				<Source><![CDATA[
    protected void selectPaymentRecords()
    {
        //------------------------------------------------------------------------------------------------------
        // Standard payment selction
        // Override if different selection is need for a format
        //------------------------------------------------------------------------------------------------------
    
        //Order by clause must match the clause in the SKS_EFT_Processing.SumByPayment
        select * from mSKS_EFT_FileDetail
            join mSKS_EFT_FileDetail_VendAddress
              order by mSKS_EFT_FileDetail.PaymentCompany,
                   mSKS_EFT_FileDetail.RecordSection,
                   mSKS_EFT_FileDetail.PaymMode,
                   mSKS_EFT_FileDetail.BankAccountId,
                   mSKS_EFT_FileDetail.PaymentCurrencyCode,
                   mSKS_EFT_FileDetail.PaymSpec,
                   mSKS_EFT_FileDetail.EffectiveDate,
                   mSKS_EFT_FileDetail.DepCountryRegionId,
                   mSKS_EFT_FileDetail.RecordType,
                   mSKS_EFT_FileDetail.AccountNum,
                   mSKS_EFT_FileDetail.PaymentReference,
                   mSKS_EFT_FileDetail.RecId
          where mSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                mSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                mSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_VendAddress.RefRecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>