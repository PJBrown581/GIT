<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_US_BOA_XML_AR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_US_BOA_XML_AR extends SKS_EFT_Format_ISO_20022_00800102
/// </summary>
public class SKS_EFT_Format_US_BOA_XML_AR extends SKS_EFT_Format_ISO_20022_00800102
{
    #define.FormatVersion('20220118')
    #define.CCD('CCD')
    #define.PPD('PPD')
    #define.CTX('CTX')
    #define.IAT('IAT')
    #define.URGP('URGP')
    #define.URNS('URNS')

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceNbrs</Name>
				<Source><![CDATA[
    protected str getInvoiceNbrs()
    {
        SKS_EFT_FileDetail invSKS_EFT_FileDetail;
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        str invString;
    
        select InvoiceNumber from invSKS_EFT_FileDetail
            where invSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId
               && invSKS_EFT_FileDetail.InvoiceNumber != '';
    
        while(invSKS_EFT_FileDetail)
        {
            sb.Append(invSKS_EFT_FileDetail.InvoiceNumber);
    
            next invSKS_EFT_FileDetail;
    
            if(invSKS_EFT_FileDetail)
            {
                sb.Append(', ');
            }
        }
    
        invString = this.CharacterReplacement(sb.ToString());
        return invString;
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_DrctDbtTxInf_Dbtr</Name>
				<Source><![CDATA[
    protected void node_DrctDbtTxInf_Dbtr(XmlElement _node_DrctDbtTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.72: Dbtr
        //              Nm
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeDbtr;
    
        //          2.72: Dbtr
        nodeDbtr = _node_DrctDbtTxInf.appendChild(xmlDoc.createElement('Dbtr'));
    
        //              Nm
        this.node_DrctDbtTxInf_Dbtr_Nm(nodeDbtr);
    
        //           PstlAdr
        this.node_DrctDbtTxInf_Dbtr_PstlAdr(nodeDbtr);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_DrctDbtTxInf_Dbtr_PstlAdr</Name>
				<Source><![CDATA[
    protected void node_DrctDbtTxInf_Dbtr_PstlAdr(XmlElement _nodeDbtr)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.72: Dbtr
        //              Nm
        //------------------------------------------------------------------------------------------------------
        LogisticsPostalAddress  postalAddress;
        SKS_EB_Address          addressBldgNb, addressStrtNm;
        container               address;
    
        if(mSKS_EFT_FileDetail.AccountNum && mSKS_EFT_FileDetail.AccountType == LedgerJournalACType::Cust)
        {
            postalAddress = this.findPostalAddressLineByPartyLocationRole(CustTable::findByCompany(mSKS_EFT_FileDetail.AccountCompany, mSKS_EFT_FileDetail.AccountNum).Party, 'Direct Debit');
    
            if(postalAddress)
            {
                if(strScan(postalAddress.Street, ';', 1, strLen(postalAddress.Street)))
                {
                    address = this.addressSplit(postalAddress.Street);
                    addressBldgNb = conpeek(address,1);
                    addressStrtNm = conpeek(address,2);
                }
                else
                {
                    addressStrtNm = postalAddress.Street;
                }
                this.node_PstlAdr(_nodeDbtr, postalAddress.CountryRegionId, addressStrtNm, postalAddress.ZipCode, postalAddress.City, 35, addressBldgNb, postalAddress.State, true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_DrctDbtTxInf_DbtrAcct</Name>
				<Source><![CDATA[
    protected void node_DrctDbtTxInf_DbtrAcct(XmlElement _nodeDrctDbtTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.73: DbtrAcct
        //              Id
        //                  Othr
        //                      Id
        //              Tp
        //              Nm
        //------------------------------------------------------------------------------------------------------
    
        XmlElement nodeDbtrAcct;
        XmlElement nodeDbtrAcctId;
        XmlElement nodeOthr;
    
        if(mSKS_EFT_FileDetail.DepBankAcct)
        {
            //          2.73: DbtrAcct
            nodeDbtrAcct = _nodeDrctDbtTxInf.appendChild(xmlDoc.createElement('DbtrAcct'));
    
            //              Id
            nodeDbtrAcctId = nodeDbtrAcct.appendChild(xmlDoc.createElement('Id'));
    
            //                  Othr
            nodeOthr = nodeDbtrAcctId.appendChild(xmlDoc.createElement('Othr'));
    
            //                      Id
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeOthr, 'Id', mSKS_EFT_FileDetail.DepBankAcct, 34);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_DrctDbtTxInf_DbtrAgt</Name>
				<Source><![CDATA[
    protected void node_DrctDbtTxInf_DbtrAgt(XmlElement _nodeDrctDbtTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.70: DbtrAgt
        //              FinInstnId
        //                  BIC
        //                  ClrSysMmbId
        //------------------------------------------------------------------------------------------------------
    
        XmlElement nodeDbtrAgt;
        XmlElement nodeFinInstnId;
        XmlElement nodeClrSysMmbId;
        CustBankAccount lCustBankAccount;
    
        if(mSKS_EFT_FileDetail.DepBankTransit)
        {
            //          2.77: DbtrAgt
            nodeDbtrAgt = _nodeDrctDbtTxInf.appendChild(xmlDoc.createElement('DbtrAgt'));
    
            //              FinInstnId
            nodeFinInstnId = nodeDbtrAgt.appendChild(xmlDoc.createElement('FinInstnId'));
    
            //                  ClrSysMmbId
            nodeClrSysMmbId = nodeFinInstnId.appendChild(xmlDoc.createElement('ClrSysMmbId'));
    
             //                  MmbId
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeClrSysMmbId, 'MmbId', mSKS_EFT_FileDetail.DepBankTransit, 35);
    
            lCustBankAccount = CustBankAccount::findByCompany(mSKS_EFT_FileDetail.AccountCompany, mSKS_EFT_FileDetail.AccountNum,  mSKS_EFT_FileDetail.DepBankAccountId);
    
            //              PstlAdr
            //                  Ctry
            this.node_PstlAdr(nodeFinInstnId, LogisticsPostalAddress::findByLocation(lCustBankAccount.Location).CountryRegionId, '', '', '');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_DrctDbtTxInf_RmtInf</Name>
				<Source><![CDATA[
    protected void node_DrctDbtTxInf_RmtInf(XmlElement _nodeDrctDbtTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.98: RmtInf
        //              2.99: Ustrd
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeRmtInf;
        str invNumbers;
    
        invNumbers = this.getInvoiceNbrs();
        if(invNumbers)
        {
            //          2.98: RmtInf
            nodeRmtInf = _nodeDrctDbtTxInf.appendChild(xmlDoc.createElement('RmtInf'));
    
            //              2.99: Ustrd
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRmtInf, 'Ustrd', invNumbers, 140);
        }
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_GrpHdr_InitgPty_Id</Name>
				<Source><![CDATA[
    protected void node_GrpHdr_InitgPty_Id(XmlElement _nodeInitgPty)
    {
        //------------------------------------------------------------------------------------------------------
        //      1.8: InitgPty
        //          9.1.12: Id
        //              9.1.13: OrgId
        //                    BkPtyId
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeId;
        XmlElement nodeOrgId;
        XmlElement nodeOther;
        str initgPtyId;

        initgPtyId = SKS_EFT_Format::getCodelookupvalue('InitgPtyId', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank);
    
        if(initgPtyId != '')
        {
            //          Id
            nodeId = _nodeInitgPty.appendChild(xmlDoc.createElement('Id'));
    
            //              OrgId
            nodeOrgId = nodeId.appendChild(xmlDoc.createElement('OrgId'));
    
             //                  Othr
            nodeOther = nodeOrgId.appendChild(xmlDoc.createElement('Othr'));
    
            //                        Id
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeOther, 'Id', this.CharacterReplacement(initgPtyId), 35);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_Cdtr</Name>
				<Source><![CDATA[
    protected void node_PmtInf_Cdtr(XmlElement _nodePmtInf)
    {
         //------------------------------------------------------------------------------------------------------
        //      2.15: Cdtr
        //          Nm
        //          PstlAdr
        //          Id
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeCdtr;
    
        //      2.15: Cdtr
        nodeCdtr = nodePmtInf.appendChild(xmlDoc.createElement('Cdtr'));
    
        //          Nm
        this.node_PmtInf_Cdtr_Nm(nodeCdtr);
    
        //           PstlAdr
        this.node_PmtInf_Cdtr_PstlAdr(nodeCdtr);
    
        //          Id
        this.node_PmtInf_Cdtr_Id(nodeCdtr);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_Cdtr_Id</Name>
				<Source><![CDATA[
    protected void node_PmtInf_Cdtr_Id(XmlElement _nodeCdtr)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.19: Cdtr
        //          Id
        //              OrgId
        //                  Othr
        //                      Id
        //------------------------------------------------------------------------------------------------------
    
        XmlElement nodeId;
        XmlElement nodeOrgId;
        XmlElement nodeOthr;
        XmlElement nodeSchmeNm;
    
        if(mSKS_EFT_FileDetail.FileACHCompanyId != '')
        {
            //          Id
            nodeId = _nodeCdtr.appendChild(xmlDoc.createElement('Id'));
    
            //              OrgId
            nodeOrgId = nodeId.appendChild(xmlDoc.createElement('OrgId'));
    
            //                  Othr
            nodeOthr = nodeOrgId.appendChild(xmlDoc.createElement('Othr'));
    
            //                      Id
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeOthr, 'Id', mSKS_EFT_FileDetail.FileACHCompanyId, 35);
    
            if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CTX)
            {
                //                      9.1.1.17: SchmeNm
                nodeSchmeNm = nodeOthr.appendChild(xmlDoc.createElement('SchmeNm'));
    
                //                          9.1.1.18: Code
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeSchmeNm, 'Cd', 'CHID');
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_Cdtr_Nm</Name>
				<Source><![CDATA[
    protected void node_PmtInf_Cdtr_Nm(XmlElement _nodeCdtr)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.19: Cdtr
        //          Nm
        //------------------------------------------------------------------------------------------------------
    
        //          Nm
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeCdtr, 'Nm', this.CharacterReplacement(mSKS_EFT_FileDetail.FileACHCompanyName), 140, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_Cdtr_PstlAdr</Name>
				<Source><![CDATA[
    protected void node_PmtInf_Cdtr_PstlAdr(XmlElement _nodeCdtr)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.19: Cdtr
        //          Nm
        //------------------------------------------------------------------------------------------------------
        LogisticsPostalAddress  postalAddress;
        SKS_EB_Address          addressBldgNb, addressStrtNm;
        container               address;
    
        postalAddress = this.findPostalAddressLineByPartyLocationRole(CompanyInfo::current(), 'Direct Debit');
    
        if(postalAddress)
        {
            if(strScan(postalAddress.Street, ';', 1, strLen(postalAddress.Street)))
            {
                address = this.addressSplit(postalAddress.Street);
                addressBldgNb = conpeek(address,1);
                addressStrtNm = conpeek(address,2);
            }
            else
            {
                addressStrtNm = postalAddress.Street;
            }
            this.node_PstlAdr(_nodeCdtr, postalAddress.CountryRegionId, addressStrtNm, postalAddress.ZipCode, postalAddress.City, 35, addressBldgNb, postalAddress.State, true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_CdtrAcct</Name>
				<Source><![CDATA[
    protected void node_PmtInf_CdtrAcct(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.20: CdtrAcct
        //          Id
        //              IBAN
        //              Othr
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeCdtrAcct;
        XmlElement nodeCdtrAcctId;
        XmlElement nodeOthr;
    
        if(mSKS_EFT_FileDetail.BankBankAcct)
        {
            //      2.20: CdtrAcct
            nodeCdtrAcct = nodePmtInf.appendChild(xmlDoc.createElement('CdtrAcct'));
    
            //          Id
            nodeCdtrAcctId = nodeCdtrAcct.appendChild(xmlDoc.createElement('Id'));
    
            //              Othr
            nodeOthr = nodeCdtrAcctId.appendChild(xmlDoc.createElement('Othr'));
    
            //                  Id
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeOthr, 'Id', mSKS_EFT_FileDetail.BankBankAcct, 34);
    
            //              Ccy
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdtrAcct, 'Ccy', mBankAccountTable.CurrencyCode);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_CdtrAgt</Name>
				<Source><![CDATA[
    protected void node_PmtInf_CdtrAgt(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.17: CdtrAgt
        //               FinInstnId
        //                     CmbndId
        //------------------------------------------------------------------------------------------------------
    
        XmlElement nodeCdtrAgt;
        XmlElement nodeFinInstnId;
        XmlElement nodeClrSysMmBId;
        XmlElement nodeBrnchId;
        LogisticsPostalAddress  postalAddress;
        str branchId;

        branchId = SKS_EFT_Format::getCodelookupvalue('BranchId', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank);
    
        if(mSKS_EFT_FileDetail.BankBankTransit != '')
        {
            //      2.21: CdtrAgt
            nodeCdtrAgt = nodePmtInf.appendChild(xmlDoc.createElement('CdtrAgt'));
    
            //          FinInstnId
            nodeFinInstnId = nodeCdtrAgt.appendChild(xmlDoc.createElement('FinInstnId'));
    
            //              ClrSysMmbId
            nodeClrSysMmBId = nodeFinInstnId.appendChild(xmlDoc.createElement('ClrSysMmbId'));
    
            //                  Id
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeClrSysMmBId, 'MmbId', mSKS_EFT_FileDetail.BankBankTransit, 35);
        }
    
        postalAddress = this.findPostalAddressLineByPartyLocationRole(CompanyInfo::current(), 'Direct Debit');
    
        if(postalAddress.CountryRegionId)
        {
            //              PstlAdr
            //                  Ctry
            this.node_PstlAdr(nodeFinInstnId, postalAddress.CountryRegionId, '', '', '');
        }
    
        if(branchId)
        {
            //              BrnchId
            nodeBrnchId = nodeCdtrAgt.appendChild(xmlDoc.createElement('BrnchId'));
    
            //              Id
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeBrnchId, 'Id', branchId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_PmtTpInf_LclInstrm</Name>
				<Source><![CDATA[
    protected void node_PmtInf_PmtTpInf_LclInstrm(XmlElement nodePmtTpInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.6: PmtTpInf
        //          2.11: LclInstrm
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeLclInstrm;
        str value;
    
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #CCD:
                value = 'CCD';
                break;
            case #PPD:
                value = 'PPD';
                break;
            case #CTX:
                value = 'CTX';
                break;
            case #IAT:
                value = 'IAT';
                break;
        }
        if(value)
        {
            //              2.11: LclInstrm
            nodeLclInstrm = nodePmtTpInf.appendChild(xmlDoc.createElement('LclInstrm'));
    
            //              2.12: Cd
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeLclInstrm, 'Cd', value);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_PmtTpInf_SvcLvl</Name>
				<Source><![CDATA[
    protected void node_PmtInf_PmtTpInf_SvcLvl(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.6: PmtTpInf
        //          2.8: SvcLvl
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeSvcLvl;
        str     value;
    
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #URGP:
                value = 'URGP';
                break;
            case #URNS:
                value = 'URNS';
                break;
            case #CTX:
                value = 'NURG';
                break;
        }
    
        if(value)
        {
            //          SvcLvl
            nodeSvcLvl = _nodePmtInf.appendChild(xmlDoc.createElement('SvcLvl'));
    
            //              Cd
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeSvcLvl, 'Cd', value);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>