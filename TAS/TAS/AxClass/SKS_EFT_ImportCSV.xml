<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_ImportCSV</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class SKS_EFT_ImportCSV
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>DeleteVendPaymLookupRecord</Name>
				<Source><![CDATA[
    private void DeleteVendPaymLookupRecord(RecId   Recid)
    {
        SKS_EFT_VendorPaymLookup    SKS_EFT_VendorPaymLookup;
    
        delete_from SKS_EFT_VendorPaymLookup where SKS_EFT_VendorPaymLookup.FileFormatPaymSpecFieldsRecId == Recid;
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>DeleteBankPaymLookupRecord</Name>
				<Source><![CDATA[
    private void DeleteBankPaymLookupRecord(RecId   Recid)
    {
        SKS_EFT_BankPaymLookup    SKS_EFT_BankPaymLookup;
    
        delete_from SKS_EFT_BankPaymLookup where SKS_EFT_BankPaymLookup.FileFormatPaymSpecFieldsRecId == Recid;
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>DeleteCustReimbPaymLookupRecord</Name>
				<Source><![CDATA[
    private void DeleteCustReimbPaymLookupRecord(RecId   Recid)
    {
        SKS_EFT_CustReimbursementPaymLookup    lSKS_EFT_CustReimbursementPaymLookup;
    
        delete_from lSKS_EFT_CustReimbursementPaymLookup where lSKS_EFT_CustReimbursementPaymLookup.FileFormatPaymSpecFieldsRecId == Recid;
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>ExportEFTEDI820</Name>
				<Source><![CDATA[
    void ExportEFTEDI820(SKS_EFT_EDI820 _SKS_EFT_EDI820, Filename filename)
    {
        CommaStreamIo inFile;
        Container   line;
        boolean firstgroup, firstdetail;
        int totaladds;
        SKS_EFT_EDI820_Group   sks_eft_edi820_group;
        SKS_EFT_EDI820_Detail  sks_eft_edi820_detail;
    
        // BP Deviation Documented
        inFile = CommaStreamIo::constructForWrite();

        if(!inFile)
        {
            Error("@SKS2113");
            return;
        }
    
        infile.outRecordDelimiter('\r\n');
        infile.outFieldDelimiter(',');
    
        totaladds = 0;
    
        firstgroup = true;
        firstdetail = true;
    
        //select _SKS_EFT_EDI820; //header
        //Get label of field
        line = [fieldPName(SKS_EFT_EDI820, CompanyName),fieldPName(SKS_EFT_EDI820,DataElementSeparator), fieldPName(SKS_EFT_EDI820, Description),
                fieldPName(SKS_EFT_EDI820, formatID),fieldPName(SKS_EFT_EDI820, PaymSpec),fieldPName(SKS_EFT_EDI820,SegmentTerminator),
                fieldPName(SKS_EFT_EDI820, URLReference)];
        infile.writeExp(line);
    
        line = ['E',_SKS_EFT_EDI820.CompanyName,_SKS_EFT_EDI820.DataElementSeparator,_SKS_EFT_EDI820.Description,
                    _SKS_EFT_EDI820.formatID,_SKS_EFT_EDI820.PaymSpec,_SKS_EFT_EDI820.SegmentTerminator,
                    _SKS_EFT_EDI820.URLReference];
        infile.writeExp(line);
        totaladds++;
    
        //GROUP
        while select sks_eft_edi820_group where sks_eft_edi820_group.FormatId == _SKS_EFT_EDI820.FormatId && sks_eft_edi820_group.PaymSpec == _SKS_EFT_EDI820.PaymSpec &&
                     sks_eft_edi820_group.CompanyName == _SKS_EFT_EDI820.CompanyName
        {
            if(firstgroup)
            {
                //Column Group
                //Get label of field
                line = [fieldPName(sks_eft_edi820_group, CompanyName),fieldPName(sks_eft_edi820_group,FormatId), fieldPName(sks_eft_edi820_group, PaymSpec),
                        fieldPName(sks_eft_edi820_group, Segment),fieldPName(sks_eft_edi820_group, SegmentOccurrence)];
                infile.writeExp(line);
                firstgroup = false;
            }
            line = ['G',sks_eft_edi820_group.CompanyName,sks_eft_edi820_group.FormatId,sks_eft_edi820_group.PaymSpec,
                        sks_eft_edi820_group.Segment,sks_eft_edi820_group.SegmentOccurrence];
            infile.writeExp(line);
            totaladds++;
    
        }
    
        //DETAIL
        while select sks_eft_edi820_detail where sks_eft_edi820_detail.FormatId == _SKS_EFT_EDI820.FormatId && sks_eft_edi820_detail.PaymSpec == _SKS_EFT_EDI820.PaymSpec &&
                     sks_eft_edi820_detail.CompanyName == _SKS_EFT_EDI820.CompanyName
        {
            if(firstdetail)
            {
                //Column Detail
                //Get label of field
                line = [fieldPName(sks_eft_edi820_detail, CompanyName), fieldPName(sks_eft_edi820_detail, FieldDescr),fieldPName(sks_eft_edi820_detail, FieldNbr),
                        fieldPName(sks_eft_edi820_detail, FormatId),fieldPName(sks_eft_edi820_detail, Id),fieldPName(sks_eft_edi820_detail, MaxLength),
                        fieldPName(sks_eft_edi820_detail, PadChar),fieldPName(sks_eft_edi820_detail, Padfield),fieldPName(sks_eft_edi820_detail, PadSide),
                        fieldPName(sks_eft_edi820_detail, PaymSpec),fieldPName(sks_eft_edi820_detail, Segment),fieldPName(sks_eft_edi820_detail, SegmentOccurrence),
                        fieldPName(sks_eft_edi820_detail, SelectData),fieldPName(sks_eft_edi820_detail, Value)];
                infile.writeExp(line);
                firstdetail = false;
            }
            line = ['F',sks_eft_edi820_detail.CompanyName,sks_eft_edi820_detail.FieldDescr,sks_eft_edi820_detail.FieldNbr,
                        sks_eft_edi820_detail.FormatId,sks_eft_edi820_detail.Id,sks_eft_edi820_detail.MaxLength,
                        sks_eft_edi820_detail.PadChar,sks_eft_edi820_detail.PadField,sks_eft_edi820_detail.PadSide,
                        sks_eft_edi820_detail.PaymSpec,sks_eft_edi820_detail.Segment,sks_eft_edi820_detail.SegmentOccurrence,
                        sks_eft_edi820_detail.SelectData,sks_eft_edi820_detail.Value];
            infile.writeExp(line);
            totaladds++;
        }
        
        File::SendFileToUser(inFile.getStream(), filename);
        inFile = null;
        //report total adds, updates, and deletes
        info("@SYS54695" + ' ' + "@SYS108583" + ' :' + int2str(totaladds));
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>ImportEFTCSV</Name>
				<Source><![CDATA[
    void ImportEFTCSV()
    {
        SKS_EFT_FileFormat  sks;
        SKS_EFT_FileFormat  orig_sks;
        SKS_EFT_FileFormatPaymSpec  sksDet;
        SKS_EFT_FileFormatPaymSpec  locCustCountSKS_EFT_FileFormatPaymSpec;
        SKS_EFT_FileFormatPaymSpec  locVendCountSKS_EFT_FileFormatPaymSpec;
        SKS_EFT_FileFormatPaymSpec  locBanktoBankCountSKS_EFT_FileFormatPaymSpec;
        SKS_EFT_FileFormatPaymSpec  locCustReimbCountSKS_EFT_FileFormatPaymSpec;
        SKS_EFT_FileFormatPaymSpecFields    sksDetFields;
        SKS_EFT_FileFormatPaymSpecFields    orig_sksDetFields;
        SKS_EFT_FileFormatLookups   sksLookups;
        SKS_EFT_FileFormatLookups   orig_sksLookups;
        SKS_EFT_FileFormatNotes sksNotes;
        SKS_EFT_FileFormatNotes orig_sksNotes;
        SKS_EFT_InboundFileFormat   sksInboundFormat;
        SKS_EFT_InboundFileFormat   orig_InboundFormat;
        SKS_EFT_InboundReasonCodes  sksInboundReasonCodes;
        SKS_EFT_InboundReasonCodes  orig_InboundReasonCodes;
        SKS_EFT_InboundStatuses     sksInboundStatuses;
        SKS_EFT_InboundStatuses     orig_InboundStatus;
        SKS_EB_CodeLookup   sksCL;
        SKS_EB_CodeLookup   orig_sksCL;
        SKS_EB_CodeLookupValues     sksCLV;
        SKS_EB_CodeLookupValues     orig_sksCLV;
        SKS_EFT_ControlFiles        sksCF;
        SKS_EFT_ControlFiles        orig_sksCF;
        SKS_EFT_FormatId            EFTFormatID;
        SKS_EFT_FormatId            controlEFTFormatID;
        CommaStreamIo inFile;
        Filename    filename;
        Container   line;
        SKS_EFT_FormatId    FormatID;
        SKS_EFT_FormatGroup FormatGroup;
        PaymSpec        PaymSpec;
        String30        FormatFieldId;
        SKS_EB_CodeId   codeID;
        SKS_EFT_InboundFormatId     inboundFormatID;
        SKS_EFT_ReasonCode          inboundReasonCode;
        SKS_EFT_InboundStatusType   inboundStatusType;
        SKS_EFT_InboundStatusId     inboundStatusId;
        int totaladds;
        int totalupdates;
        int totaldeletes;
        int fieldcount = 0;
        String50 displayValue;
        str action;
        str hdrOrdet;
        //boolean updateFormat = false;
        SKS_EFT_BankFormatValidation    sksBankFormat;
        SKS_EFT_BankFormatValidation    orig_sksBankFormat;
        int nextSequenceNumber;
        //SKS_FDD_9785
        SKS_EFT_BRValidationAltFieldMapping     fieldMapping, orig_fieldMapping;
        //SKS_FDD_9785
        // vvv 12572 vvv
        SKS_EFT_DataValidationRule locSKS_EFT_DataValidationRule, locOrig_SKS_EFT_DataValidationRule;
        SKS_EFT_DataValidationDetails locSKS_EFT_DataValidationDetails, locOrig_SKS_EFT_DataValidationDetails;
        // ^^^ 12572 ^^^
        
        SKS_FileUploadDialogForm fileUploadDialog = new SKS_FileUploadDialogForm();
        fileUploadDialog.parmFileDialogCaptionForForm("@SKS994");
        fileUploadDialog.parmFileTypesAccepted('.csv');
        fileUploadDialog.parmStrategyClassName(classstr(SKS_PP_CSVFileTemporaryStorageStrategy));
        FileUploadTemporaryStorageResult fileUploadResult = fileUploadDialog.getFileUploadResult();
        if (fileUploadResult != null && fileUploadResult.getUploadStatus())
        {
            filename = fileUploadResult.getDownloadUrl();
            System.IO.Stream readStream = fileUploadResult.openResult(); // This is used to upload formats so it doesn't need to use FileHub
            inFile = CommaStreamIo::constructForRead(readStream);
        }
        else
        {
            return;
        }

        if (!inFile || infile.status() != IO_Status::Ok )
        {
            //file could not be opened
            throw error (strfmt("@SYS19312", filename));
        }

        ttsbegin;
    
        infile.inRecordDelimiter('\n');
        infile.inFieldDelimiter(',');
    
        //Checking status of last operation..
        while (infile.status() == IO_status::Ok)
        {
            FormatID = '';
            PaymSpec = '';
            displayValue = '';
            line = infile.read();
    
            if (line)
            {
                hdrOrdet = conpeek(line, 1); //Header or Detail
                if (hdrOrdet == 'H')
                {
                    //Prior to 6.8 there were x fields
                    //Prior to 6.9 there were x+1
                    fieldcount = conLen(line);
    
                    sks.initValue();
                    sks.BEDesc01 = conpeek(line, 2);
                    sks.BEDesc02 = conpeek(line, 3);
                    sks.BEMask01 = conpeek(line, 4);
                    sks.BEMask02 = conpeek(line, 5);
                    sks.BlockFill = conpeek(line, 6);
                    sks.CompanyIdMask = conpeek(line, 7);
                    sks.CompanyIdTitle = conpeek(line, 8);
                    sks.CompanyNameTitle = conpeek(line, 9);
                    sks.CompanyNameMask = conpeek(line, 10);
                    sks.CrLf = conpeek(line, 11);
                    sks.Description = conpeek(line, 12);
                    sks.EffectiveDateOffset = conpeek(line, 13);
                    sks.EntryClassTitle = conpeek(line, 14);
                    sks.EntryClassMask = conpeek(line, 15);
                    sks.FormatId = conpeek(line, 16);
                    sks.FormatType = conpeek(line, 17);
                    sks.ImmDestMask = conpeek(line, 18);
                    sks.ImmDestTitle = conpeek(line, 19);
                    sks.ImmDestNameTitle = conpeek(line, 20);
                    sks.ImmDestNameMask = conpeek(line, 21);
                    sks.ImmOriginTitle = conpeek(line, 22);
                    sks.ImmOriginMask = conpeek(line, 23);
                    sks.ImmOriginNameTitle = conpeek(line, 24);
                    sks.ImmOriginNameMask = conpeek(line, 25);
                    sks.IncludeCpnyCredit = conPeek(line, 26);
                    sks.IncludeCpnyDebit = conpeek(line, 27);
                    sks.LastEffectiveDate = str2date(conpeek(line, 28), 213);
                    sks.NextDailyReset = conpeek(line, 29);
                    sks.NextDailyResetDate = str2date(conpeek(line, 30), 213);
                    sks.NextFileId = conpeek(line, 31);
                    sks.NextSequenceNumber = conpeek(line, 32);
                    sks.PreNote = conpeek(line, 33);
                    sks.RecordLength = conpeek(line, 34);
                    sks.Selected = conpeek(line, 35);
                    sks.TrimRecord = conpeek(line, 36);
                    sks.TwoFileNameAddition = conpeek(line, 37);
                    sks.WBank01Description = conpeek(line, 38);
                    sks.WBank01Mask = conpeek(line, 39);
                    sks.WBank01Required = conpeek(line, 40);
                    sks.WBank02Required = conpeek(line, 41);
                    sks.WBank02Mask = conpeek(line, 42);
                    sks.WBank02Description = conpeek(line, 43);
                    sks.WBank03Required = conpeek(line, 44);
                    sks.WBank03Mask = conpeek(line, 45);
                    sks.WBank03Description = conpeek(line, 46);
                    sks.WBank04Required = conpeek(line, 47);
                    sks.WBank04Mask = conpeek(line, 48);
                    sks.WBank04Description = conpeek(line, 49);
                    sks.PrenoteDays = conpeek(line, 50);
                    sks.EDI = conpeek(line, 51);
                    sks.PayDateIsEffDate = conPeek(line, 52);
                    sks.ARDateOffset = conPeek(line, 53);
    
                    if(fieldcount >= 55)
                    {
                        sks.UseAddenda = conPeek(line, 54);
                    }
    
                    if(fieldcount >= 56)
                    {
                        sks.MastAcctList = conPeek(line,55);
                    }
    
                    if(fieldcount >= 57 && conPeek(line,56) != '')
                    {
                        sks.FormatGroup = conPeek(line,56);
                    }
                    else
                    {
                        sks.FormatGroup = sks.FormatId;
                    }
    
                    if(fieldcount >= 58)
                    {
                        sks.SupportsMultipleEffectiveDates = conPeek(line,57);
                    }

                    //FDD-10590 --->
                    if(fieldcount >= 59)
                    {
                        sks.SupportsMultiCompany = conPeek(line,58);
                    }
                    if(fieldcount >= 60)
                    {
                        sks.ExternalFormat = conPeek(line,59);
                    }
                    //<--- FDD-10590

                    //FDD-14181--->
                    if(fieldcount >= 59)
                    {
                        sks.SKS_BTB_FundTransferType = conPeek(line,60);
                    }
                    //<---FDD-14181

                    action = subStr(conpeek(line, fieldcount), 1, 1);   //Add, Replace, or Delete
    
                    select firstonly * from orig_sks where orig_sks.FormatId == sks.FormatID;
    
                    if(action == 'A' || action == '')
                    {
                        if(orig_sks.FormatID == '') //not found so add it
                        {
                            sks.doInsert();
                            totaladds++;
                        }
                    }
                    else if (action == 'R')
                    {
                        if(orig_sks.FormatID == '') //nothing to replace so add it
                        {
                            sks.doInsert();
                            totaladds++;
                        }
                        else
                        {
                            // Maintain some original values
                            sks.Selected = orig_sks.Selected;
                            sks.EffectiveDateMethod = orig_sks.EffectiveDateMethod;
                            sks.EffectiveDateOffset = orig_sks.EffectiveDateOffset;
                            sks.InboundFileGroupId = orig_sks.InboundFileGroupId;
                            sks.SKS_DD_InboundFileGroupId = orig_sks.SKS_DD_InboundFileGroupId;
                            sks.SKS_BTB_InboundFileGroupId = orig_sks.SKS_BTB_InboundFileGroupId;
                            sks.PayDateIsEffDate = orig_sks.PayDateIsEffDate;
                            sks.ARDateOffset = orig_sks.ARDateOffset;                           // DevOps 16331
                            sks.DaysPriorToEffectiveDate = orig_sks.DaysPriorToEffectiveDate;    // DevOps 16331

                            delete_from orig_sks where orig_sks.FormatId == sks.FormatID;
                            sks.doInsert();
                            totalupdates++;
                        }
                    }
                    else if(action == 'D')
                    {
                        if(orig_sks.FormatID != '') //if the record was found then delete it
                        {
                            delete_from orig_sks where orig_sks.FormatId == sks.FormatID;
                            totaldeletes++;
                        }
                    }
                }
                else if (hdrOrdet == 'C')
                {
                    FormatGroup = conPeek(line,2);
                    CodeId = conPeek(line, 3);
                    select firstonly forupdate sksCL where sksCL.codeid == codeID && sksCL.FormatGroup == FormatGroup;
                    sksCL.FormatGroup = FormatGroup;
                    sksCL.CodeId = codeID;
                    sksCL.Description = conPeek(line,4);
                    action = subStr(conPeek(line, 5), 1, 1);
    
                    if(action == 'A' || action == '')
                    {
                        if(!sksCL)
                        {
                            sksCL.doInsert();
                            totaladds++;
                        }
                    }
                    else if (action  == 'R')
                    {
                        if(!sksCL)
                        {
                            sksCL.insert();
                            totaladds++;
                        }
                        else
                        {
                            sksCL.update();
                        }
                    }
                    else if(action == 'D')
                    {
                        if(sksCL)
                        {
                            delete_from orig_sksCL where orig_sksCL.codeid == sksCL.codeid && orig_sksCL.FormatGroup == FormatGroup;
                            totaldeletes++;
                        }
                    }
                }
                else if (hdrOrdet == 'T')
                {
                    EFTFormatID = conPeek(line,2);
                    controlEFTFormatID = conPeek(line,3);
                    select firstonly forupdate sksCF where sksCF.FileFormatID == EFTFormatID && sksCF.EFTControlFileFormatID == controlEFTFormatID;
                    sksCF.FileFormatID = EFTFormatID;
                    sksCF.EFTControlFileFormatID = controlEFTFormatID;
                    sksCF.EFTControlFileDescription = conPeek(line,4);
                    action = subStr(conPeek(line,5), 1, 1);
    
                    if(action == 'A' || action == '')
                    {
                        if(!sksCF)
                        {
                            sksCF.doinsert();
                            totaladds++;
                        }
                    }
                    else if (action == 'R')
                    {
                        if(!sksCF)
                        {
                            sksCF.insert();
                            totaladds++;
                        }
                        else
                        {
                            sksCF.update();
                        }
                    }
                    else if(action == 'D')
                    {
                        if(sksCF)
                        {
                            delete_from orig_sksCF where orig_sksCF.FileFormatID == EFTFormatID && sksCF.EFTControlFileFormatID;
                            totaldeletes++;
                        }
                    }
                }
                else if (hdrOrdet == 'V')
                {
                    FormatGroup = conPeek(line, 2);
                    codeID = conPeek(line, 3);
                    displayValue = conPeek(line, 4);
                    select firstonly forupdate sksCLV where sksCLV.codeid == codeID
                                               && sksCLV.FormatGroup == FormatGroup
                                               && sksCLV.DisplayValue == displayValue;
                    sksCLV.FormatGroup = conPeek(line, 2);
                    sksCLV.codeid = conPeek(line, 3);
                    sksCLV.DisplayValue = conPeek(line, 4);
                    sksCLV.CodeValue = conPeek(line, 5);
                    action = subStr(conPeek(line, 6),1, 1);
    
                    if(action == 'A' || action == '')
                    {
                        if(!sksCLV)
                        {
                            sksCLV.doInsert();
                            totaladds++;
                        }
                    }
                    else if (action == 'R')
                    {
                        if(!sksCLV)
                        {
                            sksCLV.insert();
                            totaladds++;
                        }
                        else
                        {
                            sksCLV.update();
                        }
                    }
                    else if(action == 'D')
                    {
                        if(sksCLV)
                        {
                            delete_from orig_sksCLV where orig_sksCLV.codeid == sksCL.codeid
                                                       && orig_sksCLV.FormatGroup == FormatGroup
                                                       && orig_sksCLV.DisplayValue == displayValue;
                            totaldeletes++;
                        }
                    }
                }
                else if (hdrOrdet == 'F')
                {
                    FormatGroup = conPeek(line, 2);
                    FormatID = conPeek(line, 3);
                    PaymSpec = conPeek(line, 4);
                    FormatFieldId = conPeek(line, 5);
    
                    select firstonly recid from sksDet where sksDet.formatid == FormatID && sksDet.PaymSpec == Paymspec;
    
                    select forUpdate sksDetFields where sksDetFields.FileFormatPaymSpecRecId == sksDet.RecId
                                                     && sksDetFields.FormatGroup == FormatGroup
                                                     && sksDetFields.FormatFieldId == FormatFieldId;
    
                    sksDetFields.CodeId = conPeek(line, 8);
                    displayValue= conPeek(line, 9);
    
                    select firstonly RecId from sksCLV where sksCLV.CodeId == sksDetFields.CodeId
                                                && sksCLV.FormatGroup == FormatGroup
                                                && sksCLV.DisplayValue == displayValue;
    
                    sksDetFields.FileFormatPaymSpecRecId = sksDet.recid;
                    sksDetFields.FormatGroup = FormatGroup;
                    sksDetFields.FormatFieldId = FormatFieldId;
                    sksDetFields.Description = conPeek(line, 6);
                    sksDetFields.FieldType = conPeek(line, 7);
                    sksDetFields.DefaultCodeLookupValuesRecId = sksCLV.recid;
                    sksDetFields.Required = conPeek(line, 10);
                    sksDetFields.FixedValue = conPeek(line, 11);
                    sksDetFields.FixedMask = conPeek(line, 12);
                    sksDetFields.TechNote = conPeek(line, 13);
                    action = substr(conPeek(line, 14), 1, 1);
    
    
    
                    if(action == 'A' || action == '')
                    {
                        if(!sksDetFields)
                        {
                            sksDetFields.Insert();
                            totaladds++;
    
                            this.VendPaymLookupAddition(sksDetFields, FormatID, PaymSpec);
                            this.bankPaymookupAddition(sksDetFields, FormatID, PaymSpec);
                            this.CustReimbPaymLookupAddition(sksDetFields, FormatID, PaymSpec);
                        }
                    }
                    else if (action  == 'R')
                    {
                        if(!sksDetFields)
                        {
                            sksDetFields.insert();
                            totaladds++;
    
                            this.VendPaymLookupAddition(sksDetFields, FormatID, PaymSpec);
                            this.bankPaymookupAddition(sksDetFields, FormatID, PaymSpec);
                            this.CustReimbPaymLookupAddition(sksDetFields, FormatID, PaymSpec);
                        }
                        else
                        {
                            this.VendPaymLookupAddition(sksDetFields, FormatID, PaymSpec);
                            this.bankPaymookupAddition(sksDetFields, FormatID, PaymSpec);
                            this.CustReimbPaymLookupAddition(sksDetFields, FormatID, PaymSpec);
                            sksDetFields.update();
                        }
                    }
                    else if(action == 'D')
                    {
                        select firstonly forUpdate orig_sksDetFields where orig_sksDetFields.FileFormatPaymSpecRecId == sksDet.RecId
                            && orig_sksDetFields.FormatFieldId == FormatFieldId;
    
                        if(orig_sksDetFields)
                        {
                            this.DeleteVendPaymLookupRecord(orig_sksDetFields.RecId);
                            this.DeleteBankPaymLookupRecord(orig_sksDetFields.RecId);
                            this.DeleteCustReimbPaymLookupRecord(orig_sksDetFields.RecId);
                            orig_sksDetFields.delete();
                            totaldeletes++;
                        }
                    }
                }
                else if (hdrOrdet == 'D')
                {
                    FormatId = conpeek(line, 19);
                    PaymSpec = conpeek(line, 16);
    
                    fieldcount = conLen(line);

                    select firstonly forUpdate sksDet where sksDet.FormatId == FormatId
                        && sksDet.PaymSpec == PaymSpec;
    
                    // sksDet.initValue();
                    sksDet.VBARoutingReqd = conpeek(line, 2);
                    sksDet.VBAAccountReqd = conpeek(line, 3);
                    sksDet.VBASwiftReqd = conpeek(line, 4);
                    sksDet.VBAIBANReqd = conpeek(line, 5);
                    sksDet.ARPaymSpecName = conPeek(line, 6);
                    sksDet.BEBeneBankAcctReqd = conpeek(line, 7);
                    sksDet.BE01Reqd = conpeek(line, 8);
                    sksDet.BE02Reqd = conpeek(line, 9);
                    sksDet.BE01Use = conpeek(line, 10);
                    sksDet.BE02Use = conpeek(line, 11);
                    sksDet.PaymSpecFileDescr = conpeek(line, 12);
                    sksDet.RecordSummary = conpeek(line, 13);
                    sksDet.TransactionCode = conpeek(line, 14);
                    sksDet.EmailNote = conpeek(line, 15);
                    sksDet.PaymSpec = conpeek(line, 16);
                    sksDet.PaymSpecName = conpeek(line, 17);
                    sksDet.FilterSeparateFile = conpeek(line, 18);
                    sksDet.FormatId = conpeek(line, 19);
                    //sksDet.Selected = conpeek(line, 20); // Don't import selected column. Value will default to 0 or remain as is on update
                    sksDet.CpnyIDNameReq = conpeek(line, 21);
                    sksDet.EmailOff = conpeek(line, 22);
                    sksDet.VendorUse = conpeek(line, 23);
                    sksDet.WireTabs = conpeek(line, 24);
                    sksDet.SamePaymentDate = conpeek(line, 25);
                    sksDet.SelectByPaymentDate = conpeek(line, 26);
                    sksDet.PreNote = conpeek(line, 27);
                    sksDet.TxnNacha = conpeek(line, 28);
                    sksDet.UseCheckNumber = conpeek(line, 29);
                    sksDet.UseWithCustomers = conPeek(line, 30);
                    sksDet.UseWithVendors = conPeek(line, 31);
                    sksDet.EDI = conPeek(line, 32);

                    if(fieldcount >= 36)    //FDD-14181--->
                    {
                        sksDet.UseWithBanktoBank = conPeek(line, 33);
                        sksDet.SKS_BTB_PaymSpecFundTransferType = conPeek(line, 34);
                        sksDet.UseWithCustReimbursements = conPeek(line, 35);
                        action = subStr(conpeek(line, 36), 1, 1);
                    }
                    else    //<---FDD-14181
                    {
                        action = subStr(conpeek(line, 33), 1, 1);  //Add, Replace, or Delete
                    }
    
                    select firstonly forUpdate sks where sks.FormatId == sksDet.FormatId;
                    if(action == 'A' || action == '' || action == 'R')
                    {
                        if(action == 'A' || action == '')
                        {
                            if(!sksDet) //not found so add it
                            {
                                sksDet.Insert();
                                totaladds++;
                            }
                        }
                        else //Action = 'R'
                        {
                            if(!sksDet) //nothing to replace so add it
                            {
                                sksDet.Insert();
                                totaladds++;
                            }
                            else
                            {
                                sksDet.update();
                                totalupdates++;
                            }
                        }
    
                        if(sksDet.UseWithCustomers )
                        {
                            sks.UseWithCustomers = true;
                        }
                        if(sksDet.UseWithVendors)
                        {
                            sks.UseWithVendors = true;
                        }
                        if(sksDet.UseWithBanktoBank)
                        {
                            sks.UseWithBanktoBank = true;
                        }
                        if(sksDet.UseWithCustReimbursements)
                        {
                            sks.UseWithCustReimbursements = true;
                        }
                        sks.update();
                    }
                    else if(action == 'D')
                    {
                        if(sksDet) //if the record was found then delete it
                        {
                            sksDet.delete();
                            totaldeletes++;
                            if(sks)
                            {
                                if(sksDet.UseWithCustomers)
                                {
                                    select count(RecId) from locCustCountSKS_EFT_FileFormatPaymSpec
                                        where locCustCountSKS_EFT_FileFormatPaymSpec.FormatId == sksDet.FormatId
                                            && locCustCountSKS_EFT_FileFormatPaymSpec.UseWithCustomers == true;
                                }
                                if(sksDet.UseWithVendors)
                                {
                                    select count(RecId) from locVendCountSKS_EFT_FileFormatPaymSpec
                                        where locVendCountSKS_EFT_FileFormatPaymSpec.FormatId == sksDet.FormatId
                                            && locVendCountSKS_EFT_FileFormatPaymSpec.UseWithCustomers == true;
                                }
                                if(sksDet.UseWithBanktoBank)
                                {
                                    select count(RecId) from locBanktoBankCountSKS_EFT_FileFormatPaymSpec
                                        where locBanktoBankCountSKS_EFT_FileFormatPaymSpec.FormatId == sksDet.FormatId
                                            && locBanktoBankCountSKS_EFT_FileFormatPaymSpec.UseWithBanktoBank == true;
                                }
                                if(sksDet.UseWithCustReimbursements)
                                {
                                    select count(RecId) from locCustReimbCountSKS_EFT_FileFormatPaymSpec
                                        where locCustReimbCountSKS_EFT_FileFormatPaymSpec.FormatId == sksDet.FormatId
                                            && locCustReimbCountSKS_EFT_FileFormatPaymSpec.UseWithCustReimbursements == true;
                                }

                                if(!locCustCountSKS_EFT_FileFormatPaymSpec.RecId || !locVendCountSKS_EFT_FileFormatPaymSpec ||
                                   !locBanktoBankCountSKS_EFT_FileFormatPaymSpec || !locCustReimbCountSKS_EFT_FileFormatPaymSpec)
                                {
                                    //we are going to assign to a boolean, so if it has a count, just make it 1(1 = true)
                                    //JU: Refactored to fix warning. and because this makes more sense
                                    sks.UseWithCustomers = (locCustCountSKS_EFT_FileFormatPaymSpec.RecId > 0) ? true : false;
                                    sks.UseWithVendors = (locVendCountSKS_EFT_FileFormatPaymSpec.RecId > 0) ? true : false;
                                    sks.UseWithBanktoBank = (locBanktoBankCountSKS_EFT_FileFormatPaymSpec.RecId > 0) ? true : false;
                                    sks.UseWithCustReimbursements = (locCustReimbCountSKS_EFT_FileFormatPaymSpec.RecId > 0) ? true : false;
                                    sks.update();
                                }
                            }
                            locCustCountSKS_EFT_FileFormatPaymSpec = null;
                            locVendCountSKS_EFT_FileFormatPaymSpec = null;
                        }
                    }
                }
                else if (hdrOrdet == 'I')
                {
                    inboundFormatID = conPeek(line, 2);
                    select firstonly forupdate sksInboundFormat where sksInboundFormat.FormatId == inboundFormatID;
                    sksInboundFormat.FormatId = inboundFormatID;
                    sksInboundFormat.Description = conPeek(line,3);
                    sksInboundFormat.SKS_DD_Modules = conPeek(line,4);
                    action = subStr(conPeek(line, 5), 1, 1);
    
                    if(action == 'A' || action == '')
                    {
                        if(!sksInboundFormat)
                        {
                            sksInboundFormat.doInsert();
                            totaladds++;
                        }
                    }
                    else if (action  == 'R')
                    {
                        if(!sksInboundFormat)
                        {
                            sksInboundFormat.doinsert();
                            totaladds++;
                        }
                        else
                        {
                            sksInboundFormat.update();
                            totalupdates++;
                        }
                    }
                    else if(action == 'D')
                    {
                        if(sksInboundFormat)
                        {
                            delete_from orig_InboundFormat where orig_InboundFormat.FormatId == sksInboundFormat.FormatId;
                            totaldeletes++;
                        }
                    }
                }
                else if (hdrOrdet == 'S')
                {
                    inboundFormatID = conPeek(line, 2);
                    inboundStatusType = conPeek(line, 3);
                    inboundStatusId = conPeek(line, 4);
    
                    select firstonly forUpdate sksInboundStatuses where sksInboundStatuses.FormatId == inboundFormatID
                                                            && sksInboundStatuses.StatusType == inboundStatusType
                                                            && sksInboundStatuses.StatusId == inboundStatusId;
    
                    sksInboundStatuses.FormatId = inboundFormatID;
                    sksInboundStatuses.StatusType = inboundStatusType;
                    sksInboundStatuses.StatusId = inboundStatusId;
                    sksInboundStatuses.StatusIdDisplay = conPeek(line, 5);
                    sksInboundStatuses.Origin = conPeek(line, 6);
                    action = substr(conPeek(line, 7), 1, 1);
    
                    if(action == 'A' || action == '')
                    {
                        if(!sksInboundStatuses)
                        {
                            sksInboundStatuses.Insert();
                            totaladds++;
                        }
                    }
                    else if (action  == 'R')
                    {
                        if(!sksInboundStatuses)
                        {
                            sksInboundStatuses.insert();
                            totaladds++;
                        }
                        else
                        {
                            sksInboundStatuses.update();
                            totalupdates++;
                        }
                    }
                    else if(action == 'D')
                    {
                        select firstonly forUpdate orig_InboundStatus where orig_InboundStatus.FormatId == inboundFormatID
                                                            && orig_InboundStatus.StatusType == inboundStatusType
                                                            && orig_InboundStatus.StatusId == inboundStatusId;
                        if(sksInboundStatuses)
                        {
                            orig_InboundStatus.delete();
                            totaldeletes++;
                        }
                    }
                }
                else if (hdrOrdet == 'R')
                {
                    inboundFormatID = conPeek(line, 2);
                    inboundReasonCode = conPeek(line, 3);
    
                    select firstonly forUpdate sksInboundReasonCodes where sksInboundReasonCodes.FormatId == inboundFormatID
                                                            && sksInboundReasonCodes.ReasonCode == inboundReasonCode;
    
                    sksInboundReasonCodes.FormatId = inboundFormatID;
                    sksInboundReasonCodes.ReasonCode = inboundReasonCode;
                    sksInboundReasonCodes.ReasonDesc = conPeek(line, 4);
                    sksInboundReasonCodes.Origin = conPeek(line, 5);
                    action = substr(conPeek(line, 6), 1, 1);
    
                    if(action == 'A' || action == '')
                    {
                        if(!sksInboundReasonCodes)
                        {
                            sksInboundReasonCodes.Insert();
                            totaladds++;
                        }
                    }
                    else if (action  == 'R')
                    {
                        if(!sksInboundReasonCodes)
                        {
                            sksInboundReasonCodes.insert();
                            totaladds++;
                        }
                        else
                        {
                            sksInboundReasonCodes.update();
                            totalupdates++;
                        }
                    }
                    else if(action == 'D')
                    {
                        select firstonly forUpdate orig_InboundReasonCodes where orig_InboundReasonCodes.FormatId == inboundFormatID
                                                                    && orig_InboundReasonCodes.ReasonCode == inboundReasonCode;
                        if(sksInboundReasonCodes)
                        {
                            orig_InboundReasonCodes.delete();
                            totaldeletes++;
                        }
                    }
                }
                else if (hdrOrdet == 'L')
                {
                    sksLookups.initValue();
                    sksLookups.FormatId = conpeek(line, 2);
                    sksLookups.LookupType = conpeek(line, 3);
                    sksLookups.FieldValue = conpeek(line, 4);
                    sksLookups.FieldData = conpeek(line, 5);
                    action = subStr(conpeek(line, 6), 1, 1);  //Add, Replace, or Delete
    
                    select firstonly * from orig_sksLookups where orig_sksLookups.FormatId == sksLookups.FormatId
                        && orig_sksLookups.FieldValue == sksLookups.FieldValue
                        && orig_sksLookups.LookupType == sksLookups.LookupType;
    
                    if(action == 'A' || action == '')
                    {
                        if(orig_sksLookups.FormatId == '') //not found so add it
                        {
                            sksLookups.doInsert();
                            totaladds++;
                        }
                    }
                    else if (action == 'R')
                    {
                        if(orig_sksLookups.FormatId == '') //nothing to replace so add it
                        {
                            sksLookups.doInsert();
                            totaladds++;
                        }
                        else
                        {
                            delete_from orig_sksLookups where orig_sksLookups.FormatId == sksLookups.FormatId
                                && orig_sksLookups.FieldValue == sksLookups.FieldValue
                                && orig_sksLookups.LookupType == sksLookups.LookupType;
                            sksLookups.doInsert();
                            totalupdates++;
                        }
                    }
                    else if(action == 'D')
                    {
                        if(orig_sksLookups.FormatId != '') //if the record was found then delete it
                        {
                            delete_from orig_sksLookups where orig_sksLookups.FormatId == sksLookups.FormatId
                                && orig_sksLookups.FieldValue == sksLookups.FieldValue
                                && orig_sksLookups.LookupType == sksLookups.LookupType;
                            totaldeletes++;
                        }
                    }
                }
                // vvv 15272 SKS_EFT_DataValidationRule vvv
                else if (hdrOrdet == 'DVR')
                {

                    locSKS_EFT_DataValidationRule = null;
                    locOrig_SKS_EFT_DataValidationDetails = null;

                    fieldcount = conLen(line);
                    locSKS_EFT_DataValidationRule.DataRuleId = conPeek(Line, 2);
                    locSKS_EFT_DataValidationRule.Description = conPeek(Line, 3);
                    locSKS_EFT_DataValidationRule.SKS_EB_AndOr = conPeek(Line, 4);
                    if(fieldcount >= 6)
                    {
                        locSKS_EFT_DataValidationRule.UserUpdated = conPeek(Line, 5);
                    }
                    action = subStr(conpeek(line, fieldcount), 1, 1);   //Add, Replace, or Delete
                    

                    select firstonly UserUpdated, RecId from locOrig_SKS_EFT_DataValidationRule
                        where locOrig_SKS_EFT_DataValidationRule.DataRuleId == locSKS_EFT_DataValidationRule.DataRuleId;

                    if((action == 'A' || action == '' || action == 'R') && !locOrig_SKS_EFT_DataValidationRule)
                    {
                        locSKS_EFT_DataValidationRule.doInsert();
                        totaladds++;
                    }
                    else if(action == 'R')
                    {
                        if(!locOrig_SKS_EFT_DataValidationRule.UserUpdated)
                        {
                            delete_from locOrig_SKS_EFT_DataValidationRule
                                where locOrig_SKS_EFT_DataValidationRule.DataRuleId == locSKS_EFT_DataValidationRule.DataRuleId;
                            locSKS_EFT_DataValidationRule.doInsert();
                            totalupdates++;
                        }
                    }
                    else if(action == 'D' && locOrig_SKS_EFT_DataValidationRule && !locOrig_SKS_EFT_DataValidationRule.UserUpdated)
                    {
                        delete_from locOrig_SKS_EFT_DataValidationRule
                                where locOrig_SKS_EFT_DataValidationRule.DataRuleId == locSKS_EFT_DataValidationRule.DataRuleId;
                        totaldeletes++;
                    }
                }
                // ^^^ 12572 SKS_EFT_DataValidationRule ^^^
                // vvv SKS_BS_DD_5_BankFormatValidations vvv
                else if (hdrOrdet == 'B')
                {

                    sksBankFormat = null;
                    fieldcount = conLen(line);
                    sksBankFormat.initValue();
                    sksBankFormat.FormatId = conpeek(line, 2);
                    sksBankFormat.PaymSpec = conpeek(line, 3);
    

                    sksBankFormat.SourceFieldDesc = conpeek(line, 5);
                    sksBankFormat.SourceFieldLoc = conpeek(line, 6);
                    sksBankFormat.TargetFieldLoc = conpeek(line, 7);
                    sksBankFormat.Notes = conpeek(line, 8);
                    sksBankFormat.SourceContext = conpeek(line, 9);
                    sksBankFormat.SourceField = conpeek(line, 10);
                    sksBankFormat.ISOCountrySpec = conpeek(line, 11);
                    sksBankFormat.CountryContext = conpeek(line, 12);
                    sksBankFormat.Required = conpeek(line, 13);
                    sksBankFormat.LengthValidation = conpeek(line, 14);
                    sksBankFormat.MinLength = conpeek(line, 15);
                    sksBankFormat.MaxLength = conpeek(line, 16);
                    sksBankFormat.UserUpdated = conpeek(line, 17);
                    sksBankFormat.Module = conPeek(line,18);
                    if(fieldcount >= 20)
                    {
                        sksBankFormat.DataRuleId = conPeek(Line,19);
                    }

                    if(fieldcount >= 21)
                    {
                        sksBankFormat.BTB_TransferType = conPeek(Line,20);
                    }

                    action = subStr(conpeek(line, fieldcount), 1, 1);   //Add, Replace, or Delete

                    if(action == 'A' || action == '')
                    {
                        select maxOf(Id) from orig_sksBankFormat
                            where orig_sksBankFormat.FormatId == sksBankFormat.FormatId &&
                            orig_sksBankFormat.PaymSpec == sksBankFormat.PaymSpec &&
                            orig_sksBankFormat.Module == sksBankFormat.Module &&
                            orig_sksBankFormat.BTB_TransferType == sksBankFormat.BTB_TransferType;
    
                        nextSequenceNumber = orig_sksBankFormat.Id + 1;
                    }
                    else if (action == 'R')
                    {
                        nextSequenceNumber = nextSequenceNumber + 1;
                    }
    
                    sksBankFormat.Id = nextSequenceNumber;
    
                    select firstonly * from orig_sksBankFormat where orig_sksBankFormat.FormatId == sksBankFormat.FormatId
                        && orig_sksBankFormat.PaymSpec == sksBankFormat.PaymSpec
                        && orig_sksBankFormat.SourceContext == sksBankFormat.SourceContext
                        && orig_sksBankFormat.SourceField == sksBankFormat.SourceField
                        && orig_sksBankFormat.Module == sksBankFormat.Module
                        && orig_sksBankFormat.BTB_TransferType == sksBankFormat.BTB_TransferType;
    
                    if(action == 'A' || action == '')
                    {
                        if(orig_sksBankFormat.FormatId == '')//not found so add it
                        {
                            sksBankFormat.doInsert();
                            totaladds++;
                        }
                    }
                    else if (action == 'R')
                    {
                        if(orig_sksBankFormat.FormatId == '') //nothing to replace so add it
                        {
                            sksBankFormat.doInsert();
                            totaladds++;
                        }
                        else if (orig_sksBankFormat.UserUpdated == NoYes::No)
                        {
                            delete_from orig_sksBankFormat where orig_sksBankFormat.FormatId == sksBankFormat.FormatId
                                && orig_sksBankFormat.PaymSpec == sksBankFormat.PaymSpec
                                && orig_sksBankFormat.SourceContext == sksBankFormat.SourceContext
                                && orig_sksBankFormat.SourceField == sksBankFormat.SourceField
                                && orig_sksBankFormat.BTB_TransferType == sksBankFormat.BTB_TransferType;
    
                            sksBankFormat.doInsert();
                            totalupdates++;
                        }
                    }
                    else if(action == 'D')
                    {
                        if(orig_sksBankFormat.FormatId != '')
                        {
                            delete_from orig_sksBankFormat where orig_sksBankFormat.FormatId == sksBankFormat.FormatId
                                && orig_sksBankFormat.PaymSpec == sksBankFormat.PaymSpec
                                && orig_sksBankFormat.SourceContext == sksBankFormat.SourceContext
                                && orig_sksBankFormat.SourceField == sksBankFormat.SourceField
                                && orig_sksBankFormat.BTB_TransferType == sksBankFormat.BTB_TransferType;
                            totaldeletes++;
                        }
                    }
                }
                //  ^^^ SKS_BS_DD_5_BankFormatValidations ^^^
                // vvv 12572 SKS_EFT_DataValidationDetails vvv
                else if (hdrOrdet == 'DVD') //
                {

                    fieldcount = conLen(line);
                    locSKS_EFT_DataValidationDetails = null;
                    locOrig_SKS_EFT_DataValidationDetails = null;
                    locOrig_SKS_EFT_DataValidationRule = null;
                    locSKS_EFT_DataValidationDetails.DataRuleId = conpeek(line, 2);
                    locSKS_EFT_DataValidationDetails.SKS_EB_ValidationFilter = conPeek(Line, 3);
                    locSKS_EFT_DataValidationDetails.Value = conpeek(line, 4);
                    if(fieldcount >= 6)
                    {
                        locSKS_EFT_DataValidationDetails.CaseSensitive = conPeek(Line, 5);
                    }
                    action = subStr(conpeek(line, fieldcount), 1, 1);   //Add, Replace, or Delete
                    
                    select firstonly recid from locOrig_SKS_EFT_DataValidationDetails 
                        where locOrig_SKS_EFT_DataValidationDetails.DataRuleId == locSKS_EFT_DataValidationDetails.DataRuleId
                            && locOrig_SKS_EFT_DataValidationDetails.SKS_EB_ValidationFilter == locSKS_EFT_DataValidationDetails.SKS_EB_ValidationFilter
                            && locOrig_SKS_EFT_DataValidationDetails.Value == locSKS_EFT_DataValidationDetails.Value
                        join UserUpdated from locOrig_SKS_EFT_DataValidationRule
                            where  locOrig_SKS_EFT_DataValidationRule.DataRuleId == locOrig_SKS_EFT_DataValidationDetails.DataRuleId;

                    //  If all records related to the parent SKS_EFT_BankFormatValidation are being deleted, the 
                    //  SKS_EFT_DataValidationRule will already be gone.  So select the orphan SKS_EFT_DataValidationDetails so the
                    //  delete on this line can remove it.
                    if(!locOrig_SKS_EFT_DataValidationRule)
                    {
                        select firstonly recid from locOrig_SKS_EFT_DataValidationDetails
                        where locOrig_SKS_EFT_DataValidationDetails.DataRuleId == locSKS_EFT_DataValidationDetails.DataRuleId
                            && locOrig_SKS_EFT_DataValidationDetails.SKS_EB_ValidationFilter == locSKS_EFT_DataValidationDetails.SKS_EB_ValidationFilter
                            && locOrig_SKS_EFT_DataValidationDetails.Value == locSKS_EFT_DataValidationDetails.Value;
                    }

                    
                    if((action == 'A' || action == '' || action == 'R') && !locOrig_SKS_EFT_DataValidationDetails)
                    {
                        locSKS_EFT_DataValidationDetails.doInsert();
                        totaladds++;
                    }
                    else if(action == 'R')
                    {
                        if(!locOrig_SKS_EFT_DataValidationRule.UserUpdated)
                        {
                            delete_from locOrig_SKS_EFT_DataValidationDetails
                                where locOrig_SKS_EFT_DataValidationDetails.DataRuleId == locSKS_EFT_DataValidationDetails.DataRuleId
                                    && locOrig_SKS_EFT_DataValidationDetails.SKS_EB_ValidationFilter == locSKS_EFT_DataValidationDetails.SKS_EB_ValidationFilter
                                    && locOrig_SKS_EFT_DataValidationDetails.Value == locSKS_EFT_DataValidationDetails.Value;
                            locSKS_EFT_DataValidationDetails.doInsert();
                            totalupdates++;
                        }
                    }
                    else if(action == 'D' && locOrig_SKS_EFT_DataValidationDetails && !locOrig_SKS_EFT_DataValidationRule.UserUpdated)
                    {
                        delete_from locOrig_SKS_EFT_DataValidationDetails
                                where locOrig_SKS_EFT_DataValidationDetails.DataRuleId == locSKS_EFT_DataValidationDetails.DataRuleId
                                    && locOrig_SKS_EFT_DataValidationDetails.SKS_EB_ValidationFilter == locSKS_EFT_DataValidationDetails.SKS_EB_ValidationFilter
                                    && locOrig_SKS_EFT_DataValidationDetails.Value == locSKS_EFT_DataValidationDetails.Value;
                        totaldeletes++;
                    }
                }
                //  ^^^ 12572 SKS_EFT_DataValidationDetails ^^^


                else if (hdrOrdet == 'N')
                {
                    sksNotes.initValue();
                    sksNotes.FormatId = conpeek(line, 2);
                    sksNotes.PaymSpec = conpeek(line, 3);
                    sksNotes.Note = strReplace(conpeek(line, 4), ':', '\r\n');  // Replace : with CR/LF so note has better formatting
                    action = subStr(conpeek(line, 5), 1, 1);  //Add, Replace, or Delete
    
                    select firstonly * from orig_sksNotes where orig_sksNotes.FormatId == sksNotes.FormatId
                        && orig_sksNotes.PaymSpec == sksNotes.PaymSpec;
    
                    if(action == 'A' || action == '')
                    {
                        if(!orig_sksNotes) //not found so add it
                        {
                            sksNotes.doInsert();
                            totaladds++;
                        }
                    }
                    else if (action == 'R')
                    {
                        if(!orig_sksNotes) //nothing to replace so add it
                        {
                            sksNotes.doInsert();
                            totaladds++;
                        }
                        else
                        {
                            delete_from orig_sksNotes where orig_sksNotes.FormatId == sksLookups.FormatId
                                && orig_sksNotes.PaymSpec == sksNotes.PaymSpec;
                            sksNotes.doInsert();
                            totalupdates++;
                        }
                    }
                    else if(action == 'D')
                    {
                        if(orig_sksNotes) //if the record was found then delete it
                        {
                            delete_from orig_sksNotes where orig_sksNotes.FormatId == sksLookups.FormatId
                                && orig_sksNotes.PaymSpec == sksNotes.PaymSpec;
                            totaldeletes++;
                        }
                    }
                }
                //SKS_FDD_9785
                //SKS_EFT_BRValidationAltFieldMapping
                else if(hdrOrdet == 'M')
                {
                    fieldMapping.initValue();
                    //fieldMapping.MappingType = conPeek(line, 2); // SKS_FDD_10590 
                    fieldMapping.SourceContext = conPeek(line, 2);
                    fieldMapping.SourceField = conPeek(line, 3);
                    fieldMapping.MappingSourceContext = conPeek(line, 4);
                    fieldMapping.MappingField = conPeek(line, 5);
                    fieldMapping.MappingFieldLocation = conPeek(line, 6);

                    action = subStr(conpeek(line, 8), 1, 1);  //Add, Replace, or Delete

                    select firstonly * from orig_fieldMapping
                        where orig_fieldMapping.SourceContext == fieldMapping.SourceContext &&
                        orig_fieldMapping.SourceField == fieldMapping.SourceField;

                    if(action == 'A' || action == '')
                    {
                        if(!orig_fieldMapping) //not found so add it
                        {
                            fieldMapping.doInsert();
                            totaladds++;
                        }
                    }
                    else if(action == 'R')
                    {
                        if(!orig_fieldMapping) //not found so add it
                        {
                            fieldMapping.doInsert();
                            totaladds++;
                        }
                        else
                        {
                            delete_from orig_fieldMapping
                                where orig_fieldMapping.SourceContext == fieldMapping.SourceContext &&
                                orig_fieldMapping.SourceField == fieldMapping.SourceField; //FDD-10590 // SKS_Bug_11905
                            fieldMapping.doInsert();
                            totalupdates++;
                        }
                    }
                    else if(action == 'D')
                    {
                        delete_from orig_fieldMapping
                                where orig_fieldMapping.SourceContext == fieldMapping.SourceContext &&
                                orig_fieldMapping.SourceField == fieldMapping.SourceField;
                        totaldeletes++;
                    }
                }
                //SKS_EFT_BRValidationAltFieldMapping end                             
                //SKS_FDD_9785
                
            }
        }
        ttscommit;
    
        //report total adds, updates, and deletes
        info("@SYS54695" + ' ' + "@SYS108583" + ' :' + int2str(totaladds));
        info("@SYS54695" + ' ' + "@SYS439" + ' :' + int2str(totalupdates));
        info("@SYS54695" + ' ' + "@SYS13435" + ' :'  + int2str(totaldeletes));
    }

]]></Source>
			</Method>
			<Method>
				<Name>ImportEFTEDI820</Name>
				<Source><![CDATA[
    void ImportEFTEDI820()
    {
        SKS_EFT_EDI820  sks_eft_edi820, tmpsks_eft_edi820;
        SKS_EFT_EDI820_Group  sks_eft_edi820_group,tmpsks_eft_edi820_group;
        SKS_EFT_EDI820_Detail sks_eft_edi820_detail,tmpsks_eft_edi820_detail;
        SKS_EFT_FileFormatPaymSpec  tmpFileFormatPaymSpec;
        SKS_EFT_FileFormat   tmpFileFormat;
        CommaStreamIo inFile;
        Filename    filename;
        Container   line;
        int totaladds;
        str hdrgrpdet;
        //int i = 0;
        
        SKS_FileUploadDialogForm fileUploadDialog = new SKS_FileUploadDialogForm();
        fileUploadDialog.parmFileDialogCaptionForForm("@SKS2124");
        fileUploadDialog.parmFileTypesAccepted('.csv');
        fileUploadDialog.parmStrategyClassName(classstr(SKS_PP_CSVFileTemporaryStorageStrategy));
        FileUploadTemporaryStorageResult fileUploadResult = fileUploadDialog.getFileUploadResult();
        if (fileUploadResult != null && fileUploadResult.getUploadStatus())
        {
            filename = fileUploadResult.getDownloadUrl();
            System.IO.Stream readStream = fileUploadResult.openResult(); // This is used to upload formats so it doesn't need to use FileHub
            inFile = CommaStreamIo::constructForRead(readStream);
        }
        else
        {
            return;
        }

        if (!inFile || infile.status() != IO_Status::Ok )
        {
            //file could not be opened
            throw error (strfmt("@SYS19312", filename));
        }

        ttsbegin;
    
        infile.inRecordDelimiter('\r\n');
        infile.inFieldDelimiter(',');
    
        totaladds = 0;
    
    
        //Checking status of last operation..
        while (infile.status() == IO_status::Ok)
        {
            line = infile.read();
            if (line)
            {
                hdrgrpdet = conpeek(line, 1);
                if (hdrgrpdet == 'E') //Header
                {
                    sks_eft_edi820.initValue();
                    sks_eft_edi820.CompanyName = conpeek(line, 2); //Company Name
                    sks_eft_edi820.DataElementSeparator = conpeek(line, 3); //Data Element Separator
                    sks_eft_edi820.Description = conpeek(line, 4); //Description
                    sks_eft_edi820.FormatId = conpeek(line, 5);  //Foramt ID
                    sks_eft_edi820.PaymSpec = conpeek(line, 6);  //Pament Specification
                    sks_eft_edi820.SegmentTerminator = conpeek(line, 7);  // Segment Terminator
                    sks_eft_edi820.URLReference = conpeek(line, 8);   //URL Reference
    
                    if(sks_eft_edi820.PaymSpec)
                    {
                        //validate the format ID and Payment Spec
                        select firstOnly tmpFileFormatPaymSpec where tmpFileFormatPaymSpec.FormatId == sks_eft_edi820.FormatId
                            && tmpFileFormatPaymSpec.PaymSpec == sks_eft_edi820.PaymSpec;
                    }
                    else
                    {
                        //validate the format ID and Payment Spec
                        select firstOnly tmpFileFormat where tmpFileFormat.FormatId == sks_eft_edi820.FormatId;
    
                    }
    
                    if(tmpFileFormatPaymSpec || tmpFileFormat)
                    {
                        select firstonly tmpsks_eft_edi820 where tmpsks_eft_edi820.formatid == sks_eft_edi820.FormatId
                               && tmpsks_eft_edi820.CompanyName == sks_eft_edi820.CompanyName
                               && tmpsks_eft_edi820.PaymSpec == sks_eft_edi820.PaymSpec;
                        if(!tmpsks_eft_edi820)
                        {
                            sks_eft_edi820.insert();
                            totaladds++;
                        }
                        else
                        {
                            info("@SKS2120");
                            break;
                        }
                    }
                    else
                    {
                        Error(strFmt("@SKS2117", sks_eft_edi820.PaymSpec,sks_eft_edi820.FormatId));
                        ttsAbort;
                        inFile = null;
                        return;
    
                    }
    
                }
                else if (hdrgrpdet == 'G') //Group
                {
                    sks_eft_edi820_group.initValue();
                    sks_eft_edi820_group.CompanyName = conpeek(line, 2); //Company Name
                    sks_eft_edi820_group.FormatId = conpeek(line, 3); //Format ID
                    sks_eft_edi820_group.PaymSpec = conpeek(line, 4);  //Payment Specification
                    sks_eft_edi820_group.Segment = conpeek(line, 5);  // Segment
                    sks_eft_edi820_group.SegmentOccurrence = conpeek(line, 6);   //Segment Occurrence
    
    
                    //check if header exists on three keys.
                    select firstOnly sks_eft_edi820 where sks_eft_edi820.FormatId == sks_eft_edi820_group.FormatId
                       && sks_eft_edi820.PaymSpec == sks_eft_edi820_group.PaymSpec && sks_eft_edi820.CompanyName == sks_eft_edi820_group.CompanyName;
    
                    if(sks_eft_edi820)
                    {
    
                        select firstonly tmpsks_eft_edi820_group where tmpsks_eft_edi820_group.formatid == sks_eft_edi820_group.FormatId
                               && tmpsks_eft_edi820_group.CompanyName == sks_eft_edi820_group.CompanyName
                               && tmpsks_eft_edi820_group.PaymSpec == sks_eft_edi820_group.PaymSpec
                               && tmpsks_eft_edi820_group.Segment == sks_eft_edi820_group.Segment
                               && tmpsks_eft_edi820_group.SegmentOccurrence == sks_eft_edi820_group.SegmentOccurrence;
                        if(!tmpsks_eft_edi820_group)
                        {
                            sks_eft_edi820_group.insert();
                            totaladds++;
                        }
                    }
                    else
                    {
                        Info(strFmt("@SKS2118", sks_eft_edi820_group.PaymSpec,sks_eft_edi820_group.FormatId, sks_eft_edi820_group.CompanyName));
                        ttsAbort;
                        inFile = null;
                        return;
                    }
    
                }
                else if (hdrgrpdet == 'F') //Detail
                {
                    sks_eft_edi820_detail.initValue();
                    sks_eft_edi820_detail.CompanyName = conpeek(line, 2); //Company Name
                    sks_eft_edi820_detail.FieldDescr = conpeek(line, 3); //Field Description
                    sks_eft_edi820_detail.FieldNbr = conpeek(line, 4); //Field Number
                    sks_eft_edi820_detail.FormatId = conpeek(line, 5);  //Foramt ID
                    sks_eft_edi820_detail.Id = conpeek(line, 6);  //ID
                    sks_eft_edi820_detail.MaxLength = conpeek(line, 7);  // Maximum length
                    sks_eft_edi820_detail.PadChar = conpeek(line, 8);   //Pad Characters
                    sks_eft_edi820_detail.PadField = conpeek(line, 9);  //Pad field
                    sks_eft_edi820_detail.PadSide = conpeek(line, 10);   //Pad
                    sks_eft_edi820_detail.PaymSpec = conpeek(line, 11);   //Payment Specification
                    sks_eft_edi820_detail.Segment = conpeek(line, 12);   //Segment
                    sks_eft_edi820_detail.SegmentOccurrence = conpeek(line, 13);   //Segment Occurrence
                    sks_eft_edi820_detail.SelectData = conpeek(line, 14);   //Select Data
                    sks_eft_edi820_detail.Value = conpeek(line, 15);   //Value
    
    
                    //Check if a group exists.   Based off the five keys.
                    select firstonly sks_eft_edi820_group where sks_eft_edi820_group.CompanyName == sks_eft_edi820_detail.CompanyName
                             && sks_eft_edi820_group.FormatId == sks_eft_edi820_detail.FormatId
                             && sks_eft_edi820_group.PaymSpec == sks_eft_edi820_detail.PaymSpec
                             && sks_eft_edi820_group.Segment == sks_eft_edi820_detail.Segment
                             && sks_eft_edi820_group.SegmentOccurrence == sks_eft_edi820_detail.SegmentOccurrence;
    
                    if(sks_eft_edi820_group)
                    {
    
                        //select from sks_eft_edi820 record if it already exists
                        select firstonly tmpsks_eft_edi820_detail where tmpsks_eft_edi820_detail.formatid == sks_eft_edi820_detail.FormatId
                            && tmpsks_eft_edi820_detail.CompanyName == sks_eft_edi820_detail.CompanyName
                            && tmpsks_eft_edi820_detail.PaymSpec == sks_eft_edi820_detail.PaymSpec
                            && tmpsks_eft_edi820_detail.Segment == sks_eft_edi820_detail.Segment
                            && tmpsks_eft_edi820_detail.SegmentOccurrence == sks_eft_edi820_detail.SegmentOccurrence
                            && tmpsks_eft_edi820_detail.FieldNbr == sks_eft_edi820_detail.FieldNbr
                            && tmpsks_eft_edi820_detail.Id == sks_eft_edi820_detail.id;
    
                        if(!tmpsks_eft_edi820_group)
                        {
                            sks_eft_edi820_detail.insert();
                            totaladds++;
                        }
    
                    }
                    else
                    {
                        Info(strFmt("@SKS2119", sks_eft_edi820_detail.PaymSpec,sks_eft_edi820_detail.FormatId,sks_eft_edi820_detail.CompanyName, sks_eft_edi820_detail.Segment,
                                              sks_eft_edi820_detail.SegmentOccurrence));
                        ttsAbort;
                        inFile = null;
                        return;
                    }
                }
            }
        }
        ttscommit;
        inFile = null;
        //report total adds
        info("@SYS54695" + ' ' + "@SYS108583" + ' :' + int2str(totaladds));
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>VendPaymLookupAddition</Name>
				<Source><![CDATA[
    private void VendPaymLookupAddition(SKS_EFT_FileFormatPaymSpecFields sksDetFields, SKS_EFT_FormatId _FormatID, PaymSpec _PaymSpec)
    {
        SKS_EFT_VendorPaym          lSKS_EFT_VendorPaym;
        SKS_EFT_VendorPaymLookup    lSKS_EFT_VendorPaymLookup;
        VendPaymModeTable           lVendPaymModeTable;

        while
            select RecId
            from lSKS_EFT_VendorPaym
            join lVendPaymModeTable
            where lSKS_EFT_VendorPaym.PaymMode == lVendPaymModeTable.PaymMode
                    && lSKS_EFT_VendorPaym.PaymSpec == _PaymSpec
                    && lVendPaymModeTable.SKS_EFT_FormatId == _FormatID
        {
            select count(RecId)
            from lSKS_EFT_VendorPaymLookup
            where lSKS_EFT_VendorPaymLookup.vendorpaymrecid == lSKS_EFT_VendorPaym.RecId
                    && lSKS_EFT_VendorPaymLookup.FileFormatPaymSpecFieldsRecId == sksDetFields.RecId;
    
            if(lSKS_EFT_VendorPaymLookup.RecId == 0)
            {
                lSKS_EFT_VendorPaymLookup.CodeLookupValuesRecId = sksDetFields.DefaultCodeLookupValuesRecId;
                lSKS_EFT_VendorPaymLookup.FileFormatPaymSpecFieldsRecId = sksDetFields.RecId;
                lSKS_EFT_VendorPaymLookup.VendorPaymRecId = lSKS_EFT_VendorPaym.RecId;
                lSKS_EFT_VendorPaymLookup.FixedValue = sksDetFields.FixedValue;
                lSKS_EFT_VendorPaymLookup.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>bankPaymookupAddition</Name>
				<Source><![CDATA[
    private void bankPaymookupAddition(SKS_EFT_FileFormatPaymSpecFields sksDetFields, SKS_EFT_FormatId _FormatID, PaymSpec _PaymSpec)
    {
        SKS_EFT_BanktoBankPaym          lSKS_EFT_BanktoBankPaym;
        SKS_EFT_BankPaymLookup    lSKS_EFT_BankPaymLookup;
        SKS_BTB_PaymModeTable           lSKS_BTB_PaymModeTable;

        while
            select RecId
            from lSKS_EFT_BanktoBankPaym
            join lSKS_BTB_PaymModeTable
            where lSKS_EFT_BanktoBankPaym.PaymMode == lSKS_BTB_PaymModeTable.PaymMode
                    && lSKS_EFT_BanktoBankPaym.PaymSpec == _PaymSpec
                    && lSKS_BTB_PaymModeTable.FormatId == _FormatID
        {
            select count(RecId)
            from lSKS_EFT_BankPaymLookup
            where lSKS_EFT_BankPaymLookup.bankpaymrecid == lSKS_EFT_BanktoBankPaym.RecId
                    && lSKS_EFT_BankPaymLookup.FileFormatPaymSpecFieldsRecId == sksDetFields.RecId;
    
            if(lSKS_EFT_BankPaymLookup.RecId == 0)
            {
                lSKS_EFT_BankPaymLookup.CodeLookupValuesRecId = sksDetFields.DefaultCodeLookupValuesRecId;
                lSKS_EFT_BankPaymLookup.FileFormatPaymSpecFieldsRecId = sksDetFields.RecId;
                lSKS_EFT_BankPaymLookup.BankPaymRecId = lSKS_EFT_BanktoBankPaym.RecId;
                lSKS_EFT_BankPaymLookup.FixedValue = sksDetFields.FixedValue;
                lSKS_EFT_BankPaymLookup.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>CustReimbPaymLookupAddition</Name>
				<Source><![CDATA[
    private void CustReimbPaymLookupAddition(SKS_EFT_FileFormatPaymSpecFields sksDetFields, SKS_EFT_FormatId _FormatID, PaymSpec _PaymSpec)
    {
        SKS_EFT_CustReimbursementPaym          lSKS_EFT_CustReimbursementPaym;
        SKS_EFT_CustReimbursementPaymLookup    lSKS_EFT_CustReimbursementPaymLookup;
        CustPaymModeTable           lCustPaymModeTable;

        while
            select RecId
            from lSKS_EFT_CustReimbursementPaym
            join lCustPaymModeTable
            where lSKS_EFT_CustReimbursementPaym.PaymMode == lCustPaymModeTable.PaymMode
                    && lSKS_EFT_CustReimbursementPaym.PaymSpec == _PaymSpec
                    && lCustPaymModeTable.SKS_CNP_FormatId == _FormatID
        {
            select count(RecId)
            from lSKS_EFT_CustReimbursementPaymLookup
            where lSKS_EFT_CustReimbursementPaymLookup.CustReimbPaymRecId == lSKS_EFT_CustReimbursementPaym.RecId
                    && lSKS_EFT_CustReimbursementPaymLookup.FileFormatPaymSpecFieldsRecId == sksDetFields.RecId;
    
            if(lSKS_EFT_CustReimbursementPaymLookup.RecId == 0)
            {
                lSKS_EFT_CustReimbursementPaymLookup.CodeLookupValuesRecId = sksDetFields.DefaultCodeLookupValuesRecId;
                lSKS_EFT_CustReimbursementPaymLookup.FileFormatPaymSpecFieldsRecId = sksDetFields.RecId;
                lSKS_EFT_CustReimbursementPaymLookup.CustReimbPaymRecId = lSKS_EFT_CustReimbursementPaym.RecId;
                lSKS_EFT_CustReimbursementPaymLookup.FixedValue = sksDetFields.FixedValue;
                lSKS_EFT_CustReimbursementPaymLookup.insert();
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>