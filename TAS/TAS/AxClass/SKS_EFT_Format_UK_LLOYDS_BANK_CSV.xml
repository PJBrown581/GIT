<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_UK_LLOYDS_BANK_CSV</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_UK_LLOYDS_BANK_CSV extends SKS_EFT_Format
/// </summary>
class SKS_EFT_Format_UK_LLOYDS_BANK_CSV extends SKS_EFT_Format
{
    #define.FormatVersion('20221111')

    #define.FPS('FPS')
    #define.CHAPS_IBAN('CHAPS-IBAN')
    #define.CHAPS('CHAPS')
    #define.BACS('BACS')
    #define.INTL_IBAN('INTL-IBAN')
    #define.INTL_BIC('INTL-BIC')
    #define.INTL_CC('INTL-CC')
    #define.SEPA_URG('SEPA-URG')
    #define.SEPA_STD('SEPA-STD')
    #define.IAT('IAT')

    #define.Separator(',')
    #define.DoubleQuote('"')
    VendBankAccount mVendBankAccount;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    protected void formatStructure()
    {
        //Header Record
        this.rec_Header();

        while(mSKS_EFT_FileDetail)
        {
            //  getSKS_EFT_FileFormatPaymSpec
            this.getSKS_EFT_FileFormatPaymSpec();

            mVendBankAccount = VendBankAccount::findByCompany(mSKS_EFT_FileDetail.AccountCompany, mSKS_EFT_FileDetail.AccountNum, mSKS_EFT_FileDetail.DepBankAccountId);

            //  Detail Record
            switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
            {
                case #FPS:
                    this.rec_Detail_FPS();
                    break;
                case #CHAPS_IBAN:
                case #CHAPS:
                    this.rec_Detail_CHAPS();
                    break;
                case #BACS:
                    this.rec_Detail_BACS();
                    break;
                case #INTL_IBAN:
                case #INTL_BIC:
                case #INTL_CC:
                    this.rec_Detail_INTL();
                    break;
                case #SEPA_URG: 
                    this.rec_Detail_URGP();
                    break;                                       
                case #SEPA_STD:
                    this.rec_Detail_NONURGP();
                    break;
                case #IAT:
                    this.rec_Detail_IAT();
                    break;
            }
            next mSKS_EFT_FileDetail;
        }

        //Tailer Record
        this.rec_Trailer();
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Header</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_Header
    /// </summary>
    /// <returns>true</returns>
    public boolean rec_Header()
    {
        //---------------------------------------------------------------------------------
        //Nbr   Description
        //1     Fixed value H
        //2     Current Date - YYYYMMDD format
        //3     Sequence Number        
        //---------------------------------------------------------------------------------
        str value;
        System.Text.StringBuilder sb = new System.Text.StringBuilder();


        //1     Fixed value H
        sb.Append(this.wrapField('H', 1));

        //2     Current Date - YYYYMMDD format
        sb.Append(this.wrapField(SKS_PP_StringFormats::strDateYYYYMMDD(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()), DateSeparator::None), 8));

        //3     Sequence Number
        value = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('NextSequenceNumber', mSKS_EFT_FileDetail.RecId)); 
        sb.Append(this.wrapField(value, 10, false));

        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Detail_FPS</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_Detail_FPS
    /// </summary>
    /// <returns>true</returns>
    public boolean rec_Detail_FPS()
    {
        //---------------------------------------------------------------------------------
        //Nbr   Description
        //1     Fixed value
        //2     Value Date
        //3     Credit Amount
        //4     Debit Account Reference
        //5     Debit Account Number
        //6     Beneficiary Name
        //7     Beneficiary Account Number
        //8     Beneficiary Sort Code
        //9     Beneficiary Reference
        //10    Additional Reference
        //11    End to End Reference
        //12    Blank
        //---------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();


        //1     Fixed value           
        sb.Append(this.wrapField('FPS', 3));

        //2     Value Date
        sb.Append(this.wrapField(SKS_PP_StringFormats::strDateYYYYMMDD(mSKS_EFT_FileDetail.PaymentTransDate, DateSeparator::None), 8));

        //3     Credit Amount
        sb.Append(this.wrapField(num2str(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1, 0, 2, 1, 0), 18));

        //4     Debit Account Reference        
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.AccountNum, 18));

        //5     Debit Account Number
        sb.Append(this.wrapField(subStr(mSKS_EFT_FileDetail.BankBankSortCode, 1, 6) + '-' + subStr(mSKS_EFT_FileDetail.BankBankAcct, 1, 8), 15));

        //6     Beneficiary Name
        sb.Append(this.wrapField(this.CharacterReplacement(mVendBankAccount.Name), 35));

        //7     Beneficiary Account Number
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.DepBankAcct, 8));

        //8     Beneficiary Sort Code
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.DepBankTransit, 6));

        //9     Beneficiary Reference
        sb.Append(this.wrapField(this.CharacterReplacement(subStr(this.getInvoiceNbrs(), 1, 18)), 18));

        //10    Additional Reference
        if(this.getJournalNotes())
        {
            sb.Append(this.wrapField(this.CharacterReplacement(subStr(this.getJournalNotes(), 1, 140)), 140));
        }
        else
        {
            sb.Append(this.wrapField());
        }       

        //11    End to End Reference
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.PaymId, 31));

        //12    Blank
        sb.Append(this.wrapField('', 0, false));

        this.fileWrite(sb.ToString());
        return true;

    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Detail_BACS</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_Detail_BACS
    /// </summary>
    /// <returns>true</returns>
    public boolean rec_Detail_BACS()
    {
        //---------------------------------------------------------------------------------
        //Nbr   Description
        //1     Fixed value
        //2     Value Date
        //3     Payment Amount
        //4     Debit Account Reference
        //5     Debit Account Number
        //6     Beneficiary Name
        //7     Beneficiary Account Number
        //8     Beneficiary Sort Code
        //9     Beneficiary Reference
        //---------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();


        //1     Fixed value
        sb.Append(this.wrapField('BACS', 4));

        //2     Value Date
        sb.Append(this.wrapField(SKS_PP_StringFormats::strDateYYYYMMDD(mSKS_EFT_FileDetail.PaymentTransDate, DateSeparator::None), 8));

        //3     Payment Amount
        sb.Append(this.wrapField(num2str(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1, 0, 2, 1, 0), 18));

        //4     Debit Account Reference
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.AccountNum, 16));

        //5     Debit Account Number
        sb.Append(this.wrapField(subStr(mSKS_EFT_FileDetail.BankBankSortCode, 1, 6) + '-' + subStr(mSKS_EFT_FileDetail.BankBankAcct, 1, 8), 15));

        //6     Beneficiary Name
        sb.Append(this.wrapField(this.CharacterReplacement(mVendBankAccount.Name), 18));

        //7     Beneficiary Account Number
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.DepBankAcct, 8));

        //8     Beneficiary Sort Code
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.DepBankTransit, 6));

        //9     Beneficiary Reference
        sb.Append(this.wrapField(this.CharacterReplacement(subStr(mSKS_EFT_FileDetail.PaymId, 1, 18)), 18, false));
        
        this.fileWrite(sb.ToString());
        return true;

    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Detail_CHAPS</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_Detail_CHAPS
    /// </summary>
    /// <returns>true</returns>
    public boolean rec_Detail_CHAPS()
    {
        //---------------------------------------------------------------------------------
        //Nbr   Description
        //1     Fixed value
        //2     Value Date
        //3     Credit Amount
        //4     Debit Account Reference
        //5     Debit Account Number
        //6     Beneficiary Name
        //7     UK Beneficiary IBAN
        //8     Beneficiary Address Line 1
        //9     Beneficiary Address Line 2
        //10    Blank
        //11    Beneficiary Address Country
        //12    Beneficiary Bank Name
        //13    Beneficiary Bank Code Type
        //14    Beneficiary Bank Code
        //15    Beneficiary Bank Address 1
        //16    Beneficiary Bank Address 2
        //17    Beneficiary Bank Address 3
        //18    Beneficiary Bank Country
        //19    Beneficiary Reference Line 1
        //20    Beneficiary Reference Line 2
        //21    Beneficiary Reference Line 3
        //22    Beneficiary Reference Line 4
        //23    Blank
        //24    Blank
        //25    Blank
        //26    Originator Name
        //27    Originator Address 1
        //28    Originator Address 2
        //29    Originator Address 3
        //30    Blank
        //31    Originator Country
        //32    Beneficiary Account Type        
        //---------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();

        //1     Fixed value        
        sb.Append(this.wrapField('CHAPS', 5));
                
        //2     Value Date
        sb.Append(this.wrapField(SKS_PP_StringFormats::strDateYYYYMMDD(mSKS_EFT_FileDetail.PaymentTransDate, DateSeparator::None), 8));

        //3     Credit Amount
        sb.Append(this.wrapField(num2str(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1, 0, 2, 1, 0), 18));

        //4     Debit Account Reference
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.AccountNum, 16));

        //5     Debit Account Number
        sb.Append(this.wrapField(subStr(mSKS_EFT_FileDetail.BankBankSortCode, 1, 6) + '-' + subStr(mSKS_EFT_FileDetail.BankBankAcct, 1, 8), 15));

        //6     Beneficiary Name
        sb.Append(this.wrapField(this.CharacterReplacement(mVendBankAccount.Name), 35));

        //7    UK Beneficiary IBAN
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CHAPS_IBAN)
        {
            sb.Append(this.wrapField(mSKS_EFT_FileDetail.DepBankIBAN, 22));
        }
        else
        {
            sb.Append(this.wrapField(mSKS_EFT_FileDetail.DepBankAcct, 8));
        }

        //8   Beneficiary Address Line 1
        sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneAddr), 35));

        //9   Beneficiary Address Line 2
        sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneAddr2), 35));

        //10  Blank
        sb.Append(this.wrapField());

        //11  Beneficiary Address Country
        sb.Append(this.wrapField(this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_VendAddress.BeneCountryRegionId), 35));

        //12  Beneficiary Bank Name
        sb.Append(this.wrapField());

        //13  Beneficiary Bank Code Type
        //14  Beneficiary Bank Code
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CHAPS)
        {
            sb.Append(this.wrapField('UK'));
            sb.Append(this.wrapField(mSKS_EFT_FileDetail.DepBankTransit, 6));
        }
        else
        {
            sb.Append(this.wrapField('SWIFT'));
            sb.Append(this.wrapField());
        }

        //15  Beneficiary Bank Address 1
        sb.Append(this.wrapField());

        //16  Beneficiary Bank Address 2
        sb.Append(this.wrapField());

        //17  Beneficiary Bank Address 3
        sb.Append(this.wrapField());

        //18  Beneficiary Bank Country
        sb.Append(this.wrapField(this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_BenBank.BenBankCountryRegionId)));

        //19  Beneficiary Reference Line 1
        sb.Append(this.wrapField(this.CharacterReplacement(subStr(mSKS_EFT_FileDetail.PaymId, 1, 35))));

        //20  Beneficiary Reference Line 2
        sb.Append(this.wrapField(this.CharacterReplacement(subStr(this.getInvoiceNbrs(), 1, 35))));

        //21  Beneficiary Reference Line 3
        sb.Append(this.wrapField(this.CharacterReplacement(subStr(this.getJournalNotes(), 1, 35))));

        //22  Beneficiary Reference Line 4
        sb.Append(this.wrapField(this.CharacterReplacement(subStr(this.getJournalNotes(), 36, 35))));

        //23  Blank
        sb.Append(this.wrapField());

        //24  Blank
        sb.Append(this.wrapField());

        //25  Blank
        sb.Append(this.wrapField());

        //26  Originator Name
        sb.Append(this.wrapField());

        //27  Originator Address 1
        sb.Append(this.wrapField());

        //28  Originator Address 2
        sb.Append(this.wrapField());

        //29  Originator Address 3
        sb.Append(this.wrapField());

        //30  Blank
        sb.Append(this.wrapField());

        //31  Originator Country
        sb.Append(this.wrapField());

        //32  Beneficiary Account Type
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CHAPS)
        {
            sb.Append(this.wrapField('Other', 0, false));
        }
        else
        {
            sb.Append(this.wrapField('IBAN',0, false));
        }

        this.fileWrite(sb.ToString());
        return true;

    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Detail_INTL</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_Detail_INTL
    /// </summary>
    /// <returns>true</returns>
    public boolean rec_Detail_INTL()
    {
        //---------------------------------------------------------------------------------
        //Nbr   Description
        //1     Fixed value
        //2     Value Date
        //3     Credit Amount
        //4     Debit Account Reference
        //5     Payment Currency
        //6     Debit Account Number
        //7     Debit Amount
        //8     Exchange Rate
        //9     FX Contract ID
        //10    Beneficiary Name
        //11    Beneficiary Account Type
        //12    Beneficiary IBAN
        //13    Beneficiary Address Line 1
        //14    Beneficiary Address Line 2
        //15    Blank
        //16    Blank
        //17    Beneficiary Country
        //18    Beneficiary Bank Name
        //19    Beneficiary Bank Code Type
        //20    Beneficiary Bank Code
        //21    Beneficiary Bank Address Line 1
        //22    Beneficiary Bank Address Line 2
        //23    Blank
        //24    Beneficiary Bank Country
        //25    Charging method
        //26    Beneficiary Reference Line 1
        //27    Beneficiary Reference Line 2
        //28    Beneficiary Reference Line 3
        //29    Beneficiary Reference Line 4
        //30    Intermediary Bank Name
        //31    Intermediary Bank Code Type
        //32    Intermediary Bank Code
        //33    Intermediary Bank Address Line 1
        //34    Intermediary Bank Address Line 2
        //35    Blank
        //36    Intermediary Bank Country
        //37    Blank
        //38    FX Instruction
        //39    Blank
        //40    Blank
        //41    Blank
        //42    Blank
        //43    Blank
        //44    Originator Name
        //45    Originator Address Line 1
        //46    Originator Address Line 2
        //47    Blank
        //48    Originator Country
        //---------------------------------------------------------------------------------
        str value;        
        System.Text.StringBuilder sb = new System.Text.StringBuilder();

        //1     Fixed value
        sb.Append(this.wrapField('INT', 3));

        //2     Value Date
        sb.Append(this.wrapField(SKS_PP_StringFormats::strDateYYYYMMDD(mSKS_EFT_FileDetail.PaymentTransDate, DateSeparator::None), 8));

        //3     Credit Amount
        sb.Append(this.wrapField(num2str(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1, 0, 2, 1, 0), 18));

        //4     Debit Account Reference
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.AccountNum, 16));

        //5     Payment Currency 
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.PaymentCurrencyCode, 3));

        //6     Debit Account Number 
        sb.Append(this.wrapField(subStr(mSKS_EFT_FileDetail.BankBankSortCode, 1, 6) + '-' + subStr(mSKS_EFT_FileDetail.BankBankAcct, 1, 8), 15));

        //7     Debit Amount
        if(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur > 0)
        {
            sb.Append(this.wrapField(num2str(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur, 0, 2, 1, 0), 18));
        }
        else
        {
            sb.Append(this.wrapField());
        }

        //8     Exchange Rate        
        sb.Append(this.wrapField());

        //9     FX Contract ID
        sb.Append(this.wrapField());

        //10    Beneficiary Name
        sb.Append(this.wrapField(this.CharacterReplacement(mVendBankAccount.Name), 35));

        //11    Beneficiary Account Type
        //12    Beneficiary IBAN
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #INTL_IBAN:
                sb.Append(this.wrapField('IBAN'));
                sb.Append(this.wrapField(mSKS_EFT_FileDetail.DepBankIBAN, 34));
                break;            
            case #INTL_BIC:
            case #INTL_CC:
                sb.Append(this.wrapField('Other'));
                sb.Append(this.wrapField(mSKS_EFT_FileDetail.DepBankAcct, 34));
                break;
        }        

        //13    Beneficiary Address Line 1
        sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneAddr), 35));

        //14    Beneficiary Address Line 2
        sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneAddr2), 35));

        //15    Blank
        sb.Append(this.wrapField());

        //16    Blank
        sb.Append(this.wrapField());

        //17    Beneficiary Country
        sb.Append(this.wrapField(this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_VendAddress.BeneCountryRegionId), 2));

        //18    Beneficiary Bank Name
        sb.Append(this.wrapField());

        //19    Beneficiary Bank Code Type
        //20    Beneficiary Bank Code
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #INTL_IBAN:                
            case #INTL_BIC:
                if(mSKS_EFT_FileDetail.DepSwiftNo)
                {
                    sb.Append(this.wrapField('SWIFT'));
                    sb.Append(this.wrapField(mSKS_EFT_FileDetail.DepSwiftNo, 11));
                }
                else
                {
                    sb.Append(this.wrapField());
                    sb.Append(this.wrapField());
                }
                break;
            case #INTL_CC:
                if(mSKS_EFT_FileDetail_BenBank.BenBankCountryRegionId == 'USA')
                {
                    sb.Append(this.wrapField('ABA'));
                }
                else
                {
                    sb.Append(this.wrapField( this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_BenBank.BenBankCountryRegionId)));
                }
                sb.Append(this.wrapField(mSKS_EFT_FileDetail.DepBankTransit, 34));
                break;
        }

        //21    Beneficiary Bank Address Line 1
        sb.Append(this.wrapField());

        //22    Beneficiary Bank Address Line 2
        sb.Append(this.wrapField());

        //23    Blank
        sb.Append(this.wrapField());

        //24    Beneficiary Bank Country
        sb.Append(this.wrapField());

        //25    Charging method
        value = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('Charges',mSKS_EFT_FileDetail.RecId));
        sb.Append(this.wrapField(value, 3));

        msks_EFT_FileDetail_PaymentLine = sks_EFT_FileDetail_PaymentLine::find(mSKS_EFT_FileDetail.RecId);
        value = msks_EFT_FileDetail_PaymentLine.BankCentralBankPurposeText;
        
        //26    Beneficiary Reference Line 1
        sb.Append(this.wrapField(this.CharacterReplacement(subStr(value, 1, 35)), 35));

        //27    Beneficiary Reference Line 2
        sb.Append(this.wrapField(this.CharacterReplacement(subStr(mSKS_EFT_FileDetail.PaymId, 1, 35)), 35));

        //28    Beneficiary Reference Line 3
        sb.Append(this.wrapField(this.CharacterReplacement(subStr(this.getInvoiceNbrs(), 1, 35)), 35));

        //29    Beneficiary Reference Line 4
        sb.Append(this.wrapField(this.CharacterReplacement(subStr(this.getJournalNotes(), 1, 35)), 35));

        //30    Intermediary Bank Name
        sb.Append(this.wrapField());

        //31    Intermediary Bank Code Type
        //32    Intermediary Bank Code
        if(mSKS_EFT_FileDetail_Intermediary.IntBankSwift)
        {
            sb.Append(this.wrapField('SWIFT'));
            sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_FileDetail_Intermediary.IntBankSwift), 11));
        }
        else if(mSKS_EFT_FileDetail_Intermediary.IntBankId)
        {
            sb.Append(this.wrapField('ABA'));
            sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_FileDetail_Intermediary.IntBankId), 11));
        }
        else 
        {
            sb.Append(this.wrapField());
            sb.Append(this.wrapField());
        }        

        //33    Intermediary Bank Address Line 1
        sb.Append(this.wrapField());

        //34    Intermediary Bank Address Line 2
        sb.Append(this.wrapField());

        //35    Blank
        sb.Append(this.wrapField());

        //36    Intermediary Bank Country
        sb.Append(this.wrapField());

        //37    Blank
        sb.Append(this.wrapField());

        //38    FX Instruction
        value = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('FXInstruction',mSKS_EFT_FileDetail.RecId));
        sb.Append(this.wrapField(value, 16));

        //39    Blank
        sb.Append(this.wrapField());

        //40    Blank
        sb.Append(this.wrapField());

        //41    Blank
        sb.Append(this.wrapField());

        //42    Blank
        sb.Append(this.wrapField());

        //43    Blank
        sb.Append(this.wrapField());

        //44    Originator Name
        sb.Append(this.wrapField());

        //45    Originator Address Line 1
        sb.Append(this.wrapField());

        //46    Originator Address Line 2
        sb.Append(this.wrapField());

        //47    Blank
        sb.Append(this.wrapField());

        //48    Originator Country
        sb.Append(this.wrapField('', 0, false));

        this.fileWrite(sb.ToString());
        return true;

    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Detail_URGP</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_Detail_URGP
    /// </summary>
    /// <returns>true</returns>
    public boolean rec_Detail_URGP()
    {
        //---------------------------------------------------------------------------------
        //Nbr   Description
        //1     Fixed value
        //2     Value Date
        //3     Credit Amount  
        //4     Debit Account Reference
        //5     Debit Account Number
        //6     Debit Amount
        //7     Exchange Rate
        //8     FX Contract ID
        //9     Beneficiary Name        
        //10    Beneficiary IBAN
        //11    Beneficiary Address Line 1
        //12    Beneficiary Address Line 2
        //13    Blank
        //14    Blank
        //15    Beneficiary Country
        //16    Beneficiary Bank Name        
        //17    Beneficiary Bank Code
        //18    Beneficiary Bank Address Line 1
        //19    Beneficiary Bank Address Line 2
        //20    Blank
        //21    Beneficiary Bank Country        
        //22    Beneficiary Reference Line 1
        //23    Beneficiary Reference Line 2
        //24    Beneficiary Reference Line 3
        //25    Beneficiary Reference Line 4        
        //26    Blank
        //27    Blank
        //28    Blank
        //29    Blank
        //30    Blank
        //31    Blank
        //32    Blank
        //33    Blank
        //34    Blank
        //35    Blank
        //36    Blank
        //37    Blank
        //38    Blank
        //39    Blank
        //40    Originator Name
		//41    Originator Address Line 1
		//42    Originator Address Line 2
		//43    Originator Address Line 3
		//44    Originator Country
		//45    Blank
		//46    Charging Method
        //---------------------------------------------------------------------------------
        str value;
        System.Text.StringBuilder sb = new System.Text.StringBuilder();

        //1     Fixed value        
        sb.Append(this.wrapField('EURURG', 6));

        //2     Value Date
        sb.Append(this.wrapField(SKS_PP_StringFormats::strDateYYYYMMDD(mSKS_EFT_FileDetail.PaymentTransDate, DateSeparator::None), 8));

        //3     Credit Amount
        sb.Append(this.wrapField(num2str(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1, 0, 2, 1, 0), 18));

        //4     Debit Account Reference
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.AccountNum, 16));

        //5     Debit Account Number
        sb.Append(this.wrapField(subStr(mSKS_EFT_FileDetail.BankBankSortCode, 1, 6) + '-' + subStr(mSKS_EFT_FileDetail.BankBankAcct, 1, 8), 15));

        //6     Debit Amount
        if(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur > 0)
        {
            sb.Append(this.wrapField(num2str(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur, 0, 2, 1, 0), 18));
        }
        else
        {
            sb.Append(this.wrapField());
        }
		
        //7     Exchange Rate
        sb.Append(this.wrapField());
		
        //8     FX Contract ID
        sb.Append(this.wrapField());
		
        //9     Beneficiary Name
        sb.Append(this.wrapField(this.CharacterReplacement(mVendBankAccount.Name), 35));
		
        //10    Beneficiary IBAN		
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.DepBankIBAN, 34));
		
        //11    Beneficiary Address Line 1
        sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneAddr), 35));
		
        //12    Beneficiary Address Line 2
        sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneAddr2), 35));
		
        //13    Blank
        sb.Append(this.wrapField());
		
        //14    Blank
        sb.Append(this.wrapField());
		
        //15    Beneficiary Country
        sb.Append(this.wrapField(this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_VendAddress.BeneCountryRegionId), 2));
		
        //16    Beneficiary Bank Name
        sb.Append(this.wrapField());
		
        //17    Beneficiary Bank Code
        sb.Append(this.wrapField());
		
        //18    Beneficiary Bank Address Line 1
        sb.Append(this.wrapField());
		
        //19    Beneficiary Bank Address Line 2
        sb.Append(this.wrapField());
		
        //20    Blank
        sb.Append(this.wrapField());
		
        //21    Beneficiary Bank Country
        sb.Append(this.wrapField(this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_BenBank.BenBankCountryRegionId), 2));

        //22  Beneficiary Reference Line 1
        sb.Append(this.wrapField(this.CharacterReplacement(subStr(mSKS_EFT_FileDetail.PaymId, 1, 35))));

        //23  Beneficiary Reference Line 2
        sb.Append(this.wrapField(this.CharacterReplacement(subStr(this.getInvoiceNbrs(), 1, 35))));

        //24  Beneficiary Reference Line 3
        sb.Append(this.wrapField(this.CharacterReplacement(subStr(this.getJournalNotes(), 1, 35))));

        //25  Beneficiary Reference Line 4
        sb.Append(this.wrapField(this.CharacterReplacement(subStr(this.getJournalNotes(), 36, 35))));
		
        //26    Blank
        sb.Append(this.wrapField());
		
        //27    Blank
        sb.Append(this.wrapField());
		
        //28    Blank
        sb.Append(this.wrapField());
		
        //29    Blank
        sb.Append(this.wrapField());
		
        //30    Blank
        sb.Append(this.wrapField());
		
        //31    Blank
        sb.Append(this.wrapField());
		
        //32    Blank
        sb.Append(this.wrapField());
		
        //33    Blank
        sb.Append(this.wrapField());
		
        //34    Blank
        sb.Append(this.wrapField());
		
        //35    Blank
        sb.Append(this.wrapField());
		
        //36    Blank
        sb.Append(this.wrapField());
		
        //37    Blank
        sb.Append(this.wrapField());
		
        //38    Blank
        sb.Append(this.wrapField());
		
        //39    Blank
        sb.Append(this.wrapField());
		
        //40    Originator Name
        sb.Append(this.wrapField());
		
        //41    Originator Address Line 1
        sb.Append(this.wrapField());
		
        //42    Originator Address Line 2
        sb.Append(this.wrapField());
		
        //43    Originator Address Line 3
        sb.Append(this.wrapField());
		
        //44    Originator Country
        sb.Append(this.wrapField());
		
        //45    Blank
        sb.Append(this.wrapField());
		
        //46    Charging Method
        value = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('Charges',mSKS_EFT_FileDetail.RecId));
        sb.Append(this.wrapField(value, 3, false));
        
        this.fileWrite(sb.ToString());
        return true;

    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Detail_NONURGP</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_Detail_NONURGP
    /// </summary>
    /// <returns>true</returns>
    public boolean rec_Detail_NONURGP()
    {
        //---------------------------------------------------------------------------------
        //Nbr   Description
        //1     Fixed value
        //2     Value Date
        //3     Credit Amount
        //4     Debit Account Reference
        //5     Debit Account Number
        //6     Debit Amount
        //7     Exchange Rate
        //8     FX Contract ID
        //9     Beneficiary Name
        //10    Beneficiary IBAN
        //11    Beneficiary Address Line 1
        //12    Beneficiary Address Line 2
        //13    Beneficiary Address Line 3
        //14    Blank
        //15    Beneficiary Country
        //16    Beneficiary Reference Line 1
        //17    Beneficiary Reference Line 2
        //18    Beneficiary Reference Line 3
        //19    Beneficiary Reference Line 4
        //20    Blank
        //21    Blank
        //22    Blank
        //23    Originator Name
        //24    Originator Address Line 1
        //25    Originator Address Line 2
        //26    Originator Address Line 3
        //27    Blank
        //28    Originator Country
        //---------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();

        //1     Fixed value
        sb.Append(this.wrapField('EURSEPA', 7));

        //2     Value Date
        sb.Append(this.wrapField(SKS_PP_StringFormats::strDateYYYYMMDD(mSKS_EFT_FileDetail.PaymentTransDate, DateSeparator::None), 8));

        //3     Credit Amount
        sb.Append(this.wrapField(num2str(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1, 0, 2, 1, 0), 18));

        //4     Debit Account Reference
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.AccountNum, 16));

        //5     Debit Account Number
        sb.Append(this.wrapField(subStr(mSKS_EFT_FileDetail.BankBankSortCode, 1, 6) + '-' + subStr(mSKS_EFT_FileDetail.BankBankAcct, 1, 8), 15));

        //6     Debit Amount
        if(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur > 0)
        {
            sb.Append(this.wrapField(num2str(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur, 0, 2, 1, 0), 18));
        }
        else
        {
            sb.Append(this.wrapField());
        }
        
        //7     Exchange Rate 
        sb.Append(this.wrapField());

        //8     FX Contract ID
        sb.Append(this.wrapField());

        //9     Beneficiary Name
        sb.Append(this.wrapField(this.CharacterReplacement(mVendBankAccount.Name), 70));

        //10    Beneficiary IBAN
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.DepBankIBAN, 34));

        //11    Beneficiary Address Line 1
        sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneAddr), 35));

        //12    Beneficiary Address Line 2
        sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneAddr2), 35));

        //13    Beneficiary Address Line 3
        sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneCity), 35));

        //14    Blank
        sb.Append(this.wrapField());

        //15    Beneficiary Country
        sb.Append(this.wrapField(this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_VendAddress.BeneCountryRegionId), 2));

        //16    Beneficiary Reference Line 1
        sb.Append(this.wrapField(this.CharacterReplacement(subStr(mSKS_EFT_FileDetail.PaymId, 1, 35))));

        //17    Beneficiary Reference Line 2
        sb.Append(this.wrapField(this.CharacterReplacement(subStr(this.getInvoiceNbrs(), 1, 35))));

        //18  Beneficiary Reference Line 3
        sb.Append(this.wrapField(this.CharacterReplacement(subStr(this.getJournalNotes(), 1, 35))));

        //19  Beneficiary Reference Line 4
        sb.Append(this.wrapField(this.CharacterReplacement(subStr(this.getJournalNotes(), 36, 35))));

        //20    Blank
        sb.Append(this.wrapField());

        //21    Blank
        sb.Append(this.wrapField());

        //22    Blank
        sb.Append(this.wrapField());

        //23    Originator Name
        sb.Append(this.wrapField());

        //24    Originator Address Line 1
        sb.Append(this.wrapField());

        //25    Originator Address Line 2
        sb.Append(this.wrapField());

        //26    Originator Address Line 3
        sb.Append(this.wrapField());

        //27    Blank
        sb.Append(this.wrapField());

        //28    Originator Country
        sb.Append(this.wrapField('', 0, false));

        
        this.fileWrite(sb.ToString());
        return true;

    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Detail_IAT</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_Detail_IAT
    /// </summary>
    /// <returns>true</returns>
    public boolean rec_Detail_IAT()
    {
        //---------------------------------------------------------------------------------
        //Nbr   Description
        //1     Fixed value
        //2     Value Date
        //3     Credit Amount
        //4     Debit Account Reference
        //5     Debit Account Number
        //6     Debit Amount
        //7     Exchange Rate
        //8     FX Contract ID
        //9     Credit Account Number
        //10    Beneficiary Reference Line 1
        //11    Blank
        //12    Blank
        //13    Blank
        //14    Blank
        //---------------------------------------------------------------------------------
        str value;        
        System.Text.StringBuilder sb = new System.Text.StringBuilder();

        //1     Fixed value
        sb.Append(this.wrapField('AT', 2));

        //2     Value Date
        sb.Append(this.wrapField(SKS_PP_StringFormats::strDateYYYYMMDD(mSKS_EFT_FileDetail.EffectiveDate, DateSeparator::None), 8));

        //3     Credit Amount
        sb.Append(this.wrapField(num2str(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1, 0, 2, 1, 0), 18));

        //4     Debit Account Reference
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.AccountNum, 16));

        //5     Debit Account Number
        sb.Append(this.wrapField(subStr(mSKS_EFT_FileDetail.BankBankSortCode, 1, 6) + '-' + subStr(mSKS_EFT_FileDetail.BankBankAcct, 1, 8), 15));

        //6     Debit Amount
        if(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur > 0)
        {
            sb.Append(this.wrapField(num2str(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur, 0, 2, 1, 0), 18));
        }
        else
        {
            sb.Append(this.wrapField());
        }

        //7     Exchange Rate 
        sb.Append(this.wrapField());

        //8     FX Contract ID
        sb.Append(this.wrapField());

        //9     Credit Account Number
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.DepBankAcct, 15));

        //10    Beneficiary Reference Line 1
        msks_EFT_FileDetail_PaymentLine = sks_EFT_FileDetail_PaymentLine::find(mSKS_EFT_FileDetail.RecId);
        value = msks_EFT_FileDetail_PaymentLine.BankCentralBankPurposeCode + ';' + msks_EFT_FileDetail_PaymentLine.BankCentralBankPurposeText;
        sb.Append(this.wrapField(value, 34));

        //11    Blank
        sb.Append(this.wrapField());

        //12    Blank
        sb.Append(this.wrapField());

        //13    Blank
        sb.Append(this.wrapField());

        //14    Blank
        sb.Append(this.wrapField('', 0, false));
        
        this.fileWrite(sb.ToString());
        return true;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getJournalNotes</Name>
				<Source><![CDATA[
    private str getJournalNotes()
    {
        LedgerJournalTrans ledgerJournalTrans;

        select crossCompany PaymentNotes from ledgerJournalTrans where
        ledgerJournalTrans.RecId == mSKS_EFT_FileDetail.PaymentLineRecId;

        return this.CharacterReplacement(ledgerJournalTrans.PaymentNotes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceNbrs</Name>
				<Source><![CDATA[
    protected str getInvoiceNbrs()
    {
        SKS_EFT_FileDetail invSKS_EFT_FileDetail;
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        str invString;
    
        select InvoiceNumber from invSKS_EFT_FileDetail where invSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId;
    
        while(invSKS_EFT_FileDetail)
        {
            if(invSKS_EFT_FileDetail.InvoiceNumber == '')
            {
                // If no invoice number, go to next record
                next invSKS_EFT_FileDetail;
                continue;
            }
            sb.Append(invSKS_EFT_FileDetail.InvoiceNumber);
    
            next invSKS_EFT_FileDetail;
    
            if(invSKS_EFT_FileDetail)
            {
                sb.Append(';');
            }
        }
    
        invString = this.CharacterReplacement(sb.ToString());
        return invString;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Trailer</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_Trailer
    /// </summary>
    /// <returns>true</returns>
    public boolean rec_Trailer()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();

        //1     Fixed value H
        sb.Append(this.wrapField('T', 1, false));

        this.fileWrite(sb.ToString());
        return true;

    }

]]></Source>
			</Method>
			<Method>
				<Name>wrapField</Name>
				<Source><![CDATA[
    private str wrapField(str _field = '', int _fieldLength = 0,  boolean _addSeparator = true)
    {
        str text;

        if(_addSeparator)
        {
            if(_field != '' && strContains(_field, ',') && _fieldLength > 0)
            {
                text = #DoubleQuote + subStr(_field, 1, _fieldLength) + #DoubleQuote + #Separator;
            }
            else
            {
                text = _field + #Separator;
            }
        }
        else
        {
            text = _field;
        }

        return text;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectPaymentRecords</Name>
				<Source><![CDATA[
    [SuppressBPWarning('BPErrorSelectUsingFirstOnly', 'The buffer is used in next statement or in a datasource query loop.')]
    protected void selectPaymentRecords()
    {
        //------------------------------------------------------------------------------------------------------
        // Standard payment selction
        // Override if different selection is need for a format
        //------------------------------------------------------------------------------------------------------
    
        //Order by clause must match the clause in the SKS_EFT_Processing.SumByPayment
        select * from mSKS_EFT_FileDetail
            join mSKS_EFT_FileDetail_VendAddress
            join mSKS_EFT_FileDetail_BenBank
            join mSKS_EFT_FileDetail_Intermediary
              order by mSKS_EFT_FileDetail.PaymentCompany, 
                   mSKS_EFT_FileDetail.RecordSection,
                   mSKS_EFT_FileDetail.PaymMode,
                   mSKS_EFT_FileDetail.BankAccountId,
                   mSKS_EFT_FileDetail.PaymentCurrencyCode,
                   mSKS_EFT_FileDetail.PaymSpec,
                   mSKS_EFT_FileDetail.EffectiveDate,
                   mSKS_EFT_FileDetail.DepCountryRegionId,
                   mSKS_EFT_FileDetail.RecordType,
                   mSKS_EFT_FileDetail.AccountNum,
                   mSKS_EFT_FileDetail.PaymentReference,
                   mSKS_EFT_FileDetail.RecId
          where mSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                mSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments    &&
                mSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary  &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_VendAddress.RefRecId   &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_BenBank.RefRecId       &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_Intermediary.RefRecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>