<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_CN_BNP_CSV</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_CN_BNP_CSV extends SKS_EFT_Format
/// </summary>
class SKS_EFT_Format_CN_BNP_CSV extends SKS_EFT_Format
{
    #define.FormatVersion('20220204')
    #define.Separator(',')
    #define.NORM('NORM')
    #define.RMB('RMB')
    #define.RMBU('RMBU')

    BankAccountTable        mBankAccountTable;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wrapField</Name>
				<Source><![CDATA[
    private str wrapField(str _field = '',  boolean _addSeparator = true)
    {
        str text;

        text = _field;

        if(_addSeparator)
        {
            text += #Separator;
        }
        return text;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    protected void formatStructure()
    {
        while(mSKS_EFT_FileDetail)
        {
            // Get SKS_EFT_VendorPaym
            this.getSKS_EFT_VendorPaym();

            // Get SKS_EFT_FileFormatPaymSpec
            this.getSKS_EFT_FileFormatPaymSpec();

            if(mBankAccountTable.AccountID != mSKS_EFT_FileDetail.BankAccountId)
            {
                // Get Bank account
                mBankAccountTable = BankAccountTable::find(mSKS_EFT_FileDetail.BankAccountId);
            }

            //Get Remittance Information
            this.getRemittanceAddress(mSKS_EFT_FileFormatPaymSpec.UseCheckNumber);

            this.rec_Payment();

            next mSKS_EFT_FileDetail;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Payment</Name>
				<Source><![CDATA[
    boolean rec_Payment()
    {
        int     length;
        str     value;
        str     remittanceNameAddress;
        System.Text.StringBuilder sb = new System.Text.StringBuilder();

        //          Ordering Account No
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.BankBankAcct));

        //          Instruction Currency
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.PaymentCurrencyCode));

        //          Instruction Amount
        sb.Append(this.wrapField(num2str(this.getPositiveAmount(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur), 0, 2, 1, 0)));

        //          Ordering Bank SWIFT Code
        sb.Append(this.wrapField(subStr(mBankAccountTable.SWIFTNo, 1, 11)));

        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #NORM)
        {
            length = 35;
        }
        else
        {
            length = 60;
        }
        //          Beneficiary Name
        sb.Append(this.wrapField(subStr(strRem(this.CharacterReplacement(mRemittanceName), #Separator), 1, length)));

        //          Beneficiary/Drawee Address#1
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #NORM && strLen(mRemittanceName) > 35)
        {
            remittanceNameAddress = subStr(mRemittanceName + '.', 35, 70) + mRemittanceAdrLine1;
            sb.Append(this.wrapField(subStr(strRem(this.CharacterReplacement(remittanceNameAddress), #Separator), 1,35)));
        }
        else
        {
            sb.Append(this.wrapField(strRem(this.CharacterReplacement(mRemittanceAdrLine1), #Separator)));
        }

        //          Beneficiary/drawee Account Number
        if(mSKS_EFT_FileDetail.DepBankIBAN != '')
        {
            sb.Append(this.wrapField(mSKS_EFT_FileDetail.DepBankIBAN));
        }
        else
        {
            sb.Append(this.wrapField(mSKS_EFT_FileDetail.DepBankAcct));
        }

        //          Instruction Execution Date
        sb.Append(this.wrapField(date2str(mSKS_EFT_File.EffectiveDate, 123, DateDay::Digits2, DateSeparator::Hyphen, DateMonth::Digits2, DateSeparator::Hyphen, DateYear::Digits4, DateFlags::None)));

        //          Instruction Type
        sb.Append(this.wrapField(mSKS_EFT_FileFormatPaymSpec.TransactionCode));

        //          Beneficiary/Drawee Country
        sb.Append(this.wrapField(mRemittanceCountryRegionId));

        //          Customer Reference
        sb.Append(this.wrapField(subStr(strRem(this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentJournalNum), #Separator), 1, 16)));

        //          Beneficiary/Drawee Bank Party Identifier
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #RMB || mSKS_EFT_FileFormatPaymSpec.TransactionCode == #RMBU)
        {
            sb.Append(this.wrapField(mSKS_EFT_FileDetail.DepBankTransit));
        }
        else
        {
            sb.Append(this.wrapField(''));
        }

        //          Beneficiary/Drawee Bank SWIFT Code
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #NORM)
        {
            sb.Append(this.wrapField(subStr(mSKS_EFT_FileDetail.DepSwiftNo, 1, 12)));
        }
        else
        {
            sb.Append(this.wrapField(''));
        }

        //          Beneficiary/Drawee Reference
        value = SKS_EFT_Format::getValueFromCode('BenRef', mSKS_EFT_FileFormatPaymSpec, mSKS_EFT_VendorPaym.RecId);
        
        if(value == '')
        {
            value = this.getBankPurposeCode();
        }

        sb.Append(this.wrapField(value, false));
        

        this.fileWrite(sb.ToString());

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCodePage</Name>
				<Source><![CDATA[
    protected int getCodePage()
    {
        return 65001;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankPurposeCode</Name>
				<Source><![CDATA[
    private str getBankPurposeCode()
    {
        LedgerJournalTrans      ledgerJournalTrans;
        BankCentralBankPurpose  bankCentralBankPurpose;

        select Name from bankCentralBankPurpose join BankCentralBankPurposeCode from ledgerJournalTrans
            where bankCentralBankPurpose.Code == ledgerJournalTrans.BankCentralBankPurposeCode
               && ledgerJournalTrans.RecId == mSKS_EFT_FileDetail.PaymentLineRecId;

        return this.CharacterReplacement(bankCentralBankPurpose.Name);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>