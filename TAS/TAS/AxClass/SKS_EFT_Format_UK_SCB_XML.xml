<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_UK_SCB_XML</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_UK_SCB_XML extends SKS_EFT_Format_ISO_20022_001001003
/// </summary>
class SKS_EFT_Format_UK_SCB_XML extends SKS_EFT_Format_ISO_20022_001001003_FD
{
    #define.FormatVersion('20230302')
    #define.BT('BT')
    #define.RTGS('RTGS')
    #define.ACH('ACH')
    #define.MWP('MWP')

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_PmtTpInf_InstrPrty</Name>
				<Source><![CDATA[
    protected void node_PmtInf_PmtTpInf_InstrPrty(XmlElement _nodePmftTpInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.7: InstrPrty
        //------------------------------------------------------------------------------------------------------
    
        boolean printInstrPrty;
        str value;

        switch(mSKS_EFT_FileDetail.FormatId)
        {
            case 'UK-SCB-XML-AE':
                switch(mSKS_EFT_FileDetail.TransactionCode)
                {
                    case #BT:
                    case #RTGS:
                        printInstrPrty = true;
                        value = 'HIGH';
                        break;
                }
                break;
            case 'UK-SCB-XML-KE':           //SKS#DevOps21364
                switch(mSKS_EFT_FileDetail.TransactionCode)
                {
                    case #RTGS:
                        printInstrPrty = true;
                        value = 'HIGH';
                        break;
                    case #MWP:
                        printInstrPrty = true;
                        value = 'NORM';
                        break;
                }
                break;
            case 'UK-SCB-XML-UG':           //SKS#DevOps21365
                switch(mSKS_EFT_FileDetail.TransactionCode)
                {
                    case #RTGS:
                        printInstrPrty = true;
                        value = 'HIGH';
                        break;
                    case #MWP:
                        printInstrPrty = true;
                        value = 'NORM';
                        break;
                }
                break;
        }

        if(printInstrPrty)
        {
            //          2.7: InstrPrty
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodePmftTpInf, 'InstrPrty', value);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_PmtTpInf_SvcLvl</Name>
				<Source><![CDATA[
    protected void node_PmtInf_PmtTpInf_SvcLvl(XmlElement _nodePmftTpInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.8: SvcLvl
        //              2.9: Cd
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeSvcLvl;
        boolean printSvcLvl;
        str value;
    
        switch(mSKS_EFT_FileDetail.FormatId)
        {
            case 'UK-SCB-XML-AE':
                switch(mSKS_EFT_FileDetail.TransactionCode)
                {
                    case #BT:
                        printSvcLvl = true;
                        value = 'BKTR';
                        break;
                    case #RTGS:
                        printSvcLvl = true;
                        value = 'URGP';
                        break;
                }
                break;
            case 'UK-SCB-XML-KE':
                switch(mSKS_EFT_FileDetail.TransactionCode)
                {
                    case #RTGS:
                        printSvcLvl = true;
                        value = 'URGP';
                        break;
                    case #ACH:
                        printSvcLvl = true;
                        value = 'NURG';
                        break;
                }
                break;
            case 'UK-SCB-XML-UG':
                switch(mSKS_EFT_FileDetail.TransactionCode)
                {
                    case #ACH:
                        printSvcLvl = true;
                        value = 'NURG';
                        break;
                    default:
                        printSvcLvl = true;
                        value = 'URGP';
                        break;
                }
                break;
            default:
                printSvcLvl = true;
                value = 'URGP';
                break;
        }

        if(printSvcLvl)
        {
            //          2.8: SvcLvl
            nodeSvcLvl = _nodePmftTpInf.appendChild(xmlDoc.createElement('SvcLvl'));
    
            //              2.9: Cd
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeSvcLvl, 'Cd', value);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_PmtTpInf_SvcLvl_Cd</Name>
				<Source><![CDATA[
    protected void node_PmtInf_PmtTpInf_SvcLvl_Cd(XmlElement _nodeSvcLvl)
    {
        //              2.9: Cd
        boolean printSvcLvl = false;
        str value;

        switch(mSKS_EFT_FileDetail.FormatId)
        {
            case 'UK-SCB-XML-AE':
                switch(mSKS_EFT_FileDetail.TransactionCode)
                {
                    case #BT:
                        printSvcLvl = true;
                        value = 'BKTR';
                        break;
                    case #RTGS:
                        printSvcLvl = true;
                        value = 'URGP';
                        break;
                }
                break;
            case 'UK-SCB-XML-KE':
                switch(mSKS_EFT_FileDetail.TransactionCode)
                {
                    case #RTGS:
                        printSvcLvl = true;
                        value = 'URGP';
                        break;
                    case #ACH:
                        printSvcLvl = true;
                        value = 'NURG';
                        break;
                }
                break;
            case 'UK-SCB-XML-UG':
                switch(mSKS_EFT_FileDetail.TransactionCode)
                {
                    case #ACH:
                        printSvcLvl = true;
                        value = 'NURG';
                        break;
                    default:
                        printSvcLvl = true;
                        value = 'URGP';
                        break;
                }
                break;
            default:
                printSvcLvl = true;
                value = 'URGP';
                break;
        }

        if(printSvcLvl)
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeSvcLvl, 'Cd', value);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_PmtTpInf_LclInstrm</Name>
				<Source><![CDATA[
    protected void node_PmtInf_PmtTpInf_LclInstrm(XmlElement _nodePmftTpInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.11: LclInstrm
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeLclInstrm;
        str value;

        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'UK-SCB-XML-KE':
            case 'UK-SCB-XML-UG':
                switch(mSKS_EFT_FileDetail.TransactionCode)
                {
                    case #MWP:
                        value = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('LclInstrm', mSKS_EFT_FileDetail.RecId));
                        break;
                }
                break;
        }
        if(value)
        {
            //          2.11: LclInstrm
            nodeLclInstrm = _nodePmftTpInf.appendChild(xmlDoc.createElement('LclInstrm'));

            //              2.13: Prtry
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeLclInstrm, 'Prtry', value);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_PmtTpInf_CtgyPurp</Name>
				<Source><![CDATA[
    protected void node_PmtInf_PmtTpInf_CtgyPurp(XmlElement _nodePmftTpInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.14: CtgyPurp
        //------------------------------------------------------------------------------------------------------

        str value;
        XmlElement  nodeCtgyPurp;
    
        value = SKS_EFT_Format::getCodelookupvalue('CtgyPurp', mSKS_EFT_FileDetail.RecId);

        if(value)
        {
            //          2.14: CtgyPurp
            nodeCtgyPurp = _nodePmftTpInf.appendChild(xmlDoc.createElement('CtgyPurp'));

            //              2.15: Cd
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCtgyPurp, 'Cd', value);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_Dbtr_PstlAdr</Name>
				<Source><![CDATA[
    protected void node_PmtInf_Dbtr_PstlAdr(XmlElement _nodeDbtr)
    {
        this.node_PstlAdr(_nodeDbtr, mSKS_EFT_FileDetail_BankAccount.WOrdPartyCountryRegionId, mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr, mSKS_EFT_FileDetail_BankAccount.WOrdPartyZipCode, mSKS_EFT_FileDetail_BankAccount.WOrdPartyCity,0,mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr2,mSKS_EFT_FileDetail_BankAccount.WOrdPartyState,true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_DbtrAcct</Name>
				<Source><![CDATA[
    protected void node_PmtInf_DbtrAcct(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.20: DbtrAcct
        //          Id
        //              IBAN
        //              Othr
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeDbtrAcct;
        XmlElement nodeDbtrAcctId;
    
        //      2.20: DbtrAcct
        nodeDbtrAcct = nodePmtInf.appendChild(xmlDoc.createElement('DbtrAcct'));
    
        //          Id
        nodeDbtrAcctId = nodeDbtrAcct.appendChild(xmlDoc.createElement('Id'));
    
        if(mSKS_EFT_FileDetail.BankBankIBAN)
        {
            //              IBAN
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeDbtrAcctId, 'IBAN', mSKS_EFT_FileDetail.BankBankIBAN);
        }
        else
        {
            //              Othr
            this.node_PmtInf_DbtrAcct_Id_Othr(nodeDbtrAcctId);
        }
        //          Ccy
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeDbtrAcct, 'Ccy', mSKS_EFT_FileDetail.CurrencyCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_Cdtr_Id</Name>
				<Source><![CDATA[
    protected void node_PmtInf_Cdtr_Id(XmlElement _nodeCdtr)
    {
        XmlElement nodeId;
        XmlElement nodeOrgId, nodeOthr;

        //          Id
        nodeId = _nodeCdtr.appendChild(xmlDoc.createElement('Id'));

        //              OrgId
        nodeOrgId = nodeId.appendChild(xmlDoc.createElement('OrgId'));
        
        //                  Othr
        nodeOthr = nodeOrgId.appendChild(xmlDoc.createElement('Othr'));

        //                      Id
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeOthr, 'Id', mSKS_EFT_FileDetail.AccountNum,35);

    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_ChrgBr</Name>
				<Source><![CDATA[
    protected void node_PmtInf_ChrgBr(XmlElement _nodeCdtTrfTxInf)
    {
        str value;

        value = SKS_EFT_Format::getCodelookupvalue('ChrgBr', mSKS_EFT_FileDetail.RecId);

        if(value)
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeCdtTrfTxInf, 'ChrgBr', value, 0, false);
        }
        else
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeCdtTrfTxInf, 'ChrgBr', 'SHAR', 0, false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_CdtrAgt</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_CdtrAgt(XmlElement _nodeCdtTrfTxInf)
    {
        XmlElement nodeCdtrAgt;
        XmlElement nodeFinInstnId;
        XmlElement nodeClrSysMmBId;
        XmlElement nodeClrSysId, nodeBrnchId;
        str cd;
        int length, blength;

        //           CdtrAgt
        nodeCdtrAgt = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('CdtrAgt'));

        //              FinInstnId
        nodeFinInstnId = nodeCdtrAgt.appendChild(xmlDoc.createElement('FinInstnId'));

        if(mSKS_EFT_FileDetail.DepSwiftNo &&
            (mSKS_EFT_FileDetail.FormatId != 'UK-SCB-XML-JP' ||
            mSKS_EFT_FileDetail.FormatId != 'UK-SCB-XML-ZA' ||
            mSKS_EFT_FileDetail.FormatId != 'UK-SCB-XML-UK' ||
            mSKS_EFT_FileDetail.FormatId != 'UK-SCB-XML-US' ||
            mSKS_EFT_FileDetail.FormatId != 'UK-SCB-XML-CA' ||
            mSKS_EFT_FileDetail.FormatId != 'UK-SCB-XML-PL'))
        {
            //                  BIC
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeFinInstnId, 'BIC', mSKS_EFT_FileDetail.DepSwiftNo, 0, false);
        }
        else
        {
            //              ClrSysMmbId
            nodeClrSysMmBId = nodeFinInstnId.appendChild(xmlDoc.createElement('ClrSysMmbId'));
            
            switch (mSKS_EFT_FileDetail.FormatId)
            {
                case 'UK-SCB-XML-JP':
                    length = 4;
                    cd = 'JPZGN';
                    break;
                case 'UK-SCB-XML-ZA':
                    length = 6;
                    cd = 'ZANCC';
                    break;
                case 'UK-SCB-XML-UK':
                    length = 6;
                    cd = 'GBDSC';
                    break;
                case 'UK-SCB-XML-US':
                    length = 9;
                    cd = 'USABA';
                    break;
                case 'UK-SCB-XML-CA':
                    length = 9;
                    cd = 'CACPA';
                    break;
                case 'UK-SCB-XML-PL':
                    length = 8;
                    cd = 'PLKNR';
                    break;
            }

            if (cd)
            {
                //              ClrSysId
                nodeClrSysId = nodeClrSysMmBId.appendChild(xmlDoc.createElement('ClrSysId'));

                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeClrSysId, 'Cd', cd);
            }            
                //                  MmbId
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeClrSysMmBId, 'MmbId', mSKS_EFT_FileDetail.DepBankTransit, length, false);
            
        }

        //                  Nm
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeFinInstnId, 'Nm', this.CharacterReplacement(mSKS_EFT_FileDetail_BenBank.BenBankName), 140, false);


        if (mSKS_EFT_FileDetail_BenBank.BenBankBranch &&
            (mSKS_EFT_FileDetail.FormatId == 'UK-SCB-XML-JP' ||
             mSKS_EFT_FileDetail.FormatId == 'UK-SCB-XML-ZA' ||
             mSKS_EFT_FileDetail.FormatId == 'UK-SCB-XML-KE' ||
             mSKS_EFT_FileDetail.FormatId == 'UK-SCB-XML-UG'))
        {
            //                  BrnchId
            nodeBrnchId = nodeCdtrAgt.appendChild(xmlDoc.createElement('BrnchId'));

            switch (mSKS_EFT_FileDetail.FormatId)
            {
                case 'UK-SCB-XML-JP':
                    blength = 3;
                    break;
                case 'UK-SCB-XML-ZA':
                    blength = 5;
                    break;
            }

            //                      Id
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeBrnchId, 'Id', this.CharacterReplacement(mSKS_EFT_FileDetail_BenBank.BenBankBranch), blength);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_Cdtr_PstlAdr</Name>
				<Source><![CDATA[
    protected void node_PmtInf_Cdtr_PstlAdr(XmlElement _nodeCdtr)
    {
        
        this.node_PstlAdr(_nodeCdtr, mSKS_EFT_FileDetail_VendAddress.BeneCountryRegionId, mSKS_EFT_FileDetail_VendAddress.BeneAddr,mSKS_EFT_FileDetail_VendAddress.BeneZipPostal,mSKS_EFT_FileDetail_VendAddress.BeneCity,0,mSKS_EFT_FileDetail_VendAddress.BeneAddr2,mSKS_EFT_FileDetail_VendAddress.BeneState,true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_CdtrAcct</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_CdtrAcct(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.80: CdtrAcct
        //              Id
        //                  IBAN
        //------------------------------------------------------------------------------------------------------
    
        XmlElement nodeCdtrAcct;
        XmlElement nodeCdtrAcctId, nodeCdtrAcctTp, nodeOthr;
        str value;
    
        //          2.80: CdtrAcct
        nodeCdtrAcct = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('CdtrAcct'));
        
        //              Id
        nodeCdtrAcctId = nodeCdtrAcct.appendChild(xmlDoc.createElement('Id'));

        if(mSKS_EFT_FileDetail.DepBankIBAN)
        {
            //                  IBAN
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdtrAcctId, 'IBAN', mSKS_EFT_FileDetail.DepBankIBAN,34);
        }
        else
        {
            //              Othr
            nodeOthr = nodeCdtrAcctId.appendChild(xmlDoc.createElement('Othr'));

            //                  Id
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeOthr, 'Id', mSKS_EFT_FileDetail.DepBankAcct,34);
        }

        if(mSKS_EFT_FileDetail.DepBankAcctType == BankAccountType::SavingsAccount)
        {
            value = 'SVGS';
        }
        else
        {
            value = 'CACC';
        }

        nodeCdtrAcctTp = nodeCdtrAcct.appendChild(xmlDoc.createElement('Tp'));

        //                          Cd
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdtrAcctTp, 'Cd', value);

    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_Purp</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_Purp(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.86: Purp
        //              Prtry
        //------------------------------------------------------------------------------------------------------
    
        str value;
        XmlElement nodeId;
    
        value = SKS_EFT_Format::getCodelookupvalue('PurpCd', mSKS_EFT_FileDetail.RecId);

        if(value != '')
        {
            nodeId = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('Purp'));
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeId, 'Cd', value);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_RmtInf</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_RmtInf(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.98: RmtInf
        //              2.99: Ustrd
        //------------------------------------------------------------------------------------------------------
        SKS_EFT_FileDetail invSKS_EFT_FileDetail;
        XmlElement nodeRmtInf;
        XmlElement nodeStrd;
        XmlElement nodeRfrdDocAmt;
        Boolean firstRec = true;
        str invDetailsString;
        

        invDetailsString = this.getInvoiceNbrs();

        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'UK-SCB-XML-KE':
            case 'UK-SCB-XML-UG':
                switch(mSKS_EFT_FileDetail.TransactionCode)
                {
                    case #MWP:
                        while select invSKS_EFT_FileDetail where invSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId
                        {
                            if(invSKS_EFT_FileDetail.InvoiceNumber != '')
                            {
                                if(firstRec)
                                {
                                    //          2.98: RmtInf
                                    nodeRmtInf = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('RmtInf'));
                                    firstRec = false;
                                }
    
                                //              2.100: Strd
                                nodeStrd = nodeRmtInf.appendChild(xmlDoc.createElement('Strd'));

                                //              2.101: RfrdDocInf
                                this.node_CdtTrfTxInf_RmtInf_RfrdDocInf(nodeStrd, invSKS_EFT_FileDetail);
    
                                //              2.109 RfrdDocAmt
                                nodeRfrdDocAmt = nodeStrd.appendChild(xmlDoc.createElement('RfrdDocAmt'));
    
                                this.node_RmtInf_Amt(nodeRfrdDocAmt, invSKS_EFT_FileDetail);    
                            }
                        }
                        break;
                    default:
                        super(_nodeCdtTrfTxInf);
                        break;
                }
                break;
            default:
                super(_nodeCdtTrfTxInf);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_RmtInf_RfrdDocInf</Name>
				<Source><![CDATA[
    private void node_CdtTrfTxInf_RmtInf_RfrdDocInf(XmlElement _nodeStrd, SKS_EFT_FileDetail _invSKS_EFT_FileDetail)
    {
        //------------------------------------------------------------------------------------------------------
        //              2.101: RfrdDocInf
        //                  2.102: Tp
        //                      2.103: CdOrPrtry
        //                          2.104: Cd
        //                  2.107: Number
        //                  2.108: RltdDt
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeRfrdDocInf;
        XmlElement nodeTp;
        XmlElement nodeCdOrPrtry;

        //              2.101: RfrdDocInf
        nodeRfrdDocInf = _nodeStrd.appendChild(xmlDoc.createElement('RfrdDocInf'));

        //                  2.102: Tp
        nodeTp = nodeRfrdDocInf.appendChild(xmlDoc.createElement('Tp'));

        //                      2.103: CdOrPrtry
        nodeCdOrPrtry = nodeTp.appendChild(xmlDoc.createElement('CdOrPrtry'));

        //                          2.104: Cd
        if(_invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur <= 0)
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdOrPrtry, 'Cd', 'CINV');

            //                  2.107: Number
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRfrdDocInf, 'Nb', this.CharacterReplacement(_invSKS_EFT_FileDetail.InvoiceNumber));

            //                  2.108: RltdDt
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRfrdDocInf, 'RltdDt', SKS_PP_StringFormats::strDateYYYYMMDD(_invSKS_EFT_FileDetail.InvoiceDate, DateSeparator::Hyphen));
        }
        else
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdOrPrtry, 'Cd', 'CREN');

            //                  2.107: Number
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRfrdDocInf, 'Nb', this.CharacterReplacement(_invSKS_EFT_FileDetail.InvoiceNumber));

            //                  2.108: RltdDt
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRfrdDocInf, 'RltdDt', SKS_PP_StringFormats::strDateYYYYMMDD(_invSKS_EFT_FileDetail.InvoiceDate, DateSeparator::Hyphen));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_RmtInf_Amt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reffered document Amount
    /// </summary>
    /// <param name = "_nodeRfrdDocAmt">RfrdDocAmt</param>
    /// <param name = "_invSKS_EFT_FileDetail">invSKS_EFT_FileDetail</param>
    protected void node_RmtInf_Amt(XmlElement _nodeRfrdDocAmt, SKS_EFT_FileDetail _invSKS_EFT_FileDetail)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.42: Amt
        //              DuePyblAmt
        //              DscntApldAmt
        //              CdtNoteAmt
        //              RmtdAmt
        //------------------------------------------------------------------------------------------------------
        XmlElement  currentElement;
        AmountMST   gross = _invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur + _invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur;
        AmountMST   discount = _invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur;
        AmountMST   remitted;
        AmountMST   creditNote;
    
        if(_invSKS_EFT_FileDetail.InvoiceSettleAmountCur > 0)
        {
            remitted = 0;
            creditNote = _invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur;

            //      2.110
            currentElement = SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeRfrdDocAmt, 'DuePyblAmt', num2str(gross, 0, 2, 1, 0));
            SKS_EFT_Format::xmlsetAttributeText(currentElement, 'Ccy', _invSKS_EFT_FileDetail.PaymentCurrencyCode);

            //      2.111
            currentElement = SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeRfrdDocAmt, 'DscntApldAmt', num2str(discount, 0, 2, 1, 0));
            SKS_EFT_Format::xmlsetAttributeText(currentElement, 'Ccy', _invSKS_EFT_FileDetail.PaymentCurrencyCode);
        }
        else
        {
            remitted = _invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1;
            creditNote = 0;

            //      2.110
            currentElement = SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeRfrdDocAmt, 'DuePyblAmt', num2str(gross * -1, 0, 2, 1, 0));
            SKS_EFT_Format::xmlsetAttributeText(currentElement, 'Ccy', _invSKS_EFT_FileDetail.PaymentCurrencyCode);

            //      2.111
            currentElement = SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeRfrdDocAmt, 'DscntApldAmt', num2str(discount * -1, 0, 2, 1, 0));
            SKS_EFT_Format::xmlsetAttributeText(currentElement, 'Ccy', _invSKS_EFT_FileDetail.PaymentCurrencyCode);
        }
    
        if(remitted != 0)
        {
            //      RmtdAmt
            currentElement = SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeRfrdDocAmt, 'RmtdAmt', num2str(remitted,0,2,1,0));
            SKS_EFT_Format::xmlsetAttributeText(currentElement, 'Ccy', _invSKS_EFT_FileDetail.PaymentCurrencyCode);
        }
        else
        {
            //      CdtNoteAmt
            currentElement = SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeRfrdDocAmt, 'CdtNoteAmt', num2str(creditNote,0,2,1,0));
            SKS_EFT_Format::xmlsetAttributeText(currentElement, 'Ccy', _invSKS_EFT_FileDetail.PaymentCurrencyCode);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>