<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_ProjProposalTotals_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(ProjProposalTotals))]
final class SKS_ProjProposalTotals_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    public void calc()
    {
        next calc();
        
        if(SKS_PP_Setup::find().ModCC == NoYes::Yes
            && SKS_PP_Setup::find().CCAllowCCProcFromProjInvProposal == NoYes::Yes
            && SKS_PP_Setup::find().CCAllowDefaultCCFromProjects == NoYes::Yes)
        {
            if(projProposalJour)
            {
                SMAServiceOrderTable serviceOrderTable = SKS_CC_CustPaymTable::getServiceOrderFromProposal(projProposalJour);
            
                SKS_CC_CustPaymTable sks_CC_CustPaymTable;
                sks_CC_CustPaymTable = SKS_CC_CustPaymTable::findPendingAuthorization(serviceOrderTable.TableId, serviceOrderTable.RecId);

                if(!sks_CC_CustPaymTable)
                {
                    CustAccount callerCustAccount;
                    ProjFundingSource projFundingSource;
                    
                    select firstonly projFundingSource
                        where projFundingSource.ContractId == projProposalJour.ProjInvoiceProjId
                        && projFundingSource.FundingType == ProjFundingType::Customer;

                    // check if the project contract funding source matches with invoice proposal invoice account
                    if(projFundingSource.CustAccount ==  projProposalJour.InvoiceAccount)
                    {
                        // check if the credit card exists
                        PSAProjProposalProj psaProjProposalProj;
                         
                        select firstonly psaProjProposalProj where psaProjProposalProj.ProjProposalId == projProposalJour.ProposalId;
                        CreditCardCust  creditCardCustDefault = CreditCardCust::find(ProjTable::find(psaProjProposalProj.ProjId).CreditCardCustRefId);
                        
                        if(creditCardCustDefault)
                        {
                            callerCustAccount = projFundingSource.CustAccount;

                            select sks_CC_CustPaymTable
                                where sks_CC_CustPaymTable.RefTableId == projProposalJour.TableId
                                    && sks_CC_CustPaymTable.RefRecId == projProposalJour.RecId
                                    && sks_CC_CustPaymTable.RefOriginId == projProposalJour.ProposalId;
                            if(!sks_CC_CustPaymTable)
                            {
                                // populate SKS_CC_CustPaymTable
                                sks_CC_CustPaymTable.CreditCardTransAmountCur = this.balance;          //projPorposalTransUnion.AmountCur;
                                sks_CC_CustPaymTable.CreditCardCurrency = projProposalJour.CurrencyId;
                                sks_CC_CustPaymTable.CreditCardTransOrigin = SKS_CC_CreditCardTransOrigin::InvoiceProposal;
                                sks_CC_CustPaymTable.CreditCardTransType = SKS_CC_CreditCardTransType::Capture;
                                sks_CC_CustPaymTable.RefTableId = projProposalJour.TableId;
                                sks_CC_CustPaymTable.RefRecId = projProposalJour.RecId;
                                sks_CC_CustPaymTable.RefOriginId = projProposalJour.ProposalId;
                                SKS_CC_CustPaymTable.CreditCardTransStatus = CreditCardProcessorStatus::NA;
                                SKS_CC_CustPaymTable.CustAccount = projProposalJour.InvoiceAccount;
                                SKS_CC_CustPaymTable.CreditCardTransStatusOrig = SKS_CC_CustPaymTable.CreditCardTransStatus;
                                SKS_CC_CustPaymTable.CreditCardTransTypeOrig = SKS_CC_CustPaymTable.CreditCardTransType;
                                SKS_CC_CustPaymTable.CreditCardCustRefId = creditCardCustDefault.RecId;
                                SKS_CC_CustPaymTable.CreditCardTypeName = creditCardCustDefault.CreditCardTypeName;
                                if (sks_CC_CustPaymTable.CreditCardTransAmountCur < 0)
                                {
                                    SKS_CC_CustPaymTable.CreditCardTransType = SKS_CC_CreditCardTransType::Refund;
                                }

                                sks_CC_CustPaymTable.insert();
                            }
                            else
                            {
                                ttsbegin;
                                sks_CC_CustPaymTable.selectForUpdate(true);
                                sks_CC_CustPaymTable.CreditCardTransAmountCur = this.balance;
                                sks_CC_CustPaymTable.update();
                                ttscommit;
                                                                    
                                info("@SKS:CCTotalUpdated");
                            }
                        }
                        else
                        {
                            Error("@SKS:CCNotFound");
                        }
                    }
                    else
                    {
                        Error("@SKS:CCInvoiceAcctNoMatch");
                    }
                }
                //if(!sks_CC_CustPaymTable)
            }
            //if(projProposalJour)
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>