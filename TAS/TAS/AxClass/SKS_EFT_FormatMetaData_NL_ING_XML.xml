<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_FormatMetaData_NL_ING_XML</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_FormatMetaData_NL_ING_XML Extends SKS_EFT_Format_MetaData
/// </summary>
public class SKS_EFT_FormatMetaData_NL_ING_XML Extends SKS_EFT_Format_MetaData
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        productVersion = '';
        formatGroupVersion = '20220822';
        dataContractVersion = '1.0';
        conFormatID = ['NL-ING-XML','NL-ING-XML-RO','NL-ING-XML-BE'];
        formatfiletype = 'EFT';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFormatFileType</Name>
				<Source><![CDATA[
    protected str getFormatFileType()
    {
        return formatfiletype;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHeaderMetaData</Name>
				<Source><![CDATA[
    protected container getHeaderMetaData()
    {
        container   headerList;

        //Metadata column names of data elements
//ProductVersion,FormatGroupVersion,UseWithCustomer,UseWithVenodrs,UseWithBanktoBank,UsewithCustReimbursements,
//BeDesc01,BeDesc02,BeMask01,BeMask02,BlockFill,CompanyIdMask,CompanyIdTitle,CompanyNameTitle,CompanyNameMask,Crlf,Description,EffectiveDateOffset,EntryClassTitle,EntryClassMask,
//FormatId,FormatType,IMMDestMask,IMMDestTitle,IMMDestNameTitle,IMMDestNameMask,IMMOriginTitle,IMMOriginMask,IMMOriginNameTitle,IMMOriginNameMask,IncludeCpnyCredit,
//IncludeCpnyDebit,LastEffectiveDate,NextDailyReset,NextDailyResetDate,NextFileId,NextSequenceNumber,PreNote,RecordLength,Selected,TrimRecord,TwoFileNameAddition,
//WBank01Description,WBank01Mask,WBank01Required,WBank02Required,WBank02Mask,WBank02Description,WBank03Required,WBank03Mask,WBank03Description,WBank04Required,WBank04Mask,
//WBank04Description,PreNoteDays,EDI,PayDateIsEffDate,ARDateOffset,UseAddenda,MastAcctList,FormatGroup,MultiEffectiveDates,SupportsMultiCompany,ExternalFormat,FundTransferType

        headerList = ConIns(headerList,conLen(headerList)+1,[productVersion,formatGroupVersion,0,1,0,1,'','','','',0,'','','','',0,'ING Customer Credit Transfers pain.001.001.03',0,'','','NL-ING-XML',1,'','','','','','','','',0,0,'1900-01-01 00:00:00.000',0,'1900-01-01 00:00:00.000',1,1,0,0,0,0,'','','',0,0,'','',0,'','',0,'','',0,0,0,0,0,0,'NL-ING-XML',1,0,0]);
        headerList = ConIns(headerList,conLen(headerList)+1,[productVersion,formatGroupVersion,0,1,0,1,'','','','',0,'','','','',0,'NL - ING - Romania - ISO20022',0,'','','NL-ING-XML-RO',1,'','','','','','','','',0,0,'1900-01-01 00:00:00.000',0,'1900-01-01 00:00:00.000',1,1,0,0,0,0,'','','',0,0,'','',0,'','',0,'','',0,0,0,0,0,0,'NL-ING-XML',1,0,0]);

        return headerList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymSpecsMetaData</Name>
				<Source><![CDATA[
    protected container getPaymSpecsMetaData(str _formatID)
    {
        container   paymSpecList;

        //Metadata column names of data elements
//BARoutingReqd,VBAAccountReqd,VBASwiftReqd,VBAIBANReqd,ARPaymSpecName,BEBeneBankAcctReqd,BE01Reqd,BE02Reqd,BE01Use,BE02Use,PaymSpecFileDescr,RecordSummary,TransactionCode,
        //EmailNote,PaymSpec,PaymSpecName,FilterSeparateFile,FormatId,Selected,CpnyIDNameReq,EmailOff,VendorUse,WireTabs,SamePaymentDate,SelectByPaymentDate,PreNote,TxnNacha,UseCheckNumber,
        //UseWithCustomers,UseWithVendors,EDI,UseWithBanktoBank,FundTransferType,UseWithCustomerReimbursement,InvoiceDetail,RemitAvailability,RemitType,APNameType,APAddressType
        //DDNameType,DDAddressType,CRNameType,CRAddressType

        switch (_formatID)
        {
            case ('NL-ING-XML'):
                paymSpecList = this.getPaymSpecsMetaData_NL_ING_XML();
                break;

            case ('NL-ING-XML-RO'):
                paymSpecList = this.getPaymSpecsMetaData_NL_ING_XML_RO();
                break;

            case ('NL-ING-XML-BE'):
                paymSpecList = this.getPaymSpecsMetaData_NL_ING_XML_BE();
                break;

        }

        return paymSpecList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymSpecsMetaData_NL_ING_XML</Name>
				<Source><![CDATA[
    private container getPaymSpecsMetaData_NL_ING_XML()
    {
        container   paymSpecList;

        paymSpecList = ConIns(paymSpecList,conLen(paymSpecList)+1,[0,0,0,0,'',0,0,0,0,0,'SEPA Credit Transfer',1,'SEPA','','SEPA','TRADE PAY',0,'NL-ING-XML',0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0]);
        paymSpecList = ConIns(paymSpecList,conLen(paymSpecList)+1,[0,0,0,0,'',0,0,0,0,0,'Domestic and International Credit Transfer',1,'DOM-INT','','DOM-INT','TRADE PAY',0,'NL-ING-XML',0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0]);
        paymSpecList = ConIns(paymSpecList,conLen(paymSpecList)+1,[0,0,0,0,'',0,0,0,0,0,'Domestic Express Payments',1,'DOM-EXP','','DOM-EXP','TRADE PAY',0,'NL-ING-XML',0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0]);
        paymSpecList = ConIns(paymSpecList,conLen(paymSpecList)+1,[0,0,0,0,'',0,0,0,0,0,'International Ordinary Payments',1,'INTL-ORD','','INTL-ORD','TRADE PAY',0,'NL-ING-XML',0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0]);
        paymSpecList = ConIns(paymSpecList,conLen(paymSpecList)+1,[0,0,0,0,'',0,0,0,0,0,'Domestic ordinary payments',1,'DOM-ORD','','DOM-ORD','TRADE PAY',0,'NL-ING-XML',0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0]);
        paymSpecList = ConIns(paymSpecList,conLen(paymSpecList)+1,[0,0,0,0,'',0,0,0,0,0,'International Express Payments',1,'INTL-EXP','','INTL-EXP','TRADE PAY',0,'NL-ING-XML',0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0]);
        paymSpecList = ConIns(paymSpecList,conLen(paymSpecList)+1,[0,0,0,0,'',0,0,0,0,0,'Remote Initiation Service',1,'RIS','','RIS','TRADE PAY',0,'NL-ING-XML',0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0]);

        return paymSpecList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymSpecsMetaData_NL_ING_XML_RO</Name>
				<Source><![CDATA[
    private container getPaymSpecsMetaData_NL_ING_XML_RO()
    {
        container   paymSpecList;

        paymSpecList = ConIns(paymSpecList,conLen(paymSpecList)+1,[0,0,0,0,'',0,0,0,0,0,'Domestic Payments',1,'DOM','','DOM','TRADE PAY',0,'NL-ING-XML-RO',0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0]);
        paymSpecList = ConIns(paymSpecList,conLen(paymSpecList)+1,[0,0,0,0,'',0,0,0,0,0,'Budgetary Payments',1,'BDG','','BDG','TRADE PAY',0,'NL-ING-XML-RO',0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0]);
        paymSpecList = ConIns(paymSpecList,conLen(paymSpecList)+1,[0,0,0,0,'',0,0,0,0,0,'International Payments',1,'INTL','','INTL','TRADE PAY',0,'NL-ING-XML-RO',0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0]);

        return paymSpecList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymSpecsMetaData_NL_ING_XML_BE</Name>
				<Source><![CDATA[
    private container getPaymSpecsMetaData_NL_ING_XML_BE()
    {
        container   paymSpecList;

        paymSpecList = ConIns(paymSpecList,conLen(paymSpecList)+1,[0,0,0,0,'',0,0,0,0,0,'SEPA Credit Transfer',1,'SEPA','','SEPA','TRADE PAY',0,'NL-ING-XML-BE',0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0]);
        paymSpecList = ConIns(paymSpecList,conLen(paymSpecList)+1,[0,0,0,0,'',0,0,0,0,0,'Credit transfers in currencies other than EUR',1,'NON-EUR','','NON-EUR','TRADE PAY',0,'NL-ING-XML-BE',0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0]);
        paymSpecList = ConIns(paymSpecList,conLen(paymSpecList)+1,[0,0,0,0,'',0,0,0,0,0,'Credit transfers to countries outside SEPA',1,'NON-SEPA','','NON-SEPA','TRADE PAY',0,'NL-ING-XML-BE',0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0]);

        return paymSpecList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getNotesMetaData</Name>
				<Source><![CDATA[
    protected container getNotesMetaData(str _formatID)
    {
        container   notesList;

        //Metadata column names of data elements
//FormatId,PaymSpec,Note

        switch (_formatID)
        {
            case ('NL-ING-XML'):
                notesList = this.getNotesMetaData_NL_ING_XML();
                break;

            case ('NL-ING-XML-RO'):
                notesList = this.getNotesMetaData_NL_ING_XML_RO();
                break;

            case ('NL-ING-XML-BE'):
                notesList = this.getNotesMetaData_NL_ING_XML_BE();
                break;

        }

        return notesList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getNotesMetaData_NL_ING_XML</Name>
				<Source><![CDATA[
    private container getNotesMetaData_NL_ING_XML()
    {
        container   notesList;

        notesList = ConIns(notesList,conLen(notesList)+1,['NL-ING-XML','SEPA','-Initiating Party Name is stored in Organization administration > Setup > Organization > Legal entities > Name field.']);
        notesList = ConIns(notesList,conLen(notesList)+1,['NL-ING-XML','DOM-INT','-Initiating Party Name is stored in Organization administration > Setup > Organization > Legal entities > Name field.']);
        notesList = ConIns(notesList,conLen(notesList)+1,['NL-ING-XML','DOM-EXP','-Initiating Party Name is stored in Organization administration > Setup > Organization > Legal entities > Name field.::-EFT+ bank account > AP EFT+ field> Wire/IAT ordering party tab:--Initiating Party Identification is stored on Initiating Party Id field.:--Debtor Identification is stored on Debtor Id field.:--Debtor Name is required.:--Debtor address are stored on their specific fields.:--Country is required and stored on Country/region field.::-Cash and bank management module > Bank Account:--Either Bank account number or IBAN is required.If both are populated IBAN will take precedence:--SWIFT code is required.::-Vendor Bank Account fields:--Either IBAN or Bank account number is required. If both are populated IBAN will take precedence.:--SWIFT code is required.::-Vendor eBanking details > Payment specifications fields > Wire transfer/IAT-1 tab:--Creditor Name is required and stored in the Beneficiary Name field.:--Creditor > Postal Address information is stored in the Beneficiary section.:--Country is required and stored on Country/region field.:--The charges bearer is set on the Charges indicator field in the Other notes section.::-Vendor eBanking details > Payment specifications fields > Wire transfer/IAT-2 tab:--Intermediary Agent BIC will be included if the SWIFT code on the Intermediary bank section is populated.']);
        notesList = ConIns(notesList,conLen(notesList)+1,['NL-ING-XML','INTL-ORD','-This format uses Code lookups. Please review the fields on these forms.:--Code lookup fields tab on EFT+ file formats > Payment specifications.::-Initiating Party Name is stored in Organization administration > Setup > Organization > Legal entities > Name field.::-EFT+ bank account > AP EFT+ field> Wire/IAT ordering party tab:--Initiating Party Identification is stored on Initiating Party Id field.:--Debtor Identification is stored on Debtor Id field.:--Debtor Name is required.:--Debtor address are stored on their specific fields.:--Country is required and stored on Country/region field.::-Cash and bank management module > Bank Account:--Either Bank account number or IBAN is required.If both are populated IBAN will take precedence:--SWIFT code is required.::-Vendor Bank Account fields:--Either IBAN or Bank account number is required. If both are populated IBAN will take precedence.:--SWIFT code is required.::-Vendor eBanking details > Payment specifications fields > Wire transfer/IAT-1 tab:--Creditor Name is required and stored in the Beneficiary Name field.:--Creditor > Postal Address information is stored in the Beneficiary section.:--Country is required and stored on Country/region field.:--The charges bearer is set on the Charges indicator field in the Other notes section.::-Vendor eBanking details > Payment specifications fields > Wire transfer/IAT-2 tab:--Intermediary Agent BIC will be included if the SWIFT code on the Intermediary bank section is populated.']);
        notesList = ConIns(notesList,conLen(notesList)+1,['NL-ING-XML','DOM-ORD','-Initiating Party Name is stored in Organization administration > Setup > Organization > Legal entities > Name field.::-EFT+ bank account > AP EFT+ field> Wire/IAT ordering party tab:--Initiating Party Identification is stored on Initiating Party Id field.:--Debtor Identification is stored on Debtor Id field.:--Debtor Name is required.:--Debtor address are stored on their specific fields.:--Country is required and stored on Country/region field.::-Cash and bank management module > Bank Account:--Either Bank account number or IBAN is required.If both are populated IBAN will take precedence:--SWIFT code is required.::-Vendor Bank Account fields:--Either IBAN or Bank account number is required. If both are populated IBAN will take precedence.:--SWIFT code is required.::-Vendor eBanking details > Payment specifications fields > Wire transfer/IAT-1 tab:--Creditor Name is required and stored in the Beneficiary Name field.:--Creditor > Postal Address information is stored in the Beneficiary section.:--Country is required and stored on Country/region field.:--The charges bearer is set on the Charges indicator field in the Other notes section.::-Vendor eBanking details > Payment specifications fields > Wire transfer/IAT-2 tab:--Intermediary Agent BIC will be included if the SWIFT code on the Intermediary bank section is populated.']);
        notesList = ConIns(notesList,conLen(notesList)+1,['NL-ING-XML','INTL-EXP','-Initiating Party Name is stored in Organization administration > Setup > Organization > Legal entities > Name field.::-EFT+ bank account > AP EFT+ field> Wire/IAT ordering party tab:--Initiating Party Identification is stored on Initiating Party Id field.:--Debtor Identification is stored on Debtor Id field.:--Debtor Name is required.:--Debtor address are stored on their specific fields.:--Country is required and stored on Country/region field.::-Cash and bank management module > Bank Account:--Either Bank account number or IBAN is required.If both are populated IBAN will take precedence:--SWIFT code is required.::-Vendor Bank Account fields:--Either IBAN or Bank account number is required. If both are populated IBAN will take precedence.:--SWIFT code is required.::-Vendor eBanking details > Payment specifications fields > Wire transfer/IAT-1 tab:--Creditor Name is required and stored in the Beneficiary Name field.:--Creditor > Postal Address information is stored in the Beneficiary section.:--Country is required and stored on Country/region field.:--The charges bearer is set on the Charges indicator field in the Other notes section.::-Vendor eBanking details > Payment specifications fields > Wire transfer/IAT-2 tab:--Intermediary Agent BIC will be included if the SWIFT code on the Intermediary bank section is populated.']);

        return notesList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getNotesMetaData_NL_ING_XML_RO</Name>
				<Source><![CDATA[
    private container getNotesMetaData_NL_ING_XML_RO()
    {
        container   notesList;

        notesList = ConIns(notesList,conLen(notesList)+1,['NL-ING-XML-RO','DOM','-Initiating Party Name is required and stored in Organization administration > Setup > Organization > Legal entities > Name field.::-EFT+ bank account > AP EFT+ field> Wire/IAT ordering party tab:--Debtor Name and Country/Region is required.:--Debtor Address information are stored in the Wire/IAT ordering party tab of EFT+ bank account > AP EFT+.::-Cash and bank management module > Bank Account:--Either IBAN or Bank account number is required. If both are populated IBAN will take precedence.:--SWIFT code is required.::-Vendor Bank Account fields:--IBAN is required.:--Routing number is required.::-Vendor eBanking details > Payment specifications fields > Wire transfer/IAT-1 tab:--Creditor Name is required and Postal Address fields are populated on the Beneficiary section.:--Creditor agent name is required and stored on Beneficiary bank section.::-Vendor eBanking details > Payment specifications fields > Wire transfer/IAT-2 tab:--Intermediary Agent BIC will be included if the SWIFT code on the Intermediary bank section is populated.']);
        notesList = ConIns(notesList,conLen(notesList)+1,['NL-ING-XML-RO','BDG','-Initiating Party Name is required and stored in Organization administration > Setup > Organization > Legal entities > Name field.::-EFT+ bank account > AP EFT+ field> Wire/IAT ordering party tab:--Debtor Name and Country/Region is required.:--Debtor Address information are stored in the Wire/IAT ordering party tab of EFT+ bank account > AP EFT+.::-Cash and bank management module > Bank Account:--Either IBAN or Bank account number is required. If both are populated IBAN will take precedence.:--SWIFT code is required.::-Vendor Bank Account fields:--IBAN is required.:--Routing number is required.::-Vendor eBanking details > Payment specifications fields > Wire transfer/IAT-1 tab:--Creditor Name is required and Postal Address fields are populated on the Beneficiary section.:--Creditor agent name is required and stored on Beneficiary bank section.::-Accounts Payable > All Vendors > Vendor:--Tax identification number is required and stored in the Tax exempt number field on Invoice and delivery tab.::-Vendor eBanking details > Payment specifications fields > Wire transfer/IAT-2 tab:--Intermediary Agent BIC will be included if the SWIFT code on the Intermediary bank section is populated.']);
        notesList = ConIns(notesList,conLen(notesList)+1,['NL-ING-XML-RO','INTL','-Initiating Party Name is required and stored in Organization administration > Setup > Organization > Legal entities > Name field.::-EFT+ bank account > AP EFT+ field> Wire/IAT ordering party tab:--The exchange rate contract identification is set on the Exchange contract id field.:--Debtor Name and Country/Region is required.:--Debtor Address information are stored in the Wire/IAT ordering party tab of EFT+ bank account > AP EFT+.::-Cash and bank management module > Bank Account:--Either IBAN or Bank account number is required. If both are populated IBAN will take precedence.:--SWIFT code is required.::-Vendor Bank Account fields:--Either IBAN or Bank account number is required. If both are populated IBAN will take precedence.:--SWIFT code is required.::-Vendor eBanking details > Payment specifications fields > Wire transfer/IAT-1 tab:--Creditor Name is required and Postal Address fields are populated on the Beneficiary section.:--Creditor agent name is required and stored on Beneficiary bank section.:--Creditor agent Country is required and stored on the Country/Region field of the Beneficiary bank section.:--The charges bearer is set on the Charges indicator field in the Other notes section.::-Vendor eBanking details > Payment specifications fields > Wire transfer/IAT-2 tab:-Intermediary Agent BIC will be included if the SWIFT code on the Intermediary bank section is populated.']);

        return notesList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getNotesMetaData_NL_ING_XML_BE</Name>
				<Source><![CDATA[
    private container getNotesMetaData_NL_ING_XML_BE()
    {
        container   notesList;

        notesList = ConIns(notesList,conLen(notesList)+1,['NL-ING-XML-BE','NON-EUR','-This format uses Code lookups.Please review the fields on these forms.:--Code lookup fields tab on EFT+ file formats > Payment specifications.:--Vendor eBanking details > Payment specifications > Additional fields.::-Initiating Party Name is stored in Organization administration > Setup > Organization > Legal entities > Name field.']);
        notesList = ConIns(notesList,conLen(notesList)+1,['NL-ING-XML-BE','NON-SEPA','-This format uses Code lookups.Please review the fields on these forms.:--Code lookup fields tab on EFT+ file formats > Payment specifications.:--Vendor eBanking details > Payment specifications > Additional fields.::-Initiating Party Name is stored in Organization administration > Setup > Organization > Legal entities > Name field.']);
        notesList = ConIns(notesList,conLen(notesList)+1,['NL-ING-XML-BE','SEPA','-This format uses Code lookups.Please review the fields on these forms.:--Code lookup fields tab on EFT+ file formats > Payment specifications.:--Vendor eBanking details > Payment specifications > Additional fields.::-Initiating Party Name is stored in Organization administration > Setup > Organization > Legal entities > Name field.']);

        return notesList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getValidationsMetaData</Name>
				<Source><![CDATA[
    protected container getValidationsMetaData(str _formatID)
    {
        container   validationsList;

        //Metadata column names of data elements
//FormatId,PaymSpec,Id,SourceFieldDesc,SourceFieldLoc,TargetFieldLoc,Notes,SourceContext,SourceField,ISOCountrySpec,CountryContext,Required,LengthValidation,MinLength,MaxLength,UserUpdated,Module

        switch (_formatID)
        {
            case ('NL-ING-XML'):
                validationsList = this.getValidationsMetaData_NL_ING_XML();
                break;

            case ('NL-ING-XML-BE'):
                validationsList = this.getValidationsMetaData_NL_ING_XML_BE();
                break;

        }

        return validationsList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getValidationsMetaData_NL_ING_XML</Name>
				<Source><![CDATA[
    private container getValidationsMetaData_NL_ING_XML()
    {
        container   validationsList;

        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','SEPA','','Name','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > Name','PmtInf > Dbtr > Nm','Name related to bank','15','WOrdPartyName','','',0,1,1,'70',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','SEPA','','Country code','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > Country/region','PmtInf > Dbtr > PstlAdr > Ctry','Country related to bank','15','WOrdPartyCountryRegionId','','',1,1,'',0,0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','SEPA','','Address 1','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > Address 1','PmtInf > Dbtr > PstlAdr > AdrLine > Address','Address related to bank','15','WOrdPartyAddr','','',1,1,1,'35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','SEPA','','Address 2','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > Address 2','PmtInf > Dbtr > PstlAdr > AdrLine > Address','Address related to bank','15','WOrdPartyAddr2','','',1,1,1,'35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','SEPA','','City','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > City','PmtInf > Dbtr > PstlAdr > AdrLine','City related to bank','15','WOrdPartyCity','','',1,1,1,'35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','SEPA','','Bank Zip/postal code','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > Zip/postal code','PmtInf > Dbtr > PstlAdr > AdrLine','ZipCode related to bank','15','WOrdPartyZipCode','','',1,1,'',0,0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','SEPA','','IBAN','Cash and bank management > Select bank account > edit > Additional Identification (fast tab) > IBAN','PmtInf > DbtrAcct > Id > IBAN','IBAN related to Bank',0,'IBAN','','','3',0,1,'24',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','SEPA','','Bank Account Number','Cash and bank management > Select bank account > edit > General (fast tab) Bank Account Number','PmtInf > DbtrAcct > Id > Othr > Id','Bank account number ',0,'AccountNum','','','3',0,1,'24',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','SEPA','','Swift Code','Cash and bank management > Select bank account > edit > Additional identification (fast tab) > Swift Code','PmtInf > DbtrAgt >  FinInstnId > BIC','Bank Swift Code',0,'SWIFTNo','','',0,0,1,'20',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','SEPA','','Bank Account Number','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts > General tab > Identification(group) > Bank Account Number ','PmtInf > CdtTrfTxInf > CdtrAcct > Id > Othr > Id','Account Number related to vendor','9','AccountNum','','','3',0,1,'24',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','SEPA','','IBAN','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts > General tab > Identification(group) > IBAN','PmtInf > CdtTrfTxInf > CdtrAcct > Id > IBAN','IBAN related to vendor','9','BankIBAN','','','3',0,1,'34',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','SEPA','','Routing number','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts > General tab > Identification(group) > Routing number','PmtInf > CdTrfTxInf > CdtrAgt >  FinInstnId > ClrSysMmbId > MmbId','Routing number related to Vendor','9','RegistrationNum','','',1,1,1,'35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','SEPA','','Swift Code','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts > General tab > Identification(group) > Swift Code','PmtInf > CdTrfTxInf > CdtrAgt > FinInstnId > BIC','Swift Code related to Vendor','9','SWIFTNo','','','3',0,1,'20',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','SEPA','','Name','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Name','PmtInf > CdTrfTxInf > Cdtr > Nm','Name related to Vendor','16','WBeneName','','',0,0,1,'70',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','SEPA','','ZIP/Postal Code ','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary (group) > Zip/postal Code','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > PstCd','Vendor Zip/postal code','16','WBeneZipPostal','','',1,1,'',0,0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','SEPA','','City','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > City','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > TwnNm','City related to vendor','16','WBeneCity','','',1,1,1,'35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','SEPA','','State/province','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > State/province','PmtInf > CdTrfTxInf > Cdtr> PstlAdr> CtrySubDvsn','Country Sub Division related to vendor','16','WBeneState','','',1,1,1,'35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','SEPA','','Country/Region','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Country','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > Ctry','Country related to vendor','16','WBeneCountryRegionId','','',1,1,'',0,0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','SEPA','','Address 1','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Address 1','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > AdrLine','Address related to vendor','16','WBeneAddr','','',1,1,1,'35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','SEPA','','Address 2','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Address 2','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > AdrLine','Address related to vendor','16','WBeneAddr2','','',1,1,1,'35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','SEPA','','Swift code','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 2(Fast tab) > Intermediary bank(group) > Swift code','PmtInf > CdTrfTxInf > IntrmyAgt1 > FinInstnId > BIC','Intermediary Swift number related to vendor','16','WIntBankSwift','','',1,1,1,'9',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','DOM-INT','','Name','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > Name','PmtInf > Dbtr > Nm','Name related to bank','15','WOrdPartyName','','',0,1,1,'70',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','DOM-INT','','Country code','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > Country/region','PmtInf > Dbtr > PstlAdr > Ctry','Country related to bank','15','WOrdPartyCountryRegionId','','',1,1,'',0,0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','DOM-INT','','Address 1','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > Address 1','PmtInf > Dbtr > PstlAdr > AdrLine > Address','Address related to bank','15','WOrdPartyAddr','','',1,1,1,'70',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','DOM-INT','','Address 2','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > Address 2','PmtInf > Dbtr > PstlAdr > AdrLine > Address','Address related to bank','15','WOrdPartyAddr2','','',1,1,1,'35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','DOM-INT','','City','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > City','PmtInf > Dbtr > PstlAdr > AdrLine','City related to bank','15','WOrdPartyCity','','',1,1,1,'35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','DOM-INT','','Bank Zip/postal code','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > Zip/postal code','PmtInf > Dbtr > PstlAdr > AdrLine','ZipCode related to bank','15','WOrdPartyZipCode','','',1,1,'',0,0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','DOM-INT','','IBAN','Cash and bank management > Select bank account > edit > Additional Identification (fast tab) > IBAN','PmtInf > DbtrAcct > Id > IBAN','IBAN related to Bank',0,'IBAN','','','3',0,1,'24',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','DOM-INT','','Bank Account Number','Cash and bank management > Select bank account > edit > General (fast tab) Bank Account Number','PmtInf > DbtrAcct > Id > Othr > Id','Bank account number ',0,'AccountNum','','','3',0,1,'24',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','DOM-INT','','Swift Code','Cash and bank management > Select bank account > edit > Additional identification (fast tab) > Swift Code','PmtInf > DbtrAgt >  FinInstnId > BIC','Bank Swift Code',0,'SWIFTNo','','',0,0,1,'20',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','DOM-INT','','Bank Account Number','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts > General tab > Identification(group) > Bank Account Number ','PmtInf > CdtTrfTxInf > CdtrAcct > Id > Othr > Id','Account Number related to vendor','9','AccountNum','','','3',0,1,'24',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','DOM-INT','','IBAN','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts > General tab > Identification(group) > IBAN','PmtInf > CdtTrfTxInf > CdtrAcct > Id > IBAN','IBAN related to vendor','9','BankIBAN','','','3',0,1,'34',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','DOM-INT','','Routing number','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts > General tab > Identification(group) > Routing number','PmtInf > CdTrfTxInf > CdtrAgt >  FinInstnId > ClrSysMmbId > MmbId','Routing number related to Vendor','9','RegistrationNum','','','3',0,1,'35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','DOM-INT','','Swift Code','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts > General tab > Identification(group) > Swift Code','PmtInf > CdTrfTxInf > CdtrAgt > FinInstnId > BIC','Swift Code related to Vendor','9','SWIFTNo','','','3',0,1,'20',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','DOM-INT','','Name','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Name','PmtInf > CdTrfTxInf > Cdtr > Nm','Name related to Vendor','16','WBeneName','','',0,0,1,'70',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','DOM-INT','','ZIP/Postal Code ','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary (group) > Zip/postal Code','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > PstCd','Vendor Zip/postal code','16','WBeneZipPostal','','',1,1,'',0,0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','DOM-INT','','City','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > City','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > TwnNm','City related to vendor','16','WBeneCity','','',1,1,1,'35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','DOM-INT','','State/province','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > State/province','PmtInf > CdTrfTxInf > Cdtr> PstlAdr> CtrySubDvsn','Country Sub Division related to vendor','16','WBeneState','','',1,1,1,'35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','DOM-INT','','Country/Region','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Country','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > Ctry','Country related to vendor','16','WBeneCountryRegionId','','',1,1,'',0,0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','DOM-INT','','Address 1','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Address 1','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > AdrLine','Address related to vendor','16','WBeneAddr','','',1,1,1,'35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','DOM-INT','','Address 2','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Address 2','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > AdrLine','Address related to vendor','16','WBeneAddr2','','',1,1,1,'35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','DOM-INT','','Swift code','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 2(Fast tab) > Intermediary bank(group) > Swift code','PmtInf > CdTrfTxInf > IntrmyAgt1 > FinInstnId > BIC','Intermediary Swift number related to vendor','16','WIntBankSwift','','',1,1,1,'9',0,0]);

        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','SEPA','','Name','TAS > Set up > Bank account > Select Customer reimbursement > Wire/IAT ordering party(Fast tab) > Name','PmtInf > Dbtr > Nm','Name related to bank','37','WOrdPartyName','','',0,1,1,'70',0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','SEPA','','Country/Region','TAS > Set up > Bank account > Select Customer reimbursement> Wire/IAT ordering party(Fast tab) > Country/region','PmtInf > Dbtr > PstlAdr > Ctry','Country related to bank','37','WOrdPartyCountryRegionId','','',1,1,'',0,0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','SEPA','','Address 1','TAS > Set up > Bank account > Select Customer reimbursement> Wire/IAT ordering party(Fast tab) > Address 1','PmtInf > Dbtr > PstlAdr > AdrLine > Address','Address related to bank','37','WOrdPartyAddr','','',1,1,1,'35',0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','SEPA','','Address 2','TAS > Set up > Bank account > Select Customer reimbursement> Wire/IAT ordering party(Fast tab) > Address 2','PmtInf > Dbtr > PstlAdr > AdrLine > Address','Address related to bank','37','WOrdPartyAddr2','','',1,1,1,'35',0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','SEPA','','City','TAS > Set up > Bank account > Select Customer reimbursement> Wire/IAT ordering party(Fast tab) > City','PmtInf > Dbtr > PstlAdr > AdrLine','City related to bank','37','WOrdPartyCity','','',1,1,1,'35',0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','SEPA','','Zip/postal code','TAS > Set up > Bank account > Select Customer reimbursement> Wire/IAT ordering party(Fast tab) > Zip/postal code','PmtInf > Dbtr > PstlAdr > AdrLine','ZipCode related to bank','37','WOrdPartyZipCode','','',1,1,'',0,0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','SEPA','','IBAN','Cash and bank management > Select bank account > edit > Additional Identification (fast tab) > IBAN','PmtInf > DbtrAcct > Id > IBAN','IBAN related to Bank',0,'IBAN','','','3',0,1,'24',0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','SEPA','','Bank Account Number','Cash and bank management > Select bank account > edit > General (fast tab) Bank Account Number','PmtInf > DbtrAcct > Id > Othr > Id','Bank account number ',0,'AccountNum','','','3',0,1,'24',0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','SEPA','','Swift Code','Cash and bank management > Select bank account > edit > Additional identification (fast tab) > Swift Code','PmtInf > DbtrAgt >  FinInstnId > BIC','Bank Swift Code',0,'SWIFTNo','','',0,0,1,'20',0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','SEPA','','Bank Account Number','TAS > Common > Customer eBanking details > Customer reimbursement > Payment specifications > Customer bank accounts > General tab > Identification(group) > Bank Account Number','PmtInf > CdtTrfTxInf > CdtrAcct > Id > Othr > Id','Account Number related to Customer bank',1,'AccountNum','','','3',0,1,'24',0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','SEPA','','IBAN','TAS > Common > Customer eBanking details > Customer reimbursement > Payment specifications > Customer bank accounts > General tab > Additional Identification (fast tab) > IBAN','PmtInf > CdtTrfTxInf > CdtrAcct > Id > IBAN','IBAN related to Customer bank',1,'BankIBAN','','','3',0,1,'34',0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','SEPA','','Routing number','TAS > Common > Customer eBanking details > Customer reimbursement > Payment specifications > Customer bank accounts > General tab > Identification(group) > Routing number','PmtInf > CdTrfTxInf > CdtrAgt >  FinInstnId > ClrSysMmbId > MmbId','Routing number related to Customer',1,'RegistrationNum','','',1,1,1,'35',0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','SEPA','','Swift Code','TAS > Common > Customer eBanking details > Customer reimbursement > Customer bank accounts > General tab > Identification(group) > Swift Code','PmtInf > CdTrfTxInf > CdtrAgt > FinInstnId > BIC','Swift Code related to Customer',1,'SWIFTNo','','','3',0,1,'20',0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','SEPA','','Name','TAS > Common > Customer eBanking details > Customer reimbursement > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Name','PmtInf > CdTrfTxInf > Cdtr > Nm','Name related to Customer','35','WBeneName','','',0,0,1,'70',0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','SEPA','','ZIP/Postal Code','TAS > Common > Customer eBanking details > Customer reimbursement > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > ZIP/Postal Code','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > PstlAdr > PstCd','ZIP/Postal code  related to Customer','35','WBeneZipPostal','','',1,1,'',0,0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','SEPA','','City','TAS > Common > Customer eBanking details > Customer reimbursement > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > City','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > PstlAdr > TwnNm','Customer city','35','WBeneCity','','',1,1,1,'35',0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','SEPA','','State/province','TAS > Common > Customer eBanking details > Customer reimbursement > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > State/Province','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > PstlAdr > CtrySubDvsn','Customer state','35','WBeneState','','',1,1,1,'35',0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','SEPA','','Country/Region','TAS > Common > Customer eBanking details > Customer reimbursement > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Country','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > Ctry','Country related to Customer','35','WBeneCountryRegionId','','',1,1,'',0,0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','SEPA','','Address 1','TAS > Common > Customer eBanking details > Customer reimbursement > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Address 1','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > StrtNm','Address related to Customer','35','WBeneAddr','','',1,1,1,'35',0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','SEPA','','Address 2','TAS > Common > Customer eBanking details > Customer reimbursement > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Address 2','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > BldgNb','Address related to Customer','35','WBeneAddr2','','',1,1,1,'35',0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','DOM-INT','','Name','TAS > Set up > Bank account > Select Customer reimbursement > Wire/IAT ordering party(Fast tab) > Name','PmtInf > Dbtr > Nm','Name related to bank','37','WOrdPartyName','','',0,1,1,'70',0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','DOM-INT','','Country/Region','TAS > Set up > Bank account > Select Customer reimbursement> Wire/IAT ordering party(Fast tab) > Country/region','PmtInf > Dbtr > PstlAdr > Ctry','Country related to bank','37','WOrdPartyCountryRegionId','','',1,1,'',0,0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','DOM-INT','','Address 1','TAS > Set up > Bank account > Select Customer reimbursement> Wire/IAT ordering party(Fast tab) > Address 1','PmtInf > Dbtr > PstlAdr > AdrLine > Address','Address related to bank','37','WOrdPartyAddr','','',1,1,1,'70',0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','DOM-INT','','Address 2','TAS > Set up > Bank account > Select Customer reimbursement> Wire/IAT ordering party(Fast tab) > Address 2','PmtInf > Dbtr > PstlAdr > AdrLine > Address','Address related to bank','37','WOrdPartyAddr2','','',1,1,1,'35',0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','DOM-INT','','City','TAS > Set up > Bank account > Select Customer reimbursement> Wire/IAT ordering party(Fast tab) > City','PmtInf > Dbtr > PstlAdr > AdrLine','City related to bank','37','WOrdPartyCity','','',1,1,1,'35',0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','DOM-INT','','Zip/postal code','TAS > Set up > Bank account > Select Customer reimbursement> Wire/IAT ordering party(Fast tab) > Zip/postal code','PmtInf > Dbtr > PstlAdr > AdrLine','ZipCode related to bank','37','WOrdPartyZipCode','','',1,1,'',0,0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','DOM-INT','','IBAN','Cash and bank management > Select bank account > edit > Additional Identification (fast tab) > IBAN','PmtInf > DbtrAcct > Id > IBAN','IBAN related to Bank',0,'IBAN','','','3',0,1,'24',0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','DOM-INT','','Bank Account Number','Cash and bank management > Select bank account > edit > General (fast tab) Bank Account Number','PmtInf > DbtrAcct > Id > Othr > Id','Bank account number ',0,'AccountNum','','','3',0,1,'24',0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','DOM-INT','','Swift Code','Cash and bank management > Select bank account > edit > Additional identification (fast tab) > Swift Code','PmtInf > DbtrAgt >  FinInstnId > BIC','Bank Swift Code',0,'SWIFTNo','','',0,0,1,'20',0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','DOM-INT','','Bank Account Number','TAS > Common > Customer eBanking details > Customer reimbursement > Payment specifications > Customer bank accounts > General tab > Identification(group) > Bank Account Number','PmtInf > CdtTrfTxInf > CdtrAcct > Id > Othr > Id','Account Number related to Customer bank',1,'AccountNum','','','3',0,1,'24',0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','DOM-INT','','IBAN','TAS > Common > Customer eBanking details > Customer reimbursement > Payment specifications > Customer bank accounts > General tab > Additional Identification (fast tab) > IBAN','PmtInf > CdtTrfTxInf > CdtrAcct > Id > IBAN','IBAN related to Customer bank',1,'BankIBAN','','','3',0,1,'34',0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','DOM-INT','','Routing number','TAS > Common > Customer eBanking details > Customer reimbursement > Payment specifications > Customer bank accounts > General tab > Identification(group) > Routing number','PmtInf > CdTrfTxInf > CdtrAgt >  FinInstnId > ClrSysMmbId > MmbId','Routing number related to Customer',1,'RegistrationNum','','','3',0,1,'35',0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','DOM-INT','','Swift Code','TAS > Common > Customer eBanking details > Customer reimbursement > Customer bank accounts > General tab > Identification(group) > Swift Code','PmtInf > CdTrfTxInf > CdtrAgt > FinInstnId > BIC','Swift Code related to Customer',1,'SWIFTNo','','','3',0,1,'20',0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','DOM-INT','','Name','TAS > Common > Customer eBanking details > Customer reimbursement > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Name','PmtInf > CdTrfTxInf > Cdtr > Nm','Name related to Customer','35','WBeneName','','',0,0,1,'70',0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','DOM-INT','','ZIP/Postal Code','TAS > Common > Customer eBanking details > Customer reimbursement > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > ZIP/Postal Code','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > PstlAdr > PstCd','ZIP/Postal code  related to Customer','35','WBeneZipPostal','','',1,1,'',0,0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','DOM-INT','','City','TAS > Common > Customer eBanking details > Customer reimbursement > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > City','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > PstlAdr > TwnNm','Customer city','35','WBeneCity','','',1,1,1,'35',0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','DOM-INT','','State/province','TAS > Common > Customer eBanking details > Customer reimbursement > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > State/Province','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > PstlAdr > CtrySubDvsn','Customer state','35','WBeneState','','',1,1,1,'35',0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','DOM-INT','','Country/Region','TAS > Common > Customer eBanking details > Customer reimbursement > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Country','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > Ctry','Country related to Customer','35','WBeneCountryRegionId','','',1,1,'',0,0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','DOM-INT','','Address 1','TAS > Common > Customer eBanking details > Customer reimbursement > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Address 1','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > StrtNm','Address related to Customer','35','WBeneAddr','','',1,1,1,'35',0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','DOM-INT','','Address 2','TAS > Common > Customer eBanking details > Customer reimbursement > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Address 2','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > BldgNb','Address related to Customer','35','WBeneAddr2','','',1,1,1,'35',0,6]);

        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','DOM-EXP','','Name','TAS > Set up > Bank account > Select Customer reimbursement > Wire/IAT ordering party(Fast tab) > Name','PmtInf > Dbtr > Nm','Name related to bank','37','WOrdPartyName','','',0,1,1,'70',0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','DOM-EXP','','Country/Region','TAS > Set up > Bank account > Select Customer reimbursement> Wire/IAT ordering party(Fast tab) > Country/region','PmtInf > Dbtr > PstlAdr > Ctry','Country related to bank','37','WOrdPartyCountryRegionId','','',1,1,'',0,0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','DOM-EXP','','Address 1','TAS > Set up > Bank account > Select Customer reimbursement> Wire/IAT ordering party(Fast tab) > Address 1','PmtInf > Dbtr > PstlAdr > AdrLine > Address','Address related to bank','37','WOrdPartyAddr','','',1,1,1,'70',0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','DOM-EXP','','Address 2','TAS > Set up > Bank account > Select Customer reimbursement> Wire/IAT ordering party(Fast tab) > Address 2','PmtInf > Dbtr > PstlAdr > AdrLine > Address','Address related to bank','37','WOrdPartyAddr2','','',1,1,1,'35',0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','DOM-EXP','','City','TAS > Set up > Bank account > Select Customer reimbursement> Wire/IAT ordering party(Fast tab) > City','PmtInf > Dbtr > PstlAdr > AdrLine','City related to bank','37','WOrdPartyCity','','',1,1,1,'35',0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','DOM-EXP','','Zip/postal code','TAS > Set up > Bank account > Select Customer reimbursement> Wire/IAT ordering party(Fast tab) > Zip/postal code','PmtInf > Dbtr > PstlAdr > AdrLine','ZipCode related to bank','37','WOrdPartyZipCode','','',1,1,'',0,0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','DOM-EXP','','IBAN','Cash and bank management > Select bank account > edit > Additional Identification (fast tab) > IBAN','PmtInf > DbtrAcct > Id > IBAN','IBAN related to Bank',0,'IBAN','','','3',0,1,'24',0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','DOM-EXP','','Bank Account Number','Cash and bank management > Select bank account > edit > General (fast tab) Bank Account Number','PmtInf > DbtrAcct > Id > Othr > Id','Bank account number ',0,'AccountNum','','','3',0,1,'24',0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','DOM-EXP','','Swift Code','Cash and bank management > Select bank account > edit > Additional identification (fast tab) > Swift Code','PmtInf > DbtrAgt >  FinInstnId > BIC','Bank Swift Code',0,'SWIFTNo','','',0,0,1,'20',0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','DOM-EXP','','Bank Account Number','TAS > Common > Customer eBanking details > Customer reimbursement > Payment specifications > Customer bank accounts > General tab > Identification(group) > Bank Account Number','PmtInf > CdtTrfTxInf > CdtrAcct > Id > Othr > Id','Account Number related to Customer bank',1,'AccountNum','','','3',0,1,'24',0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','DOM-EXP','','IBAN','TAS > Common > Customer eBanking details > Customer reimbursement > Payment specifications > Customer bank accounts > General tab > Additional Identification (fast tab) > IBAN','PmtInf > CdtTrfTxInf > CdtrAcct > Id > IBAN','IBAN related to Customer bank',1,'BankIBAN','','','3',0,1,'34',0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','DOM-EXP','','Routing number','TAS > Common > Customer eBanking details > Customer reimbursement > Payment specifications > Customer bank accounts > General tab > Identification(group) > Routing number','PmtInf > CdTrfTxInf > CdtrAgt >  FinInstnId > ClrSysMmbId > MmbId','Routing number related to Customer',1,'RegistrationNum','','','3',0,1,'35',0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','DOM-EXP','','Swift Code','TAS > Common > Customer eBanking details > Customer reimbursement > Customer bank accounts > General tab > Identification(group) > Swift Code','PmtInf > CdTrfTxInf > CdtrAgt > FinInstnId > BIC','Swift Code related to Customer',1,'SWIFTNo','','','3',0,1,'20',0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','DOM-EXP','','Name','TAS > Common > Customer eBanking details > Customer reimbursement > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Name','PmtInf > CdTrfTxInf > Cdtr > Nm','Name related to Customer','35','WBeneName','','',0,0,1,'70',0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','DOM-EXP','','ZIP/Postal Code','TAS > Common > Customer eBanking details > Customer reimbursement > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > ZIP/Postal Code','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > PstlAdr > PstCd','ZIP/Postal code  related to Customer','35','WBeneZipPostal','','',1,1,'',0,0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','DOM-EXP','','City','TAS > Common > Customer eBanking details > Customer reimbursement > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > City','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > PstlAdr > TwnNm','Customer city','35','WBeneCity','','',1,1,1,'35',0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','DOM-EXP','','State/province','TAS > Common > Customer eBanking details > Customer reimbursement > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > State/Province','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > PstlAdr > CtrySubDvsn','Customer state','35','WBeneState','','',1,1,1,'35',0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','DOM-EXP','','Country/Region','TAS > Common > Customer eBanking details > Customer reimbursement > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Country','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > Ctry','Country related to Customer','35','WBeneCountryRegionId','','',1,1,'',0,0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','DOM-EXP','','Address 1','TAS > Common > Customer eBanking details > Customer reimbursement > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Address 1','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > StrtNm','Address related to Customer','35','WBeneAddr','','',1,1,1,'35',0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','DOM-EXP','','Address 2','TAS > Common > Customer eBanking details > Customer reimbursement > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Address 2','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > BldgNb','Address related to Customer','35','WBeneAddr2','','',1,1,1,'35',0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','INTL-ORD','','Name','TAS > Set up > Bank account > Select Customer reimbursement > Wire/IAT ordering party(Fast tab) > Name','PmtInf > Dbtr > Nm','Name related to bank','37','WOrdPartyName','','',0,1,1,'70',0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','INTL-ORD','','Country/Region','TAS > Set up > Bank account > Select Customer reimbursement> Wire/IAT ordering party(Fast tab) > Country/region','PmtInf > Dbtr > PstlAdr > Ctry','Country related to bank','37','WOrdPartyCountryRegionId','','',1,1,'',0,0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','INTL-ORD','','Address 1','TAS > Set up > Bank account > Select Customer reimbursement> Wire/IAT ordering party(Fast tab) > Address 1','PmtInf > Dbtr > PstlAdr > AdrLine > Address','Address related to bank','37','WOrdPartyAddr','','',1,1,1,'70',0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','INTL-ORD','','Address 2','TAS > Set up > Bank account > Select Customer reimbursement> Wire/IAT ordering party(Fast tab) > Address 2','PmtInf > Dbtr > PstlAdr > AdrLine > Address','Address related to bank','37','WOrdPartyAddr2','','',1,1,1,'35',0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','INTL-ORD','','City','TAS > Set up > Bank account > Select Customer reimbursement> Wire/IAT ordering party(Fast tab) > City','PmtInf > Dbtr > PstlAdr > AdrLine','City related to bank','37','WOrdPartyCity','','',1,1,1,'35',0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','INTL-ORD','','Zip/postal code','TAS > Set up > Bank account > Select Customer reimbursement> Wire/IAT ordering party(Fast tab) > Zip/postal code','PmtInf > Dbtr > PstlAdr > AdrLine','ZipCode related to bank','37','WOrdPartyZipCode','','',1,1,'',0,0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','INTL-ORD','','IBAN','Cash and bank management > Select bank account > edit > Additional Identification (fast tab) > IBAN','PmtInf > DbtrAcct > Id > IBAN','IBAN related to Bank',0,'IBAN','','','3',0,1,'24',0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','INTL-ORD','','Bank Account Number','Cash and bank management > Select bank account > edit > General (fast tab) Bank Account Number','PmtInf > DbtrAcct > Id > Othr > Id','Bank account number ',0,'AccountNum','','','3',0,1,'24',0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','INTL-ORD','','Swift Code','Cash and bank management > Select bank account > edit > Additional identification (fast tab) > Swift Code','PmtInf > DbtrAgt >  FinInstnId > BIC','Bank Swift Code',0,'SWIFTNo','','',0,0,1,'20',0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','INTL-ORD','','Bank Account Number','TAS > Common > Customer eBanking details > Customer reimbursement > Payment specifications > Customer bank accounts > General tab > Identification(group) > Bank Account Number','PmtInf > CdtTrfTxInf > CdtrAcct > Id > Othr > Id','Account Number related to Customer bank',1,'AccountNum','','','3',0,1,'24',0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','INTL-ORD','','IBAN','TAS > Common > Customer eBanking details > Customer reimbursement > Payment specifications > Customer bank accounts > General tab > Additional Identification (fast tab) > IBAN','PmtInf > CdtTrfTxInf > CdtrAcct > Id > IBAN','IBAN related to Customer bank',1,'BankIBAN','','','3',0,1,'34',0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','INTL-ORD','','Routing number','TAS > Common > Customer eBanking details > Customer reimbursement > Payment specifications > Customer bank accounts > General tab > Identification(group) > Routing number','PmtInf > CdTrfTxInf > CdtrAgt >  FinInstnId > ClrSysMmbId > MmbId','Routing number related to Customer',1,'RegistrationNum','','','3',0,1,'35',0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','INTL-ORD','','Swift Code','TAS > Common > Customer eBanking details > Customer reimbursement > Customer bank accounts > General tab > Identification(group) > Swift Code','PmtInf > CdTrfTxInf > CdtrAgt > FinInstnId > BIC','Swift Code related to Customer',1,'SWIFTNo','','','3',0,1,'20',0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','INTL-ORD','','Name','TAS > Common > Customer eBanking details > Customer reimbursement > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Name','PmtInf > CdTrfTxInf > Cdtr > Nm','Name related to Customer','35','WBeneName','','',0,0,1,'70',0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','INTL-ORD','','ZIP/Postal Code','TAS > Common > Customer eBanking details > Customer reimbursement > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > ZIP/Postal Code','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > PstlAdr > PstCd','ZIP/Postal code  related to Customer','35','WBeneZipPostal','','',1,1,'',0,0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','INTL-ORD','','City','TAS > Common > Customer eBanking details > Customer reimbursement > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > City','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > PstlAdr > TwnNm','Customer city','35','WBeneCity','','',1,1,1,'35',0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','INTL-ORD','','State/province','TAS > Common > Customer eBanking details > Customer reimbursement > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > State/Province','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > PstlAdr > CtrySubDvsn','Customer state','35','WBeneState','','',1,1,1,'35',0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','INTL-ORD','','Country/Region','TAS > Common > Customer eBanking details > Customer reimbursement > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Country','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > Ctry','Country related to Customer','35','WBeneCountryRegionId','','',1,1,'',0,0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','INTL-ORD','','Address 1','TAS > Common > Customer eBanking details > Customer reimbursement > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Address 1','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > StrtNm','Address related to Customer','35','WBeneAddr','','',1,1,1,'35',0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','INTL-ORD','','Address 2','TAS > Common > Customer eBanking details > Customer reimbursement > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Address 2','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > BldgNb','Address related to Customer','35','WBeneAddr2','','',1,1,1,'35',0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','DOM-ORD','','Name','TAS > Set up > Bank account > Select Customer reimbursement > Wire/IAT ordering party(Fast tab) > Name','PmtInf > Dbtr > Nm','Name related to bank','37','WOrdPartyName','','',0,1,1,'70',0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','DOM-ORD','','Country/Region','TAS > Set up > Bank account > Select Customer reimbursement> Wire/IAT ordering party(Fast tab) > Country/region','PmtInf > Dbtr > PstlAdr > Ctry','Country related to bank','37','WOrdPartyCountryRegionId','','',1,1,'',0,0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','DOM-ORD','','Address 1','TAS > Set up > Bank account > Select Customer reimbursement> Wire/IAT ordering party(Fast tab) > Address 1','PmtInf > Dbtr > PstlAdr > AdrLine > Address','Address related to bank','37','WOrdPartyAddr','','',1,1,1,'70',0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','DOM-ORD','','Address 2','TAS > Set up > Bank account > Select Customer reimbursement> Wire/IAT ordering party(Fast tab) > Address 2','PmtInf > Dbtr > PstlAdr > AdrLine > Address','Address related to bank','37','WOrdPartyAddr2','','',1,1,1,'35',0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','DOM-ORD','','City','TAS > Set up > Bank account > Select Customer reimbursement> Wire/IAT ordering party(Fast tab) > City','PmtInf > Dbtr > PstlAdr > AdrLine','City related to bank','37','WOrdPartyCity','','',1,1,1,'35',0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','DOM-ORD','','Zip/postal code','TAS > Set up > Bank account > Select Customer reimbursement> Wire/IAT ordering party(Fast tab) > Zip/postal code','PmtInf > Dbtr > PstlAdr > AdrLine','ZipCode related to bank','37','WOrdPartyZipCode','','',1,1,'',0,0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','DOM-ORD','','IBAN','Cash and bank management > Select bank account > edit > Additional Identification (fast tab) > IBAN','PmtInf > DbtrAcct > Id > IBAN','IBAN related to Bank',0,'IBAN','','','3',0,1,'24',0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','DOM-ORD','','Bank Account Number','Cash and bank management > Select bank account > edit > General (fast tab) Bank Account Number','PmtInf > DbtrAcct > Id > Othr > Id','Bank account number ',0,'AccountNum','','','3',0,1,'24',0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','DOM-ORD','','Swift Code','Cash and bank management > Select bank account > edit > Additional identification (fast tab) > Swift Code','PmtInf > DbtrAgt >  FinInstnId > BIC','Bank Swift Code',0,'SWIFTNo','','',0,0,1,'20',0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','DOM-ORD','','Bank Account Number','TAS > Common > Customer eBanking details > Customer reimbursement > Payment specifications > Customer bank accounts > General tab > Identification(group) > Bank Account Number','PmtInf > CdtTrfTxInf > CdtrAcct > Id > Othr > Id','Account Number related to Customer bank',1,'AccountNum','','','3',0,1,'24',0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','DOM-ORD','','IBAN','TAS > Common > Customer eBanking details > Customer reimbursement > Payment specifications > Customer bank accounts > General tab > Additional Identification (fast tab) > IBAN','PmtInf > CdtTrfTxInf > CdtrAcct > Id > IBAN','IBAN related to Customer bank',1,'BankIBAN','','','3',0,1,'34',0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','DOM-ORD','','Routing number','TAS > Common > Customer eBanking details > Customer reimbursement > Payment specifications > Customer bank accounts > General tab > Identification(group) > Routing number','PmtInf > CdTrfTxInf > CdtrAgt >  FinInstnId > ClrSysMmbId > MmbId','Routing number related to Customer',1,'RegistrationNum','','','3',0,1,'35',0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','DOM-ORD','','Swift Code','TAS > Common > Customer eBanking details > Customer reimbursement > Customer bank accounts > General tab > Identification(group) > Swift Code','PmtInf > CdTrfTxInf > CdtrAgt > FinInstnId > BIC','Swift Code related to Customer',1,'SWIFTNo','','','3',0,1,'20',0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','DOM-ORD','','Name','TAS > Common > Customer eBanking details > Customer reimbursement > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Name','PmtInf > CdTrfTxInf > Cdtr > Nm','Name related to Customer','35','WBeneName','','',0,0,1,'70',0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','DOM-ORD','','ZIP/Postal Code','TAS > Common > Customer eBanking details > Customer reimbursement > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > ZIP/Postal Code','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > PstlAdr > PstCd','ZIP/Postal code  related to Customer','35','WBeneZipPostal','','',1,1,'',0,0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','DOM-ORD','','City','TAS > Common > Customer eBanking details > Customer reimbursement > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > City','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > PstlAdr > TwnNm','Customer city','35','WBeneCity','','',1,1,1,'35',0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','DOM-ORD','','State/province','TAS > Common > Customer eBanking details > Customer reimbursement > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > State/Province','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > PstlAdr > CtrySubDvsn','Customer state','35','WBeneState','','',1,1,1,'35',0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','DOM-ORD','','Country/Region','TAS > Common > Customer eBanking details > Customer reimbursement > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Country','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > Ctry','Country related to Customer','35','WBeneCountryRegionId','','',1,1,'',0,0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','DOM-ORD','','Address 1','TAS > Common > Customer eBanking details > Customer reimbursement > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Address 1','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > StrtNm','Address related to Customer','35','WBeneAddr','','',1,1,1,'35',0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','DOM-ORD','','Address 2','TAS > Common > Customer eBanking details > Customer reimbursement > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Address 2','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > BldgNb','Address related to Customer','35','WBeneAddr2','','',1,1,1,'35',0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','INTL-EXP','','Name','TAS > Set up > Bank account > Select Customer reimbursement > Wire/IAT ordering party(Fast tab) > Name','PmtInf > Dbtr > Nm','Name related to bank','37','WOrdPartyName','','',0,1,1,'70',0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','INTL-EXP','','Country/Region','TAS > Set up > Bank account > Select Customer reimbursement> Wire/IAT ordering party(Fast tab) > Country/region','PmtInf > Dbtr > PstlAdr > Ctry','Country related to bank','37','WOrdPartyCountryRegionId','','',1,1,'',0,0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','INTL-EXP','','Address 1','TAS > Set up > Bank account > Select Customer reimbursement> Wire/IAT ordering party(Fast tab) > Address 1','PmtInf > Dbtr > PstlAdr > AdrLine > Address','Address related to bank','37','WOrdPartyAddr','','',1,1,1,'70',0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','INTL-EXP','','Address 2','TAS > Set up > Bank account > Select Customer reimbursement> Wire/IAT ordering party(Fast tab) > Address 2','PmtInf > Dbtr > PstlAdr > AdrLine > Address','Address related to bank','37','WOrdPartyAddr2','','',1,1,1,'35',0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','INTL-EXP','','City','TAS > Set up > Bank account > Select Customer reimbursement> Wire/IAT ordering party(Fast tab) > City','PmtInf > Dbtr > PstlAdr > AdrLine','City related to bank','37','WOrdPartyCity','','',1,1,1,'35',0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','INTL-EXP','','Zip/postal code','TAS > Set up > Bank account > Select Customer reimbursement> Wire/IAT ordering party(Fast tab) > Zip/postal code','PmtInf > Dbtr > PstlAdr > AdrLine','ZipCode related to bank','37','WOrdPartyZipCode','','',1,1,'',0,0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','INTL-EXP','','IBAN','Cash and bank management > Select bank account > edit > Additional Identification (fast tab) > IBAN','PmtInf > DbtrAcct > Id > IBAN','IBAN related to Bank',0,'IBAN','','','3',0,1,'24',0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','INTL-EXP','','Bank Account Number','Cash and bank management > Select bank account > edit > General (fast tab) Bank Account Number','PmtInf > DbtrAcct > Id > Othr > Id','Bank account number ',0,'AccountNum','','','3',0,1,'24',0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','INTL-EXP','','Swift Code','Cash and bank management > Select bank account > edit > Additional identification (fast tab) > Swift Code','PmtInf > DbtrAgt >  FinInstnId > BIC','Bank Swift Code',0,'SWIFTNo','','',0,0,1,'20',0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','INTL-EXP','','Bank Account Number','TAS > Common > Customer eBanking details > Customer reimbursement > Payment specifications > Customer bank accounts > General tab > Identification(group) > Bank Account Number','PmtInf > CdtTrfTxInf > CdtrAcct > Id > Othr > Id','Account Number related to Customer bank',1,'AccountNum','','','3',0,1,'24',0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','INTL-EXP','','IBAN','TAS > Common > Customer eBanking details > Customer reimbursement > Payment specifications > Customer bank accounts > General tab > Additional Identification (fast tab) > IBAN','PmtInf > CdtTrfTxInf > CdtrAcct > Id > IBAN','IBAN related to Customer bank',1,'BankIBAN','','','3',0,1,'34',0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','INTL-EXP','','Routing number','TAS > Common > Customer eBanking details > Customer reimbursement > Payment specifications > Customer bank accounts > General tab > Identification(group) > Routing number','PmtInf > CdTrfTxInf > CdtrAgt >  FinInstnId > ClrSysMmbId > MmbId','Routing number related to Customer',1,'RegistrationNum','','','3',0,1,'35',0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','INTL-EXP','','Swift Code','TAS > Common > Customer eBanking details > Customer reimbursement > Customer bank accounts > General tab > Identification(group) > Swift Code','PmtInf > CdTrfTxInf > CdtrAgt > FinInstnId > BIC','Swift Code related to Customer',1,'SWIFTNo','','','3',0,1,'20',0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','INTL-EXP','','Name','TAS > Common > Customer eBanking details > Customer reimbursement > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Name','PmtInf > CdTrfTxInf > Cdtr > Nm','Name related to Customer','35','WBeneName','','',0,0,1,'70',0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','INTL-EXP','','ZIP/Postal Code','TAS > Common > Customer eBanking details > Customer reimbursement > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > ZIP/Postal Code','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > PstlAdr > PstCd','ZIP/Postal code  related to Customer','35','WBeneZipPostal','','',1,1,'',0,0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','INTL-EXP','','City','TAS > Common > Customer eBanking details > Customer reimbursement > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > City','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > PstlAdr > TwnNm','Customer city','35','WBeneCity','','',1,1,1,'35',0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','INTL-EXP','','State/province','TAS > Common > Customer eBanking details > Customer reimbursement > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > State/Province','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > PstlAdr > CtrySubDvsn','Customer state','35','WBeneState','','',1,1,1,'35',0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','INTL-EXP','','Country/Region','TAS > Common > Customer eBanking details > Customer reimbursement > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Country','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > Ctry','Country related to Customer','35','WBeneCountryRegionId','','',1,1,'',0,0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','INTL-EXP','','Address 1','TAS > Common > Customer eBanking details > Customer reimbursement > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Address 1','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > StrtNm','Address related to Customer','35','WBeneAddr','','',1,1,1,'35',0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','INTL-EXP','','Address 2','TAS > Common > Customer eBanking details > Customer reimbursement > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Address 2','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > BldgNb','Address related to Customer','35','WBeneAddr2','','',1,1,1,'35',0,6]);

        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','RIS','','Name','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > Name','PmtInf > Dbtr > Nm','Name related to bank','15','WOrdPartyName','','',0,1,1,'70',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','RIS','','Country code','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > Country/region','PmtInf > Dbtr > PstlAdr > Ctry','Country related to bank','15','WOrdPartyCountryRegionId','','',1,1,'',0,0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','RIS','','Address 1','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > Address 1','PmtInf > Dbtr > PstlAdr > AdrLine > Address','Address related to bank','15','WOrdPartyAddr','','',1,1,1,'70',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','RIS','','Address 2','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > Address 2','PmtInf > Dbtr > PstlAdr > AdrLine > Address','Address related to bank','15','WOrdPartyAddr2','','',1,1,1,'35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','RIS','','City','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > City','PmtInf > Dbtr > PstlAdr > AdrLine','City related to bank','15','WOrdPartyCity','','',1,1,1,'35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','RIS','','Bank Zip/postal code','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > Zip/postal code','PmtInf > Dbtr > PstlAdr > AdrLine','ZipCode related to bank','15','WOrdPartyZipCode','','',1,1,'',0,0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','RIS','','IBAN','Cash and bank management > Select bank account > edit > Additional Identification (fast tab) > IBAN','PmtInf > DbtrAcct > Id > IBAN','IBAN related to Bank',0,'IBAN','','','3',0,1,'34',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','RIS','','Bank Account Number','Cash and bank management > Select bank account > edit > General (fast tab) Bank Account Number','PmtInf > DbtrAcct > Id > Othr > Id','Bank account number ',0,'AccountNum','','','3',0,1,'34',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','RIS','','Swift Code','Cash and bank management > Select bank account > edit > Additional identification (fast tab) > Swift Code','PmtInf > DbtrAgt >  FinInstnId > BIC','Bank Swift Code',0,'SWIFTNo','','',0,0,1,'20',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','RIS','','Bank Account Number','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts > General tab > Identification(group) > Bank Account Number ','PmtInf > CdtTrfTxInf > CdtrAcct > Id > Othr > Id','Account Number related to vendor','9','AccountNum','','',0,0,1,'34',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','RIS','','Routing number','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts > General tab > Identification(group) > Routing number','PmtInf > CdTrfTxInf > CdtrAgt >  FinInstnId > ClrSysMmbId > MmbId','Routing number related to Vendor','9','RegistrationNum','','','3',0,1,'35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','RIS','','Swift Code','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts > General tab > Identification(group) > Swift Code','PmtInf > CdTrfTxInf > CdtrAgt > FinInstnId > BIC','Swift Code related to Vendor','9','SWIFTNo','','','3',0,1,'20',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','RIS','','Name','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Name','PmtInf > CdTrfTxInf > Cdtr > Nm','Name related to Vendor','16','WBeneName','','',1,0,1,'70',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','RIS','','ZIP/Postal Code ','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary (group) > Zip/postal Code','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > PstCd','Vendor Zip/postal code','16','WBeneZipPostal','','',1,1,'',0,0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','RIS','','City','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > City','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > TwnNm','City related to vendor','16','WBeneCity','','',1,1,1,'35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','RIS','','State/province','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > State/province','PmtInf > CdTrfTxInf > Cdtr> PstlAdr> CtrySubDvsn','Country Sub Division related to vendor','16','WBeneState','','',1,1,1,'35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','RIS','','Country/Region','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Country','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > Ctry','Country related to vendor','16','WBeneCountryRegionId','','',1,1,'',0,0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','RIS','','Address 1','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Address 1','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > AdrLine','Address related to vendor','16','WBeneAddr','','',1,1,1,'35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','RIS','','Address 2','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Address 2','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > AdrLine','Address related to vendor','16','WBeneAddr2','','',1,1,1,'35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','RIS','','Charges','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Other notes(group) > Charges','PmtInf > CdTrfTxInf > ChrgBr','Charge bearer ','16','WChargesIndic','','',1,1,'',0,0,0]);

        //CNP
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','RIS','','Name','TAS > Set up > Bank account > Select Customer reimbursement > Wire/IAT ordering party(Fast tab) > Name','PmtInf > Dbtr > Nm','Name related to bank','37','WOrdPartyName','','',0,1,1,'70',0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','RIS','','Country code','TAS > Set up > Bank account > Select Customer reimbursement > Wire/IAT ordering party(Fast tab) > Country/region','PmtInf > Dbtr > PstlAdr > Ctry','Country related to bank','37','WOrdPartyCountryRegionId','','',1,1,'',0,0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','RIS','','Address 1','TAS > Set up > Bank account > Select Customer reimbursement > Wire/IAT ordering party(Fast tab) > Address 1','PmtInf > Dbtr > PstlAdr > AdrLine > Address','Address related to bank','37','WOrdPartyAddr','','',1,1,1,'70',0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','RIS','','Address 2','TAS > Set up > Bank account > Select Customer reimbursement > Wire/IAT ordering party(Fast tab) > Address 2','PmtInf > Dbtr > PstlAdr > AdrLine > Address','Address related to bank','37','WOrdPartyAddr2','','',1,1,1,'35',0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','RIS','','City','TAS > Set up > Bank account > Select Customer reimbursement > Wire/IAT ordering party(Fast tab) > City','PmtInf > Dbtr > PstlAdr > AdrLine','City related to bank','37','WOrdPartyCity','','',1,1,1,'35',0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','RIS','','Bank Zip/postal code','TAS > Set up > Bank account > Select Customer reimbursement > Wire/IAT ordering party(Fast tab) > Zip/postal code','PmtInf > Dbtr > PstlAdr > AdrLine','ZipCode related to bank','37','WOrdPartyZipCode','','',1,1,'',0,0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','RIS','','IBAN','Cash and bank management > Select bank account > edit > Additional Identification (fast tab) > IBAN','PmtInf > DbtrAcct > Id > IBAN','IBAN related to Bank',0,'IBAN','','','3',0,1,'34',0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','RIS','','Bank Account Number','Cash and bank management > Select bank account > edit > General (fast tab) Bank Account Number','PmtInf > DbtrAcct > Id > Othr > Id','Bank account number ',0,'AccountNum','','','3',0,1,'34',0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','RIS','','Swift Code','Cash and bank management > Select bank account > edit > Additional identification (fast tab) > Swift Code','PmtInf > DbtrAgt >  FinInstnId > BIC','Bank Swift Code',0,'SWIFTNo','','',0,0,1,'20',0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','RIS','','Bank Account Number','TAS > Common > Customer eBanking details > Customer reimbursement > Payment specifications > Customer bank accounts > General tab > Identification(group) > Bank Account Number ','PmtInf > CdtTrfTxInf > CdtrAcct > Id > Othr > Id','Account Number related to Customer','1','AccountNum','','',0,0,1,'34',0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','RIS','','Routing number','TAS > Common > Customer eBanking details > Customer reimbursement > Payment specifications > Customer bank accounts > General tab > Identification(group) > Routing number','PmtInf > CdTrfTxInf > CdtrAgt >  FinInstnId > ClrSysMmbId > MmbId','Routing number related to Customer','1','RegistrationNum','','','3',0,1,'35',0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','RIS','','Swift Code','TAS > Common > Customer eBanking details > Customer reimbursement > Payment specifications > Customer bank accounts > General tab > Identification(group) > Swift Code','PmtInf > CdTrfTxInf > CdtrAgt > FinInstnId > BIC','Swift Code related to Customer','1','SWIFTNo','','','3',0,1,'20',0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','RIS','','Name','TAS > Common > Customer eBanking details > Customer reimbursement > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Name','PmtInf > CdTrfTxInf > Cdtr > Nm','Name related to Customer','35','WBeneName','','',1,0,1,'70',0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','RIS','','ZIP/Postal Code ','TAS > Common > Customer eBanking details > Customer reimbursement > Wire transfer/IAT - 1(Fast tab) > Beneficiary (group) > Zip/postal Code','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > PstCd','Vendor Zip/postal code','35','WBeneZipPostal','','',1,1,'',0,0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','RIS','','City','TAS > Common > Customer eBanking details > Customer reimbursement > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > City','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > TwnNm','City related to Customer','35','WBeneCity','','',1,1,1,'35',0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','RIS','','State/province','TAS > Common > Customer eBanking details > Customer reimbursement > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > State/province','PmtInf > CdTrfTxInf > Cdtr> PstlAdr> CtrySubDvsn','Country Sub Division related to Customer','35','WBeneState','','',1,1,1,'35',0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','RIS','','Country/Region','TAS > Common > Customer eBanking details > Customer reimbursement > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Country','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > Ctry','Country related to Customer','35','WBeneCountryRegionId','','',1,1,'',0,0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','RIS','','Address 1','TAS > Common > Customer eBanking details > Customer reimbursement > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Address 1','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > AdrLine','Address related to Customer','35','WBeneAddr','','',1,1,1,'35',0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','RIS','','Address 2','TAS > Common > Customer eBanking details > Customer reimbursement > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Address 2','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > AdrLine','Address related to Customer','35','WBeneAddr2','','',1,1,1,'35',0,6]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML','RIS','','Charges','TAS > Common > Customer eBanking details > Customer reimbursement > Wire transfer/IAT - 1(Fast tab) > Other notes(group) > Charges','PmtInf > CdTrfTxInf > ChrgBr','Charge bearer ','35','WChargesIndic','','',1,1,'',0,0,6]);
        
        return validationsList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getValidationsMetaData_NL_ING_XML_BE</Name>
				<Source><![CDATA[
    private container getValidationsMetaData_NL_ING_XML_BE()
    {
        container   validationsList;

        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML-BE','NON-EUR','','SWIFT code','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab)> SWIFT code','GrpHdr > InitgPty > Id > BICOrBEI','BIC Or BEI','15','WOrdPartySWIFTNo','','','3','2',1,'11',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML-BE','NON-EUR','','Name','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > Name','PmtInf > Dbtr > Nm','Name related to bank','15','WOrdPartyName','','',0,0,1,'70',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML-BE','NON-EUR','','Address 1','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > Address 1','PmtInf > Dbtr > PstlAdr > AdrLine','Address related to bank','15','WOrdPartyAddr','','',1,'2',1,'35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML-BE','NON-EUR','','Zip/postal code','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > Zip/postal code','PmtInf > Dbtr > PstlAdr > AdrLine','ZipCode related to bank','15','WOrdPartyZipCode','','',1,1,'','',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML-BE','NON-EUR','','City ','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > City','PmtInf > Dbtr > PstlAdr > AdrLine','TownName related to bank','15','WOrdPartyCity','','',1,'2',1,'35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML-BE','NON-EUR','','Country/Region','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > Country/region','PmtInf > Dbtr > PstlAdr > Ctry','Country related to bank','15','WOrdPartyCountryRegionId','','',1,1,'','',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML-BE','NON-EUR','','IBAN','Cash and bank management > Select bank account > edit > Additional identification (fast tab) Bank Account Number','PmtInf > DbtrAcct > Id >IBAN ','IBAN related to Bank',0,'IBAN','','','3','2',1,'34',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML-BE','NON-EUR','','Bank Account Number','Cash and bank management > Select bank account > edit > General (fast tab) Bank Account Number','PmtInf > DbtrAcct > Id > Othr > Id','Bank account number ',0,'AccountNum','','','3','2',1,'35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML-BE','NON-EUR','','Swift Code','Cash and bank management > Select bank account > edit > Additional identification (fast tab) > Swift No','PmtInf > DbtrAgt > FinInstnId > BIC','Swift code related to Bank',0,'SWIFTNo','','',1,'2','8','11',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML-BE','NON-EUR','','Swift Code','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts > General tab > Identification(group) > Swift Code','PmtInf > CdTrfTxInf > CdtrAgt >  FinInstnId > ClrSysMmbId > FinInstnId > BIC','Swift Code related to Vendor','9','SWIFTNo','','',1,0,'8','11',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML-BE','NON-EUR','','Routing number','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts > General tab > Identification(group) > Routing number','PmtInf > CdTrfTxInf > CdtrAgt >  FinInstnId > ClrSysMmbId > MmbId','Routing number related to Vendor','9','RegistrationNum','','','3','2',1,'35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML-BE','NON-EUR','','Vendor Bank Name','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary bank (group) > Name','PmtInf > CdTrfTxInf > CdtrAgt > Nm','Beneficiary Bank Name','16','WBenBankName','','',1,'2',1,'70',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML-BE','NON-EUR','','Vendor Bank Address','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary bank (group) > Address','PmtInf > CdTrfTxInf > CdtrAgt > PstlAdr > AdrLine','Beneficiary Bank address','16','WBenBankAddr','','',1,'2',1,'70',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML-BE','NON-EUR','','Vendor Bank City','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary bank (group) > City','PmtInf > CdTrfTxInf > CdtrAgt > PstlAdr > AdrLine','Beneficiary Bank City','16','WBenBankCity','','',1,'2',1,'35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML-BE','NON-EUR','','Vendor Bank Country','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary bank (group) > Name','PmtInf > CdTrfTxInf > CdtrAgt > Ctry','Beneficiary Bank Country','16','WBenBankCountryRegionId','','',1,1,'',0,0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML-BE','NON-EUR','','Swift number','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 2(Fast tab) > Intermediary bank(group) > Swift code','PmtInf > CdTrfTxInf > IntrmyAgt1 > FinInstnId > BIC','Intermediary Swift number related to vendor','16','WIntBankSwift','','',1,'2','8','11',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML-BE','NON-EUR','','Vendor Name','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Name','PmtInf > CdTrfTxInf > Cdtr > Nm','Name related to Vendor','16','WBeneName','','',0,0,1,'70',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML-BE','NON-EUR','','Address 1','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Address 1','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > AdrLine','Address related to vendor','16','WBeneAddr','','',1,'2',1,'70',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML-BE','NON-EUR','','ZIP/Postal Code','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > ZIP/Postal Code','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > AdrLine','Vendor Zip/postal code','16','WBeneZipPostal','','',1,1,'','',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML-BE','NON-EUR','','City','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > City','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > AdrLine','vendor City','16','WBeneCity','','',1,'2',1,'35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML-BE','NON-EUR','','Country/Region','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Country','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > Ctry','Country related to vendor','16','WBeneCountryRegionId','','',1,1,'','',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML-BE','NON-EUR','','IBAN','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts > General tab > Identification(group) > IBAN','PmtInf > CdtTrfTxInf > CdtrAcct > Id > IBAN','IBAN related to vendor','9','BankIBAN','','','3','2',1,'34',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML-BE','NON-EUR','','Bank Account Number','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts > General tab > Identification(group) > Bank Account Number ','PmtInf > CdtTrfTxInf > CdtrAcct > Id > Othr > Id','Account Number related to vendor','9','AccountNum','','','3','2',1,'35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML-BE','NON-SEPA','','SWIFT code','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab)> SWIFT code','GrpHdr > InitgPty > Id > BICOrBEI','BIC Or BEI','15','WOrdPartySWIFTNo','','','3','2',1,'11',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML-BE','NON-SEPA','','Name','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > Name','PmtInf > Dbtr > Nm','Name related to bank','15','WOrdPartyName','','',0,0,1,'70',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML-BE','NON-SEPA','','Address 1','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > Address 1','PmtInf > Dbtr > PstlAdr > AdrLine','Address related to bank','15','WOrdPartyAddr','','',1,'2',1,'35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML-BE','NON-SEPA','','Zip/postal code','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > Zip/postal code','PmtInf > Dbtr > PstlAdr > AdrLine','ZipCode related to bank','15','WOrdPartyZipCode','','',1,1,'','',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML-BE','NON-SEPA','','City ','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > City','PmtInf > Dbtr > PstlAdr > AdrLine','TownName related to bank','15','WOrdPartyCity','','',1,'2',1,'35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML-BE','NON-SEPA','','Country/Region','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > Country/region','PmtInf > Dbtr > PstlAdr > Ctry','Country related to bank','15','WOrdPartyCountryRegionId','','',1,1,'','',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML-BE','NON-SEPA','','IBAN','Cash and bank management > Select bank account > edit > Additional identification (fast tab) Bank Account Number','PmtInf > DbtrAcct > Id >IBAN ','IBAN related to Bank',0,'IBAN','','','3','2',1,'34',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML-BE','NON-SEPA','','Bank Account Number','Cash and bank management > Select bank account > edit > General (fast tab) Bank Account Number','PmtInf > DbtrAcct > Id > Othr > Id','Bank account number ',0,'AccountNum','','','3','2',1,'35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML-BE','NON-SEPA','','Swift Code','Cash and bank management > Select bank account > edit > Additional identification (fast tab) > Swift No','PmtInf > DbtrAgt > FinInstnId > BIC','Swift code related to Bank',0,'SWIFTNo','','',1,'2','8','11',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML-BE','NON-SEPA','','Swift Code','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts > General tab > Identification(group) > Swift Code','PmtInf > CdTrfTxInf > CdtrAgt >  FinInstnId > ClrSysMmbId > FinInstnId > BIC','Swift Code related to Vendor','9','SWIFTNo','','',1,0,'8','11',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML-BE','NON-SEPA','','Routing number','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts > General tab > Identification(group) > Routing number','PmtInf > CdTrfTxInf > CdtrAgt >  FinInstnId > ClrSysMmbId > MmbId','Routing number related to Vendor','9','RegistrationNum','','','3','2',1,'35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML-BE','NON-SEPA','','Vendor Bank Name','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary bank (group) > Name','PmtInf > CdTrfTxInf > CdtrAgt > Nm','Beneficiary Bank Name','16','WBenBankName','','',1,'2',1,'70',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML-BE','NON-SEPA','','Vendor Bank Address','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary bank (group) > Address','PmtInf > CdTrfTxInf > CdtrAgt > PstlAdr > AdrLine','Beneficiary Bank address','16','WBenBankAddr','','',1,'2',1,'70',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML-BE','NON-SEPA','','Vendor Bank City','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary bank (group) > City','PmtInf > CdTrfTxInf > CdtrAgt > PstlAdr > AdrLine','Beneficiary Bank City','16','WBenBankCity','','',1,'2',1,'35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML-BE','NON-SEPA','','Vendor Bank Country','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary bank (group) > Name','PmtInf > CdTrfTxInf > CdtrAgt > Ctry','Beneficiary Bank Country','16','WBenBankCountryRegionId','','',1,1,'',0,0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML-BE','NON-SEPA','','Swift number','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 2(Fast tab) > Intermediary bank(group) > Swift code','PmtInf > CdTrfTxInf > IntrmyAgt1 > FinInstnId > BIC','Intermediary Swift number related to vendor','16','WIntBankSwift','','',1,'2','8','11',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML-BE','NON-SEPA','','Vendor Name','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Name','PmtInf > CdTrfTxInf > Cdtr > Nm','Name related to Vendor','16','WBeneName','','',0,0,1,'70',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML-BE','NON-SEPA','','Address 1','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Address 1','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > AdrLine','Address related to vendor','16','WBeneAddr','','',1,'2',1,'70',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML-BE','NON-SEPA','','ZIP/Postal Code','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > ZIP/Postal Code','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > AdrLine','Vendor Zip/postal code','16','WBeneZipPostal','','',1,1,'','',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML-BE','NON-SEPA','','City','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > City','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > AdrLine','vendor City','16','WBeneCity','','',1,'2',1,'35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML-BE','NON-SEPA','','Country/Region','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Country','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > Ctry','Country related to vendor','16','WBeneCountryRegionId','','',1,1,'','',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML-BE','NON-SEPA','','IBAN','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts > General tab > Identification(group) > IBAN','PmtInf > CdtTrfTxInf > CdtrAcct > Id > IBAN','IBAN related to vendor','9','BankIBAN','','','3','2',1,'34',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML-BE','NON-SEPA','','Bank Account Number','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts > General tab > Identification(group) > Bank Account Number ','PmtInf > CdtTrfTxInf > CdtrAcct > Id > Othr > Id','Account Number related to vendor','9','AccountNum','','','3','2',1,'35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML-BE','SEPA','','SWIFT code','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab)> SWIFT code','GrpHdr > InitgPty > Id > BICOrBEI','BIC Or BEI','15','WOrdPartySWIFTNo','','','3','2',1,'35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML-BE','SEPA','','Name','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > Name','PmtInf > Dbtr > Nm','Name related to bank','15','WOrdPartyName','','',0,0,1,'140',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML-BE','SEPA','','Country code','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > Country/region','PmtInf > Dbtr > PstlAdr > Ctry','Country related to bank','15','WOrdPartyCountryRegionId','','',0,1,'',0,0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML-BE','SEPA','','Address 1','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > Address 1','PmtInf > Dbtr > PstlAdr > AdrLine > Address','Address related to bank','15','WOrdPartyAddr','','',1,1,1,'35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML-BE','SEPA','','City','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > City','PmtInf > Dbtr > PstlAdr > AdrLine','City related to bank','15','WOrdPartyCity','','',1,1,1,'35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML-BE','SEPA','','Bank Zip/postal code','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > Zip/postal code','PmtInf > Dbtr > PstlAdr > AdrLine','ZipCode related to bank','15','WOrdPartyZipCode','','',1,1,'',0,0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML-BE','SEPA','','IBAN','Cash and bank management > Select bank account > edit > Additional identification (fast tab) Bank Account Number','PmtInf > DbtrAcct > Id >IBAN ','IBAN related to Bank',0,'IBAN','','',0,'2',1,'34',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML-BE','SEPA','','Swift Code','Cash and bank management > Select bank account > edit > Additional identification (fast tab) > Swift No','PmtInf > DbtrAgt > FinInstnId > BIC','Swift code related to Bank',0,'SWIFTNo','','',0,'2','8','11',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML-BE','SEPA','','Swift Code','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts > General tab > Identification(group) > Swift Code','PmtInf > CdTrfTxInf > CdtrAgt >  FinInstnId > ClrSysMmbId > FinInstnId > BIC','Swift Code related to Vendor','9','SWIFTNo','','',0,0,'8','11',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML-BE','SEPA','','Vendor Name','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Name','PmtInf > CdTrfTxInf > Cdtr > Nm','Name related to Vendor','16','WBeneName','','',0,0,1,'70',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML-BE','SEPA','','ZIP/Postal Code ','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary (group) > Zip/postal Code','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > PstCd','Vendor Zip/postal code','16','WBeneZipPostal','','',1,1,'',0,0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML-BE','SEPA','','City','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > City','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > TwnNm','City related to vendor','16','WBeneCity','','',1,1,1,'35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML-BE','SEPA','','State/province','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > State/province','PmtInf > CdTrfTxInf > Cdtr> PstlAdr> CtrySubDvsn','Country Sub Division related to vendor','16','WBeneState','','',1,1,1,'35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML-BE','SEPA','','Country/Region','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Country','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > Ctry','Country related to vendor','16','WBeneCountryRegionId','','',0,1,'',0,0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML-BE','SEPA','','Address 1','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Address 1','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > AdrLine','Address related to vendor','16','WBeneAddr','','',1,1,1,'35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML-BE','SEPA','','IBAN','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts > General tab > Identification(group) > IBAN','PmtInf > CdtTrfTxInf > CdtrAcct > Id > IBAN','IBAN related to vendor','9','BankIBAN','','',0,0,1,'34',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['NL-ING-XML-BE','SEPA','','Payment Id','Accounts payable > Invoice journal > New > Select Name > Lines > New > Invoice tab > Invoice > Payment Id','PmtInf > CdTrfTxInf > RmtInf > Strd > CdtrRefInf > Ref','Payment Id or Creditor reference information','13','PaymId','','',1,0,1,'35',0,0]);

        return validationsList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getCodeLookupMetaData</Name>
				<Source><![CDATA[
    protected container getCodeLookupMetaData()
    {
        container   codeLookupList;

        //Metadata column names of data elements
//FormatGroup,CodeID,Description

        codeLookupList = ConIns(codeLookupList,conLen(codeLookupList)+1,['NL-ING-XML','BenBankRC','Beneficiary bank routing code']);
        codeLookupList = ConIns(codeLookupList,conLen(codeLookupList)+1,['NL-ING-XML','BtchBookg','Batch Booking']);
        codeLookupList = ConIns(codeLookupList,conLen(codeLookupList)+1,['NL-ING-XML','CtgyPurp','Category Purpose']);
        codeLookupList = ConIns(codeLookupList,conLen(codeLookupList)+1,['NL-ING-XML','ClrSysIdCd','Clearing System Id Code']);
        codeLookupList = ConIns(codeLookupList,conLen(codeLookupList)+1,['NL-ING-XML','Charges','Charges']);

        return codeLookupList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getCodeLookupValuesMetaData</Name>
				<Source><![CDATA[
    protected container getCodeLookupValuesMetaData()
    {
        container   codeLookupValuesList;

        //Metadata column names of data elements
//FormatGroup,CodeID,Display Value,CodeValue

        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['NL-ING-XML','BenBankRC','Australia','AUBSB']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['NL-ING-XML','BenBankRC','Austria','ATBLZ']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['NL-ING-XML','BenBankRC','Canada','CACPA']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['NL-ING-XML','BenBankRC','China','CNAPS']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['NL-ING-XML','BenBankRC','Germany','DEBLZ']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['NL-ING-XML','BenBankRC','Greece','GRHIC']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['NL-ING-XML','BenBankRC','HongKong','HKNCC']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['NL-ING-XML','BenBankRC','India','INFSC']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['NL-ING-XML','BenBankRC','Ireland','IENCC']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['NL-ING-XML','BenBankRC','Italy','ITNCC']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['NL-ING-XML','BenBankRC','Japan','JPZGN']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['NL-ING-XML','BenBankRC','NewZealand','NZNCC']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['NL-ING-XML','BenBankRC','Poland','PLKNR']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['NL-ING-XML','BenBankRC','Portugal','PTNCC']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['NL-ING-XML','BenBankRC','Russia','RUCBC']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['NL-ING-XML','BenBankRC','Singapore','SGIBG']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['NL-ING-XML','BenBankRC','SouthAfrica','ZANCC']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['NL-ING-XML','BenBankRC','Spain','ESNCC']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['NL-ING-XML','BenBankRC','Switzerland BC Code','CHBCC']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['NL-ING-XML','BenBankRC','Switzerland SIC code','CHSIC']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['NL-ING-XML','BenBankRC','Taiwan','TWNCC']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['NL-ING-XML','BenBankRC','UK','GBDSC']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['NL-ING-XML','BenBankRC','US','USPID']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['NL-ING-XML','BenBankRC','USFedwire','USABA']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['NL-ING-XML','BtchBookg','true','true']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['NL-ING-XML','BtchBookg','false','false']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['NL-ING-XML','CtgyPurp','Dividend','DIVI']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['NL-ING-XML','CtgyPurp','IntraCompanyPayment','INTC']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['NL-ING-XML','CtgyPurp','Interest','INTE']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['NL-ING-XML','CtgyPurp','PensionPayment','PENS']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['NL-ING-XML','CtgyPurp','SalaryPayment','SALA']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['NL-ING-XML','CtgyPurp','SocialSecurityBenefit','SSBE']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['NL-ING-XML','CtgyPurp','SupplierPayment','SUPP']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['NL-ING-XML','CtgyPurp','TaxPayment','TAXS']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['NL-ING-XML','CtgyPurp','TreasuryPayment','TREA']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['NL-ING-XML','CtgyPurp','Same Day Value','INTC']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['NL-ING-XML','ClrSysIdCd','Not Available','']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['NL-ING-XML','ClrSysIdCd','Australian Bank State Branch Code(BSB)','AUBSB']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['NL-ING-XML','ClrSysIdCd','Austrian Bankleitzahl','ATBLZ']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['NL-ING-XML','ClrSysIdCd','Canadian Payments Association Payment Routing Number','CACPA']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['NL-ING-XML','ClrSysIdCd','CNAPS Identifier','CNAPS']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['NL-ING-XML','ClrSysIdCd','German Bankleitzahl','DEBLZ']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['NL-ING-XML','ClrSysIdCd','Helenic Bank Identification Code','GRBIC']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['NL-ING-XML','ClrSysIdCd','Hong Kong Bank Code','HKNCC']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['NL-ING-XML','ClrSysIdCd','Indian Financial System Code','INFSC']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['NL-ING-XML','ClrSysIdCd','Irish National Clearing Code','IENCC']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['NL-ING-XML','ClrSysIdCd','Italian Domestic Identification Code','ITNCC']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['NL-ING-XML','ClrSysIdCd','Japan Zengin Clearing Code','JPZGN']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['NL-ING-XML','ClrSysIdCd','New Zealand National Clearing Code','NZNCC']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['NL-ING-XML','ClrSysIdCd','Polish National Clearing Code','PLKNR']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['NL-ING-XML','ClrSysIdCd','Portuguese National Clearing Code','PTNCC']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['NL-ING-XML','ClrSysIdCd','Russian Central Bank Identification Code','RUCBC']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['NL-ING-XML','ClrSysIdCd','IBG Sort Code','SGIBG']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['NL-ING-XML','ClrSysIdCd','South African National Clearing Code','ZANCC']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['NL-ING-XML','ClrSysIdCd','Spanish Domestic Interbanking Code','ESNCC']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['NL-ING-XML','ClrSysIdCd','Swiss Clearing Code(BC Code)','CHBCC']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['NL-ING-XML','ClrSysIdCd','Swiss Clearing Code(SIC Code)','CHSIC']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['NL-ING-XML','ClrSysIdCd','Financial Institution Code','TWNCC']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['NL-ING-XML','ClrSysIdCd','UK Domestic Sort Code','GBDSC']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['NL-ING-XML','ClrSysIdCd','CHIPS Participant Identifier','USPID']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['NL-ING-XML','ClrSysIdCd','United States Routing Number(Fedwire NACHA)','USABA']);

        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['NL-ING-XML','Charges','BornebyDebtor','DEBT']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['NL-ING-XML','Charges','BornebyCreditor','CRED']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['NL-ING-XML','Charges','Shared','SHAR']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['NL-ING-XML','Charges','Service Level','SLEV']);

        return codeLookupValuesList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymSpecFieldsMetaData</Name>
				<Source><![CDATA[
    protected container getPaymSpecFieldsMetaData(str _formatID)
    {
        container   paymSpecFieldsList;

        //Metadata column names of data elements
//FormatGroup,FormatID,PaymentSpec,FormatFieldID,Description,FieldType,CodeID,DefaultValue,Required,FixedValue,FixedValueMask,TechNotes

        switch (_formatID)
        {
            case ('NL-ING-XML-RO'):
                paymSpecFieldsList = this.getPaymSpecFieldsMetaData_NL_ING_XML_RO();
                break;

            case ('NL-ING-XML-BE'):
                paymSpecFieldsList = this.getPaymSpecFieldsMetaData_NL_ING_XML_BE();
                break;

            case ('NL-ING-XML'):
                paymSpecFieldsList = this.getPaymSpecFieldsMetaData_NL_ING_XML();
                break;

        }

        return paymSpecFieldsList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymSpecFieldsMetaData_NL_ING_XML_RO</Name>
				<Source><![CDATA[
    private container getPaymSpecFieldsMetaData_NL_ING_XML_RO()
    {
        container   paymSpecFieldsList;

        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['NL-ING-XML','NL-ING-XML-RO','INTL','ClrSysIdCd','Clearing System Identification',0,'ClrSysIdCd','Not Available',0,'','','PmtInf > CdtTrfTxInf > CdtrAgt > FinInstnId > ClrSysMmbId > ClrSysId > Cd']);

        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['NL-ING-XML','NL-ING-XML-RO','DOM','Charges','Charges',0,'Charges','',0,'','','CdtTrfTxInf > ChrgBr']);
        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['NL-ING-XML','NL-ING-XML-RO','BDG','Charges','Charges',0,'Charges','',0,'','','CdtTrfTxInf > ChrgBr']);
        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['NL-ING-XML','NL-ING-XML-RO','INTL','Charges','Charges',0,'Charges','',0,'','','CdtTrfTxInf > ChrgBr']);

        return paymSpecFieldsList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymSpecFieldsMetaData_NL_ING_XML_BE</Name>
				<Source><![CDATA[
    private container getPaymSpecFieldsMetaData_NL_ING_XML_BE()
    {
        container   paymSpecFieldsList;

        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['NL-ING-XML','NL-ING-XML-BE','NON-EUR','BenBankRC','Beneficiary bank routing code',0,'BenBankRC','',0,'','','PmtInf > CdTrfTxInf > CdtrAgt >  FinInstnId > ClrSysMmbId > ClrSysId >Cd']);
        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['NL-ING-XML','NL-ING-XML-BE','NON-SEPA','BenBankRC','Beneficiary bank routing code',0,'BenBankRC','',0,'','','PmtInf > CdTrfTxInf > CdtrAgt >  FinInstnId > ClrSysMmbId > ClrSysId >Cd']);
        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['NL-ING-XML','NL-ING-XML-BE','SEPA','BtchBookg','Batch Booking',0,'BtchBookg','true',0,'','','PmtInf > BtchBookg']);
        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['NL-ING-XML','NL-ING-XML-BE','NON-EUR','BtchBookg','Batch Booking',0,'BtchBookg','true',0,'','','PmtInf > BtchBookg']);
        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['NL-ING-XML','NL-ING-XML-BE','NON-SEPA','BtchBookg','Batch Booking',0,'BtchBookg','true',0,'','','PmtInf > BtchBookg']);
        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['NL-ING-XML','NL-ING-XML-BE','SEPA','CtgyPurp','Category purpose',0,'CtgyPurp','',0,'','','PmtInf > PmftTpInf > CtgyPurp > Cd']);
        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['NL-ING-XML-BE','NL-ING-XML-BE','SEPA','BtchBookg','Batch Booking',0,'BtchBookg','true',0,'','','PmtInf > BtchBookg']);
        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['NL-ING-XML-BE','NL-ING-XML-BE','SEPA','CtgyPurp','Category purpose',0,'CtgyPurp','',0,'','','PmtInf > PmftTpInf > CtgyPurp > Cd']);
        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['NL-ING-XML-BE','NL-ING-XML-BE','SEPA','InstrPrty','Instruction Priority',0,'InstrPrty','',0,'','','PmtInf > PmftTpInf > InstrPrty']);

        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['NL-ING-XML','NL-ING-XML','NON-EUR','Charges','Charges',0,'Charges','',0,'','','CdtTrfTxInf > ChrgBr']);
        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['NL-ING-XML','NL-ING-XML','NON-SEPA','Charges','Charges',0,'Charges','',0,'','','CdtTrfTxInf > ChrgBr']);

        return paymSpecFieldsList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymSpecFieldsMetaData_NL_ING_XML</Name>
				<Source><![CDATA[
    private container getPaymSpecFieldsMetaData_NL_ING_XML()
    {
        container   paymSpecFieldsList;

        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['NL-ING-XML','NL-ING-XML','DOM-INT','CtgyPurp','Category purpose',0,'CtgyPurp','',0,'','','PmtInf > PmftTpInf > CtgyPurp > Cd']);
        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['NL-ING-XML','NL-ING-XML','DOM-INT','Charges','Charges',0,'Charges','',0,'','','CdtTrfTxInf > ChrgBr']);
        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['NL-ING-XML','NL-ING-XML','DOM-EXP','Charges','Charges',0,'Charges','',0,'','','CdtTrfTxInf > ChrgBr']);
        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['NL-ING-XML','NL-ING-XML','DOM-ORD','Charges','Charges',0,'Charges','',0,'','','CdtTrfTxInf > ChrgBr']);
        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['NL-ING-XML','NL-ING-XML','INTL-EXP','Charges','Charges',0,'Charges','',0,'','','CdtTrfTxInf > ChrgBr']);


        return paymSpecFieldsList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getControlFormatMetaData</Name>
				<Source><![CDATA[
    protected container getControlFormatMetaData(str _formatID)
    {
        container   ControlFormatList;

        //Metadata column names of data elements
//FileFormatID,ControlFileFormatID,ControlFileDescription

        switch (_formatID)
        {
        }

        return ControlFormatList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getDeleteMetaData</Name>
				<Source><![CDATA[
    protected container getDeleteMetaData()
    {
        container   deleteList;

        //FormatGroup, FormatId, DetailType, KeyID1, KeyId2, KeyId3

        deleteList = ConIns(deleteList,conLen(deleteList)+1,['NL-ING-XML','*','FormatLookup','*','*','']);
        deleteList = ConIns(deleteList,conLen(deleteList)+1,['NL-ING-XML','*','FormatValidations','*','16','WChargesIndic']);
        deleteList = ConIns(deleteList,conLen(deleteList)+1,['NL-ING-XML','*','FormatValidations','*','15','W01']);
        deleteList = ConIns(deleteList,conLen(deleteList)+1,['NL-ING-XML','*','FormatValidations','*','15','W03']);

        return deleteList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankCodeLookupMetaData</Name>
				<Source><![CDATA[
    protected container getBankCodeLookupMetaData()
    {
        container   codeLookupList;

        codeLookupList = ConIns(codeLookupList,conLen(codeLookupList)+1,['NL-ING-XML','Btchbkg','Batch booking(Y/N)']);

        return codeLookupList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankCodeLookupValuesMetaData</Name>
				<Source><![CDATA[
    protected container getBankCodeLookupValuesMetaData()
    {
        container   codeLookupValuesList;

        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['NL-ING-XML','Btchbkg','Y','Y']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['NL-ING-XML','Btchbkg','N','N']);

        return codeLookupValuesList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFileFormatFieldsMetaData</Name>
				<Source><![CDATA[
    protected container getFileFormatFieldsMetaData(str _formatID)
    {
        container   paymSpecFieldsList;

        switch (_formatID)
        {
            case ('NL-ING-XML'):
                paymSpecFieldsList = this.getFileFormatFieldsMetaData_NL_ING_XML();
                break;

            case ('NL-ING-XML-RO'):
                paymSpecFieldsList = this.getFileFormatFieldsMetaData_NL_ING_XML_RO();
                break;

            case ('NL-ING-XML-BE'):
                paymSpecFieldsList = this.getFileFormatFieldsMetaData_NL_ING_XML_BE();
                break;
        }

        return paymSpecFieldsList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFileFormatFieldsMetaData_NL_ING_XML</Name>
				<Source><![CDATA[
    private container getFileFormatFieldsMetaData_NL_ING_XML()
    {
        container   paymSpecFieldsList;

        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['NL-ING-XML','NL-ING-XML','InitiatingPartyId','Initiating Party Id',1,'InitiatingPartyId','',0,'','XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX','GrpHdr > InitgPty > Id > Orgid > Othr > Id']);
        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['NL-ING-XML','NL-ING-XML','DebitorId','Debtor ID',1,'DebitorId','',0,'','XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX','PmtInf > Dbtr > Id']);
        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['NL-ING-XML','NL-ING-XML','Btchbkg','Batch booking(Y/N)',0,'Btchbkg','',0,'','','PmtInf > BtchBookg']);

        return paymSpecFieldsList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFileFormatFieldsMetaData_NL_ING_XML_RO</Name>
				<Source><![CDATA[
    private container getFileFormatFieldsMetaData_NL_ING_XML_RO()
    {
        container   paymSpecFieldsList;

        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['NL-ING-XML','NL-ING-XML-RO','ExchangeContractId','Exchange contract id',1,'ExchangeContractId','',0,'','XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX','CdtTrfTxInf > XchgRateInf > CtrctId']);

        return paymSpecFieldsList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFileFormatFieldsMetaData_NL_ING_XML_BE</Name>
				<Source><![CDATA[
    private container getFileFormatFieldsMetaData_NL_ING_XML_BE()
    {
        container   paymSpecFieldsList;

        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['NL-ING-XML','NL-ING-XML-BE','InitiatingPartyId','Initiating Party Id',1,'InitiatingPartyId','',0,'','XXXXXXXXXX','GrpHdr > InitgPty > Id > Orgid > Othr > Id']);

        return paymSpecFieldsList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBankCodelookupValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updating the bank code lookpups from the W0X fields.
    /// </summary>
    protected void updateBankCodelookupValues()
    {
        switch(gSKS_EFT_FileFormat.FormatId)
        {
            case ('NL-ING-XML'):
                if(gSKS_EFT_Bank.W01)
                {
                    this.updateBankFields('InitiatingPartyId', gSKS_EFT_Bank.W01);
                }
                if(gSKS_EFT_Bank.W02)
                {
                    this.updateBankFields('DebitorId', gSKS_EFT_Bank.W02);
                }
                if(gSKS_EFT_Bank.W03)
                {
                    this.updateBankFields('Btchbkg', gSKS_EFT_Bank.W03, true);
                }
                break;
            case ('NL-ING-XML-BE'):
                if(gSKS_EFT_Bank.W01)
                {
                    this.updateBankFields('InitiatingPartyId', gSKS_EFT_Bank.W01);
                }
                break;
            case ('NL-ING-XML-RO'):
                if(gSKS_EFT_Bank.W01)
                {
                    this.updateBankFields('ExchangeContractId', gSKS_EFT_Bank.W01);
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateVendorCodelookupValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updating vendor code lookpus from BE0X and Legacy code loookups
    /// </summary>
    protected void updateVendorCodelookupValues()
    {
        switch(gSKS_EFT_FileFormat.FormatId)
        {
            case ('NL-ING-XML'):
            case ('NL-ING-XML-BE'):
            case ('NL-ING-XML-RO'):
                if(gSKS_EFT_VendorPaym.WChargesIndic)
                {
                    this.updateVendorFields('Charges', gSKS_EFT_VendorPaym.WChargesIndic, true);
                }
                break;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>