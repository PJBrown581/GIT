<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_US_SUNTRUST_XML</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_US_SUNTRUST_XML extends SKS_EFT_Format_ISO_20022_001001003_FD
/// </summary>
class SKS_EFT_Format_US_SUNTRUST_XML extends SKS_EFT_Format_ISO_20022_001001003_FD
{
    #define.FormatVersion('20230503')
    #define.ACH_CCD('ACH-CCD')         
    #define.ACH_CTX('ACH-CTX')
    #define.CHK('CHK')
    #define.FED_WIRE('FED-WIRE')
    #define.SWIFT('SWIFT')

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_GrpHdr_Authstn</Name>
				<Source><![CDATA[
    protected void node_GrpHdr_Authstn(XmlElement _nodeGrpHdr)
    {
        //------------------------------------------------------------------------------------------------------
        //      1.3: Authstn
        //          1.4: Cd
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeAuthstn;
        str value;

        value = SKS_EFT_Format::getCodelookupvalue('Authstn', mSKS_EFT_FileDetail.RecId);

        if(value)      
        {
            //      1.3: Authstn
            nodeAuthstn = _nodeGrpHdr.appendChild(xmlDoc.createElement('Authstn'));
    
            //          1.4: Cd
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeAuthstn, 'Cd', value);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_BtchBookg</Name>
				<Source><![CDATA[
    protected void node_PmtInf_BtchBookg(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.23 BtchBookg
        //------------------------------------------------------------------------------------------------------
        str btchBookg;

        btchBookg = SKS_EFT_Format::getCodelookupvalue('BtchBookg', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank);

        //      2.23 BtchBookg
        if(strUpr(btchBookg) == 'Y')
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodePmtInf, 'BtchBookg', 'true');
        }
        else
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodePmtInf, 'BtchBookg', 'false');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_CdtrAcct</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_CdtrAcct(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.80: CdtrAcct
        //              Id
        //                  Othr
        //                  Id
        //              Tp/Ptry
        //------------------------------------------------------------------------------------------------------
    
        XmlElement  nodeCdtrAcct;
        XmlElement  nodeCdtrAcctId;
        XmlElement  nodeCdtrAcctIdOthr;
        XmlElement  nodeCdtrAcctTp;
        str         iban, acctNum, type;        

        iban    =   mSKS_EFT_FileDetail.DepBankIBAN;
        acctNum =   mSKS_EFT_FileDetail.DepBankAcct;

        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'US-SUNTRUST-XML-US':
                switch(mSKS_EFT_FileDetail.PaymSpec)
                {
                    case #SWIFT:
                        break;
                    default:
                        if(acctNum)
                        {
                            iban = '';
                        }
                        break;
                }
                break;
        }
        if(mSKS_EFT_FileFormatPaymSpec.UseCheckNumber == NoYes::No ||
           subStr(mSKS_EFT_FileDetail.PaymSpec, 1, 3) != 'CHK')
        {
            nodeCdtrAcct = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('CdtrAcct'));
    
            //              Id
            nodeCdtrAcctId = nodeCdtrAcct.appendChild(xmlDoc.createElement('Id'));
    
            if(iban)
            {
                //                  IBAN
                nodeCdtrAcctId = SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdtrAcctId, 'IBAN', iban, 34);
            }
            else if(acctNum)
            {
                //                  Othr
                nodeCdtrAcctIdOthr = nodeCdtrAcctId.appendChild(xmlDoc.createElement('Othr'));
                
                //                      Id
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdtrAcctIdOthr, 'Id', acctNum, 35);
            }

            if(mSKS_EFT_FileDetail.PaymSpec == #SWIFT)
            {
                type = 'SACC';
            }
            else if(mSKS_EFT_FileDetail.DepBankAcctType == BankAccountType::SavingsAccount)
            {
                type = 'SVGS';
            }
            else
            {
                type = 'CACC';
            }
            //              Tp
            nodeCdtrAcctTp = nodeCdtrAcct.appendChild(xmlDoc.createElement('Tp'));
                
            //                  Cd
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdtrAcctTp, 'Cd', type);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_CdtrAgt</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_CdtrAgt(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.77: CdtrAgt
        //              FinInstnId
        //                  BIC
        //                  ClrSysMmbId
        //                  Nm
        //                  PstlAdr
        //              BrnchId
        //                  Id
        //------------------------------------------------------------------------------------------------------
    
        XmlElement  nodeCdtrAgt;
        XmlElement  nodeFinInstnId;
        XmlElement  nodeClrSysMmbId;
        str         swift, rtg;

        swift   =   mSKS_EFT_FileDetail.DepSwiftNo;
        rtg     =   mSKS_EFT_FileDetail.DepBankTransit;

        if(mSKS_EFT_FileFormatPaymSpec.UseCheckNumber == NoYes::No || (subStr(mSKS_EFT_FileDetail.PaymSpec, 1, 3) != 'CHK'))
        {
            //          2.77: CdtrAgt
            nodeCdtrAgt = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('CdtrAgt'));
    
            //              FinInstnId
            nodeFinInstnId = nodeCdtrAgt.appendChild(xmlDoc.createElement('FinInstnId'));

            if(swift)
            {
                //                  BIC
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeFinInstnId, 'BIC', swift, 11);

            }
            else if(rtg)
            {
                nodeClrSysMmbId = nodeFinInstnId.appendChild(xmlDoc.createElement('ClrSysMmbId'));
               
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeClrSysMmbId, 'MmbId', mSKS_EFT_FileDetail.DepBankTransit, 35);
            }

            //                  Nm
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeFinInstnId, 'Nm', this.CharacterReplacement(mSKS_EFT_FileDetail_BenBank.BenBankName), 0, false);
            
            //                  PstlAdr
            this.node_PstlAdr(nodeFinInstnId, mSKS_EFT_FileDetail_BenBank.BenBankCountryRegionId, mSKS_EFT_FileDetail_BenBank.BenBankAddr, '', mSKS_EFT_FileDetail_BenBank.BenBankCity, 0, '', '', true);
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_ChqInstr</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_ChqInstr(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.52 ChqInstr
        //              2.58 DlvryMtd
        //              2.65 ChqMtrtyDt
        //              2.69: PrtLctn
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeChqInstr;
        XmlElement nodeDlvryMtd;
        XmlElement nodeDlvryTo;
        XmlElement nodeAdr;
        XmlElement nodeChqFr;
        str     value, chqTp;
    
        chqTp = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('ChqTp', mSKS_EFT_FileDetail.RecId));

        //          2.52 ChqInstr
        nodeChqInstr = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('ChqInstr')); 
    
        //              2.53 ChqTp
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeChqInstr, 'ChqTp', chqTp, 0, false);

        //              2.54 ChqNb
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeChqInstr, 'ChqNb', this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference), 0, false);

        //              2.55 ChqFr
        nodeChqFr = nodeChqInstr.appendChild(xmlDoc.createElement('ChqFr'));

        //                  2.56  Nm
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeChqFr, 'Nm', this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyName), 140, false);
        
        //                  2.57  Adr
        this.node_Adr(nodeChqFr, mSKS_EFT_FileDetail_BankAccount.WOrdPartyCountryRegionId, mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr, mSKS_EFT_FileDetail_BankAccount.WOrdPartyZipCode, mSKS_EFT_FileDetail_BankAccount.WOrdPartyCity, 0, mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr2, mSKS_EFT_FileDetail_BankAccount.WOrdPartyState, true);

        value = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('DlvryMtd', mSKS_EFT_FileDetail.RecId));
        if(value)
        {
            //              2.58 DlvryMtd
            nodeDlvryMtd = nodeChqInstr.appendChild(xmlDoc.createElement('DlvryMtd'));
            
            //                  2.60: Prtry
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeDlvryMtd, 'Prtry', value, 0, false);
        }

        //              2.61 DlvrTo
        nodeDlvryTo = nodeChqInstr.appendChild(xmlDoc.createElement('DlvrTo'));
        if(value)
        {
            if(value == 'MLDB' || value == 'CRDB' || value == 'PUDB' || value == 'RGDB')
            {
                //              2.62 Nm
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeDlvryTo, 'Nm', this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyName));
                //              2.63 Adr
                nodeAdr = nodeDlvryTo.appendChild(xmlDoc.createElement('Adr'));

                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeAdr, 'StrtNm', this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr), 0, false);
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeAdr, 'BldgNb', this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr2), 0, false);
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeAdr, 'PstCd', this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyZipCode), 0, false);
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeAdr, 'TwnNm', this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyCity), 0, false);
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeAdr, 'CtrySubDvsn', this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyState), 0, false);
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeAdr, 'Ctry', this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_BankAccount.WOrdPartyCountryRegionId));
            }
            else
            {
                //              2.62 Nm
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeDlvryTo, 'Nm', this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneName));
                //              2.63 Adr
                nodeAdr = nodeDlvryTo.appendChild(xmlDoc.createElement('Adr'));

                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeAdr, 'StrtNm', this.CharacterReplacement(mRemittanceAdrline1), 0, false);
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeAdr, 'BldgNb', this.CharacterReplacement(mRemittanceAdrline2), 0, false);
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeAdr, 'PstCd', this.CharacterReplacement(mRemittanceZipCode), 0, false);
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeAdr, 'TwnNm', this.CharacterReplacement(mRemittanceCity), 0, false);
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeAdr, 'CtrySubDvsn', this.CharacterReplacement(mRemittanceState), 0, false);
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeAdr, 'Ctry', this.getLogisticsAddressCountryISO(mRemittanceCountryRegionId));
            }
        }

        //                      2.64 InstrPrty
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeChqInstr, 'InstrPrty', this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('InstrPrty', mSKS_EFT_FileDetail.RecId)), 0, false);

        //              2.66 FrmsCd
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeChqInstr, 'FrmsCd', this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('FrmsCd', mSKS_EFT_FileDetail.RecId)), 35, false);

        //              2.67 MemoField
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeChqInstr, 'MemoFld', this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('MemoFld', mSKS_EFT_FileDetail.RecId)), 0, false);

        //              2.69 PrtLctn
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeChqInstr, 'PrtLctn', this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('PrtLctn', mSKS_EFT_FileDetail.RecId)), 0, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_Adr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Address node
    /// </summary>
    /// <param name = "_node">node</param>
    /// <param name = "_countryId">countryId</param>
    /// <param name = "_address">address</param>
    /// <param name = "_postalCode">postalcode</param>
    /// <param name = "_city">city</param>
    /// <param name = "_length">lenght</param>
    /// <param name = "_address2">address2</param>
    /// <param name = "_state">state</param>
    /// <param name = "isStructured">isstructured</param>
    protected void node_Adr(XmlElement _node,
                                AddressCountryRegionId _countryId,
                                SKS_EB_Address _address,
                                AddressZipCodeId _postalCode,
                                AddressCity _city,
                                int _length = 35,
                                SKS_EB_Address _address2 = '',
                                AddressCountryRegionName  _state = '',
                                boolean isStructured = false)
    {
        //------------------------------------------------------------------------------------------------------
        //          Adr
        //              Ctry
        //              AdrLine
        //              AdrLine
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeAdr;
        LogisticsAddressCountryRegionISOCode countryRegion;
    
        countryRegion = this.getLogisticsAddressCountryISO(_countryId);
    
        if(!isStructured)
        {
            if(countryRegion || _address || _postalCode || _city)
            {
                //      Adr
                nodeAdr = _node.appendChild(xmlDoc.createElement('Adr'));
    
                //          Ctry
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeAdr, 'Ctry', countryRegion, 2, false);
    
                //          AdrLine
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeAdr, 'AdrLine', this.CharacterReplacement(_address), _length, false);
    
                //          AdrLine
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeAdr, 'AdrLine', strLTrim(_postalCode + ' ' + this.CharacterReplacement(_city)), _length, false);
            }
        }
        else
        {
            if( _address || _address2 || _postalCode || _city || _state || countryRegion)
            {
                //      Adr
                nodeAdr = _node.appendChild(xmlDoc.createElement('Adr'));

                //          StrtNm
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeAdr, 'StrtNm', this.CharacterReplacement(_address), 70, false);
    
                //          BldgNb
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeAdr, 'BldgNb', this.CharacterReplacement(_address2), 16, false);
    
                //          PstCd
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeAdr, 'PstCd', _postalCode, 16, false);
    
                //          TwnNm
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeAdr, 'TwnNm', this.CharacterReplacement(_city), 35, false);
    
                //          CtrySubDvsn
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeAdr, 'CtrySubDvsn', this.CharacterReplacement(_state), 35, false);
    
                //          Ctry
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeAdr, 'Ctry', countryRegion, 2, false);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_ChrgBr</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_ChrgBr(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.51: ChrgBr
        //------------------------------------------------------------------------------------------------------
    
        str value;

        value = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('ChrgBr', mSKS_EFT_FileDetail.RecId));
        
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeCdtTrfTxInf, 'ChrgBr', value, 0, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_IntrmyAgt1</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_IntrmyAgt1(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.71: IntrmyAgt1
        //              FinInstnId
        //                  BIC
        //                  ClrSysMmbId
        //                  PstlAdr
        //              BrnchId
        //                  Id
        //------------------------------------------------------------------------------------------------------
    
        XmlElement  nodeIntrmyAgt1;
        XmlElement  nodeFinInstnId;
        XmlElement  nodeClrSysMmbId;        
        str         intSwift;
        str         intBankId;
        boolean     printintr = true;
        
        intSwift   =    mSKS_EFT_FileDetail_Intermediary.IntBankSwift;
        intBankId  =    mSKS_EFT_FileDetail_Intermediary.IntBankId;

        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'US-SUNTRUST-XML-US':
                switch(mSKS_EFT_FileDetail.PaymSpec)
                {
                    case #SWIFT:
                        printintr = false;
                        break;
                }
                break;
        }

        if((intSwift || intBankId) && printintr)
        {
            //          2.71: IntrmyAgt1
            nodeIntrmyAgt1 = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('IntrmyAgt1'));
    
            //              FinInstnId
            nodeFinInstnId = nodeIntrmyAgt1.appendChild(xmlDoc.createElement('FinInstnId'));
    
            if(intSwift)
            {
                //                  BIC
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeFinInstnId, 'BIC', intSwift, 0, false);
            }
            else if(intBankId)
            {
                //                  ClrSysMmbId
                nodeClrSysMmbId = nodeFinInstnId.appendChild(xmlDoc.createElement('ClrSysMmbId'));
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeClrSysMmbId, 'MmbId', intBankId, 35, false);
            }
            //                  Nm
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeFinInstnId, 'Nm', this.CharacterReplacement(mSKS_EFT_FileDetail_Intermediary.IntBankName), 140, false);
    
            this.node_PstlAdr(nodeFinInstnId, mSKS_EFT_FileDetail_Intermediary.IntBankCountryRegionId, mSKS_EFT_FileDetail_Intermediary.IntBankAddr, '', mSKS_EFT_FileDetail_Intermediary.IntBankCity, 35, mSKS_EFT_FileDetail_Intermediary.IntBankAddr2,'', true); 
            
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_Purp</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_Purp(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.86: Purp
        //              Prtry
        //------------------------------------------------------------------------------------------------------
        XmlElement nodePurp;
        str        value;
    
        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'US-SUNTRUST-XML-US':
                value = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('Purp', mSKS_EFT_FileDetail.RecId));
                break;
        }

        if(value)
        {
            //          2.86: Purp
            nodePurp = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('Purp'));

            //              2.89: Cd
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePurp, 'Cd', value, 4);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_RmtInf</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_RmtInf(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.98: RmtInf
        //              2.99: Ustrd
        //------------------------------------------------------------------------------------------------------
    
        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'US-SUNTRUST-XML-US':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #ACH_CCD:                    
                    case #ACH_CTX:                    
                    case #CHK:
                    case #FED_WIRE:
                        this.node_CdtTrfTxInf_RmtInf_Strd(_nodeCdtTrfTxInf);

                        break;
                    case #SWIFT:
                        this.node_CdtTrfTxInf_RmtInf_Ustrd(_nodeCdtTrfTxInf);
                        break;
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_RmtInf_RfrdDocInf</Name>
				<Source><![CDATA[
    private void node_CdtTrfTxInf_RmtInf_RfrdDocInf(XmlElement _nodeStrd, SKS_EFT_FileDetail _invSKS_EFT_FileDetail)
    {
        //------------------------------------------------------------------------------------------------------
        //              2.101: RfrdDocInf
        //                  2.102: Tp
        //                      2.103: CdOrPrtry
        //                          2.104: Cd
        //                  2.107: Number
        //                  2.108: RltdDt
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeRfrdDocInf;
        XmlElement nodeTp;
        XmlElement nodeCdOrPrtry;
    
        //              2.101: RfrdDocInf
        nodeRfrdDocInf = _nodeStrd.appendChild(xmlDoc.createElement('RfrdDocInf'));
    
        //                  2.102: Tp
        nodeTp = nodeRfrdDocInf.appendChild(xmlDoc.createElement('Tp'));
    
        //                      2.103: CdOrPrtry
        nodeCdOrPrtry = nodeTp.appendChild(xmlDoc.createElement('CdOrPrtry'));
    
        //                          2.104: Cd
        if(_invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur <= 0)
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdOrPrtry, 'Cd', 'CINV');
        }
        else
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdOrPrtry, 'Cd', 'CREN');
        }
    
        //                  2.107: Number
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRfrdDocInf, 'Nb', _invSKS_EFT_FileDetail.InvoiceNumber);
    
        //                  2.108: RltdDt
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRfrdDocInf, 'RltdDt', SKS_PP_StringFormats::strDateYYYYMMDD(_invSKS_EFT_FileDetail.InvoiceDate, DateSeparator::Hyphen));
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_RmtInf_Strd</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_RmtInf_Strd(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.98: RmtInf
        //------------------------------------------------------------------------------------------------------
        SKS_EFT_FileDetail invSKS_EFT_FileDetail;
        XmlElement      nodeRmtInf;
        XmlElement      nodeStrd;
        XmlElement      nodeRfrdDocAmt;
        XmlElement      nodeCdtrRefInf;
        XmlElement      nodeCdOrPrtry;
        XmlElement      nodeTp;
        boolean         firstRec = true;
        LedgerJournalTransTxt   description;
    
        while select invSKS_EFT_FileDetail where invSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId
            && invSKS_EFT_FileDetail.InvoiceNumber != ''
        {
            if(firstRec)
            {
                //          2.98: RmtInf
                nodeRmtInf = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('RmtInf'));
                firstRec = false;
            }
            //              2.100: Strd
            nodeStrd = nodeRmtInf.appendChild(xmlDoc.createElement('Strd'));
    
            //              2.101: RfrdDocInf
            this.node_CdtTrfTxInf_RmtInf_RfrdDocInf(nodeStrd, invSKS_EFT_FileDetail);
    
            //              2.109 RfrdDocAmt
            nodeRfrdDocAmt = nodeStrd.appendChild(xmlDoc.createElement('RfrdDocAmt'));
            this.node_RmtInf_Amt(nodeRfrdDocAmt, invSKS_EFT_FileDetail);

            description = this.CharacterReplacement(invSKS_EFT_FileDetail.InvoiceTransactionTxt);
                
            if(description)
            {
                nodeCdtrRefInf = nodeStrd.appendChild(xmlDoc.createElement('CdtrRefInf'));
    
                nodeTp = nodeCdtrRefInf.appendChild(xmlDoc.createElement('Tp'));
    
                nodeCdOrPrtry = nodeTp.appendChild(xmlDoc.createElement('CdOrPrtry'));
    
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdOrPrtry, 'Cd', 'PUOR');
    
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdtrRefInf, 'Ref', description, 35, false);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_GrpHdr_InitgPty_Id</Name>
				<Source><![CDATA[
    protected void node_GrpHdr_InitgPty_Id(XmlElement _nodeInitgPty)
    {
        //------------------------------------------------------------------------------------------------------
        //      1.8: InitgPty
        //          9.1.12: Id
        //              9.1.13: OrgId
        //                  9.1.15: Othr
        //                      9.1.1.16: Id
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeId;
        XmlElement nodeOrgId;
        XmlElement nodeOther;
        XmlElement nodeSchmeNm;
        str         initgPtyId;
        
        initgPtyId = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('InitgPtyId', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank));
               
        if(initgPtyId)
        {
            //          9.1.12: Id
            nodeId = _nodeInitgPty.appendChild(xmlDoc.createElement('Id'));
    
            //              9.1.13: OrgId
            nodeOrgId = nodeId.appendChild(xmlDoc.createElement('OrgId'));
    
            //                  9.1.15: Other
            nodeOther = nodeOrgId.appendChild(xmlDoc.createElement('Othr'));
    
            //                      9.1.1.16: Id
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeOther, 'Id', initgPtyId, 35);
            
    
            //                      9.1.17: SchmeNm
            nodeSchmeNm = nodeOther.appendChild(xmlDoc.createElement('SchmeNm'));
    
            //                          9.1.18: Cd
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeSchmeNm, 'Cd', 'CUST');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_Cdtr_Id</Name>
				<Source><![CDATA[
    protected void node_PmtInf_Cdtr_Id(XmlElement _nodeCdtr)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.79: Cdtr
        //          Id
        //              OrgId
        //                  Othr
        //                      Id
        //                      SchemeName
        //------------------------------------------------------------------------------------------------------
    
        XmlElement nodeId;
        XmlElement nodeOrgPvtId;
        XmlElement nodeOthr;
        XmlElement nodeSchmeNm;
        str        id, schmeNm;

        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'US-SUNTRUST-XML-US':                
                id      =   msks_EFT_FileDetail.AccountNum;
                schmeNm =   'CUST';
                break;
        }
        if(id)
        {
            //          Id
            nodeId = _nodeCdtr.appendChild(xmlDoc.createElement('Id'));
    
            nodeOrgPvtId = nodeId.appendChild(xmlDoc.createElement('OrgId'));
    
            nodeOthr = nodeOrgPvtId.appendChild(xmlDoc.createElement('Othr'));
    
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeOthr, 'Id', id, 35);

            if(schmeNm)
            {
                nodeSchmeNm = nodeOthr.appendChild(xmlDoc.createElement('SchmeNm'));

                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeSchmeNm, 'Cd', schmeNm);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_Cdtr_PstlAdr</Name>
				<Source><![CDATA[
    protected void node_PmtInf_Cdtr_PstlAdr(XmlElement _nodeCdtr)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.19: Cdtr
        //          PstlAdr
        //------------------------------------------------------------------------------------------------------
    
        this.node_PstlAdr(_nodeCdtr, mRemittanceCountryRegionId, mRemittanceAdrline1, mRemittanceZipCode, mRemittanceCity, 0, mRemittanceAdrline2, mRemittanceState, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_Dbtr_Id</Name>
				<Source><![CDATA[
    protected void node_PmtInf_Dbtr_Id(XmlElement _nodeDbtr)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.19: Dbtr
        //          9.1.12: Id
        //              9.1.13: OrgId
        //                  9.1.15: Othr
        //                      9.1.16: Id
        //                          9.1.17: SchmeNm
        //                              9.1.18: Cd
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeId;
        XmlElement nodeOrgId;
        XmlElement nodeOther;
        XmlElement nodeSchmeNm;
        str id, schemeNm;
        int length;
        
        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'US-SUNTRUST-XML-US':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #ACH_CCD:
                    case #ACH_CTX:
                    case #SWIFT:
                        if(mSKS_EFT_FileDetail.FileACHCompanyId)
                        {
                            id          =   this.CharacterReplacement(mSKS_EFT_FileDetail.FileACHCompanyId);
                        }
                        else
                        {
                            id          =   this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyId);
                        }
                        length      =   35;
                        schemeNm    =   'CUST';
                        break;
                    case #CHK:
                    case #FED_WIRE:
                        id          =   this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyId);                        
                        length      =   35;
                        schemeNm    =   'CUST';
                        break;
                }
                break;            
        }
        if(id)
        {
            //          9.1.12: Id
            nodeId = _nodeDbtr.appendChild(xmlDoc.createElement('Id'));
    
            //              9.1.13: OrgId
            nodeOrgId = nodeId.appendChild(xmlDoc.createElement('OrgId'));
    
            //                  9.1.15: Othr
            nodeOther = nodeOrgId.appendChild(xmlDoc.createElement('Othr'));

            //                      9.1.16: Id
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeOther, 'Id', id, length);

            if(schemeNm)
            {
                //                          9.1.17: SchmeNm
                nodeSchmeNm = nodeOther.appendChild(xmlDoc.createElement('SchmeNm'));

                //                              9.1.18: Cd
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeSchmeNm, 'Cd', schemeNm);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_Dbtr_PstlAdr</Name>
				<Source><![CDATA[
    protected void node_PmtInf_Dbtr_PstlAdr(XmlElement _nodeDbtr)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.19: Dbtr
        //          PstlAdr
        //------------------------------------------------------------------------------------------------------
    
        this.node_PstlAdr(_nodeDbtr, mSKS_EFT_FileDetail_BankAccount.WOrdPartyCountryRegionId, mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr, mSKS_EFT_FileDetail_BankAccount.WOrdPartyZipCode, mSKS_EFT_FileDetail_BankAccount.WOrdPartyCity, 0, mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr2, mSKS_EFT_FileDetail_BankAccount.WOrdPartyState, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_DbtrAcct</Name>
				<Source><![CDATA[
    protected void node_PmtInf_DbtrAcct(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.20: DbtrAcct
        //          Id
        //              IBAN
        //              Othr
        //                  Id
        //          Tp
        //              Cd
        //          Ccy
        //------------------------------------------------------------------------------------------------------
        XmlElement  nodeDbtrAcct;
        XmlElement  nodeDbtrAcctId;
        XmlElement  nodeOthr;
        XmlElement  nodeDbtrAcctTp;
        str         value, iban, acctNum;
        boolean     type;
        int         lengthAcctNum = 34;
    
        iban    = mSKS_EFT_FileDetail.BankBankIBAN;
        acctNum = mSKS_EFT_FileDetail.BankBankAcct;

        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'US-SUNTRUST-XML-US':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #ACH_CTX:
                    case #ACH_CCD:
                    case #CHK:
                    case #FED_WIRE:
                        if(acctNum)
                        {
                            iban    =   '';
                        }
                        type    = true;
                        break;
                    case #SWIFT:
                        type    = true;
                        iban = '';
                        break;
                }
                break;
        }

        if(iban || acctNum)
        {
            //      2.20: DbtrAcct
            nodeDbtrAcct = nodePmtInf.appendChild(xmlDoc.createElement('DbtrAcct'));
    
            //          Id
            nodeDbtrAcctId = nodeDbtrAcct.appendChild(xmlDoc.createElement('Id'));
    
            if(iban)
            {
                //              IBAN
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeDbtrAcctId, 'IBAN', iban);
            }
            else if(acctNum)
            {
                //          Othr
                nodeOthr = nodeDbtrAcctId.appendChild(xmlDoc.createElement('Othr'));
    
                //              Id
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeOthr, 'Id', acctNum, lengthAcctNum);
            }
    
            //          Tp
            if(type)
            {
                if(mSKS_EFT_FileDetail.PaymSpec == #SWIFT)
                {
                    value = 'SACC';
                }
                else  if(mSKS_EFT_FileDetail.BankAcctType == BankAccountType::CheckingAccount) // Checking
                {
                    value = 'CACC';
                }
                else  // Savings
                {
                    value = 'SVGS';
                }
    
                nodeDbtrAcctTp = nodeDbtrAcct.appendChild(xmlDoc.createElement('Tp'));

                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeDbtrAcctTp, 'Cd', value);
            }
            //          Ccy
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeDbtrAcct, 'Ccy', mSKS_EFT_FileDetail.CurrencyCode);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_DbtrAgt</Name>
				<Source><![CDATA[
    protected void node_PmtInf_DbtrAgt(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.21: DbtrAgt
        //          FinInstnId
        //              BIC
        //              ClrSysMmbId
        //                  MmbId
        //              PstlAdr
        //                  Ctry
        //------------------------------------------------------------------------------------------------------
    
        XmlElement nodeDbtrAgt;
        XmlElement nodeFinInstnId;
        XmlElement nodeClrSysMmBId;
        XmlElement nodeDbtrAgtOthr;
        str     swift, rtg , value;
        boolean printswift = true;
        boolean printotherid = false;

        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #SWIFT:
                printswift =false;
                printotherid = true;
                break;
        }

        swift   = mSKS_EFT_FileDetail.BankBankSwiftNo;
        rtg     = mSKS_EFT_FileDetail.BankBankTransit;
        
        //      2.21: DbtrAgt
        nodeDbtrAgt = nodePmtInf.appendChild(xmlDoc.createElement('DbtrAgt'));
    
        //          FinInstnId
        nodeFinInstnId = nodeDbtrAgt.appendChild(xmlDoc.createElement('FinInstnId'));

        if(swift && printswift)
        {
            //              BIC
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeFinInstnId, 'BIC', swift);
        }
        else if(rtg)
        {
            //              ClrSysMmbId
            nodeClrSysMmBId = nodeFinInstnId.appendChild(xmlDoc.createElement('ClrSysMmbId'));

            //                  MmbId
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeClrSysMmBId, 'MmbId', rtg, 35, false);
        }
        
        select firstonly msks_EFT_FileDetail_BankAddress where
                msks_EFT_FileDetail_BankAddress.RefRecId == mSKS_EFT_FileDetail.RecID
                && msks_EFT_FileDetail_BankAddress.AddressType == SKS_EFT_AddressType::BankAddress;

        //                  Nm
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeFinInstnId, 'Nm', this.CharacterReplacement(msks_EFT_FileDetail_BankAddress.Name));
    

        this.node_PstlAdr(nodeFinInstnId, msks_EFT_FileDetail_BankAddress.CountryRegionId, msks_EFT_FileDetail_BankAddress.Addr, msks_EFT_FileDetail_BankAddress.ZipCode, msks_EFT_FileDetail_BankAddress.City, 0, msks_EFT_FileDetail_BankAddress.Addr2, msks_EFT_FileDetail_BankAddress.State, true); 

        value = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('Bankcode',  mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank));
        
        if((rtg != '' || swift !='') && printotherid && value)
        {
            //                  Othr
            nodeDbtrAgtOthr = nodeFinInstnId.appendChild(xmlDoc.createElement('Othr'));

            //                      Id
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeDbtrAgtOthr, 'Id', value);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_PmtTpInf</Name>
				<Source><![CDATA[
    protected void node_PmtInf_PmtTpInf(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.6: PmtTpInf
        //          2.7: InstrPrty
        //          2.8: SvcLvl
        //          2.11: LclInstrm
        //          2.14: CtgyPurp
        //------------------------------------------------------------------------------------------------------
        XmlElement nodePmftTpInf;
    
        //      2.6: PmtTpInf
        if(mSKS_EFT_FileFormatPaymSpec.UseCheckNumber == NoYes::No || (subStr(mSKS_EFT_FileDetail.PaymSpec, 1, 3) != 'CHK'))
        {
            nodePmftTpInf = _nodePmtInf.appendChild(xmlDoc.createElement('PmtTpInf'));    
    
            //          2.8: SvcLvl
            this.node_PmtInf_PmtTpInf_SvcLvl(nodePmftTpInf);

            
            //          2.11: LclInstrm
            this.node_PmtInf_PmtTpInf_LclInstrm(nodePmftTpInf);
        }    
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_PmtTpInf_SvcLvl</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_PmtInf_PmtTpInf_SvcLvl
    /// </summary>
    /// <param name = "_nodePmftTpInf">_nodePmftTpInf</param>
    protected void node_PmtInf_PmtTpInf_SvcLvl(XmlElement _nodePmftTpInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.8: SvcLvl
        //              2.9: Cd
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeSvcLvl;
        boolean printSvclvl = true;
        
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #SWIFT:
                printSvclvl =false;
                break;
        }
    
        if(mSKS_EFT_FileFormatPaymSpec.UseCheckNumber == NoYes::No && subStr(mSKS_EFT_FileDetail.PaymSpec, 1, 3) != 'CHK')
        {
            if(printSvclvl)
            {
                //          2.8: SvcLvl
                nodeSvcLvl = _nodePmftTpInf.appendChild(xmlDoc.createElement('SvcLvl'));
            
    
                //              2.9: Cd
                this.node_PmtInf_PmtTpInf_SvcLvl_Cd(nodeSvcLvl);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_PmtTpInf_SvcLvl_Cd</Name>
				<Source><![CDATA[
    protected void node_PmtInf_PmtTpInf_SvcLvl_Cd(XmlElement _nodeSvcLvl)
    {
        //------------------------------------------------------------------------------------------------------
        //              2.9: Cd
        //------------------------------------------------------------------------------------------------------
        str value;

        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'US-SUNTRUST-XML-US':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #ACH_CCD:
                    case #ACH_CTX:
                        value = 'NURG';
                        break;
                    case #FED_WIRE:
                        value = 'URGP';
                        break;
                }
                break;
        }
    
        if(value)
        {
            //              2.9: Cd
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeSvcLvl, 'Cd', value, 0, false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_RmtInf_Amt</Name>
				<Source><![CDATA[
    protected void node_RmtInf_Amt(XmlElement _nodeRfrdDocAmt, SKS_EFT_FileDetail _invSKS_EFT_FileDetail)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.42: Amt
        //              2.43: InstdAmt
        //------------------------------------------------------------------------------------------------------
        XmlElement  currentElement;
        AmountMST   gross = _invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur + _invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur;
        AmountMST   Remitted;
        AmountMST   CreditNote;
    
        if(_invSKS_EFT_FileDetail.InvoiceSettleAmountCur > 0)
        {
            Remitted = 0;
            CreditNote = _invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur;
            //      2.110
            currentElement = SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeRfrdDocAmt, 'DuePyblAmt', num2str(gross * 1,0,2,1,0));
            SKS_EFT_Format::xmlsetAttributeText(currentElement, 'Ccy', _invSKS_EFT_FileDetail.PaymentCurrencyCode);
    
            //      2.111
            currentElement = SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeRfrdDocAmt, 'DscntApldAmt', num2str(_invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur * 1,0,2,1,0));
            SKS_EFT_Format::xmlsetAttributeText(currentElement, 'Ccy', _invSKS_EFT_FileDetail.PaymentCurrencyCode);
        }
        else
        {
            Remitted = _invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1;
            CreditNote = 0;
            //      2.110
            currentElement = SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeRfrdDocAmt, 'DuePyblAmt', num2str(gross * -1,0,2,1,0));
            SKS_EFT_Format::xmlsetAttributeText(currentElement, 'Ccy', _invSKS_EFT_FileDetail.PaymentCurrencyCode);
    
            //      2.111
            currentElement = SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeRfrdDocAmt, 'DscntApldAmt', num2str(_invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur * -1,0,2,1,0));
            SKS_EFT_Format::xmlsetAttributeText(currentElement, 'Ccy', _invSKS_EFT_FileDetail.PaymentCurrencyCode);
        }
    
        if(Remitted != 0)
        {
            //      RmtdAmt
            currentElement = SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeRfrdDocAmt, 'RmtdAmt', num2str(Remitted,0,2,1,0));
            SKS_EFT_Format::xmlsetAttributeText(currentElement, 'Ccy', _invSKS_EFT_FileDetail.PaymentCurrencyCode);
        }
        else
        {
            //      CdtNoteAmt
            currentElement = SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeRfrdDocAmt, 'CdtNoteAmt', num2str(CreditNote,0,2,1,0));
            SKS_EFT_Format::xmlsetAttributeText(currentElement, 'Ccy', _invSKS_EFT_FileDetail.PaymentCurrencyCode);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_GrpHdr_InitgPty</Name>
				<Source><![CDATA[
    protected void node_GrpHdr_InitgPty(XmlElement _nodeGrpHdr)
    {
        //------------------------------------------------------------------------------------------------------
        //      1.8: InitgPty
        //          Nm
        //          Id
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeInitgPty;
    
    
        //      1.8: InitgPty
        nodeInitgPty = _nodeGrpHdr.appendChild(xmlDoc.createElement('InitgPty'));
    
        //          Nm
        this.node_GrpHdr_InitgPty_Nm(nodeInitgPty);
        
        //          PstlAdr
        this.node_GrpHdr_InitgPty_PstlAdr(nodeInitgPty);
    
        //          Id
        this.node_GrpHdr_InitgPty_Id(nodeInitgPty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_GrpHdr_InitgPty_PstlAdr</Name>
				<Source><![CDATA[
    protected void node_GrpHdr_InitgPty_PstlAdr(XmlElement _nodeInitgPty)
    {
        //------------------------------------------------------------------------------------------------------
        //      1.8: InitgPty
        //          Nm
        //------------------------------------------------------------------------------------------------------
        LogisticsPostalAddress  postalAddress;
        XmlElement              nodePstlAdr;
    
        postalAddress = this.findPostalAddressLineByPartyLocationRole(CompanyInfo::current(), 'APEFT');
    
        if(postalAddress)
        {
            //      PstlAdr
            nodePstlAdr = _nodeInitgPty.appendChild(xmlDoc.createElement('PstlAdr'));

            //          StrtNm
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePstlAdr, 'StrtNm', this.CharacterReplacement(postalAddress.Street), 35, false);

            //          StrtNm
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePstlAdr, 'BldgNb', this.CharacterReplacement(postalAddress.BuildingCompliment), 35, false);
    
            //          PstCd
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePstlAdr, 'PstCd', this.CharacterReplacement(postalAddress.ZipCode), 16, false);
    
            //          TwnNm
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePstlAdr, 'TwnNm', this.CharacterReplacement(postalAddress.City), 35, false);

            //          CtrySubDvsn
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePstlAdr, 'CtrySubDvsn', this.CharacterReplacement(postalAddress.State), 35, false);
    
            //          Ctry
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePstlAdr, 'Ctry', this.getLogisticsAddressCountryISO(postalAddress.CountryRegionId), 2, false);    
            
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_Dbtr_Nm</Name>
				<Source><![CDATA[
    protected void node_PmtInf_Dbtr_Nm(XmlElement _nodeDbtr)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.19: Dbtr
        //          Nm
        //------------------------------------------------------------------------------------------------------
        int length;
    
        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'US-SUNTRUST-XML-US' :
                length = 140;
                break;
        }
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeDbtr, 'Nm', this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyName), length, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_PmtTpInf_LclInstrm</Name>
				<Source><![CDATA[
    protected void node_PmtInf_PmtTpInf_LclInstrm(XmlElement _nodePmftTpInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.31 PmtTpInf
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeLclInstrm;
        str value;

        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'US-SUNTRUST-XML-US':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #ACH_CTX:
                        value = 'CTX';
                        break;
                    case #ACH_CCD:
                        value = 'CCD';
                        break;
                    case #FED_WIRE:
                        value = 'CTR';
                        break;
                    case #SWIFT:
                        value = 'CTR';
                        break;
                    default:
                        value = '';
                        break;
                }
                break;
        }
        if(value)
        {
            nodeLclInstrm = _nodePmftTpInf.appendChild(xmlDoc.createElement('LclInstrm'));
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeLclInstrm, 'Cd', value);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_PmtId</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_PmtId(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.28: PmtId
        //              2.30: EndToEndId
        //------------------------------------------------------------------------------------------------------        
        XmlElement  nodePmtId;
                        
        //          2.28: PmtId
        nodePmtId = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('PmtId'));
        
        //              2.29: InstrId
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtId, 'InstrId', SKS_PP_StringFormats::strRight(this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference), 35));        

        //              2.30: EndToEndId
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtId, 'EndToEndId', SKS_PP_StringFormats::strRight(this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference), 35));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRemittanceAddress</Name>
				<Source><![CDATA[
    void getRemittanceAddress(boolean UseCheckNum)
    {
        LedgerJournalTrans      lLedgerJournalTrans;
        LogisticsLocation       lLogisticsLocation;
        LogisticsPostalAddress  lRemittancePostalAddress;
        Array vendAddrArray = new Array(Types::String);
        
        if(UseCheckNum && mSKS_EFT_FileDetail.PaymentLineRecId != 0)
        {
            select firstonly * from lRemittancePostalAddress join  RemittanceAddress from lLedgerJournalTrans
                    where lRemittancePostalAddress.Location == lLedgerJournalTrans.RemittanceLocation
                        && lLedgerJournalTrans.RecId == mSKS_EFT_FileDetail.PaymentLineRecId;
    
            lLogisticsLocation = LogisticsLocation::find(lLedgerJournalTrans.RemittanceLocation);
    
            //Populate Remittance Information
            mRemittanceName = lLogisticsLocation.Description;
    
            vendAddrArray = SKS_PP_50000Bas::StreetToAddressLineArray(lRemittancePostalAddress.Street,2);
    
            mRemittanceAdrLine1 = '';
            mRemittanceAdrLine2 = '';
            mRemittanceAdrLine3 = '';
    
            if(vendAddrArray.exists(1))
            {
                mRemittanceAdrLine1 = vendAddrArray.value(1);
                if (vendAddrArray.exists(2))
                {
                    mRemittanceAdrLine2 = vendAddrArray.value(2);
                }
                if (vendAddrArray.exists(3))
                {
                    mRemittanceAdrLine3 = vendAddrArray.value(3);
                }
            }
            mRemittanceCity = this.CharacterReplacement(lRemittancePostalAddress.City);
            mRemittanceState = this.CharacterReplacement(lRemittancePostalAddress.State);
            mRemittanceZipCode = this.CharacterReplacement(lRemittancePostalAddress.ZipCode);
            mRemittanceCountryRegionId = this.getLogisticsAddressCountryISO(lRemittancePostalAddress.CountryRegionId);
        }
        else
        {
            //Populate Remittance Information from Vendor eBanking details
            mRemittanceName = this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneName);
            mRemittanceAdrLine1 = this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneAddr);
            mRemittanceAdrLine2 = this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneAddr2);
            mRemittanceCity = this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneCity);
            mRemittanceState = this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneState);
            mRemittanceZipCode = this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneZipPostal);
            mRemittanceCountryRegionId = this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_VendAddress.BeneCountryRegionId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_Cdtr_Nm</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_Cdtr_Nm(XmlElement _nodeCdtr)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.79: Cdtr
        //              Nm
        //------------------------------------------------------------------------------------------------------
        str name = mSKS_EFT_FileDetail.AccountName;

        if(mRemittanceName != '')
        {
            name = mRemittanceName;
        }

        //              Nm
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeCdtr, 'Nm', this.CharacterReplacement(name), 140);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>