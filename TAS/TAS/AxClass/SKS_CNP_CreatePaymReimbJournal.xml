<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_CNP_CreatePaymReimbJournal</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_CNP_CreatePaymReimbJournal extends CustVendCreatePaymJournal_Cust
{
    DialogField dialogMinDate;
    DialogField dialogMinDay;
    DialogField dialogPaymMode;
    DialogField dialogPaymSpec;
    DialogField dialogMinAmountToReimb;
    DialogField dialogIncludeCust;
    DialogField dialogDueDate;
    NoYesId includeCust;
    Amount minAmountToReimb;
    PaymMode paymMode;
    PaymSpec paymSpec;
    TransDate minDate, dueDate, locDueDate;
    Integer minDay;
    SKS_EFT_Setup eftSetup;

    #DEFINE.CurrentVersion(29)
    #LOCALMACRO.CurrentList
            minDate,
            paymMode,
            //paymSpec,
            minAmountToReimb,
            minDay,
            includeCust,
            custBillingClassificationIds,
            inclTransWithNoBillingClassification,
            parentPackedValues,
            custBillingClassificationIdsContainer,
            isBillingClassificationEnabled,
            paymSpec,
            locDueDate,
            dueDate
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static SKS_CNP_CreatePaymReimbJournal construct()
    {
        return new SKS_CNP_CreatePaymReimbJournal();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return 'Customer reimbursement proposal';
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogAddOffsetAccountAndTypeFields</Name>
				<Source><![CDATA[
    protected void dialogAddOffsetAccountAndTypeFields()
    {
        this.dialogPaymModeSelectionFields();
        this.dialogPaymSpecSelectionFields();
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogAddInvoiceSelectionCriteriaFields</Name>
				<Source><![CDATA[
    protected void dialogAddInvoiceSelectionCriteriaFields()
    {
        select eftSetup where eftSetup;

        dialog.addGroup('Selection criteria').widthMode(FormWidth::SizeToAvailable);
        
        this.dialogMinAmountToReimbFields();
        this.dialogAddMinimumPaymentDateField();
        this.dialogAddDueDateField();
        this.dialogMinDaySelectionFields();
        this.dialogIncludeCustSelectionFields();

        this.dialogAddPaymProposalType();
        dialogPaymProposalType.visible(false);
        this.dialogAddDateSelectionFields();
        dialogFromDate.visible(false);
        dialogToDate.visible(false);

        dialogAmountMax = dialog.addFieldValue(extendedTypeStr(Amount),  amountMax, "@SYS27719");

        FormBuildRealControl dialogAmountMaxControl = dialogAmountMax.control() as FormBuildRealControl;
        dialogAmountMaxControl.allowNegative(false);
        dialogAmountMax.visible(false);

        dialogSkipEditForm = dialog.addFieldValue(extendedTypeStr(NoYesId), skipProposalEditForm, "@CashManagement:SkipEditDialog");
        dialogSkipEditForm.visible(false);
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogPaymModeSelectionFields</Name>
				<Source><![CDATA[
    protected void dialogPaymModeSelectionFields()
    {
        dialogPaymMode = dialog.addFieldValue(extendedTypeStr(PaymMode), paymMode, 'Default method of payment');

        dialogPaymMode.value(eftSetup.CNPDefaultPaymMode);
        if(eftSetup.CNPAllowOverridePaymtProposal)
        {
            dialogPaymMode.value(eftSetup.CNPDefaultPaymMode);
        }
        else
        {
          //  dialogPaymMode.value('');
            dialogPaymMode.value(eftSetup.CNPDefaultPaymMode);
            dialogPaymMode.allowEdit(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogPaymSpecSelectionFields</Name>
				<Source><![CDATA[
    protected void dialogPaymSpecSelectionFields()
    {
        dialogPaymSpec = dialog.addFieldValue(extendedTypeStr(PaymSpec), paymSpec, 'Default payment specification');

        if(eftSetup.CNPAllowOverridePaymtProposal)
        {
            dialogPaymSpec.value(eftSetup.CNPDefaultPaymSpec);
        }
        else
        {
            //dialogPaymSpec.value('');
            dialogPaymSpec.value(eftSetup.CNPDefaultPaymSpec);
            dialogPaymSpec.allowEdit(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogMinAmountToReimbFields</Name>
				<Source><![CDATA[
    protected void dialogMinAmountToReimbFields()
    {
        dialogMinAmountToReimb = dialog.addFieldValue(extendedTypeStr(Amount), minAmountToReimb, 'Minimum amount to reimburse');

        if(eftSetup.CNPAllowOverridePaymtProposal)
        {
            dialogMinAmountToReimb.value(eftSetup.CNPMinAmountReimb);
        }
        else
        {
           // dialogMinAmountToReimb.value(0);
            dialogMinAmountToReimb.value(eftSetup.CNPMinAmountReimb);
            dialogMinAmountToReimb.allowEdit(false);
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogMinDaySelectionFields</Name>
				<Source><![CDATA[
    protected void dialogMinDaySelectionFields()
    {
        dialogMinDay = dialog.addFieldValue(extendedTypeStr(Integer), minDay, 'Minimum days of reimbursement');

        if(eftSetup.CNPAllowOverridePaymtProposal)
        {
            dialogMinDay.value(eftSetup.CNPMinDayToReimb);
        }
        else
        {
           // dialogMinDay.value(0);
            dialogMinDay.value(eftSetup.CNPMinDayToReimb);
            dialogMinDay.allowEdit(false);
        }
        

        FormBuildIntControl dialogDialogMinDayControl = dialogMinDay.control() as FormBuildIntControl;
        dialogDialogMinDayControl.allowNegative(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogIncludeCustSelectionFields</Name>
				<Source><![CDATA[
    protected void dialogIncludeCustSelectionFields()
    {
        dialogIncludeCust = dialog.addFieldValue(extendedTypeStr(NoYesId), includeCust, "@SKS:SKGCNPIncludeCustInvs");

        if(eftSetup.CNPAllowOverridePaymtProposal)
        {
            dialogIncludeCust.value(eftSetup.CNPIncludeOpenTrans);
        }
        else
        {
            //dialogIncludeCust.value(false);
            dialogIncludeCust.value(eftSetup.CNPIncludeOpenTrans);
            dialogIncludeCust.allowEdit(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogAddBalanceCheckField</Name>
				<Source><![CDATA[
    protected void dialogAddBalanceCheckField()
    {
        dialogBalanceCheck = dialog.addFieldValue(enumStr(NoYes), balanceCheck, "@CashManagement:CheckCustomerBalance");

        dialogBalanceCheck.visible(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogAddMinimumPaymentDateField</Name>
				<Source><![CDATA[
    protected void dialogAddMinimumPaymentDateField()
    {
        dialogEarlyPaymDate = dialog.addFieldValue(extendedTypeStr(DueDate), earlyPaymDate, "@CashManagement:MinPaymDate");
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogAddDueDateField</Name>
				<Source><![CDATA[
    protected void dialogAddDueDateField()
    {
        dialogDueDate = dialog.addFieldValue(extendedTypeStr(DueDate), locDueDate, "@SKS4293");
        dialogDueDate.value(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
        
        FormBuildDateControl dialogDialogDueDateControl = dialogDueDate.control() as FormBuildDateControl;
        dialogDialogDueDateControl.mandatory(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogPostRun</Name>
				<Source><![CDATA[
    public void dialogPostRun(DialogRunbase _dialog)
    {
        super(dialog);

        dialogDeleteCredit.visible(false);
        dialogPrintProposal.visible(false);

        dialogPaymMode.registerOverrideMethod(
                methodStr(FormStringControl, lookup),
                methodStr(SKS_CNP_CreatePaymReimbJournal, lookupPaymMode),
                this);

        dialogPaymSpec.registerOverrideMethod(
                methodStr(FormStringControl, lookup),
                methodStr(SKS_CNP_CreatePaymReimbJournal, lookupPaymSpec),
                this);

        dialogPaymMode.registerOverrideMethod(
            methodStr(FormStringControl, modified),
            methodStr(SKS_CNP_CreatePaymReimbJournal, paymMode_Modified),
            this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymMode_Modified</Name>
				<Source><![CDATA[
    private boolean paymMode_Modified(FormStringControl _formStringControl)
    {
        boolean valueWasModified = _formStringControl.modified();

        if (valueWasModified)
        {
            dialogPaymSpec.value('');
        }

        return valueWasModified;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupPaymMode</Name>
				<Source><![CDATA[
    protected void lookupPaymMode(FormStringControl _callingControl)
    {
        
        Query query = new Query();

        QueryBuildDataSource qbds = query.addDataSource(tableNum(CustPaymModeTable));

        QueryBuildRange qbrType = qbds.addRange(fieldNum(CustPaymModeTable, SKS_CNP_PaymMode));
        qbrType.value(SysQuery::value(NoYes::Yes));
        
        SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(CustPaymModeTable), _callingControl);
 
        sysTableLookup.addLookupfield(fieldNum(CustPaymModeTable, PaymMode));
        sysTableLookup.addLookupfield(fieldNum(CustPaymModeTable, Name));
        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupPaymSpec</Name>
				<Source><![CDATA[
    protected void lookupPaymSpec(FormStringControl _callingControl)
    {
        
        Query query = new Query();

        QueryBuildDataSource qbds = query.addDataSource(tableNum(CustPaymModeSpec));

        QueryBuildRange qbrType = qbds.addRange(fieldNum(CustPaymModeSpec, PaymMode));
        qbrType.value(queryValue(dialogPaymMode.value()));
        
        SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(CustPaymModeSpec), _callingControl);
 
        sysTableLookup.addLookupfield(fieldNum(CustPaymModeSpec, Specification));
        sysTableLookup.addLookupfield(fieldNum(CustPaymModeSpec, Name));
        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        paymMode = dialogPaymMode.value();
        paymSpec = dialogPaymSpec.value();
        minDay = dialogMinDay.value();
        includeCust = dialogIncludeCust.value();
        minAmountToReimb = dialogMinAmountToReimb.value();
        dueDate = dialogEarlyPaymDate.value();
        locDueDate = dialogDueDate.value();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>filetrMultiCompanyCustTransData</Name>
				<Source><![CDATA[
    protected void filetrMultiCompanyCustTransData()
    {        
        CustTrans custTransLocal;
        CustTable custTable;
        CustTransOpen custTransOpenLocal;
        PaymMode paymModeLocal = paymMode;
        JournalId journalId = this.parmLedgerJournalId();

        if(includeCust)
        {
            while select crosscompany sum(AmountCur) from custTransLocal group by AccountNum, DataAreaId
                where custTransLocal.DueDate  <= locDueDate - minDay
                exists join custTransOpenLocal where custTransOpenLocal.AccountNum == custTransLocal.AccountNum && custTransOpenLocal.RefRecId == custTransLocal.RecId
                exists join custTable where custTable.AccountNum == custTransLocal.AccountNum// && custTable.Blocked == CustVendorBlocked::No
            {
                if( custTransLocal.AmountCur <= -1 * minAmountToReimb)
                {
                    changecompany(custTransLocal.DataAreaId)
                    {
                        SKS_CNP_TmpCustTrans cNP_CustTrans;
                        CustTransOpen transOpen, transOpenDebit;
                        CustTrans trans, transDebit;
                        real totalCreditAmount = 0;
                        real countRec = 0;

                        trans.clear();
                        select sum(AmountCur) from trans
                            where trans.DueDate <= locDueDate - minDay &&
                            trans.AccountNum == custTransLocal.AccountNum
                            exists join transOpen where transOpen.AccountNum == trans.AccountNum && transOpen.RefRecId == trans.RecId;

                        real reImbAmount = trans.AmountCur;

                        if(reImbAmount <= -1 * minAmountToReimb)
                        {
                            trans.clear();

                            while select trans
                                where trans.AccountNum == custTransLocal.AccountNum &&
                                    trans.DueDate <= locDueDate - minDay &&
                                    trans.AmountCur < 0
                                exists join transOpen where transOpen.AccountNum == trans.AccountNum && transOpen.RefRecId == trans.RecId
                            {
                                totalCreditAmount += trans.AmountCur;
                                countRec++;

                                if(totalCreditAmount < reImbAmount)
                                {
                                    cNP_CustTrans.CustTransRecId = trans.RecId;
                                    cNP_CustTrans.JournalNum = journalId;
                                    cNP_CustTrans.PaymMode = paymModeLocal;
                                    cNP_CustTrans.AccountNum = trans.AccountNum;
                                    cNP_CustTrans.insert();

                                    int remainAmount = real2int(abs(totalCreditAmount) - abs(reImbAmount));
                                    while select transDebit
                                        where transDebit.AccountNum == custTransLocal.AccountNum &&
                                        transDebit.DueDate <= locDueDate - minDay &&
                                        transDebit.AmountCur <= remainAmount &&
                                        transDebit.AmountCur > 0
                                        exists join transOpenDebit where transOpenDebit.AccountNum == transDebit.AccountNum && transOpenDebit.RefRecId == transDebit.RecId
                                    {
                                        remainAmount = real2int(remainAmount - transDebit.AmountCur);

                                        cNP_CustTrans.CustTransRecId = transDebit.RecId;
                                        cNP_CustTrans.JournalNum = journalId;
                                        cNP_CustTrans.PaymMode = paymModeLocal;
                                        cNP_CustTrans.AccountNum = transDebit.AccountNum;
                                        cNP_CustTrans.insert();
                                    }

                                    break;
                                }
                                else if(totalCreditAmount == reImbAmount)
                                {
                                    cNP_CustTrans.CustTransRecId = trans.RecId;
                                    cNP_CustTrans.JournalNum = journalId;
                                    cNP_CustTrans.PaymMode = paymModeLocal;
                                    cNP_CustTrans.AccountNum = trans.AccountNum;
                                    cNP_CustTrans.insert();
                                    break;
                                }
                                else
                                {
                                    cNP_CustTrans.CustTransRecId = trans.RecId;
                                    cNP_CustTrans.JournalNum = journalId;
                                    cNP_CustTrans.PaymMode = paymModeLocal;
                                    cNP_CustTrans.AccountNum = trans.AccountNum;
                                    cNP_CustTrans.insert();
                                }
                            }
                        }
                    }
                }
            }
        }
        else
        {
            while select crosscompany AccountNum, DataAreaId, sum(AmountCur) from custTransLocal group by AccountNum, DataAreaId
                where custTransLocal.DueDate <= locDueDate - minDay
                && custTransLocal.AmountCur < 0
                exists join custTransOpenLocal where custTransOpenLocal.AccountNum == custTransLocal.AccountNum && custTransOpenLocal.RefRecId == custTransLocal.RecId
                exists join custTable where custTable.AccountNum == custTransLocal.AccountNum //&& custTable.Blocked == CustVendorBlocked::No
            {
                if(custTransLocal.AmountCur <= -1 * minAmountToReimb)
                {
                    changecompany(custTransLocal.DataAreaId)
                    {
                        SKS_CNP_TmpCustTrans cNP_CustTrans;
                        CustTrans trans;
                        CustTransOpen transOpen;

                        insert_recordset cNP_CustTrans (CustTransRecId, PaymMode, JournalNum, AccountNum)
                            select RecId, paymModeLocal, journalId, AccountNum from trans
                                where trans.AccountNum == custTransLocal.AccountNum &&
                                    trans.DueDate <= locDueDate - minDay &&
                                    trans.AmountCur < 0
                            exists join transOpen where transOpen.AccountNum == trans.AccountNum && transOpen.RefRecId == trans.RecId;
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>filetrCustTransData</Name>
				<Source><![CDATA[
    protected void filetrCustTransData()
    {
        SKS_CNP_TmpCustTrans cNP_CustTrans;
        CustTrans custTransLocal, trans, transDebit;
        CustTransOpen custTransOpenLocal, transOpen, transOpenDebit;
        CustTable custTable;
        PaymMode paymModeLocal = paymMode;        
        JournalId journalId = this.parmLedgerJournalId();

        if(includeCust)
        {
            while select AccountNum, sum(AmountCur) from custTransLocal group by AccountNum where custTransLocal.DueDate <= locDueDate - minDay 
                exists join custTransOpenLocal where custTransOpenLocal.AccountNum == custTransLocal.AccountNum && custTransOpenLocal.RefRecId == custTransLocal.RecId
                exists join custTable where custTable.AccountNum == custTransLocal.AccountNum //&& custTable.Blocked == CustVendorBlocked::No
            {
                if(custTransLocal.AmountCur <= -1 * minAmountToReimb)
                {
                    real reImbAmount = custTransLocal.AmountCur;
                    real totalCreditAmount = 0;
                    real countRec = 0;
                    trans.clear();
                    if(reImbAmount <= -1 * minAmountToReimb)
                    {
                        trans.clear();

                        while select trans
                                where trans.AccountNum == custTransLocal.AccountNum &&
                                    trans.DueDate <= locDueDate - minDay &&
                                    trans.AmountCur < 0
                                exists join transOpen where transOpen.AccountNum == trans.AccountNum && transOpen.RefRecId == trans.RecId
                        {
                            totalCreditAmount += trans.AmountCur;
                            countRec++;

                            if(totalCreditAmount < reImbAmount)
                            {
                                cNP_CustTrans.CustTransRecId = trans.RecId;
                                cNP_CustTrans.JournalNum = journalId;
                                cNP_CustTrans.PaymMode = paymModeLocal;
                                cNP_CustTrans.AccountNum = trans.AccountNum;
                                cNP_CustTrans.insert();

                                int remainAmount = real2int(abs(totalCreditAmount) - abs(reImbAmount));
                                while select transDebit
                                    where transDebit.AccountNum == custTransLocal.AccountNum &&
                                    transDebit.DueDate <= locDueDate - minDay &&
                                    transDebit.AmountCur <= remainAmount &&
                                    transDebit.AmountCur > 0
                                    exists join transOpenDebit where transOpenDebit.AccountNum == transDebit.AccountNum && transOpenDebit.RefRecId == transDebit.RecId
                                {
                                    remainAmount =real2int(remainAmount - transDebit.AmountCur);

                                    cNP_CustTrans.CustTransRecId = transDebit.RecId;
                                    cNP_CustTrans.JournalNum = journalId;
                                    cNP_CustTrans.PaymMode = paymModeLocal;
                                    cNP_CustTrans.AccountNum = transDebit.AccountNum;
                                    cNP_CustTrans.insert();
                                }

                              //  break;
                            }
                            else if(totalCreditAmount == reImbAmount)
                            {   
                                cNP_CustTrans.CustTransRecId = trans.RecId;
                                cNP_CustTrans.JournalNum = journalId;
                                cNP_CustTrans.PaymMode = paymModeLocal;
                                cNP_CustTrans.AccountNum = trans.AccountNum;
                                cNP_CustTrans.insert();
                                break;
                            }
                            else
                            {
                                cNP_CustTrans.CustTransRecId = trans.RecId;
                                cNP_CustTrans.JournalNum = journalId;
                                cNP_CustTrans.PaymMode = paymModeLocal;
                                cNP_CustTrans.AccountNum = trans.AccountNum;
                                cNP_CustTrans.insert();
                            }
                        }
                    }
                }
            }
        }
        else
        {
            while select AccountNum, sum(AmountCur) from custTransLocal group by AccountNum
                where custTransLocal.DueDate <= locDueDate - minDay
                && custTransLocal.AmountCur < 0  
                exists join transOpen where transOpen.AccountNum == custTransLocal.AccountNum && transOpen.RefRecId == custTransLocal.RecId
                exists join custTable where custTable.AccountNum == custTransLocal.AccountNum
            {
                if(custTransLocal.AmountCur <= -1 * minAmountToReimb)
                {
                    insert_recordset cNP_CustTrans (CustTransRecId, PaymMode, JournalNum, AccountNum)
                        select RecId, paymModeLocal, journalId, AccountNum from trans
                            where trans.AccountNum == custTransLocal.AccountNum &&
                                trans.DueDate <= locDueDate - minDay &&
                                trans.AmountCur < 0
                        exists join transOpen where transOpen.AccountNum == trans.AccountNum && transOpen.RefRecId == trans.RecId;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>searchTransactions</Name>
				<Source><![CDATA[
    protected void searchTransactions()
    {
        CustTable                       custTable;
        CustTrans                       custTrans;
        CustTransOpen                   custTransOpen;
        AmountCur                       paymentAmount;
        AmountMST                       mstBalance;
        CustVendPaymProposalCalcPaym    paymProposalCalcPaym = paymProposal.parmPaymProposalCalcPaym();
        boolean                         includeTransaction;
        CompanyId                       lastCustTableCompany = '';
        CustAccount                     lastCustNumber;
        LedgerDimensionDefaultAccount   defaultOffsetLedgerAccount;
        RecId                           ledgerDimension;
        CompanyId                       lastProposalCompany = '';
        boolean                         contextChanged;
        boolean                         isSetupDimensions;
        DimensionDefault                headerDefaultDimension;
        Query                           query;
        QueryBuildDataSource            custBillingClassificationDatasource;
        QueryBuildRange                 custBillingClassificationDataSourceRange;


        paymProposal.parmReimbursement(true);
        paymProposal.parmMinDayToReimburse(minDay);
        paymProposal.parmPaymMode(paymMode);
        paymProposal.parmPaymSpec(paymSpec);
        paymProposal.parmIncludeCustDebitBalnace(includeCust);
        paymProposal.parmDueDate(locDueDate);

        if(dueDate)
        {
            if(dueDate >= locDueDate)
            {
                paymProposalCalcPaym.parmMinimumPaymDate(locDueDate);
            }
            else
            {
                paymProposalCalcPaym.parmMinimumPaymDate(dueDate);
            }
        }

        // Init isSetupDimensions
        defaultOffsetLedgerAccount = this.parmDefaultOffsetLedgerDimension();
        isSetupDimensions = (defaultOffsetLedgerAccount != 0) && (paymProposal.parmDefaultOffsetAccountType() == LedgerJournalACType::Ledger);

        if (isBillingClassificationEnabled)
        {
            /**************************************************************************************/
            // Filter the customer payment proposal data according to the Billing Classification field
            custBillingClassificationIds = con2StrUnlimited(custBillingClassificationIdsContainer,#comma);

            query = queryCreatePayment.query();
            custBillingClassificationDatasource = query.dataSourceTable(tableNum(CustTrans));

            custBillingClassificationDataSourceRange = custBillingClassificationDatasource.findRange(fieldNum(CustTrans, CustBillingClassification));

            if (custBillingClassificationDataSourceRange != null)
            {
                custBillingClassificationDatasource.clearRange(fieldNum(CustTrans, CustBillingClassification));
            }
            custBillingClassificationDataSourceRange = custBillingClassificationDatasource.addRange(fieldNum(CustTrans, CustBillingClassification));

            if (custBillingClassificationIds)
            {
                if (inclTransWithNoBillingClassification == NoYes::Yes)
                {
                    custBillingClassificationIds = custBillingClassificationIds + #comma + #zero;
                }
                custBillingClassificationDataSourceRange.value(custBillingClassificationIds);
            }
            else
            {
                if (inclTransWithNoBillingClassification == NoYes::No)
                {
                    return;
                }
                else
                {
                    custBillingClassificationDataSourceRange.value(SysQuery::value(queryValue(0)));
                }
            }
            /**************************************************************************************/
        }

        queryCreatePayment.reset();

        while (queryCreatePayment.next())
        {
            if (balanceCheck)
            {
                // Determine if the CustTable record from the query is referencing a different logical customer
                // than the previous transaction. This is needed because Query.changed(CustTable) will not
                // return true if the customer differs only by company in the shared table scenario. See also kernel bug 47368.
                custTable = queryCreatePayment.get(tableNum(CustTable));
                if (queryCreatePayment.changed(tableNum(CustTable)) ||
                    custTable.company() != lastCustTableCompany)
                {
                    lastCustTableCompany = custTable.company();
                    mstBalance = this.getCachedMstBalance(custTable);
                }
                if (mstBalance < 0)
                {
                    continue;
                }
            }

            if (queryCreatePayment.changed(tableNum(CustTransOpen)))
            {
                custTransOpen = queryCreatePayment.get(tableNum(CustTransOpen));

                if (isPaymentRequestsEnabled)
                {
                    paymentRequestTable = queryCreatePayment.get(tableNum(CFMPaymentRequestTable));
                }

                // The invocation of calc() determines the appropriate payment date which is stored on the paymProposalCalcPaym object.
                includeTransaction = this.calc(custTransOpen);

                if (includeTransaction)
                {
                    // Setup dimensions for current customer
                    if (isSetupDimensions)
                    {
                        // Check if customer changed
                        if (lastCustNumber != custTransOpen.AccountNum)
                        {
                            lastCustNumber = custTransOpen.AccountNum;
                            contextChanged = true;
                        }

                        // Check if company changed
                        if (lastProposalCompany != custTransOpen.DataAreaId)
                        {
                            lastProposalCompany = custTransOpen.DataAreaId;
                            contextChanged = true;
                        }

                        if (contextChanged)
                        {
                            contextChanged = false;

                            headerDefaultDimension = this.getJournalHeaderDefaultDimension(custTransOpen.DataAreaId);
                            custTable = queryCreatePayment.get(tableNum(CustTable));
                            ledgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(defaultOffsetLedgerAccount, headerDefaultDimension, custTable.DefaultDimension, this.parmMainAccountDefaultDimension());

                            paymProposal.parmDefaultOffsetLedgerDimension(ledgerDimension);
                        }
                    }

                    custTrans = queryCreatePayment.get(tableNum(CustTrans));

                    changecompany(custTrans.DataAreaId)
                    {
                        SKS_CNP_TmpCustTrans tmpcust;

                        select firstonly tmpcust where tmpcust.AccountNum == custTrans.AccountNum && tmpcust.CustTransRecId == custTrans.RecId;

                        if(!tmpcust)
                        {
                            continue;
                        }
                    }

                    // <GBR>
                    if (BrazilParameters::isEnabled())
                    {
                        CustVendPaymProposalEditForm::calculateAndUpdateFineAmount_BR(custTransOpen.company(),
                                                                                      paymProposal.parmLedgerJournalTableCompany(),
                                                                                      custTransOpen,
                                                                                      paymProposalCalcPaym.paymDate(),
                                                                                      this.paymCurrency(custTrans.CurrencyCode));

                        CustVendPaymProposalEditForm::calculateAndUpdateInterestAmount_BR(custTransOpen.company(),
                                                                                      paymProposal.parmLedgerJournalTableCompany(),
                                                                                      custTransOpen,
                                                                                      paymProposalCalcPaym.paymDate(),
                                                                                      this.paymCurrency(custTrans.CurrencyCode));
                    }
                    // </GBR>

                    paymentAmount = paymProposalCalcPaym.paymAmountInvoiceCur();

                    if (paymentAmount == 0.0)
                    {
                        continue;
                    }

                    paymProposal.addCustVendTransOpen(custTransOpen,
                                                      paymProposalCalcPaym.paymDate(),
                                                      this.paymCurrency(isPaymentRequestsEnabled && paymentRequestTable.PaymentCurrency ? paymentRequestTable.PaymentCurrency: custTrans.CurrencyCode),
                                                      paymentAmount);
                }
            }
        }

        CompanyInfo comapnyInfo;
        SKS_CNP_TmpCustTrans tmp;
        JournalId journalId = this.parmLedgerJournalId();

        delete_from tmp where tmp.JournalNum == this.parmLedgerJournalId();
        while select comapnyInfo where comapnyInfo.DataArea != ''
        {
            changecompany(comapnyInfo.DataArea)
            {
                SKS_CNP_TmpCustTrans tmpDelete;

                delete_from tmpDelete where tmpDelete.JournalNum == journalId;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQuery</Name>
				<Source><![CDATA[
    protected void updateQuery()
    {
        if(includeInvoicesFromOtherCompanies)
        {
            this.filetrMultiCompanyCustTransData();
        }
        else
        {
            ttsbegin;
            this.filetrCustTransData();
            ttscommit;
        }

        if(earlyPaymDate > fromDate)
        {
            QueryBuildDataSource    qbdsCustTransOpen;
            qbdsCustTransOpen = queryCreatePayment.query().dataSourceTable(tableNum(CustTransOpen));

            SysQuery::findOrCreateRange(qbdsCustTransOpen, fieldNum(CustTransOpen, DueDate)).value(SysQuery::range(fromDate, earlyPaymDate));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
        {
            parentPackedValues = super();
            return [#CurrentVersion, #CurrentList, queryCreatePayment.pack()];
        }
        else
        {
            return super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        boolean ret;

        Version     version;
        container   packedQuery;

        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
        {
            version = RunBase::getVersion(_packedClass);
           
            [version, #CurrentList, packedQuery] = _packedClass;

            if (packedQuery)
            {
                queryCreatePayment = new QueryRun(packedQuery);
                super(parentPackedValues);
            }

            return true;
        }
        else
        {
            ret = super(_packedClass);

            return ret;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return the query
    /// </summary>
    /// <returns>Return the query</returns>
    public QueryRun queryRun()
    {
        return queryCreatePayment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {
        Query query;

        query = new Query(queryStr(SKS_CNP_CustReimbursementProposal));
        query.recordLevelSecurity(true);

        queryCreatePayment = new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        SKS_CNP_CreatePaymReimbJournal::runPaymentProposal(_args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>runPaymentProposal</Name>
				<Source><![CDATA[
    protected static SKS_CNP_CreatePaymReimbJournal runPaymentProposal(Args _args)
    {
        SKS_CNP_CreatePaymReimbJournal createPaymJournal = SKS_CNP_CreatePaymReimbJournal::construct();
        LedgerJournalTable ledgerJournalTable  = createPaymJournal.userInteraction(_args).getLedgerJournalTable();

        boolean canProceed;

        if (ledgerJournalTable)
        {
            if (!createPaymJournal.isInBatch())
            {
                CustVendPaymProposalLine::deleteByJournalId(ledgerJournalTable.JournalNum);
            }
            createPaymJournal.getLast();
            createPaymJournal.parmLedgerJournalId(ledgerJournalTable.JournalNum);
        }

        canProceed = createPaymJournal.userInteraction(_args).doPromptForCreatingPaymentProposal();

        if (canProceed)
        {
            createPaymJournal.runOperation();
        }
        else
        {
            BatchInfo batchInfo = createPaymJournal.batchInfo();
            if (batchInfo
                && batchInfo.parmBatchExecute() == true
                && batchInfo.parmBatch()
                && batchInfo.parmBatch().RecId > 0)
            {

                CustVendPaymProposalBatchProcessState targetState;
                if (createPaymJournal.parmSkipProposalEditForm())
                {
                    targetState = CustVendPaymProposalBatchProcessState::CreatedPaymentLines;
                }
                else
                {
                    targetState = CustVendPaymProposalBatchProcessState::CreatedProposalLines;
                }

                ttsbegin;
                CustVendPaymProposalBatchProcess::start(
                    createPaymJournal.parmLedgerJournalId(),
                    targetState,
                    batchInfo.parmBatch().BatchJobId);
                ttscommit;

                LedgerIJournalFormRefreshable callingForm;
                if (_args.caller())
                {
                    callingForm = _args.caller() as LedgerIJournalFormRefreshable;
                }

                CustVendPaymProposalBatchProgressController controller;
                controller = CustVendPaymProposalBatchProgressController::construct(
                    createPaymJournal.parmLedgerJournalId(),
                    callingForm);
                controller.initForm();
            }
        }

        return createPaymJournal;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>