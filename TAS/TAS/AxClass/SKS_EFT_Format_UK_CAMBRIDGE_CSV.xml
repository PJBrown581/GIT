<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_UK_CAMBRIDGE_CSV</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_UK_CAMBRIDGE_CSV extends SKS_EFT_Format
/// </summary>
class SKS_EFT_Format_UK_CAMBRIDGE_CSV extends SKS_EFT_Format
{
    #define.FormatVersion('20230207')
    #define.WIRE('WIRE')
    #define.EFT('EFT')

    #define.Separator(',')
    #define.DoubleQuote('"')
    str     telNo, bankCode, invString;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    /// <summary>
    /// formatStructure
    /// </summary>
    protected void formatStructure()
    {
        while(mSKS_EFT_FileDetail)
        {
            // Get SKS_EFT_FileFormatPaymSpec
            this.getSKS_EFT_FileFormatPaymSpec();

            this.rec_PaymentDetail();

            next mSKS_EFT_FileDetail;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addressSplit</Name>
				<Source><![CDATA[
    /// <summary>
    /// addressSplit
    /// </summary>
    /// <param name = "_address">_address</param>
    /// <returns>container</returns>
    protected container addressSplit(SKS_EB_Address  _address)
    {
        List            strList = new List(Types::String);
        container       address;
        ListIterator    iterator;
    
        strlist = strSplit(_address,';');
        iterator = new ListIterator(strlist);
    
        while(iterator.more())
        {
            address += iterator.value();
            iterator.next();
        }
    
        return address;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEmailandTelephonenumber</Name>
				<Source><![CDATA[
    private void getEmailandTelephonenumber()
    {
        VendTable   lVendTable;
        DirPartyContactInfoview DirPartyContactInfoview;

        lVendTable = VendTable::findByCompany(mSKS_EFT_FileDetail.AccountCompany, mSKS_EFT_FileDetail.AccountNum);


        select firstonly * from DirPartyContactInfoview where DirPartyContactInfoview.Party == lVendTable.Party && DirPartyContactInfoview.IsPrimary == true
            &&  DirPartyContactInfoview.Type == LogisticsElectronicAddressMethodType::Phone;

        if(DirPartyContactInfoView.Locator)
        {
            telNo = this.CharacterReplacement(DirPartyContactInfoView.Locator);
        }
        return;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankPurposeCode</Name>
				<Source><![CDATA[
    private void getBankPurposeCode()
    {
        msks_EFT_FileDetail_PaymentLine = sks_EFT_FileDetail_PaymentLine::find(mSKS_EFT_FileDetail.RecId);
    
        bankCode = this.CharacterReplacement(msks_EFT_FileDetail_PaymentLine.BankCentralBankPurposeCode);

        return;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceNbrs</Name>
				<Source><![CDATA[
    protected void getInvoiceNbrs()
    {
        SKS_EFT_FileDetail invSKS_EFT_FileDetail;
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
    
        select InvoiceNumber from invSKS_EFT_FileDetail where invSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId;
    
        while(invSKS_EFT_FileDetail)
        {
            if(invSKS_EFT_FileDetail.InvoiceNumber == '')
            {
                // If no invoice number, go to next record
                next invSKS_EFT_FileDetail;
                continue;
            }
            sb.Append(invSKS_EFT_FileDetail.InvoiceNumber);
    
            next invSKS_EFT_FileDetail;
    
            if(invSKS_EFT_FileDetail)
            {
                sb.Append(' ');
            }
        } 
        invString = this.CharacterReplacement(sb.ToString());

        return ;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_PaymentDetail</Name>
				<Source><![CDATA[
    private boolean rec_PaymentDetail()
    {
        //---------------------------------------------------------------------------------------------
        //1.    Payee Identifier
        //2.    Name of Beneficiary
        //3.    Beneficiary's Account Number
        //4.    Beneficiary's Bank Country
        //5.    Beneficiary Payment Currency
        //6.    Intermediary Bank Name
        //7.    Intermediary BIC Code
        //8.    Beneficiary's Bank Name
        //9.    Beneficiary Bank Address Line 1
        //10.   Beneficiary Bank Address Line 2
        //11.   Beneficiary Bank City
        //12.   Beneficiary Bank Postal Code
        //13.   Beneficiary Bank Province
        //14.   Beneficiary's Bank SWIFT Code
        //15.   Comments
        //16.   Beneficiary's Address Line 1
        //17.   Beneficiary's Address Line 2
        //18.   Beneficiary's City
        //19.   Beneficiary's Postal Code
        //20.   Beneficiary Primary Contact (Phone)
        //21.   Beneficiary Email Address
        //22.   Payment Reference Information
        //23.   Beneficiary ISO Country Code
        //24.   Beneficiary's Province
        //25.   Routing Code
        //26.   Payment Method
        //27.   Payee Classification
        //28.   Purpose Of Payment
        //29.   RegulatoryField1
        //30.   RegulatoryField2
        //31.   RegulatoryField3
        //32.   RegulatoryField4
        //33.   RegulatoryField5
        //34.   RegulatoryField6
        //35.   RegulatoryField7
        //36.   Settlement Currency
        //37.   Payment Amount
        //38.   Settlement Amount
        //39.   Payment Reference
        //-------------------------------------------------------------------------------------------------
        SKS_EB_Address      address1, address2, addressPstCd, addressState;
        str                 payeeClassification, purpOfPaymt, benBankCountry;
        container           address;

        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        
        //1.    Payee Identifier
        sb.Append(this.wrapField(subStr(mSKS_EFT_FileDetail.AccountNum, 1, 50)));

        //2.    Name of Beneficiary
        sb.Append(this.wrapField(subStr(this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneName), 1,100)));
        
        //3.    Beneficiary's Account Number
        sb.Append(this.wrapField(subStr(mSKS_EFT_FileDetail.DepBankAcct, 1,50)));

        //4.    Beneficiary's Bank Country
        sb.Append(this.wrapField(subStr(this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_BenBank.BenBankCountryRegionId), 1,2)));

        //5.    Beneficiary Payment Currency
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.PaymentCurrencyCode));

        //6.    Intermediary Bank Name
        sb.Append(this.wrapField(subStr(mSKS_EFT_FileDetail_Intermediary.IntBankName, 1, 250)));

        //7.    Intermediary BIC Code
        sb.Append(this.wrapField(subStr(mSKS_EFT_FileDetail_Intermediary.IntBankSwift, 1, 20)));

        //8.    Beneficiary's Bank Name
        sb.Append(this.wrapField(subStr(mSKS_EFT_FileDetail_BenBank.BenBankName, 1, 250)));

        if(strScan(mSKS_EFT_FileDetail_BenBank.BenBankAddr, ';', 1, strLen(mSKS_EFT_FileDetail_BenBank.BenBankAddr)))
        {
            address     = this.addressSplit(mSKS_EFT_FileDetail_BenBank.BenBankAddr);
            address1    = conpeek(address,1);
            address2    = conpeek(address,2);
            addressPstCd= conpeek(address,3);
            addressState= conpeek(address,4);
        }
       else//DevOps20426
        {
            address1     = mSKS_EFT_FileDetail_BenBank.BenBankAddr;
        }

        //9.    Beneficiary Bank Address Line 1
        sb.Append(this.wrapField(subStr(address1, 1, 100)));

        //10.   Beneficiary Bank Address Line 2
        sb.Append(this.wrapField(subStr(address2, 1, 100)));

        //11.   Beneficiary Bank City
        sb.Append(this.wrapField(subStr(mSKS_EFT_FileDetail_BenBank.BenBankCity, 1, 100)));

        //12.   Beneficiary Bank Postal Code
        sb.Append(this.wrapField(subStr(addressPstCd, 1, 100)));

        //13.   Beneficiary Bank Province
        benBankCountry = this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_BenBank.BenBankCountryRegionId);

        if(benBankCountry == 'US' || benBankCountry == 'CA')
        {
            sb.Append(this.wrapField(subStr(addressState, 1, 100)));
        }
        else
        {
            sb.Append(this.wrapField());
        }        

        //14.   Beneficiary's Bank SWIFT Code    

        sb.Append(this.wrapField(subStr(mSKS_EFT_FileDetail.DepSwiftNo, 1, 20)));//DevOps20559

        //15.   Comments
        sb.Append(this.wrapField());

        //16.   Beneficiary's Address Line 1
        sb.Append(this.wrapField(subStr(mSKS_EFT_FileDetail_VendAddress.BeneAddr, 1, 100)));

        //17.   Beneficiary's Address Line 2
        sb.Append(this.wrapField(subStr(mSKS_EFT_FileDetail_VendAddress.BeneAddr2, 1, 100)));

        //18.   Beneficiary's City
        sb.Append(this.wrapField(subStr(mSKS_EFT_FileDetail_VendAddress.BeneCity, 1, 100)));

        //19.   Beneficiary's Postal Code
        sb.Append(this.wrapField(subStr(mSKS_EFT_FileDetail_VendAddress.BeneZipPostal, 1, 50)));

        this.getEmailandTelephonenumber();
        
        //20.   Beneficiary Primary Contact (Phone)
        sb.Append(this.wrapField(subStr(telNo, 1, 100)));
        
        //21.   Beneficiary Email Address
        sb.Append(this.wrapField());

        //22.   Payment Reference Information
        sb.Append(this.wrapField());

        //23.   Beneficiary ISO Country Code
        sb.Append(this.wrapField(subStr(this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_VendAddress.BeneCountryRegionId), 1, 2)));

        //24.   Beneficiary's Province
        sb.Append(this.wrapField(subStr(mSKS_EFT_FileDetail_VendAddress.BeneState, 1, 30)));

        //25.   Routing Code
        sb.Append(this.wrapField(subStr(mSKS_EFT_FileDetail.DepBankTransit, 1, 12)));//DevOPs20559

        //26.   Payment Method
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #WIRE:
                sb.Append(this.wrapField('W'));
                break;
            case #EFT:
                sb.Append(this.wrapField('E'));
                break;
        }

        //27.   Payee Classification
        payeeClassification = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('PayeeClassification', mSKS_EFT_FileDetail.RecId));

        sb.Append(this.wrapField(subStr(payeeClassification, 1, 50)));

        //28.   Purpose Of Payment
        this.getBankPurposeCode();
        this.getInvoiceNbrs();

        purpOfPaymt = bankCode;

        if(purpOfPaymt)
        {
            purpOfPaymt = purpOfPaymt + ' ';
        }
        purpOfPaymt += invString;

        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #WIRE && purpOfPaymt)
        {
            sb.Append(this.wrapField(subStr(purpOfPaymt, 1, 50)));
        }
        else
        {
            sb.Append(this.wrapField());
        }

        //29.   RegulatoryField1
        sb.Append(this.wrapField());

        //30.   RegulatoryField2
        sb.Append(this.wrapField());

        //31.   RegulatoryField3
        sb.Append(this.wrapField());

        //32.   RegulatoryField4
        sb.Append(this.wrapField());

        //33.   RegulatoryField5
        sb.Append(this.wrapField());

        //34.   RegulatoryField6
        sb.Append(this.wrapField());

        //35.   RegulatoryField7
        sb.Append(this.wrapField());

        //36.   Settlement Currency
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.CurrencyCode));//DevOps20924

        //37.   Payment Amount
        sb.Append(this.wrapField(subStr(num2str(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1,0,2,1,0), 1, 10)));

        //38.   Settlement Amount
        sb.Append(this.wrapField());//DevOps20760

        //39.   Payment Reference
        sb.Append(this.wrapField(subStr(mSKS_EFT_FileDetail.PaymentReference, 1, 250), false, false));

        this.fileWrite(sb.ToString());
        
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wrapField</Name>
				<Source><![CDATA[
    private str wrapField(str _field = '',  boolean _Quote = true, boolean _addSeparator = true)
    {
        if(_addSeparator)
        {
            if(_Quote && _field != '' || _Quote == true)
            {
                return #DoubleQuote + _field + #DoubleQuote + #Separator;
            }
            else
            {
                return _field + #Separator;
            }
        }
        else
        {
            if(_Quote && _field != '' || _Quote == true)
            {
                return #DoubleQuote + _field + #DoubleQuote;
            }
            else
            {
                return _field;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectPaymentRecords</Name>
				<Source><![CDATA[
    protected void selectPaymentRecords()
    {
        //------------------------------------------------------------------------------------------------------
        // Standard payment selction
        // Override if different selection is need for a format
        //------------------------------------------------------------------------------------------------------
    
        //Order by clause must match the clause in the SKS_EFT_Processing.SumByPayment
        select * from mSKS_EFT_FileDetail
            join mSKS_EFT_FileDetail_VendAddress
            join mSKS_EFT_FileDetail_BenBank
            join mSKS_EFT_FileDetail_Intermediary
              order by mSKS_EFT_FileDetail.RecordSection,
                   mSKS_EFT_FileDetail.PaymMode,
                   mSKS_EFT_FileDetail.BankAccountId,
                   mSKS_EFT_FileDetail.PaymentCurrencyCode,
                   mSKS_EFT_FileDetail.PaymSpec,
                   mSKS_EFT_FileDetail.EffectiveDate,
                   mSKS_EFT_FileDetail.DepCountryRegionId,
                   mSKS_EFT_FileDetail.RecordType,
                   mSKS_EFT_FileDetail.AccountNum,
                   mSKS_EFT_FileDetail.PaymentReference,
                   mSKS_EFT_FileDetail.RecId
          where mSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                mSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                mSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_VendAddress.RefRecId &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_BenBank.RefRecId &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_Intermediary.RefRecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>