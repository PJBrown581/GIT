<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_CA_CPA005_V8</Name>
	<SourceCode>
		<Declaration><![CDATA[
// ACH Direct Deposits (PDS) Service
// Canadian Payments Association CPA-005
// Version 8
//
// Supports transaction types: SEPA
//
// Structure:
// Header (A)
//  Payments (C)
// Trailer (Z)
/// <summary>
/// SKS_EFT_Format_CA_CPA005_V8 extends SKS_EFT_Format
/// </summary>
class SKS_EFT_Format_CA_CPA005_V8 extends SKS_EFT_Format
{
    #define.FormatVersion('20220826')
    #define.AP_CAD('AP-CAD')
    #define.AP_PDS('AP-PDS')
    #define.AR_CAD('AR-CAD')

    int mRecordCount;
    int mPaymentCount;
    AmountMST mPaymentAmount;
    str fileCreationNbr;
    PaymSpec paymentSpec;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    protected void formatStructure()
    {
        BankAccountId prevBankAccount;
        str testFile;
        ;
    
        while(mSKS_EFT_FileDetail)
        {
            // Get SKS_EFT_FileFormatPaymSpec
            this.getSKS_EFT_FileFormatPaymSpec();

            if(mModule == SKS_EFT_Module::AP)
            {
                // Get SKS_EFT_Bank
                this.getSKS_EFT_Bank();
    
                // Get SKS_EFT_VendorPaym
                this.getSKS_EFT_VendorPaym();
            }
            else
            {
                // Get SKS_EFTAR_Bank
                this.getSKS_EFTAR_Bank();
    
                // Get SKS_EFT_CustomerPaym
                this.getSKS_EFT_CustomerPaym();
            }
            testFile = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('TestFile', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank));
            if(testFile == 'Y' || testFile == 'Y')
            {
                fileCreationNbr = 'TEST';
            }
            else
            {
                fileCreationNbr = SKS_PP_StringFormats::strRight(mSKS_EFT_File.FileNbr, 4);
            }
            if(!paymentSpec)
            {
                paymentSpec = mSKS_EFT_FileDetail.PaymSpec;
            }
    
            if(prevBankAccount != mSKS_EFT_FileDetail.BankAccountId)
            {
                // Header
                this.rec_Header();
    
                // Reset counters
                mPaymentCount = 0;
                mPaymentAmount = 0;
            }
    
            // Detail lines
            this.rec_Payment();
    
            prevBankAccount = mSKS_EFT_FileDetail.BankAccountId;
    
            next mSKS_EFT_FileDetail;
    
            if(prevBankAccount != mSKS_EFT_FileDetail.BankAccountId)
            {
                // Format trailer
                this.rec_Trailer();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Header</Name>
				<Source><![CDATA[
    //Nbr   Description                                         Max     Start   Type    Comment
    //1     Record Type                                         1       1       AN
    //2     Record Count                                        9       2       N       Zero fill
    //3     Client Number                                       10      11      AN
    //4     File Creation Number                                4       21      AN
    //5     File Creation Date                                  6       25      D       0YYDDD
    //6     Royal Bank Processing Centre                        5       31      N
    //7     Reserved                                            20      36      AN      Leave blank
    //8     Destination Currency Code Identifier                3       56      AN      USD or CAD
    //9     Filler                                              1406    59      AN      Leave blank
    boolean rec_Header()
    {
        //BP Deviation Documented
        str originAccntNum;
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        ;
    
        mRecordCount++;
    
        //1     Record Type
        sb.Append('A');
    
        //2     Record Count
        sb.Append(SKS_PP_StringFormats::strFill(9, num2str(mRecordCount,0,0,0,0), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
    
        //3     Client Number
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #AP_CAD ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #AP_PDS)
        {
            sb.Append(SKS_PP_StringFormats::strFill(10, mSKS_EFT_Bank.WOrdPartyId, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
        else
        {
            originAccntNum = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('OriginAccntNum', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank));
            sb.Append(SKS_PP_StringFormats::strFill(10, this.CharacterReplacement(originAccntNum), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
    
        //4     File Creation Number
        sb.Append(fileCreationNbr);
    
        //5     File Creation Date
        sb.Append('0');
        sb.Append(substr(date2Julian(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone())),3,6));
    
        str processingCenter;

        //6     Royal Bank Processing Centre
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #AP_CAD ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #AP_PDS)
        {
            

            processingCenter = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('ProcessingCenter', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank));
            sb.Append(SKS_PP_StringFormats::strFill(5, this.CharacterReplacement(processingCenter), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
        else
        {
            sb.Append(SKS_PP_StringFormats::strFill(5, this.CharacterReplacement(processingCenter), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }

        //7     Reserved
        sb.Append(SKS_PP_StringFormats::strFill(20, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //8     Destination Currency Code Identifier
        sb.Append(mSKS_EFT_FileDetail.PaymentCurrencyCode);
    
        //9     Filler
        sb.Append(SKS_PP_StringFormats::strFill(1406, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        this.fileWrite(sb.ToString());
        mFileRecCount++;
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Payment</Name>
				<Source><![CDATA[
    //Nbr   Description                                         Max     Start   Type    Comment
    //1     Record Type                                         1       1       AN
    //2     Record Count                                        9       2       N       Zero fill
    //3     Client Number                                       10      11      AN
    //4     File Creation Number                                4       21      AN
    //5     Transaction Code                                    3       25      AN
    //6     Amount                                              10      28      N
    //7     Payment Date                                        6       38      D       0YYDDD
    //8     CAD Financial Institution and Branch Transit #      9       44      N
    //9     Account Number                                      12      53      AN
    //10    Reserved                                            22      65      N       Zero fill
    //11    Reserved                                            3       87      N       Zero fill
    //12    Client Short Name                                   15      90      AN
    //13    Customer Name                                       30      105     AN
    //14    Client Name                                         30      135     AN
    //15    Client Number                                       10      165     AN
    //16    Customer Number                                     19      175     AN
    //17    Reserved                                            9       194     N       Zero fill
    //18    Reserved                                            12      203     AN      Blank
    //19    Client Sundry Information                           15      215     AN
    //20    Reserved                                            22      230     AN      Blank
    //21    Reserved                                            2       252     AN      Blank
    //22    Reserved                                            11      254     AN      Blank
    //      Filler                                              1200                    Not in spec (needed for 1464 record length)
    boolean rec_Payment()
    {
        //BP Deviation Documented
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        AmountMST amt;
        str originAccntNum;
        str originShortName;
        ;
    
        mRecordCount++;
    
        //1     Record Type
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #AP_CAD ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #AP_PDS)
        {
            sb.Append('C');
        }
        else
        {
            sb.Append('D');
        }
    
        //2     Record Count
        sb.Append(SKS_PP_StringFormats::strFill(9, num2str(mRecordCount,0,0,0,0), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
    
        //3     Client Number
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #AP_CAD ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #AP_PDS)
        {
            sb.Append(SKS_PP_StringFormats::strFill(10, mSKS_EFT_Bank.WOrdPartyId, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
        else
        {
            originAccntNum = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('OriginAccntNum', mSKS_EFT_FileDetail.RecId));
            sb.Append(SKS_PP_StringFormats::strFill(10, this.CharacterReplacement(originAccntNum), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }

        //4     File Creation Number
        sb.Append(fileCreationNbr);
    
        //5     Transaction Code
        if(substr(mSKS_EFT_FileDetail.PaymSpec, 1, 2) == 'AP')
        {
            sb.Append('460');
        }
        else if(substr(mSKS_EFT_FileDetail.PaymSpec, 1, 2) == 'AR')
        {
            sb.Append('450');
        }
        else
        {
            sb.Append(SKS_PP_StringFormats::strFill(3, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
    
        //6     Amount
        amt = this.getPositiveAmount(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur);
        sb.Append(SKS_PP_StringFormats::strMoney(this.getPositiveAmount(amt), 10));
    
        //7     Payment Date
        sb.Append('0');
        sb.Append(substr(date2Julian(mSKS_EFT_FileDetail.EffectiveDate),3,6));
    
        //8     CAD Financial Institution and Branch Transit #
        sb.Append(SKS_PP_StringFormats::strFill(9, mSKS_EFT_FileDetail.DepBankTransit, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
    
        //9     Account Number
        sb.Append(SKS_PP_StringFormats::strFill(12, mSKS_EFT_FileDetail.DepBankAcct, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //10    Reserved
        sb.Append(SKS_PP_StringFormats::strFill(22, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
    
        //11    Reserved
        sb.Append(SKS_PP_StringFormats::strFill(3, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
    
        //12    Originator's Short Name
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #AP_CAD ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #AP_PDS)
        {
            originShortName = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('OriginShortName', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank));
            sb.Append(SKS_PP_StringFormats::strFill(15, this.CharacterReplacement(originShortName), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
        else
        {
            sb.Append(SKS_PP_StringFormats::strFill(15, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
    
        //13    Customer Name
        sb.Append(SKS_PP_StringFormats::strFill(30, this.CharacterReplacement(mSKS_EFT_FileDetail.AccountName), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #AR_CAD)
        {
            //14    Originator's Long Name
            sb.Append(SKS_PP_StringFormats::strFill(30, this.CharacterReplacement(mSKS_EFT_FileDetail.FileACHCompanyName), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
            //15     Originator's Direct Clearer's User ID
            sb.Append(SKS_PP_StringFormats::strFill(10, mSKS_EFT_FileDetail.FileACHCompanyId, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
            
            //16    Originator's Cross-reference
            sb.Append(SKS_PP_StringFormats::strFill(19, this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
        else
        {
            //14    Client Name
            sb.Append(SKS_PP_StringFormats::strFill(30, this.CharacterReplacement(mSKS_EFT_Bank.WOrdPartyName), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
            //15     Client Number
            sb.Append(SKS_PP_StringFormats::strFill(10, mSKS_EFT_Bank.WOrdPartyId, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
            //16    Customer Number
            sb.Append(SKS_PP_StringFormats::strFill(19, mSKS_EFT_FileDetail.AccountNum, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
    
        //17    Reserved
        sb.Append(SKS_PP_StringFormats::strFill(9, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
    
        //18     Reserved
        sb.Append(SKS_PP_StringFormats::strFill(12, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //19     Client Sundry Information
        sb.Append(SKS_PP_StringFormats::strFill(15, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //20     Reserved
        sb.Append(SKS_PP_StringFormats::strFill(22, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //21     Reserved
        sb.Append(SKS_PP_StringFormats::strFill(2, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //22     Reserved
        sb.Append(SKS_PP_StringFormats::strFill(11, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        // Filler
        sb.Append(SKS_PP_StringFormats::strFill(1200, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        this.fileWrite(sb.ToString());
        mFileRecCount++;
        mPaymentCount++;
        mPaymentAmount += amt;
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Trailer</Name>
				<Source><![CDATA[
    //Nbr   Description                                         Max     Start   Type    Comment
    //1     Record Type                                         1       1       AN
    //2     Record Count                                        9       2       N       Zero fill
    //3     Client Number                                       10      11      AN
    //4     File Creation Number                                4       21      AN
    //5     Reserved                                            14      25      N       Zero fill
    //6     Reserved                                            8       39      N       Zero fill
    //7     Total Amount of Credit Payment Transactions         14      47      N
    //8     Total Number of Credit Payment Transactions         8       61      N
    //9     Filler                                              1396    69      N      Zero fill
    boolean rec_Trailer()
    {
        //BP Deviation Documented
        str originAccntNum;
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        ;
    
        mRecordCount++;
    
        //1     Record Type
        sb.Append('Z');
    
        //2     Record Count
        sb.Append(SKS_PP_StringFormats::strFill(9, num2str(mRecordCount,0,0,0,0), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
    
        //3     Client Number
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #AP_CAD ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #AP_PDS)
        {
            sb.Append(SKS_PP_StringFormats::strFill(10, mSKS_EFT_Bank.WOrdPartyId, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
        else
        {
            originAccntNum = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('OriginAccntNum', mSKS_EFT_FileDetail.RecId));
            sb.Append(SKS_PP_StringFormats::strFill(10, this.CharacterReplacement(originAccntNum), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }

        //4     File Creation Number
        sb.Append(fileCreationNbr);
    
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #AP_CAD ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #AP_PDS)
        {
            //5    Reserved
            sb.Append(SKS_PP_StringFormats::strFill(14, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
    
            //6    Reserved
            sb.Append(SKS_PP_StringFormats::strFill(8, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
    
            //7     Total Amount of Credit Payment Transactions
            sb.Append(SKS_PP_StringFormats::strMoney(mPaymentAmount, 14));
    
            //8     Total Number of Credit Payment Transactions
            sb.Append(SKS_PP_StringFormats::strFill(8, num2str(mPaymentCount,0,0,0,0), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        }
        else
        {
            //5     Total Amount of Debit Payment Transactions
            sb.Append(SKS_PP_StringFormats::strMoney(mPaymentAmount, 14));

            //6     Total Number of Debit Payment Transactions
            sb.Append(SKS_PP_StringFormats::strFill(8, num2str(mPaymentCount,0,0,0,0), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
            
            //7    Reserved
            sb.Append(SKS_PP_StringFormats::strFill(14, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
            
            //8    Reserved
            sb.Append(SKS_PP_StringFormats::strFill(8, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        }
    
        //9     Filler
        sb.Append(SKS_PP_StringFormats::strFill(1396, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
    
        // Add Block Fill if needed
    
        this.fileWrite(sb.ToString());
        mFileRecCount++;
    
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>