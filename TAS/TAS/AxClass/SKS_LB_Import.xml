<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_LB_Import</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class SKS_LB_Import
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>CheckLBFolders</Name>
				<Source><![CDATA[
    str CheckLBFolders( SKS_LB_In_Process Mode, str LBFolder, boolean _serverSide = false)
    {
        str InProcFolder;
        str ComplFolder;
        str ErrFolder;
        str result;

        SKS_EB_BankIntegOptWithNoLicense bankIntOption = SKS_EB_FileStorage::find().StorageOption_LB;
        SKS_BF_BankIntType SKS_BF_BankIntType = SKS_BF_BankIntType::FileHubLocal;

        if(bankIntOption == SKS_EB_BankIntegOptWithNoLicense::BankFabricEnumValue)
            SKS_BF_BankIntType = SKS_BF_BankIntType::BankFabric;

        SKS_EB_FileHub  fileHub = SKS_EB_FileHub::construct(SKS_BF_BankIntType);
    
        InProcFolder = System.IO.Path::Combine(LBFolder, 'SK-In Process');
        ComplFolder = System.IO.Path::Combine(LBFolder, 'SK-Completed');
        ErrFolder = System.IO.Path::Combine(LBFolder, 'SK-Error');
    
        result = '';
    
        switch (Mode)
        {
            case SKS_LB_In_Process::Create: // Create
                try
                {
                    fileHub.runDirectoryCreate(InProcFolder);
                }
                catch (Exception::Error)
                {
                    result = 'Failed InProcFolder'; // Does not need label localized.
                }

                try
                {
                    fileHub.runDirectoryCreate(ComplFolder);
                }
                catch (Exception::Error)
                {
                    result = 'Failed ComplFolder'; // Does not need label localized.
                }

                try
                {
                    fileHub.runDirectoryCreate(ErrFolder);
                }
                catch(Exception::Error)
                {
                    result = 'Failed ErrFolder';
                }
                break;
    
            case SKS_LB_In_Process::InProcess_Test: // In Process there
                if (!fileHub.runDirectoryExists(InProcFolder))
                   result = "@SKS467";
                break;
            
            case SKS_LB_In_Process::Complete_Test:
                if (!fileHub.runDirectoryExists(ComplFolder))
                    result = "@SKS467";
                break;
            
            case SKS_LB_In_Process::InProcess_FolderName:
                result = InProcFolder;
                break;
            
            case SKS_LB_In_Process::Complete_FolderName:
                result = ComplFolder;
                break;
            
            case SKS_LB_In_Process::Errors_Test:
                if (!fileHub.runDirectoryExists(ErrFolder))
                    result = "@SKS467";
                break;
    
            case SKS_LB_In_Process::Errors_FolderName:
                result = ErrFolder;
                break;
        }
    
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ImportLockboxCSV</Name>
				<Source><![CDATA[
    public void ImportLockboxCSV()
    {
        SKS_LB_FileFormat       lbff;
        SKS_LB_FileFormat       orig_lbff;
        SKS_LB_FileFormatDet    lbffdet;
        SKS_LB_FileFormatDet    orig_lbffdet;
        CommaStreamIo                 inFile;
        Filename                filename;
        Container               line;
        int linecnt;
        int totaladds;
        int totalupdates;
        int totaldeletes;
        str action;
        str hdrOrdet;
        
        SKS_FileUploadDialogForm fileUploadDialog = new SKS_FileUploadDialogForm();
        fileUploadDialog.parmFileDialogCaptionForForm("@SKS574");
        fileUploadDialog.parmFileTypesAccepted('.csv');
        fileUploadDialog.parmStrategyClassName(classstr(SKS_PP_CSVFileTemporaryStorageStrategy));
        FileUploadTemporaryStorageResult fileUploadResult = fileUploadDialog.getFileUploadResult();
        if (fileUploadResult != null && fileUploadResult.getUploadStatus())
        {
            filename = fileUploadResult.getDownloadUrl();
            System.IO.Stream readStream = fileUploadResult.openResult(); // This is used to upload sample formats so it doesn't need to use FileHub
            inFile = CommaStreamIo::constructForRead(readStream); 
        }
        else
        {
            return;
        }

        if (!inFile || infile.status() != IO_Status::Ok )
        {
            //file could not be opened
            throw error (strfmt("@SYS19312", filename));
        }    

        ttsbegin;
    
        infile.inRecordDelimiter('\n');
        infile.inFieldDelimiter(',');
        linecnt = 0;
        //Checking status of last operation..
        while (infile.status() == IO_status::Ok)
        {
            line = infile.read();
            linecnt++;
            //Start at line 3 because first 2 lines show column names for
            //lbfileformat and lbfileformatdet tables.
            if (line && linecnt>2)
            {
                hdrOrdet = subStr(conpeek(line, 1), 1, 1); //Header or Detail
    
                if (hdrOrdet == 'H')
                {
                    lbff.initValue();
                    lbff.EDISeperator = '';
                    lbff.EDITerminator = '';
                    lbff.FormatID = conpeek(line, 2);
                    lbff.Descr = conpeek(line, 3);
                    lbff.DecPl = conpeek(line, 4);
                    lbff.OmitHeaderRecs = conpeek(line, 5);
                    lbff.OmitTrailerRecs = conpeek(line, 6);
                    lbff.SamplePathFileName = conpeek(line, 7);
                    lbff.FileType = conpeek(line, 8);
                    lbff.PmtAmtEQSumChkAmts = conpeek(line, 9);
                    lbff.DecimalSeparator = conpeek(line, 10);
                    lbff.NegPaymIndic = conPeek(line, 11);
                    action = subStr(conpeek(line, 12), 1, 1); //Add, Replace, or Delete
    
                    if(lbff.FormatID == 'EDI820')
                    {
                        lbff.EDISeperator = '^';
                        lbff.EDITerminator = '~';
                    }
                    if(lbff.FormatID == 'EDI823')
                    {
                        lbff.EDISeperator = '*';
                        lbff.EDITerminator = '~';
    
                    }
    
                    select * from orig_lbff where orig_lbff.FormatId == lbff.FormatID;
    
                    if (action == 'A' || action == '')
                    {
                        if(orig_lbff.FormatID == '') //not found so add it
                        {
                            lbff.doInsert();
                            if(lbff.FormatID == 'BAI2_CITI')
                            {
                                SKS_LB_CreateBAI2::Create_BAI2Citi('BAI2_CITI');
                            }
                            if(lbff.FormatID == 'BAI2_WF')
                            {
                                SKS_LB_CreateBAI2::Create_BAI2WF('BAI2_WF');
                            }
                            if(lbff.FormatID == 'EDI820')
                            {
                                SKS_LB_CreateEDI::Create_EDI820( 'EDI820');
                            }
                            if(lbff.FormatID == 'EDI823')
                            {
                                SKS_LB_CreateEDI::Create_EDI823('EDI823');
                            }
                            if(lbff.FormatID == 'Symcor')
                            {
                                SKS_LB_CreateSymcor::Create_Symcor('Symcor');
                            }
                            if(lbff.FormatID == 'WFRMF')
                            {
                                SKS_LB_CreateWFRMF::Create_WFRMF('WFRMF');
                            }
                            if(lbff.FormatID == 'WFARRMF')
                            {
                                SKS_LB_CreateWFARRMF::Create_WFARRMF('WFARRMF');
                            }
                            if(lbff.FormatID == 'IR')
                            {
                                SKS_LB_CreateIntegratedReceivables::Create_IR('IR');
                            }
                            totaladds++;
    
                        }
                    }
                    else if (action == 'R')
                    {
                        if (orig_lbff.FormatID == '') //nothing to replace so add it
                        {
                            lbff.doInsert();
                            totaladds++;
                        }
                        else
                        {
                            delete_from orig_lbff where orig_lbff.FormatId == lbff.FormatID;
                            lbff.doInsert();
                            totalupdates++;
                        }
                    }
                    else if (action == 'D')
                    {
                        if (orig_lbff.FormatID != '') //if the record was found then delete it
                        {
                            delete_from orig_lbff where orig_lbff.FormatId == lbff.FormatID;
                            totaldeletes++;
                        }
                    }
                }
                else if (hdrOrdet == 'D')
                {
                    lbffdet.initValue();
                    lbffdet.FieldEnd = conpeek(line, 2);
                    lbffdet.FieldNbr = conpeek(line, 3);
                    lbffdet.FieldStart = conpeek(line, 4);
                    lbffdet.FormatID = conpeek(line, 5);
                    lbffdet.LineNbr = conpeek(line, 6);
                    lbffdet.FieldType = conpeek(line, 7);
                    action = subStr(conpeek(line, 8), 1, 1); //Add, Replace, or Delete
    
                    select * from orig_lbffdet where orig_lbffdet.FormatId == lbffdet.FormatID && orig_lbffdet.FieldNbr == lbffdet.FieldNbr;
    
                    if (action == 'A' || action == '')
                    {
                        if (orig_lbffdet.FormatID == '') //not found so add it
                        {
                            lbffdet.doInsert();
                            totaladds++;
                        }
                    }
                    else if (action == 'R')
                    {
                        if (orig_lbffdet.FormatID == '') //nothing to replace so add it
                        {
                            lbffdet.doInsert();
                            totaladds++;
                        }
                        else
                        {
                            delete_from orig_lbffdet where orig_lbffdet.FormatId == lbffdet.FormatID && orig_lbffdet.FieldNbr == lbffdet.FieldNbr;
                            lbffdet.doInsert();
                            totalupdates++;
                        }
                    }
                    else if (action == 'D')
                    {
                        if (orig_lbffdet.FormatID != '') //if the record was found then delete it
                        {
                            delete_from orig_lbffdet where orig_lbffdet.FormatId == lbffdet.FormatID && orig_lbffdet.FieldNbr == lbffdet.FieldNbr;
                            totaldeletes++;
                        }
                    }
                }
            }
        }
        ttscommit;
    
        //report total adds, updates, and deletes
        info("@SYS54695" + ' ' + "@SYS108583" + ' :' + int2str(totaladds));
        info("@SYS54695" + ' ' + "@SYS439" + ' :' + int2str(totalupdates));
        info("@SYS54695" + ' ' + "@SYS13435" + ' :' + int2str(totaldeletes));
    }

]]></Source>
			</Method>
			<Method>
				<Name>JournalARLB_Delete</Name>
				<Source><![CDATA[
    void JournalARLB_Delete( JournalId JID, SKS_LB_BatchNum batchNum)
    {
        SKS_LB_JournalAR        tSKS_LB_JournalAR;
        SKS_LB_JournalARApplic  tSKS_LB_JournalARApplic;
        SKS_LB_JournalARErrors  tSKS_LB_JournalARErrors;
        ;
    
        ttsbegin;
    
        while select forupdate * from tSKS_LB_JournalAR where tSKS_LB_JournalAR.JournalId == JID && tSKS_LB_JournalAR.BatchNum == batchNum
        {
            delete_from tSKS_LB_JournalARApplic where tSKS_LB_JournalARApplic.SKS_LB_JournalARRecId == tSKS_LB_JournalAR.RecId;
            tSKS_LB_JournalAR.delete();
        }
    
        delete_from tSKS_LB_JournalARErrors where tSKS_LB_JournalARErrors.JournalId == JID && tSKS_LB_JournalARErrors.BatchNum == batchNum;
    
        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>