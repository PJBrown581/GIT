<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_DE_DTAZV</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_DE_DTAZV
/// </summary>
class SKS_EFT_Format_DE_DTAZV extends SKS_EFT_Format
{
    #define.FormatVersion('20230518')
	
    int         mTotalTransaction;
    AmountMST   mTotalAmount;
    System.Text.StringBuilder sb = new System.Text.StringBuilder();

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    [SuppressBPWarningAttribute("BPCheckNestedLoopinCode","Necessary to allow the processing of every invoice(inner loop) for every relevant parent file detail record(outer loop)")]
    protected void formatStructure()
    {
        // File Header Record
        this.rec_FileHeader();

        while(mSKS_EFT_FileDetail)
        {
            // Get SKS_EFT_FileFormatPaymSpec
            this.getSKS_EFT_FileFormatPaymSpec();

            mSKS_EFT_FileDetail_BankAccount = SKS_EFT_FileDetail_BankAccount::find(mSKS_EFT_FileDetail.RecId);

            // Data Record
            this.rec_DataRecord();

            next mSKS_EFT_FileDetail;
        }

        // Trailer Record
        this.rec_Trailer();

        this.fileWrite(strUpr(sb.ToString()));

    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_FileHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_FileHeader
    /// </summary>
    /// <returns>true</returns>
    public boolean rec_FileHeader()
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Description                                                     Length    
        //1     Length of record                                                4
        //2     Type of record                                                  1
        //3     German bank code (BLZ)                                          8
        //4     Customer number                                                 10
        //5     Name and address of principal                                   4*35
        //6     Date of generation                                              6
        //7     Serial number                                                   2
        //8     (First) execution date of file                                  6
        //9	    To be sent to reporting authorities                             1
        //10	Federal state number                                            2
        //11	Principal's (payer‘s) company number / (German) bank code       8
        //12	Reserve                                                         68
        //------------------------------------------------------------------------------------------------------

        msks_EFT_FileDetail_PaymentLine = sks_EFT_FileDetail_PaymentLine::find(mSKS_EFT_FileDetail.RecId);

        //1     Length of record                                                4
        sb.Append('0256');

        //2     Type of record                                                  1
        sb.Append('Q');

        //3     German bank code (BLZ)                                          8
        sb.Append(SKS_PP_StringFormats::strFill(8, SKS_EFT_Format::getCodelookupvalue('Q3bankcode', mSKS_EFT_FileDetail.RecId), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //4     Customer number                                                 10
        sb.Append(SKS_PP_StringFormats::strFill(10, mSKS_EFT_FileDetail.BankBankAcct, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //5     Name and address of principal                                   4*35
        sb.Append(SKS_PP_StringFormats::strFill(35, this.CharacterReplacement(subStr(mSKS_EFT_FileDetail_BankAccount.WOrdPartyName, 1, 35)), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        sb.Append(SKS_PP_StringFormats::strFill(35, this.CharacterReplacement(subStr(mSKS_EFT_FileDetail_BankAccount.WOrdPartyName, 31, 35)), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        sb.Append(SKS_PP_StringFormats::strFill(35, this.CharacterReplacement(strLRTrim(mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr + ' ' + mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr2)), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        sb.Append(SKS_PP_StringFormats::strFill(35, this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyCity), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //6     Date of generation                                              6
        sb.Append(SKS_PP_StringFormats::strDateYYMMDD(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()), DateSeparator::None));

        //7     Serial number                                                   2
        sb.Append(SKS_PP_StringFormats::strFill(2, SKS_EFT_Format::getCodelookupvalue('NextSequenceNumber', mSKS_EFT_FileDetail.RecId), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //8     (First) execution date of file                                  6
        sb.Append(SKS_PP_StringFormats::strDateYYMMDD(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()), DateSeparator::None));

        //9	    To be sent to reporting authorities                             1
        sb.Append('N');

        //10	Federal state number                                            2
        sb.Append(SKS_PP_StringFormats::strFill(2, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //11	Principal's (payer‘s) company number / (German) bank code       8
        sb.Append(SKS_PP_StringFormats::strFill(8, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //12	Reserve                                                         68
        sb.Append(SKS_PP_StringFormats::strFill(68, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_DataRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_DataRecord
    /// </summary>
    /// <returns>true</returns>
    public boolean rec_DataRecord()
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Description                                                         Length   
        //1		Length of record                                                    4
        //2		Type of record                                                      1
        //3		German bank code (BLZ)                                              8
        //4a	ISO currency code                                                   3
        //4b	Account number                                                      10
        //5	    Execution date of individual payment if deviating from field Q8     6
        //6	    German bank code (BLZ)                                              8
        //7a	ISO currency code                                                   3
        //7b	Account number                                                      10
        //8		Bank Identifier Code (BIC) of beneficary’s payment                  11
        //      service provider or other ID, eg Chips ID
        //9a	Country code of payee's payment service provider                    3
        //9b	Address of payee's payment service provider                         4X35
        //10a	Country code for country of payee or cheque recipient               3
        //10b	Payee /cheque recipient                                             4X35
        //11	Order mark                                                          2X35
        //12	IBAN or account number of payee                                     35
        //13	Order currency                                                      3
        //14a	Amount (digits before decimal point)                                14
        //14b	Amount (digits after decimal point)                                 3
        //15	Details of payment (remittance information)                         4X35
        //16	Instruction code 1 (as per chapter 3.2.2.2)                         2
        //17	Instruction code 2 (as chapter 3.2.2.2)                             2
        //18	Instruction code 3 (as per chapter 3.2.2.2)                         2
        //19	Instruction code 4 (as per chapter 3.2.2.2 and chapter 3.2.2.3)     2
        //20	Additional information on instruction code                          25
        //21	Fee rule                                                            2
        //22	Code for type of payment                                            2
        //23	Variable text only for principal's (payer’s) settlement purposes    27
        //24	Name and telephone number and name of deputy, if any                35
        //25	Reporting code                                                      1
        //26	Reserve                                                             51
        //27	Extension identifier                                                2
        //------------------------------------------------------------------------------------------------------
        
        mTotalTransaction++;

        //1		Length of record                                                    4
        sb.Append('0768');

        //2		Type of record                                                      1
        sb.Append('T');

        //3		German bank code (BLZ)                                              8
        sb.Append(SKS_PP_StringFormats::strFill(8, mSKS_EFT_FileDetail.BankBankTransit, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //4a	ISO currency code                                                   3
        sb.Append(mSKS_EFT_FileDetail.CurrencyCode);

        //4b	Account number                                                      10
        sb.Append(SKS_PP_StringFormats::strFill(10, mSKS_EFT_FileDetail.BankBankAcct, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //5	    Execution date of individual payment if deviating from field Q8     6
        sb.Append(SKS_PP_StringFormats::strDateYYMMDD(mSKS_EFT_FileDetail.EffectiveDate, DateSeparator::None));

        //6	    German bank code (BLZ)                                              8
        sb.Append(SKS_PP_StringFormats::strFill(8, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left));//DevOps21212

        //7a	ISO currency code                                                   3
        sb.Append(SKS_PP_StringFormats::strFill(3, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left));//DevOps21212

        //7b	Account number                                                      10
        sb.Append(SKS_PP_StringFormats::strFill(10, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left));//DevOps21212

        //8		Bank Identifier Code (BIC) of beneficary’s payment                  11
        //      service provider or other ID, eg Chips ID
        sb.Append(SKS_PP_StringFormats::strFill(11, mSKS_EFT_FileDetail.DepSwiftNo, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        
        //9a	Country code of payee's payment service provider                    3
        sb.Append(SKS_PP_StringFormats::strFill(3, this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_BenBank.BenBankCountryRegionId), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //9b	Address of payee's payment service provider                         4X35
        sb.Append(SKS_PP_StringFormats::strFill(35, this.CharacterReplacement(subStr(mSKS_EFT_FileDetail_BenBank.BenBankName, 1, 35)), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        sb.Append(SKS_PP_StringFormats::strFill(35, this.CharacterReplacement(subStr(mSKS_EFT_FileDetail_BenBank.BenBankName, 31, 35)), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        sb.Append(SKS_PP_StringFormats::strFill(35, this.CharacterReplacement(mSKS_EFT_FileDetail_BenBank.BenBankAddr), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        sb.Append(SKS_PP_StringFormats::strFill(35, this.CharacterReplacement(mSKS_EFT_FileDetail_BenBank.BenBankCity), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //10a	Country code for country of payee or cheque recipient               3
        sb.Append(SKS_PP_StringFormats::strFill(3, this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_VendAddress.BeneCountryRegionId), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //10b	Payee /cheque recipient                                             4X35
        sb.Append(SKS_PP_StringFormats::strFill(35, this.CharacterReplacement(subStr(mSKS_EFT_FileDetail_VendAddress.BeneName, 1, 35)), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        sb.Append(SKS_PP_StringFormats::strFill(35, this.CharacterReplacement(subStr(mSKS_EFT_FileDetail_VendAddress.BeneName, 31, 35)), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        sb.Append(SKS_PP_StringFormats::strFill(35, this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneAddr), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        sb.Append(SKS_PP_StringFormats::strFill(35, this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneCity), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //11	Order mark                                                          2X35
        sb.Append(SKS_PP_StringFormats::strFill(70, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //12	IBAN or account number of payee                                     35
        if(mSKS_EFT_FileDetail.DepBankIBAN)         //SKS#DevOps:17865
        {
            sb.Append(SKS_PP_StringFormats::strFill(35, '/' + mSKS_EFT_FileDetail.DepBankIBAN, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));//DevOps21212
        }
        else
        {
            sb.Append(SKS_PP_StringFormats::strFill(35,  '/'+ mSKS_EFT_FileDetail.DepBankAcct, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }

        //13	Order currency                                                      3
        sb.Append(SKS_PP_StringFormats::strFill(3, mSKS_EFT_FileDetail.PaymentCurrencyCode, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //14a	Amount (digits before decimal point)                                14
        //14b	Amount (digits after decimal point)                                 3
        sb.Append(this.strMoney3(-1 * mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur, 3, 17));       //SKS#DevOps:17865
        mTotalAmount += mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur;

        //15	Details of payment (remittance information)                         4X35        
        sb.Append(SKS_PP_StringFormats::strFill(140, this.getInvoiceNbrs(), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //16	Instruction code 1 (as per chapter 3.2.2.2)                         2
        sb.Append(SKS_PP_StringFormats::strFill(2, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //17	Instruction code 2 (as chapter 3.2.2.2)                             2
        sb.Append(SKS_PP_StringFormats::strFill(2, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //18	Instruction code 3 (as per chapter 3.2.2.2)                         2
        sb.Append(SKS_PP_StringFormats::strFill(2, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //19	Instruction code 4 (as per chapter 3.2.2.2 and chapter 3.2.2.3)     2
        sb.Append(SKS_PP_StringFormats::strFill(2, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //20	Additional information on instruction code                          25
        sb.Append(SKS_PP_StringFormats::strFill(25, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //21	Fee rule                                                            2
        sb.Append(SKS_PP_StringFormats::strFill(2, SKS_EFT_Format::getCodelookupvalue('FeeRule', mSKS_EFT_FileDetail.RecId), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //22	Code for type of payment                                            2
        sb.Append(SKS_PP_StringFormats::strFill(2, SKS_EFT_Format::getCodelookupvalue('TypeOfPayment', mSKS_EFT_FileDetail.RecId), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //23	Variable text only for principal's (payer’s) settlement purposes    27
        sb.Append(SKS_PP_StringFormats::strFill(27, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //24	Name and telephone number and name of deputy, if any                35
        sb.Append(SKS_PP_StringFormats::strFill(35, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //25	Reporting code                                                      1
        sb.Append(SKS_PP_StringFormats::strFill(1, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //26	Reserve                                                             51
        sb.Append(SKS_PP_StringFormats::strFill(51, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //27	Extension identifier                                                2
        sb.Append(SKS_PP_StringFormats::strFill(2, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>strMoney3</Name>
				<Source><![CDATA[
    private str strMoney3(real _curyAmt, int _decimals, int _length)
    {
        str amount;
        ;
        amount = num2Str(_curyAmt, 1, _decimals , 1, 0);
        amount = strRem(amount, '.');
        amount = SKS_PP_StringFormats::strFill(_length, amount, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left);

        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceNbrs</Name>
				<Source><![CDATA[
    protected str getInvoiceNbrs()
    {
        SKS_EFT_FileDetail invSKS_EFT_FileDetail;
        str invString;
    
        select InvoiceNumber from invSKS_EFT_FileDetail where invSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId;
    
        while(invSKS_EFT_FileDetail)
        {
            if(invSKS_EFT_FileDetail.InvoiceNumber == '')
            {
                // If no invoice number, go to next record
                next invSKS_EFT_FileDetail;
                continue;
            }
            sb.Append(invSKS_EFT_FileDetail.InvoiceNumber);
    
            next invSKS_EFT_FileDetail;
    
            if(invSKS_EFT_FileDetail)
            {
                sb.Append(' ');
            }
        }
    
        invString = this.CharacterReplacement(sb.ToString());
        return invString;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Trailer</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_Trailer
    /// </summary>
    /// <returns>true</returns>
    public boolean rec_Trailer()
    {
        //------------------------------------------------------------------------------------
        //Nbr   Description                                                     Length     
        //1	    Length of record                                                    4
        //2     Type of record	                                                    1
        //3     Sum total of all amounts (no decimal places)            	        15
        //4     Number of T data records                    	                    15
        //5	    Reserve                                                             221
        //-------------------------------------------------------------------------------------


        //1	    Length of record                                                    4
        sb.Append('0256');

        //2     Type of record	                                                    1
        sb.Append('Z');

        //3     Sum total of all amounts (no decimal places)            	        15
        sb.Append(this.strMoney3(-1 * mTotalAmount, 0, 15));        //SKS#DevOps:17865

        //4     Number of T data records                    	                    15
        sb.Append(SKS_PP_StringFormats::strFill(15, int2str(mTotalTransaction), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //5	    Reserve                                                             221
        sb.Append(SKS_PP_StringFormats::strFill(221, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectPaymentRecords</Name>
				<Source><![CDATA[
    [SuppressBPWarning('BPErrorSelectUsingFirstOnly', 'The buffer is used in next statement or in a datasource query loop.')]
    protected void selectPaymentRecords()
    {
        //------------------------------------------------------------------------------------------------------
        // Standard payment selction
        // Override if different selection is need for a format
        //------------------------------------------------------------------------------------------------------
    
        //Order by clause must match the clause in the SKS_EFT_Processing.SumByPayment
        select * from mSKS_EFT_FileDetail
            join mSKS_EFT_FileDetail_VendAddress
            join mSKS_EFT_FileDetail_BenBank
              order by mSKS_EFT_FileDetail.PaymentCompany,
                   mSKS_EFT_FileDetail.RecordSection,
                   mSKS_EFT_FileDetail.PaymMode,
                   mSKS_EFT_FileDetail.BankAccountId,
                   mSKS_EFT_FileDetail.PaymentCurrencyCode,
                   mSKS_EFT_FileDetail.PaymSpec,
                   mSKS_EFT_FileDetail.EffectiveDate,
                   mSKS_EFT_FileDetail.DepCountryRegionId,
                   mSKS_EFT_FileDetail.RecordType,
                   mSKS_EFT_FileDetail.AccountNum,
                   mSKS_EFT_FileDetail.PaymentReference,
                   mSKS_EFT_FileDetail.RecId
          where mSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                mSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                mSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_VendAddress.RefRecId &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_BenBank.RefRecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>