<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_CA_SCOTIA_1464</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_CA_SCOTIA_1464 extends SKS_EFT_Format
/// </summary>
class SKS_EFT_Format_CA_SCOTIA_1464 extends SKS_EFT_Format
{
    #define.FormatVersion('20220406')
    #define.LineEnd('\r\n')
    str mControlID;
    str mOrigID;
    System.Text.StringBuilder msb;

    int mDRecordCount;

    AmountMST mPaymentAmount;
    SKS_EFT_SequenceNumber mSequenceNumber;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    protected void formatStructure()
    {
        int rec = 1;
        RecId nextRecId;
        msb = new System.Text.StringBuilder();
    
        // Get sequence number
        this.getSequence();
    
        // Format header
        this.rec_File_Header();
    
        while(mSKS_EFT_FileDetail)
        {
            // Get SKS_EFT_VendorPaym
            this.getSKS_EFT_CustomerPaym();
    
            // Get SKS_EFT_FileFormatPaymSpec
            this.getSKS_EFT_FileFormatPaymSpec();
    
            // Detail Record
            this.rec_Detail_D(rec == 1);
    
            next mSKS_EFT_FileDetail;
            nextRecId = mSKS_EFT_FileDetail.recId;
    
            if(rec < 6)
            {
                if(nextRecId != 0)
                {
                    rec++;
                }
                else
                {
                    this.padRecord(rec);
                    msb.Append(#LineEnd);
                }
            }
            else
            {
                rec = 1;
                msb.Append(#LineEnd);
            }
        }
    
        // Format trailer
        this.rec_Trailer();
    
        // Write to file
        this.fileWrite(msb.ToString());
    
        // Increment sequence number
        this.incrementSequenceNumber();
    
        // Set sequence number
        this.setSequence();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJulianDate</Name>
				<Source><![CDATA[
    private str getJulianDate(date _Date)
    {
        str value;
    
        value = '0' + subStr(date2julian(_Date),3,5);
    
        return value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSequence</Name>
				<Source><![CDATA[
    private void getSequence()
    {
        if(mSKS_EFT_FileFormat)
        {
            //Get Next Sequence Number
            mSequenceNumber = mSKS_EFT_FileFormat.NextSequenceNumber;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>incrementSequenceNumber</Name>
				<Source><![CDATA[
    private void incrementSequenceNumber()
    {
        if(mSequenceNumber >= 9999 || mSequenceNumber == 0)
        {
            mSequenceNumber = 1;
        }
        else
        {
            mSequenceNumber++;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>padRecord</Name>
				<Source><![CDATA[
    boolean padRecord(int _records)
    {
        //Fill remaining segments with blanks
        int x;
    
        for(x = _records; x < 6; x++)
        {
            msb.Append(SKS_PP_StringFormats::strFill(240, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Detail_D</Name>
				<Source><![CDATA[
    boolean rec_Detail_D(boolean _newRec)
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Content                                    Position    Size
        // 1    Record Type                             (        1)       1
        // 2    Logical Record Count                    (   2-  10)       9
        // 3    Customer ID                             (  11-  20)      10
        // 4    File Creation Number                    (  21-  24)       4
        //--
        // 5    Transaction Type Code                   (  25-  27)       3
        // 6    Amount                                  (  28-  37)      10
        // 7    Available Funds Date                    (  38-  43)       6
        // 8    Filler                                  (       44)       1
        // 9    Institution Code                        (  45-  47)       3
        //10    Transit Number                          (  48-  52)       5
        //11    Payee Account Number                    (  53-  64)      12
        //12    Item Trace Number                       (  65-  86)      22
        //13    Stored Transaction Type                 (  87-  89)       3
        //14    Originator's Short Name                 (  90- 104)      15
        //15    Payee Name                              ( 105- 134)      30
        //16    Originator's Long Name                  ( 135- 164)      30
        //17    Customer Number                         ( 165- 174)      10
        //18    Cross Reference No.                     ( 175- 193)      19
        //19    Filler                                  (      194)       1
        //20    Return Institution Code                 ( 195- 197)       3
        //21    Return Branch Transit                   ( 198- 202)       5
        //22    Account Number for return               ( 203- 214)      12
        //23    Settlement Code                         ( 215- 253)      39
        //24    Filler                                  ( 254- 264)      11
        //--    Repeat 4-18 for each additional deposit segment
        //------------------------------------------------------------------------------------------------------
        if(_newRec)
        {
            // 1    Record Type                             (        1)       1
            // 2    Logical Record Count                    (   2-  10)       9
            // 3    Customer ID                             (  11-  20)      10
            // 4    File Creation Number                    (  21-  24)       4
            this.rec_FileLead('D');
        }
        mDRecordCount++;
    
        // 5    Transaction Type Code                   (  25-  27)       3
        msb.Append(mSKS_EFT_FileFormatPaymSpec.TransactionCode);
    
        // 6    Amount                                  (  28-  37)      10
        mPaymentAmount += mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur;
        msb.Append(SKS_PP_StringFormats::strMoney(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur, 10));
    
        // 7    Available Funds Date                    (  38-  43)       6
        msb.Append(this.getJulianDate(mSKS_EFT_File.EffectiveDate));
    
        // 8    Filler                                  (       44)       1
        msb.Append(SKS_PP_StringFormats::strFill(1, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Right));
    
        // 9    Institution Code                        (  45-  47)       3
        //10    Transit Number                          (  48-  52)       5
        msb.Append(SKS_PP_StringFormats::strFill(8, mSKS_EFT_FileDetail.DepBankTransit, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
    
        //11    Payee Account Number                    (  53-  64)      12
        msb.Append(SKS_PP_StringFormats::strFill(12, mSKS_EFT_FileDetail.DepBankAcct, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //12    Item Trace Number                       (  65-  86)      22
        msb.Append(SKS_PP_StringFormats::strFill(22, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //13    Stored Transaction Type                 (  87-  89)       3
        msb.Append(SKS_PP_StringFormats::strFill(3, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
    
        //14    Originator's Short Name                 (  90- 104)      15
        str originShortName;

        originShortName = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('OriginShortName', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank));
        msb.Append(SKS_PP_StringFormats::strFill(15, this.CharacterReplacement(originShortName),SKS_PP_FillCharacter::Space,SKS_PP_FillSide::Right));
    
        //15    Payee Name                              ( 105- 134)      30
        msb.Append(SKS_PP_StringFormats::strFill(30, this.CharacterReplacement(mSKS_EFT_FileDetail.AccountName), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //16    Originator's Long Name                  ( 135- 164)      30
        msb.Append(SKS_PP_StringFormats::strFill(30, this.CharacterReplacement(mSKS_EFTAR_Bank.ACHCompanyName),SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //17    Customer Number                         ( 165- 174)      10
        msb.Append(SKS_PP_StringFormats::strFill(10, mOrigID,SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
    
        //18    Cross Reference No.                     ( 175- 193)      19
        msb.Append(SKS_PP_StringFormats::strFill(19, this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //19    Filler                                  (      194)       1
        msb.Append(SKS_PP_StringFormats::strFill(1, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
    
        //20    Return Institution Code                 ( 195- 197)       3
        msb.Append(SKS_PP_StringFormats::strFill(3, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //21    Return Branch Transit                   ( 198- 202)       5
        msb.Append(SKS_PP_StringFormats::strFill(5, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //22    Account Number for return               ( 203- 214)      12
        msb.Append(SKS_PP_StringFormats::strFill(12, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //23    Settlement Code                         ( 215- 253)      39
        msb.Append(SKS_PP_StringFormats::strFill(39, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //24    Filler                                  ( 254- 264)      11
        msb.Append(SKS_PP_StringFormats::strFill(11, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_File_Header</Name>
				<Source><![CDATA[
    boolean rec_File_Header()
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Content                                                 Position      Size
        // 1    Record Type                                             (        1)      1
        // 2    Logical Record Count                                    (   2-  10)      9
        // 3    Customer ID Number                                      (  11-  20)     10
        // 4    File Creation Number                                    (  21-  24)      4
        // 5    File Creation Date                                      (  25-  30)      6
        // 6    Scotiabank Date Centre Code                             (  31-  35)      5
        // 7    Filler                                                  (  36-1464)   1429
        //------------------------------------------------------------------------------------------------------
        str FileCN;
        //Nbr   Content
        // 1    Record Type                                             (        1)      1
        msb.Append('A');
    
        // 2    Logical Record Count                                    (   2-  10)      9
        msb.Append(SKS_PP_StringFormats::strFill(9, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
    
        // 3    Customer ID Number                                      (  11-  20)     10
        mOrigID = SKS_PP_StringFormats::strFill(10,strUpr(mSKS_EFTAR_Bank.ACHCompanyID), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right);
        msb.Append(mOrigID);
    
        // 4    File Creation Number                                    (  21-  24)      4
        FileCN = SKS_PP_StringFormats::strFill(4,num2str(mSequenceNumber,0,0,0,0), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left);
        msb.Append(FileCN);
    
        // 5    File Creation Date                                      (  25-  30)      6
        msb.Append(this.getJulianDate(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone())));
    
        // 6    Scotiabank Date Centre Code                             (  31-  35)      5
        msb.Append(SKS_PP_StringFormats::strFill(5, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
    
        // 7    Filler                                                  (  36-1464)   1429
        msb.Append(SKS_PP_StringFormats::strFill(1429, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        mControlID = mOrigID + FileCN;
    
        msb.Append(#LineEnd);
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_FileLead</Name>
				<Source><![CDATA[
    boolean rec_FileLead(str _Type)
    {
        //------------------------------------------------------------------------------------------------------
        // 1    Record Type                             (        1)       1
        // 2    Logical Record Count                    (   2-  10)       9
        // 3    Customer ID                             (  11-  20)      10
        // 4    File Creation Number                    (  21-  24)       4
        //------------------------------------------------------------------------------------------------------
    
        // 1    Record Type                             (        1)       1
        msb.Append(_Type);
    
        // 2    Logical Record Count                    (   2-  10)       9
        msb.Append(SKS_PP_StringFormats::strFill(9, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
    
        // 3    Customer ID                             (  11-  20)      10
        // 4    File Creation Number                    (  21-  24)       4
        msb.Append(SKS_PP_StringFormats::strFill(14, mControlID, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Trailer</Name>
				<Source><![CDATA[
    boolean rec_Trailer()
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Content                                    Position    Size
        // 1    Record Type                             (        1)       1
        // 2    Logical Record Count                    (   2-  10)       9
        // 3    Customer ID                             (  11-  20)      10
        // 4    File Creation Number                    (  21-  24)       4
        // 4    Total Value  of D Records               (  25-  38)      14
        // 5    Total Number of D Records               (  39-  46)       8
        // 6    Total Value of C Records                (  47-  60)      14
        // 7    Total Number of C Records               (  61-  68)       8
        // 8    Filler                                  (  69-1464)    1396
        //------------------------------------------------------------------------------------------------------
    
        // 1    Record Type                             (        1)       1
        // 2    Logical Record Count                    (   2-  10)       9
        // 3    Customer ID                             (  11-  20)      10
        // 4    File Creation Number                    (  21-  24)       4
        this.rec_FileLead('Z');
    
        // 4    Total Value  of D Records               (  25-  38)      14
        msb.Append(SKS_PP_StringFormats::strMoney(mPaymentAmount, 14));
    
        // 5    Total Number of D Records               (  39-  46)       8
        msb.Append(SKS_PP_StringFormats::strFill(8, int2str(mDRecordCount), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
    
        // 6    Total Value of C Records                (  47-  60)      14
        msb.Append(SKS_PP_StringFormats::strFill(14, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
    
        // 7    Total Number of C Records               (  61-  68)       8
        msb.Append(SKS_PP_StringFormats::strFill(8, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
    
        // 8    Filler                                  (  69-1464)    1396
        msb.Append(SKS_PP_StringFormats::strFill(1396, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSequence</Name>
				<Source><![CDATA[
    private void setSequence()
    {
        SKS_EFT_FileFormat sks_eft_fileformat;
        ;
    
        select firstOnly forUpdate sks_eft_fileformat
            where sks_eft_fileformat.FormatId == mSKS_EFT_FileFormat.FormatId;
    
        if(sks_eft_fileformat)
        {
            sks_eft_fileformat.NextSequenceNumber = mSequenceNumber;
            sks_eft_fileformat.update();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>