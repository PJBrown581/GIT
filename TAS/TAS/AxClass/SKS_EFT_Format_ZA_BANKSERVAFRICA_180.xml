<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_ZA_BANKSERVAFRICA_180</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_ZA_BANKSERVAFRICA_180
/// </summary>
class SKS_EFT_Format_ZA_BANKSERVAFRICA_180 extends SKS_EFT_Format
{
    #define.FormatVersion('20230314')
    int seqNum, recCount;
    str GenerationNum;
    int totalRecords, creditCount, debitCount;
    int64 hashTotal;
    AmountMST   totalAmount, debitTotalAmount, creditTotalAmount;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    protected void formatStructure()
    {
        SKS_EFT_FileDetail tmpSKS_EFT_FileDetail;

        //Installation Header  Record
        this.rec_InstallationHeader();

        //User Header  Record
        this.rec_UserHeader();

        select COUNT(InvoiceOrigAmountCur), SUM(InvoiceSettleAmountPmtCur)from tmpSKS_EFT_FileDetail
            where
                tmpSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                tmpSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                tmpSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary;

        totalRecords = real2int(tmpSKS_EFT_FileDetail.InvoiceOrigAmountCur);
        totalAmount = tmpSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur;

        while(mSKS_EFT_FileDetail)
        {
            //Transaction  Record
            this.rec_Transaction();
            
            if(totalRecords == 1)
            {
                //Contra  Record
                this.rec_Contra();

                //User Trailer Record
                this.rec_UserTrailer();

                //Installation Trailer Record
                this.rec_InstallationTrailer();
            }
            totalRecords--;
            next mSKS_EFT_FileDetail;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_UserHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_UserHeader
    /// </summary>
    /// <returns>true</returns>
    public boolean rec_UserHeader()
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Description                         Length
        //1.    Record identifier                       2n
        //2.    User Code                               4an
        //3.    Creation Date                           6n
        //4.    Purge Date                              6n
        //5.    First Action Date                       6n
        //6.    Last Action Date                        6n
        //7.    First Sequence Number                   6n
        //8.    User Generation Number                  4n
        //9.    Type of service                         10a
        //10.   Filler                                  130a
        //------------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        seqNum++;
        recCount++;

        //1.    Record identifier                       2n
        sb.Append(SKS_PP_StringFormats::strFill(2, '04', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //2.    User Code                               4an
        sb.Append(SKS_PP_StringFormats::strFill(4, SKS_EFT_Format::getCodelookupvalue('InstallationIdCode', mSKS_EFT_FileDetail.RecId), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //3.    Creation Date                           6n
        sb.Append(SKS_PP_StringFormats::strDateYYMMDD(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone())));

        //4.    Purge Date                              6n
        sb.Append(SKS_PP_StringFormats::strDateYYMMDD(mSKS_EFT_FileDetail.EffectiveDate));

        //5.    First Action Date                       6n
        sb.Append(SKS_PP_StringFormats::strDateYYMMDD(mSKS_EFT_FileDetail.EffectiveDate));

        //6.    Last Action Date                        6n
        sb.Append(SKS_PP_StringFormats::strDateYYMMDD(mSKS_EFT_FileDetail.EffectiveDate));

        //7.    First Sequence Number                   6n
        sb.Append(SKS_PP_StringFormats::strFill(6, num2Str(seqNum,0,0,0,0), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //8.    User Generation Number                  4n
        str indicator = SKS_EFT_Format::getCodelookupvalue('TestProdIndicator', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank);

        GenerationNum = SKS_EFT_Format::getCodelookupvalue('NextSequenceNumber', mSKS_EFT_FileDetail.RecId);

        if(indicator == 'PROD')
        {
            sb.Append(SKS_PP_StringFormats::strFill(4, GenerationNum, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        }
        else
        {
            sb.Append('TEST');
        }

        //9.    Type of service                         10a
        sb.Append(SKS_PP_StringFormats::strFill(10, 'SAMEDAY', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //10.   Filler                                  130a
        sb.Append(SKS_PP_StringFormats::strFill(130, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_UserTrailer</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_UserTrailer
    /// </summary>
    /// <returns>true</returns>
    public boolean rec_UserTrailer()
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Description                         Length
        //1.  Record identifier                       2n
        //2.  User Code                               4an
        //3.  First Sequence Number                   6n
        //4.  Last Sequence   Number                  6n
        //5. First Action Date                        6n
        //6. Last Action Date                         6n
        //7.  Number of Debit Records                 6n
        //8.  Number of Credit Records                6n
        //9.  Number of Contra Records                6n
        //10. Total Debit Value                       12n
        //11. Total Credit Value                      12n
        //12. Hash Total of Homing                    12n
        //13. Filler                                  96a
        //------------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        recCount++;

        //1.  Record identifier                       2n
        sb.Append(SKS_PP_StringFormats::strFill(2, '92', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //2.  User Code                               4an
        sb.Append(SKS_PP_StringFormats::strFill(4, SKS_EFT_Format::getCodelookupvalue('InstallationIdCode', mSKS_EFT_FileDetail.RecId), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //3.  First Sequence Number                   6n
        sb.Append(SKS_PP_StringFormats::strFill(6, '1', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //4.  Last Sequence   Number                  6n
        sb.Append(SKS_PP_StringFormats::strFill(6, num2Str(seqNum,0,0,0,0), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //5.    First Action Date                       6n
        sb.Append(SKS_PP_StringFormats::strDateYYMMDD(mSKS_EFT_FileDetail.EffectiveDate));

        //6.    Last Action Date                        6n
        sb.Append(SKS_PP_StringFormats::strDateYYMMDD(mSKS_EFT_FileDetail.EffectiveDate));

        //7.  Number of Debit Records                 6n
        sb.Append(SKS_PP_StringFormats::strFill(6, num2Str(debitCount + 1,0,0,0,0), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //8.  Number of Credit Records                6n
        sb.Append(SKS_PP_StringFormats::strFill(6, num2Str(creditCount,0,0,0,0), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //9.  Number of Contra Records                6n
        sb.Append(SKS_PP_StringFormats::strFill(6, num2Str(debitCount + 1,0,0,0,0), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //10. Total Debit Value                       12n
        sb.Append(SKS_PP_StringFormats::strMoney(this.getPositiveAmount(creditTotalAmount), 12));

        //11. Total Credit Value                      12n
        sb.Append(SKS_PP_StringFormats::strMoney(this.getPositiveAmount(creditTotalAmount), 12));

        //12. Hash Total of Homing                    12n
        sb.Append(SKS_PP_StringFormats::strFill(12, SKS_PP_StringFormats::strRight(int642Str(hashTotal), 12), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //13. Filler                                  96a
        sb.Append(SKS_PP_StringFormats::strFill(96, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_InstallationHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_InstallationHeader
    /// </summary>
    /// <returns>true</returns>
    public boolean rec_InstallationHeader()
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Description                         Length
        //1.    Record identifier                   2n
        //2.    Volume Number                       4n
        //3.    Tape Serial Number                  8an
        //4.    Installation ID Code from           4an
        //5.    Installation ID Code to             4n
        //6.    Creation Date                       6n
        //7.    Purge date                          6n
        //8.    Installation Generation             4n
        //9.    Block Length                        4n
        //10.   Record Length                       4n
        //11.   Service                             10a
        //12.   Filler                              8an
        //13.    Filler                             116an
        //------------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        recCount++;
        ;

        //1.    Record identifier                   2n
        sb.Append(SKS_PP_StringFormats::strFill(2, '02', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //2.    Volume Number                       4n
        sb.Append(SKS_PP_StringFormats::strFill(4, '1001', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //3.    Tape Serial Number                  8an
        sb.Append(SKS_PP_StringFormats::strFill(8, mSKS_EFT_FileDetail.FileACHCompanyId, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //4.    Installation ID Code from           4an
        sb.Append(SKS_PP_StringFormats::strFill(4, SKS_EFT_Format::getCodelookupvalue('InstallationIdCode', mSKS_EFT_FileDetail.RecId), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //5.    Installation ID Code to             4n
        sb.Append(SKS_PP_StringFormats::strFill(4, '0021', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //6.    Creation Date                       6n
        sb.Append(SKS_PP_StringFormats::strDateYYMMDD(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone())));

        //7.    Purge date                          6n
        sb.Append(SKS_PP_StringFormats::strDateYYMMDD(mSKS_EFT_FileDetail.EffectiveDate));

        //8.    Installation Generation Number          4n
        str indicator = SKS_EFT_Format::getCodelookupvalue('TestProdIndicator', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank);

        if(indicator == 'PROD')
        {
            sb.Append(SKS_PP_StringFormats::strFill(4, GenerationNum, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        }
        else
        {
            sb.Append('TEST');
        }

        //9.    Block Length                        4n
        sb.Append(SKS_PP_StringFormats::strFill(4, '1800', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));


        //10.   Record Length                       4n
        sb.Append(SKS_PP_StringFormats::strFill(4, '0180', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //11.   Service                             10a
        sb.Append(SKS_PP_StringFormats::strFill(10, 'MAGTAPE', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //12.   Filler                              8an
        sb.Append(SKS_PP_StringFormats::strFill(8, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //13.    Filler                             116an
        sb.Append(SKS_PP_StringFormats::strFill(116, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_InstallationTrailer</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_InstallationTrailer
    /// </summary>
    /// <returns>true</returns>
    public boolean rec_InstallationTrailer()
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Description                         Length
        //1.  Record identifier                     2n
        //2.  Volume Number                         4n
        //3.  Tape Serial Number                    8an
        //4.  Installation ID Code from             4an
        //5.  Installation ID Code to               4n
        //6.  Creation Date                         6n
        //7.  Purge date                            6n
        //8.  Installation Generation Number        4n
        //9.  Block Length                          4n
        //10. Record Length                         4n
        //11. Service                               10a
        //12. Block Count                           6n
        //13. Record Count                          6n
        //14. User Header/Trailer Count             6n
        //15. Filler                                106a
        //------------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        real blockCount;
        recCount++;

        //1.  Record identifier                     2n
        sb.Append(SKS_PP_StringFormats::strFill(2, '94', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //2.  Volume Number                         4n
        sb.Append(SKS_PP_StringFormats::strFill(4, '1001', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //3.  Tape Serial Number                    8an
        sb.Append(SKS_PP_StringFormats::strFill(8, mSKS_EFT_FileDetail.FileACHCompanyId, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //4.  Installation ID Code from             4an
        sb.Append(SKS_PP_StringFormats::strFill(4, SKS_EFT_Format::getCodelookupvalue('InstallationIdCode', mSKS_EFT_FileDetail.RecId), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //5.  Installation ID Code to               4n
        sb.Append(SKS_PP_StringFormats::strFill(4, '0021', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //6.  Creation Date                         6n
        sb.Append(SKS_PP_StringFormats::strDateYYMMDD(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone())));

        //7.  Purge date                            6n
        sb.Append(SKS_PP_StringFormats::strDateYYMMDD(mSKS_EFT_FileDetail.EffectiveDate));

        //8.  Installation Generation Number        4n
        str indicator = SKS_EFT_Format::getCodelookupvalue('TestProdIndicator', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank);

        if(indicator == 'PROD')
        {
            sb.Append(SKS_PP_StringFormats::strFill(4, GenerationNum, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        }
        else
        {
            sb.Append('TEST');
        }

        //9.  Block Length                          4n
        sb.Append(SKS_PP_StringFormats::strFill(4, '1800', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //10. Record Length                         4n
        sb.Append(SKS_PP_StringFormats::strFill(4, '0180', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //11. Service                               10a
        sb.Append(SKS_PP_StringFormats::strFill(10, 'MAGTAPE', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        blockCount = recCount/10;

        str  countvalue = num2Str(blockCount, 0,2,1,0);

        str value1, value2;

        value1 = subStr(countvalue, strLen(countvalue), -2);

        value2 = subStr(countvalue, 1, strLen(countvalue)-3);

        int countofBlock = str2Int(value2);

        if(value1 != '00')
        {
            countofBlock += 1;
        }

        
        //12. Block Count                           6n
        sb.Append(SKS_PP_StringFormats::strFill(6, num2Str(countofBlock, 0,0,0,0), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //13. Record Count                          6n
        sb.Append(SKS_PP_StringFormats::strFill(6, num2Str(recCount,0,0,0,0), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //14. User Header/Trailer Count             6n
        sb.Append(SKS_PP_StringFormats::strFill(6, '2', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left)); //TODO

        //15. Filler                                106a
        sb.Append(SKS_PP_StringFormats::strFill(106, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Contra</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_Contra
    /// </summary>
    /// <returns>true</returns>
    public boolean rec_Contra()
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Description                         Length
        //1.    Record identifier                   2n
        //2.    User Branch                         6n
        //3.    User Nominated Account Number       11n
        //4.    User Code                           4an
        //5.    User Sequence Number                6n
        //6.    Homing Branch                       6n
        //7.    Homing Account                      11n
        //8.    Type of Account                     1n
        //9.    Amount                              11n
        //10.   Action Date                         6n
        //11.   Entry Class                         2n
        //12.   Filler                              4n
        //13.   User Reference                      30an
        //14.   Nominated Account name              30an
        //15.   Filler                              50a
        //------------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        str userReference;
        recCount++;

        //1.    Record identifier                   2n
        sb.Append(SKS_PP_StringFormats::strFill(2, '12', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //2.    User Branch                         6n
        sb.Append(SKS_PP_StringFormats::strFill(6, mSKS_EFT_FileDetail.BankBankTransit, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //3.    User Nominated Account Number       11n
        sb.Append(SKS_PP_StringFormats::strFill(11, mSKS_EFT_FileDetail.BankBankAcct, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //4.    User Code                           4an
        sb.Append(SKS_PP_StringFormats::strFill(4, SKS_EFT_Format::getCodelookupvalue('InstallationIdCode', mSKS_EFT_FileDetail.RecId), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //5.    User Sequence Number                6n
        sb.Append(SKS_PP_StringFormats::strFill(6, num2Str(seqNum,0,0,0,0), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //6.    Homing Branch                       6n
        sb.Append(SKS_PP_StringFormats::strFill(6, mSKS_EFT_FileDetail.BankBankTransit, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //7.    Homing Account                      11n
        sb.Append(SKS_PP_StringFormats::strFill(11, SKS_PP_StringFormats::strRight(mSKS_EFT_FileDetail.BankBankAcct, 11), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        hashTotal += str2Int64(SKS_PP_StringFormats::strRight(mSKS_EFT_FileDetail.BankBankAcct, 11));

        //8.    Type of Account                     1n
        sb.Append(SKS_PP_StringFormats::strFill(1, '1', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //9.    Amount                              11n
        sb.Append(SKS_PP_StringFormats::strMoney(this.getPositiveAmount(totalAmount), 11));

        //10.   Action Date                         6n
        sb.Append(SKS_PP_StringFormats::strDateYYMMDD(mSKS_EFT_FileDetail.EffectiveDate));

        //11.   Entry Class                         2n
        sb.Append(SKS_PP_StringFormats::strFill(2, '10', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //12.   Filler                              4n
        sb.Append(SKS_PP_StringFormats::strFill(4, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //13.   User Reference                      30an
        userReference =  SKS_PP_StringFormats::strFill(10, this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('UserAbbrvtName', mSKS_EFT_FileDetail.RecId)), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right)
                        + SKS_PP_StringFormats::strFill(20, 'CONTRA', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right);

        sb.Append(SKS_PP_StringFormats::strFill(30, userReference, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //14.   Nominated Account name              30an
        sb.Append(SKS_PP_StringFormats::strFill(30, this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyName), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //15.   Filler                              50a
        sb.Append(SKS_PP_StringFormats::strFill(50, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

    
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Transaction</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_Transaction
    /// </summary>
    /// <returns>true</returns>
    public boolean rec_Transaction()
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Description                         Length
        //1.  Record identifier                       2n
        //2.  User Branch                             6n
        //3.  User Nominated Account Number           11n
        //4.  User Code                               4an
        //5.  User Sequence Number                    6n
        //6.  Homing Branch                           6n
        //7.  Homing Account Number                   11n
        //8.  Type of Account                         1n
        //9.  Amount                                  11n
        //10. Action Date                             6n
        //11. Entry Class                             2n
        //12. Tax Code                                1n
        //13. Filler                                  2n
        //14. Filler                                  1n
        //15. User Reference / Originator Reference   30an
        //16. Homing Account Name                     30an
        //17. Non-Standard Homing Account Number      20n
        //18. Filler                                  16an
        //19. Homing Institution                      2n
        //20. Filler                                  12a
        //------------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        str userRef;
        recCount++;

        if(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1 > 0)
        {
            creditTotalAmount += mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur;
            creditCount++;
        }
        else
        {
            debitTotalAmount += mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur;
            debitCount++;
        }

        //1.  Record identifier                       2n
        sb.Append(SKS_PP_StringFormats::strFill(2, '10', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //2.  User Branch                             6n
        sb.Append(SKS_PP_StringFormats::strFill(6, mSKS_EFT_FileDetail.BankBankTransit, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //3.  User Nominated Account Number           11n
        sb.Append(SKS_PP_StringFormats::strFill(11, mSKS_EFT_FileDetail.BankBankAcct, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //4.  User Code                               4an
        sb.Append(SKS_PP_StringFormats::strFill(4, SKS_EFT_Format::getCodelookupvalue('InstallationIdCode', mSKS_EFT_FileDetail.RecId), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //5.  User Sequence Number                    6n
        sb.Append(SKS_PP_StringFormats::strFill(6, num2Str(seqNum,0,0,0,0), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        seqNum++;

        //6.  Homing Branch                           6n
        sb.Append(SKS_PP_StringFormats::strFill(6, mSKS_EFT_FileDetail.DepBankTransit, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //7.  Homing Account Number                   11n
        if(strLen(mSKS_EFT_FileDetail.DepBankAcct) <= 11)
        {
            sb.Append(SKS_PP_StringFormats::strFill(11, mSKS_EFT_FileDetail.DepBankAcct, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
            hashTotal += str2Int64(SKS_PP_StringFormats::strRight(mSKS_EFT_FileDetail.DepBankAcct, 11));
        }
        else
        {
            sb.Append(SKS_PP_StringFormats::strFill(11, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        }

        //8.  Type of Account                         1n
        sb.Append(SKS_PP_StringFormats::strFill(1, SKS_EFT_Format::getCodelookupvalue('TypeOfAccount', mSKS_EFT_FileDetail.RecId), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //9.  Amount                                  11n
        sb.Append(SKS_PP_StringFormats::strMoney(this.getPositiveAmount(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur), 11));

        //10. Action Date                             6n
        sb.Append(SKS_PP_StringFormats::strDateYYMMDD(mSKS_EFT_FileDetail.EffectiveDate));

        //11. Entry Class                             2n
        sb.Append(SKS_PP_StringFormats::strFill(2, SKS_EFT_Format::getCodelookupvalue('EntryClass', mSKS_EFT_FileDetail.RecId), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //12. Tax Code                                1n
        sb.Append(SKS_PP_StringFormats::strFill(1, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //13. Filler                                  2n
        sb.Append(SKS_PP_StringFormats::strFill(2, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //14. Filler                                  1n
        sb.Append(SKS_PP_StringFormats::strFill(1, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //15. User Reference / Originator Reference   30an
        msks_EFT_FileDetail_PaymentLine = SKS_EFT_FileDetail_PaymentLine::find(mSKS_EFT_FileDetail.RecId);

        userRef =  SKS_PP_StringFormats::strFill(10, this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('UserAbbrvtName', mSKS_EFT_FileDetail.RecId)), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right)
                 + SKS_PP_StringFormats::strFill(20, this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference) + ' ' + this.CharacterReplacement(msks_EFT_FileDetail_PaymentLine.TransactionTxt), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right);

        sb.Append(SKS_PP_StringFormats::strFill(30, userRef, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //16. Homing Account Name                     30an
        sb.Append(SKS_PP_StringFormats::strFill(30, mSKS_EFT_FileDetail_VendAddress.BeneName, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //17. Non-Standard Homing Account Number      20n
        if(strLen(mSKS_EFT_FileDetail.DepBankAcct) > 11)
        {
            sb.Append(SKS_PP_StringFormats::strFill(20, mSKS_EFT_FileDetail.DepBankAcct, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
            hashTotal += str2Int64(SKS_PP_StringFormats::strRight(mSKS_EFT_FileDetail.DepBankAcct, 11));
        }
        else
        {
            sb.Append(SKS_PP_StringFormats::strFill(20, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        }

        //18. Filler                                  16an
        sb.Append(SKS_PP_StringFormats::strFill(16, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //19. Homing Institution                      2n
        sb.Append(SKS_PP_StringFormats::strFill(2, SKS_EFT_Format::getCodelookupvalue('HomingInstitution', mSKS_EFT_FileDetail.RecId), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //20. Filler                                  12a
        sb.Append(SKS_PP_StringFormats::strFill(12, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectPaymentRecords</Name>
				<Source><![CDATA[
    [SuppressBPWarning('BPErrorSelectUsingFirstOnly', 'The buffer is used in next statement or in a datasource query loop.')]
    protected void selectPaymentRecords()
    {
        //------------------------------------------------------------------------------------------------------
        // Standard payment selction
        // Override if different selection is need for a format
        //------------------------------------------------------------------------------------------------------
    
        //Order by clause must match the clause in the SKS_EFT_Processing.SumByPayment
        select * from mSKS_EFT_FileDetail
            join mSKS_EFT_FileDetail_VendAddress
            join mSKS_EFT_FileDetail_BenBank
            join mSKS_EFT_FileDetail_Intermediary
              order by mSKS_EFT_FileDetail.RecordSection,
                   mSKS_EFT_FileDetail.PaymMode,
                   mSKS_EFT_FileDetail.BankAccountId,
                   mSKS_EFT_FileDetail.PaymentCurrencyCode,
                   mSKS_EFT_FileDetail.PaymSpec,
                   mSKS_EFT_FileDetail.EffectiveDate,
                   mSKS_EFT_FileDetail.DepCountryRegionId,
                   mSKS_EFT_FileDetail.RecordType,
                   mSKS_EFT_FileDetail.AccountNum,
                   mSKS_EFT_FileDetail.PaymentReference,
                   mSKS_EFT_FileDetail.RecId
          where mSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                mSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                mSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_VendAddress.RefRecId &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_BenBank.RefRecId &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_Intermediary.RefRecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>