<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EB_CharacterReplacement</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_EB_CharacterReplacement
{
    RecordViewCache mRecordViewCacheGroup;
    RecordViewCache mRecordViewCacheValue;

    SKS_EB_CRGroupId        mGroupId;
    SKS_EB_CRFromCharacter  mFromCharacter;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>ConvertCharacters</Name>
				<Source><![CDATA[
    public str ConvertCharacters(str _value)
    {
        SKS_EB_CharacterReplacementGroups lSKS_EB_CharacterReplacementGroups;
        SKS_EB_CharacterReplacementValues lSKS_EB_CharacterReplacementValues;
        System.Text.StringBuilder result = new System.Text.StringBuilder();
        str ret;
    
        result.Append(_value);
    
        //ReplaceCharacters
        while select FromCharacter, ToCharacterType, ToCharacter, GroupId from lSKS_EB_CharacterReplacementValues where lSKS_EB_CharacterReplacementValues.GroupId == mGroupId
        {
            str replacementCharacter;

            switch(lSKS_EB_CharacterReplacementValues.ToCharacterType)
            {
                case SKS_EB_CharacterType::Nothing:
                    replacementCharacter = null;
                    break;

                case SKS_EB_CharacterType::Space:
                    replacementCharacter = ' ';
                    break;

                case SKS_EB_CharacterType::Fixed:
                    replacementCharacter = lSKS_EB_CharacterReplacementValues.ToCharacter;
                    break;
            }

            result.Replace(lSKS_EB_CharacterReplacementValues.FromCharacter, replacementCharacter);
        }
    
        //RemoveDiacritics
        select RemoveDiacritics from lSKS_EB_CharacterReplacementGroups where lSKS_EB_CharacterReplacementGroups.GroupId == mGroupId;
        if(lSKS_EB_CharacterReplacementGroups.RemoveDiacritics)
        {
            ret = this.RemoveDiacritics(result.ToString());
        }
        else
        {
            ret = result.ToString();
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(SKS_EB_CRGroupId _GroupId)
    {
        SKS_EB_CharacterReplacementGroups ReplacementGroups;
        SKS_EB_CharacterReplacementValues ReplacementValues;
        ;
    
        mGroupId = _GroupId;
    
        // Define records to cache
        select noFetch ReplacementGroups where ReplacementGroups.GroupId == mGroupId;
    
        // Cache the records
        mRecordViewCacheGroup = new RecordViewCache(ReplacementGroups);
    
        // Define records to cache
        select noFetch ReplacementValues where ReplacementValues.GroupId == mGroupId;
    
        // Cache the records
        mRecordViewCacheValue = new RecordViewCache(ReplacementValues);
    }

]]></Source>
			</Method>
			<Method>
				<Name>RemoveDiacritics</Name>
				<Source><![CDATA[
    private str RemoveDiacritics(str _value)
    {
        System.String input = _value;
        int i;
    
        System.Char c;
        System.Text.NormalizationForm FormD = System.Text.NormalizationForm::FormD;
        str normalizedString = input.Normalize(FormD);
        System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
    
        for (i = 1; i <= strLen(normalizedString); i++)
        {
            c = System.Char::Parse(subStr(normalizedString, i, 1));
    
            if (System.Globalization.CharUnicodeInfo::GetUnicodeCategory(c) != System.Globalization.UnicodeCategory::NonSpacingMark)
            {
                stringBuilder.Append(c);
            }
        }
    
        input = stringBuilder.ToString();
        input = input.Normalize();
        return input;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>