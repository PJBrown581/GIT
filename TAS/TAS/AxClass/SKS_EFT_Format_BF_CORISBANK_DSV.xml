<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_BF_CORISBANK_DSV</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// class SKS_EFT_Format_BF_CORISBANK_DSV extends SKS_EFT_Format
/// </summary>
class SKS_EFT_Format_BF_CORISBANK_DSV extends SKS_EFT_Format
{
    #define.FormatVersion('20220523')
    #define.Separator('|')

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    [SuppressBPWarningAttribute("BPCheckNestedLoopinCode","Necessary to allow the processing of every invoice(inner loop) for every relevant parent file detail record(outer loop)")]
    protected void formatStructure()
    {
        while(mSKS_EFT_FileDetail)
        {
            // Get SKS_EFT_FileFormatPaymSpec
            this.getSKS_EFT_FileFormatPaymSpec();

            //Payment Record
            this.rec_Payment();

            next mSKS_EFT_FileDetail;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Payment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Payment Record
    /// </summary>
    /// <returns>true</returns>
    public boolean rec_Payment()
    {
        str orderingCustdetails, beneficiaryDetails;        
        LedgerjournalTable ledgerjournalTable;

        System.Text.StringBuilder sb = new System.Text.StringBuilder();


        //1	    Corp_Bank_Code(5 digits) Corp_Branch_Code(5)Corp_Account_number(11)Corp_Account_Control_Key (2)
        orderingCustdetails = this.CharacterReplacement(subStr(SKS_EFT_Format::getCodelookupvalue('CorpBankCode', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank), 1, 5)    +
                                          subStr(SKS_EFT_Format::getCodelookupvalue('CorpBranchCode', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank), 1, 5)    +
                                          subStr(mSKS_EFT_FileDetail.BankBankAcct, 1, 12)                         +
                                          subStr(SKS_EFT_Format::getCodelookupvalue('CorpAccountControlKey', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank), 1, 2));
        sb.Append(this.wrapField(orderingCustdetails));

        //2     Ben_Bank_Code(5) Ben_Branch_Code(5) Ben_Account_number(11 or 12) Ben_Account_Control_Key (2)
        beneficiaryDetails = this.CharacterReplacement(subStr(SKS_EFT_Format::getCodelookupvalue('BenBankCode', mSKS_EFT_FileDetail.RecId), 1, 5)    +
                                          subStr(mSKS_EFT_FileDetail_BenBank.BenBankBranch, 1, 5)    +
                                          subStr(mSKS_EFT_FileDetail.DepBankAcct, 1, 12) + 
                                          subStr(SKS_EFT_Format::getCodelookupvalue('BenAcctCtrlKey', mSKS_EFT_FileDetail.RecId), 1, 2));
        sb.Append(this.wrapField(beneficiaryDetails));

        //3     Currency(3)
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.PaymentCurrencyCode));

        //4     Ben_Name (35)
        sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneName), 35));

        //5     Transaction_Amount
        sb.Append(this.wrapField(strRem(num2str(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1, 0, 2, 1, 0), '.')));

        //6     Currency(3)
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.PaymentCurrencyCode));

        //7     Blank
        sb.Append(this.wrapField());

        //7     Transaction_Name(30)
        changecompany(mSKS_EFT_FileDetail.PaymentCompany)
        {
            select firstonly Name from ledgerjournalTable where
                    ledgerjournalTable.JournalNum == mSKS_EFT_FileDetail.PaymentJournalNum;
        }

        sb.Append(this.wrapField(this.CharacterReplacement(ledgerjournalTable.Name), 30, false));

        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wrapField</Name>
				<Source><![CDATA[
    private str wrapField(str _field = '', int _fieldLength = 0, boolean _addSeparator = true)
    {
        str text;

        if(_fieldLength > 0)
        {
            text = subStr(_field, 1, _fieldLength);
        }
        else
        {
            text = _field;
        }
        if(_addSeparator)
        {
            text += #Separator;
        }
        return text;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectPaymentRecords</Name>
				<Source><![CDATA[
    [SuppressBPWarning('BPErrorSelectUsingFirstOnly', 'The buffer is used in next statement or in a datasource query loop.')]
    protected void selectPaymentRecords()
    {
        //------------------------------------------------------------------------------------------------------
        // Standard payment selction
        // Override if different selection is need for a format
        //------------------------------------------------------------------------------------------------------
    
        //Order by clause must match the clause in the SKS_EFT_Processing.SumByPayment
        select * from mSKS_EFT_FileDetail
            join mSKS_EFT_FileDetail_VendAddress
            join mSKS_EFT_FileDetail_BenBank
                order by mSKS_EFT_FileDetail.PaymentCompany,
        mSKS_EFT_FileDetail.RecordSection,
                   mSKS_EFT_FileDetail.PaymMode,
                   mSKS_EFT_FileDetail.BankAccountId,
                   mSKS_EFT_FileDetail.PaymentCurrencyCode,
                   mSKS_EFT_FileDetail.PaymSpec,
                   mSKS_EFT_FileDetail.EffectiveDate,
                   mSKS_EFT_FileDetail.DepCountryRegionId,
                   mSKS_EFT_FileDetail.RecordType,
                   mSKS_EFT_FileDetail.AccountNum,
                   mSKS_EFT_FileDetail.PaymentReference,
                   mSKS_EFT_FileDetail.RecId
          where mSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                mSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                mSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_VendAddress.RefRecId &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_BenBank.RefRecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>