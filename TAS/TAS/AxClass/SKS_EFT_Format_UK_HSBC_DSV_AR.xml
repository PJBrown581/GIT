<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_UK_HSBC_DSV_AR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_UK_HSBC_DSV_AR
/// </summary>
class SKS_EFT_Format_UK_HSBC_DSV_AR extends SKS_EFT_Format
{
    #define.FormatVersion('20221212')
    #define.Separator('+')
    #define.Colon(':')
    #define.LineEnd('\'')
    int mtransaction;
    int recCount;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    protected void formatStructure()
    {
        CompanyBankAccountId    prevBankAccountId;

        while(mSKS_EFT_FileDetail)
        {
            // Get SKS_EFT_FileFormatPaymSpec
            this.getSKS_EFT_FileFormatPaymSpec();

            if(prevBankAccountId != mSKS_EFT_FileDetail.BankAccountId)
            {
                //  Interchange Header
                this.rec_UNB();

                //  Message Header
                this.rec_UNH();

                //  Beginning of Message
                this.rec_BGM();

                //  Date/Time
                this.rec_DTM137();

                //   Line Item
                this.rec_LIN();

                //  Date/Time
                this.rec_DTM203();

                //  Reference
                this.rec_REFCR();

                //  Business Function
                this.rec_BUS();

                //  Monetary Amount
                this.rec_MOA1();

                //  Financial institution information
                this.rec_FII1();

                //  Name and Address
                this.rec_NAD1();

                //  Process Identification
                this.rec_PRC();
    
                prevBankAccountId = mSKS_EFT_FileDetail.BankAccountId;
            }

            //Sequence Details
            this.rec_SEQ();

            //  Monetary Amount
            this.rec_MOA2();

            //  Date/Time
            this.rec_DTM140();

            //  Reference
            this.rec_REF();

            //  Payment Instructions
            this.rec_PAI();

            //  Financial institution information
            this.rec_FII2();

            //  Name and Address
            this.rec_NAD2();

            //  Free Text
            this.rec_FTX();

            //  General Indicator
            this.rec_GIS();

            next mSKS_EFT_FileDetail;
        }

        //  Control Total
        this.rec_CNT();

        //  Message Trailer
        this.rec_UNT();

        //  Interchange Trailer
        this.rec_UNZ();
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_UNB</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_UNB
    /// </summary>
    /// <returns>true</returns>
    public boolean rec_UNB()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        
        sb.Append('UNB');
        sb.Append(#Separator);

        //      Syntax Identifier
        sb.Append('UNOA:3');
        sb.Append(#Separator);

        //      Interchange Sender
        sb.Append('ABC30014001');
        sb.Append(#Separator);

        //      Interchange Receiver
        sb.Append('HEXAGON ABC');
        sb.Append(#Separator);

        sb.Append(SKS_PP_StringFormats::strDateYYMMDD(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()), DateSeparator::None));
        sb.Append(#Colon);
        sb.Append(SKS_PP_StringFormats::strTimeHHMM(DateTimeUtil::getTimeNow(DateTimeUtil::getUserPreferredTimeZone())));
        sb.Append(#Separator);
        
        sb.Append('IDDITALY');
        sb.Append(#LineEnd);
        
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_UNH</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_UNH
    /// </summary>
    /// <returns>true</returns>
    public boolean rec_UNH()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();

        recCount++;

        sb.Append('UNH');
        sb.Append(#Separator);

        //   Message Reference Number
        sb.Append('1');
        sb.Append(#Separator);

        sb.Append('DIRDEB');
        sb.Append(#Colon);

        //      Message Type Version and  Release Number
        sb.Append('D:96A');
        sb.Append(#Colon);

        //      Interchange Receiver
        sb.Append('UN:APACS');
        sb.Append(#LineEnd);
        
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_BGM</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_BGM
    /// </summary>
    /// <returns>true</returns>
    public boolean rec_BGM()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();

        recCount++;
        sb.Append('BGM');
        sb.Append(#Separator);

        //  Document/message type, coded
        sb.Append('451');
        sb.Append(#Separator);

        //  Document/Message Number
        sb.Append('IDDITALY');
        sb.Append(#Separator);

        //  Message Function Coded
        sb.Append('9');
        sb.Append(#LineEnd);
        
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_DTM137</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_DTM137
    /// </summary>
    /// <returns>true</returns>
    public boolean rec_DTM137()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();

        recCount++;
        sb.Append('DTM');
        sb.Append(#Separator);

        //  Date/Time/Period Qualifier
        sb.Append('137');
        sb.Append(#Colon);

        //  Date/Time/Period
        sb.Append(SKS_PP_StringFormats::strDateYYYYMMDD(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()), DateSeparator::None));
        sb.Append(#Colon);

        //  Date/Time/Period Format
        sb.Append('102');
        sb.Append(#LineEnd);
        
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_LIN</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_LIN
    /// </summary>
    /// <returns>true</returns>
    public boolean rec_LIN()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();

        recCount++;
        sb.Append('LIN');
        sb.Append(#Separator);

        //  LINE ITEM NUMBER
        sb.Append(SKS_EFT_Format::getCodelookupvalue('NextSequenceNumber', mSKS_EFT_FileDetail.RecId));
        sb.Append(#LineEnd);
        
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_DTM203</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_DTM203
    /// </summary>
    /// <returns>true</returns>
    public boolean rec_DTM203()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();

        recCount++;
        sb.Append('DTM');
        sb.Append(#Separator);

        //  Date/Time/Period Qualifier
        sb.Append('203');
        sb.Append(#Colon);

        //  Date/Time/Period
        sb.Append(SKS_PP_StringFormats::strDateYYYYMMDD(mSKS_EFT_FileDetail.EffectiveDate, DateSeparator::None));
        sb.Append(#Colon);

        //  Date/Time/Period Format
        sb.Append('102');
        sb.Append(#LineEnd);
        
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_REFCR</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_REFCR
    /// </summary>
    /// <returns>true</returns>
    public boolean rec_REFCR()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        
        recCount++;
        sb.Append('REF');
        sb.Append(#Separator);

        //  Reference Qualifier
        sb.Append('CR');
        sb.Append(#Colon);

        //  Reference Number
        sb.Append(SKS_PP_StringFormats::strRight(mSKS_EFT_File.FileNbr, 35));
        sb.Append(#LineEnd);
        
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_BUS</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_BUS
    /// </summary>
    /// <returns>true</returns>
    public boolean rec_BUS()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        
        recCount++;
        sb.Append('BUS');
        sb.Append(#Separator);
        
        sb.Append('1');
        sb.Append(#Colon);

        sb.Append('412');
        sb.Append(#Separator);

        sb.Append('DO');
        sb.Append(#Separator);

        sb.Append('12');
        sb.Append(#Separator);

        sb.Append('01');
        sb.Append(#Colon);

        sb.Append('71');
        sb.Append(#Colon);

        sb.Append('119');
        sb.Append(#LineEnd);
        
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_MOA1</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_MOA1
    /// </summary>
    /// <returns>true</returns>
    public boolean rec_MOA1()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        SKS_EFT_FileDetail tmpSKS_EFT_FileDetail;
        
        recCount++;
        sb.Append('MOA');
        sb.Append(#Separator);
        
        sb.Append('9');
        sb.Append(#Colon);

        select COUNT(InvoiceOrigAmountCur), SUM(InvoiceSettleAmountPmtCur) from tmpSKS_EFT_FileDetail
            where
                tmpSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                tmpSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                tmpSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary &&
                tmpSKS_EFT_FileDetail.BankAccountId == mSKS_EFT_FileDetail.BankAccountId;

        sb.Append(num2str(tmpSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur,0,2,1,0));
        sb.Append(#Colon);

        sb.Append(mSKS_EFT_FileDetail.PaymentCurrencyCode);
        sb.Append(#LineEnd);
        
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_FII1</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_FII1
    /// </summary>
    /// <returns>true</returns>
    public boolean rec_FII1()
    {
        LogisticsPostalAddress  postalAddress;
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        
        recCount++;
        sb.Append('FII');
        sb.Append(#Separator);
        
        sb.Append('BF');
        sb.Append(#Separator);

        if(mSKS_EFT_FileDetail.BankBankIBAN)
        {
            sb.Append(subStr(mSKS_EFT_FileDetail.BankBankIBAN, 1, 35));
        }
        else
        {
            sb.Append(subStr(mSKS_EFT_FileDetail.BankBankAcct, 1, 35));
        }
        sb.Append(#Colon);

        sb.Append(this.CharacterReplacement(subStr(mSKS_EFT_FileDetail.FileACHCompanyName, 1, 35)));
        sb.Append(#Colon);

        postalAddress = this.findPostalAddressLineByPartyLocationRole(CompanyInfo::current(), 'Direct Debit');
        sb.Append(this.getLogisticsAddressCountryISO(postalAddress.CountryRegionId));
        sb.Append(#Colon);

        sb.Append(mSKS_EFT_FileDetail.CurrencyCode);
        sb.Append(#Separator);

        if(mSKS_EFT_FileDetail.BankBankSwiftNo)
        {
            sb.Append(subStr(mSKS_EFT_FileDetail.BankBankSwiftNo, 1, 11));
            sb.Append(#Colon);

            sb.Append('25');
            sb.Append(#Colon);

            sb.Append('5');
            sb.Append(#Colon);
            sb.Append(#Colon);
            sb.Append(#Colon);
            sb.Append(#Separator);
        }
        else if(mSKS_EFT_FileDetail.BankBankSortCode)
        {
            sb.Append(#Colon);            
            sb.Append(#Colon);            
            sb.Append(#Colon);

            sb.Append(subStr(mSKS_EFT_FileDetail.BankBankSortCode, 1, 11));
            sb.Append(#Colon);

            sb.Append('25');
            sb.Append(#Colon);

            sb.Append('119'); 
            sb.Append(#Separator);
        }
        sb.Append(this.getLogisticsAddressCountryISO(postalAddress.CountryRegionId));
        sb.Append(#LineEnd);
        
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_NAD1</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_NAD1
    /// </summary>
    /// <returns>true</returns>
    public boolean rec_NAD1()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        LogisticsPostalAddress  postalAddress;
        
        recCount++;
        sb.Append('NAD');
        sb.Append(#Separator);
        
        sb.Append('BE');
        sb.Append(#Separator);

        sb.Append(#Separator);

        sb.Append(#Separator);

        sb.Append(this.CharacterReplacement(subStr(mSKS_EFT_FileDetail.FileACHCompanyName, 1, 35)));
        sb.Append(#Colon);

        postalAddress = this.findPostalAddressLineByPartyLocationRole(CompanyInfo::current(), 'Direct Debit');

        sb.Append(this.CharacterReplacement(subStr(postalAddress.Street, 1, 35)));
        sb.Append(#Colon);

        sb.Append(this.CharacterReplacement(subStr(postalAddress.City, 1, 35)));
        sb.Append(#LineEnd);
        
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_SEQ</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_SEQ
    /// </summary>
    /// <returns>true</returns>
    public boolean rec_SEQ()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        
        mtransaction++;
        recCount++;

        sb.Append('SEQ');
        sb.Append(#Separator);

        sb.Append(#Separator);

        //  Sequence number
        sb.Append(num2Str(mtransaction, 0, 0, 0, 0));
        sb.Append(#LineEnd);
        
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_MOA2</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_MOA2
    /// </summary>
    /// <returns>true</returns>
    public boolean rec_MOA2()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        
        recCount++;
        sb.Append('MOA');
        sb.Append(#Separator);
        
        sb.Append('9');
        sb.Append(#Colon);

        sb.Append(num2Str(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur, 1, 2, 1, 0));
        sb.Append(#Colon);

        sb.Append(mSKS_EFT_FileDetail.PaymentCurrencyCode);
        sb.Append(#LineEnd);
        
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_DTM140</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_DTM140
    /// </summary>
    /// <returns>true</returns>
    public boolean rec_DTM140()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();

        recCount++;
        sb.Append('DTM');
        sb.Append(#Separator);

        //  Date/Time/Period Qualifier
        sb.Append('140');
        sb.Append(#Colon);

        //  Date/Time/Period
        sb.Append(SKS_PP_StringFormats::strDateYYYYMMDD(mSKS_EFT_FileDetail.EffectiveDate, DateSeparator::None));
        sb.Append(#Colon);

        //  Date/Time/Period Format
        sb.Append('102');
        sb.Append(#LineEnd);
        
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_REF</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_REF
    /// </summary>
    /// <returns>true</returns>
    public boolean rec_REF()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        
        recCount++;
        sb.Append('REF');
        sb.Append(#Separator);

        //  Reference Qualifier        
        sb.Append(#Colon);

        //  Reference Number        
        sb.Append(#LineEnd);
        
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_PAI</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_PAI
    /// </summary>
    /// <returns>true</returns>
    public boolean rec_PAI()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        
        recCount++;
        sb.Append('PAI');
        sb.Append(#Separator);

        sb.Append(#Colon);
        sb.Append(#Colon);

        sb.Append('LV');
        sb.Append(#LineEnd);
        
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_FII2</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_FII2
    /// </summary>
    /// <returns>true</returns>
    public boolean rec_FII2()
    {
        LogisticsPostalAddress  postalAddress;
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        
        recCount++;
        sb.Append('FII');
        sb.Append(#Separator);
        
        sb.Append('Z10');
        sb.Append(#Separator);

        if(mSKS_EFT_FileDetail.DepBankIBAN)
        {
            sb.Append(subStr(mSKS_EFT_FileDetail.DepBankIBAN, 1, 27));
        }
        else
        {
            sb.Append(subStr(mSKS_EFT_FileDetail.DepBankAcct, 1, 22));
        }
        sb.Append(#Colon);

        sb.Append(this.CharacterReplacement(subStr(mSKS_EFT_FileDetail.AccountName, 1, 35)));
        sb.Append(#Colon);

        if(mSKS_EFT_FileDetail.AccountNum && mSKS_EFT_FileDetail.AccountType == LedgerJournalACType::Cust)
        {
            postalAddress = this.findPostalAddressLineByPartyLocationRole(CustTable::findByCompany(mSKS_EFT_FileDetail.AccountCompany, mSKS_EFT_FileDetail.AccountNum).Party, 'Direct Debit');
        }

        sb.Append(this.getLogisticsAddressCountryISO(postalAddress.CountryRegionId));
        sb.Append(#Colon);

        sb.Append(mSKS_EFT_FileDetail.PaymentCurrencyCode);
        sb.Append(#Separator);

        sb.Append(#Colon);
        sb.Append(#Colon);
        if(mSKS_EFT_FileDetail.DepBankTransit)
        {            
            sb.Append(#Colon);

            sb.Append(subStr(mSKS_EFT_FileDetail.DepBankTransit, 1, 17));
            sb.Append(#Colon);

            sb.Append('25');
            sb.Append(#Colon);

            sb.Append('119');          
        }
        else
        {
            sb.Append(#Colon);
            sb.Append(#Colon);
            sb.Append(#Colon);            
        }
        sb.Append(#Separator);
        sb.Append(this.getLogisticsAddressCountryISO(postalAddress.CountryRegionId));
        sb.Append(#LineEnd);
        
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_NAD2</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_NAD2
    /// </summary>
    /// <returns>true</returns>
    public boolean rec_NAD2()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        LogisticsPostalAddress  postalAddress;
        
        recCount++;
        sb.Append('NAD');
        sb.Append(#Separator);
        
        sb.Append('Z10');
        sb.Append(#Separator);

        sb.Append(#Colon);

        sb.Append(#Separator);

        sb.Append(this.CharacterReplacement(subStr(mSKS_EFT_FileDetail.AccountName, 1, 35)));
        sb.Append(#Colon);

        if(mSKS_EFT_FileDetail.AccountNum && mSKS_EFT_FileDetail.AccountType == LedgerJournalACType::Cust)
        {
            postalAddress = this.findPostalAddressLineByPartyLocationRole(CustTable::findByCompany(mSKS_EFT_FileDetail.AccountCompany, mSKS_EFT_FileDetail.AccountNum).Party, 'Direct Debit');
        }

        sb.Append(this.CharacterReplacement(subStr(postalAddress.Street, 1, 35)));
        sb.Append(#Colon);

        sb.Append(this.CharacterReplacement(subStr(postalAddress.ZipCode, 1, 35)));
        sb.Append(#Colon);

        sb.Append(this.CharacterReplacement(subStr(strLRTrim(postalAddress.City + ' ' + postalAddress.State), 1, 35)));
        sb.Append(#LineEnd);
        
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_PRC</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_PRC
    /// </summary>
    /// <returns>true</returns>
    public boolean rec_PRC()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        
        recCount++;
        sb.Append('PRC');
        sb.Append(#Separator);

        sb.Append('11');
        sb.Append(#LineEnd);
        
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_FTX</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_FTX
    /// </summary>
    /// <returns>true</returns>
    public boolean rec_FTX()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        
        recCount++;
        sb.Append('FTX');
        sb.Append(#Separator);

        sb.Append('PMD');
        sb.Append(#Separator);
        sb.Append(#Separator);
        sb.Append(#Separator);

        msks_EFT_FileDetail_PaymentLine = SKS_EFT_FileDetail_PaymentLine::find(mSKS_EFT_FileDetail.RecId);

        sb.Append(this.CharacterReplacement(subStr(msks_EFT_FileDetail_PaymentLine.TransactionTxt, 1, 40)));

        sb.Append(#LineEnd);
        
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_GIS</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_GIS
    /// </summary>
    /// <returns>true</returns>
    public boolean rec_GIS()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        
        recCount++;
        sb.Append('GIS');
        sb.Append(#Separator);

        sb.Append('37');
        sb.Append(#LineEnd);
        
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_CNT</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_CNT
    /// </summary>
    /// <returns>true</returns>
    public boolean rec_CNT()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        
        recCount++;
        sb.Append('CNT');
        sb.Append(#Separator);

        sb.Append('27');
        sb.Append(#Colon);

        sb.Append(num2Str(mtransaction, 0,0,0,0));

        sb.Append(#LineEnd);
        
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_UNT</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_UNT
    /// </summary>
    /// <returns>true</returns>
    public boolean rec_UNT()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        
        recCount++;
        sb.Append('UNT');
        sb.Append(#Separator);

        sb.Append(num2Str(recCount, 0,0,0,0));
        sb.Append(#Separator);

        sb.Append('1');
        sb.Append(#LineEnd);
        
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_UNZ</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_UNZ
    /// </summary>
    /// <returns>true</returns>
    public boolean rec_UNZ()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        
        
        sb.Append('UNZ');
        sb.Append(#Separator);

        sb.Append('1');
        sb.Append(#Separator);

        sb.Append('IDDITALY');
        sb.Append(#LineEnd);
        
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPostalAddressLineByPartyLocationRole</Name>
				<Source><![CDATA[
    /// <summary>
    /// LogisticsPostalAddress
    /// </summary>
    /// <param name = "_party">_party</param>
    /// <param name = "_roleName">_roleName</param>
    /// <returns>true</returns>
    protected LogisticsPostalAddress findPostalAddressLineByPartyLocationRole(
        DirPartyRecId   _party,
        LogisticsLocationRoleName   _roleName)
    {
        DirPartyLocation        partyLocation;
        LogisticsLocation       logisticsLocation;
        LogisticsPostalAddress  postalAddress;
    
        while select partyLocation
            where partyLocation.Party == _party
        {
            if(strScan(partyLocation.locationRoleNames(),_roleName,1,strLen(partyLocation.locationRoleNames())))
            {
                logisticsLocation = logisticsLocation::find(partyLocation.Location);
                if(logisticsLocation.IsPostalAddress)
                {
                    postalAddress = LogisticsPostalAddress::findByLocation(logisticsLocation.RecId);
                    break;
                }
            }
        }
    
        return postalAddress;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>