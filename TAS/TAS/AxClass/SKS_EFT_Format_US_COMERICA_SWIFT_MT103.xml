<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_US_COMERICA_SWIFT_MT103</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_US_COMERICA_SWIFT_MT103 extends SKS_EFT_Format
/// </summary>
class SKS_EFT_Format_US_COMERICA_SWIFT_MT103 extends SKS_EFT_Format
{
    #define.FormatVersion('20220701')
    #define.DDA('DDA')
    #define.ACH_CR('ACH-CR')
    #define.ACH_DR('ACH-DR')
    int mTransaction;

    SKS_EFT_FileDetail tmpSKS_EFT_FileDetail;
    System.Text.StringBuilder sb = new System.Text.StringBuilder();

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    protected void formatStructure()
    {
        //Batch Header
        this.rec_BatchHeader();        //SKS#DevOps:17642

        while(mSKS_EFT_FileDetail)
        {
            // Get SKS_EFT_FileFormatPaymSpec
            this.getSKS_EFT_FileFormatPaymSpec();

            mSKS_EFT_FileDetail_BankAccount = SKS_EFT_FileDetail_BankAccount::find(mSKS_EFT_FileDetail.RecId);
           
            this.rec_BasicHeaderBlock();

            this.rec_ApplicationHeaderBlock();

            this.rec_UserHeaderBlock();
    
            this.rec_TextBlock();

            this.rec_TrailerBlock();

            sb.Clear();
    
            next mSKS_EFT_FileDetail;
        } 
        //Batch Trailer
        this.rec_BatchTrailer();        //SKS#DevOps:17642
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_BatchHeader</Name>
				<Source><![CDATA[
    private void rec_BatchHeader()
    {
        System.Text.StringBuilder msb1 = new System.Text.StringBuilder();

        //BATCHHEADER
        msb1.Append('<BATCHHEADER>');
    
        //Application ID
        msb1.Append(SKS_PP_StringFormats::strRight(mSKS_EFT_File.FileNbr,16));

        //BATCHHEADER
        msb1.Append('</BATCHHEADER>');

        this.fileWrite(msb1.ToString());
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_BatchTrailer</Name>
				<Source><![CDATA[
    private void rec_BatchTrailer()
    {
        System.Text.StringBuilder msb2 = new System.Text.StringBuilder();

        //BATCHHEADER
        msb2.Append('<BATCHTRAILER>');
    
        //Application ID
        msb2.Append(num2Str(mTransaction, 0, 0, 0, 0));

        //BATCHHEADER
        msb2.Append('</BATCHTRAILER>');

        this.fileWrite(msb2.ToString());
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_BasicHeaderBlock</Name>
				<Source><![CDATA[
    private void rec_BasicHeaderBlock()
    {
        //Block Id
        sb.Append('{1:');
    
        //Application ID
        sb.Append('F');

        //Service ID
        sb.Append('01');

        //Service Identifier
        sb.Append(subStr(mSKS_EFT_FileDetail.BankBankSwiftNo, 1, 12));

        //Service number
        sb.Append('0001');

        //Sequence number 
        sb.Append(SKS_PP_StringFormats::strFill(6, SKS_EFT_Format::getCodelookupvalue('NextSequenceNumber', mSKS_EFT_FileDetail.RecId), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));        

        //Block Terminato
        sb.Append('}');
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_ApplicationHeaderBlock</Name>
				<Source><![CDATA[
    /// <summary>
    ///rec_ApplicationHeaderBlock
    /// </summary>
    private void rec_ApplicationHeaderBlock()
    {
        //Block Id
        sb.Append('{2:');
    
        //I_O_TYPE
        sb.Append('I');

        //MESSAGE_TYPE
        sb.Append('103');

        //RECEIVER_ADDRESS
        sb.Append(subStr(mSKS_EFT_FileDetail.BankBankSwiftNo, 1, 12));      //SKS#DevOps:16268

        //MESSAGE _PRIORITY
        sb.Append('N');

        //Delivery Monitoring
        sb.Append('2');     //SKS#DevOps:16268

        //Obsolescence Period
        sb.Append('000');

        //Block Terminator
        sb.Append('}');
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_UserHeaderBlock</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_UserHeaderBlock
    /// </summary>
    private void rec_UserHeaderBlock()
    {
        str value;

        //Block Id
        sb.Append('{3:');
    
        //User Reference
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #DDA:
                value = 'ACCOUNT TRANSFER';
                break;
            case #ACH_CR:
                value = 'ACH';
                break;
            case #ACH_DR:
                value = 'ACH DEBIT';
                break;
        }
        sb.Append('{108:'+ value + '}}');

        //Block Identifier
        sb.Append('{4:');

        this.fileWrite(sb.ToString());
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Beneficiary</Name>
				<Source><![CDATA[
    private void rec_Beneficiary()
    {
        //------------------------------------------------------------------
        //  :59:Beneficiary Account
        //  Beneficiary Name/Address
        //------------------------------------------------------------------
        int len, namelength;

        //  :59:Beneficiary Account
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #ACH_CR:
            case #ACH_DR:
                len = 17;
                namelength = 22;
                break;
            default:
                len = 34;
                namelength = 35;
                break;
        }
        this.fileWrite(':59:/' + subStr(mSKS_EFT_FileDetail.DepBankAcct, 1, len));
    
        //  Beneficiary Name
        if(mSKS_EFT_FileDetail_VendAddress.BeneName != '')
        {
            this.fileWrite(subStr(this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneName), 1, namelength));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_TextBlock</Name>
				<Source><![CDATA[
    private void rec_TextBlock()
    {
        str amount;
        str value;
    
        //  :20:Sender's reference Number        
        this.fileWrite(':20:' + subStr(mSKS_EFT_FileDetail.PaymentReference, 1, 16));
        
        // :23B:CRED Bank Operation Code
        this.fileWrite(':23B:CRED');

        //  :32A:Value Date/Msg Date/Currency/Amount
        amount = num2str(-1 * mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur, 0, 2, 2, 0);
    
        this.fileWrite(':32A:' + SKS_PP_StringFormats::strDateYYMMDD(mSKS_EFT_FileDetail.EffectiveDate)
                               + mSKS_EFT_FileDetail.PaymentCurrencyCode
                               + amount);

        this.rec_OrderingCustomer();

        //  :53B:Debit Account Identifier
        this.fileWrite(':53B:/' + subStr(mSKS_EFT_FileDetail.BankBankAcct, 1, 34));
        
        // :57D: Account With Institution â€“ BIC or sort code
        this.fileWrite(':57D://FW' + subStr(mSKS_EFT_FileDetail.DepBankTransit, 1, 34));
        this.fileWrite(subStr(this.CharacterReplacement(mSKS_EFT_FileDetail_BenBank.BenBankName), 1, 34));
    
        //  :59:Beneficiary Account/ Beneficiary Name / Address
        this.rec_Beneficiary();
    
        //  :71A:Details of Charges
        value = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('Charges', mSKS_EFT_FileDetail.RecId));

        if(value)
        {
            this.fileWrite(':71A:' + value);
        }

        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #ACH_CR ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #ACH_DR)
        {
            this.fileWrite(':77T:/STANDARDENTRYCLASS/CCD');

            this.fileWrite('/COMPANYENTRYDESC/' + this.CharacterReplacement(mSKS_EFT_FileDetail.FileACHCompanyName));

            if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #ACH_CR)
            {
                this.fileWrite('/TRANSACTIONCODE/22');
            }
            else
            {
                this.fileWrite('/TRANSACTIONCODE/27');
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_OrderingCustomer</Name>
				<Source><![CDATA[
    private void rec_OrderingCustomer()
    {
        //------------------------------------------------------------------
        //  :50:Ordering Customer
        //  Ordering Customer Name/Address
        //------------------------------------------------------------------

        //  :50:Ordering Customer
        this.fileWrite(':50K:' + subStr(mSKS_EFT_FileDetail_BankAccount.WOrdPartyName, 1, 35));

        //  Ordering Customer Name/Address
        if(mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr != '' || mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr2 != '')
        {
            this.fileWrite(this.CharacterReplacement(subStr(strLRTrim(mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr + ' ' + mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr2), 1, 35)));
        }

        if(mSKS_EFT_FileDetail_BankAccount.WOrdPartyCity != '' || mSKS_EFT_FileDetail_BankAccount.WOrdPartyZipCode != '')
        {
            this.fileWrite(this.CharacterReplacement(subStr(strLRTrim(mSKS_EFT_FileDetail_BankAccount.WOrdPartyCity + ' ' + mSKS_EFT_FileDetail_BankAccount.WOrdPartyZipCode), 1, 35)));
        }

        if(mSKS_EFT_FileDetail_BankAccount.WOrdPartyState != '' || mSKS_EFT_FileDetail_BankAccount.WOrdPartyCountryRegionId != '')
        {
            this.fileWrite(this.CharacterReplacement(subStr(strLRTrim(mSKS_EFT_FileDetail_BankAccount.WOrdPartyState + ' ' + this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_BankAccount.WOrdPartyCountryRegionId)), 1, 35)));
        }
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_TrailerBlock</Name>
				<Source><![CDATA[
    private void rec_TrailerBlock()
    {
        System.Text.StringBuilder msb = new System.Text.StringBuilder();
    
        //  Text  Block Terminator
        msb.Append('-}');

        //Block Identifier
        msb.Append('{5:');
    
        //Authentication Code
        msb.Append('{}');

        //Block Terminat
        msb.Append('}');

        this.fileWrite(msb.ToString());
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectPaymentRecords</Name>
				<Source><![CDATA[
    [SuppressBPWarning('BPErrorSelectUsingFirstOnly', 'The buffer is used in next statement or in a datasource query loop.')]
    protected void selectPaymentRecords()
    {
        //------------------------------------------------------------------------------------------------------
        // Standard payment selction
        // Override if different selection is need for a format
        //------------------------------------------------------------------------------------------------------
    
        //Order by clause must match the clause in the SKS_EFT_Processing.SumByPayment
        select * from mSKS_EFT_FileDetail
            join mSKS_EFT_FileDetail_VendAddress
            join mSKS_EFT_FileDetail_BenBank
              order by mSKS_EFT_FileDetail.RecordSection,
                   mSKS_EFT_FileDetail.PaymMode,
                   mSKS_EFT_FileDetail.BankAccountId,
                   mSKS_EFT_FileDetail.PaymentCurrencyCode,
                   mSKS_EFT_FileDetail.PaymSpec,
                   mSKS_EFT_FileDetail.EffectiveDate,
                   mSKS_EFT_FileDetail.DepCountryRegionId,
                   mSKS_EFT_FileDetail.RecordType,
                   mSKS_EFT_FileDetail.AccountNum,
                   mSKS_EFT_FileDetail.PaymentReference,
                   mSKS_EFT_FileDetail.RecId
          where mSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                mSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                mSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary&&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_VendAddress.RefRecId &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_BenBank.RefRecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>