<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_Table_DirPartyLocation</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_Table_DirPartyLocation
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>EH_Delete_Pre</Name>
				<Source><![CDATA[
    [PreHandlerFor(tableStr(DirPartyLocation), tableMethodStr(DirPartyLocation, delete))]
    public static void EH_Delete_Pre(XppPrePostArgs _args)
    {
        DirPartyLocation locDirPartyLocation;
        ;
    
        locDirPartyLocation = _args.getThis();
    
        if(locDirPartyLocation.IsPrimary)
            SKS_Table_DirPartyLocation::UpdateCustomerInfoEPay(locDirPartyLocation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>EH_Insert_Post</Name>
				<Source><![CDATA[
    [PostHandlerFor(tableStr(DirPartyLocation), tableMethodStr(DirPartyLocation, insert))]
    public static void EH_Insert_Post(XppPrePostArgs _args)
    {
        DirPartyLocation locDirPartyLocation;
        ;
    
        locDirPartyLocation = _args.getThis();
        if(locDirPartyLocation.IsPrimary == NoYes::Yes)
            SKS_Table_DirPartyLocation::UpdateCustomerInfoEPay(locDirPartyLocation);
    
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>EH_Update_Pre</Name>
				<Source><![CDATA[
    [PreHandlerFor(tableStr(DirPartyLocation), tableMethodStr(DirPartyLocation, update))]
    public static void EH_Update_Pre(XppPrePostArgs _args)
    {
        DirPartyLocation locDirPartyLocation, locOrigDirPartyLocation;
        ;
    
        locDirPartyLocation = _args.getThis();
        locOrigDirPartyLocation = locDirPartyLocation.orig();
    
    
        if((locDirPartyLocation.IsPrimary != locOrigDirPartyLocation.IsPrimary)
            || (locDirPartyLocation.IsPrimary && (locDirPartyLocation.Location != locOrigDirPartyLocation.Location)))
            SKS_Table_DirPartyLocation::UpdateCustomerInfoEPay(locDirPartyLocation);
    
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>UpdateCustomerInfoEPay</Name>
				<Source><![CDATA[
    private static void UpdateCustomerInfoEPay(DirPartyLocation _DirPartyLocation)
    {
        CustTable locCustTable;
        DirPartyContactInfoView locDirPartyContactInfoView;
        LogisticsLocation locLogisticsLocation;
        ;
    
        while select crossCompany locCustTable
                        join RecId from locDirPartyContactInfoView
                            where locCustTable.Party == locDirPartyContactInfoView.Party
                            && locDirPartyContactInfoView.PartyLocation == _DirPartyLocation.RecId
                            && locDirPartyContactInfoView.Type == LogisticsElectronicAddressMethodType::Email
        {
             //If not ePay Customer, do nothing.
            if(SKS_Table_CustTable::isEpayCustomer(locCustTable))
            {
                changeCompany(locCustTable.company())
                {
                    SKS_Table_CustTable::QueueCustomer(locCustTable,
                                                    SKS_EPY_ChangeType::Updated,
                                                    SKS_EPY_Table::DirPartyLocation,
                                                    _DirPartyLocation.Recid);
                }
            }
        }
        // 1.  we know from the fact we are in this method, this is PRIMARY
        // 2. Check and see if this LOCATION is a postal address.  There can be only one PRIMAY postal address.
        // 3. find any customer who is using this DIRPARTYLOCATION
        // 4. check and see if they are an ePay Customer.
        // 5.  If they are an ePay custoemr, Queue up their data
    
        select firstonly isPostalAddress from locLogisticsLocation where locLogisticsLocation.recid == _DirPartyLocation.Location;
        if(locLogisticsLocation.isPostalAddress)
        {
            While select crossCompany locCustTable
                    where locCustTable.Party == _DirPartyLocation.PARTY
            {
                //If not ePay Customer, do nothing.
                if(SKS_Table_CustTable::isEpayCustomer(locCustTable))
                {
                    changeCompany(locCustTable.company())
                    {
                        SKS_Table_CustTable::QueueCustomer(locCustTable,
                                                            SKS_EPY_ChangeType::Updated,
                                                            SKS_EPY_Table::DirPartyLocation,
                                                            _DirPartyLocation.Recid);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>