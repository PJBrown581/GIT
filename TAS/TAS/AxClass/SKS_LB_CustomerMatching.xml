<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_LB_CustomerMatching</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class for lockbox customer matching
/// </summary>
class SKS_LB_CustomerMatching
{
    CustAccount         Accountnum;
    CompanyId           CustomerCompany;
    SKS_LB_CustIDErr    CustomerError;
    CustName            CustomerName;
    container           m_VirtualCompanyCompanies;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>CustBankAcctRTNMatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds customer by bank acount and routing number
    /// </summary>
    /// <param name = "_CustBankAccountNum">bank account number</param>
    /// <param name = "_CustBankRegNum">routing number</param>
    /// <param name = "virtualCompanyCompanies">companies to search in</param>
    public void CustBankAcctRTNMatch(SKS_EB_CustBankAccountNum _CustBankAccountNum, SKS_EB_CustomerBankRegNum _CustBankRegNum, container virtualCompanyCompanies)
    {
        CustBankAccount custBankAccount;
        ;
    
        select count(recid), AccountNum, DataAreaId from custBankAccount where
            custBankAccount.RegistrationNum == _CustBankRegNum &&
            custBankAccount.AccountNum == _CustBankAccountNum;
        // if not found for this company, check cross company
        if(custBankAccount.recid == 0)
        {
            select crosscompany:virtualCompanycompanies count(recid), AccountNum, DataAreaId from custBankAccount where
            custBankAccount.RegistrationNum == _CustBankRegNum &&
            custBankAccount.AccountNum == _CustBankAccountNum;
        }
        // Duplicates found.  Don't match
        if(custBankAccount.recid > 1)
        {
            CustomerError = SKS_LB_CustIDErr::DuplicateRtnAcct;
        }
        // Match found
        else if(custBankAccount.recid == 1)
        {
    
            select firstonly crossCompany:virtualCompanycompanies CustAccount, AccountNum, DataAreaId from custBankAccount where
                custBankAccount.RegistrationNum == _CustBankRegNum &&
                custBankAccount.AccountNum == _CustBankAccountNum;
    
            Accountnum = custBankAccount.CustAccount;
            customerCompany = custBankAccount.dataAreaId;
            CustomerError = SKS_LB_CustIDErr::BankTransLookUp;
        }
        else
        {
            CustomerError = SKS_LB_CustIDErr::NotFound;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>CustIBANMatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the customer by IBAN
    /// </summary>
    /// <param name = "_CustBankAccountNum">IBAN number</param>
    /// <param name = "virtualCompanyCompanies">companies to search in</param>
    public void CustIBANMatch(SKS_EB_CustBankAccountNum _CustBankAccountNum, container virtualCompanyCompanies)
    {
        CustBankAccount custBankAccount;
        ;
    
        select count(recid), minOf(CustAccount), AccountNum, DataAreaId from custBankAccount where
            custBankAccount.BankIBAN == _CustBankAccountNum;
        // if not found for this company, check cross company
        if(custBankAccount.recid == 0)
        {
            select crosscompany:virtualCompanycompanies count(recid), minOf(CustAccount), AccountNum, DataAreaId from custBankAccount where
            custBankAccount.BankIBAN == _CustBankAccountNum;
        }
        // Duplicates found.  Don't match
        if(custBankAccount.recid > 1)
        {
            CustomerError = SKS_LB_CustIDErr::DuplicateRtnAcct;
        }
        // Match found
        else if(custBankAccount.recid == 1)
        {
    
            Accountnum = custBankAccount.CustAccount;
            customerCompany = custBankAccount.dataAreaId;
            CustomerError = SKS_LB_CustIDErr::BankTransLookUp;
        }
        else
        {
            CustomerError = SKS_LB_CustIDErr::NotFound;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>CustIDMatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// SIGNATURE IS LOCKED BY CUSTOMIZATIONS
    /// </summary>
    /// <param name = "_CustId"> customer account number used for search</param>
    public void CustIDMatch(CustAccount _CustId)
    {
        CustTable   TmpCustTable;
    
        Select firstonly TmpCustTable where TmpCustTable.AccountNum == _CustId;
        if (TmpCustTable.AccountNum == '' )
        {
            if(m_VirtualCompanyCompanies == conNull())
            {
                throw error("@SKS:SKGLBCustomerIDContainerError");
            }
            // if not found for this company, check cross company
            Select firstonly crosscompany:m_virtualCompanycompanies * from TmpCustTable where TmpCustTable.AccountNum == _CustId;
            if(!TmpCustTable)
            {
                CustomerError = SKS_LB_CustIDErr::NotFound;
            }
            else
            {
                Accountnum = TmpCustTable.AccountNum;
                customerCompany = tmpCustTable.company();
            }
        }
        else
        {
            Accountnum = TmpCustTable.AccountNum;
            customerCompany = tmpCustTable.company();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>CustNameMatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// SIGNATURE IS LOCKED BY CUSTOMIZATIONS
    /// </summary>
    /// <param name = "CustName">name of customer being used in search</param>
    public void CustNameMatch(CustName CustName)
    {
        CustTable           TmpCustTable;
        DirPartyTable       dirPartyTable;
        SKS_LB_Depositor    Depositor;
    
        if(m_VirtualCompanyCompanies == conNull())
        {
            throw error("@SKS:SKGLBCustomerNameContainerError");
        }

        // check if name is perfect match
        Select firstonly TmpCustTable
            join dirPartyTable
            where   TmpCustTable.Party == dirPartyTable.RecId
                &&  dirPartyTable.Name == CustName;
        
        if(TmpCustTable)
        {
            // populate customer details
            Accountnum = TmpCustTable.AccountNum;
            customerCompany = tmpCustTable.company();
            CustomerError = SKS_LB_CustIDErr::NameLookup;
            CustomerName = TmpCustTable.name();    
        }
        else
        {
            // check alternate name
            select count (RecId) from depositor where depositor.AltCustName == CustName;
    
            if(Depositor.RecId > 1)
            {
                CustomerError = SKS_LB_CustIDErr::DupCustMatch;
                CustomerName = CustName;
            }
            else if(Depositor.RecId == 1)
            {
                select firstonly Accountnum from depositor where depositor.AltCustName == CustName;
                Accountnum = depositor.AccountNum;
                customerCompany = depositor.company();
                CustomerError = SKS_LB_CustIDErr::NameLookup;
                CustomerName = CustName;
            }
            else
            {
                // check if part of name matches
                Select count (RecId) from TmpCustTable join dirPartyTable
                    WHERE  TmpCustTable.Party == dirPartyTable.RecId &&
                        dirPartyTable.Name like '*' + CustName +  '*';
                if(TmpCustTable.RecId > 1)
                {
                    CustomerError = SKS_LB_CustIDErr::DupCustMatch;
                    CustomerName = CustName;
                }
                // <15226>
                else if(TmpCustTable.RecId == 0)
                {
                    CustomerError = SKS_LB_CustIDErr::NotFound;
                    CustomerName = CustName;
                }
                // </15226>
                else
                {   
                    // record found
                    Select firstonly TmpCustTable 
                        join dirPartyTable
                        where   TmpCustTable.Party == dirPartyTable.RecId 
                            &&  dirPartyTable.Name like '*' + CustName +  '*';
                    Accountnum = TmpCustTable.AccountNum;
                    customerCompany = tmpCustTable.company();
                    CustomerError = SKS_LB_CustIDErr::NameLookup;
                    CustomerName = TmpCustTable.name();
                }
            }

            // if not found for current company, check cross company
            if (TmpCustTable.AccountNum == '' && Accountnum == '')
            {
                Select crosscompany:m_virtualCompanycompanies count (RecId) from TmpCustTable join dirPartyTable
                    WHERE  TmpCustTable.Party == dirPartyTable.RecId &&
                    dirPartyTable.Name like '*' + CustName +  '*';
                if(TmpCustTable.RecId > 1)
                {
                    CustomerError = SKS_LB_CustIDErr::DupCustMatch;
                    CustomerName = CustName;
                }                    
                else
                {
                    Select firstonly crosscompany:m_virtualCompanycompanies TmpCustTable join dirPartyTable
                        WHERE  TmpCustTable.Party == dirPartyTable.RecId &&
                        dirPartyTable.Name like '*' + CustName +  '*';
                }
                //-- If we found the CustID then Set Err to 'N'ame
                if (TmpCustTable.AccountNum != '' )
                {
                    Accountnum = TmpCustTable.AccountNum;
                    customerCompany = tmpCustTable.company();
                    CustomerError = SKS_LB_CustIDErr::NameLookup;
                    CustomerName = TmpCustTable.name();     // </15226>
                }
            }   // if (TmpCustTable.AccountNum == '' )

        }   //if(TmpCustTable)
    }

]]></Source>
			</Method>
			<Method>
				<Name>CustSwiftAcctMatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Customer search by sift number
    /// </summary>
    /// <param name = "_CustBankAccountNum">bank account number</param>
    /// <param name = "_CustBankRegNum">routing number</param>
    /// <param name = "virtualCompanyCompanies">companies ot search in</param>
    public void CustSwiftAcctMatch(SKS_EB_CustBankAccountNum _CustBankAccountNum, SKS_EB_CustomerBankRegNum _CustBankRegNum, container virtualCompanyCompanies)
    {
        CustBankAccount custBankAccount;
        ;
    
        select count(recid), SWIFTNo, AccountNum, DataAreaId from custBankAccount where
            custBankAccount.SWIFTNo == _CustBankRegNum &&
            custBankAccount.AccountNum == _CustBankAccountNum;
        // if not found for this company, check cross company
        if(custBankAccount.recid == 0)
        {
            select crosscompany:virtualCompanycompanies count(recid), SWIFTNo, minOf(CustAccount), AccountNum, DataAreaId from custBankAccount where
            custBankAccount.SWIFTNo == _CustBankRegNum &&
            custBankAccount.AccountNum == _CustBankAccountNum;
        }
        // Duplicates found.  Don't match
        if(custBankAccount.recid > 1)
        {
            CustomerError = SKS_LB_CustIDErr::DuplicateRtnAcct;
        }
        // Match found
        else if(custBankAccount.recid == 1)
        {
    
            select crossCompany:virtualCompanycompanies minOf(CustAccount), SWIFTNo, AccountNum, DataAreaId from custBankAccount where
                custBankAccount.SWIFTNo == _CustBankRegNum &&
                custBankAccount.AccountNum == _CustBankAccountNum;
    
            Accountnum = custBankAccount.CustAccount;
            customerCompany = custBankAccount.dataAreaId;
            CustomerError = SKS_LB_CustIDErr::BankTransLookUp;
        }
        else
        {
            CustomerError = SKS_LB_CustIDErr::NotFound;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>FindNameByCustIDSugg</Name>
				<Source><![CDATA[
    /// <summary>
    /// find customer name by suggested id
    /// </summary>
    /// <param name = "_custIDSugg">suggested id</param>
    /// <param name = "_CustName">customer name</param>
    /// <param name = "_CustCompany">customer company</param>
    /// <returns>customer name</returns>
    public CustName FindNameByCustIDSugg(CustAccount _custIDSugg, CustName _CustName, SelectableDataArea _CustCompany)
    {
        CustTable       TmpCustTable;
        DirPartyTable   dirPartyTable;
        container       virtualCrossCompanies;
        ;
    
        if(_custIDSugg != '' && _CustCompany != '')
        {
            virtualCrossCompanies = [_CustCompany];
    
            Select firstonly crossCompany:virtualCrossCompanies Party, AccountNum from TmpCustTable join Name, RecId from dirPartyTable
                WHERE  TmpCustTable.Party == dirPartyTable.RecId &&
                        TmpCustTable.AccountNum == _custIDSugg;
    
            return dirPartyTable.Name;
        }
        else
        {
            return _CustName;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ParmAccountNum</Name>
				<Source><![CDATA[
    public CustAccount ParmAccountNum()
    {
        return accountnum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ParmCompanyId</Name>
				<Source><![CDATA[
    public CompanyId ParmCompanyId()
    {
        return CustomerCompany;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ParmCustomerError</Name>
				<Source><![CDATA[
    public SKS_LB_CustIDErr ParmCustomerError()
    {
        return CustomerError;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ParmCustomerName</Name>
				<Source><![CDATA[
    public CustName ParmCustomerName()
    {
        return CustomerName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetSetCrossCompanyContainer</Name>
				<Source><![CDATA[
    public container GetSetCrossCompanyContainer(container _CompanyContainer = m_VirtualCompanyCompanies)
    {
        if (!prmIsDefault(_CompanyContainer))
        {
            m_VirtualCompanyCompanies = _CompanyContainer;
        }
        return m_VirtualCompanyCompanies;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>