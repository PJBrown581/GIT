<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EB_BankFabric</Name>
	<SourceCode>
		<Declaration><![CDATA[
//using SKG_BF.Models;
using  Microsoft.Dynamics.ApplicationPlatform.Environment;

class SKS_EB_BankFabric
{
    public SKG_BF.Client.Sender bfSender;  
    str fileName;
    SKG_BF.Models.ERPResponseContract  response;
    str DNS;
    List dataList = new List(Types::String);
    SKS_PP_Setup gSKS_PP_Setup;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getAPIPCardStatus</Name>
				<Source><![CDATA[
    public SKG_BF.Models.PCardResponse getAPIPCardStatus(SKG_BF.Models.PCardRequest _pCardStatusRequest)
    {
        SKS_EB_FileStorage  sksFilestorage;
        select firstonly sksFilestorage;
        
        _pCardStatusRequest.DNS = bfSender.DNS;
        SKG_BF.Models.ClientCreds bfClient = bfSender.Credentials;
        bfClient.URL = SKS_BF_Connection::GetBankFabricURL(sksFilestorage.BankFabricURL, SKS_BF_AzureOperation::PCardInbound);

        bfSender.PCardRequest = _pCardStatusRequest;

        bfSender.PCardCreate();

        return bfSender.PCardResponse;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static SKS_EB_BankFabric construct()
    {
        return new SKS_EB_BankFabric(SKS_EB_BankFabric::createHeaderFromDB()); // GTutt  Gets settings
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(SKG_BF.Client.Sender _bfSender )
    {
        bfSender = _bfSender;
        select firstonly gSKS_PP_Setup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runProgram</Name>
				<Source><![CDATA[
    public boolean runProgram(SKS_EB_CommProcess _CommProcess, str _filelocation, str _fileName, boolean _reloc = false)
    {
        boolean hasErrors;
        SKS_BF_BankIntType sksBankIntType;

        sksBankIntType = SKS_EB_Batch::GetIntegrationType(_CommProcess);

        if (sksBankIntType == SKS_BF_BankIntType::BankFabric)
        {
            IApplicationEnvironment config = EnvironmentFactory::GetApplicationEnvironment();
            SKG_BF.Models.CommunicateFileContract contract = new SKG_BF.Models.CommunicateFileContract();

            SKS_EB_FileStorage  sksFileStorage;
            select firstonly sksFileStorage;
             
            // Determine inbound/outbound, SFTP/WEB etc. remote dir, encrypt,
            contract.BankFabricCommunicationName = _CommProcess.BankFabricCommunicationName;  // temp solution //tbl.CommunicationName_Send;

            //Parameter
            contract.SecretName = sksFileStorage.BankFabricSecretName;
            contract.BankFabricFileLocaton = _filelocation;
            contract.FileName = _fileName;

            //Set with constructor for security purposes
            contract.DNS = SKS_EB_FileHub::getDNS(SKS_BF_BankIntType::BankFabric);

            //Stored in DB
            contract.RuntimeUrl = SKS_BF_Connection::GetBankFabricURL(sksFilestorage.BankFabricURL,SKS_BF_AzureOperation::Communication); //.CommRuntimeURL;  Todo discuss if this can be different operations
            contract.TASVersion = gSKS_PP_Setup.RegVersion;
            contract.ERPLogInfo = strFmt("@SKS:SKGCommId",_CommProcess.CommID);

            bfSender.CommContract = contract;

            bfSender.Transmit();
            SKS_BF_Connection::P66682fb1b1e479ca2532ca62e10c079(bfSender.ResponseContract);
            if (bfSender.ResponseContract.Status == enum2int(SKS_BF_ResponseStatus::CommunicationComplete))
            {
                hasErrors = false;
            }
            else
            {
                hasErrors = true;
            }
 //           boolean hasErrors = bfSender.ResponseContract.Status != 7;
            return hasErrors;
        }
        else
        {
            return true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createHeaderFromDB</Name>
				<Source><![CDATA[
    static SKG_BF.Client.Sender createHeaderFromDB()
    {

        SKS_EB_FileStorage  sksFileStorage;
        //BankFabricTesting bankFabricSetupTable;
        select firstonly sksFileStorage;

        SKG_BF.Client.Sender bfSender = new SKG_BF.Client.Sender();

        SKG_BF.Models.ClientCreds bfClient = new SKG_BF.Models.ClientCreds();

        bfClient.Tenant = sksFileStorage.BankFabricTenant;
        bfClient.Subscription = sksFileStorage.BankFabricSubscription;
        bfClient.ClientId = sksFileStorage.BankFabricClientID;
        bfClient.Secret = sksFileStorage.parmBankFabricClientIDS(false, '');
        bfClient.Scope = sksFileStorage.BankFabricScope;
        bfClient.URL = SKS_BF_Connection::GetBankFabricURL(sksFilestorage.BankFabricURL,SKS_BF_AzureOperation::GetFile); //.Files_RuntimeUrl_Get; Todo: discuss for operations type

        bfSender.Credentials = bfClient;
        /*
        ttsbegin;       //Todo discuss with Gary
        select forupdate firstonly sksFileStorage;
        sksFileStorage.BankFabricDNSName = config.Infrastructure.FullyQualifiedDomainName;
        sksFileStorage.update();
        ttscommit;
        */

        bfSender.DNS = SKS_EB_FileHub::getDNS(SKS_BF_BankIntType::BankFabric);

        return bfSender;

    }

]]></Source>
			</Method>
			<Method>
				<Name>errorHasException</Name>
				<Source><![CDATA[
    public boolean errorHasException()
    {
        return bfSender.ResponseContract.FailureReason != null && bfSender.ResponseContract.FailureReason != '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>errorException</Name>
				<Source><![CDATA[
    public str errorException()
    {
        if (bfSender.ResponseContract.FailureReason == null || bfSender.ResponseContract.FailureReason == '')
            return '';

        return "@SKS:SKGBFError" + bfSender.ResponseContract.FailureReason;
    }

]]></Source>
			</Method>
			<Method>
				<Name>CreateFile</Name>
				<Source><![CDATA[
    public container CreateFile(List _dataList
        , boolean _crlf
        , int _encoding
        , boolean _removeBOM
        , str _fileName
        , str _communicationName
        , str _fileLocation
        , str _fileNbr
        , str _company
        , str _fileNameName
        , str _paymentFileData = ''
        , str _paymentFormatGroup = ''
        , str _paymentFormatGroupVersion = ''
        , str _paymentDataContractVersion = '')
    {
        container   conBFResponse;

        SKG_BF.Models.FileContract contract = new SKG_BF.Models.FileContract();
        SKG_BF.Models.FileNameAttributesContract filenamesattributes;
        
        SKS_EB_FileStorage  sksFilestorage;
        SKS_EFTAP_File      sksEFTAPFile;
 
        select firstonly sksFilestorage;

        contract.SecretName = sksFilestorage.BankFabricSecretName;
        contract.BankFabricFileLocation = _fileLocation;
        contract.BankFabricFileNameName = _fileNameName;
        contract.BOMRemove = _removeBOM;
        //contract.Company = "USMF";
        contract.crlf = _crlf;
        contract.DNS = bfSender.DNS;
        contract.Encoding = _encoding;
        contract.FileName = _fileName;  //Devops 15745 - always create new file name
        contract.RuntimeUrl = SKS_BF_Connection::GetBankFabricURL(sksFilestorage.BankFabricURL,SKS_BF_AzureOperation::SendFile); //tbl.Files_RuntimeUrl_Send; Todo: Discuss for operations type
        contract.TASVersion = gSKS_PP_Setup.RegVersion;
        contract.PaymentFileData = _paymentFileData;
        contract.PaymentFormatGroup = _paymentFormatGroup;
        contract.PaymentFormatGroupVersion = _paymentFormatGroupVersion;
        contract.PaymentDataContractVersion = _paymentDataContractVersion;

        filenamesattributes = new SKG_BF.Models.FileNameAttributesContract();
        filenamesattributes.Key = enum2symbol(enumNum(SKS_BF_FileNameAttributeType),SKS_BF_FileNameAttributeType::Company);
        filenamesattributes.Value = _company; //"USMF";
        contract.AddFileNameAttributestoList(filenamesattributes);
        filenamesattributes = null;

        filenamesattributes = new SKG_BF.Models.FileNameAttributesContract();
        filenamesattributes.Key = enum2symbol(enumNum(SKS_BF_FileNameAttributeType),SKS_BF_FileNameAttributeType::FileNumber);
        filenamesattributes.Value = _fileNbr; //"0123456789";
        contract.AddFileNameAttributestoList(filenamesattributes);
                
        ListEnumerator enumerator = _dataList.getEnumerator();

        while(enumerator.moveNext())
        {
            contract.AppendLineToData(enumerator.current().toString());
        }

        bfSender.FileContract = contract;

        bfSender.SendFiles();

        SKG_BF.Models.ERPResponseContract bF_ResponseContract = bfSender.ResponseContract;

        SKS_BF_Connection::P66682fb1b1e479ca2532ca62e10c079(bF_ResponseContract);

        conBFResponse = conIns(conBFResponse,1,bfSender.ResponseContract.FailureReason);
        if (bfSender.ResponseContract.FailureReason != null && bfSender.ResponseContract.FailureReason != '')
        {
            return conBFResponse;
        }
        else
        {
            conBFResponse = conIns(conBFResponse,2,bfSender.ResponseContract.NewFileName,bfSender.ResponseContract.PaymentAdditionalData, bfSender.ResponseContract.PaymentNextSequenceNumber, bfSender.ResponseContract.NewControlFileName);
            return conBFResponse;
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>CreatePayment</Name>
				<Source><![CDATA[
    public container CreatePayment(
        str _communicationName                                       
        , str _paymentFileData = ''
        , str _paymentFormatGroup = ''
        , str _paymentFormatGroupVersion = ''
        , str _paymentDataContractVersion = '')
    {
        container   conBFResponse;

        SKG_BF.Models.PaymentContract contract = new SKG_BF.Models.PaymentContract();        
        
        SKS_EB_FileStorage  sksFilestorage;
        //SKS_EFTAP_File      sksEFTAPFile;
 
        select firstonly sksFilestorage;

        contract.SecretName = sksFilestorage.BankFabricSecretName;      
        contract.DNS = bfSender.DNS;        
        contract.RuntimeUrl = SKS_BF_Connection::GetBankFabricURL(sksFilestorage.BankFabricURL,SKS_BF_AzureOperation::PaymentCreate); 
        contract.TASVersion = gSKS_PP_Setup.RegVersion;
        contract.PaymentFileData = _paymentFileData;
        contract.PaymentFormatGroup = _paymentFormatGroup;
        contract.PaymentFormatGroupVersion = _paymentFormatGroupVersion;
        contract.PaymentDataContractVersion = _paymentDataContractVersion;
        contract.BankFabricCommunicationName = _communicationName;

        bfSender.PaymentCreateContract = contract;

        bfSender.PaymentCreate();

        SKG_BF.Models.ERPResponseContract bF_ResponseContract = bfSender.ResponseContract;

        SKS_BF_Connection::P66682fb1b1e479ca2532ca62e10c079(bF_ResponseContract);

        conBFResponse = conIns(conBFResponse,1,bfSender.ResponseContract.FailureReason);
        if (bfSender.ResponseContract.FailureReason != null && bfSender.ResponseContract.FailureReason != '')
        {
            return conBFResponse;
        }
        else
        {
            conBFResponse = conIns(conBFResponse,2,bfSender.ResponseContract.PaymentAdditionalData, bfSender.ResponseContract.PaymentNextSequenceNumber, bfSender.ResponseContract.PaymentCreateResponses);
            return conBFResponse;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>DeleteFile</Name>
				<Source><![CDATA[
    public str DeleteFile(str _fileLocation,str _fileFolder,str _fileName)
    {
        str   FailureReason;

        SKG_BF.Models.FileContract contract = new SKG_BF.Models.FileContract();
        
        SKS_EB_FileStorage  sksFilestorage;
        SKS_EFTAP_File      sksEFTAPFile;
 
        select firstonly sksFilestorage;
        
        contract.DNS = bfSender.DNS;
        contract.SecretName = sksFilestorage.BankFabricSecretName;
        contract.BankFabricFileLocation = _fileLocation;
        contract.folder = _fileFolder;
        contract.FileName = _fileName;
        contract.RuntimeUrl = SKS_BF_Connection::GetBankFabricURL(sksFilestorage.BankFabricURL,SKS_BF_AzureOperation::DeleteFile); //tbl.Files_RuntimeUrl_Send; Todo: Discuss for operations type
        contract.TASVersion = gSKS_PP_Setup.RegVersion;

        bfSender.FileContract = contract;

        bfSender.Deletefile();

        SKG_BF.Models.ERPResponseContract bF_ResponseContract = bfSender.ResponseContract;

        if (bF_ResponseContract.Status == enum2int(SKS_BF_ResponseStatus::Success))
        {
            SKS_BF_Connection::P66682fb1b1e479ca2532ca62e10c079(bF_ResponseContract);
        }
        else
        {
            FailureReason = bfSender.ResponseContract.FailureReason;
        }

        return FailureReason;
    }

]]></Source>
			</Method>
			<Method>
				<Name>CopyFile</Name>
				<Source><![CDATA[
    public str CopyFile(str _Copyfromfile,str _Copytofile)
    {
        str   FailureReason;
        System.String[] fromBFLocationAndName;
        System.String[] toBFLocationAndName;
        int aCount;
        str fromFileName = '';
        str fromFilePath = '';
        str fromFileFolder = '';
        str toFileName = '';
        str toFilePath = '';
        str toFileFolder = '';

        SKG_BF.Models.FileContract contract = new SKG_BF.Models.FileContract();
        
        SKS_EB_FileStorage  sksFilestorage;
        SKS_EFTAP_File      sksEFTAPFile;
 
        select firstonly sksFilestorage;

        //Parse _Copyfromfile
        if(strContains(_Copyfromfile,@'/'))
                fromBFLocationAndName = System.Text.RegularExpressions.Regex::Split(_Copyfromfile,@'//');
            else if(strContains(_Copyfromfile,@'\'))
                fromBFLocationAndName = System.Text.RegularExpressions.Regex::Split(_Copyfromfile,@'\\');
        else
                throw Global::error("@SKS:SKGBRFileErrorBFNameStructure");

        aCount = fromBFLocationAndName.Length;
        if (aCount > 2)
        {
            fromFileName = fromBFLocationAndName.GetValue(2);
            fromFileFolder = fromBFLocationAndName.GetValue(1);
            fromFilePath = fromBFLocationAndName.GetValue(0);
        }
        else
        {
            fromFileName = fromBFLocationAndName.GetValue(1);
            fromFilePath = fromBFLocationAndName.GetValue(0);
        }

        //Parse _Copytofile
        if(strContains(_Copytofile,@'/'))
                toBFLocationAndName = System.Text.RegularExpressions.Regex::Split(_Copytofile,@'//');
            else if(strContains(_Copytofile,@'\'))
                toBFLocationAndName = System.Text.RegularExpressions.Regex::Split(_Copytofile,@'\\');
        else
                throw Global::error("@SKS:SKGBRFileErrorBFNameStructure");

        aCount = toBFLocationAndName.Length;
        if (aCount > 2)
        {
            toFileName = toBFLocationAndName.GetValue(2);
            toFileFolder = toBFLocationAndName.GetValue(1);
            toFilePath = toBFLocationAndName.GetValue(0);
        }
        else
        {
            toFileName = toBFLocationAndName.GetValue(1);
            toFilePath = toBFLocationAndName.GetValue(0);
        }

        contract.DNS = bfSender.DNS;
        contract.SecretName = sksFilestorage.BankFabricSecretName;
        contract.BankFabricFileLocation = fromFilePath;
        contract.folder = fromFileFolder;
        contract.FileName = fromFileName;
        contract.MoveFileToFileLocation = toFilePath;
        contract.MoveFileToFolder = toFileFolder;
        contract.MoveFileNewFileName = toFileName;

        contract.RuntimeUrl = SKS_BF_Connection::GetBankFabricURL(sksFilestorage.BankFabricURL,SKS_BF_AzureOperation::CopyFile); //tbl.Files_RuntimeUrl_Send; Todo: Discuss for operations type
        contract.TASVersion = gSKS_PP_Setup.RegVersion;

        bfSender.FileContract = contract;

        bfSender.CopyFile();

        SKG_BF.Models.ERPResponseContract bF_ResponseContract = bfSender.ResponseContract;

        if (bF_ResponseContract.Status == enum2int(SKS_BF_ResponseStatus::Success))
        {
            SKS_BF_Connection::P66682fb1b1e479ca2532ca62e10c079(bF_ResponseContract);
        }
        else
        {
            FailureReason = bfSender.ResponseContract.FailureReason;
        }

        return FailureReason;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RetrieveAPIBankRecStatement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieve bank statements via API calls, (not files)
    /// </summary>
    /// <param name = "_BankFabricCommunicationName">The TAS communications call that is requesting this statement</param>
    /// <param name = "_FromDate">The staring date to be included in the statement</param>
    /// <param name = "_ToDate">The final date to be included in the statement</param>
    /// <param name = "_AccountNumber">The bank account number for which you are requesing a statement</param>
    /// <param name = "_IBAN">The IBAN for which you are requesing a statement</param>
    /// <param name = "_RoutingNumber">The bank's routing number for which you are requesing a statement</param>
    /// <param name = "_SWIFTCode">The bank's SWIFT for which you are requesing a statement</param>
    /// <param name = "_DNS">The endpoint for the call</param>
    /// <param name = "_ERPLogInfo">Diagnotic info provided to bank fabric for diagnostic logging</param>
    /// <param name = "_TASVersion">The version of TAS that made the call</param>
    /// <param name = "_SecretName">Name of the Secret in use</param>
    /// <param name = "_CommProcess">Comm process ID that made the call</param>
    /// <param name = "_BankAccountId">The D365 Bank Account ID</param>
    /// <param name = "_Company">Company of the bank account for which you are making the call</param>
    /// <returns></returns>
    public SKG_BF.Models.BankStatementResponse RetrieveAPIBankRecStatement(str _BankFabricCommunicationName
        , date _FromDate
        , date _ToDate
        , str _AccountNumber
        , str _IBAN
        , str _RoutingNumber
        , str _SWIFTCode
        , str _DNS
        , str _ERPLogInfo //Must at least contain the invoking Batch job
        , str _TASVersion
        , str _SecretName
        , SKS_EB_CommProcess _CommProcess
        , str _BankAccountId = ''
        , SelectableDataArea _Company = '')
    {
        SKG_BF.Models.BankStatementRequest contract = new SKG_BF.Models.BankStatementRequest();
        SKS_EB_FileStorage  sksFilestorage;

        select firstonly sksFilestorage;
        contract.BankFabricCommunicationName  = _CommProcess.BankFabricCommunicationName;
        contract.Company = '';
        contract.BankAccountId = _BankAccountId;
        contract.FromDate = _FromDate;
        contract.ToDate = _ToDate;
        contract.AccountNumber = _AccountNumber;
        contract.IBAN = _IBAN;
        contract.RoutingNumber = _RoutingNumber;
        contract.SWIFTCode = _SWIFTCode;
        contract.DNS = bfSender.DNS;
        contract.ERPLogInfo = _ERPLogInfo;
        contract.TASVersion = gSKS_PP_Setup.RegVersion;
        contract.SecretName = sksFilestorage.BankFabricSecretName;
        contract.RuntimeUrl = SKS_BF_Connection::GetBankFabricURL(sksFilestorage.BankFabricURL,SKS_BF_AzureOperation::GetBRStatementAPI);


        bfSender.BankStatementRequestContract = contract; // PACKAGE UP REQUEST CONTRACT
        bfSender.GetHttpBankStatement(); //DO THE CALL TO BF

        //Call was completed previous, get the response
        SKG_BF.Models.BankStatementResponse bF_ResponseContract = bfSender.BankStatementResponseContract;

        SKS_BF_Connection::P66682fb1b1e479ca2532ca62e10c079(bF_ResponseContract);

        return bF_ResponseContract;

    }

]]></Source>
			</Method>
			<Method>
				<Name>SendFormatRequest</Name>
				<Source><![CDATA[
    /// <summary>
    /// Send the format request to BankFabric
    /// </summary>
    /// <param name = "_SKGFormatMetadataRequest">The metadata format request to be sent.</param>
    /// <returns>The metadata format request that was sent.</returns>
    public SKG_File.Models.SKGFormatMetadataRequest SendFormatRequest(SKG_File.Models.SKGFormatMetadataRequest _SKGFormatMetadataRequest)
    {
        SKS_EB_FileStorage  sksFilestorage;
        select firstonly sksFilestorage;
        
        _SKGFormatMetadataRequest.DNS = bfSender.DNS;
        SKG_BF.Models.ClientCreds bfClient = bfSender.Credentials;
        bfClient.URL = SKS_BF_Connection::GetBankFabricURL(sksFilestorage.BankFabricURL,SKS_BF_AzureOperation::EFTFormat);

        bfSender.FormatMetadataRequestContract = _SKGFormatMetadataRequest;

        bfSender.SendFormatRequest();

        return bfSender.FormatMetadataRequestContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>SendInboundFormatRequest</Name>
				<Source><![CDATA[
    /// <summary>
    /// Send the format request to BankFabric
    /// </summary>
    /// <param name = "_SKGFormatMetadataRequest">The metadata format request to be sent.</param>
    /// <returns>The metadata format request that was sent.</returns>
    public SKG_File.Models.SKGFormatMetadataInboundRequest SendInboundFormatRequest(SKG_File.Models.SKGFormatMetadataInboundRequest _SKGFormatMetadataRequest)
    {
        SKS_EB_FileStorage  sksFilestorage;
        select firstonly sksFilestorage;
        
        _SKGFormatMetadataRequest.DNS = bfSender.DNS;
        SKG_BF.Models.ClientCreds bfClient = bfSender.Credentials;
        bfClient.URL = SKS_BF_Connection::GetBankFabricURL(sksFilestorage.BankFabricURL,SKS_BF_AzureOperation::EFTFormatInbound);

        bfSender.FormatMetadataInboundRequestContract = _SKGFormatMetadataRequest;

        bfSender.SendInboundFormatRequest();

        return bfSender.FormatMetadataInboundRequestContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAPIPaymRemitStatus</Name>
				<Source><![CDATA[
    public SKG_BF.Models.PaymentRemitAutomationResponse getAPIPaymRemitStatus(SKG_BF.Models.PaymentRemitAutomationRequest _remitStatusRequest)
    {
        SKS_EB_FileStorage  sksFilestorage;
        select firstonly sksFilestorage;
        
        _remitStatusRequest.DNS = bfSender.DNS;
        
        SKG_BF.Models.ClientCreds bfClient = bfSender.Credentials;

        bfClient.URL = SKS_BF_Connection::GetBankFabricURL(sksFilestorage.BankFabricURL, SKS_BF_AzureOperation::PRA); 
        
        bfSender.Credentials = bfClient;

        bfSender.PaymentRemitAutomationRequest = _remitStatusRequest;

        bfSender.PaymentRemitAutomationCreate();

        return bfSender.PaymentRemitAutomationResponse;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAPIPaymentStatus</Name>
				<Source><![CDATA[
    public SKG_BF.Models.PaymentStatusResponse getAPIPaymentStatus(SKG_BF.Models.PaymentStatusRequest _PaymentStatusRequest)
    {
        SKS_EB_FileStorage  sksFilestorage;
        select firstonly sksFilestorage;
        
        _PaymentStatusRequest.DNS = bfSender.DNS;
        SKG_BF.Models.ClientCreds bfClient = bfSender.Credentials;
        bfClient.URL = SKS_BF_Connection::GetBankFabricURL(sksFilestorage.BankFabricURL,SKS_BF_AzureOperation::PaymentStatus);

        bfSender.PaymentStatusRequestContract = _PaymentStatusRequest;

        bfSender.SendPaymentStatusRequest();

        return bfSender.PaymentStatusResponseContract;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>