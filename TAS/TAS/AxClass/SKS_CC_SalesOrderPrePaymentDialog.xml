<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_CC_SalesOrderPrePaymentDialog</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_CC_SalesOrderPrePaymentDialog extends RunBase
{
    SKS_PP_Setup                sks_PP_Setup;
    CustAccount                 custAccount;
    CustName                    custName;
    Amount                      callerAmount, prePayAmount;
    Amount                      callerTaxAmount;
    DialogField                 dfCreditCardLast4;
    DialogField                 dfCreditCardNbr;
    DialogField                 dfPrePayAmount;
    DialogField                 dfCustomer;
    DialogField                 dfCustomerName;
    DialogField                 dfDocumentId;
    DialogField                 dfDocumentType;
    DialogField                 dfPFCustomer;
    SalesTable                  callerSalesTable;
    CustTable                   callerCustTable;
    RefTableId                  oneTimeCustRefTableId;
    RefRecId                    oneTimeCustRefRecId;
    String50                    payFabricCustomerNbr;
    CreditCardNumber            creditCardLast4;
    CreditCardNumberRefRecId    creditCardCustRefId;
    CreditCardCust              creditCardCust;
    Common                      callerRecord;
    Num                         callerDocId;
    FieldLabel                  callerFldLabelForCtrl;
    SKS_CC_PayLinkEntityType    callerDocumentType;

    #define.CurrentVersion(1)

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>customerCreditCard_lookup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the customer credit card lookup.
    /// </summary>
    /// <param name="_formControl">
    ///    The <c>FormControl</c> object that needs the lookup.
    /// </param>
    private void customerCreditCard_lookup(FormStringControl _formControl)
    {
        Args args = new Args(formStr(CreditCardLookup));
        FormRun lookupFormRun;

        args.caller(_formControl);
        if (dfCreditCardNbr.value() && _formControl.text())
        {
            args.lookupValue(int642str(dfCreditCardNbr.value()));
        }

        lookupFormRun = classfactory.formRunClass(args);
        lookupFormRun.custAccount(custAccount);
        if (oneTimeCustRefTableId && oneTimeCustRefRecId)
        {
            lookupFormRun.sKS_CC_OneTimeCustRefTableId(oneTimeCustRefTableId);
            lookupFormRun.sKS_CC_OneTimeCustRefRecId(oneTimeCustRefRecId);
        }
        lookupFormRun.init();

        _formControl.performFormLookup(lookupFormRun);

        lookupFormRun.wait();
        if (lookupFormRun.closedOk())
        {
            creditCardCust = lookupFormRun.docCursor();
            _formControl.text(creditCardCust.CardNumber);
            dfCreditCardNbr.value(creditCardCust.RecId);
        }
        else
        {
            if (_formControl.text() == '')
            {
                _formControl.text('');
                dfCreditCardNbr.value(0);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase       dialog;

        dialog = super();
        dialog.addText("@SKS:SKGCCSendPrePaymentInstructionText", 400);        

        dfCreditCardLast4 = dialog.addField(extendedtypestr(CreditCardNumber), "@SKS6093");
        dfCreditCardLast4.lookupButton(2);        

        dfCreditCardNbr = dialog.addField(extendedtypestr(CreditCardNumberRefRecId), "@SKS6093");
        dfCreditCardNbr.visible(false);

        dfPrePayAmount = dialog.addField(extendedtypestr(AmountCur), "@SKS:SKGCCAmount");
        dfPrePayAmount.value(callerAmount);

        dfDocumentId = dialog.addField(extendedtypestr(String30), callerFldLabelForCtrl);
        dfDocumentId.allowEdit(false);
        dfDocumentId.skip(true);
        dfDocumentId.value(callerDocId);

        dfCustomer = dialog.addField(extendedtypestr(custAccount));
        dfCustomerName = dialog.addField(extendedtypestr(CustName));        

        dfCustomer.allowEdit(false);
        dfCustomer.skip(true);
        dfCustomer.value(custAccount);

        dfCustomerName.allowEdit(false);
        dfCustomerName.skip(true);
        dfCustomerName.value(callerCustTable.name());

        if (oneTimeCustRefTableId && oneTimeCustRefRecId && payFabricCustomerNbr)
        {
            dfPFCustomer = dialog.addField(extendedtypestr(String50), "@SKS:SKGCCOneTimeCustPFNbr");
            dfPFCustomer.allowEdit(false);
            dfPFCustomer.skip(true);
            dfPFCustomer.value(payFabricCustomerNbr);
        }        

        creditCardCust = null;
        if (callerSalesTable.CreditCardCustRefId)
        {
            creditCardCust = CreditCardCust::find(callerSalesTable.CreditCardCustRefId);
        }
        else
        {
            creditCardCust = SKS_CC_SalesOrderPrePaymentDialog::getPrimaryOrSingleCreditCard(
                callerCustTable.AccountNum, oneTimeCustRefTableId, oneTimeCustRefRecId);
        }

        if (creditCardCust)
        {
            dfCreditCardLast4.value(creditCardCust.CardNumber);
            dfCreditCardNbr.value(creditCardCust.RecId);
        }

        dfCreditCardLast4.control().registerOverrideMethod(methodStr(FormStringControl, lookup),
                                                         methodStr(SKS_CC_SalesOrderPrePaymentDialog, customerCreditCard_lookup),
                                                         this);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();        

        creditCardLast4 = dfCreditCardLast4.value();
        if (!creditCardLast4)
        {
            creditCardCustRefId = 0;
        }
        else
        {
            creditCardCustRefId = dfCreditCardNbr.value();
        }

        prePayAmount = dfPrePayAmount.value();
        custAccount = dfCustomer.value();
        custName = dfCustomerName.value();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setValuesFromCallingRecord</Name>
				<Source><![CDATA[
    public boolean setValuesFromCallingRecord(Common _callingRecord)
    {
        SKS_CC_PayLinkQueue payLinkQueueCheck;
        AmountCur salesOrderTotalAmount, markedAmount;

        sks_PP_Setup = SKS_PP_Setup::find();
        callerRecord = _callingRecord;
        switch (callerRecord.TableId)
        {
            case tableNum(SalesTable):
                callerSalesTable = _callingRecord;               

                // Reread record to ensure the latest changes are fetched.
                callerSalesTable.reread();

                callerCustTable = callerSalesTable.custTable_InvoiceAccount();

                if (callerSalesTable.SalesStatus == SalesStatus::Invoiced || callerSalesTable.SalesStatus == SalesStatus::Canceled)
                {
                    throw error(strFmt("@SKS:SKGCCInvalidSOStatusForPrePay", callerSalesTable.SalesId, enum2Str(callerSalesTable.SalesStatus)));
                }

                if (callerSalesTable.SalesType == SalesType::ReturnItem)
                {
                    throw error(strFmt("@SKS:SKGCCInvalidSOTypeForPrePay", callerSalesTable.SalesId, enum2Str(callerSalesTable.SalesType)));
                }

                if (callerSalesTable.ProjId)
                {
                    throw error(strFmt("@SKS:SKGCCInvalidSOWithProjIdForPrePay", callerSalesTable.SalesId, callerSalesTable.ProjId));
                }

                if (sks_PP_Setup.CCUsePaymModeForSOPrePay)
                {
                    if (!callerSalesTable.PaymMode)
                    {
                        throw error(strFmt("@SKS:SKGCCMustSpecifyMOPOnSOForPrePayMsg", 
                            fieldId2PName(tableNum(SKS_PP_Setup), fieldNum(SKS_PP_Setup, CCUsePaymModeForSOPrePay)),
                            callerSalesTable.SalesId));
                    }

                    CustPaymModeTable custPaymModeTable = CustPaymModeTable::find(callerSalesTable.PaymMode);
                    if (custPaymModeTable.PaymentType != CustPaymentType::CreditCard)
                    {
                        throw error(strFmt("@SKS:SKGCCMustSpecifyMOPOnSOForPrePayMsg",
                            fieldId2PName(tableNum(SKS_PP_Setup), fieldNum(SKS_PP_Setup, CCUsePaymModeForSOPrePay)),
                            callerSalesTable.SalesId));
                    }

                    if (!custPaymModeTable.offsetLedgerDimension())
                    {
                        throw error(strFmt("@SKS:SKGCCMustSpecifyMOPWithOffsetOnSOForPrePayMsg",
                            fieldId2PName(tableNum(SKS_PP_Setup), fieldNum(SKS_PP_Setup, CCUsePaymModeForSOPrePay)),
                            callerSalesTable.SalesId));
                    }
                }
                else
                {
                    if (!sks_PP_Setup.CCPLPrePaymentPaymMode)
                    {
                        throw error(strFmt("@SKS:SKGCCCannotFindPaymModeForPrePayJournal", tableId2PName(callerSalesTable.TableId), callerSalesTable.RecId));
                    }
                }
                
                if (callerCustTable.OneTimeCustomer)
                {
                    oneTimeCustRefTableId = callerSalesTable.TableId;
                    oneTimeCustRefRecId = callerSalesTable.RecId;
                }
                this.setPayFabricCustomerNbr();

                payLinkQueueCheck = SKS_CC_PayLinkQueue::FindByRefWithTypeAndStatus(
                    callerSalesTable.TableId,
                    callerSalesTable.RecId,
                    SKS_CC_PayLinkProcessStatus::Pending,
                    SKS_CC_PayLinkTransactionType::PayLink,
                    payFabricCustomerNbr);

                if (payLinkQueueCheck)
                {
                    throw error(strFmt("@SKS:SKGCCInvalidDueToPayLinkFoundForPrePay", callerSalesTable.SalesId));
                }

                CreditCardAuthTrans ccAuthTrans = CreditCardAuthTrans::findValidPreApproval(callerSalesTable.SalesId);
                if (ccAuthTrans)
                {
                    throw error(strFmt("@SKS:SKGCCInvalidDueToPreAuthFoundForPrePay", callerSalesTable.SalesId));
                }
                
                SalesTotals salesTotals = SalesTotals_Sales::construct(callerSalesTable, SalesUpdate::All);
                salesOrderTotalAmount = salesTotals.totalAmount();
                salesTotals.tax().taxAmountCalculated();
                markedAmount = SKS_CC_CreditCardProcess::sKS_CC_GetMarkedAmount(callerSalesTable);
                callerAmount = salesOrderTotalAmount - markedAmount; 
                callerTaxAmount = salesTotals.totalTaxAmount();                

                if ((abs(callerAmount) > abs(salesOrderTotalAmount)) || !callerAmount)
                {
                    throw error(strFmt("@SKS:SKGCCSORemainAmtIsZeroErrorMsgPrePay", callerSalesTable.SalesId));
                }               

                callerDocId = callerSalesTable.SalesId;
                callerFldLabelForCtrl = fieldId2PName(tableNum(SalesTable), fieldNum(SalesTable, SalesId));                           
                break;
            default:
                throw error(Error::missingRecord(funcName()));
        }    
        
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        boolean     ret = true;

        if (!creditCardLast4 || !creditCardCustRefId)
        {
            ret = checkFailed(strFmt("@SKS:SKGCCFieldMustBeSpecified", "@SKS6093"));
        }

        if (!prePayAmount)
        {
            ret = checkFailed(strFmt("@SKS:SKGCCFieldMustBeSpecified", "@SKS:SKGCCAmount"));
        }

        if (prePayAmount > callerAmount)
        {
            ret = checkFailed(strFmt("@SKS:SKGCCPrePayAmounteExceedsOpenSOAmount", prePayAmount, callerAmount));
        }

        if (ret)
        {
            CreditCardCust creditCardCustCheck;
            select firstonly1 creditCardCustCheck
                where creditCardCustCheck.RecId == creditCardCustRefId;

            if (!creditCardCustCheck || creditCardCustCheck.CustAccount != custAccount ||
                creditCardCustCheck.CardNumber != creditCardLast4)
            {
                ret = checkFailed(strFmt("@SKS:SKGCCCardDoesNotExistForCustErrMsg", creditCardLast4, custAccount));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        SKS_CC_SalesOrderPrePayment salesOrderPrePayment = SKS_CC_SalesOrderPrePayment::construct(callerSalesTable);
        salesOrderPrePayment.parmPrePayAmount(prePayAmount);
        salesOrderPrePayment.setCreditCardCust(creditCardCust);
        salesOrderPrePayment.run();       
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static SKS_CC_SalesOrderPrePaymentDialog construct()
    {
        return new SKS_CC_SalesOrderPrePaymentDialog();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public server static ClassDescription description()
    {
        return "@SKS:SKGCCSOCCPrepayment";
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPayFabricCustomerNbr</Name>
				<Source><![CDATA[
    public void setPayFabricCustomerNbr()
    {
        custAccount = callerCustTable.AccountNum;
        if (oneTimeCustRefTableId && oneTimeCustRefRecId)
        {
            payFabricCustomerNbr = SKS_CC_PayFabricWalletHandler::getPayFabricCustomerNbrForOneTimeCust(
                oneTimeCustRefTableId,
                oneTimeCustRefRecId,
                callerCustTable.AccountNum);
        }
        else
        {
            payFabricCustomerNbr = callerCustTable.AccountNum;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        SKS_CC_SalesOrderPrePaymentDialog   salesOrderPrePaymentDialog = SKS_CC_SalesOrderPrePaymentDialog::construct();

        if (SKS_PP_Setup::find().ModCC == NoYes::No)
        {
            return;
        }

        if (!_args)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        if (!_args.record())
        {
            throw error(Error::missingRecord(funcName()));
        }

        boolean retValue = salesOrderPrePaymentDialog.setValuesFromCallingRecord(_args.record());
        if (!retValue)
        {
            return;
        }

        if (salesOrderPrePaymentDialog.prompt())
        {
            salesOrderPrePaymentDialog.run();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrimaryOrSingleCreditCard</Name>
				<Source><![CDATA[
    public static CreditCardCust getPrimaryOrSingleCreditCard(
        CustAccount _custAccount,
        RefTableId _oneTimeCustRefTableId = 0,
        RefRecId _oneTimeCustRefRecId = 0)
    {
        CreditCardCust creditCardCust, creditCardCustCnt;

        if (_oneTimeCustRefTableId && _oneTimeCustRefRecId)
        {
            select count(RecId) from creditCardCustCnt
                where creditCardCustCnt.SKS_CC_OneTimeCustRefTableId == _oneTimeCustRefTableId
                && creditCardCustCnt.SKS_CC_OneTimeCustRefRecId == _oneTimeCustRefRecId
                && creditCardCustCnt.CustAccount == _custAccount;

            if (!creditCardCustCnt.RecId)
            {
                return null;
            }
            else if (creditCardCustCnt.RecId == 1)
            {
                select firstonly1 creditCardCust
                    where creditCardCust.SKS_CC_OneTimeCustRefTableId == _oneTimeCustRefTableId
                    && creditCardCust.SKS_CC_OneTimeCustRefRecId == _oneTimeCustRefRecId
                    && creditCardCust.CustAccount == _custAccount;
            }
            else if (creditCardCustCnt.RecId > 1)
            {
                select firstonly1 creditCardCust
                    where creditCardCust.SKS_CC_OneTimeCustRefTableId == _oneTimeCustRefTableId
                    && creditCardCust.SKS_CC_OneTimeCustRefRecId == _oneTimeCustRefRecId
                    && creditCardCust.CustAccount == _custAccount
                    && creditCardCust.SKS_CC_DefaultCard == NoYes::Yes;
            }
        }
        else
        {
            select count(RecId) from creditCardCustCnt
                where creditCardCustCnt.CustAccount == _custAccount;

            if (!creditCardCustCnt.RecId)
            {
                return null;
            }
            else if (creditCardCustCnt.RecId == 1)
            {
                select firstonly1 creditCardCust
                    where creditCardCust.CustAccount == _custAccount;
            }
            else if (creditCardCustCnt.RecId > 1)
            {
                select firstonly1 creditCardCust
                    where creditCardCust.CustAccount == _custAccount
                    && creditCardCust.SKS_CC_DefaultCard == NoYes::Yes;
            }
        }

        return creditCardCust;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>