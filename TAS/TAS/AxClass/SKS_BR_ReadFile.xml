<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_BR_ReadFile</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_BR_ReadFile
{
    #SKS_Global
    SKS_BR_FileFormat sks_br_fileformat;
    BankAccountStatement bankAccountStatement;
    BankAccountTrans bankAccountTrans;
    SKS_EB_FilePath FileName;
    UtcDateTime FileDateTime;
    SKS_BR_FormatId FormatId;
    int OmitHeaderRecsNbr;
    int OmitTrailerRecsNbr;
    int ImportCount;
    SKS_BR_BankTran bankTran;
    SKS_BR_FileType FileType;
    int Decimal_Places;
    SKS_PP_Setup sks_pp_Setup;
    SKS_BR_BankHeaderRecId bankHeaderRecId;
    str eventLogText;
    SKS_PP_CommBRPreImportScriptPath gBRPreReadScript;
    str gBRPreReadScriptParams;
    SKS_PP_CommBRPostImportScriptPath gBRPostReadScript;
    str gBRPostReadScriptParams;
    SKS_BR_ReadFileClassesCustomActionsBase gSKS_BR_ReadFileClassesCustomActionsBase;
    SKS_BF_BankIntType gSKS_BF_BankIntType;
    boolean duplicateStatementErrorHandled;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>setSKS_BF_BankIntType</Name>
				<Source><![CDATA[
    public void setSKS_BF_BankIntType(SKS_BF_BankIntType _SKS_BF_BankIntType)
    {
        gSKS_BF_BankIntType = _SKS_BF_BankIntType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPreReadScript</Name>
				<Source><![CDATA[
    public void setPreReadScript(SKS_PP_CommBRPreImportScriptPath _preReadScript)
    {
        gBRPreReadScript = _preReadScript;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPreReadScriptParams</Name>
				<Source><![CDATA[
    public void setPreReadScriptParams(str _preReadScriptParams)
    {
        gBRPreReadScriptParams = _preReadScriptParams;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPostReadScript</Name>
				<Source><![CDATA[
    public void setPostReadScript(SKS_PP_CommBRPostImportScriptPath _postReadScript)
    {
        gBRPostReadScript = _postReadScript;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPostReadScriptParams</Name>
				<Source><![CDATA[
    public void setPostReadScriptParams(str _postReadScriptParams)
    {
        gBRPostReadScriptParams = _postReadScriptParams;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPreReadScriptParams</Name>
				<Source><![CDATA[
    public str getPreReadScriptParams()
    {
        return gBRPreReadScriptParams;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPreReadScript</Name>
				<Source><![CDATA[
    public SKS_PP_CommBRPreImportScriptPath getPreReadScript()
    {
        return gBRPreReadScript;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPostReadScriptParams</Name>
				<Source><![CDATA[
    public str getPostReadScriptParams()
    {
        return gBRPostReadScriptParams;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPostReadScript</Name>
				<Source><![CDATA[
    public SKS_PP_CommBRPostImportScriptPath getPostReadScript()
    {
        return gBRPostReadScript;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCustomActions</Name>
				<Source><![CDATA[
    public void setCustomActions(SKS_BR_ReadFileClassesCustomActionsBase _SKS_BR_ReadFileClassesCustomActionsBase)
    {
        gSKS_BR_ReadFileClassesCustomActionsBase = _SKS_BR_ReadFileClassesCustomActionsBase;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDuplicateFile</Name>
				<Source><![CDATA[
    // Used by Advanced to check for duplicate file name
    private boolean checkDuplicateFile()
    {
        SKS_BR_File     sks_br_file;
        
        sks_br_file = SKS_BR_File::construct(gSKS_BF_BankIntType);
        sks_br_file.setFilePathName(FileName);
        sks_br_file.setFileDateTime(FileDateTime);

        if(sks_br_file.checkDuplicates(bankHeaderRecId))
        {
            str message = strFmt("@SKS:BRDuplicateFileFoundMessage", sks_br_file.getFileName(), fileDateTime);
            SKS_BR_HistoryTable::insertEvent(SKS_BR_Action::DuplicateFileFound, bankHeaderRecId, '', dateNull(), '', '', message);

            return true;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>closeFile</Name>
				<Source><![CDATA[
    protected void closeFile()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>completeProcessing</Name>
				<Source><![CDATA[
    protected boolean completeProcessing()
    {
        str archivePath;
    


        SKS_BR_File             sks_br_file;
        boolean                 isDuplicate;  //SKS_BS_BR4_BankStatementDuplicateBlock
        boolean                 isHeaderUpdate;   //SKS_BS_BR4_BankStatementDuplicateBlock
    
        sks_br_file = SKS_BR_File::construct(gSKS_BF_BankIntType);
        sks_br_file.setFilePathName(FileName);
    
        isDuplicate = this.checkDuplicateStatement();   //SKS_BS_BR4_BankStatementDuplicateBlock

        if (isDuplicate == true)   //SKS_BS_BR4_BankStatementDuplicateBlock
        {
            isHeaderUpdate = true;
        }
        else
        {
            archivePath = sks_br_file.moveToArchive();

            if(gSKS_BR_ReadFileClassesCustomActionsBase)
            {
                gSKS_BR_ReadFileClassesCustomActionsBase.modifyCompleteProcessing();
            }
    
        }

      
        if(sks_br_file.getErrorText() != '')
        {
            ttsabort;
            ImportCount = 0;
            this.handleError(bankHeaderRecId, sks_br_file.getErrorText(), 0);
            return false;
        }
        if (isHeaderUpdate == false)  //SKS_BR4_BankStatementDuplicate --> No duplicate bank statements
        {
            this.updateHeader(SKS_BR_ImportStatus::CompletedPostingPending, archivePath);
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>completeFile</Name>
				<Source><![CDATA[
    protected void completeFile()
    {
        SKS_BR_ImportStatus     locSKS_BR_ImportStatus;
        SKS_BR_HistoryTable     locSKS_BR_HistoryTable;
        SKS_BR_BankHeader       locSKS_BR_BankHeader;
        select firstonly * from locSKS_BR_HistoryTable
            where locSKS_BR_HistoryTable.BankHeaderRecId == bankHeaderRecId &&
            (
                locSKS_BR_HistoryTable.Action == SKS_BR_Action::BankStatementAutoReconcileFailed
                || locSKS_BR_HistoryTable.Action == SKS_BR_Action::GLAutoPostingFailed
                || locSKS_BR_HistoryTable.Action == SKS_BR_Action::BankStatementAutoCreationFailed
                || locSKS_BR_HistoryTable.Action == SKS_BR_Action::StatementOmitted
            );

        if (locSKS_BR_HistoryTable)
        {
            locSKS_BR_ImportStatus = SKS_BR_ImportStatus::Warning;
        }
        else
        {
            locSKS_BR_ImportStatus = SKS_BR_ImportStatus::Processed;
        }
        locSKS_BR_BankHeader.skipDataMethods(true);
        update_recordset locSKS_BR_BankHeader setting Status = locSKS_BR_ImportStatus where locSKS_BR_BankHeader.RecId == bankHeaderRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBankBalance</Name>
				<Source><![CDATA[
    protected void createBankBalance(Date asOfDate, CompanyBankAccountId bankAcct, AmountCur amount)
    {
        SKS_BR_BankBalance sks_br_bankbalance;
    
        select firstonly forupdate * from sks_br_bankbalance where
         sks_br_bankbalance.BankHeaderRecId == bankHeaderRecId &&
         sks_br_bankbalance.AccountId == bankAcct &&
         sks_br_bankbalance.AsOfDate == asOfDate;
    
        if(sks_br_bankbalance)
        {
            sks_br_bankbalance.EndBalance = amount;
            sks_br_bankbalance.update();
        }
        else
        {
            sks_br_bankbalance.AccountId = bankAcct;
            sks_br_bankbalance.AsOfDate = asOfDate;
            sks_br_bankbalance.EndBalance = amount;
            sks_br_bankbalance.BankHeaderRecId = bankHeaderRecId;
            sks_br_bankbalance.insert();
        }
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>createErrorLog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates error log
    /// </summary>
    /// <param name = "errorMessage">Error message</param>
    /// <param name = "lineNumber">Line number</param>
    protected void createErrorLog(str errorMessage, int lineNumber)
    {
        SKS_BR_ErrorLog sks_br_errorlog;
        SKS_BR_File sks_br_file;
        SKS_BR_BankHeader locSKS_BR_BankHeader;
        str errorPath;

        ttsbegin;
        select firstOnly crossCompany  DataAreaId from locSKS_BR_BankHeader where locSKS_BR_BankHeader.RecId == bankHeaderRecId;
        changeCompany(locSKS_BR_BankHeader.company())
        {
            select firstonly forupdate * from sks_br_errorlog where sks_br_errorlog.BankHeaderRecId == bankHeaderRecId;
    
            if(sks_br_errorlog)
            {
                sks_br_errorlog.LineNumber = lineNumber;
                sks_br_errorlog.ErrorText = errorMessage;
                sks_br_errorlog.update();
            }
            else
            {
                sks_br_errorlog.BankHeaderRecId = bankHeaderRecId;
                sks_br_errorlog.LineNumber = lineNumber;
                sks_br_errorlog.ErrorText = errorMessage;
                sks_br_errorlog.insert();
            }

            sks_br_file = SKS_BR_File::construct(gSKS_BF_BankIntType);
            sks_br_file.setFilePathName(FileName);
            errorPath = sks_br_file.moveToError();
            sks_br_errorlog = null;
            if(gSKS_BR_ReadFileClassesCustomActionsBase)
            {
                gSKS_BR_ReadFileClassesCustomActionsBase.modifyCreateErrorLog();
            }
    
            this.updateHeader(SKS_BR_ImportStatus::Error, errorPath);
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCompletedErrorLog</Name>
				<Source><![CDATA[
    //SKS-Begin
    //SKS_BR4_BankStatementDuplicate
    private void createCompletedErrorLog(str errorMessage, int lineNumber)
    {
        SKS_BR_ErrorLog sks_br_errorlog;
        SKS_BR_File sks_br_file;
        SKS_BR_BankHeader locSKS_BR_BankHeader;
        str errorPath;

        ttsbegin;
        select firstOnly crossCompany  DataAreaId from locSKS_BR_BankHeader where locSKS_BR_BankHeader.RecId == bankHeaderRecId;
        changeCompany(locSKS_BR_BankHeader.company())
        {
            select firstonly forupdate * from sks_br_errorlog where sks_br_errorlog.BankHeaderRecId == bankHeaderRecId;
    
            if(sks_br_errorlog)
            {
                sks_br_errorlog.LineNumber = lineNumber;
                sks_br_errorlog.ErrorText = errorMessage;
                sks_br_errorlog.update();
            }
            else
            {
                sks_br_errorlog.BankHeaderRecId = bankHeaderRecId;
                sks_br_errorlog.LineNumber = lineNumber;
                sks_br_errorlog.ErrorText = errorMessage;
                sks_br_errorlog.insert();
            }
    
            sks_br_file = SKS_BR_File::construct(gSKS_BF_BankIntType);
            sks_br_file.setFilePathName(FileName);
            errorPath = sks_br_file.moveToError();

            sks_br_errorlog = null;
            if(gSKS_BR_ReadFileClassesCustomActionsBase)
            {
                gSKS_BR_ReadFileClassesCustomActionsBase.modifyCreateErrorLog();
            }
    
    
            this.updateHeader(SKS_BR_ImportStatus::CompletedWithErrors, errorPath);
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createGL</Name>
				<Source><![CDATA[
    //SKS_BR4_BankStatementDuplicate
    //SKS-End

    protected boolean createGL()
    {
        SKS_BR_GLProcessing sks_br_glprocessing;
    
        //set the GLCreationCompany in the imported SKS_BR_BankTran records.
        SKS_BR_ReadFile::setGLCreationCompanyAndJournal(bankHeaderRecId);
        sks_br_glprocessing = new SKS_BR_GLProcessing();
        sks_br_glprocessing.setHeaderRecId(bankHeaderRecId);
        sks_br_glprocessing.run();
    
        if(sks_br_glprocessing.getErrorText() != '')
        {
            ttsabort;
            ImportCount = 0;
            this.handleError(bankHeaderRecId, sks_br_glprocessing.getErrorText(), sks_br_glprocessing.getLastSKS_BR_BankTranAttempted());
            return false;
        }
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createHeader</Name>
				<Source><![CDATA[
    private void createHeader()
    {
        SKS_BR_BankHeader sks_br_bankheader;

        sks_br_bankheader.SKS_BF_BankIntType = gSKS_BF_BankIntType;    
        sks_br_bankheader.Filename = FileName;
        sks_br_bankheader.FileDateTime = FileDateTime;
        sks_br_bankheader.ImportDate = DateTimeUtil::getSystemDateTime();
        sks_br_bankheader.Status = SKS_BR_ImportStatus::InProcess;
        sks_br_bankheader.insert();
    
        bankHeaderRecId = sks_br_bankheader.RecId;
        if(gSKS_BR_ReadFileClassesCustomActionsBase)
        {
            gSKS_BR_ReadFileClassesCustomActionsBase.setSKS_BR_BankHeaderRecId(bankHeaderRecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAccountID</Name>
				<Source><![CDATA[
    /// Finds Bank Account Id for imported bank accounts with "Search" box's Alternate Bank ID
    private SKS_PP_Bank getAccountID(BankAccount accountNum, container _crossCompanyList)
    {
        //Search's "Alternate Bank Id" is set
        //in the eBanking Bank Accounts screen.
        SKS_PP_Bank sks_PP_Bank;
    
        select firstonly crossCompany:_crossCompanyList dataAreaId, BankAccountID from sks_PP_Bank where SKS_PP_Bank.AlternateBankID == accountNum;
        return sks_PP_Bank; //may return null if no matching alternate bank acount found
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankAccount</Name>
				<Source><![CDATA[
    /// Finds Bank Account Id for bank account number
    protected BankAccountTable getBankAccount(BankAccount accountNum)
    {
        BankAccountTable bankAccountTable;
        SKS_PP_Bank sks_PP_Bank;
        container crossCompanyList;
    
        crossCompanyList = SKS_EB_VirtualCompany::getBankRecCompanies();
    
        if(strLen(strLRTrim(accountNum)) > 0)
        {
            sks_PP_Bank = this.getAccountID(accountNum, crossCompanyList);
        }
    
    
        if(sks_PP_Bank)//an account ID was retrieved based on the Alternate Bank ID.
        {
            bankAccountTable = this.getBankAccountFromAcctID(sks_PP_Bank);
        }
        else//No Alternate Bank ID was matched, try finding an account based on the supplied Bank Account Num.
        {
            bankAccountTable = this.getBankAccountFromAcctNum(SKS_PP_StringFormats::strLTrimZeroes(accountNum), crossCompanyList);
        }
    
        return bankAccountTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankAccountByPath</Name>
				<Source><![CDATA[
    /// <summary>
    /// Using the path of the file being imported, locate the bank account that uses that path
    /// </summary>
    /// <returns>bankAccountTable record that uses the path of the current path</returns>
    [SuppressBPWarning('BPErrorSelectUsingFirstOnly', 'The buffer bankAccountTable is return and can be navigated by invoking methods')]
    protected BankAccountTable getBankAccountByPath()
    {
        SKS_PP_Bank sks_pp_bank;
        BankAccountTable bankAccountTable;
        SKS_BR_File sks_br_file;
        SKS_EB_FilePath path;

        sks_br_file = SKS_BR_File::construct(gSKS_BF_BankIntType);
        sks_br_file.setFilePathName(FileName);
    
        path = sks_br_file::removeLastPathSlash(sks_br_file.getFilePath());
        select firstonly crossCompany * from sks_pp_bank
            where ((gSKS_BF_BankIntType == SKS_BF_BankIntType::FileHubLocal && sks_pp_bank.BRPath == path)
                    ||
            (gSKS_BF_BankIntType == SKS_BF_BankIntType::BankFabric && sks_pp_bank.BRBankFabricLocation == path))
                && sks_pp_bank.BRFormatID != ''; // SKS_Bug_10438
    
        changeCompany(sks_pp_bank.company())
        {
            if(sks_pp_bank)
            {
                select * from bankAccountTable
                 where bankAccountTable.AccountID == sks_pp_bank.BankAccountId;
            }
        }
    
        return BankAccountTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankAccountCurrency</Name>
				<Source><![CDATA[
    protected CurrencyCode getBankAccountCurrency()
    {
        BankAccountTable bankAccountTable;

        select firstonly CurrencyCode from bankAccountTable where bankAccountTable.AccountId == BankAccountStatement.AccountId;
    
        return bankAccountTable.CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankAccountFromAcctID</Name>
				<Source><![CDATA[
    private BankAccountTable getBankAccountFromAcctID(SKS_PP_Bank sks_PP_Bank)
    {
        BankAccountTable bankAccountTable;
    
        changeCompany(sks_PP_Bank.company())
        {
            select firstOnly * from bankAccountTable where bankAccountTable.AccountID == sks_PP_Bank.BankAccountId;
        }
        return  bankAccountTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankAccountFromAcctNum</Name>
				<Source><![CDATA[
    /// Finds Bank Account Id for bank account number
    private BankAccountTable getBankAccountFromAcctNum(BankAccount accountNum, container _crossCompanyList)
    {
        BankAccountTable bankAccountTable;
    
        while select crosscompany:_crossCompanyList * from bankAccountTable where
         bankAccountTable.AccountNum LIKE '*' + accountNum
        {
            if(SKS_PP_StringFormats::strLTrimZeroes(bankAccountTable.AccountNum) == accountNum)
            {
                return bankAccountTable;
            }
        }
        return bankAccountTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankAccountId</Name>
				<Source><![CDATA[
    /// Finds Bank Account Id for bank account number
    /// Bank account number must have leading zeros stripped prior to passing to this method
    protected CompanyBankAccountId getBankAccountId(BankAccount accountNum)
    {
        BankAccountTable bankAccountTable;
    
        while select crossCompany * from bankAccountTable where
         bankAccountTable.AccountNum LIKE '*' + accountNum
        {
            if(SKS_PP_StringFormats::strLTrimZeroes(bankAccountTable.AccountNum) == accountNum)
            {
                return bankAccountTable.AccountID;
            }
        }
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankAccountNumber</Name>
				<Source><![CDATA[
    protected str getBankAccountNumber()
    {
        BankAccountTable bankAccountTable;

        select firstonly * from bankAccountTable where bankAccountTable.AccountId == BankAccountStatement.AccountId;
    
        return bankAccountTable.AccountNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankAccountRecId</Name>
				<Source><![CDATA[
    protected RecId getBankAccountRecId()
    {
        BankAccountTable bankAccountTable;

        select firstonly Recid from bankAccountTable where bankAccountTable.AccountId == BankAccountStatement.AccountId;
    
        return bankAccountTable.Recid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEventLogText</Name>
				<Source><![CDATA[
    public str getEventLogText()
    {

        return eventLogText;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getImportCount</Name>
				<Source><![CDATA[
    public int getImportCount()
    {
        ;
        return ImportCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSKS_PP_Setup</Name>
				<Source><![CDATA[
    private void getSKS_PP_Setup()
    {
        ;
        select * from sks_pp_Setup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTagValue</Name>
				<Source><![CDATA[
    protected str getTagValue(List _ListOfSKS_BR_FieldValue, SKS_BR_MT940Field _SKS_BR_MT940Field)
    {
        ListEnumerator locListEnum;
        SKS_BR_FieldValue locSKS_BR_FieldValue;
        str locReturnValue = '';
    
        locListEnum = _ListOfSKS_BR_FieldValue.getEnumerator();
        locListEnum.reset();
        while((strLen(locReturnValue) == 0) && (locListEnum.MoveNext()))
        {
            locSKS_BR_FieldValue = locListEnum.current();
            if(locSKS_BR_FieldValue.getSKS_BR_MT940FieldType() == _SKS_BR_MT940Field)
            {
                locReturnValue = locSKS_BR_FieldValue.getValue();
            }
    
        }

        return locReturnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleError</Name>
				<Source><![CDATA[
    protected void handleError(SKS_BR_BankHeaderRecId headerId, str errorMessage, int lineNumber)
    {
        if(sks_pp_Setup.BREdition == SKS_BR_Edition::Advanced)
        {
            this.closeFile();
            this.createErrorLog(errorMessage, lineNumber);
        }
        else
        {
            error(errorMessage);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleCompletedError</Name>
				<Source><![CDATA[
    //SKS-Begin
    //SKS_BR4_BankStatementDuplicate
    protected void handleCompletedError(SKS_BR_BankHeaderRecId headerId, str errorMessage, int lineNumber)
    {
        if(sks_pp_Setup.BREdition == SKS_BR_Edition::Advanced)
        {
            this.closeFile();
            this.createCompletedErrorLog(errorMessage, lineNumber);
        }
        else
        {
            error(errorMessage);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSKS_BR_BankTran</Name>
				<Source><![CDATA[
    //SKS_BR4_BankStatementDuplicate
    //SKS_End

    protected void initSKS_BR_BankTran()
    {
        bankTran.clear();
        bankTran.initValue();
        bankTran.FileDateTime = fileDateTime;
        bankTran.Filename = fileName;
        bankTran.BankHeaderRecId = bankHeaderRecId;
        if(sks_pp_Setup.BREdition == SKS_BR_Edition::Standard)
        {
            bankTran.AccountId = BankAccountStatement.AccountId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>openFile</Name>
				<Source><![CDATA[
    protected boolean openFile()
    {
        throw error(Error::missingOverload(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parseValue</Name>
				<Source><![CDATA[
    protected boolean parseValue()
    {
        SKS_BR_Parse sks_br_parse;
    
        sks_br_parse = new SKS_BR_Parse(bankTran);
        sks_br_parse.run();
    
        if(sks_br_parse.getErrorText() != '')
        {
            ttsabort;
            ImportCount = 0;
            this.handleError(bankHeaderRecId, sks_br_parse.getErrorText(), 0);
            return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processTranType</Name>
				<Source><![CDATA[
    protected SKS_BR_TranTypeProcessing processTranType(CompanyBankAccountId _bankAccountId)
    {
        SKS_BR_TranTypeProcessing tranTypeProcessing;

        tranTypeProcessing = new SKS_BR_TranTypeProcessing();
        tranTypeProcessing.setFormatId(FormatId);
        tranTypeProcessing.setValidateTranType(sks_br_fileformat.ValidateTranMapping);
        tranTypeProcessing.setFileTranType(bankTran.FileTranType);
        tranTypeProcessing.setBankAccountId(_bankAccountId);
        tranTypeProcessing.run();
    
        return tranTypeProcessing;
    }

]]></Source>
			</Method>
			<Method>
				<Name>readFile</Name>
				<Source><![CDATA[
    protected void readFile()
    {
        throw error(Error::missingOverload(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>readFileClosePreCommit</Name>
				<Source><![CDATA[
    /// <summary>
    /// This code runs at the end of readFile 
    /// It happens prior to the ttsCommit so it's part of the import file transaction
    /// </summary>
    protected boolean readFileClosePreCommit()
    {
        this.setMatchRuleBasedOnMappingRules();
        if(!this.createGL())
        {
            return false;
        }

        if(!this.completeProcessing())
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>readFileClosePostCommit</Name>
				<Source><![CDATA[
    /// <summary>
    /// This code runs at the end of readFile
    /// It happens after the ttsCommit so it is not part of the import file transaction
    /// </summary>
    protected void readFileClosePostCommit()
    {
        // Post CreateGJ
        SKS_BR_ReadFile::postGL(bankHeaderRecId);


        // DDReversal Matching
        SKS_BR_DDRMatching localSKS_BR_DDRMatching = new SKS_BR_DDRMatching();
        localSKS_BR_DDRMatching.matchIntermediate(bankHeaderRecId, true);

        // Matching
        SKS_BR_Matching localSKS_BR_Matching = new SKS_BR_Matching();
        localSKS_BR_Matching.matchIntermediate(bankHeaderRecId, true);

        // Post customer settlements
        SKS_BR_GLPostSettlementOnImport::postSettlementOnImport(bankHeaderRecId);

        // Set status to Complete or Warning
        this.completeFile(); 
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    SKS_BR_BankHeaderRecId run()
    {
        ImportCount = 0;
        this.getSKS_PP_Setup();
    
        if(sks_pp_Setup.BREdition == SKS_BR_Edition::Advanced)
        {
            this.createHeader();
            this.checkDuplicateFile();
        }
        this.readFile();
        if(this.checkDuplicateStatement()) //SKS_BS_BR4_BankStatementDuplicateBlock- changed the code positioning
        {
            return 0;
        }
        return bankHeaderRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBankAccountStatement</Name>
				<Source><![CDATA[
    void setBankAccountStatement(BankAccountStatement _bankAccountStatement)
    {
        bankAccountStatement = _bankAccountStatement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDecimalPlaces</Name>
				<Source><![CDATA[
    void setDecimalPlaces( int Places )
    {
        Decimal_Places = Places;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFileDateTime</Name>
				<Source><![CDATA[
    void setFileDateTime(UtcDateTime _fileDateTime)
    {
        FileDateTime = _fileDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFileName</Name>
				<Source><![CDATA[
    void setFileName(str _fileName)
    {
        FileName = _fileName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFileType</Name>
				<Source><![CDATA[
    void setFileType(SKS_BR_FileType _fileType)
    {
        FileType = _fileType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFormatId</Name>
				<Source><![CDATA[
    void setFormatId(SKS_BR_FormatId _formatId)
    {
        FormatId = _formatId;
    
        // Read the record from the database and set the other properties
        // Omit headers
        // Omit trailers
        // Decimal Places
        sks_br_fileformat = null;
        select * from sks_br_fileformat where sks_br_fileformat.FormatID == formatId
            && sks_br_fileformat.CCR_IsCCRFormat == NoYes::No;  /// SKS_FDD_13903 - To make sure that its picking only non-CCR format
        this.setOmitHeaderRecsNbr( sks_br_fileformat.OmitHeaderRecs );
        this.setOmitTrailerRecsNbr( sks_br_fileformat.OmitTrailerRecs );
        this.setDecimalPlaces( sks_br_fileformat.DecimalPlaces );
    }

]]></Source>
			</Method>
			<Method>
				<Name>setMatchRuleBasedOnMappingRules</Name>
				<Source><![CDATA[
    protected void setMatchRuleBasedOnMappingRules()
    {
        SKS_BR_GLMappingRuleLookup locSKS_BR_GLMappingRuleLookup;
        SKS_BR_GLMappingRuleGroup locSKS_BR_GLMappingRuleGroup;
        SKS_BR_BankTran locSKS_BR_BankTran;
        SKS_PP_Bank     locSKS_PP_Bank;
    
        //We need to take the parsed value and see if it matches any of the possible mapping options,
        //      if the parsedvalue matches any a mapping rule
        //      {
        //          if the mapping rule is an actual mapping behavior
        //              create GL
        //          else if the mapping rule is matching rule
        //              Set the matching rule, and skip GL creation
        //      }
        while select crosscompany AccountId, recid from banktran
        order by banktran.dataAreaId, banktran.AccountId
        where banktran.BankHeaderRecId == bankHeaderRecId
        {
            changeCompany(bankTran.company())
            {
                select firstonly forupdate locSKS_BR_BankTran where locSKS_BR_BankTran.RecId == bankTran.recID;
                if(strLen(locSKS_BR_BankTran.GLMappingRuleGroupId) > 0)
                {
                    //16487
                    select firstonly locSKS_BR_GLMappingRuleGroup
                        where locSKS_BR_GLMappingRuleGroup.RuleGroupId == locSKS_BR_BankTran.GLMappingRuleGroupId
                        && locSKS_BR_GLMappingRuleGroup.CCR_IsCCReconciliation == NoYes::No;

                    if (locSKS_BR_GLMappingRuleGroup.RecId && locSKS_BR_GLMappingRuleGroup.LookupType == SKS_LookupType::Note)
                    {
                        locSKS_BR_GLMappingRuleLookup = SKS_BR_GLProcessing::findLookupValue(locSKS_BR_BankTran.GLMappingRuleGroupId, locSKS_BR_BankTran.TranDescription);
                    }
                    else
                    {
                        locSKS_BR_GLMappingRuleLookup = SKS_BR_GLProcessing::findLookupValue(locSKS_BR_BankTran.GLMappingRuleGroupId, locSKS_BR_BankTran.ParsedValue);
                    }
                    //16487

                    if(locSKS_BR_GLMappingRuleLookup)
                    {
                        if(locSKS_BR_GLMappingRuleLookup.GLMatchOrCreate == SKS_BR_GLMatchOrCreate::CustomerSettlement)
                        {
                            locSKS_PP_Bank = SKS_PP_Bank::find(bankTran.AccountId);
                            select firstonly forupdate locSKS_BR_BankTran where locSKS_BR_BankTran.RecId == bankTran.recID;
                            locSKS_BR_BankTran.GLMatchOrCreate = SKS_BR_GLMatchOrCreate::CustomerSettlement;
                            locSKS_BR_BankTran.MatchingRuleGroupId = locSKS_BR_GLMappingRuleLookup.MatchingRuleGroupId;
                            locSKS_BR_BankTran.update();
                        }
                        else if(locSKS_BR_GLMappingRuleLookup.GLMatchOrCreate == SKS_BR_GLMatchOrCreate::GLMatch)
                        {
                            locSKS_BR_BankTran.MatchingRuleGroupId = locSKS_BR_GLMappingRuleLookup.MatchingRuleGroupId;
                            locSKS_BR_BankTran.GLMatchOrCreate =  SKS_BR_GLMatchOrCreate::GLMatch;
                            locSKS_BR_BankTran.GLMappingRuleGroupId = '';
    
                            locSKS_BR_BankTran.update();
                        }
                        //Temporarily, Sweep Trans need to have Both the GL MAPPIING RULE GROUP ID & THE MATCHING GROUP ID.
                        //  The matching is used to create the sweep sks_br_Banktran records in during GL trans creation.
                        //  The sweeps will be created with no GL Mapping rule, as that is only used for this Concentration trans.
                        //  The Concentration trans will have it's Matching Rule Group ID cleared immediately following creation
                        //      of the Sweep SKS_BR_BankTran records.
                        else if(locSKS_BR_GLMappingRuleLookup.GLMatchOrCreate == SKS_BR_GLMatchOrCreate::GLCreateSweepAndMatchZBA)
                        {
                            locSKS_BR_BankTran.MatchingRuleGroupId = locSKS_BR_GLMappingRuleLookup.MatchingRuleGroupId;
                            locSKS_BR_BankTran.GLMatchOrCreate =  SKS_BR_GLMatchOrCreate::GLCreateSweepAndMatchZBA;
                            locSKS_BR_BankTran.update();
                        }
                        else if(locSKS_BR_GLMappingRuleLookup.GLMatchOrCreate == SKS_BR_GLMatchOrCreate::Manual) //10362:  Manual Lookups populate at GJCreate
                        {
                            locSKS_BR_BankTran.GLMatchOrCreate = SKS_BR_GLMatchOrCreate::Manual;
                            locSKS_BR_BankTran.update();
                        }
                        else if(locSKS_BR_GLMappingRuleLookup.GLMatchOrCreate == SKS_BR_GLMatchOrCreate::DDReversal)
                        {
                            locSKS_BR_BankTran.GLMatchOrCreate =  SKS_BR_GLMatchOrCreate::DDReversal;
                            locSKS_BR_BankTran.DDRMappingRuleGroupId = locSKS_BR_GLMappingRuleLookup.DDRRuleGroupId;
                            locSKS_BR_BankTran.update();
                        }
                        else // Bug 7352: For GLCreate
                        {
                            locSKS_BR_BankTran.GLMatchOrCreate = locSKS_BR_GLMappingRuleLookup.GLMatchOrCreate; // 16487
                            locSKS_BR_BankTran.update();
                        }
                    }
                    else //failed to find a match in the Mapping Lookups.  Use Default action
                    {
                        select firstonly MatchingRuleGroupId,GLMatchOrCreate,DDRRuleGroupId from locSKS_BR_GLMappingRuleGroup
                            where locSKS_BR_GLMappingRuleGroup.RuleGroupId == locSKS_BR_BankTran.GLMappingRuleGroupId
                            && locSKS_BR_GLMappingRuleGroup.CCR_IsCCReconciliation == NoYes::No;    /// SKS_FDD_13903 - To make sure that its picking only non-CCR format
                        if(locSKS_BR_GLMappingRuleGroup.GLMatchOrCreate == SKS_BR_GLMatchOrCreate::CustomerSettlement)
                        {
                            locSKS_PP_Bank = SKS_PP_Bank::find(bankTran.AccountId);
                            select firstonly forupdate locSKS_BR_BankTran where locSKS_BR_BankTran.RecId == bankTran.recID;
                            locSKS_BR_BankTran.GLMatchOrCreate = SKS_BR_GLMatchOrCreate::CustomerSettlement;
                            locSKS_BR_BankTran.update();
                        }
                        else if(locSKS_BR_GLMappingRuleGroup.GLMatchOrCreate == SKS_BR_GLMatchorCreate::GLMatch)
                        {
                            locSKS_BR_BankTran.MatchingRuleGroupId = locSKS_BR_GLMappingRuleGroup.MatchingRuleGroupId;
                            locSKS_BR_BankTran.GLMatchOrCreate = locSKS_BR_GLMappingRuleGroup.GLMatchOrCreate;
                            locSKS_BR_BankTran.GLMappingRuleGroupId = '';
                            locSKS_BR_BankTran.update();
                        }
                        else if(locSKS_BR_GLMappingRuleGroup.GLMatchOrCreate == SKS_BR_GLMatchOrCreate::Manual)  //10362:  Manual Lookups populate at GJCreate
                        {
                            locSKS_BR_BankTran.GLMatchOrCreate = SKS_BR_GLMatchOrCreate::Manual;
                            locSKS_BR_BankTran.update();
                        }
                        else if(locSKS_BR_GLMappingRuleGroup.GLMatchOrCreate == SKS_BR_GLMatchOrCreate::DDReversal)
                        {
                            locSKS_BR_BankTran.DDRMappingRuleGroupId = locSKS_BR_GLMappingRuleGroup.DDRRuleGroupId;
                            locSKS_BR_BankTran.GLMatchOrCreate =  SKS_BR_GLMatchOrCreate::DDReversal;
                            locSKS_BR_BankTran.update();
                        }
                        else // Bug 7352: For GLCreate, GLCreateSweepAndMatchZBA
                        {
                            locSKS_BR_BankTran.GLMatchOrCreate = locSKS_BR_GLMappingRuleGroup.GLMatchOrCreate;
                            locSKS_BR_BankTran.update();
                        }
                    }
                }
                // Bug 7368
                else if(strLen(locSKS_BR_BankTran.MatchingRuleGroupId) > 0)
                {
                    locSKS_BR_BankTran.GLMatchOrCreate =  SKS_BR_GLMatchOrCreate::GLMatch;
                    locSKS_BR_BankTran.update();
                }
            }
    
            locSKS_BR_GLMappingRuleGroup = null;
            locSKS_BR_GLMappingRuleLookup = null;
            locSKS_BR_BankTran = null;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setOmitHeaderRecsNbr</Name>
				<Source><![CDATA[
    void setOmitHeaderRecsNbr(int _omitHeaderRecsNbr)
    {
        OmitHeaderRecsNbr = _omitHeaderRecsNbr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setOmitTrailerRecsNbr</Name>
				<Source><![CDATA[
    void setOmitTrailerRecsNbr(int _omitTrailerRecsNbr)
    {
        OmitTrailerRecsNbr = _omitTrailerRecsNbr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>str2date</Name>
				<Source><![CDATA[
    protected date str2date(str _text, int _sequence)
    {
        date rtnval;
        str value = _text;
    
        if(SKS_PP_StringFormats::strIndexOf(value,' '))
        {
            value = SKS_PP_StringFormats::strSub(value,1,SKS_PP_StringFormats::strIndexOf(value,' ') - 1);
        }
        else if(SKS_PP_StringFormats::strIndexOf(value,'T'))
        {
            value = SKS_PP_StringFormats::strSub(value,1,SKS_PP_StringFormats::strIndexOf(value,'T') - 1);
        }
        else if(SKS_PP_StringFormats::strIndexOf(value,'t'))
        {
            value = SKS_PP_StringFormats::strSub(value,1,SKS_PP_StringFormats::strIndexOf(value,'t') - 1);
        }
    
        rtnval = str2date(value, _sequence);
    
        return rtnval;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBankAccountTrans</Name>
				<Source><![CDATA[
    protected void updateBankAccountTrans()
    {
        ;
        bankAccountTrans.AccountStatement = bankAccountStatement.AccountStatementNum;
        bankAccountTrans.AccountStatementDate = bankAccountStatement.AccountStatementDate;
        bankAccountTrans.Included = 1;
        bankAccountTrans.doUpdate();
    
        bankTran.BookNum = bankTran.BankNum; //Update BookNum to indicate a match was found
        bankTran.AccountStatementNum = bankAccountStatement.AccountStatementNum;
        bankTran.AccountStatementDate = bankAccountStatement.AccountStatementDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateHeader</Name>
				<Source><![CDATA[
    protected void updateHeader(SKS_BR_ImportStatus importStatus, str newPathFile)
    {
        SKS_BR_BankHeader sks_br_bankheader;

        select firstonly forupdate * from sks_br_bankheader where sks_br_bankheader.RecId == bankHeaderRecId;
        sks_br_bankheader.Status = importStatus;
        sks_br_bankheader.Filename = newPathFile;
        sks_br_bankheader.update();

    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAccountId</Name>
				<Source><![CDATA[
    protected boolean validateAccountId(CompanyBankAccountId accountId)
    {
        SKS_PP_Bank sks_pp_bank;
        SKS_BR_File sks_br_file;
        sks_pp_Setup locSKS_PP_Setup;
        str filePath;
    
        select firstonly BRPath, BRBankFabricLocation from locSKS_PP_Setup;
    
        select firstonly * from  sks_pp_bank
         where sks_pp_bank.BankAccountId == accountId;
    
        if(sks_pp_bank && sks_pp_bank.BRFormatID != '')
        {
            sks_br_file = SKS_BR_File::construct(gSKS_BF_BankIntType);
            sks_br_file.setFilePathName(FileName);
            filePath = SKS_BR_File::removeLastPathSlash(sks_br_file.getFilePath());
    
            if(sks_pp_bank.BRFromSetup == 0)
            {
                if(
                    (filepath == sks_pp_bank.BRPath 
                        && gSKS_BF_BankIntType == SKS_BF_BankIntType::FileHubLocal
                    )
                    ||
                    (filepath == sks_pp_bank.BRBankFabricLocation
                        && gSKS_BF_BankIntType == SKS_BF_BankIntType::BankFabric
                    )
                )
                {
                    return true;
                }
            }
            else
            {
                if(
                    (filepath == locSKS_PP_Setup.BRPath
                        && gSKS_BF_BankIntType == SKS_BF_BankIntType::FileHubLocal
                    )
                    ||
                    (filepath == locSKS_PP_Setup.BRBankFabricLocation
                        && gSKS_BF_BankIntType == SKS_BF_BankIntType::BankFabric
                    )
                )
                {
                    return true;
                }
            }
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postGL</Name>
				<Source>
                          <![CDATA[
    public static void postGL(SKS_BR_BankHeaderRecId _SKS_BR_BankHeaderRecId)
    {
        LedgerJournalTable  locLedgerJournalTable;
        LedgerJournalTrans  locLedgerJournalTrans;
        SKS_BR_BankTran     locSKS_BR_BankTran;
        LedgerJournalName   LedgerJournalName;
        SKS_PP_Setup        lSKS_PP_Setup;

        //SKG DEVLEOPMENT NOTE 18908:Due to the possibility of GJ creation being outside
        // the SKS_BR_BankTran's compnay, the SKS_BR_BankTran query and the subsequent
        // ledgerJournalTrans/table joined queries cannot be joined to eachother.
        while select crossCompany GLCreationCompany, LedgerJournalRecId from locSKS_BR_BankTran
                where locSKS_BR_BankTran.BankHeaderRecId == _SKS_BR_BankHeaderRecId &&
                        locSKS_BR_BankTran.GLMappingRuleGroupId != ''
        {
            changecompany(locSKS_BR_BankTran.GLCreationCompany)
            {
                locLedgerJournalTrans = null;
                locLedgerJournalTable = null;
                LedgerJournalName = null;

                while select journalnum from locLedgerJournalTrans
                    where locLedgerJournalTrans.RecId == locSKS_BR_BankTran.LedgerJournalRecId
                join journalnum, JournalName from locLedgerJournalTable
                    group by journalnum, JournalName
                where locLedgerJournalTable.journalnum == locLedgerJournalTrans.journalnum
                    && locLedgerJournalTable.Posted == NoYes::No
                {
                    //SKS_FDD_13662--->
                    lSKS_PP_Setup = null;
                    lSKS_PP_Setup = SKS_PP_Setup::find();

                    boolean isJouranlWFEnabled = false;
                    changecompany(locSKS_BR_BankTran.GLCreationCompany)
                    {
                        select SKS_BR_AutoPost, ApproveActive, WorkflowApproval from LedgerJournalName where LedgerJournalName.JournalName == locLedgerJournalTable.JournalName;
                    }

                    if((ledgerJournalName.ApproveActive == NoYes::Yes || ledgerJournalName.WorkflowApproval == NoYes::Yes))
                    {
                        isJouranlWFEnabled = true;
                    }

                    if(lSKS_PP_Setup.BRAutoSubmitWorkFlow == NoYes::Yes && isJouranlWFEnabled)
                    {
                        LedgerJournalTable newLedgerJournalTable;

                        if(ledgerJournalName.ApproveActive == NoYes::Yes)
                        {
                            changecompany(locSKS_BR_BankTran.GLCreationCompany)
                            {
                                select firstonly forupdate newLedgerJournalTable where newLedgerJournalTable.JournalNum == locLedgerJournalTable.JournalNum;
                            }

                            SKS_BR_ReadFile::SubmitToSimpleApprove(newLedgerJournalTable.RecId);
                        }
                        else
                        {
                            changecompany(locSKS_BR_BankTran.GLCreationCompany)
                            {
                                select firstonly forupdate newLedgerJournalTable where newLedgerJournalTable.JournalNum == locLedgerJournalTable.JournalNum;
                            }

                            SKS_BR_ReadFile::SubmitToWorkFlow(newLedgerJournalTable, newLedgerJournalTable.JournalName);
                        }

                    } //SKS_FDD_13662<---
                    else if(lSKS_PP_Setup.BRAutomaticallyPostGL == NoYes::Yes && !isJouranlWFEnabled)
                    {
                        changecompany(locSKS_BR_BankTran.GLCreationCompany)
                        {
                            select firstonly SKS_BR_AutoPost from LedgerJournalName where LedgerJournalName.JournalName == locLedgerJournalTable.JournalName;
                        }
    
                        if(LedgerJournalName.SKS_BR_AutoPost)
                        {
                            try
                            {
                                LedgerJournalPost::postJournal(locLedgerJournalTable, NoYes::No);
                                SKS_BR_HistoryTable::insertEvent(SKS_BR_Action::GLAutoPosted,_SKS_BR_BankHeaderRecId,'',dateNull(),'',locLedgerJournalTable.JournalNum);
                            }
                            catch
                            {
                                SKS_BR_HistoryTable::insertEvent(SKS_BR_Action::GLAutoPostingFailed,_SKS_BR_BankHeaderRecId,'',dateNull(),'',locLedgerJournalTable.JournalNum,strFmt("@SKS3079", "@SYS25908"));
                            }
                        }
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>SubmitToWorkFlow</Name>
				<Source><![CDATA[
    /// <summary>
    /// SKS_FDD_13662
    /// Auto submitting to workflow
    /// </summary>
    /// <param name = "_LedgerJournalTable">_LedgerJournalTable</param>
    /// <param name = "_JournalName">_JournalName</param>
    public static void SubmitToWorkFlow(LedgerJournalTable    _LedgerJournalTable, LedgerJournalNameId _JournalName)
    {
        LedgerJournalName   lLedgerJournalName;
        WorkflowTable       lWorkflowTable;

        ttsbegin;
        select firstonly * from lLedgerJournalName join lWorkflowTable where lLedgerJournalName.JournalName == _JournalName
                && lLedgerJournalName.Configuration == lWorkflowTable.SequenceNumber;

        WorkflowVersionTable        workflowConfigurationTable;
        workflowConfigurationTable = Workflow::findWorkflowConfigToActivateForType(workFlowTypeStr(LedgerDailyTemplate),
                                                                             _LedgerJournalTable.recid,
                                                                             tableNum(LedgerJournalTable));
        Workflow::activateFromWorkflowConfigurationId(workflowConfigurationTable.ConfigurationId, _LedgerJournalTable.recid, '', NoYes::No);
        _LedgerJournalTable.WorkflowApprovalStatus = LedgerJournalWFApprovalStatus::Submitted;
        _LedgerJournalTable.update();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefaultMatchGroup</Name>
				<Source><![CDATA[
    // Sets the default matching rule group id if no matching rule group or GL mapping rule is set
    public static void setDefaultMatchGroup(SKS_BR_BankTran _sks_br_banktran)
    {
        SKS_BR_MatchingRulesMast SKS_BR_MatchingRulesMast;
    
        if(_sks_br_banktran.MatchingRuleGroupId == '' && _sks_br_banktran.GLMappingRuleGroupId == '')
        {
            if(_sks_br_banktran.TranAmount > 0)
            {
                select firstonly SKS_BR_MatchingRulesMast where
                    SKS_BR_MatchingRulesMast.DefaultCredit == NoYes::Yes
                    && SKS_BR_MatchingRulesMast.CCR_IsCCReconciliation == NoYes::No;   /// SKS_FDD_13903 - To make sure that its picking only non-CCR format
            }
            else
            {
                select FirstOnly SKS_BR_MatchingRulesMast where
                    SKS_BR_MatchingRulesMast.DefaultDebit == NoYes::Yes
                    && SKS_BR_MatchingRulesMast.CCR_IsCCReconciliation == NoYes::No;  /// SKS_FDD_13903 To make sure that its picking only non-CCR format
            }
            if(SKS_BR_MatchingRulesMast)
            {
                _sks_br_banktran.MatchingRuleGroupId = SKS_BR_MatchingRulesMast.RuleGroupId;
                _sks_br_banktran.MatchDefaultRule = NoYes::Yes;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setGLCreationCompanyAndJournal</Name>
				<Source><![CDATA[
    private static void setGLCreationCompanyAndJournal(SKS_BR_BankHeaderRecId _SKS_BR_BankheaderRecId)
    {
        SKS_BR_BankTran locSKS_BR_BankTran;
        SKS_PP_Setup    locSKS_PP_Setup;
        SKS_BR_BankTran locSKS_BR_BankTranUpdate;
        ;

        //The Creation Company and Journal
        while select crossCompany dataareaid from locSKS_BR_BankTran
            group by locSKS_BR_BankTran.dataareaid
            where locSKS_BR_BankTran.BankHeaderRecId == _SKS_BR_BankheaderRecid
        {
            changeCompany(locSKS_BR_BankTran.company())
            {
                locSKS_PP_Setup = null;
                locSKS_BR_BankTranUpdate = null;
                select firstonly BRManualJournalName,BRGLCreationCompany,BRJournalName from locSKS_PP_Setup;
                update_recordset locSKS_BR_BankTranUpdate
                setting
                    GLCreationCompany = locSKS_PP_Setup.BRGLCreationCompany,
                    JournalName = locSKS_PP_Setup.BRJournalName,
                    ManualJournalName  = locSKS_PP_Setup.BRManualJournalName
                where locSKS_BR_BankTranUpdate.BankHeaderRecId == _SKS_BR_BankheaderRecId;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateImportHitRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Import Hit Rate is updated here
    /// </summary>
    /// 7653 - CR
    public static void updateImportHitRate(SKS_BR_BankHeaderRecId _SKS_BR_BankHeaderRecId)
    {        
        BankAccountStatement locBankAccountStatement;
        int64 totalImported;
        int64 totalMatched;
        SKS_BR_BankTran locBankTran;
        BankAccountStatement locBankAccountStatementUpt;

        while select crosscompany locBankAccountStatement where locBankAccountStatement.SKS_BR_BankHeaderRecId == _SKS_BR_BankHeaderRecId
        {
            changecompany(locBankAccountStatement.company())
            {
                select count(RecId) from locBankTran where locBankTran.BankHeaderRecId == _SKS_BR_BankHeaderRecId; //7653
                totalImported = locBankTran.RecId;

                select count(RecId) from locBankTran where locBankTran.BankHeaderRecId == _SKS_BR_BankHeaderRecId && locBankTran.Matched == NoYes::Yes; //7653
                totalMatched  = locBankTran.RecId;
              
                ttsBegin;        
              
                if(totalImported > 0)
                {
                    locBankAccountStatementUpt = locBankAccountStatement;
                    locBankAccountStatementUpt.selectForUpdate(true);
                    locBankAccountStatementUpt.SKS_BR_ImportHitRate = (totalMatched / totalImported) * 100;
                    locBankAccountStatementUpt.update();
                }
                ttsCommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDuplicateStatement</Name>
				<Source><![CDATA[
    /// <summary>
    ///check for duplicate statement
    /// </summary>
    // 7527 and SKS_BS_BR4_BankStatementDuplicateBlock
    private boolean checkDuplicateStatement()
    {        
        SKS_PP_Bank             locSKS_PP_Bank;
        SKS_BR_HistoryTable     sks_BR_HistoryTable,sks_BR_HistoryTableLoc;
        BankAccountStatement    locBankAccountStatement;
               
        select firstonly sks_BR_HistoryTable where
            sks_BR_HistoryTable.BankHeaderRecId == bankHeaderRecId;

        select firstonly sks_BR_HistoryTableLoc where
            sks_BR_HistoryTableLoc.BankHeaderRecId == bankHeaderRecId &&
            sks_BR_HistoryTableLoc.Action == SKS_BR_Action::BankStatementAutoCreated;
    
        select firstonly locBankAccountStatement where locBankAccountStatement.AccountStatementNum == sks_BR_HistoryTable.AccountStatementNum
                                                        && locBankAccountStatement.AccountId == sks_BR_HistoryTable.AccountID
                                                        && locBankAccountStatement.AccountStatementDate == sks_BR_HistoryTable.AccountStatementDate
                                                        && locBankAccountStatement.SKS_BR_BankHeaderRecId != sks_BR_HistoryTable.BankHeaderRecId;
        if(locBankAccountStatement)
        {
            if (sks_BR_HistoryTable && !sks_BR_HistoryTableLoc)
            {
                // Bug: 15754
                // In some derived classes like "SKS_BR_ReadFileBAI2", checkDuplicateStatement method invokes multiple times.
                // (SKS_BR_ReadFileBAI2 > readFile > readFileClosePreCommit > completeProcessing)
                // No need to handle error again. This condition will prevent to access FileHub/Bank Fabric twice.
                // Bank header record status updated.
                if (duplicateStatementErrorHandled
                    && sks_pp_Setup.BREdition == SKS_BR_Edition::Advanced)
                {
                    SKS_BR_BankHeader   bankHeader;
                    select firstonly crossCompany bankHeader where bankHeader.RecId == bankHeaderRecId;

                    if (bankHeader)
                    {
                        changecompany(bankHeader.company())
                        {
                            bankHeader.selectForUpdate(true);

                            ttsbegin;
                            bankHeader.Status = SKS_BR_ImportStatus::Error;
                            bankHeader.update();
                            ttscommit;
                        }
                    }
                }
                else
                {
                    //Status:Error
                    this.handleError(bankHeaderRecId, strFmt("@SKS4395",
                                                        date2str(locBankAccountStatement.AccountStatementDate,-1,-1,-1,-1,-1,-1,DateFlags::None),
                                                        locBankAccountStatement.AccountStatementNum, locSKS_PP_Bank.company(),
                                                        locBankAccountStatement.AccountId), 0);

                    duplicateStatementErrorHandled = true;
                }
            }
            else
            {
                //Status:Completed with Errors
                this.handleCompletedError(bankHeaderRecId, strFmt("@SKS4395",
                                                        date2str(locBankAccountStatement.AccountStatementDate,-1,-1,-1,-1,-1,-1,DateFlags::None),
                                                        locBankAccountStatement.AccountStatementNum, locSKS_PP_Bank.company(),
                                                        locBankAccountStatement.AccountId), 0);
            }
            return true;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parseRefernceNumber</Name>
				<Source><![CDATA[
    protected str parseRefernceNumber(str _ReferenceNumber)
    {
        SKS_BR_FileFormat locSKS_BR_FileFormat;
        
        select firstonly DataAreaID, RecID, RemoveLeadingZeros from locSKS_BR_FileFormat
            where locSKS_BR_FileFormat.FormatID == FormatID
            && locSKS_BR_FileFormat.CCR_IsCCRFormat == NoYes::No;   /// SKS_FDD_13903 - To make sure that its picking only non-CCR format
        if(locSKS_BR_FileFormat)
        {
            if(locSKS_BR_FileFormat.RemoveLeadingZeros)
            {
                return SKS_PP_StringFormats::strLTrimZeroes(global::strLRTrim(_ReferenceNumber));
            }
            else
            {
                return global::strLRTrim(_ReferenceNumber);
            }
        }
        else
        {
            return SKS_PP_StringFormats::strLTrimZeroes(global::strLRTrim(_ReferenceNumber));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCreditCardReconciliationExtensionLines_delegate</Name>
				<Source><![CDATA[
    delegate void createCreditCardReconciliationExtensionLines_delegate(SKS_BR_BankHeaderRecId _BankHeaderRecId, EventHandlerResult _EventHandlerResult)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCreditCardReconciliationExtensionLines</Name>
				<Source><![CDATA[
    protected str createCreditCardReconciliationExtensionLines(SKS_BR_BankHeaderRecId _BankHeaderRecId)
    {
        EventHandlerResult EventHandlerResult = new EventHandlerResult();

        if(SKS_PP_Setup.ModCCReconciliationExtensions)
        {
            this.createCreditCardReconciliationExtensionLines_delegate(_BankHeaderRecId, EventHandlerResult);
        }
        return EventHandlerResult.result();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDDRReasonCode</Name>
				<Source><![CDATA[
    public static server RefRecId getDDRReasonCode(SKS_EFT_ReasonCode _ReasonCode, SKS_EFT_ReasonCodeDesc _ReasonCodeDesc)
    {
        SKS_BR_DDRReasonCodes lSKS_BR_DDRReasonCodes;

        if(_ReasonCode)
        {
            select firstonly lSKS_BR_DDRReasonCodes where
                lSKS_BR_DDRReasonCodes.ReasonCode == _ReasonCode;

            if(!lSKS_BR_DDRReasonCodes)
            {
                lSKS_BR_DDRReasonCodes.Origin = SKS_EFT_Origin::Added;
                lSKS_BR_DDRReasonCodes.ReasonCode = _ReasonCode;
                if(strLen(_ReasonCodeDesc) > 0)
                {
                    lSKS_BR_DDRReasonCodes.ReasonDesc = _ReasonCodeDesc;
                }
                else
                {
                    lSKS_BR_DDRReasonCodes.ReasonDesc = "@SKS2830";
                }
                lSKS_BR_DDRReasonCodes.insert();
            }
        }

        return lSKS_BR_DDRReasonCodes.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>SubmitToSimpleApprove</Name>
				<Source><![CDATA[
    /// <summary>
    /// SKS_FDD_13662
    /// Submitting journal to Approval
    /// </summary>
    /// <param name = "_LedgerJournalTableRecId">RecId</param>
    public static void SubmitToSimpleApprove(RecId    _LedgerJournalTableRecId)
    {
        LedgerJournalTable  newLedgerJournalTable;

        newLedgerJournalTable = null;

        ttsbegin;
        select firstonly forupdate newLedgerJournalTable where newLedgerJournalTable.RecId == _LedgerJournalTableRecId;

        newLedgerJournalTable.markReportAsReady();
        newLedgerJournalTable.update();
        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>