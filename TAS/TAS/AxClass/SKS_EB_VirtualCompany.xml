<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EB_VirtualCompany</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_EB_VirtualCompany
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getBankRecCompanies</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the company accounts in the <c>OMHierarchyType</c> table that are associated with the
    ///    eBanking Bank Reconciliation <c>HierarchyPurpose</c> for the specified company account.
    ///    If no hierarchy is associated, it will attempt to load based on virtual company.  This supports
    ///    backward compatibility.
    /// </summary>
    /// <returns>
    ///    A container of company accounts.
    /// </returns>
    /// <remarks>
    ///    If no company is found, the current company will be used
    /// </remarks>
    public static client server container getBankRecCompanies()
    {
        OMExplodedOrganizationSecurityGraph explodedOrg;
        OMHierarchyType omHierarchyType;
        CompanyInfo companyInfo;
        recId omHierarchyTypeRecId;
        container companies;
        Array organizationHierarchyRecIds;
        int arrayLength;
        utcdatetime currentClientSessionDateTime = DateTimeUtil::applyTimeZoneOffset(DateTimeUtil::getSystemDateTime(), DateTimeUtil::getUserPreferredTimeZone());
        //date currentClientSessionDate = DateTimeUtil::date(currentClientSessionDateTime);

        // Get the first OMHiearchyType where the purpose is BankRec and that
        //  also contains this companyId legal entity.
        organizationHierarchyRecIds = OMMultipleHierarchy::FindOrganizationHierarchies(
            CompanyInfo::findDataArea(curExt()).RecId,
            HierarchyPurpose::SKS_BRControl,
            DateTimeUtil::getSystemDateTime(),
            DateTimeUtil::maxValue());

        // There should be at most one hierarchy assigned to a Bank Reconciliation purpose that contains any
        //  particular legal entity
        arrayLength = organizationHierarchyRecIds.lastIndex();
        Debug::assert(arrayLength == 0 || arrayLength == 1);

        // If the array is populated, meaning there is a BankRec org model hierarchy,
        //  then cache the RecId locally for this method.
        if (arrayLength)
        {
            omHierarchyTypeRecId = organizationHierarchyRecIds.value(1);
        }

        if (omHierarchyTypeRecId)
        {
            // Then grab all of the Legal Entities that are part of this hierarchy.
            while select validtimestate(currentClientSessionDateTime) RecId from explodedOrg
                    where explodedOrg.Distance == 0
                join Name from omHierarchyType
                    where explodedOrg.omHierarchyType == omHierarchyType.RecId
                        && omHierarchyType.RecId == omHierarchyTypeRecId
                join DataArea from companyInfo
                    where companyInfo.RecId == explodedOrg.Organization
            {
                companies += companyInfo.DataArea;
            }
        }

        if (!companies)
        {
            companies = SKS_EB_VirtualCompany::getBankRecCompaniesVC();
            if(!companies)
            {
                companies += curExt();
            }
        }

        return companies;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankRecCompaniesVC</Name>
				<Source><![CDATA[
    static container getBankRecCompaniesVC()
    {
        SKS_BR_FileFormat sks_br_Fileformat;
        VirtualDataAreaList virtualDataAreaList;
        Container companies;
        ;
        // Get company id from any file format in this company
        // If table is in table collection in a virtual company, the company id will be the virtual company id
        select firstonly * from sks_br_fileformat;

        // Use company id from file format to determine if in a virtual company
        // If true, get list of companies in virtual company
        while select * from virtualDataAreaList
         where virtualDataAreaList.virtualDataArea == sks_br_fileformat.dataareaid
        {
            companies += virtualDataAreaList.Id;
        }

        return companies;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPayLinkCompanies</Name>
				<Source><![CDATA[
    /// <remarks>
    ///    If no company is found, the current company will be used
    /// </remarks>
    public static client server container getPayLinkCompanies()
    {
        OMExplodedOrganizationSecurityGraph explodedOrg;
        OMHierarchyType omHierarchyType;
        CompanyInfo companyInfo;
        recId omHierarchyTypeRecId;
        container companies;
        Array organizationHierarchyRecIds;
        int arrayLength;
        utcdatetime currentClientSessionDateTime = DateTimeUtil::applyTimeZoneOffset(DateTimeUtil::getSystemDateTime(), DateTimeUtil::getUserPreferredTimeZone());
        //date currentClientSessionDate = DateTimeUtil::date(currentClientSessionDateTime);
        // Get the first OMHiearchyType where the purpose is PositivePay and that
        //  also contains this companyId legal entity.
        organizationHierarchyRecIds = OMMultipleHierarchy::FindOrganizationHierarchies(
            CompanyInfo::findDataArea(curExt()).RecId,
            HierarchyPurpose::SKS_PLControl,
            DateTimeUtil::getSystemDateTime(),
            DateTimeUtil::maxValue());
        // There should be at most one hierarchy assigned to a Positive Pay purpose that contains any
        //  particular legal entity
        arrayLength = organizationHierarchyRecIds.lastIndex();
        Debug::assert(arrayLength == 0 || arrayLength == 1);
        // If the array is populated, meaning there is a PositivePay org model hierarchy,
        //  then cache the RecId locally for this method.
        if (arrayLength)
        {
            omHierarchyTypeRecId = organizationHierarchyRecIds.value(1);
        }
        if (omHierarchyTypeRecId)
        {
            // Then grab all of the Legal Entities that are part of this hierarchy.
            while select validtimestate(currentClientSessionDateTime) RecId from explodedOrg
                    where explodedOrg.Distance == 0
                join Name from omHierarchyType
                    where explodedOrg.omHierarchyType == omHierarchyType.RecId
                        && omHierarchyType.RecId == omHierarchyTypeRecId
                join DataArea from companyInfo
                    where companyInfo.RecId == explodedOrg.Organization
            {
                companies += companyInfo.DataArea;
            }
        }
        if (!companies)
        {
            companies += curExt();
        }
        return companies;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPosPayCompanies</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the company accounts in the <c>OMHierarchyType</c> table that are associated with the
    ///    eBanking Positive Pay <c>HierarchyPurpose</c> for the specified company account.
    ///    If no hierarchy is associated, it will attempt to load based on virtual company.  This supports
    ///    backward compatibility.
    /// </summary>
    /// <returns>
    ///    A container of company accounts.
    /// </returns>
    /// <remarks>
    ///    If no company is found, the current company will be used
    /// </remarks>
    public static client server container getPosPayCompanies()
    {
        OMExplodedOrganizationSecurityGraph explodedOrg;
        OMHierarchyType omHierarchyType;
        CompanyInfo companyInfo;
        recId omHierarchyTypeRecId;
        container companies;
        Array organizationHierarchyRecIds;
        int arrayLength;
        utcdatetime currentClientSessionDateTime = DateTimeUtil::applyTimeZoneOffset(DateTimeUtil::getSystemDateTime(), DateTimeUtil::getUserPreferredTimeZone());
        //date currentClientSessionDate = DateTimeUtil::date(currentClientSessionDateTime);

        // Get the first OMHiearchyType where the purpose is PositivePay and that
        //  also contains this companyId legal entity.
        organizationHierarchyRecIds = OMMultipleHierarchy::FindOrganizationHierarchies(
            CompanyInfo::findDataArea(curExt()).RecId,
            HierarchyPurpose::SKS_PPControl,
            DateTimeUtil::getSystemDateTime(),
            DateTimeUtil::maxValue());

        // There should be at most one hierarchy assigned to a Positive Pay purpose that contains any
        //  particular legal entity
        arrayLength = organizationHierarchyRecIds.lastIndex();
        Debug::assert(arrayLength == 0 || arrayLength == 1);

        // If the array is populated, meaning there is a PositivePay org model hierarchy,
        //  then cache the RecId locally for this method.
        if (arrayLength)
        {
            omHierarchyTypeRecId = organizationHierarchyRecIds.value(1);
        }

        if (omHierarchyTypeRecId)
        {
            // Then grab all of the Legal Entities that are part of this hierarchy.
            while select validtimestate(currentClientSessionDateTime) RecId from explodedOrg
                    where explodedOrg.Distance == 0
                join Name from omHierarchyType
                    where explodedOrg.omHierarchyType == omHierarchyType.RecId
                        && omHierarchyType.RecId == omHierarchyTypeRecId
                join DataArea from companyInfo
                    where companyInfo.RecId == explodedOrg.Organization
            {
                companies += companyInfo.DataArea;
            }
        }

        if (!companies)
        {
            companies = SKS_EB_VirtualCompany::getPosPayCompaniesVC();
            if(!companies)
            {
                companies += curExt();
            }
        }

        return companies;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPosPayCompaniesVC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the companies associated with the Virtual company for Positive Pay
    /// </summary>
    /// <returns>
    /// A container of company accounts.
    /// </returns>
    /// <remarks>
    /// If no company is found, the current company will be used
    /// </remarks>

    static container getPosPayCompaniesVC()
    {
        SKS_PP_FileFormat sks_pp_Fileformat;
        VirtualDataAreaList virtualDataAreaList;
        Container companies;
        ;
        // Get company id from any file format in this company
        // If table is in table collection in a virtual company, the company id will be the virtual company id
        select firstonly * from sks_pp_fileformat;

        // Use company id from file format to determine if in a virtual company
        // If true, get list of companies in virtual company
        while select * from virtualDataAreaList
         where virtualDataAreaList.virtualDataArea == sks_pp_fileformat.dataareaid
        {
            companies += virtualDataAreaList.Id;
        }

        return companies;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEFT_APMultiCompanies</Name>
				<Source><![CDATA[
    // SKS_FDD_10950 -->
    /// <summary>
    ///    Finds the company accounts in the <c>OMHierarchyType</c> table that are associated with the
    ///    TAS AP EFT+ multi-company payments<c>SKS_EFT_APMultiCompany</c> for the specified company account.
    ///    If no hierarchy is associated, it will attempt to load based on virtual company.  This supports
    ///    backward compatibility.
    /// </summary>
    /// <returns>
    ///    A container of company accounts.
    /// </returns>
    /// <remarks>
    ///    If no company is found, the current company will be used
    /// </remarks>
    public static client server container getEFT_APMultiCompanies()
    {
        OMExplodedOrganizationSecurityGraph explodedOrg;
        OMHierarchyType omHierarchyType;
        CompanyInfo companyInfo;
        recId omHierarchyTypeRecId;
        container companies;
        Array organizationHierarchyRecIds;
        int arrayLength;
        utcdatetime currentClientSessionDateTime = DateTimeUtil::applyTimeZoneOffset(DateTimeUtil::getSystemDateTime(), DateTimeUtil::getUserPreferredTimeZone());
        //date currentClientSessionDate = DateTimeUtil::date(currentClientSessionDateTime);

        // Get the first OMHiearchyType where the purpose is TAS AP EFT+ multi-company payments and that
        //  also contains this companyId legal entity.
        organizationHierarchyRecIds = OMMultipleHierarchy::FindOrganizationHierarchies(
            CompanyInfo::findDataArea(curExt()).RecId,
            HierarchyPurpose::SKS_EFT_APMultiCompany,
            DateTimeUtil::getSystemDateTime(),
            DateTimeUtil::maxValue());

        // There should be at most one hierarchy assigned to a Positive Pay purpose that contains any
        //  particular legal entity
        arrayLength = organizationHierarchyRecIds.lastIndex();
        Debug::assert(arrayLength == 0 || arrayLength == 1);

        // If the array is populated, meaning there is a PositivePay org model hierarchy,
        //  then cache the RecId locally for this method.
        if (arrayLength)
        {
            omHierarchyTypeRecId = organizationHierarchyRecIds.value(1);
        }

        if (omHierarchyTypeRecId)
        {
            // Then grab all of the Legal Entities that are part of this hierarchy.
            while select validtimestate(currentClientSessionDateTime) RecId from explodedOrg
                    where explodedOrg.Distance == 0
                join Name from omHierarchyType
                    where explodedOrg.omHierarchyType == omHierarchyType.RecId
                        && omHierarchyType.RecId == omHierarchyTypeRecId
                join DataArea from companyInfo
                    where companyInfo.RecId == explodedOrg.Organization
            {
                companies += companyInfo.DataArea;
            }
        }

        /*if (!companies)
        {
            companies = SKS_EB_VirtualCompany::getPosPayCompaniesVC();
            if(!companies)
            {
                companies += curExt();
            }
        }*/

        return companies;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDDMultiCompanies</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the company accounts in the <c>OMHierarchyType</c> table that are associated with the
    ///    TAS Direct debit multi-company payments<c>HierarchyPurpose</c> for the specified company account.
    ///    If no hierarchy is associated, it will attempt to load based on virtual company.  This supports
    ///    backward compatibility.
    /// </summary>
    /// <returns>
    ///    A container of company accounts.
    /// </returns>
    /// <remarks>
    ///    If no company is found, the current company will be used
    /// </remarks>
    public static client server container getDDMultiCompanies()
    {
        OMExplodedOrganizationSecurityGraph explodedOrg;
        OMHierarchyType omHierarchyType;
        CompanyInfo companyInfo;
        recId omHierarchyTypeRecId;
        container companies;
        Array organizationHierarchyRecIds;
        int arrayLength;
        utcdatetime currentClientSessionDateTime = DateTimeUtil::applyTimeZoneOffset(DateTimeUtil::getSystemDateTime(), DateTimeUtil::getUserPreferredTimeZone());
        //date currentClientSessionDate = DateTimeUtil::date(currentClientSessionDateTime);

        // Get the first OMHiearchyType where the purpose is TAS Direct debit multi-company payments and that
        //  also contains this companyId legal entity.
        organizationHierarchyRecIds = OMMultipleHierarchy::FindOrganizationHierarchies(
            CompanyInfo::findDataArea(curExt()).RecId,
            HierarchyPurpose::SKS_DD_MultiCompany,
            DateTimeUtil::getSystemDateTime(),
            DateTimeUtil::maxValue());

        // There should be at most one hierarchy assigned to a TAS Direct debit multi-company payments purpose that contains any
        //  particular legal entity
        arrayLength = organizationHierarchyRecIds.lastIndex();
        Debug::assert(arrayLength == 0 || arrayLength == 1);

        // If the array is populated, meaning there is a PositivePay org model hierarchy,
        //  then cache the RecId locally for this method.
        if (arrayLength)
        {
            omHierarchyTypeRecId = organizationHierarchyRecIds.value(1);
        }

        if (omHierarchyTypeRecId)
        {
            // Then grab all of the Legal Entities that are part of this hierarchy.
            while select validtimestate(currentClientSessionDateTime) RecId from explodedOrg
                    where explodedOrg.Distance == 0
                join Name from omHierarchyType
                    where explodedOrg.omHierarchyType == omHierarchyType.RecId
                        && omHierarchyType.RecId == omHierarchyTypeRecId
                join DataArea from companyInfo
                    where companyInfo.RecId == explodedOrg.Organization
            {
                companies += companyInfo.DataArea;
            }
        }

        /*if (!companies)
        {
            companies = SKS_EB_VirtualCompany::getPosPayCompaniesVC();
            if(!companies)
            {
                companies += curExt();
            }
        }*/

        return companies;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLockboxBankRecCompanies</Name>
				<Source><![CDATA[
    // SKS_FDD_10950 <--

    public static container getLockboxBankRecCompanies()
    {
        CompanyInfo companyInfo;
        Set companiesSet = new Set(Types::String);
        container companies;

        while select DataArea from companyInfo
        {
            changecompany(CompanyInfo.DataArea)
            {
                SKS_PP_Setup setup;
                select firstonly RecId from setup where setup.ModLockbox == NoYes::Yes || setup.ModBR == NoYes::Yes;

                if(setup.RecId)
                {
                    //We need all companies in the hierarchy (or just the setup company) because not every
                    //  company in the hierarchy will have a setup record.
                    container hier = CustVendOpenTransManager::findSharedServiceCompanies(setup.company());

                    //ensures that each company is only added once
                    for(int i = 1; i <= conLen(hier); i++)
                    {
                        if(!companiesSet.in(conPeek(hier,i)))
                        {
                            companiesSet.add(conPeek(hier,i));
                            companies += conPeek(hier,i);
                        }
                    }
                }
            }
        }

        //Returns an empty container if no companies have lockbox or bankrec enabled
        return companies;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCCRRecCompanies</Name>
				<Source><![CDATA[
    //SKS_VSTS_13903 Begin

    /// <summary>
    ///    Finds the company accounts in the <c>OMHierarchyType</c> table that are associated with the
    ///    Credit Card Reconciliation <c>HierarchyPurpose</c> for the specified company account.
    ///    If no hierarchy is associated, it will attempt to load based on virtual company.  This supports
    ///    backward compatibility.
    /// </summary>
    /// <returns>
    ///    A container of company accounts.
    /// </returns>
    /// <remarks>
    ///    If no company is found, the current company will be used
    /// </remarks>
    public static client server container getCCRRecCompanies()
    {
        OMExplodedOrganizationSecurityGraph explodedOrg;
        OMHierarchyType omHierarchyType;
        CompanyInfo companyInfo;
        recId omHierarchyTypeRecId;
        container companies;
        Array organizationHierarchyRecIds;
        int arrayLength;
        utcdatetime currentClientSessionDateTime = DateTimeUtil::applyTimeZoneOffset(DateTimeUtil::getSystemDateTime(), DateTimeUtil::getUserPreferredTimeZone());
        //date currentClientSessionDate = DateTimeUtil::date(currentClientSessionDateTime);

        // Get the first OMHiearchyType where the purpose is Credit Card Rec and that
        //  also contains this companyId legal entity.
        organizationHierarchyRecIds = OMMultipleHierarchy::FindOrganizationHierarchies(
            CompanyInfo::findDataArea(curExt()).RecId,
            HierarchyPurpose::SKS_CCRControl,
            DateTimeUtil::getSystemDateTime(),
            DateTimeUtil::maxValue());

        // There should be at most one hierarchy assigned to a Credit Card Reconciliation purpose that contains any
        //  particular legal entity
        arrayLength = organizationHierarchyRecIds.lastIndex();
        Debug::assert(arrayLength == 0 || arrayLength == 1);

        // If the array is populated, meaning there is a BankRec org model hierarchy,
        //  then cache the RecId locally for this method.
        if (arrayLength)
        {
            omHierarchyTypeRecId = organizationHierarchyRecIds.value(1);
        }

        if (omHierarchyTypeRecId)
        {
            // Then grab all of the Legal Entities that are part of this hierarchy.
            while select validtimestate(currentClientSessionDateTime) RecId from explodedOrg
                    where explodedOrg.Distance == 0
                join Name from omHierarchyType
                    where explodedOrg.omHierarchyType == omHierarchyType.RecId
                        && omHierarchyType.RecId == omHierarchyTypeRecId
                join DataArea from companyInfo
                    where companyInfo.RecId == explodedOrg.Organization
            {
                companies += companyInfo.DataArea;
            }
        }

        if (!companies)
        {
            companies = SKS_EB_VirtualCompany::getCCRRecCompaniesVC();
            if(!companies)
            {
                companies += curExt();
            }
        }

        return companies;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCCRRecCompaniesVC</Name>
				<Source><![CDATA[
    static container getCCRRecCompaniesVC()
    {
        SKS_BR_FileFormat sks_br_Fileformat;
        VirtualDataAreaList virtualDataAreaList;
        Container companies;
        ;
        // Get company id from any file format in this company
        // If table is in table collection in a virtual company, the company id will be the virtual company id
        select firstonly * from sks_br_fileformat;

        // Use company id from file format to determine if in a virtual company
        // If true, get list of companies in virtual company
        while select * from virtualDataAreaList
         where virtualDataAreaList.virtualDataArea == sks_br_fileformat.dataareaid
        {
            companies += virtualDataAreaList.Id;
        }

        return companies;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPRAInvoiceMatchCompanies</Name>
				<Source><![CDATA[
    //SKS_FDD_13903 End

    //SKS_DevOps_21921 Begin

    /// <summary>
    ///    Finds the company accounts in the <c>OMHierarchyType</c> table that are associated with the
    ///    TAS AR Invoice match <c>HierarchyPurpose</c> for the specified company account.
    ///    If no hierarchy is associated, it will attempt to load based on virtual company.  This supports
    ///    backward compatibility.
    /// </summary>
    /// <returns>
    ///    A container of company accounts.
    /// </returns>
    /// <remarks>
    ///    If no company is found, the current company will be used
    /// </remarks>
    public static client server container getPRAInvoiceMatchCompanies()
    {
        OMExplodedOrganizationSecurityGraph explodedOrg;
        OMHierarchyType omHierarchyType;
        CompanyInfo companyInfo;
        recId omHierarchyTypeRecId;
        container companies;
        Array organizationHierarchyRecIds;
        int arrayLength;
        utcdatetime currentClientSessionDateTime = DateTimeUtil::applyTimeZoneOffset(DateTimeUtil::getSystemDateTime(), DateTimeUtil::getUserPreferredTimeZone());
        //date currentClientSessionDate = DateTimeUtil::date(currentClientSessionDateTime);

        // Get the first OMHiearchyType where the purpose is TAS AR Invoice match and that
        //  also contains this companyId legal entity.
        organizationHierarchyRecIds = OMMultipleHierarchy::FindOrganizationHierarchies(
            CompanyInfo::findDataArea(curExt()).RecId,
            HierarchyPurpose::SKS_PRA_InvoiceMatch,
            DateTimeUtil::getSystemDateTime(),
            DateTimeUtil::maxValue());

        // There should be at most one hierarchy assigned to a TAS AR Invoice match purpose that contains any
        //  particular legal entity
        arrayLength = organizationHierarchyRecIds.lastIndex();
        Debug::assert(arrayLength == 0 || arrayLength == 1);

        // If the array is populated, meaning there is a BankRec org model hierarchy,
        //  then cache the RecId locally for this method.
        if (arrayLength)
        {
            omHierarchyTypeRecId = organizationHierarchyRecIds.value(1);
        }

        if (omHierarchyTypeRecId)
        {
            // Then grab all of the Legal Entities that are part of this hierarchy.
            while select validtimestate(currentClientSessionDateTime) RecId from explodedOrg
                    where explodedOrg.Distance == 0
                join Name from omHierarchyType
                    where explodedOrg.omHierarchyType == omHierarchyType.RecId
                        && omHierarchyType.RecId == omHierarchyTypeRecId
                join DataArea from companyInfo
                    where companyInfo.RecId == explodedOrg.Organization
            {
                companies += companyInfo.DataArea;
            }
        }

        if (!companies)
        {
            if(!companies)
            {
                companies += curExt();
            }
        }

        return companies;
    }

    //SKS_DevOps_21921 End

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>