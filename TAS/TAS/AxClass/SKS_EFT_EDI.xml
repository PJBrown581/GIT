<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_EDI</Name>
	<SourceCode>
		<Declaration><![CDATA[
// Class for EDI 820 support
class SKS_EFT_EDI
{
    str mErrorText;
    SKS_EFT_FormatId mFormatId;
    PaymSpec mPaymSpec;
    CompanyName mCompanyName;
    RefRecId mFileRecId;
    SKS_EFTAP_File mSKS_EFT_File;
    UserId mUserId;
    str mEFTFileId;
    int mFunctionalGroupCount;
    int mTranSetCount;
    SKS_EFT_EDI820 mSKS_EFT_EDI820;
    RecordViewCache mRecordViewCacheDetail;
    RecordViewCache mRecordViewCacheGroup;
    VendTrans mVendTrans;
    ReasonTableRef mReasonTableRef;
    int mDataOccurrence;

    #define.wrapChar('~')
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>build_CTX</Name>
				<Source><![CDATA[
    public str build_CTX(SKS_EFT_FileDetail _sks_eft_filedetail)
    {
        str ret;
        boolean success;
        SKS_EFT_EDI_Validate sks_eft_edi_validate;
        ;
        mDataOccurrence = 0;
    
        this.delete_Data('',_sks_eft_filedetail); //FDD-10590
    
        success = this.createData_Header_ISA(_sks_eft_filedetail);
    
        if(success)
        {
            success = this.createData_Header_GS(_sks_eft_filedetail);
        }
    
        if(success)
        {
            success = this.createData_Header_ST(_sks_eft_filedetail);
        }
    
        if(success)
        {
            success = this.createData_Detail_Payment(_sks_eft_filedetail);
        }
    
        if(success)
        {
            success = this.createData_Trailer_SE(_sks_eft_filedetail);
        }
    
        if(success)
        {
            success = this.createData_Trailer_GE(_sks_eft_filedetail);
        }
    
        if(success)
        {
            success = this.createData_Trailer_IEA(_sks_eft_filedetail);
        }
    
        if(success)
        {
            sks_eft_edi_validate = new SKS_EFT_EDI_Validate(mFileRecId, mUserId);
            success = sks_eft_edi_validate.validate();
            if(!success)
            {
                mErrorText = sks_eft_edi_validate.getErrorText();
            }
        }
    
        if(success)
        {
            ret = this.build_StringFromDb();
            this.delete_Data('',_sks_eft_filedetail); //FDD-10590 // Remove temporary data if successful. If errors, leave data to help troubleshooting
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>build_StringFromDb</Name>
				<Source><![CDATA[
    private str build_StringFromDb(str _seg = '')
    {
        str value;
        SKS_EFT_EDI820_Segment segment;
        //BP Deviation Documented
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        SKS_EFT_EDI820_Segment prevSegment;
        int prevOccurence;
        SKS_EFT_EDI820_Data SKS_EFT_EDI820_Data;
    
        if(_seg != '')
        {
            segment = str2enum(segment, _seg);
    
            select crosscompany SKS_EFT_EDI820_Data //FDD-10590
            order by DataOccurrence, FieldNbr
            where
              SKS_EFT_EDI820_Data.FileRecId == mFileRecId &&
              SKS_EFT_EDI820_Data.UserId == mUserId &&
              SKS_EFT_EDI820_Data.Segment == segment;
        }
        else
        {
            select crosscompany SKS_EFT_EDI820_Data //FDD-10590
            order by DataOccurrence, FieldNbr
            where
              SKS_EFT_EDI820_Data.FileRecId == mFileRecId &&
              SKS_EFT_EDI820_Data.UserId == mUserId;
        }
        prevSegment = SKS_EFT_EDI820_Data.Segment;
        prevOccurence = SKS_EFT_EDI820_Data.SegmentOccurrence;
    
    
        while(SKS_EFT_EDI820_Data)
        {
            value = SKS_EFT_EDI::getDbValue(SKS_EFT_EDI820_Data.DataValue);
            sb.Append(value);
    
            next SKS_EFT_EDI820_Data;
    
            if(prevSegment == SKS_EFT_EDI820_Data.Segment && prevOccurence == SKS_EFT_EDI820_Data.SegmentOccurrence)
            {
                sb.Append(mSKS_EFT_EDI820.DataElementSeparator);
            }
            else
            {
                sb.Append(mSKS_EFT_EDI820.SegmentTerminator);
            }
            prevSegment = SKS_EFT_EDI820_Data.Segment;
            prevOccurence = SKS_EFT_EDI820_Data.SegmentOccurrence;
        }
        value = sb.ToString();
        return value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildDetail</Name>
				<Source><![CDATA[
    private boolean buildDetail(SKS_EFT_FileDetail _sks_eft_filedetail)
    {
        SKS_EFT_FileDetail invSKS_EFT_FileDetail;
        boolean ret = false;
        ;
    
        if(_sks_eft_filedetail.RecordSummary == SKS_EFT_RecordSummary::Invoice)
        {
            this.getVendTrans(_sks_eft_filedetail);
            ret = this.createData_Detail_Invoice(_sks_eft_filedetail);
        }
        else
        {
            while select invSKS_EFT_FileDetail where invSKS_EFT_FileDetail.RecordSummaryRecId == _sks_eft_filedetail.RecId
            {
                this.getVendTrans(invSKS_EFT_FileDetail);
                ret = this.createData_Detail_Invoice(invSKS_EFT_FileDetail);
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildGE</Name>
				<Source><![CDATA[
    public str buildGE(SKS_EFT_FileDetail _sks_eft_filedetail = null) //FDD-10590
    {
        str ret;
        boolean success;
        ;
        this.delete_Data(enum2str(SKS_EFT_EDI820_Segment::S0200GE), _sks_eft_filedetail); //FDD-10590
    
        success = this.createData_Trailer_GE(_sks_eft_filedetail); //FDD-10590
    
        if(success)
        {
            ret = this.build_StringFromDb(enum2str(SKS_EFT_EDI820_Segment::S0200GE));
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildGS</Name>
				<Source><![CDATA[
    public str buildGS(SKS_EFT_FileDetail _sks_eft_filedetail = null) //FDD-10590
    {
        str ret;
        boolean success;
        ;
        this.delete_Data(enum2str(SKS_EFT_EDI820_Segment::H0080GS), _sks_eft_filedetail); //FDD-10590
    
        success = this.createData_Header_GS(_sks_eft_filedetail); //FDD-10590
    
        if(success)
        {
            ret = this.build_StringFromDb(enum2str(SKS_EFT_EDI820_Segment::H0080GS));
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildIEA</Name>
				<Source><![CDATA[
    public str buildIEA(SKS_EFT_FileDetail _sks_eft_filedetail = null) //FDD-10590
    {
        str ret;
        boolean success;
        ;
        this.delete_Data(enum2str(SKS_EFT_EDI820_Segment::S0300IEA), _sks_eft_filedetail); //FDD-10590
    
        success = this.createData_Trailer_IEA(_sks_eft_filedetail); //FDD-10590
    
        if(success)
        {
            ret = this.build_StringFromDb(enum2str(SKS_EFT_EDI820_Segment::S0300IEA));
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildISA</Name>
				<Source><![CDATA[
    public str buildISA(SKS_EFT_FileDetail _sks_eft_filedetail = null) //FDD-10590
    {
        str ret;
        boolean success;
        ;
        this.delete_Data(enum2str(SKS_EFT_EDI820_Segment::H0050ISA), _sks_eft_filedetail); //FDD-10590
    
        success = this.createData_Header_ISA(_sks_eft_filedetail); //FDD-10590
    
        if(success)
        {
            ret = this.build_StringFromDb(enum2str(SKS_EFT_EDI820_Segment::H0050ISA));
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>correct_RMR01</Name>
				<Source><![CDATA[
    // If RMR02 is blank need to blank out RMR01
    // This could happen if RMR02 is mapped to Invoice number and payment doesn't have Invoice
    private void correct_RMR01(SKS_EFT_EDI820_Data _SKS_EFT_EDI820_Data)
    {
        SKS_EFT_EDI820_Data SKS_EFT_EDI820_Data;
        ;
        select forUpdate SKS_EFT_EDI820_Data where
            SKS_EFT_EDI820_Data.Segment == SKS_EFT_EDI820_Segment::D1500RMR &&
            SKS_EFT_EDI820_Data.SegmentOccurrence == _SKS_EFT_EDI820_Data.SegmentOccurrence &&
            SKS_EFT_EDI820_Data.DataOccurrence == _SKS_EFT_EDI820_Data.DataOccurrence &&
            SKS_EFT_EDI820_Data.FileRecId == mFileRecId &&
            SKS_EFT_EDI820_Data.UserId == mUserId &&
            SKS_EFT_EDI820_Data.FieldNbr == 1;
    
        if(SKS_EFT_EDI820_Data)
        {
            SKS_EFT_EDI820_Data.DataValue = this.wrapDbValue('', null);
            SKS_EFT_EDI820_Data.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>create_Record</Name>
				<Source><![CDATA[
    private boolean create_Record(SKS_EFT_EDI820_Segment _startSegment, SKS_EFT_EDI820_Segment _endSegment, SKS_EFT_FileDetail _sks_eft_filedetail)
    {
        SKS_EFT_EDI820_Group sks_eft_edi820_group;
        boolean ret = false;
        ;
    
        while select crosscompany Segment, SegmentOccurrence from sks_eft_edi820_group //FDD-10590
            order by Segment, SegmentOccurrence
            where
                sks_eft_edi820_group.FormatId == mFormatId &&
                sks_eft_edi820_group.PaymSpec == mPaymSpec &&
                sks_eft_edi820_group.CompanyName == mCompanyName &&
                sks_eft_edi820_group.Segment >= _startSegment &&
                sks_eft_edi820_group.Segment <= _endSegment &&
                sks_eft_edi820_group.DataAreaId == _sks_eft_filedetail.DataAreaId //SKS_Bug_11854  //FDD-10590
        {
            ret = this.insert_Record(sks_eft_edi820_group.Segment, sks_eft_edi820_group.SegmentOccurrence, _sks_eft_filedetail);
            if(!ret)
            {
                break;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createData_Detail_Invoice</Name>
				<Source><![CDATA[
    private boolean createData_Detail_Invoice(SKS_EFT_FileDetail _sks_eft_filedetail)
    {
        boolean ret = false;
        ;
        ret = this.create_Record(SKS_EFT_EDI820_Segment::D1500RMR, SKS_EFT_EDI820_Segment::D1800DTM, _sks_eft_filedetail);
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createData_Detail_Payment</Name>
				<Source><![CDATA[
    private boolean createData_Detail_Payment(SKS_EFT_FileDetail _sks_eft_filedetail)
    {
        boolean ret = false;
        ;
    
        ret = this.create_Record(SKS_EFT_EDI820_Segment::H0200BPR, SKS_EFT_EDI820_Segment::D0100ENT, _sks_eft_filedetail);
    
        if(ret)
        {
            ret = this.buildDetail(_sks_eft_filedetail);
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createData_Header_GS</Name>
				<Source><![CDATA[
    private boolean createData_Header_GS(SKS_EFT_FileDetail _sks_eft_filedetail)
    {
        boolean ret = false;
        ;
        ret = this.create_Record(SKS_EFT_EDI820_Segment::H0080GS, SKS_EFT_EDI820_Segment::H0080GS, _sks_eft_filedetail);
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createData_Header_ISA</Name>
				<Source><![CDATA[
    private boolean createData_Header_ISA(SKS_EFT_FileDetail _sks_eft_filedetail)
    {
        boolean ret = false;
        ;
        ret = this.create_Record(SKS_EFT_EDI820_Segment::H0050ISA, SKS_EFT_EDI820_Segment::H0050ISA, _sks_eft_filedetail);
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createData_Header_ST</Name>
				<Source><![CDATA[
    private boolean createData_Header_ST(SKS_EFT_FileDetail _sks_eft_filedetail)
    {
        boolean ret = false;
        ;
        ret = this.create_Record(SKS_EFT_EDI820_Segment::H0100ST, SKS_EFT_EDI820_Segment::H0100ST, _sks_eft_filedetail);
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createData_Trailer_GE</Name>
				<Source><![CDATA[
    private boolean createData_Trailer_GE(SKS_EFT_FileDetail _sks_eft_filedetail)
    {
        boolean ret = false;
        ;
        ret = this.create_Record(SKS_EFT_EDI820_Segment::S0200GE, SKS_EFT_EDI820_Segment::S0200GE, _sks_eft_filedetail);
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createData_Trailer_IEA</Name>
				<Source><![CDATA[
    private boolean createData_Trailer_IEA(SKS_EFT_FileDetail _sks_eft_filedetail)
    {
        boolean ret = false;
        ;
        ret = this.create_Record(SKS_EFT_EDI820_Segment::S0300IEA, SKS_EFT_EDI820_Segment::S0300IEA, _sks_eft_filedetail);
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createData_Trailer_SE</Name>
				<Source><![CDATA[
    private boolean createData_Trailer_SE(SKS_EFT_FileDetail _sks_eft_filedetail)
    {
        boolean ret = false;
        ;
        ret = this.create_Record(SKS_EFT_EDI820_Segment::S0100SE, SKS_EFT_EDI820_Segment::S0100SE, _sks_eft_filedetail);
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete_Data</Name>
				<Source><![CDATA[
    private void delete_Data(str _value = '', SKS_EFT_FileDetail _sks_eft_filedetail = null) //FDD-10590
    {
        SKS_EFT_EDI820_Data SKS_EFT_EDI820_Data;
        SKS_EFT_EDI820_Segment segment;
        ;
        if (_sks_eft_filedetail != null) //FDD - 11060
        {
            changecompany(_sks_eft_filedetail.PaymentCompany) //FDD-10590
            {
                if(_value != '')
                {
                    segment = str2enum(segment, _value);
    
                    delete_from SKS_EFT_EDI820_Data
                        where
                            SKS_EFT_EDI820_Data.FileRecId == mFileRecId &&
                            SKS_EFT_EDI820_Data.UserId == mUserId &&
                            SKS_EFT_EDI820_Data.Segment == segment &&
                            SKS_EFT_EDI820_Data.DataAreaId == _sks_eft_filedetail.PaymentCompany; //FDD-10590
                }
                else
                {
                    delete_from SKS_EFT_EDI820_Data
                        where
                            SKS_EFT_EDI820_Data.FileRecId == mFileRecId &&
                            SKS_EFT_EDI820_Data.UserId == mUserId &&
                            SKS_EFT_EDI820_Data.DataAreaId == _sks_eft_filedetail.PaymentCompany; //FDD-10590
                }
            } //FDD-10590
        }
        else // //FDD - 11060
        {
            if(_value != '')
            {
                segment = str2enum(segment, _value);
    
                delete_from SKS_EFT_EDI820_Data
                where
                    SKS_EFT_EDI820_Data.FileRecId == mFileRecId &&
                    SKS_EFT_EDI820_Data.UserId == mUserId &&
                    SKS_EFT_EDI820_Data.Segment == segment;
            }
            else
            {
                delete_from SKS_EFT_EDI820_Data
                where
                    SKS_EFT_EDI820_Data.FileRecId == mFileRecId &&
                    SKS_EFT_EDI820_Data.UserId == mUserId;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDataElementSeparator</Name>
				<Source><![CDATA[
    public str getDataElementSeparator()
    {
        return mSKS_EFT_EDI820.DataElementSeparator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDetails</Name>
				<Source><![CDATA[
    private SKS_EFT_EDI820_Detail getDetails(SKS_EFT_EDI820_Segment _ediSegment, int _occurrence, SKS_EFT_FileDetail _sks_eft_filedetail) //FDD-10590
    {
        SKS_EFT_EDI820_Detail SKS_EFT_EDI820_Detail;
        ;
        // If called from buildPayment, will be using recordCache
        select crosscompany SKS_EFT_EDI820_Detail //FDD-10590
        order by Segment, SegmentOccurrence, FieldNbr
        where
          SKS_EFT_EDI820_Detail.FormatId == mSKS_EFT_EDI820.FormatId &&
          SKS_EFT_EDI820_Detail.PaymSpec == mSKS_EFT_EDI820.PaymSpec &&
          SKS_EFT_EDI820_Detail.CompanyName == mSKS_EFT_EDI820.CompanyName &&
          SKS_EFT_EDI820_Detail.Segment == _ediSegment &&
          SKS_EFT_EDI820_Detail.SegmentOccurrence == _occurrence &&
          SKS_EFT_EDI820_Detail.DataAreaId == _sks_eft_filedetail.DataAreaId; //SKS_Bug_11854  //FDD-10590
    
        return SKS_EFT_EDI820_Detail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getErrorText</Name>
				<Source><![CDATA[
    public str getErrorText()
    {
        ;
        return mErrorText;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHeader</Name>
				<Source><![CDATA[
    private void getHeader(SKS_EFT_FileDetail _sks_eft_filedetail) //SKS_FDD_10590
    {
        ;
        if(_sks_eft_filedetail.PaymentCompany !='' && _sks_eft_filedetail.PaymentCompany != curExt())//SKS_FDD_10590
        {
            changecompany(_sks_eft_filedetail.PaymentCompany)//SKS_FDD_10590 check edi layout in the paym journal company
            {
                mSKS_EFT_EDI820 = null;

                select firstonly mSKS_EFT_EDI820
                order by CompanyName desc, PaymSpec desc, FormatId desc
                    where
                    (mSKS_EFT_EDI820.FormatId == mFormatId && mSKS_EFT_EDI820.PaymSpec == mPaymSpec && mSKS_EFT_EDI820.CompanyName == mCompanyName) ||
                    (mSKS_EFT_EDI820.FormatId == mFormatId && mSKS_EFT_EDI820.PaymSpec == '' && mSKS_EFT_EDI820.CompanyName == mCompanyName);                    
            }
        }
        else
        {
            select firstonly mSKS_EFT_EDI820
            order by CompanyName desc, PaymSpec desc, FormatId desc
                where
                (mSKS_EFT_EDI820.FormatId == mFormatId && mSKS_EFT_EDI820.PaymSpec == mPaymSpec && mSKS_EFT_EDI820.CompanyName == mCompanyName) ||
                (mSKS_EFT_EDI820.FormatId == mFormatId && mSKS_EFT_EDI820.PaymSpec == '' && mSKS_EFT_EDI820.CompanyName == mCompanyName);
        }
        if(!mSKS_EFT_EDI820)
        {
            mErrorText = "@SKS2101";
        }
        else
        {
            mPaymSpec = mSKS_EFT_EDI820.PaymSpec;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSegmentTerminator</Name>
				<Source><![CDATA[
    public str getSegmentTerminator()
    {
        return mSKS_EFT_EDI820.SegmentTerminator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSelectData</Name>
				<Source><![CDATA[
    private str getSelectData(SKS_EFT_EDI820_Detail _sks_Eft_edi820_detail, SKS_EFT_FileDetail _sks_eft_filedetail)
    {
        str value;
        //CompanyInfo CompanyInfo;
        //VendTable vendTable;
        SKS_EFT_EDI820_Data SKS_EFT_EDI820_Data;
        ;
    
        switch(_sks_Eft_edi820_detail.SelectData)
        {
            case SKS_EFT_EDI820_SelectData::AXFedTaxId:
                value = _sks_eft_filedetail.Tax1099RegNum; //FDD-10590
                break;
            case SKS_EFT_EDI820_SelectData::BlankFill10:
                value = SKS_PP_StringFormats::strFill(10, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right);
                break;
            case SKS_EFT_EDI820_SelectData::CurrDateYYMMDD:
                value = SKS_PP_StringFormats::strDateYYMMDD(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()));
                break;
            case SKS_EFT_EDI820_SelectData::CurrDateYYYYMMDD:
                value = SKS_PP_StringFormats::strDateYYYYMMDD(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()));
                break;
            case SKS_EFT_EDI820_SelectData::CurrTimeHHMM:
                value = SKS_PP_StringFormats::strTimeHHMM();
                break;
            case SKS_EFT_EDI820_SelectData::EffDateYYMMDD:
                value = SKS_PP_StringFormats::strDateYYMMDD(mSKS_EFT_File.EffectiveDate);
                break;
            case SKS_EFT_EDI820_SelectData::EffDateYYYYMMDD:
                value = SKS_PP_StringFormats::strDateYYYYMMDD(mSKS_EFT_File.EffectiveDate);
                break;
            case SKS_EFT_EDI820_SelectData::EFTFileNbr:
                value = mSKS_EFT_File.FileNbr;
                break;
            case SKS_EFT_EDI820_SelectData::EFTFileNbrFileId:
                value = mSKS_EFT_File.FileNbr + mEFTFileId;
                break;
            case SKS_EFT_EDI820_SelectData::EFTFileRecId:
                value = SKS_PP_StringFormats::strRight(int642str(mSKS_EFT_File.RecId),9);
                break;
            case SKS_EFT_EDI820_SelectData::EFTFileRecIdFileId:
                value = SKS_PP_StringFormats::strRight(int642str(mSKS_EFT_File.RecId) + mEFTFileId,9);
                break;
            case SKS_EFT_EDI820_SelectData::FunctionalGroupCount:
                if(mFunctionalGroupCount > 0)
                {
                    value = num2str(mFunctionalGroupCount,0,0,0,0);
                }
                else
                {
                    select count(FieldNbr) from SKS_EFT_EDI820_Data
                    where
                        SKS_EFT_EDI820_Data.Segment == SKS_EFT_EDI820_Segment::H0050ISA &&
                        SKS_EFT_EDI820_Data.FieldNbr == 0 &&
                        SKS_EFT_EDI820_Data.FileRecId == mFileRecId &&
                        SKS_EFT_EDI820_Data.UserId == mUserId;
                    value = num2str(SKS_EFT_EDI820_Data.FieldNbr,0,0,0,0);
                }
                break;
            case SKS_EFT_EDI820_SelectData::TranSetCount:
                if(mTranSetCount > 0)
                {
                    value = num2str(mTranSetCount,0,0,0,0);
                }
                else
                {
                    select count(FieldNbr) from SKS_EFT_EDI820_Data
                    where
                        SKS_EFT_EDI820_Data.Segment == SKS_EFT_EDI820_Segment::H0080GS &&
                        SKS_EFT_EDI820_Data.FieldNbr == 0 &&
                        SKS_EFT_EDI820_Data.FileRecId == mFileRecId &&
                        SKS_EFT_EDI820_Data.UserId == mUserId;
                    value = num2str(SKS_EFT_EDI820_Data.FieldNbr,0,0,0,0);
                }
                break;
            case SKS_EFT_EDI820_SelectData::SegmentCount:
                select count(FieldNbr) from SKS_EFT_EDI820_Data
                where
                    SKS_EFT_EDI820_Data.Segment >= SKS_EFT_EDI820_Segment::H0100ST &&
                    SKS_EFT_EDI820_Data.Segment <= SKS_EFT_EDI820_Segment::S0100SE &&
                    SKS_EFT_EDI820_Data.FieldNbr == 0 &&
                    SKS_EFT_EDI820_Data.FileRecId == mFileRecId &&
                    SKS_EFT_EDI820_Data.UserId == mUserId;
                value = num2str(SKS_EFT_EDI820_Data.FieldNbr,0,0,0,0);
                break;
    
            // Fields from SKS_EFT_FileDetail
            case SKS_EFT_EDI820_SelectData::AXAmtPmt:
            case SKS_EFT_EDI820_SelectData::AXInvAmtPmt:
                if(_sks_eft_filedetail.InvoiceSettleAmountPmtCur != 0)
                {
                    value = num2str(_sks_eft_filedetail.InvoiceSettleAmountPmtCur*-1,0,2,0,0);
                }
                break;
            case SKS_EFT_EDI820_SelectData::AXInvAmtDisc:
                if(_sks_eft_filedetail.InvoiceDiscAmountPmtCur != 0)
                {
                    value = num2str(_sks_eft_filedetail.InvoiceDiscAmountPmtCur*-1,0,2,0,0);
                }
                break;
            case SKS_EFT_EDI820_SelectData::AXInvAmtOrig:
                value = num2str((_sks_eft_filedetail.InvoiceSettleAmountPmtCur + _sks_eft_filedetail.InvoiceDiscAmountPmtCur)*-1,0,2,0,0);
                break;
            case SKS_EFT_EDI820_SelectData::AXBankRouting:
                value = _sks_eft_filedetail.BankBankTransit;
                break;
            case SKS_EFT_EDI820_SelectData::AXInvDateYYYYMMDD:
                value = SKS_PP_StringFormats::strDateYYYYMMDD(_sks_eft_filedetail.InvoiceDate);
                break;
            case SKS_EFT_EDI820_SelectData::AXInvDescr:
                value = _sks_eft_filedetail.InvoiceTransactionTxt;
                break;
            case SKS_EFT_EDI820_SelectData::AXInvNbr:
                value = _sks_eft_filedetail.InvoiceNumber;
                break;
            case SKS_EFT_EDI820_SelectData::AXPmtSpec:
                value = _sks_eft_filedetail.PaymSpec;
                break;
            case SKS_EFT_EDI820_SelectData::AXVBAnumber:
                value = _sks_eft_filedetail.DepBankAcct;
                break;
            case SKS_EFT_EDI820_SelectData::AXVBArouting:
                value = _sks_eft_filedetail.DepBankTransit;
                break;
            case SKS_EFT_EDI820_SelectData::AXVBAtype:
                switch(_sks_eft_filedetail.DepBankAcctType)
                {
                    case BankAccountType::FinancialInstitutionAccount:
                        value = '4';
                        break;
                    case BankAccountType::LoanAccount:
                        value = '5';
                        break;
                    case BankAccountType::SavingsAccount:
                        value = '3';
                        break;
                    default:
                        value = '2';
                        break;
                }
                break;
            case SKS_EFT_EDI820_SelectData::AXVendAcct:
                value = _sks_eft_filedetail.AccountNum;
                break;
            case SKS_EFT_EDI820_SelectData::AXVendName:
                value = _sks_eft_filedetail.AccountName;
                break;
            case SKS_EFT_EDI820_SelectData::DebitCredit:
                if(_sks_eft_filedetail.InvoiceSettleAmountPmtCur > 0)
                {
                    value = 'D';
                }
                else
                {
                    value = 'C';
                }
                break;
            case SKS_EFT_EDI820_SelectData::EFTCompanyId:
                value = _sks_eft_filedetail.FileACHCompanyId;
                break;
            case SKS_EFT_EDI820_SelectData::EFTCompanyName:
                value = _sks_eft_filedetail.FileACHCompanyName;
                break;
            case SKS_EFT_EDI820_SelectData::EFTPmtRef:
                value = _sks_eft_filedetail.PaymentReference;
                break;
    
            // From Vendor
            case SKS_EFT_EDI820_SelectData::AXVendPOAcct:
                changeCompany(_sks_eft_filedetail.AccountCompany)
                {
                    value = _sks_eft_filedetail.VendYourAccountNum; //FDD-10590
                }
                break;
    
            // From Invoice
            case SKS_EFT_EDI820_SelectData::AXInvDocNbr:
                value = _sks_eft_filedetail.InvoiceDocumentNum; //FDD-10590
                break;
            case SKS_EFT_EDI820_SelectData::AXInvReasonCode:
                value = _sks_eft_filedetail.InvoiceReason; //FDD-10590
                break;
            case SKS_EFT_EDI820_SelectData::AXInvReasonComment:
                value = _sks_eft_filedetail.InvoiceReasonComment; //FDD-10590
                break;
    
            case SKS_EFT_EDI820_SelectData::ISA06:
                select DataValue from SKS_EFT_EDI820_Data
                where
                    SKS_EFT_EDI820_Data.Segment == SKS_EFT_EDI820_Segment::H0050ISA &&
                    SKS_EFT_EDI820_Data.FieldNbr == 6 &&
                    SKS_EFT_EDI820_Data.FileRecId == mFileRecId &&
                    SKS_EFT_EDI820_Data.UserId == mUserId;
                value = SKS_EFT_EDI::getDbValue(SKS_EFT_EDI820_Data.DataValue);
                break;
            case SKS_EFT_EDI820_SelectData::ISA08:
                select DataValue from SKS_EFT_EDI820_Data
                where
                    SKS_EFT_EDI820_Data.Segment == SKS_EFT_EDI820_Segment::H0050ISA &&
                    SKS_EFT_EDI820_Data.FieldNbr == 8 &&
                    SKS_EFT_EDI820_Data.FileRecId == mFileRecId &&
                    SKS_EFT_EDI820_Data.UserId == mUserId;
                value = SKS_EFT_EDI::getDbValue(SKS_EFT_EDI820_Data.DataValue);
                break;
        }
    
        return value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendTrans</Name>
				<Source><![CDATA[
    private void getVendTrans(SKS_EFT_FileDetail _sks_eft_filedetail)
    {
        ;
        mVendTrans = null;
        if(_sks_eft_filedetail.VendTransRecId)
        {
            changeCompany(_sks_eft_filedetail.InvoiceCompany)
            {
                select mVendTrans
                  where mVendTrans.RecId == _sks_eft_filedetail.VendTransRecId;
    
                if(mVendTrans && mVendTrans.ReasonRefRecId != 0)
                {
                    mReasonTableRef = ReasonTableRef::find(mVendTrans.ReasonRefRecID);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert_Record</Name>
				<Source><![CDATA[
    [SuppressBPWarning('BPCheckInsertMethodInLoop','Insert() method can not be replaced with RecordInsertList inside changecompany.')]    //TAS_CAR
    private boolean insert_Record(SKS_EFT_EDI820_Segment _ediSegment, int _segmentOccurrence, SKS_EFT_FileDetail _sks_eft_filedetail) //FDD-10590
    {
        SKS_EFT_EDI820_Detail SKS_EFT_EDI820_Detail;
        str value;
        SKS_EFT_EDI820_Data SKS_EFT_EDI820_Data;
        RecordInsertList    ril;
        ;
    
        mDataOccurrence++;
        ttsBegin;
        ril = new RecordInsertList(SKS_EFT_EDI820_Data.TableId);
        this.insert_RecordType(_ediSegment, _segmentOccurrence, _sks_eft_filedetail); //FDD-10590
    
        // Get details from setup
        SKS_EFT_EDI820_Detail = this.getDetails(_ediSegment, _segmentOccurrence, _sks_eft_filedetail); //FDD-10590
    
        if(!SKS_EFT_EDI820_Detail)
        {
            mErrorText = strFmt("@SKS2102", _ediSegment, _segmentOccurrence);
            ttsAbort;
            return false;
        }
    
        // Loop through segment records and build string
        changecompany(_sks_eft_filedetail.PaymentCompany ? _sks_eft_filedetail.PaymentCompany : _sks_eft_filedetail.DataAreaId) //FDD-10590
        {
            while(SKS_EFT_EDI820_Detail)
            {
                if(SKS_EFT_EDI820_Detail.SelectData == SKS_EFT_EDI820_SelectData::FixedValue)
                {
                    value = SKS_EFT_EDI820_Detail.Value; // Literal value
                }
                else
                {
                    value = this.getSelectData(SKS_EFT_EDI820_Detail, _sks_eft_filedetail); // Lookup data
                }
    
                SKS_EFT_EDI820_Data = null; //FDD-10590
                SKS_EFT_EDI820_Data.Segment = SKS_EFT_EDI820_Detail.Segment;
                SKS_EFT_EDI820_Data.SegmentOccurrence = SKS_EFT_EDI820_Detail.SegmentOccurrence;
                SKS_EFT_EDI820_Data.FieldNbr = SKS_EFT_EDI820_Detail.FieldNbr;
                SKS_EFT_EDI820_Data.DataOccurrence = mDataOccurrence;
                SKS_EFT_EDI820_Data.DataValue = this.wrapDbValue(value, SKS_EFT_EDI820_Detail);
                SKS_EFT_EDI820_Data.FileRecId = mFileRecId;
                SKS_EFT_EDI820_Data.UserId = mUserId;
                //FDD-10590 --->
                //ril.add(SKS_EFT_EDI820_Data);
                SKS_EFT_EDI820_Data.insert();
                //<--- FDD-10590

                next SKS_EFT_EDI820_Detail;
            }
          //  ril.insertDatabase(); //FDD-10590
        }//FDD-10590
        ttsCommit;
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert_RecordType</Name>
				<Source><![CDATA[
    private void insert_RecordType(SKS_EFT_EDI820_Segment _ediSegment, int _segmentOccurrence, SKS_EFT_FileDetail _sks_eft_FileDetail)  //FDD-10590
    {
        str value;
        SKS_EFT_EDI820_Data SKS_EFT_EDI820_Data;
        ;
    
        // Set group id
        switch(_ediSegment)
        {
            case SKS_EFT_EDI820_Segment::H0050ISA:
                value = 'ISA';
                break;
            case SKS_EFT_EDI820_Segment::H0080GS:
                value = 'GS';
                break;
            case SKS_EFT_EDI820_Segment::H0100ST:
                value = 'ST';
                break;
            case SKS_EFT_EDI820_Segment::H0200BPR:
                value = 'BPR';
                break;
            case SKS_EFT_EDI820_Segment::H0350TRN:
                value = 'TRN';
                break;
            case SKS_EFT_EDI820_Segment::H0650N1:
            case SKS_EFT_EDI820_Segment::H0700N1:
                value = 'N1';
                break;
            case SKS_EFT_EDI820_Segment::D0100ENT:
                value = 'ENT';
                break;
            case SKS_EFT_EDI820_Segment::D1500RMR:
                value = 'RMR';
                break;
            case SKS_EFT_EDI820_Segment::D1700REF:
                value = 'REF';
                break;
            case SKS_EFT_EDI820_Segment::D1800DTM:
                value = 'DTM';
                break;
            case SKS_EFT_EDI820_Segment::S0100SE:
                value = 'SE';
                break;
            case SKS_EFT_EDI820_Segment::S0200GE:
                value = 'GE';
                break;
            case SKS_EFT_EDI820_Segment::S0300IEA:
                value = 'IEA';
                break;
        }
        changecompany(_sks_eft_filedetail.PaymentCompany ? _sks_eft_filedetail.PaymentCompany : _sks_eft_filedetail.DataAreaId) //FDD-10590
        {
            SKS_EFT_EDI820_Data = null;
            SKS_EFT_EDI820_Data.DataValue = this.wrapDbValue(value, null);
            SKS_EFT_EDI820_Data.DataOccurrence = mDataOccurrence;
            SKS_EFT_EDI820_Data.FieldNbr = 0;
            SKS_EFT_EDI820_Data.Segment = _ediSegment;
            SKS_EFT_EDI820_Data.SegmentOccurrence = _segmentOccurrence;
            SKS_EFT_EDI820_Data.FileRecId = mFileRecId;
            SKS_EFT_EDI820_Data.UserId = mUserId;
            SKS_EFT_EDI820_Data.insert();
        }//FDD-10590
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(SKS_EFT_FormatId _FormatId, PaymSpec _PaymSpec, CompanyName _CompanyName, RefRecId _FileRecId, SKS_EFT_FileDetail _sks_FileDetail  = null)//SKS_FDD_10590
    {
        SKS_EFT_EDI820_Group sks_eft_edi820_group;
        SKS_EFT_EDI820_Detail sks_eft_edi820_detail;
        xSession session;
        ;
        mFormatId = _FormatId;
        mPaymSpec = _PaymSpec;
        mCompanyName = _CompanyName;
        mFileRecId = _FileRecId;
    
        session = new xSession();
        mUserId = session.userId();
    
        select mSKS_EFT_File where mSKS_EFT_File.RecId == _FileRecId;
    
        // Get SKS_EFT_EDI820 header
        this.getHeader(_sks_FileDetail);
    
        // Define records to cache from SKS_EFT_EDI820_Group
        select noFetch sks_eft_edi820_group
            order by Segment, SegmentOccurrence
            where
             sks_eft_edi820_group.FormatId == mFormatId &&
             sks_eft_edi820_group.PaymSpec == mPaymSpec &&
             sks_eft_edi820_group.CompanyName == mCompanyName;
    
        // Cache the records from SKS_EFT_EDI820_Group
        mRecordViewCacheGroup = new RecordViewCache(sks_eft_edi820_group);
    
        // Define records to cache from SKS_EFT_EDI820_Detail
        select noFetch sks_eft_edi820_detail
          order by Segment, SegmentOccurrence, FieldNbr
          where
             sks_eft_edi820_detail.FormatId == mFormatId &&
             sks_eft_edi820_detail.PaymSpec == mPaymSpec &&
             sks_eft_edi820_detail.CompanyName == mCompanyName;
    
        // Cache the records from SKS_EFT_EDI820_Detail
        mRecordViewCacheDetail = new RecordViewCache(sks_eft_edi820_detail);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setEFTFileId</Name>
				<Source><![CDATA[
    void setEFTFileId(str _EFTFileId)
    {
        ;
        mEFTFileId = _EFTFileId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFunctionalGroupCount</Name>
				<Source><![CDATA[
    void setFunctionalGroupCount(int _FunctionalGroupCount)
    {
        ;
        mFunctionalGroupCount = _FunctionalGroupCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTranSetCount</Name>
				<Source><![CDATA[
    void setTranSetCount(int _TranSetCount)
    {
        ;
        mTranSetCount = _TranSetCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wrapDbValue</Name>
				<Source><![CDATA[
    private str wrapDbValue(str _value, SKS_EFT_EDI820_Detail _SKS_EFT_EDI820_Detail)
    {
        str value;
        ;
        value = _value;

        if(_SKS_EFT_EDI820_Detail) // If SKS_EFT_EDI820_Detail was passed, need to use it to format record
        {
            // Trim value if needed
            if(_SKS_EFT_EDI820_Detail.MaxLength > 0)
            {
                value = subStr(value, 1, _SKS_EFT_EDI820_Detail.MaxLength);
            }
    
            // Pad value if needed
            if(_SKS_EFT_EDI820_Detail.PadField == NoYes::Yes)
            {
                value = SKS_PP_StringFormats::strFill(_SKS_EFT_EDI820_Detail.MaxLength, value, _SKS_EFT_EDI820_Detail.PadChar, _SKS_EFT_EDI820_Detail.PadSide);
            }
        }
    
        return #wrapChar + strUpr(value) + #wrapChar;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDbValue</Name>
				<Source><![CDATA[
    // Remove first and last position from string
    // Special character is added to each side of string to preserve spaces
    public static server str getDbValue(str _value)
    {
        ;
        return subStr(_value, 2, strLen(_value) - 2);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>