<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_US_CHASE_SD_SUA_CSV</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_US_CHASE_SD_SUA_CSV extends SKS_EFT_Format
/// </summary>
class SKS_EFT_Format_US_CHASE_SD_SUA_CSV extends SKS_EFT_Format
{
    #define.FormatVersion('20220622')
    #define.Separator(',')
    int numberOfRecords = 0;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wrapField</Name>
				<Source><![CDATA[
    private str wrapField(str _field = '', int length = 0,  boolean _addSeparator = true)
    {
        str text;

        if(strContains( _field, ','))
        {
            _field = strReplace(_field, ',', ' ');
        }
        if(_addSeparator)
        {
            if(length != 0)
            {
                text = subStr(_field, 1, length) + #Separator;
            }
            else
            {
                text = _field + #Separator;
            }
        }
        else
        {
            text = _field;
        }

        return text;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    protected void formatStructure()
    {
        this.rec_PaymentHeader();

        while(mSKS_EFT_FileDetail)
        {
            // Get SKS_EFT_FileFormatPaymSpec
            this.getSKS_EFT_FileFormatPaymSpec();

            // Payment Details
            this.rec_PaymentDetails();

            next mSKS_EFT_FileDetail;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_PaymentHeader</Name>
				<Source><![CDATA[
    void rec_PaymentHeader()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
 
        
        sb.Append(this.wrapField('ActionType'));
        sb.Append(this.wrapField('RecordId'));
        sb.Append(this.wrapField('IssuerId'));
        sb.Append(this.wrapField('IcaNumber'));
        sb.Append(this.wrapField('BankNumber'));
        sb.Append(this.wrapField('UserName'));
        sb.Append(this.wrapField('RequestId'));
        sb.Append(this.wrapField('MaxPurchaseAmount'));
        sb.Append(this.wrapField('MinPurchaseAmount'));
        sb.Append(this.wrapField('PurchaseCurrency'));
        sb.Append(this.wrapField('PurchaseType'));
        sb.Append(this.wrapField('VCardAlias'));
        sb.Append(this.wrapField('SupplierName'));
        sb.Append(this.wrapField('SupplierEmail'));
        sb.Append(this.wrapField('MultiUse'));
        sb.Append(this.wrapField('ValidFrom'));
        sb.Append(this.wrapField('ValidTo'));
        sb.Append(this.wrapField('ValidFor'));
        sb.Append(this.wrapField('CDF_<Custom Data Field Name>', 0, false));

        this.fileWrite(sb.ToString());
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_PaymentDetails</Name>
				<Source><![CDATA[
    boolean rec_PaymentDetails()
    {
        str value1,value2,value3,value4, multiUse;    
        System.DateTime sysDateTime12;

        System.Text.StringBuilder sb = new System.Text.StringBuilder();

        numberOfRecords++;
        
        // 1 ActionType
        sb.Append(this.wrapField('CreateApprovedPurchase', 22));

        // 2 RecordId
        sb.Append(this.wrapField(num2Str(numberOfRecords,0,0,0,0), 20));

        // 3 IssuerId
        value1 = SKS_EFT_Format::getCodelookupvalue('IssuerId', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank);
        sb.Append(this.wrapField(this.CharacterReplacement(value1), 12));

        // 4 IcaNumber
        value2 = SKS_EFT_Format::getCodelookupvalue('IcaNumber', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank);
        sb.Append(this.wrapField(this.CharacterReplacement(value2), 400));

        //5 Banknumber
        value3 = SKS_EFT_Format::getCodelookupvalue('Banknumber', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank);
        sb.Append(this.wrapField(this.CharacterReplacement(value3), 400));

        // 6 Username        
        sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_FileDetail.FileACHCompanyId), 19));

        // 7 Request Id
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.PaymentReference, 22));

        // 8 MaxPurchaseAmount
        sb.Append(this.wrapField(num2str(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1,0,2,1,0), 10));

        // 9  MinPurchaseAmount
        sb.Append(this.wrapField(num2str(0,0,2,1,0), 10));
        
        // 10 Purchase currency
        if(mSKS_EFT_FileDetail.PaymentCurrencyCode == 'USD')
        {
            sb.Append(this.wrapField('840', 3));
        }
        else if(mSKS_EFT_FileDetail.PaymentCurrencyCode == 'CAD')
        {
            sb.Append(this.wrapField('124', 3));
        }

        // 11 PurchaseType
        value4 = SKS_EFT_Format::getCodelookupvalue('PurchaseType', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank);
        sb.Append(this.wrapField(this.CharacterReplacement(value4), 100));

        // 12 VCardAlias
        sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_FileDetail.FileACHCompanyName)));
        
        // 13   Supplier Name
        sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneName), 80));
        
        // 14   Supplier email
        sb.Append(this.wrapField(mSKS_EFT_FileDetail_VendAddress.Locator, 50));

        // 15 MultiUse
        multiUse = SKS_EFT_Format::getCodelookupvalue('multiUse', mSKS_EFT_FileDetail.RecId);
        sb.Append(this.wrapField(this.CharacterReplacement(multiUse), 1));
        
        // 16 ValidFrom
        sb.Append(this.wrapField(SKS_PP_StringFormats::strDateYYYYMMDD(mSKS_EFT_FileDetail.EffectiveDate, DateSeparator::Hyphen) + ' 00:00:00.00 ' + this.getTimeZone(), 29));      //SKS#DevOps:15636

        // 17 ValidTo
        date bob;
        
        sysDateTime12 = DateTimeUtil::addMonths(DateTimeUtil::newDateTime(mSKS_EFT_FileDetail.EffectiveDate, 0), 12);
        sb.Append(this.wrapField(SKS_PP_StringFormats::strDateYYYYMMDD(sysDateTime12, DateSeparator::Hyphen) + ' 00:00:00.00 '+ this.getTimeZone(), 29));      //SKS#DevOps:15636
       
        // 18 ValidFor
        sb.Append(this.wrapField('12'));

        // 19 CDF_<Custom Data Field Name>
        sb.Append(this.wrapField('', 0, false));

        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTimeZone</Name>
				<Source><![CDATA[
    str getTimeZone()
    {
        CompanyInfo     companyinfo;
        DataArea        dataarea;
        str             timezone, finaltimezone;
   
        companyinfo = CompanyInfo::find();

        select dataarea where dataarea.id == companyinfo.DataArea;
        timezone = strFmt('%1', dataarea.timeZone);
        finaltimezone = subStr(timezone,5,6);
        finaltimezone = strRem(finaltimezone, ':');

        return finaltimezone;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectPaymentRecords</Name>
				<Source><![CDATA[
    protected void selectPaymentRecords()
    {
        //------------------------------------------------------------------------------------------------------
        // Standard payment selction
        // Override if different selection is need for a format
        //------------------------------------------------------------------------------------------------------
    
        //Order by clause must match the clause in the SKS_EFT_Processing.SumByPayment
        select * from mSKS_EFT_FileDetail
            join mSKS_EFT_FileDetail_VendAddress
              order by mSKS_EFT_FileDetail.RecordSection,
                   mSKS_EFT_FileDetail.PaymMode,
                   mSKS_EFT_FileDetail.BankAccountId,
                   mSKS_EFT_FileDetail.PaymentCurrencyCode,
                   mSKS_EFT_FileDetail.PaymSpec,
                   mSKS_EFT_FileDetail.EffectiveDate,
                   mSKS_EFT_FileDetail.DepCountryRegionId,
                   mSKS_EFT_FileDetail.RecordType,
                   mSKS_EFT_FileDetail.AccountNum,
                   mSKS_EFT_FileDetail.PaymentReference,
                   mSKS_EFT_FileDetail.RecId
          where mSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                mSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                mSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_VendAddress.RefRecId ;
        }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>