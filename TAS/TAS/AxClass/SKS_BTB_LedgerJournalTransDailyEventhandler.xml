<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_BTB_LedgerJournalTransDailyEventhandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_BTB_LedgerJournalTransDailyEventhandler
{
    


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>SKS_BTB_TransferMethod_OnModified</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormDataFieldEventHandler(formDataFieldStr(LedgerJournalTransDaily, LedgerJournalTrans, SKS_BTB_TransferMethod), FormDataFieldEventType::Modified),
    SuppressBPWarning('BPParameterNotUsed', 'Parameter e required in signature')]
    public static void SKS_BTB_TransferMethod_OnModified(FormDataObject sender, FormDataFieldEventArgs e)
    {
        FormDataSource fds = sender.datasource();
        fds.object(fieldNum(LedgerJournalTrans, BankTransType)).setValue(SKS_BTB_PaymModeTable::find(sender.getValue()).BankTransType);
        fds.object(fieldNum(LedgerJournalTrans, SKS_BTB_TransferSpec)).setValue('');
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDisplayValue</Name>
				<Source><![CDATA[
    static DimensionDisplayValue getDisplayValue(LedgerJournalTrans _transaction)
    {
        //DimensionAttributeValueCombination combination;
        //;
        //select DisplayValue from combination
        //where combination.recId == _transaction.LedgerDimension;
        //return combination.DisplayValue;
        DimensionAttributeValueCombination combination;
        SKS_EFT_Setup locSKS_EFT_SetUp;

        select firstonly locSKS_EFT_SetUp;

        if(locSKS_EFT_SetUp.BTBCurrencyDefault == SKS_BTB_CurrencyDefaults::TargetAccount)
        {
            select firstonly DisplayValue from combination where combination.recId == _transaction.LedgerDimension;
        }
        else
        {
            select firstonly DisplayValue from combination where combination.recId == _transaction.OffsetLedgerDimension;
        }
        return combination.DisplayValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>SKS_BTB_ChangeBankTransferStatusAuto_OnClicked</Name>
				<Source><![CDATA[
    [FormControlEventHandler(formControlStr(LedgerJournalTransDaily, SKS_BTB_ChangeBankTransferStatusAuto), FormControlEventType::Clicked),
    SuppressBPWarning('BPParameterNotUsed', 'Parameter e required in signature')]
    public static void SKS_BTB_ChangeBankTransferStatusAuto_OnClicked(FormControl sender, FormControlEventArgs e)
    {
        FormRun formRun = sender.formRun();
        FormDataSource transDS = formRun.dataSource('LedgerJournalTrans');
        //LedgerJournalTrans trans = transDS.cursor();
        LedgerJournalTable ledgerJournalTable = formRun.args().record(); 
        FormDataSource LedgerJournalTable_ds = formRun.dataSource();
        SKS_DD_CustVendPaymExceptionList custVendPaymExceptionList;
        LedgerJournalTrans      lLedgerJournalTrans;
        boolean validateSet;

        validateSet = SKS_EFT_BTBJournalValidate::validateSet(ledgerJournalTable,false,true);
        
        select firstonly RecId from custVendPaymExceptionList
            where custVendPaymExceptionList.JournalId == ledgerJournalTable.JournalNum &&
                custVendPaymExceptionList.ErrorWarning == SKS_DD_ErrorWarning::Error;

        if(!custVendPaymExceptionList)
        {
            if(ledgerJournalTable.SKS_EFT_JournalState == SKS_EFT_JournalState::Transferred)
            {
                if(SKS_Table_LedgerJournalTable::SetEFTJournalState(ledgerJournalTable))
                {
                    ledgerJournalTable.update();
                    formRun.bookRefresh();
                    transDS.research(true);
                }
            }
            else
            {
                if(SKS_Table_LedgerJournalTable::SetEFTJournalState(ledgerJournalTable, true))
                {
                    ledgerJournalTable.SKS_EFT_AutoCreate = NoYes::Yes;
                    ledgerJournalTable.update();
                    if(ledgerJournalTable.SKS_EFT_JournalState != SKS_EFT_JournalState::Errors)
                    {
                        info("@SKS:SKSBTBValidationSuccess");

                        select lLedgerJournalTrans where lLedgerJournalTrans.JournalNum == ledgerJournalTable.JournalNum
                                                      && lLedgerJournalTrans.SKS_IHB_InterComp == NoYes::No;
                        if(lLedgerJournalTrans)
                        {
                            SKS_EFT_Processing::PostFromAutoCreate(lLedgerJournalTrans);
                        }
                    }

                    formRun.bookRefresh();
                    transDS.research(true);
                }
            }
        }
        else
        {
            if(validateSet)
            {
                if (ledgerJournalTable.SKS_EFT_JournalState == SKS_EFT_JournalState::Errors)
                {
                    ledgerJournalTable.SKS_EFT_JournalState = SKS_EFT_JournalState::Ready;
                }
            }
            else
            {
                if (ledgerJournalTable.SKS_EFT_JournalState == SKS_EFT_JournalState::Ready)
                {
                    ledgerJournalTable.SKS_EFT_JournalState = SKS_EFT_JournalState::Errors;
                }
            }

            ledgerJournalTable.update();
            formRun.bookRefresh();
            LedgerJournalTable_ds.research(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>SKS_BTB_ChangeBankTransferStatus_OnClicked</Name>
				<Source><![CDATA[
    [FormControlEventHandler(formControlStr(LedgerJournalTransDaily, SKS_BTB_ChangeBankTransferStatus), FormControlEventType::Clicked),
    SuppressBPWarning('BPParameterNotUsed', 'Parameter e required in signature')]
    public static void SKS_BTB_ChangeBankTransferStatus_OnClicked(FormControl sender, FormControlEventArgs e)
    {
        FormRun formRun = sender.formRun();
        FormDataSource transDS = formRun.dataSource('LedgerJournalTrans');
        //LedgerJournalTrans trans = transDS.cursor();
        LedgerJournalTable ledgerJournalTable = formRun.args().record(); //trans.ledgerJournalTable();
        SKS_DD_CustVendPaymExceptionList custVendPaymExceptionList;  //SKS_VP1_APPaymentValidate

        SKS_EFT_BTBJournalValidate::validateSet(LedgerJournalTable,false,true);  //SKS_BS_VP4_BankFormatValidation

        select firstonly RecId from custVendPaymExceptionList
            where custVendPaymExceptionList.JournalId == ledgerJournalTable.JournalNum &&
                custVendPaymExceptionList.ErrorWarning == SKS_DD_ErrorWarning::Error;

        //SKS_VP1_APPaymentValidate
        if(!custVendPaymExceptionList) //SKS_VP1_APPaymentValidate
        {
            if(ledgerJournalTable.SKS_EFT_JournalState == SKS_EFT_JournalState::Transferred)
            {
                if(SKS_Table_LedgerJournalTable::SetEFTJournalState(LedgerJournalTable))
                {
                    ledgerJournalTable.update();
                    formRun.bookRefresh();
                    transDS.research(true);
                }
            }
            else
            {
                if(SKS_Table_LedgerJournalTable::SetEFTJournalState(LedgerJournalTable))
                {
                    ledgerJournalTable.SKS_EFT_AutoCreate = NoYes::No;
                    ledgerJournalTable.update();

                    if(ledgerJournalTable.SKS_EFT_JournalState != SKS_EFT_JournalState::Errors)
                    {
                        info("@SKS:SKSBTBValidationSuccess");
                    }
                    formRun.bookRefresh();
                    transDS.research(true);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>SKS_BTB_CheckBankTransfer_OnClicked</Name>
				<Source><![CDATA[
    [FormControlEventHandler(formControlStr(LedgerJournalTransDaily, SKS_BTB_CheckBankTransfer), FormControlEventType::Clicked),
    SuppressBPWarning('BPParameterNotUsed', 'Parameter e required in signature')]
    public static void SKS_BTB_CheckBankTransfer_OnClicked(FormControl sender, FormControlEventArgs e)
    {
        FormRun formRun = sender.formRun();
        FormDataSource transDS = formRun.dataSource('LedgerJournalTrans');
        //LedgerJournalTrans trans = transDS.cursor();
        LedgerJournalTable ledgerJournalTable = formRun.args().record();
        SKS_DD_CustVendPaymExceptionList custVendPaymExceptionList;  //SKS_VP1_APPaymentValidation

        SKS_EFT_BTBJournalValidate::validateSet(ledgerJournalTable,false, false);

        select firstonly RecId from custVendPaymExceptionList
        where custVendPaymExceptionList.JournalId == ledgerJournalTable.JournalNum &&
        custVendPaymExceptionList.ErrorWarning == SKS_DD_ErrorWarning::Error;

        //SKS_VP1_APPaymentValidation

        if(custVendPaymExceptionList.RecId == 0)
        {
            if (ledgerJournalTable.SKS_EFT_JournalState == SKS_EFT_JournalState::Errors)
            {
                ledgerJournalTable.selectForUpdate(true);
                ledgerJournalTable.SKS_EFT_JournalState = SKS_EFT_JournalState::Ready;
            }
        }
        else
        {
            if (ledgerJournalTable.SKS_EFT_JournalState == SKS_EFT_JournalState::Ready)
            {
                ledgerJournalTable.selectForUpdate(true);
                ledgerJournalTable.SKS_EFT_JournalState = SKS_EFT_JournalState::Errors;
            }
        }
        if (ledgerJournalTable.SKS_EFT_JournalState == SKS_EFT_JournalState::Ready)
        {
            info("@SYS17146");
        }

        ledgerJournalTable.update();
        formRun.bookRefresh();
        transDS.research(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>LedgerJournalTransDaily_OnInitialized</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormEventHandler(formStr(LedgerJournalTransDaily), FormEventType::Initialized),
    SuppressBPWarning('BPParameterNotUsed', 'Parameter e required in signature')]
    public static void LedgerJournalTransDaily_OnInitialized(xFormRun sender, FormEventArgs e)
    {
        FormRun headerFormRun = sender.args().caller() as FormRun;
        FormRun formRun = sender;

        if(headerFormRun.args().menuItemName() == menuItemDisplayStr(SKS_BTB_BankTransferJournal))
        {
            FormControl buttonPeriodicJournal = sender.design(0).controlName('PeriodicJournal');
            buttonPeriodicJournal.visible(false);

            FormControl buttonFixedAssets = sender.design(0).controlName('FixedAssets');
            buttonFixedAssets.visible(false);

            FormControl buttonInquiries = sender.design(0).controlName('Inquiries');
            buttonInquiries.visible(false);

            FormControl tabAssetTab = sender.design(0).controlName('AssetTab');
            tabAssetTab.visible(false);

            FormControl buttonLineFunctions = sender.design(0).controlName('LineFunctions');
            buttonLineFunctions.visible(false);

            FormControl buttonTaxTransSource = sender.design(0).controlName('TaxTransSource');
            buttonTaxTransSource.visible(false);

            FormControl buttonLedgerInAccountStatementTrans = sender.design(0).controlName('LedgerInAccountStatementTrans');
            buttonLedgerInAccountStatementTrans.visible(false);

            FormControl buttonLedgerInAccountStatementTotal = sender.design(0).controlName('LedgerInAccountStatementTotal');
            buttonLedgerInAccountStatementTotal.visible(false);

            FormControl buttonbuttonFurtherPosting = sender.design(0).controlName('buttonFurtherPosting');
            buttonbuttonFurtherPosting.visible(false);

            FormControl buttonPaymentReconciliation = sender.design(0).controlName('buttonPaymentReconciliation');
            buttonPaymentReconciliation.visible(true);

            FormStringControl company = formRun.Design().controlName(formControlStr(LedgerJournalTransDaily, LedgerJournalTrans_Company)) as FormStringControl;
            company.label('Target company');

            SegmentedEntryControl accountNum = formRun.Design().controlName(formControlStr(LedgerJournalTransDaily, LedgerJournalTrans_AccountNum)) as SegmentedEntryControl;
            accountNum.label('Target account');

            FormStringControl Offsetcompany = formRun.Design().controlName(formControlStr(LedgerJournalTransDaily, LedgerJournalTrans_OffsetCompany)) as FormStringControl;
            Offsetcompany.label('Initiating company');

            SegmentedEntryControl OffsetaccountNum = formRun.Design().controlName(formControlStr(LedgerJournalTransDaily, LedgerJournalTrans_OffsetAccount)) as SegmentedEntryControl;
            OffsetaccountNum.label('Initiating account');
            
            // SKS_BTB_LedgerJournalTransDailyEventHandler::sksSetControls(sender);
        }
        else
        {
            sender.design(0).controlName('SKS_BTB_ChangeBankTransferStatusAuto').visible(false);
            sender.design(0).controlName('SKS_BTB_ChangeBankTransferStatus').visible(false);
            sender.design(0).controlName('SKS_BTB_CheckBankTransfer').visible(false);
            sender.design(0).controlName('SKS_BTB_ExceptionList').visible(false);

            FormControl buttonPaymentReconciliation = sender.design(0).controlName('buttonPaymentReconciliation');
            buttonPaymentReconciliation.visible(false);

        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>LedgerJournalTrans_OnInitialized</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormDataSourceEventHandler(formDataSourceStr(LedgerJournalTransDaily, LedgerJournalTrans), FormDataSourceEventType::Initialized),
    SuppressBPWarning('BPParameterNotUsed', 'Parameter e required in signature')]
    public static void LedgerJournalTrans_OnInitialized(FormDataSource sender, FormDataSourceEventArgs e)
    {
        FormRun headerFormRun = sender.formrun().args().caller() as FormRun;
        FormRun formRun = sender.formRun();
        
        FormDataSource ledgerJournalTrans_ds = formRun.dataSource(formDataSourceStr(LedgerJournalTransDaily, LedgerJournalTrans)) as FormDataSource;

        if(headerFormRun.args().menuItemName() == menuItemDisplayStr(SKS_BTB_BankTransferJournal))
        {
            var formLookup = SKS_BTB_LedgerJournalTransDailyFormLookup::construct();
 
            sender.object(fieldNum(LedgerJournalTrans, SKS_BTB_TransferMethod)).registerOverrideMethod(methodStr(FormDataObject, lookup),
                methodStr(SKS_BTB_LedgerJournalTransDailyFormLookup, TransferMode_OnLookup), formLookup);

            sender.object(fieldNum(LedgerJournalTrans, SKS_BTB_TransferSpec)).registerOverrideMethod(methodStr(FormDataObject, lookup),
                methodStr(SKS_BTB_LedgerJournalTransDailyFormLookup, TransferSpec_OnLookup), formLookup);

            sender.object(fieldNum(LedgerJournalTrans, SKS_BTB_TransferSpec)).registerOverrideMethod(methodStr(FormDataObject, jumpRef),
                methodStr(SKS_BTB_LedgerJournalTransDailyFormLookup, TransferSpec_OnjumpRef), formLookup);
            
            ledgerJournalTrans_ds.object(fieldnum(LedgerJournalTrans, PaymentStatus)).enabled(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sksSetControls</Name>
				<Source><![CDATA[
    static void sksSetControls(FormRun formrun)
    {
        //LedgerJournalTrans ledgerJournalTrans = formrun.dataSource('LedgerJournalTrans').cursor();
        LedgerJournalTable ledgerJournalTable;
        Formdesign formdesign = formrun.design(0);
        FormControl buttonCheckBankTransfer = formdesign.controlName('SKS_BTB_CheckBankTransfer');
        FormControl buttonChangeBankTransferStatus = formdesign.controlName('SKS_BTB_ChangeBankTransferStatus');
        FormControl buttonChangeBankTransferStatusAuto = formdesign.controlName('SKS_BTB_ChangeBankTransferStatusAuto');
        
        if (formHasMethod(formrun, 'ledgerJournalTable'))
        {
            ledgerJournalTable = formrun.ledgerJournalTable();
        }

        SKS_EFT_JournalForm::setSKS_EFT_Button(ledgerJournalTable , buttonCheckBankTransfer, true, true);

        SKS_EFT_Setup lSKS_EFT_Setup;
        select firstOnly BTBCreateSendLater, BTBAutoCreate from lSKS_EFT_Setup;

        buttonChangeBankTransferStatus.visible(true);
        if(lSKS_EFT_Setup.BTBCreateSendLater)
        {
            SKS_EFT_JournalForm::setSKS_EFT_Button(ledgerJournalTable, buttonChangeBankTransferStatus, false, true);
        }
        else
        {
            buttonChangeBankTransferStatus.enabled(false);
        }

        buttonChangeBankTransferStatusAuto.visible(true);

        if((ledgerJournalTable.SKS_EFT_JournalState == SKS_EFT_JournalState::Ready || ledgerJournalTable.SKS_EFT_JournalState == SKS_EFT_JournalState::Errors)
            && buttonChangeBankTransferStatus.enabled() == true && lSKS_EFT_Setup.BTBAutoCreate)
        {
            buttonChangeBankTransferStatusAuto.enabled(true);
        }
        else
        {
            buttonChangeBankTransferStatusAuto.enabled(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>LedgerJournalTransDaily_Post_bookRefresh</Name>
				<Source><![CDATA[
    [PostHandlerFor(formStr(LedgerJournalTransDaily), formMethodStr(LedgerJournalTransDaily, bookRefresh))]
    public static void LedgerJournalTransDaily_Post_bookRefresh(XppPrePostArgs args)
    {
        FormRun     formRun = args.getThis();

        SKS_BTB_LedgerJournalTransDailyEventHandler::sksSetControls(formRun);
    }

]]></Source>
			</Method>
			<Method>
				<Name>LedgerJournalTransDaily_Post_initLedger</Name>
				<Source><![CDATA[
    [PostHandlerFor(formStr(LedgerJournalTransDaily), formMethodStr(LedgerJournalTransDaily, initLedger))]
    public static void LedgerJournalTransDaily_Post_initLedger(XppPrePostArgs args)
    {
        FormRun formRun = args.getThis();
        //LedgerJournalTable ledgerJournalTable = formRun.args().record();
        //FormDataSource trans_DS = formRun.dataSource();
        if (formRun.args().dataset() == tableNum(LedgerJournalTable))
        {
            SKS_BTB_LedgerJournalTransDailyEventHandler::sksSetControls(formRun);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>Functions_OnClicked</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormControlEventHandler(formControlStr(LedgerJournalTransDaily, Functions), FormControlEventType::Clicked),
    SuppressBPWarning('BPParameterNotUsed', 'Parameter e required in signature')]
    public static void Functions_OnClicked(FormControl sender, FormControlEventArgs e)
    {
        FormRun formRun = sender.formRun();

        formRun.bookRefresh();
    }

]]></Source>
			</Method>
			<Method>
				<Name>LedgerJournalTrans_SelectionChanged</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormDataSourceEventHandler(formDataSourceStr(LedgerJournalTransDaily, LedgerJournalTrans), FormDataSourceEventType::SelectionChanged),
    SuppressBPWarning('BPParameterNotUsed', 'Parameter e required in signature')]
    public static void LedgerJournalTrans_SelectionChanged(FormDataSource sender, FormDataSourceEventArgs e)
    {
        SKS_BTB_PaymModeTable lSKS_BTB_PaymModeTable;
        FormRun formRun = sender.formRun();
        FormDataSource ledgerJournalTrans_ds = formRun.dataSource(formDataSourceStr(LedgerJournalTransDaily, LedgerJournalTrans)) as FormDataSource;
        LedgerJournalTrans ledgerJournalTrans = ledgerJournalTrans_ds.cursor();
        

        // This re-enables controls that were disabled by EFT+
        // This is needed when moving from line to line so controls get re-enabled correctly
        SKS_BTB_LedgerJournalTransDailyEventhandler::SKS_EFT_PaymentStatusEnable(formRun, true);

        SKS_BTB_LedgerJournalTransDailyEventhandler::ChangeButtonDeleteTransactionsState(formRun);

        // Enable/Disable Method of Payment and Payment Spec
        //DO Not call if a new line
        if(ledgerJournalTrans)
        {
            //SKS_EFT_JournalForm::DisableAPPaymModeAndSpec(ledgerJournalTrans.Company, ledgerJournalTrans.LedgerDimension, ledgerJournalTrans_ds);
            select firstonly PaymMode from lSKS_BTB_PaymModeTable where lSKS_BTB_PaymModeTable.PaymMode == ledgerJournalTrans.PaymMode;

            if(ledgerJournalTrans.SKS_EFT_BTBPmtSelectionRecId != 0)
            {
                SKS_BTB_LedgerJournalTransDailyEventhandler::SKS_EFT_PaymentStatusEnable(formRun, false, true); // If transferred to EFT+, only allow reject
            }
            else
            {
                if(lSKS_BTB_PaymModeTable.PaymMode)
                {
                    SKS_BTB_LedgerJournalTransDailyEventhandler::SKS_EFT_PaymentStatusEnable(formRun, false);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>SKS_EFT_PaymentStatusEnable</Name>
				<Source><![CDATA[
    static void SKS_EFT_PaymentStatusEnable(FormRun  _formRun, boolean _enabled, boolean _transferred = false)
    {
        FormDataSource ledgerJournalTrans_ds = _formRun.dataSource(formDataSourceStr(LedgerJournalTransDaily, LedgerJournalTrans)) as FormDataSource;
        LedgerJournalTrans ledgerJournalTrans = ledgerJournalTrans_ds.cursor();
        FormControl paymReconciliationNone = _formRun.Design().controlName(formControlStr(LedgerJournalTransDaily,PaymReconciliationNone));
        FormControl paymReconciliationSent = _formRun.Design().controlName(formControlStr(LedgerJournalTransDaily,PaymReconciliationSent));
        FormControl paymReconciliationRecieved = _formRun.Design().controlName(formControlStr(LedgerJournalTransDaily,PaymReconciliationRecieved));
        FormControl paymReconciliationConfirm = _formRun.Design().controlName(formControlStr(LedgerJournalTransDaily,PaymReconciliationConfirm));
        FormControl paymReconciliationReject = _formRun.Design().controlName(formControlStr(LedgerJournalTransDaily,PaymReconciliationReject));
        FormControl bankChequeReuse = _formRun.Design().controlName(formControlStr(LedgerJournalTransDaily,BankChequeReuse));
        FormControl custVendPaymReconciliationDelete = _formRun.Design().controlName(formControlStr(LedgerJournalTransDaily,CustVendPaymReconciliationDelete));
        FormControl custVendPaymReconciliationSentDelete = _formRun.Design().controlName(formControlStr(LedgerJournalTransDaily,CustVendPaymReconciliationSentDelete));
        FormControl custVendPaymReconciliationDeleted = _formRun.Design().controlName(formControlStr(LedgerJournalTransDaily,CustVendPaymReconciliationDeleted));
        //FormControl sksEFTSnapshot = _formRun.Design().controlName(formControlStr(LedgerJournalTransDaily,SKSEFTSnapshot));

        if(_enabled)
        {
            ledgerJournalTrans_ds.object(fieldnum(LedgerJournalTrans, PaymentStatus)).enabled(true);
            paymReconciliationNone.enabled(true);
            paymReconciliationSent.enabled(true);
            paymReconciliationRecieved.enabled(true);
            paymReconciliationConfirm.enabled(true);
            paymReconciliationReject.enabled(true);
            bankChequeReuse.enabled(true);
            custVendPaymReconciliationDelete.enabled(true);
            custVendPaymReconciliationSentDelete.enabled(true);
            custVendPaymReconciliationDeleted.enabled(true);
            //sksEFTSnapshot.enabled(false);
        }
        else
        {
            //sksEFTSnapshot.enabled(true);
            bankChequeReuse.enabled(false);

            paymReconciliationNone.enabled(false);
            paymReconciliationSent.enabled(false);
            paymReconciliationRecieved.enabled(false);
            paymReconciliationConfirm.enabled(false);
            paymReconciliationReject.enabled(false);

            if(_transferred)
            {
                if(ledgerJournalTrans.PaymentStatus == CustVendPaymStatus::Rejected)
                {
                    paymReconciliationNone.enabled(true);
                }

                if(ledgerJournalTrans.PaymentStatus == CustVendPaymStatus::Recieved)
                {
                    paymReconciliationReject.enabled(true);
                    paymReconciliationConfirm.enabled(true);
                    paymReconciliationSent.enabled(true);
                }

                if(ledgerJournalTrans.PaymentStatus == CustVendPaymStatus::Confirmed)
                {
                    paymReconciliationReject.enabled(true);
                    paymReconciliationRecieved.enabled(true);
                    paymReconciliationSent.enabled(true);
                }

                if (LedgerJournalTrans.PaymentStatus == CustVendPaymStatus::Sent)
                {
                    paymReconciliationReject.enabled(true);
                    if(VendPaymModeTable::find(ledgerJournalTrans.PaymMode).PaymentType != PaymentType::Check && LedgerJournalTrans.BankChequeNum != '')
                    {
                        paymReconciliationRecieved.enabled(true);
                        paymReconciliationConfirm.enabled(true);
                    }
                }

                if(LedgerJournalTrans.PaymentStatus == CustVendPaymStatus::None)
                {
                    paymReconciliationReject.enabled(true);
                }
            }
            else
            { 
                if(ledgerJournalTrans.PaymentStatus != CustVendPaymStatus::Rejected)
                {
                    if(ledgerJournalTrans.PaymentStatus != CustVendPaymStatus::None)
                    {
                        ledgerJournalTrans.PaymentStatus = CustVendPaymStatus::None;
                        SKS_BTB_LedgerJournalTransDailyEventhandler::setStatusNoneForAllApplicable(ledgerJournalTrans);
                        ledgerJournalTrans_ds.research(true);
                        info("@SKS2353");
                    }
                }
                else
                {
                    paymReconciliationNone.enabled(true);
                }
            }
            custVendPaymReconciliationDelete.enabled(false);
            custVendPaymReconciliationSentDelete.enabled(false);
            custVendPaymReconciliationDeleted.enabled(false);
            ledgerJournalTrans_ds.object(fieldnum(LedgerJournalTrans, PaymentStatus)).enabled(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ChangeButtonDeleteTransactionsState</Name>
				<Source><![CDATA[
    static void ChangeButtonDeleteTransactionsState(FormRun _formRun)
    {
        FormControl buttonDeleteTransactions = _formRun.design().controlName(formControlStr(LedgerJournalTransVendPaym, buttonDeleteTransactions));
        LedgerJournalTable ledgerJournalTable = _formRun.args().record();

        if (ledgerJournalTable.SKS_EFT_JournalState == SKS_EFT_JournalState::Transferred
            || ledgerJournalTable.SKS_EFT_JournalState == SKS_EFT_JournalState::PartiallyTransferred)
        {
            buttonDeleteTransactions.enabled(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setStatusNoneForAllApplicable</Name>
				<Source><![CDATA[
    public static void setStatusNoneForAllApplicable(LedgerJournalTrans _ledgerjournaltrans)
    {
        LedgerJournalTrans  lLedgerJournalTrans;
        ttsbegin;
        while select forupdate lLedgerJournalTrans
            where lLedgerJournalTrans.JournalNum == _ledgerjournaltrans.JournalNum
            && lLedgerJournalTrans.SKS_EFT_BTBPmtSelectionRecId == 0
            && lLedgerJournalTrans.PaymentStatus != CustVendPaymStatus::None
            && lLedgerJournalTrans.RecId != _ledgerjournaltrans.RecId
        {
            lLedgerJournalTrans.PaymentStatus = CustVendPaymStatus::None;
            lLedgerJournalTrans.update();
        }
        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>