<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_NL_ING_XML</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_NL_ING_XML extends SKS_EFT_Format_ISO_20022_001001003
/// </summary>
class SKS_EFT_Format_NL_ING_XML extends SKS_EFT_Format_ISO_20022_001001003_FD
{
    #define.FormatVersion('20220822')
    #define.SEPA('SEPA')
    #define.DOM_INT('DOM-INT')
    #define.INTL('INTL')
    #define.DOM('DOM')
    #define.BDG('BDG')
    #define.DOM_ORD('DOM-ORD')
    #define.DOM_EXP('DOM-EXP')
    #define.INTL_EXP('INTL-EXP')
    #define.INTL_ORD('INTL-ORD')
    #define.RIS('RIS')

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_InstrForDbtrAgt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Dbtr agent
    /// </summary>
    /// <param name = "_nodeCdtTrfTxInf">_nodeCdtTrfTxInf</param>
    protected void node_CdtTrfTxInf_InstrForDbtrAgt(XmlElement _nodeCdtTrfTxInf)
    {
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #RIS)
        {
            //                      InstrForDbtrAgt
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeCdtTrfTxInf, 'InstrForDbtrAgt', 'DMST');
            
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_PmtTpInf</Name>
				<Source><![CDATA[
    protected void node_PmtInf_PmtTpInf(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.6: PmtTpInf
        //          2.7: InstrPrty
        //          2.8: SvcLvl
        //          2.11: LclInstrm
        //          2.14: CtgyPurp
        //------------------------------------------------------------------------------------------------------
        XmlElement nodePmftTpInf;
        boolean printPmtTpInf=true;

        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'NL-ING-XML' :
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {                    
                    case #INTL_ORD:
                    case #RIS:
                        printPmtTpInf = false;
                        break;
                    default:
                        break;
                }
                break;            
        }

        if(printPmtTpInf)//SKS_VSTS_14398
        {
            //      2.6: PmtTpInf
            nodePmftTpInf = _nodePmtInf.appendChild(xmlDoc.createElement('PmtTpInf'));
    
            //          2.7: InstrPrty
            this.node_PmtInf_PmtTpInf_InstrPrty(nodePmftTpInf);
    
            //          2.8: SvcLvl
            this.node_PmtInf_PmtTpInf_SvcLvl(nodePmftTpInf);
    
            //          2.14: CtgyPurp
            this.node_PmtInf_PmtTpInf_CtgyPurp(nodePmftTpInf);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_PmtTpInf_CtgyPurp</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_PmtInf_PmtTpInf_CtgyPurp
    /// </summary>
    /// <param name = "_nodePmftTpInf">_nodePmftTpInf</param>
    protected void node_PmtInf_PmtTpInf_CtgyPurp(XmlElement _nodePmftTpInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.14: CtgyPurp
        //------------------------------------------------------------------------------------------------------
        XmlElement  nodeCtgyPurp;

        str value = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('CtgyPurp', mSKS_EFT_FileDetail.RecId));
                
        if(value)
        {
            //              2.15: CtgyPurp
            nodeCtgyPurp = _nodePmftTpInf.appendChild(xmlDoc.createElement('CtgyPurp'));
    
            //                  2.16: Prtry
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCtgyPurp, 'Cd', value);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf()
    {
        //------------------------------------------------------------------------------------------------------
        //      2.27: CdtTrfTxInf
        //          2.28: PmtId
        //          2.42: Amt
        //          2.51: ChrgBr
        //          2.52: ChqInstr
        //          2.77: CdtrAgt
        //          2.79: Cdtr
        //          2.80: CdtrAcct
        //          2.98: RmtInf
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeCdtTrfTxInf;
        
        //      2.27: CdtTrfTxInf
        nodeCdtTrfTxInf = nodePmtInf.appendChild(xmlDoc.createElement('CdtTrfTxInf'));
        
        //          2.28: PmtId
        this.node_CdtTrfTxInf_PmtId(nodeCdtTrfTxInf);
        
        //          2.42: Amt
        this.node_CdtTrfTxInf_Amt(nodeCdtTrfTxInf);
        
        //          XchgRateInf
        this.node_CdtTrfTxInf_XchgRateInf(nodeCdtTrfTxInf);
        
        //          2.71: IntrmyAgt1
        this.node_CdtTrfTxInf_IntrmyAgt1(nodeCdtTrfTxInf);
        
        //          2.77: CdtrAgt
        this.node_CdtTrfTxInf_CdtrAgt(nodeCdtTrfTxInf);
        
        //          2.79: Cdtr
        this.node_CdtTrfTxInf_Cdtr(nodeCdtTrfTxInf);
        
        //          2.80: CdtrAcct
        this.node_CdtTrfTxInf_CdtrAcct(nodeCdtTrfTxInf);

           //
        this.node_CdtTrfTxInf_InstrForDbtrAgt(nodeCdtTrfTxInf);
        
        //          Tax
        this.node_CdtTrfTxInf_Tax(nodeCdtTrfTxInf);
        
        //          2.98: RmtInf
        this.node_CdtTrfTxInf_RmtInf(nodeCdtTrfTxInf);        
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_Cdtr</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_Cdtr(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.79: Cdtr
        //              Nm
        //              PstlAdr
        //              Id
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeCdtr;

        //          2.79: Cdtr
        nodeCdtr = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('Cdtr'));

        //              Nm
        this.node_CdtTrfTxInf_Cdtr_Nm(nodeCdtr);
 
        //              PstlAdr
        this.node_PmtInf_Cdtr_PstlAdr(nodeCdtr);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_Cdtr_Nm</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_Cdtr_Nm(XmlElement _nodeCdtr)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.79: Cdtr
        //              Nm
        //------------------------------------------------------------------------------------------------------
        str name = mSKS_EFT_FileDetail.AccountName;
        int len;

        if(mRemittanceName != '')
        {
            name = mRemittanceName;
        }
        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'NL-ING-XML' :
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #DOM_ORD:
                    case #DOM_EXP:
                    case #INTL_EXP:
                    case #INTL_ORD:
                        len = 70;
                        break;
                    default:
                        len = 140;
                        break;
                }
                break;
            default:
                len = 140;
                break;
        }
        //              Nm
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeCdtr, 'Nm', this.CharacterReplacement(name), len);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_Cdtr_PstlAdr</Name>
				<Source><![CDATA[
    protected void node_PmtInf_Cdtr_PstlAdr(XmlElement _nodeCdtr)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.19: Cdtr
        //          PstlAdr
        //------------------------------------------------------------------------------------------------------       
        boolean printCompleteAddr;
        boolean printUstrdPstlAddr;
        boolean printStrdPstlAddr;

        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {           
            case 'NL-ING-XML' :
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #DOM_ORD:
                    case #DOM_EXP:
                    case #INTL_EXP:
                    case #INTL_ORD:
                        printCompleteAddr = true;
                        break;
                    case #SEPA:
                    case #DOM_INT:
                        printUstrdPstlAddr = true;
                        break; 
                    default:
                        printStrdPstlAddr = true;
                        break;
                }
                break;
            default:
                printStrdPstlAddr = true;
                break;
        }

        if(printCompleteAddr)
        {
            this.node_PstlAdr(_nodeCdtr, mRemittanceCountryRegionId,mRemittanceAdrline1,mRemittanceZipCode,mRemittanceCity,35,mRemittanceAdrline2,mRemittanceState,true);
        }
        else if(printUstrdPstlAddr)
        {
            this.node_PstlAdr(_nodeCdtr, mRemittanceCountryRegionId, mRemittanceAdrLine1, mRemittanceZipCode, mRemittanceCity);
        }
        else if(printStrdPstlAddr)
        {
            // PstlAdr
            this.node_PstlAdr_Structured(_nodeCdtr,mRemittanceCountryRegionId,mRemittanceAdrline1,mRemittanceZipCode,mRemittanceCity,35,mRemittanceAdrline2,mRemittanceState);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_CdtrAcct</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_CdtrAcct(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.80: CdtrAcct
        //              Id
        //                  Othr
        //                  Id
        //              Tp/Ptry
        //------------------------------------------------------------------------------------------------------
    
        XmlElement nodeCdtrAcct;
        XmlElement nodeCdtrAcctId;
        XmlElement nodeCdtrAcctIdOthr;
        str         iban, acctNum;
            
        iban = mSKS_EFT_FileDetail.DepBankIBAN;
        acctNum = mSKS_EFT_FileDetail.DepBankAcct;

        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'NL-ING-XML-RO' :
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #DOM:
                    case #BDG:
                        acctNum = '';
                        break;
                    case #RIS:
                        iban = '';
                        break;
                }
                break;
            case 'NL-ING-XML' :
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #RIS:
                        iban = '';
                        break;
                }
                break;
        }

        if(iban || acctNum)
        {
            // 2.80: CdtrAcct
            nodeCdtrAcct = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('CdtrAcct'));

            // Id
            nodeCdtrAcctId = nodeCdtrAcct.appendChild(xmlDoc.createElement('Id'));

            if(iban)
            {
                // IBAN
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdtrAcctId, 'IBAN', mSKS_EFT_FileDetail.DepBankIBAN, 34); //SKS_DevOps_16266
            }
            else if(acctNum)
            {
                // Othr
                nodeCdtrAcctIdOthr = nodeCdtrAcctId.appendChild(xmlDoc.createElement('Othr'));

                // Id
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdtrAcctIdOthr, 'Id', mSKS_EFT_FileDetail.DepBankAcct);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_CdtrAgt</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_CdtrAgt(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.77: CdtrAgt
        //              FinInstnId
        //                  BIC
        //                  ClrSysMmbId
        //                  Nm
        //                  PstlAdr
        //              BrnchId
        //                  Id
        //------------------------------------------------------------------------------------------------------

        XmlElement nodeCdtrAgt;
        XmlElement nodeFinInstnId;
        boolean printSwiftrtg;
        boolean printCdtrAgtNm;
        boolean printCdtrAgtPstlAdr;
        boolean printNmPstlAdr;
        int        len, length;
        str swift, rtg;

        swift =  mSKS_EFT_FileDetail.DepSwiftNo;
        rtg   =  mSKS_EFT_FileDetail.DepBankTransit;
 
        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'NL-ING-XML-RO' :
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #BDG:
                        swift = '';
                        printCdtrAgtPstlAdr = true;
                        length = 35;
                        break;
                    case #INTL:
                        printSwiftrtg = true;
                        break;
                    case #DOM:
                        printCdtrAgtNm = true;
                        length = 70;
                        printCdtrAgtPstlAdr = true;
                        break;
                }
                break;
            case 'NL-ING-XML' :
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #DOM_INT:
                        printSwiftrtg = true;
                        printNmPstlAdr = true;
                        length = 35;
                        break;
                    case #DOM_ORD:
                    case #DOM_EXP:
                    case #INTL_EXP:
                    case #INTL_ORD:
                        rtg = '';
                        break;
                    case #SEPA:
                        printNmPstlAdr = true;
                        length = 35;
                }
                break;
        }
 
        if(swift || rtg || mSKS_EFT_FileDetail_BenBank.BenBankName)
        {
            //          2.77: CdtrAgt
            nodeCdtrAgt = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('CdtrAgt'));

            //              FinInstnId
            nodeFinInstnId = nodeCdtrAgt.appendChild(xmlDoc.createElement('FinInstnId'));

            if(swift)
            {
                //                  BIC
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeFinInstnId, 'BIC', mSKS_EFT_FileDetail.DepSwiftNo, 0, false);

                if(printSwiftrtg)
                {
                    //                  ClrSysMmbId
                    this.node_CdtTrfTxInf_CdtrAgt_MmbId(nodeFinInstnId);
                }
            }
            else
            {
                if((printCdtrAgtNm && mSKS_EFT_FileDetail_BenBank.BenBankName) || printCdtrAgtPstlAdr)
                {
                    //                  Nm
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeFinInstnId, 'Nm', this.CharacterReplacement(mSKS_EFT_FileDetail_BenBank.BenBankName), len, false);
   
                    if(printCdtrAgtPstlAdr)
                    {
                        //                  PstlAdr
                        this.node_PstlAdr(nodeFinInstnId, mSKS_EFT_FileDetail_BenBank.BenBankCountryRegionId, mSKS_EFT_FileDetail_BenBank.BenBankAddr, '', mSKS_EFT_FileDetail_BenBank.BenBankCity);
                    }
                }
                else if(rtg)
                {
                    //                  ClrSysMmbId
                    this.node_CdtTrfTxInf_CdtrAgt_MmbId(nodeFinInstnId);
                }
            }
        
            if((mSKS_EFT_FileDetail_BenBank.BenBankName || printCdtrAgtPstlAdr) && printNmPstlAdr)
            {
                //                  Nm
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeFinInstnId, 'Nm', this.CharacterReplacement(mSKS_EFT_FileDetail_BenBank.BenBankName), len, false);
  
                //                  PstlAdr
                this.node_PstlAdr(nodeFinInstnId, mSKS_EFT_FileDetail_BenBank.BenBankCountryRegionId, mSKS_EFT_FileDetail_BenBank.BenBankAddr, '', mSKS_EFT_FileDetail_BenBank.BenBankCity);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_CdtrAgt_PstlAdr</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_CdtrAgt_PstlAdr(XmlElement _nodeCdtrAgt)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.77: CdtrAgent
        //          PstlAdr
        //------------------------------------------------------------------------------------------------------
    
        this.node_PstlAdr(_nodeCdtrAgt, mSKS_EFT_FileDetail_BenBank.BenBankCountryRegionId, mSKS_EFT_FileDetail_BenBank.BenBankAddr, '', ''); // Zip and City not used at this time
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_CdtrAgt_MmbId</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_CdtTrfTxInf_CdtrAgt_MmbId
    /// </summary>
    /// <param name = "_nodeFinInstnId">_nodeFinInstnId</param>
    protected void node_CdtTrfTxInf_CdtrAgt_MmbId(XmlElement _nodeFinInstnId)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.77: CdtrAgent
        //          MmbId
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeClrSysMmbId;
        XmlElement nodeClrSysId;
        str        value;
        int        len;
    
        if(mSKS_EFT_FileDetail.DepBankTransit != '')
        {
            nodeClrSysMmbId = _nodeFinInstnId.appendChild(xmlDoc.createElement('ClrSysMmbId'));

            switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
            {
                case 'NL-ING-XML' :
                    switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                    {
                        case #DOM_INT:
                            value = 'GBDSC';
                            len=35;
                            break;                       
                        default:
                            len = 35;
                            break;
                    }
                    break;
                case 'NL-ING-XML-RO':
                    switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                    {
                        case #INTL:
                            value = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('ClrSysIdCd', mSKS_EFT_FileDetail.RecId));
                            len=35;
                            break;
                        case #DOM:
                        case #BDG:
                            len = 9;
                            break;
                        default:
                            len = 35;
                            break;
                    }
                    break;            
                default:
                    len = 35;
                    break;                    
            }
            if(value)
            {
                nodeClrSysId = nodeClrSysMmbId.appendChild(xmlDoc.createElement('ClrSysId'));
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeClrSysId, 'Cd', value, 0, false);
            }
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeClrSysMmbId, 'MmbId', mSKS_EFT_FileDetail.DepBankTransit, len, false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_ChrgBr</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_ChrgBr(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.51: ChrgBr
        //------------------------------------------------------------------------------------------------------
        str value;
               
        value = SKS_EFT_Format::getCodelookupvalue('Charges',mSKS_EFT_FileDetail.RecId);
        
        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'NL-ING-XML' :
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #SEPA:
                        value = 'SLEV';
                        break;                   
                }
                break;       
        }
        if(value)
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeCdtTrfTxInf, 'ChrgBr', value);
        }      
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_IntrmyAgt1</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_IntrmyAgt1(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.71: IntrmyAgt1
        //              FinInstnId
        //                  BIC
        //------------------------------------------------------------------------------------------------------

        XmlElement nodeIntrmyAgt1;
        XmlElement nodeFinInstnId;
        XmlElement nodeClrSysMmbId;
        XmlElement nodeBrnchId;
        boolean printNm = true;
        boolean printPstlAdr = true;
        boolean printBrchId = true;
        str swift, bankId;
 
        swift = mSKS_EFT_FileDetail_Intermediary.IntBankSwift;
        bankId = mSKS_EFT_FileDetail_Intermediary.IntBankId;
 
        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'NL-ING-XML' :
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #DOM_ORD:
                    case #DOM_EXP:
                    case #INTL_EXP:
                    case #INTL_ORD:
                        bankId          = '';
                        printNm         = false;
                        printPstlAdr    = false;
                        printBrchId     = false;
                        break;
                }
                break;
        }
 
        if(swift || bankId)
        {
            //          2.71: IntrmyAgt1
            nodeIntrmyAgt1 = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('IntrmyAgt1'));

            //              FinInstnId
            nodeFinInstnId = nodeIntrmyAgt1.appendChild(xmlDoc.createElement('FinInstnId'));

            if(swift)
            {
                //                  BIC
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeFinInstnId, 'BIC', mSKS_EFT_FileDetail_Intermediary.IntBankSwift, 0, false);
            }

            //                  ClrSysMmbId
            if(bankId)
            {
                nodeClrSysMmbId = nodeFinInstnId.appendChild(xmlDoc.createElement('ClrSysMmbId'));
                //                      MmbId
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeClrSysMmbId, 'MmbId', mSKS_EFT_FileDetail_Intermediary.IntBankId, 0, false);
            }
  
            if(printNm)
            {
                //                  Nm
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeFinInstnId, 'Nm', this.CharacterReplacement(mSKS_EFT_FileDetail_Intermediary.IntBankName), 140, false);
            }
            if(printPstlAdr)
            {
                //                  PstlAdr
                this.node_PstlAdr(nodeFinInstnId, mSKS_EFT_FileDetail_Intermediary.IntBankCountryRegionId, mSKS_EFT_FileDetail_Intermediary.IntBankAddr + '' + mSKS_EFT_FileDetail_Intermediary.IntBankAddr2, '', mSKS_EFT_FileDetail_Intermediary.IntBankCity);
            }
            //              BrnchId
            if(printBrchId && mSKS_EFT_FileDetail_Intermediary.IntBankBranch != '')
            {
                nodeBrnchId = nodeIntrmyAgt1.appendChild(xmlDoc.createElement('BrnchId'));
                //              Id
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeBrnchId, 'Id', this.CharacterReplacement(mSKS_EFT_FileDetail_Intermediary.IntBankBranch));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_PmtId</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_PmtId(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.28: PmtId
        //                  InstrId
        //                  EndToEndId
        //------------------------------------------------------------------------------------------------------

        XmlElement nodePmtId;
        boolean printInstrId = true;

        //          2.28: PmtId
        nodePmtId = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('PmtId'));

        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'NL-ING-XML' :
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #SEPA:
                    case #DOM_INT:
                        printInstrId = false;
                        break;
                }
                break;
        }       

        if(printInstrId)
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtId, 'InstrId', SKS_PP_StringFormats::strRight(this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference), 35));
        }        
        //2.30: EndToEndId       
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtId, 'EndToEndId', SKS_PP_StringFormats::strRight(this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference), 35));
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_Tax</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_CdtTrfTxInf_Tax
    /// </summary>
    /// <param name = "_nodeCdtTrfTxInf">_nodeCdtTrfTxInf</param>
    protected void node_CdtTrfTxInf_Tax(XmlElement _nodeCdtTrfTxInf)
    {
        XmlElement  nodeTax;
        XmlElement  nodeCdtrTax;
        boolean     printTax;

        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'NL-ING-XML-RO' :
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #BDG:
                        printTax = true;
                        break;
                }
                break;
        }
        if(mSKS_EFT_FileDetail.VATNum && printTax)
        {
            //          Tax
            nodeTax = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('Tax'));

            //              Cdtr
            nodeCdtrTax = nodeTax.appendChild(xmlDoc.createElement('Cdtr'));

            //                  TaxId
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdtrTax, 'TaxId', mSKS_EFT_FileDetail.VATNum, 13, false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_XchgRateInf</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_CdtTrfTxInf_XchgRateInf
    /// </summary>
    /// <param name = "_nodeCdtTrfTxInf">_nodeCdtTrfTxInf</param>
    protected void node_CdtTrfTxInf_XchgRateInf(XMlElement _nodeCdtTrfTxInf)
    {
        XmlElement nodeXchgRateInf;
        str        ExchangeContractId;
        boolean    printExchageRate;

        ExchangeContractId = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('ExchangeContractId', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank));

        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'NL-ING-XML-RO' :
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #INTL:
                        if(ExchangeContractId)
                        {
                            printExchageRate =true;
                        }
                        break;
                }
        }
        if(printExchageRate)
        {
            //      2.47 XchgRateInf
            nodeXchgRateInf = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('XchgRateInf'));

            //          2.50: CtrctId
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeXchgRateInf, 'CtrctId', ExchangeContractId, 35,false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_GrpHdr_InitgPty_Id</Name>
				<Source><![CDATA[
    protected void node_GrpHdr_InitgPty_Id(XmlElement _nodeInitgPty)
    {
        //------------------------------------------------------------------------------------------------------
        //      1.8: InitgPty
        //          9.1.12: Id
        //              9.1.13: OrgId
        //                  9.1.15: Othr
        //                      9.1.1.16: Id
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeId;
        XmlElement nodeOrgId;
        XmlElement nodeOther;
        str        initiatingPartyId;
        boolean    printInitiatingPartyId;

        this.getSKS_EFT_FileFormatPaymSpec();

        initiatingPartyId = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('InitiatingPartyId', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank));

        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'NL-ING-XML' :
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #DOM_ORD:
                    case #DOM_EXP:
                    case #INTL_EXP:
                    case #INTL_ORD:
                        printInitiatingPartyId =true;
                        break;
                }               
                break;
        }
        if(printInitiatingPartyId && initiatingPartyId)
        {
            //          9.1.12: Id
            nodeId = _nodeInitgPty.appendChild(xmlDoc.createElement('Id'));

            //              9.1.13: OrgId
            nodeOrgId = nodeId.appendChild(xmlDoc.createElement('OrgId'));

            //                  9.1.15: Other
            nodeOther = nodeOrgId.appendChild(xmlDoc.createElement('Othr'));

            //                      9.1.1.16: Id
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeOther, 'Id', initiatingPartyId, 35);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_BtchBookg</Name>
				<Source><![CDATA[
    protected void node_PmtInf_BtchBookg(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.23 BtchBookg
        //------------------------------------------------------------------------------------------------------
        str btchbkg;

        btchbkg = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('Btchbkg', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank));

        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'NL-ING-XML' :
                if(strUpr(btchbkg) == 'N')
                {
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodePmtInf, 'BtchBookg', 'false');
                }
                else
                {
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodePmtInf, 'BtchBookg', 'true');
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_ChrgBr</Name>
				<Source><![CDATA[
    protected void node_PmtInf_ChrgBr(XmlElement _nodePmtInf)
    {

        //------------------------------------------------------------------------------------------------------
        //      2.24 ChrgBr
        //------------------------------------------------------------------------------------------------------
        str value;

        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'NL-ING-XML' :
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #DOM_ORD:
                    case #DOM_EXP:
                    case #INTL_EXP:
                        value = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('Charges',mSKS_EFT_FileDetail.RecId));                       
                        break;
                    case #INTL_ORD:
                        value = 'SLEV';
                        break;
                }
                break;
        }
       
        if(value)
        {   
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodePmtInf, 'ChrgBr', value, 0, false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_Dbtr</Name>
				<Source><![CDATA[
    protected void node_PmtInf_Dbtr(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.19: Dbtr
        //          Nm
        //          PstlAdr
        //          Id
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeDbtr;

        //      2.19: Dbtr
        nodeDbtr = nodePmtInf.appendChild(xmlDoc.createElement('Dbtr'));

        //          Nm
        this.node_PmtInf_Dbtr_Nm(nodeDbtr);

        //          PstlAdr
        this.node_PmtInf_Dbtr_PstlAdr(nodeDbtr);

        //          Id
        this.node_PmtInf_Dbtr_Id(nodeDbtr);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_Dbtr_Nm</Name>
				<Source><![CDATA[
    protected void node_PmtInf_Dbtr_Nm(XmlElement _nodeDbtr)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.19: Dbtr
        //          Nm
        //------------------------------------------------------------------------------------------------------
    
        //          Nm
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeDbtr, 'Nm', this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyName), 70, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_Dbtr_PstlAdr</Name>
				<Source><![CDATA[
    protected void node_PmtInf_Dbtr_PstlAdr(XmlElement _nodeDbtr)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.19: Dbtr
        //          PstlAdr
        //------------------------------------------------------------------------------------------------------
        
        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'NL-ING-XML-RO' :
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #INTL:
                    case #DOM:
                    case #BDG:
                        //          PstlAdr
                        this.node_PstlAdr_Structured(_nodeDbtr, mSKS_EFT_FileDetail_BankAccount.WOrdPartyCountryRegionId, mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr, mSKS_EFT_FileDetail_BankAccount.WOrdPartyZipCode, mSKS_EFT_FileDetail_BankAccount.WOrdPartyCity, 35, mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr2, mSKS_EFT_FileDetail_BankAccount.WOrdPartyState);
                        break;
                    default:
                        this.node_PstlAdr(_nodeDbtr, mSKS_EFT_FileDetail_BankAccount.WOrdPartyCountryRegionId, mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr, mSKS_EFT_FileDetail_BankAccount.WOrdPartyZipCode, mSKS_EFT_FileDetail_BankAccount.WOrdPartyCity);
                        break;
                }
                break;
            case 'NL-ING-XML' :
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #DOM_ORD:
                    case #DOM_EXP:
                    case #INTL_EXP:
                    case #INTL_ORD:
                        this.node_PstlAdr(_nodeDbtr, mSKS_EFT_FileDetail_BankAccount.WOrdPartyCountryRegionId, mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr, mSKS_EFT_FileDetail_BankAccount.WOrdPartyZipCode, mSKS_EFT_FileDetail_BankAccount.WOrdPartyCity, 35, mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr2, mSKS_EFT_FileDetail_BankAccount.WOrdPartyState,true);
                        break;
                    default:
                        this.node_PstlAdr(_nodeDbtr, mSKS_EFT_FileDetail_BankAccount.WOrdPartyCountryRegionId, mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr, mSKS_EFT_FileDetail_BankAccount.WOrdPartyZipCode, mSKS_EFT_FileDetail_BankAccount.WOrdPartyCity);
                        break;
                }
                break;
            default:
                this.node_PstlAdr(_nodeDbtr, mSKS_EFT_FileDetail_BankAccount.WOrdPartyCountryRegionId, mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr, mSKS_EFT_FileDetail_BankAccount.WOrdPartyZipCode, mSKS_EFT_FileDetail_BankAccount.WOrdPartyCity);
                break;
        }              
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_Dbtr_Id</Name>
				<Source><![CDATA[
    protected void node_PmtInf_Dbtr_Id(XmlElement _nodeDbtr)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.19: Dbtr
        //          9.1.12: Id
        //              9.1.13: OrgId
        //                  9.1.15: Othr
        //                      9.1.16: Id
        // ------------------------------------------------------------------------------
        XmlElement nodeId;
        XmlElement nodeOrgId;
        XmlElement nodeOther;
        str        debitorId;

        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'NL-ING-XML' :
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #DOM_ORD:
                    case #DOM_EXP:
                    case #INTL_EXP:
                    case #INTL_ORD:
                        debitorId = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('DebitorId', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank));
                        break;
                }
                break;
        }
        if(debitorId)
        {
            //          Id
            nodeId = _nodeDbtr.appendChild(xmlDoc.createElement('Id'));

            //              OrgId
            nodeOrgId = nodeId.appendChild(xmlDoc.createElement('OrgId'));

            //                  Othr
            nodeOther = nodeOrgId.appendChild(xmlDoc.createElement('Othr'));

            //                      Id
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeOther, 'Id', debitorId, 35);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_DbtrAcct</Name>
				<Source><![CDATA[
    protected void node_PmtInf_DbtrAcct(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.20: DbtrAcct
        //          Id
        //              IBAN
        //              Othr
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeDbtrAcct;
        XmlElement nodeDbtrAcctId;
        XmlElement nodeOthr;
        XmlElement nodeSchmeNm;
        boolean printSchemeNm;
        boolean printCurrencyCode;
        int length;
        str iban, acctNum;
 
        iban = mSKS_EFT_FileDetail.BankBankIBAN;
        acctNum = mSKS_EFT_FileDetail.BankBankAcct;
 
        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'NL-ING-XML' :
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #DOM_ORD:
                    case #DOM_EXP:
                    case #INTL_EXP:
                    case #INTL_ORD:
                        length =34;
                        printSchemeNm = true;
                        break;

                    case #DOM_INT:
                    case #SEPA:
                        length = 24;
                        printCurrencyCode = true;
                }
                break;
            default:
                length =24;
                printCurrencyCode =true;
                break;
        }
  
        if(iban || acctNum)
        {
  
            //      2.20: DbtrAcct
            nodeDbtrAcct = nodePmtInf.appendChild(xmlDoc.createElement('DbtrAcct'));

            //          Id
            nodeDbtrAcctId = nodeDbtrAcct.appendChild(xmlDoc.createElement('Id'));
   
            if(iban)
            {
                //              IBAN
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeDbtrAcctId, 'IBAN', iban, length, false);
            }
            else
            {
                //          Othr
                nodeOthr = nodeDbtrAcctId.appendChild(xmlDoc.createElement('Othr'));

                //              Id
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeOthr, 'Id', acctNum, length, false);

                if(printSchemeNm)
                {
                    //                  SchmeNm
                    nodeSchmeNm = nodeOthr.appendChild(xmlDoc.createElement('SchmeNm'));

                    //                      Cd
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeSchmeNm, 'Cd', 'BBAN');
                }
            }

            if(printCurrencyCode)
            {
                //              Ccy
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeDbtrAcct, 'Ccy', mSKS_EFT_FileDetail.CurrencyCode);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_DbtrAgt</Name>
				<Source><![CDATA[
    protected void node_PmtInf_DbtrAgt(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.21: DbtrAgt
        //          FinInstnId
        //              BIC
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeDbtrAgt;
        XmlElement nodeFinInstnId;
        XmlElement nodePstlAdr;
        boolean    printPstlAdr;

        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'NL-ING-XML-RO' :
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #DOM:
                    case #BDG:
                    case #INTL:
                        printPstlAdr = true;
                        break;
                }
                break;
        }
        if(mSKS_EFT_FileDetail.BankBankSwiftNo)
        {
            //      2.21: DbtrAgt
            nodeDbtrAgt = nodePmtInf.appendChild(xmlDoc.createElement('DbtrAgt'));

            //          FinInstnId
            nodeFinInstnId = nodeDbtrAgt.appendChild(xmlDoc.createElement('FinInstnId'));

            //              BIC
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeFinInstnId, 'BIC', mSKS_EFT_FileDetail.BankBankSwiftNo);
            
            if(printPstlAdr)
            {                
                //              PstlAdr
                nodePstlAdr = nodeFinInstnId.appendChild(xmlDoc.createElement('PstlAdr'));

                //                  Ctry
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePstlAdr, 'Ctry', this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_BankAccount.WOrdPartyCountryRegionId));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_PmtTpInf_InstrPrty</Name>
				<Source><![CDATA[
    protected void node_PmtInf_PmtTpInf_InstrPrty(XmlElement _nodePmftTpInf)
    {
        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'NL-ING-XML' :
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #DOM_EXP:
                    case #INTL_EXP:
                        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodePmftTpInf, 'InstrPrty', 'HIGH', 0, false);
                        break;
                }
                break;
        }        
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_PmtTpInf_SvcLvl</Name>
				<Source><![CDATA[
    protected void node_PmtInf_PmtTpInf_SvcLvl(XmlElement _nodePmftTpInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.8: SvcLvl
        //              2.9: Cd
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeSvcLvl;
        str        value;
        boolean    printCd;

        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'NL-ING-XML' :
                //              2.9: Prtry
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    
                    case #SEPA:
                    case #DOM_ORD:
                        value = 'SEPA';
                        printCd =true;
                        break;
                    case #DOM_INT:
                        value = 'SDVA';
                        printCd =true;
                        break;
                    case #INTL_EXP:
                        printCd =true;
                        value = 'URGP';
                        break;
                    default:
                        value = '';
                        break;
                }
                break;
            case 'NL-ING-XM-RO' :
                //              2.9: Prtry
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #DOM:
                        value = 'RO-LCY';
                        break;
                    case #BDG:
                        value = 'RO-BDG';
                        break;
                    case #INTL:
                        value = 'RO-FCY';
                        break;
                    default:
                        value = '';
                        break;
                }
                break;
            default:
                value = '';
                break;
        }        
        
        if(value)
        {
            //          2.8: SvcLvl
            nodeSvcLvl = _nodePmftTpInf.appendChild(xmlDoc.createElement('SvcLvl'));
            
            if(printCd)
            {
                //      Cd
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeSvcLvl, 'Cd', value);
            }
            else
            {
                //     Prtry
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeSvcLvl, 'Prtry', value);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_RmtInf_Ustrd</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_RmtInf_Ustrd(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.98: RmtInf
        //              2.99: Ustrd
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeRmtInf;
        str invNumbers, purpCode, value;
    
        invNumbers = this.getInvoiceNbrs();//SKS_VSTS_14825
        
        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'NL-ING-XML' :                  
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #INTL_ORD:
                        if(mSKS_EFT_FileDetail.PaymentCurrencyCode == 'CNY')
                        {
                            //          2.98: RmtInf
                            nodeRmtInf = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('RmtInf'));

                            purpCode = this.CharacterReplacement(SKS_EFT_Format::getValueFromCode('PurpCode', mSKS_EFT_FileFormatPaymSpec, mSKS_EFT_VendorPaym.RecId));

                            invNumbers = strReplace(subStr(invNumbers, 1, strLen(invNumbers)-2), ',', '');

                            value = strFmt('%1 %2%3 %4%5',purpCode, '/ROC/', invNumbers, 'CNAPS', mSKS_EFT_FileDetail.DepBankTransit);

                            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRmtInf, 'Ustrd', this.CharacterReplacement(value), 140); //SKS#DevOps:15686
                        }
                        else
                        {
                            super(_nodeCdtTrfTxInf);
                        }
                        break;
                    default:
                        super(_nodeCdtTrfTxInf);
                        break;
                }
                break;
            default:
                super(_nodeCdtTrfTxInf);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectPaymentRecords</Name>
				<Source><![CDATA[
    [SuppressBPWarning('BPErrorSelectUsingFirstOnly', 'The buffer is used in next statement or in a datasource query loop.')]
    protected void selectPaymentRecords()
    {
        //------------------------------------------------------------------------------------------------------
        // Standard payment selction
        // Override if different selection is need for a format
        //------------------------------------------------------------------------------------------------------
    
        //Order by clause must match the clause in the SKS_EFT_Processing.SumByPayment
        select * from mSKS_EFT_FileDetail
            join mSKS_EFT_FileDetail_VendAddress
            join mSKS_EFT_FileDetail_BenBank
            join mSKS_EFT_FileDetail_BankAccount
            join mSKS_EFT_FileDetail_Intermediary
            join mSKS_EFT_FileDetail_CreditParty
            join msKS_EFT_FileDetail_Instructions
              order by mSKS_EFT_FileDetail.RecordSection,
                   mSKS_EFT_FileDetail.PaymMode,
                   mSKS_EFT_FileDetail.BankAccountId,
                   mSKS_EFT_FileDetail.PaymentCurrencyCode,
                   mSKS_EFT_FileDetail.PaymSpec,
                   mSKS_EFT_FileDetail.EffectiveDate,
                   mSKS_EFT_FileDetail.DepCountryRegionId,
                   mSKS_EFT_FileDetail.RecordType,
                   mSKS_EFT_FileDetail.AccountNum,
                   mSKS_EFT_FileDetail.PaymentReference,
                   mSKS_EFT_FileDetail.RecId
          where mSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                mSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                mSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_VendAddress.RefRecId &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_BenBank.RefRecId &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_Intermediary.RefRecId &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_CreditParty.RefRecId &&
                mSKS_EFT_FileDetail.RecId == msKS_EFT_FileDetail_Instructions.RefRecId &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_BankAccount.RefRecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>