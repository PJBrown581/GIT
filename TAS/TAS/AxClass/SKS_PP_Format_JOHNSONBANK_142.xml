<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_PP_Format_JOHNSONBANK_142</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_PP_Format_JOHNSONBANK_142 extends SKS_PP_Format_BankGroup
{
    BankAccountID gPrevBankAccountID;
    SKS_PP_Bank gSKS_PP_Bank;
    int gCheckCount;
    real gTotalAmount;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>txtDetail</Name>
				<Source><![CDATA[
    protected str txtDetail()
    {
        //  Detail
        //  D                       Position 1
        //  ID                      Position  2-4               “001”
        //  Bank Account            Position 5-14               Zero Padded 10 characters
        //  Space                   Position 15- 21             padding
        //  Void Flag               Positon 22                  V if void else Blank
        //  Check Num               Position 23 to 32           Zero Padded
        //  Amount                  Position 33 to 42           zero padded. Implied 2 digit decimal.
        //  Date                    Position 43 to 50           YYYYMMDD
        //  Space                   Position 51 to 109
        int Mult;
        str ItemType;
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        ;
    
        //Convert negative void numbers to positives
        Mult = 1;
        if(mSKS_PP_FileDetail.ChkType != SKS_PP_ChequeType::Cheque)
        {
            ItemType = 'V';
            If (mSKS_PP_FileDetail.chkcuryamt < 0)
            {
                Mult = -1;
            }
    
        }
        else
        {
            ItemType = 'R';
        }
        if(!gSKS_PP_Bank || gSKS_PP_Bank.BankAccountId != mSKS_PP_FileDetail.ChkBankAcct)
        {
            Select crosscompany gSKS_PP_Bank
                where gSKS_PP_Bank.BankAccountId == mSKS_PP_FileDetail.ChkBankAcct
                    && gSKS_PP_Bank.dataAreaId == mSKS_PP_FileDetail.ChkCpnyId;
        }
        sb.Append('C');
        sb.Append(SKS_PP_StringFormats::strFill(3, gSKS_PP_Bank.PP01, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        sb.Append(SKS_PP_StringFormats::strFill(2, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        sb.Append(SKS_PP_StringFormats::strFill(10, mSKS_PP_FileDetail.BnkBankAcct, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        sb.Append(SKS_PP_StringFormats::strFill(1, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left));
        sb.Append(ItemType);
        sb.Append('A');
        sb.Append(SKS_PP_StringFormats::strFill(1, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left));
        sb.Append(SKS_PP_StringFormats::strFill(10, mSKS_PP_FileDetail.ChkRefNbr, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        sb.Append(SKS_PP_StringFormats::strMoney(Mult * mSKS_PP_FileDetail.chkcuryamt, 10));
        sb.Append(SKS_PP_StringFormats::strDateMMDDYY(mSKS_PP_FileDetail.ChkDocDate));
        sb.Append(SKS_PP_StringFormats::strFill(96,mSKS_PP_FileDetail.VendName, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        return sb.ToString();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>