<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>SKS_LB_WriteOffTmp</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class SKS_LB_WriteOffTmp extends FormRun
{
    LedgerDimensionDefaultAccountController generalLedgerDefaultAccountController;
    LedgerDimensionDefaultAccountController generalLedgerOffsetDefaultAccountController;
    SKS_LB_JournalARErrors  SKS_LB_JournalARErrors;
    SKS_LB_JournalARApplic  SKS_LB_JournalARApplic;
    SKS_LB_JournalAR        SKS_LB_Journalar;
    SKS_LB_WriteoffTmp      WOT;
    SKS_LB_WriteOffId       WriteOffID;
    DirPartyRecId           gParty;
    SKS_LB_WriteoffRules    sks_LB_WriteoffRules;
    str MenuItemName;
    TransDate               invoiceDate;

}
]]></Source>
			</Method>
			<Method>
				<Name>AppliedAmt</Name>
				<Source><![CDATA[
    public AmountCur AppliedAmt()
    {
        select * from SKS_LB_WriteoffTmp;

        return SKS_LB_WriteoffTmp.amountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>CalcInvBal</Name>
				<Source><![CDATA[
    public amountcur CalcInvBal()
    {
        CustTransOpen lcustTransOpen;
        CustTrans lcustTrans;
        container complist;
        ;

        complist += SKS_LB_JournalARApplic.CustTransDataAreaId;
        select firstonly crosscompany:complist RecId, RefRecId, amountcur from lcustTransOpen
                where lcustTransOpen.RecId == SKS_LB_JournalARApplic.CustTransOpenRecId
            join CurrencyCode from lcustTrans
                where lcustTrans.RecId == lcustTransOpen.RefRecId;

        return lCustTransOpen.AmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canClose</Name>
				<Source><![CDATA[
    public boolean canClose()
    {
        boolean ret;

        if (SKS_LB_WriteoffTmp)
        {
            SKS_LB_WriteoffTmp.delete();
        }

        ret = super();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>CreateErrorsGridWriteOffs</Name>
				<Source><![CDATA[
    public void CreateErrorsGridWriteOffs()
    {
        DialogButton diagBut;
        SKS_LB_AutoCreateCreditDebitGroup sks_lb_AutoCreateCreditDebitGroup;
        InvoiceID InvoiceNum;

        SKS_LB_JournalARErrors  NewJournalARErrors;
        SKS_LB_Journal  SKS_LB_journal;
        sks_lb_AutoCreateCreditDebitGroup = new SKS_LB_AutoCreateCreditDebitGroup();


        if(SKS_LB_JournalARErrors.Invoice == '')
        {
            if(appliedamt.realValue() != SKS_LB_JournalARErrors.ActualSettlementAmountCur)
            {
                diagBut = Box::yesNo("@SKS3520", DialogButton::Yes, "@SKS352");
                if (diagBut == DialogButton::No)
                {
                    return;
                }
            }
        }

        select firstonly CurrencyCode from SKS_LB_journal where SKS_LB_journal.BatchNum == SKS_LB_JournalARErrors.BatchNum && SKS_LB_journal.JournalID == SKS_LB_JournalARErrors.JournalId;

        while select SKS_LB_WriteOffTmp where SKS_LB_WriteoffTmp.AmountCur != 0
        {
            changeCompany(SKS_LB_WriteoffTmp.CustomerCompany)
            {
                InvoiceNum = sks_lb_AutoCreateCreditDebitGroup.AutoCreateCredit(SKS_LB_WriteoffTmp.CustAccount, SKS_LB_WriteoffTmp.OrderAccount, SKS_LB_WriteoffTmp.CRLedgerDimension,
                    SKS_LB_WriteoffTmp.AmountCur, SKS_LB_JournalARErrors.Invoice, SKS_LB_journal.CurrencyCode, SKS_LB_WriteoffTmp.InvDate,
                    SKS_LB_WriteoffTmp.CROffsetLedgerDimension, SKS_LB_JournalARErrors.PaymDate, SKS_LB_WriteoffTmp.TaxGroup, SKS_LB_JournalARErrors.MOP,
                    SKS_LB_WriteoffTmp.ReasonCode, SKS_LB_JournalARErrors.ChkRefNbr, SKS_LB_WriteoffTmp.TrackingInvoices, SKS_LB_WriteoffTmp.CustomerCompany);
            }

            if(SKS_LB_JournalARErrors.Invoice == '')
            {
                SKS_LB_JournalARErrors = element.JournalARErrorsRecordWrite(SKS_LB_JournalARErrors, InvoiceNum);
                SKS_LB_JournalARErrors.isDED = NoYes::No;
                SKS_LB_JournalARErrors.update();
            }
            else
            {
                buf2Buf(SKS_LB_JournalARErrors, NewJournalARErrors);

                NewJournalARErrors = element.JournalARErrorsRecordWrite(NewJournalARErrors, InvoiceNum);
                NewJournalARerrors.isDED = NoYes::No;
                NewJournalARErrors.insert();
            }
        }

        element.refreshWorkbenchErrorGrid();
        element.close();
    }

]]></Source>
			</Method>
			<Method>
				<Name>CreateSettlementsWriteOff</Name>
				<Source><![CDATA[
    public void CreateSettlementsWriteOff()
    {
        SKS_LB_AutoCreateCreditDebitGroup sks_lb_AutoCreateCreditDebitGroup;
        InvoiceID InvoiceNum;
        CustTrans TmpInvCustTrans;
        CustTransOpen TmpInvCustTransOpen;
        SKS_LB_InvoiceMatch TmpInvoiceMatch;
        SKS_LB_JournalARApplic  NewJournalARApplic;
        SKS_LB_Journal  SKS_LB_Journal;
        SKS_LB_JournalARApplic  tmpJournalARApplic;
        boolean         FirstPass = True;
        RecordInsertList NewJournalARApplicRecordInsertList;

        sks_lb_AutoCreateCreditDebitGroup = new SKS_LB_AutoCreateCreditDebitGroup();

        select firstonly CurrencyCode from SKS_LB_journal where SKS_LB_journal.BatchNum == SKS_LB_JournalAR.BatchNum && SKS_LB_journal.JournalID == SKS_LB_JournalAR.JournalId;
        NewJournalARApplicRecordInsertList = new RecordInsertList(tableNum(SKS_LB_JournalARApplic));
        while select SKS_LB_WriteOffTmp where SKS_LB_WriteoffTmp.AmountCur != 0
        {
            changeCompany(SKS_LB_WriteoffTmp.CustomerCompany)
            {
                TmpInvoiceMatch = null;
                TmpInvCustTrans = null;
                TmpInvCustTransOpen = null;

                InvoiceNum = sks_lb_AutoCreateCreditDebitGroup.AutoCreateCredit(SKS_LB_WriteoffTmp.CustAccount, SKS_LB_WriteoffTmp.OrderAccount,SKS_LB_WriteoffTmp.CRLedgerDimension,
                    SKS_LB_WriteoffTmp.AmountCur, SKS_LB_JournalARApplic.LBInvoice , SKS_LB_Journal.CurrencyCode, SKS_LB_WriteoffTmp.InvDate,
                    SKS_LB_WriteoffTmp.CROffsetLedgerDimension, SKS_LB_JournalAR.PaymDate, SKS_LB_WriteoffTmp.TaxGroup, SKS_LB_Journalar.MOP,
                    SKS_LB_WriteoffTmp.ReasonCode, SKS_LB_JournalAR.ChkRefNbr, SKS_LB_WriteoffTmp.TrackingInvoices, SKS_LB_WriteoffTmp.CustomerCompany);


                buf2Buf(SKS_LB_JournalARApplic, NewJournalARApplic);

                Select firstonly MatchType, Direction, MatchValue, CustTransReciD from TmpInvoiceMatch where (TmpInvoiceMatch.MatchType == SKS_LB_MatchType::InvoiceNumber &&
                        TmpInvoiceMatch.Direction == SKS_LB_MatchTypeDirection::Forward &&
                        TmpInvoiceMatch.MatchValue == InvoiceNum)
                    join RecId, invoice from TmpInvCustTrans
                    where (TmpInvCustTrans.RecId == TmpInvoiceMatch.CustTransRecId)
                    join DueDate, RefRecId, DataAreaId, AccountNum, RecId from TmpInvCustTransOpen
                    order by TmpInvCustTransOpen.DueDate
                    where TmpInvCustTrans.RecId == TmpInvCustTransOpen.RefRecId;
            }
            NewJournalARApplic.LBInvoice = TmpInvCustTrans.Invoice;
            NewJournalARApplic.CustTransRecId = TmpInvCustTrans.RecId;
            NewJournalARApplic.CustTransOpenRecId = TmpInvCustTransOpen.RecId;
            NewJournalARApplic.SettleAmountCur = SKS_LB_WriteoffTmp.AmountCur;
            NewJournalARApplic.CustTransDataAreaId = TmpInvCustTransOpen.dataAreaId;
            NewJournalARApplic.RevReasonCode = SKS_LB_WriteoffTmp.RevReasonCode;
            NewJournalARApplic.AutoCROffsetLedgerDimension = SKS_LB_WriteoffTmp.CROffsetLedgerDimension;
            NewJournalARApplic.AutoRevLedgerDimension = SKS_LB_WriteoffTmp.AutoRevLedgerDimension;
            NewJournalARApplic.AutoRevOffsetLedgerDimension = SKS_LB_WriteoffTmp.AutoRevOffsetLedgerDimension;
            NewJournalARApplic.AutoCRAutoRev = SKS_LB_WriteoffTmp.AutoCRAutoRev;
            NewJournalARApplic.WriteOffId = WriteOffId;
            NewJournalARApplic.WriteOff = NoYes::Yes;
            NewJournalARApplic.FullSettlement = NoYes::Yes;
            NewJournalARApplic.DiscApplyAmount = 0;
            NewJournalARApplic.TrackingInvoices = SKS_LB_WriteoffTmp.TrackingInvoices;
            NewJournalARApplic.SKS_LB_JournalARRecId = SKS_LB_Journalar.RecId;
            NewJournalARApplicRecordInsertList.add(NewJournalARApplic);
        }

        NewJournalARApplicRecordInsertList.insertDatabase();
        ttsBegin;

        while select tmpJournalARApplic where tmpJournalARApplic.SKS_LB_JournalARRecId == SKS_LB_Journalar.recid && tmpJournalARApplic.settleamountcur != 0
        {
            if(FirstPass)
            {
                SKS_LB_Journalar.ActualSettleAmountCur = tmpJournalARApplic.SettleAmountCur;
                SKS_LB_JournalAR.invoice = tmpJournalARApplic.LBinvoice;
                FirstPass = false;
            }
            else
            {
                SKS_LB_Journalar.ActualSettleAmountCur += tmpJournalARApplic.SettleAmountCur;
                SKS_LB_JournalAR.Invoice = '*';
            }
        }

        SKS_LB_JournalAR.update();
        ttsCommit;
        element.refreshWorkbenchPaymentGrid();
        element.close();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    [SuppressBPWarningAttribute('BPCheckSelectForUpdateAbsent', 'Buffer SKS_LB_JournalAR is selected for update due to it being global and updated in other areas')]
    public void init()
    {
        CustTrans   locCustTrans;
        CustTable   custTable;
        DataAreaId  ParentRecordCompany;
        RefRecId    ParentCTRecID;
        CustVendAC  ParentCustAccount;
        super();

        menuItemName = element.args().menuItemName();

        if(MenuItemName == 'SKS_LB_WriteOffTmp')
        {
            if (element.args().dataset() != tablenum(SKS_LB_JournalARErrors))
            {
                throw error("@SYS96590");
            }

            SKS_LB_JournalARErrors = element.args().record();
            if(SKS_LB_JournalARErrors.CustAccountSugg == '' && SKS_LB_JournalARErrors.CustAccount == '')
            {
                throw error("@SKS4119");
            }

            SKS_LB_WriteoffTmp_ds.object(fieldNum(SKS_LB_WriteoffTmp, CustomerCompany)).allowEdit(!SKS_LB_Bank::find(SKS_LB_JournalARErrors.BankAcct, SKS_LB_JournalARErrors.FormatID).LBRestrictCrossCompanySearch);

            if(SKS_LB_JournalARErrors.CustAccountSugg != '')
            {
                SKS_LB_WriteoffTmp.CustAccount = SKS_LB_JournalARErrors.CustAccountSugg;
            }
            else
            {
                SKS_LB_WriteoffTmp.CustAccount = SKS_LB_JournalARErrors.CustAccount;
            }

            
            SKS_LB_WriteOffTmp.CustomerCompany = SKS_LB_JournalARErrors.customercompany;
            //store the original party ID
            changeCompany(SKS_LB_JournalARErrors.customercompany)
            {
                select firstonly Party from custtable
                    where CustTable.AccountNum == SKS_LB_JournalARErrors.CustAccount;
            }
            gParty = custTable.party;
            SKS_LB_WriteoffTmp.OrderAccount =  SKS_LB_WriteoffTmp.CustAccount;

            ParentRecordCompany = SKS_LB_JournalARErrors.customercompany;
            ParentCTRecID = SKS_LB_JournalARErrors.CustTransRecId;
            ParentCustAccount = SKS_LB_JournalARErrors.CustAccount;

            SKS_LB_WriteoffTmp.AmountCur = SKS_LB_JournalARErrors.ActualSettlementAmountCur;
            if(SKS_LB_JournalARErrors.Invoice != '')
            {
                SKS_LB_WriteoffTmp.TrackingInvoices = SKS_LB_JournalARErrors.Invoice;
            }
            else
            {
                SKS_LB_WriteoffTmp.TrackingInvoices = SKS_LB_JournalARErrors.LBInvoice;
            }
            invoiceDate = SKS_LB_JournalARErrors.PaymDate;
            SKS_LB_WriteOffTmp.InvDate = invoiceDate;
        }
        else
        {
            if (element.args().dataset() == tablenum(SKS_LB_JournalARApplic))
            {
                SKS_LB_JournalARApplic = element.args().record();
                if(!SKS_LB_JournalARApplic)
                {
                    throw error("@SYS96590");
                }

                Select firstonly forUpdate SKS_LB_JournalAR where SKS_LB_JournalAR.recid == SKS_LB_JournalARApplic.SKS_LB_JournalARRecId;
                SKS_LB_WriteoffTmp_ds.object(fieldNum(SKS_LB_WriteoffTmp, CustomerCompany)).allowEdit(!SKS_LB_Bank::find(SKS_LB_JournalAR.BankAcct, SKS_LB_JournalAR.FormatID).LBRestrictCrossCompanySearch);
                SKS_LB_WriteoffTmp.CustomerCompany = SKS_LB_JournalARApplic.CustTransDataAreaId;
                SKS_LB_WriteoffTmp.CustAccount = SKS_LB_JournalAR.CustAccount;
                SKS_LB_WriteoffTmp.amountCur = (this.CalcInvBal() - (SKS_LB_JournalARApplic.SettleAmountCur + SKS_LB_JournalARApplic.DiscApplyAmount)) * -1;

                ParentRecordCompany = SKS_LB_JournalARApplic.CustTransDataAreaId;
                ParentCTRecID = SKS_LB_Journalarapplic.CustTransRecId;
                ParentCustAccount = SKS_LB_JournalAR.CustAccount;

                SKS_LB_WriteoffTmp.TrackingInvoices = SKS_LB_JournalARApplic.LBInvoice;

                invoiceDate = SKS_LB_JournalAR::find(SKS_LB_JournalARApplic.SKS_LB_JournalARRecId).PaymDate;
                SKS_LB_WriteOffTmp.InvDate = invoiceDate;

            }
            else if (element.args().parm() != '')
            {
                RefRecId SKS_LB_JournalARRecid = str2Int64(element.args().parm());

                Select firstonly forUpdate SKS_LB_JournalAR where SKS_LB_JournalAR.recid == SKS_LB_JournalARRecid;

                if(!SKS_LB_JournalAR)
                {
                    throw error("@SYS96590");
                }
                SKS_LB_WriteoffTmp_ds.object(fieldNum(SKS_LB_WriteoffTmp, CustomerCompany)).allowEdit(!SKS_LB_Bank::find(SKS_LB_JournalAR.BankAcct, SKS_LB_JournalAR.FormatID).LBRestrictCrossCompanySearch);
                SKS_LB_WriteoffTmp.CustomerCompany = SKS_LB_JournalAR.CustomerCompany;
                SKS_LB_WriteoffTmp.CustAccount = SKS_LB_JournalAR.CustAccount;
                SKS_LB_WriteoffTmp.amountCur = SKS_LB_Journalar.PmtAmountCur;
                SKS_LB_WriteoffTmp.TrackingInvoices = '';

                invoiceDate = SKS_LB_JournalAR.PaymDate;
                SKS_LB_WriteOffTmp.InvDate = invoiceDate;

                ParentRecordCompany = SKS_LB_JournalAR.CustomerCompany;
                ParentCustAccount = SKS_LB_JournalAR.CustAccount;
            }
            else
            {
                throw error("@SYS96590");
            }
        }

        changeCompany(ParentRecordCompany)
        {
            // Store original party id
            select firstonly Party from custtable
            where CustTable.AccountNum == ParentCustAccount;
            gParty = custTable.party;

            select firstonly Invoice, DefaultDimension, OrderAccount from locCustTrans where locCustTrans.RecId == ParentCTRecID;
        }

        if(locCustTrans.OrderAccount != '')
        {
            SKS_LB_WriteoffTmp.OrderAccount = locCustTrans.OrderAccount;
        }

        if(locCustTrans.invoice != '' && SKS_LB_JournalARErrors.Invoice == '')
        {
            SKS_LB_WriteoffTmp.TrackingInvoices = locCustTrans.invoice;
        }
        SKS_LB_WriteoffTmp.TaxGroup = SKS_LB_Setup_AutoCRParms::find(SKS_LB_WriteoffTmp.CustomerCompany).TaxGroup;

        element.InitWriteOffId((SKS_PP_Setup::find().LBWOUseInvDim == NoYes::yes) ? locCustTrans.DefaultDimension : 0);


        if(SKS_LB_WriteoffRules.CreditLimit != 0 && SKS_LB_WriteoffTmp.AmountCur < 0  && abs(SKS_LB_WriteoffTmp.AmountCur) > SKS_LB_WriteoffRules.CreditLimit)
        {
            SKS_LB_WriteoffTmp.amountcur = 0;
        }
        else
        {
            if(SKS_LB_WriteoffRules.DebitLimit != 0 && SKS_LB_WriteoffTmp.AmountCur > SKS_LB_WriteoffRules.DebitLimit)
            {
                SKS_LB_WriteoffTmp.amountcur = 0;
            }
        }

        SKS_LB_WriteOffTmp.insert();
        appliedamt.realvalue(SKS_LB_WriteoffTmp.amountcur);
       // generalLedgerDefaultAccountController = LedgerDimensionDefaultAccountController::construct(SKS_LB_WriteOffTmp_DS, fieldStr(SKS_LB_WriteOffTmp, CRLedgerDimension));
       // generalLedgerOffsetDefaultAccountController = LedgerDimensionDefaultAccountController::construct(SKS_LB_WriteOffTmp_DS, fieldStr(SKS_LB_WriteOffTmp, AutoRevOffsetLedgerDimension));


    }

]]></Source>
			</Method>
			<Method>
				<Name>InitWriteOffId</Name>
				<Source><![CDATA[
    public void InitWriteOffId(DimensionDefault InvDimension)
    {
        SKS_LB_Depositor        SKS_LB_Depositor;
        SKS_PP_Setup            SKS_PP_Setup;
        SKS_LB_WriteoffDetails  SKS_LB_WriteOffDetails;

        select firstonly writeoffid from SKS_LB_Depositor where SKS_LB_Depositor.AccountNum == SKS_LB_WriteoffTmp.CustAccount && SKS_LB_Depositor.CustomerCompany == SKS_LB_WriteoffTmp.CustomerCompany;

        if(!SKS_LB_Depositor)
        {
            select firstonly LBWriteOffId from SKS_PP_Setup;
            WriteOffID = SKS_PP_setup.LBWriteOffId;
        }
        else
        {
            WriteOffID = SKS_LB_Depositor.WriteOffId;
        }

        if(WriteOffID == '')
        {
            error("@SKS3553");
        }
        else
        {
            select firstOnly reqreason, writeoffid, CreditLimit, DebitLimit from sks_lb_writeoffRules where sks_lb_writeoffRules.WriteoffId == WriteOffId;

            select firstOnly SKS_LB_WriteoffDetails order by SKS_LB_WriteoffDetails.ThresholdAmount asc
                    where SKS_LB_WriteoffDetails.SKS_LB_WriteoffRules == WriteOffId
                        && sks_lb_writeoffdetails.CustomerCompany == SKS_LB_WriteoffTmp.CustomerCompany
                        && sks_lb_writeoffdetails.ThresholdAmount >= abs(SKS_LB_WriteoffTmp.AmountCur)
                        && SKS_LB_WriteoffDetails.ThresholdAmount != 0;

            if(SKS_LB_WriteoffDetails)
            {

                SKS_LB_WriteOffTmp.ReasonCode = SKS_LB_WriteoffDetails.ReasonCode;
                SKS_LB_WriteoffTmp.CRLedgerDimension = SKS_LB_WriteoffDetails.CRLedgerDimension;
                SKS_LB_WriteoffTmp.AutoCRAutoRev = SKS_LB_WriteOffDetails.AutoRev;
                if(SKS_LB_WriteoffTmp.AutoCRAutoRev == NoYes::Yes)
                {
                    SKS_LB_WriteOffTmp.AutoRevLedgerDimension = SKS_LB_WriteoffDetails.RevLedgerDimension;
                    SKS_LB_WriteoffTmp.AutoRevOffsetLedgerDimension = SKS_LB_WriteoffDetails.RevOffsetLedgerDimension;
                    SKS_LB_WriteoffTmp.RevReasonCode = SKS_LB_WriteoffDetails.RevReasonCode;
                }
            }

            SKS_LB_WriteOffTmp.CROffsetLedgerDimension = LedgerDimensionDefaultFacade::serviceMergeDefaultDimensions(InvDimension, SKS_LB_WriteoffDetails.CROffsetLedgerDimension);
            SKS_LB_WriteOffTmp.AutoRevOffsetLedgerDimension = LedgerDimensionDefaultFacade::serviceMergeDefaultDimensions(InvDimension, SKS_LB_WriteoffDetails.CROffsetLedgerDimension);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>JournalARErrorsRecordWrite</Name>
				<Source><![CDATA[
    public SKS_LB_JournalARErrors JournalARErrorsRecordWrite(SKS_LB_JournalARErrors ARErrors, InvoiceID InvoiceNum)
    {
        CustTrans TmpInvCustTrans;
        CustTransOpen TmpInvCustTransOpen;
        SKS_LB_InvoiceMatch TmpInvoiceMatch;
        Select firstonly MatchType, Direction, MatchValue, CustTransRecId from TmpInvoiceMatch where (TmpInvoiceMatch.MatchType == SKS_LB_MatchType::InvoiceNumber &&
                                    TmpInvoiceMatch.Direction == SKS_LB_MatchTypeDirection::Forward &&
                                    TmpInvoiceMatch.MatchValue == InvoiceNum)
                                    join RecId from TmpInvCustTrans
                                    where (TmpInvCustTrans.RecId == TmpInvoiceMatch.CustTransRecId)
                                    join DueDate, RefRecId, DataAreaId, AccountNum, RecId from TmpInvCustTransOpen
                                    order by TmpInvCustTransOpen.DueDate
                                    where (TmpInvCustTrans.RecId == TmpInvCustTransOpen.RefRecId
                                        && TmpInvCustTransOpen.dataAreaId == SKS_LB_WriteoffTmp.CustomerCompany
                                        && TmpInvCustTransOpen.AccountNum == SKS_LB_WriteoffTmp.CustAccount);

        ARErrors.CustTransRecId = TmpInvCustTrans.RecId;
        ARErrors.CustTransOpenRecId = TmpInvCustTransOpen.RecId;
        ARErrors.ActualSettlementAmountCur = SKS_LB_WriteoffTmp.AmountCur;
        ARErrors.CustomerCompany = SKS_LB_WriteoffTmp.CustomerCompany;
        ARErrors.CustAccount = SKS_LB_WriteoffTmp.CustAccount;
        ARErrors.CustAccountSugg = SKS_LB_WriteoffTmp.CustAccount;
        ARErrors.AutoCRRev = SKS_LB_WriteoffTmp.AutoCRAutoRev;
        ARErrors.RevReasonCode = SKS_LB_WriteoffTmp.RevReasonCode;
        ARErrors.ReasonCode = SKS_LB_WriteoffTmp.ReasonCode;
        ARErrors.AutoRevLedgerDimension = SKS_LB_WriteoffTmp.AutoRevLedgerDimension;
        ARErrors.AutoRevOffsetLedgerDimension = SKS_LB_WriteoffTmp.AutoRevOffsetLedgerDimension;
       // ARErrors.DefaultDimension = SKS_LB_Process_IMPORTTEMP_Records::LBDimensionMerge(SKS_PP_Setup::find(), SKS_LB_WriteoffTmp.CROffsetLedgerDimension, CustTable::find(SKS_LB_WriteoffTmp.CustAccount).DefaultDimension, SKS_LB_Bank::find(ARErrors.BankAcct, ARErrors.FormatID).LBJournalName);
        ARErrors.AutoCROffsetLedgerDimension = SKS_LB_WriteoffTmp.CRLedgerDimension;
        ARErrors.CustAccountErr = SKS_LB_CustIDErr::NameLookup;
        ARErrors.InvoiceIdErr = SKS_LB_InvoiceIdErr::OK;
        ARErrors.Invoice = InvoiceNum;
        ARErrors.LBInvoice = InvoiceNum;
        ARErrors.AltInvLookupRef = InvoiceNum;
        ARErrors.WriteOffId = WriteOffID;
        ARErrors.WriteOff = NoYes::Yes;
        ARErrors.TrackingInvoices = SKS_LB_WriteoffTmp.TrackingInvoices;

        return ARErrors;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshWorkbenchErrorGrid</Name>
				<Source><![CDATA[
    void refreshWorkbenchErrorGrid()
    {
        str formCaller;
        formCaller = element.args().caller().toString();
        if(strScan(formCaller,'SKS_LB_PaymentAppWorkbench',0,strLen(formCaller))>0)
        {
            element.args().caller().refreshErrorPayments();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshWorkbenchPaymentGrid</Name>
				<Source><![CDATA[
    void refreshWorkbenchPaymentGrid()
    {
        str formCaller;
        formCaller = element.args().caller().name();
        if(strScan(formCaller,'SKS_LB_SettlementDetails',0,strLen(formCaller))>0)
        {
            element.args().caller().RefreshSettlementGrid();
            element.args().caller().populateTotals();
            element.args().caller().RefreshWorkbenchForm();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>SettlementsUnappliedAmount</Name>
				<Source><![CDATA[
    private amountcur SettlementsUnappliedAmount(SKS_LB_JournalAR   journalAR)
    {
        SKS_LB_JournalARApplic  JournalarApplic;
        AmountCur   InvoiceAmt;
        AmountCur   CreditAmt;

        select sum(settleamountCur), sum(DiscApplyAmount) from JournalarApplic where JournalARApplic.sks_lb_journalarrecid == Journalar.recid
                            && JournalARApplic.SettleAmountCur > 0;

        InvoiceAmt = JournalarApplic.settleamountCur + JournalarApplic.discApplyAmount;

        select sum(settleamountCur) from JournalarApplic where JournalARApplic.sks_lb_journalarrecid == Journalar.recid
                            && JournalARApplic.SettleAmountCur < 0;

        CreditAmt = JournalarApplic.settleamountcur;

        return journalAR.pmtamountcur - InvoiceAmt + CreditAmt;
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>SKS_LB_WriteoffTmp</Name>
				<Methods>
					<Method>
						<Name>validateDelete</Name>
						<Source><![CDATA[
        public boolean validateDelete()
        {
            boolean ret;

            ret = super();

            if(ret)
            {
                appliedamt.realValue(appliedamt.realValue() - SKS_LB_WriteoffTmp.AmountCur);
            }

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        public int active()
        {
            int ret;

            ret = super();

            if(SKS_LB_WriteoffTmp.AutoCRAutoRev == NoYes::Yes)
            {
                SKS_LB_WriteoffTmp_ds.object(fieldNum(SKS_LB_WriteoffTmp, RevReasonCode)).allowEdit(true);
                if(SKS_LB_WriteoffTmp.RevReasonCode != '')
                {
                    SKS_LB_WriteoffTmp_ds.object(fieldNum(SKS_LB_WriteoffTmp, AutoRevLedgerDimension)).allowEdit(false);
                }
                else
                {
                    SKS_LB_WriteoffTmp_ds.object(fieldNum(SKS_LB_WriteoffTmp, AutoRevLedgerDimension)).allowEdit(true);
                }
            }
            else
            {
                SKS_LB_WriteoffTmp_ds.object(fieldNum(SKS_LB_WriteoffTmp, RevReasonCode)).allowEdit(false);
                SKS_LB_WriteoffTmp_ds.object(fieldNum(SKS_LB_WriteoffTmp, AutoRevLedgerDimension)).allowEdit(false);
            }

            if(SKS_LB_WriteoffTmp.ReasonCode == '')
            {
                SKS_LB_WriteoffTmp_ds.object(fieldNum(SKS_LB_WriteoffTmp, CRLedgerDimension)).allowEdit(true);
            }
            else
            {
                SKS_LB_WriteoffDetails SKS_LB_WriteoffDetails;
                select firstonly SKS_LB_WriteoffDetails
                                    where SKS_LB_WriteoffDetails.ReasonCode == SKS_LB_WriteoffTmp.ReasonCode
                                        && sks_lb_writeoffdetails.CustomerCompany == SKS_LB_WriteoffTmp.CustomerCompany;
                if(SKS_LB_WriteoffDetails.CRLedgerDimension != 0)
                {
                    SKS_LB_WriteoffTmp_ds.object(fieldNum(SKS_LB_WriteoffTmp, CRLedgerDimension)).allowEdit(false);
                }
            }

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>create</Name>
						<Source><![CDATA[
        public void create(boolean _append = false)
        {
            super(_append);
            if(MenuItemName == 'SKS_LB_WriteOffTmp')
            {
                SKS_LB_WriteoffTmp.CustomerCompany = SKS_LB_JournalARErrors.CustomerCompany;
                SKS_LB_WriteoffTmp.CustAccount = SKS_LB_JournalARErrors.CustAccountSugg;
            }
            else
            {
                SKS_LB_WriteoffTmp.CustomerCompany = SKS_LB_JournalAR.CustomerCompany;
                SKS_LB_WriteoffTmp.CustAccount = SKS_LB_JournalAR.CustAccount;
            }
            SKS_LB_WriteoffTmp.invdate = invoiceDate;
            SKS_LB_WriteoffTmp.write();
            SKS_LB_WriteoffTmp.reread();
        }

]]></Source>
					</Method>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        public void write()
        {
            super();
            wot = SKS_LB_WriteoffTmp;
        }

]]></Source>
					</Method>
					<Method>
						<Name>validateWrite</Name>
						<Source><![CDATA[
        public boolean validateWrite()
        {

            boolean ret;

            ret = super();

            if(ret && SKS_LB_WriteoffTmp.ReasonCode == '' || (SKS_LB_WriteoffTmp.AutoCRAutoRev && SKS_LB_WriteoffTmp.RevReasonCode == ''))
            {
                if(sks_lb_writeoffRules.ReqReason == NoYes::Yes)
                {
                    error(strFmt("@SKS3525", sks_lb_writeoffRules.WriteoffId));
                    ret = false;
                }
            }


            if(SKS_LB_WriteoffTmp.AutoCRAutoRev == NoYes::Yes)
            {
                if(SKS_LB_WriteoffTmp.AutoRevLedgerDimension == 0)
                {
                    error("@SKS3519");
                    ret = false;
                }
            }

            if (SKS_LB_WriteoffTmp.AmountCur == 0)
            {
                error("@SKS6241");
            }

            if(ret && SKS_LB_WriteoffRules.CreditLimit != 0 && SKS_LB_WriteoffTmp.AmountCur < 0  && abs(SKS_LB_WriteoffTmp.AmountCur) > SKS_LB_WriteoffRules.CreditLimit)
            {
                error(strFmt("@SKS6242", SKS_LB_WriteoffRules.CreditLimit));
                ret = false;
            }

            if(ret && SKS_LB_WriteoffRules.DebitLimit != 0 && SKS_LB_WriteoffTmp.AmountCur > 0 && SKS_LB_WriteoffTmp.AmountCur > SKS_LB_WriteoffRules.DebitLimit)
            {
                error(strFmt("@SKS6243", SKS_LB_WriteoffRules.DebitLimit));
                ret = false;
            }

            if(SKS_LB_WriteoffTmp.OrderAccount == '')
            {              
                error("@SKS:SKGLBOrderAcct");
                ret = false;
            }

            if(SKS_LB_WriteoffTmp.CRLedgerDimension == 0)
            {
                error("@SKS3745");

                if(SKS_LB_WriteoffTmp.ReasonCode != '')
                {
                    SKS_LB_WriteoffTmp_ds.object(fieldNum(SKS_LB_WriteoffTmp, CRLedgerDimension)).allowEdit(true);
                }

                ret = false;
            }
          
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
				<Fields>
					<Field>
						<DataField>AmountCur</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                AmountCur OrigAmount;
                OrigAmount = SKS_LB_WriteoffTmp.orig().AmountCur;
                appliedamt.realValue(appliedamt.realValue() - OrigAmount);

                super();
                appliedamt.realValue(appliedamt.realValue() + SKS_LB_WriteoffTmp.AmountCur);
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>AutoCRAutoRev</DataField>
						<Methods>
							<Method>
								<Name>validate</Name>
								<Source><![CDATA[
            public boolean validate()
            {
                SKS_LB_Setup_AutoCRParms  SKS_LB_Setup_AutoCRParms;
                boolean ret;

                ret = super();
                if(SKS_LB_WriteoffTmp.AutoCRAutoRev == NoYes::Yes)
                {
                    if(MenuItemName == 'SKS_LB_WriteOffTmp')
                    {
                        select firstonly SKS_LB_Setup_AutoCRParms where SKS_LB_Setup_AutoCRParms.AutoCRGenJrnlName != '' && SKS_LB_Setup_AutoCRParms.CustomerCompany == SKS_LB_JournalARErrors.CustomerCompany;
                    }
                    else
                    {
                        select firstonly SKS_LB_Setup_AutoCRParms where SKS_LB_Setup_AutoCRParms.AutoCRGenJrnlName != '' && SKS_LB_Setup_AutoCRParms.CustomerCompany == SKS_LB_Journalar.CustomerCompany;
                    }

                    if(!SKS_LB_Setup_AutoCRParms)
                    {
                        ret = false;
                        error("@SKS3514");
                    }
                    SKS_LB_WriteoffTmp_ds.object(fieldNum(SKS_LB_WriteoffTmp, autorevledgerdimension)).allowEdit(true);
                    SKS_LB_WriteoffTmp_ds.object(fieldNum(SKS_LB_WriteoffTmp, RevReasonCode)).allowEdit(true);
                }
                else
                {
                    SKS_LB_WriteoffTmp.RevReasonCode = '';
                    SKS_LB_WriteoffTmp.AutoRevLedgerDimension = 0;
                    SKS_LB_WriteoffTmp.AutoRevOffsetLedgerDimension = 0;
                    SKS_LB_WriteoffTmp_ds.object(fieldNum(SKS_LB_WriteoffTmp, autorevledgerdimension)).allowEdit(false);
                    SKS_LB_WriteoffTmp_ds.object(fieldNum(SKS_LB_WriteoffTmp, RevReasonCode)).allowEdit(false);
                    SKS_LB_WriteoffTmp_ds.research(true);
                }
                return ret;
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>AutoRevLedgerDimension</DataField>
						<Methods>
							<Method>
								<Name>resolveReference</Name>
								<Source><![CDATA[
            public Common resolveReference(FormReferenceControl _formReferenceControl)
            {
                return generalLedgerOffsetDefaultAccountController.resolveReference();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>CRLedgerDimension</DataField>
						<Methods>
							<Method>
								<Name>resolveReference</Name>
								<Source><![CDATA[
            public Common resolveReference(FormReferenceControl _formReferenceControl)
            {
                return generalLedgerDefaultAccountController.resolveReference();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>CustomerCompany</DataField>
						<Methods>
							<Method>
								<Name>validate</Name>
								<Source><![CDATA[
            public boolean validate()
            {
                CustTable   custTable;
                boolean ret;



                ret = super();

                if (ret)
                {
                    changeCompany(SKS_LB_WriteoffTmp.CustomerCompany)
                    {
                        custTable = CustTable::findByPartyRecId(gParty);
                    }

                    if(custTable)
                    {
                        SKS_LB_WriteoffTmp.CustAccount = custTable.AccountNum;
                        element.InitWriteOffId(0);
                    }
                    else
                    {
                        ret = false;
                        error(strFmt("@SKS3552", SKS_LB_WriteoffTmp.CustomerCompany));
                    }
                }


                return ret;
            }

]]></Source>
							</Method>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            /// <summary>
            /// modified event for the customer company field
            /// </summary>
            public void modified()
            {
                super();

                SKS_LB_WriteoffTmp.TaxGroup = SKS_LB_Setup_AutoCRParms::find(SKS_LB_WriteoffTmp.CustomerCompany).TaxGroup;
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>OrderAccount</DataField>
						<Methods>
							<Method>
								<Name>validate</Name>
								<Source><![CDATA[
            /// <summary>
            ///Order account validation
            /// </summary>
            /// <returns>boolean</returns>
            public boolean validate()
            {
                CustTable   lCustTable;
                boolean ret;

                ret = super();

                if(ret && SKS_LB_WriteoffTmp.OrderAccount != SKS_LB_WriteoffTmp.CustAccount)
                {
                    Select firstonly * from lCustTable where lCustTable.AccountNum == SKS_LB_WriteoffTmp.orderaccount;
                    if(!lCustTable || lCustTable.InvoiceAccount != SKS_LB_WriteoffTmp.CustAccount)
                    {
                        ret = false;
                        error("@SKS6754");
                    }
                }

                return ret;
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>ReasonCode</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                SKS_LB_ReasonAccounts   SKS_LB_ReasonAccounts;
                SKS_LB_WriteoffDetails  SKS_LB_WriteoffDetails;
                CustTrans locCustTrans;
                super();
                changeCompany(SKS_LB_WriteoffTmp.CustomerCompany)
                {                                               
                    Select firstonly * from SKS_LB_ReasonAccounts where SKS_LB_ReasonAccounts.ReasonCode == SKS_LB_WriteoffTmp.ReasonCode;

                    if(SKS_LB_ReasonAccounts)
                    {
                        if(SKS_LB_ReasonAccounts.LedgerDimension == 0)
                        {
                            warning(strFmt("@SKS3527", SKS_LB_WriteoffTmp.CustomerCompany));                           
                        }

                        SKS_LB_WriteoffTmp.CRLedgerDimension = SKS_LB_ReasonAccounts.LedgerDimension;

                        if (SKS_PP_Setup::find().LBWOUseInvDim == NoYes::No)
                        {
                            SKS_LB_WriteoffTmp.CROffsetLedgerDimension = SKS_LB_ReasonAccounts.OffsetLedgerDimension;
                        }
                        else
                        {
                            if(MenuItemName == 'SKS_LB_WriteOffTmp' )
                            {
                                if(SKS_LB_JournalARErrors.CustTransOpenRecId != 0)
                                {
                                    changeCompany(SKS_LB_JournalARErrors.CustomerCompany)
                                    {
                                        select firstonly DefaultDimension from locCustTrans where locCustTrans.RecId == SKS_LB_JournalARErrors.CustTransRecId;
                                    }
                                }
                                SKS_LB_WriteOffTmp.CROffsetLedgerDimension = LedgerDimensionDefaultFacade::serviceMergeDefaultDimensions(locCustTrans.DefaultDimension, SKS_LB_ReasonAccounts.OffsetLedgerDimension);

                            }
                            else
                            {
                                if(SKS_LB_JournalARApplic.CustTransDataAreaId)
                                {
                                    changeCompany(SKS_LB_JournalARApplic.CustTransDataAreaId)
                                    {
                                        select firstonly DefaultDimension from locCustTrans where locCustTrans.RecId == SKS_LB_Journalarapplic.CustTransRecId;
                                    }
                                }
                                SKS_LB_WriteOffTmp.CROffsetLedgerDimension = LedgerDimensionDefaultFacade::serviceMergeDefaultDimensions(locCustTrans.DefaultDimension, SKS_LB_ReasonAccounts.OffsetLedgerDimension);
                            }
                        }

                        select firstonly SKS_LB_WriteoffDetails
                                    where SKS_LB_WriteoffDetails.ReasonCode == SKS_LB_ReasonAccounts.ReasonCode
                                        && sks_lb_writeoffdetails.CustomerCompany == SKS_LB_WriteoffTmp.CustomerCompany;

                        if(SKS_LB_WriteoffDetails)
                        {
                            SKS_LB_WriteoffTmp.RevReasonCode = SKS_LB_WriteoffDetails.RevReasonCode;
                            SKS_LB_WriteoffTmp.AutoCRAutoRev = sks_lb_writeoffDetails.AutoRev;
                            SKS_LB_WriteoffTmp.AutoRevLedgerDimension = SKS_LB_WriteoffDetails.RevLedgerDimension;

                            if (SKS_PP_Setup::find().LBWOUseInvDim == NoYes::No)
                            {
                                SKS_LB_WriteoffTmp.AutoRevOffsetLedgerDimension = SKS_LB_WriteoffDetails.RevOffsetLedgerDimension;
                            }
                            else
                            {
                                if(MenuItemName == 'SKS_LB_WriteOffTmp' )
                                {
                                    if(SKS_LB_JournalARErrors.CustTransOpenRecId != 0)
                                    {
                                        if(SKS_LB_JournalARErrors.CustomerCompany)
                                        {
                                            changeCompany(SKS_LB_JournalARErrors.CustomerCompany)
                                            {
                                                select firstonly DefaultDimension from locCustTrans where locCustTrans.RecId == SKS_LB_JournalARErrors.CustTransRecId;
                                            }
                                        }
                                    }
                                    SKS_LB_WriteOffTmp.CROffsetLedgerDimension = LedgerDimensionDefaultFacade::serviceMergeDefaultDimensions(locCustTrans.DefaultDimension, SKS_LB_ReasonAccounts.OffsetLedgerDimension);
                                }
                                else
                                {
                                    if(SKS_LB_JournalARApplic.CustTransDataAreaId)
                                    {
                                        changeCompany(SKS_LB_JournalARApplic.CustTransDataAreaId)
                                        {
                                            select firstonly DefaultDimension from locCustTrans where locCustTrans.RecId == SKS_LB_Journalarapplic.CustTransRecId;
                                        }
                                    }
                                    SKS_LB_WriteOffTmp.AutoRevOffsetLedgerDimension = LedgerDimensionDefaultFacade::serviceMergeDefaultDimensions(locCustTrans.DefaultDimension, SKS_LB_WriteoffDetails.CROffsetLedgerDimension);
                                }
                            }
                        }
                    }
                }
                if(SKS_LB_WriteoffTmp.ReasonCode != '')
                {
                    SKS_LB_WriteoffTmp_ds.object(fieldNum(SKS_LB_WriteoffTmp, CRLedgerDimension)).allowEdit(false);
                }
                else
                {
                    SKS_LB_WriteoffTmp_ds.object(fieldNum(SKS_LB_WriteoffTmp, CRLedgerDimension)).allowEdit(true);
                }
            }

]]></Source>
							</Method>
							<Method>
								<Name>validate</Name>
								<Source><![CDATA[
            public boolean validate()
            {
                boolean ret;

                ret = super();

                if(ret && SKS_LB_WriteoffTmp.ReasonCode != '')
                {                                                                                       
                    changeCompany(SKS_LB_WriteoffTmp.CustomerCompany)
                    {
                        SKS_LB_ReasonAccounts   sks_lb_reasonAccountsLoc;

                        select firstonly sks_lb_reasonAccountsLoc
                                where sks_lb_reasonAccountsLoc.ReasonCode ==  SKS_LB_WriteoffTmp.ReasonCode;
                        if(sks_lb_reasonAccountsLoc && sks_lb_reasonAccountsLoc.LedgerDimension == 0)
                        {
                            error(strFmt("@SKS3527", SKS_LB_WriteoffTmp.CustomerCompany));
                            ret = false;
                        }
                    }
                    
                }

                return ret;
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>RevReasonCode</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                SKS_LB_ReasonAccounts  SKS_LB_ReasonAccounts;

                super();

                changeCompany(SKS_LB_WriteoffTmp.CustomerCompany)
                {
                    Select firstonly * from SKS_LB_ReasonAccounts where SKS_LB_ReasonAccounts.ReasonCode == SKS_LB_WriteoffTmp.RevReasonCode;

                    if(SKS_LB_ReasonAccounts)
                    {
                        SKS_LB_WriteoffTmp.AutoRevLedgerDimension = SKS_LB_ReasonAccounts.LedgerDimension;
                        SKS_LB_WriteoffTmp.AutoRevOffsetLedgerDimension = SKS_LB_ReasonAccounts.OffsetLedgerDimension;
                    }

                    if(SKS_LB_WriteoffTmp.RevReasonCode != '')
                    {
                        SKS_LB_WriteoffTmp_ds.object(fieldNum(SKS_LB_WriteoffTmp, AutoRevLedgerDimension)).allowEdit(false);
                    }
                    else
                    {
                        SKS_LB_WriteoffTmp_ds.object(fieldNum(SKS_LB_WriteoffTmp, AutoRevLedgerDimension)).allowEdit(true);
                    }
                }

            }

]]></Source>
							</Method>
							<Method>
								<Name>validate</Name>
								<Source><![CDATA[
            public boolean validate()
            {
                SKS_LB_ReasonAccounts   SKS_LB_ReasonAccounts;
                boolean ret;

                ret = super();

                if(ret && SKS_LB_WriteoffTmp.RevReasonCode != '')
                {
                    changeCompany(SKS_LB_WriteoffTmp.CustomerCompany)
                    {
                        Select firstonly * from SKS_LB_ReasonAccounts where SKS_LB_ReasonAccounts.ReasonCode == SKS_LB_WriteoffTmp.RevReasonCode;

                        if(SKS_LB_ReasonAccounts.LedgerDimension == 0)
                        {
                            error(strFmt("@SKS3527", SKS_LB_WriteoffTmp.CustomerCompany));                            
                            ret = false;
                        }
                    }
                }

                return ret;
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>TaxGroup</DataField>
						<Methods>
							<Method>
								<Name>lookup</Name>
								<Source><![CDATA[
            /// <summary>
            ///n lookup for tax groups
            /// </summary>
            /// <param name = "_formControl">_formControl</param>
            /// <param name = "_filterStr">_filterStr</param>
            public void lookup(FormControl _formControl, str _filterStr)
            {
                Query                   query          = new Query();
                QueryBuildDataSource    queryBuildDataSource;

                SysTableLookup sysTableLookup;
                changeCompany (SKS_LB_WriteoffTmp.CustomerCompany ? SKS_LB_WriteoffTmp.CustomerCompany : curext())
                {
                    // Create an instance of SysTableLookup where 'this'
                    // is the current form control.
                    sysTableLookup =SysTableLookup::newParameters(tableNum(TaxGroupHeading), _formControl);

                    // Add fields to be shown in the lookup form.
                    sysTableLookup.addLookupField(fieldNum(TaxGroupHeading, TaxGroup));
                    sysTableLookup.addLookupField(fieldNum(TaxGroupHeading, TaxGroupName));

                    // Limit and arrange the data selection.
                    queryBuildDataSource = query.addDataSource(tableNum(TaxGroupHeading));

                    sysTableLookup.parmQuery(query);

                    // Perform the lookup.

                    sysTableLookup.performFormLookup();
                }
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
				</Fields>
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>SKS_LB_GLAccountDimensions</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            FormRun formRun;
            MenuFunction menuFunction;
            Args args;


            if(SKS_LB_WriteOffTmp.CustomerCompany == '')
            {
                error("@SKS2334");
            }
            else
            {
                // Launch the Dimension form modally
                menuFunction = new MenuFunction(SKS_LB_GLAccountDimensions.menuItemName(), SKS_LB_GLAccountDimensions.menuItemType());
                args = new Args();
                args.record(SKS_LB_WriteOffTmp);
                formRun = menuFunction.create(args);
                formRun.run();
                formRun.wait(true);
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>CreateWriteOff</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            super();
           
            if(SKS_LB_WriteoffTmp.ReasonCode == '' || (SKS_LB_WriteoffTmp.RevReasonCode == '' && SKS_LB_WriteoffTmp.AutoCRAutoRev == NoYes::Yes))
            {
                select firstonly reqreason from sks_lb_writeoffRules where sks_lb_writeoffRules.writeoffid == WriteOffID;
                if(SKS_LB_WriteoffRules.ReqReason == NoYes::Yes)
                {
                    error(strFmt("@SKS3525" , WriteoffId));
                }
                else
                {
                    if(MenuItemName == 'SKS_LB_WriteOffTmp')
                    {
                        element.CreateErrorsGridWriteOffs();
                    }
                    else
                    {
                        element.CreateSettlementsWriteOff();
                    }
                }
            }
            else
            {
                if(MenuItemName == 'SKS_LB_WriteOffTmp')
                {
                    element.CreateErrorsGridWriteOffs();
                }
                else
                {
                    element.CreateSettlementsWriteOff();
                }
            }        
            
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SKS_LB_WriteoffTmp_CustAccount</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            CustTable::lookupCustomer(SKS_LB_WriteoffTmp_CustAccount, SKS_LB_WriteOffTmp.CustomerCompany);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SKS_LB_WriteoffTmp_OrderAccount</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        /// <summary>
        /// lookup for order account
        /// </summary>
        public void lookup()
        {
            Query query = new Query();
            QueryBuildDataSource queryBuildDataSource;
            QueryBuildRange queryBuildRange;
            SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(CustTable), this);

            changeCompany(SKS_LB_Writeofftmp.customerCompany)
            {
                sysTableLookup.addLookupField(fieldNum(CustTable, AccountNum));

                queryBuildDataSource = query.addDataSource(tableNum(CustTable));

                queryBuildRange = queryBuildDataSource.addRange(fieldNum(CustTable, InvoiceAccount));
                queryBuildRange.value(strFmt('(%1 == "%2") || (%3 == "%2")', fieldStr(CustTable, InvoiceAccount), queryValue(SKS_LB_Writeofftmp.CustAccount), fieldStr(CustTable, AccountNum)));

                sysTableLookup.parmQuery(query);
                sysTableLookup.performFormLookup();
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SKS_LB_WriteoffTmp_ReasonCode</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            Query query = new Query();
            QueryBuildDataSource queryBuildDataSource;
            QueryBuildRange queryBuildRange;
            SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(ReasonTable), this);

            changeCompany(SKS_LB_Writeofftmp.customerCompany)
            {
                sysTableLookup.addLookupField(fieldNum(ReasonTable, Reason));

                queryBuildDataSource = query.addDataSource(tableNum(ReasonTable));

                queryBuildRange = queryBuildDataSource.addRange(fieldNum(ReasonTable, Cust));
                queryBuildRange.value('1');

                sysTableLookup.parmQuery(query);

                sysTableLookup.performFormLookup();
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SKS_LB_WriteoffTmp_RevReasonCode</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            Query query = new Query();
            QueryBuildDataSource queryBuildDataSource;
            QueryBuildRange queryBuildRange;

            SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(ReasonTable), this);

            changeCompany(SKS_LB_WriteoffTmp.CustomerCompany)
            {
                sysTableLookup.addLookupField(fieldNum(ReasonTable, Reason));

                queryBuildDataSource = query.addDataSource(tableNum(ReasonTable));

                queryBuildRange = queryBuildDataSource.addRange(fieldNum(ReasonTable, Cust));
                queryBuildRange.value('1');

                sysTableLookup.parmQuery(query);

                sysTableLookup.performFormLookup();
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>SKS_LB_WriteoffTmp</Name>
			<Table>SKS_LB_WriteoffTmp</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AmountCur</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AutoCRAutoRev</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AutoRevLedgerDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AutoRevOffsetLedgerDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CRLedgerDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CROffsetLedgerDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>CustAccount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustomerCompany</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InvDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OrderAccount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReasonCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RevReasonCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxGroup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TrackingInvoices</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@SKS3517</Caption>
		<Pattern xmlns="">Task</Pattern>
		<PatternVersion xmlns="">1.2</PatternVersion>
		<Width xmlns="">900</Width>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>ActionPane</Name>
				<ElementPosition>357913941</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Type>ActionPane</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>RecordBasics</Name>
						<ElementPosition>1431655764</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>ButtonGroup</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormButtonSeparatorControl">
								<Name>Separator</Name>
								<ElementPosition>1227133512</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>ButtonSeparator</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>SKS_LB_GLAccountDimensions</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1533916890</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>MenuFunctionButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<MenuItemName>SKS_LB_TmpGLCROffsetLedgerDimension</MenuItemName>
								<Text>@SKS3504</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>SKS_LB_GLRevAccountDimensions</Name>
								<ElementPosition>1687308579</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>MenuFunctionButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<MenuItemName>SKS_LB_GLRevAccountDimensions</MenuItemName>
								<Text>@SKS3524</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>CreateWriteOff</Name>
								<ElementPosition>1917396112</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<HelpText>@SKS3550</HelpText>
								<Type>Button</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Text>@SKS3517</Text>
							</AxFormControl>
						</Controls>
						<ArrangeMethod>Vertical</ArrangeMethod>
					</AxFormControl>
				</Controls>
				<AlignChild>No</AlignChild>
				<AlignChildren>No</AlignChildren>
				<ArrangeMethod>Vertical</ArrangeMethod>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>PageTitleGroup</Name>
				<ElementPosition>715827882</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Pattern>CustomFilters</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormRealControl">
						<Name>AppliedAmt</Name>
						<AllowEdit>No</AllowEdit>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1431655764</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Real</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<ExtendedDataType>AmountCur</ExtendedDataType>
						<Label>@SYS331464</Label>
						<NoOfDecimals>-1</NoOfDecimals>
					</AxFormControl>
				</Controls>
				<AlignChild>No</AlignChild>
				<ArrangeMethod>HorizontalLeft</ArrangeMethod>
				<FrameType>None</FrameType>
				<Style>CustomFilter</Style>
				<ViewEditMode>Edit</ViewEditMode>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormTabControl">
				<Name>FormTabControl1</Name>
				<Type>Tab</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>FormTabPageControl1</Name>
						<Pattern>ToolbarList</Pattern>
						<PatternVersion>1.2</PatternVersion>
						<Type>TabPage</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGridControl">
								<Name>Grid</Name>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Grid</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>SKS_LB_WriteoffTmp_TrackingInvoices</Name>
										<ElementPosition>286331152</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>TrackingInvoices</DataField>
										<DataSource>SKS_LB_WriteoffTmp</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>SKS_LB_WriteoffTmp_CustomerCompany</Name>
										<ElementPosition>429496728</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>CustomerCompany</DataField>
										<DataSource>SKS_LB_WriteoffTmp</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>SKS_LB_WriteoffTmp_CustAccount</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>644245092</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>CustAccount</DataField>
										<DataSource>SKS_LB_WriteoffTmp</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>SKS_LB_WriteoffTmp_OrderAccount</Name>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>OrderAccount</DataField>
										<DataSource>SKS_LB_WriteoffTmp</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>SKS_LB_WriteoffTmp_AmountCur</Name>
										<ElementPosition>858993456</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>AmountCur</DataField>
										<DataSource>SKS_LB_WriteoffTmp</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>SKS_LB_WriteoffTmp_ReasonCode</Name>
										<ElementPosition>1073741820</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>ReasonCode</DataField>
										<DataSource>SKS_LB_WriteoffTmp</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormSegmentedEntryControl">
										<Name>CRLedgerDimension</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1288490184</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>SegmentedEntry</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension>
											<Name>SegmentedEntryControl</Name>
											<ExtensionComponents />
											<ExtensionProperties>
												<AxFormControlExtensionProperty>
													<Name>parmControllerClassName</Name>
													<Type>String</Type>
													<TypeName>str</TypeName>
													<Value>LedgerDimensionDefaultAccountController</Value>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmIsDefaultAccount</Name>
													<Type>Enum</Type>
													<TypeName>boolean</TypeName>
													<Value>False</Value>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmValidateBlockedForManualEntry</Name>
													<Type>Enum</Type>
													<TypeName>NoYes</TypeName>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmLockMainAccountSegment</Name>
													<Type>Enum</Type>
													<TypeName>NoYes</TypeName>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmPostingType</Name>
													<Type>Enum</Type>
													<TypeName>LedgerPostingType</TypeName>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmIncludeTotalAccounts</Name>
													<Type>Enum</Type>
													<TypeName>NoYes</TypeName>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmIncludeFinancialAccounts</Name>
													<Type>Enum</Type>
													<TypeName>NoYes</TypeName>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmAccountTypeEnumName</Name>
													<Type>String</Type>
													<Value>CRLedgerDimension</Value>
												</AxFormControlExtensionProperty>
											</ExtensionProperties>
										</FormControlExtension>
										<DataSource>SKS_LB_WriteoffTmp</DataSource>
										<ReferenceField>CRLedgerDimension</ReferenceField>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>SKS_LB_WriteoffTmp_TaxGroup</Name>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>TaxGroup</DataField>
										<DataSource>SKS_LB_WriteoffTmp</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>SKS_LB_WriteoffTmp_InvDate</Name>
										<Type>Date</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>InvDate</DataField>
										<DataSource>SKS_LB_WriteoffTmp</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>SKS_LB_WriteoffTmp_AutoCRAutoRev</Name>
										<ElementPosition>1503238548</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>CheckBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<BackgroundColor>WindowBackground</BackgroundColor>
										<DataField>AutoCRAutoRev</DataField>
										<DataSource>SKS_LB_WriteoffTmp</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>SKS_LB_WriteoffTmp_RevReasonCode</Name>
										<ElementPosition>1717986913</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>RevReasonCode</DataField>
										<DataSource>SKS_LB_WriteoffTmp</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormSegmentedEntryControl">
										<Name>AutoRevLedgerDimension</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1932735279</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>SegmentedEntry</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension>
											<Name>SegmentedEntryControl</Name>
											<ExtensionComponents />
											<ExtensionProperties>
												<AxFormControlExtensionProperty>
													<Name>parmControllerClassName</Name>
													<Type>String</Type>
													<TypeName>str</TypeName>
													<Value>LedgerDimensionDefaultAccountController</Value>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmIsDefaultAccount</Name>
													<Type>Enum</Type>
													<TypeName>boolean</TypeName>
													<Value>False</Value>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmValidateBlockedForManualEntry</Name>
													<Type>Enum</Type>
													<TypeName>NoYes</TypeName>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmLockMainAccountSegment</Name>
													<Type>Enum</Type>
													<TypeName>NoYes</TypeName>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmPostingType</Name>
													<Type>Enum</Type>
													<TypeName>LedgerPostingType</TypeName>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmIncludeTotalAccounts</Name>
													<Type>Enum</Type>
													<TypeName>NoYes</TypeName>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmIncludeFinancialAccounts</Name>
													<Type>Enum</Type>
													<TypeName>NoYes</TypeName>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmAccountTypeEnumName</Name>
													<Type>String</Type>
													<Value>AutoRevLedgerDimension</Value>
												</AxFormControlExtensionProperty>
											</ExtensionProperties>
										</FormControlExtension>
										<DataSource>SKS_LB_WriteoffTmp</DataSource>
										<ReferenceField>AutoRevLedgerDimension</ReferenceField>
									</AxFormControl>
								</Controls>
								<AlternateRowShading>No</AlternateRowShading>
								<DataSource>SKS_LB_WriteoffTmp</DataSource>
								<MultiSelect>No</MultiSelect>
								<ShowRowLabels>No</ShowRowLabels>
								<Style>Tabular</Style>
							</AxFormControl>
						</Controls>
						<Caption>@SKS3544</Caption>
					</AxFormControl>
				</Controls>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>