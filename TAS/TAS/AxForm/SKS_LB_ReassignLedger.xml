<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>SKS_LB_ReassignLedger</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class SKS_LB_ReassignLedger extends FormRun
{
    SKS_LB_JournalARMap gJournalARMap;
    CustTable gCustTable;
    DirPartyTable lDirPartytable;
    int64 recID[];
    str dimStr[];
    CustVendAC  oldAcct;
    CustVendAC  newAcct;

    

}
]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        super();
        
        //SKS_LB_Journal_Ledger journalLedger;
        gJournalARMap = element.args().record();

        LedgerCompany.text(gJournalARMap.dataAreaId);

        // XferAmount
        if (gJournalARMap is SKS_LB_JournalARErrors)
        {
            XferAmount.realValue(gJournalARMap.PmtAmountCur);
        }
        else
        {
            XferAmount.realValue(gJournalARMap.PmtAmountCur - gJournalARMap.ActualSettleAmountCur);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshWorkbenchGrid</Name>
				<Source><![CDATA[
    void refreshWorkbenchGrid()
    {
        str formCaller;
        formCaller = element.args().caller().toString();
        if(strScan(formCaller,'ReassignPayments',0,strLen(formCaller))>0)
        {
            if (gJournalARMap is SKS_LB_JournalARErrors)
            {
                element.args().caller().refreshErrorGridOnly();
            }
            else
            {
                element.args().caller().RefreshGoodGridOnly();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runXfer</Name>
				<Source><![CDATA[
    boolean runXfer()
    {
        container   tmpCompany;
        SKS_LB_JournalARApplic lJournalarApplic;         
        DimensionAttributeValueCombination dimValueCombination;

        if (XferAmount.realValue() == 0)
        {
            info("@SKS950");
            XferAmount.setFocus();
            return false;
        } 

        // validation
        if (SKS_LB_Journal_LedgerTmp_LedgerDimension.valueStr() != '' )
        {
            tmpCompany = [LedgerCompany.valueStr()];
            newAcct =  SKS_LB_Journal_LedgerTmp_LedgerDimension.valuestr();
            Select dimValueCombination where dimValueCombination.DisplayValue == newAcct;

            if (!dimValueCombination)
            {
                // Ledger account %1 could not be found
                info(strfmt("@SKS:LedgerMissing",SKS_LB_Journal_LedgerTmp_LedgerDimension.valueStr()));
                SKS_LB_Journal_LedgerTmp_LedgerDimension.setFocus();
                return false;
            }
        }
        else
        {
            throw error(strfmt("@SKS:LedgerMissing",SKS_LB_Journal_LedgerTmp_LedgerDimension.valueStr()));
        }
  
        ttsbegin;

        oldAcct = gJournalARMap.CustAccount;

        //subtract the amount being reassigned form the current selected record
        gJournalARMap.PmtAmountCur -= XferAmount.realValue();         
        gJournalARMap.PmtWasSplit = NoYes::Yes;                  
        gJournalARMap.update();
       
        // Payment was added for customer %1
        Info(strfmt("@SKS:LedgerPaymnt",SKS_LB_Journal_LedgerTmp_LedgerDimension.valueStr()));

        ttscommit;

        // insert       
        SKS_LB_JournalAR    ledgerDeductions;
        SKS_LB_Journal      journalTable;
        select journalTable where journalTable.JournalID ==  gJournalARMap.JournalId
            &&  journalTable.BatchNum ==  gJournalARMap.BatchNum;
        if(journalTable)
        {
            select ledgerDeductions where ledgerDeductions.JournalId ==  gJournalARMap.JournalId
                && ledgerDeductions.BatchNum ==  gJournalARMap.BatchNum
                && ledgerDeductions.IsTransferredToLedger == NoYes::Yes
                && ledgerDeductions.LedgerDimension == SKS_LB_Journal_LedgerTmp.LedgerDimension;
            if(!ledgerDeductions)
            {                
                if (gJournalARMap is SKS_LB_JournalARErrors)
                {
                    ledgerDeductions.initFromSKS_LB_JournalARErrors(gJournalARMap);
                }
                else
                {
                    ledgerDeductions.data(gJournalARMap);
                }

                
                ledgerDeductions.IsTransferredToLedger = NoYes::Yes;
                ledgerDeductions.LedgerDimension = SKS_LB_Journal_LedgerTmp.LedgerDimension;
                ledgerDeductions.PmtAmountCur = XferAmount.realValue();
                ledgerDeductions.CustomerCompany = LedgerCompany.valueStr();
                ledgerDeductions.CustTransOpenRecId  = 0;
                ledgerDeductions.CustTransRecId  = 0;
                ledgerDeductions.Invoice  = '';
                ledgerDeductions.LBInvoice = '';      
                ledgerDeductions.ActualSettleAmountCur = 0;
                ledgerDeductions.CustAccountSugg = '';
                ledgerDeductions.CustAccount = '';
                ledgerDeductions.CustName ='';
                ledgerDeductions.insert();   
            }
            else
            {
                ttsbegin;
                ledgerDeductions.selectForUpdate(true);
                ledgerDeductions.PmtAmountCur += XferAmount.realValue();
                ledgerDeductions.CustomerCompany = LedgerCompany.valueStr();
                ledgerDeductions.CustTransOpenRecId  = 0;
                ledgerDeductions.CustTransRecId  = 0;
                ledgerDeductions.Invoice  = '';
                ledgerDeductions.LBInvoice = '';     
                ledgerDeductions.ActualSettleAmountCur = 0;
                ledgerDeductions.CustAccountSugg = ''; 
                ledgerDeductions.CustAccount = '';
                ledgerDeductions.CustName ='';
                ledgerDeductions.doUpdate();
                ttscommit;
            }

        
            //delete
            if(gJournalARMap.PmtAmountCur == 0)
            {
                if (gJournalARMap is SKS_LB_JournalARErrors)
                {
                    SKS_LB_JournalARErrors gJournalARMapLoc;
                    select forupdate gJournalARMapLoc where gJournalARMapLoc.RecId == gJournalARMap.RecId;
                    if (gJournalARMapLoc)
                    {
                        ttsbegin;
                        gJournalARMapLoc.doDelete();
                        ttscommit;
                    }
                }
                else
                {
                    SKS_LB_JournalAR gJournalARMapLoc;
                    select forupdate gJournalARMapLoc where gJournalARMapLoc.RecId == gJournalARMap.RecId;
                    if (gJournalARMapLoc)
                    {
                        ttsbegin;
                        gJournalARMapLoc.doDelete();
                        ttscommit;
                    }
                }
            }
        }

        return true;
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="" />
		<DataControls xmlns="">
			<Control>
				<Name>LedgerCompany</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;
            DataArea lDataArea;

            if (this.valueStr() != '')

            {
                Select firstonly ID from lDataArea where lDataArea.ID == this.valuestr();
                if (!lDataArea)
                {
                    info(strfmt("@SYS10666",this.valueStr()));
                    ret=false;
                }
                else
                {
                    ret=true;
                }
            }
            else
            {
                ret=false;
            }

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret = super();

            SKS_LB_Journal_LedgerTmp_LedgerDimension.value(0);
            SKS_LB_Journal_LedgerTmp_LedgerDimension.parmDataAreaId(this.valueStr());
        
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>XferAmount</Name>
				<Type>Real</Type>
				<Methods>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();


            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>OK</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            gJournalARMap = element.args().record();

            // validate amount
            if (gJournalARMap is SKS_LB_JournalARErrors)
            {
                if (XferAmount.realValue() > gJournalARMap.PmtAmountCur)
                {
                    error("@SKS:LBReassignToLedgerAmountNotValidError");
                    return;
                }
            }
            else
            {
                if (str2Num(XferAmount.valueStr()) > (gJournalARMap.PmtAmountCur - gJournalARMap.ActualSettleAmountCur))
                {
                    error("@SKS:PaymentError");
                    return;
                }
            }

            if (element.runXfer())
            {
                info(strfmt("@SKS:CustToLedger", XferAmount.valueStr(), OldAcct, newacct));

                element.refreshWorkbenchGrid();
                element.closeOK();
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Cancel</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            super();

            element.closeCancel();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>SKS_LB_Journal_LedgerTmp</Name>
			<Table>SKS_LB_Journal_LedgerTmp</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>CustomerCompany</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LedgerDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@SKS946</Caption>
		<DialogSize xmlns="">Medium</DialogSize>
		<Pattern xmlns="">Dialog</Pattern>
		<PatternVersion xmlns="">1.2</PatternVersion>
		<Style xmlns="">Dialog</Style>
		<WindowType xmlns="">Popup</WindowType>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>FilterGrp</Name>
				<ElementPosition>715827882</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<HeightMode>SizeToAvailable</HeightMode>
				<Pattern>FieldsFieldGroups</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>LedgerCompany</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ConfigurationKey>SKS_PositivePay</ConfigurationKey>
						<ElementPosition>920350134</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<ExtendedDataType>SelectableDataArea</ExtendedDataType>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormSegmentedEntryControl">
						<Name>SKS_LB_Journal_LedgerTmp_LedgerDimension</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>SegmentedEntry</Type>
						<FormControlExtension>
							<Name>SegmentedEntryControl</Name>
							<ExtensionComponents />
							<ExtensionProperties>
								<AxFormControlExtensionProperty>
									<Name>parmControllerClassName</Name>
									<Type>String</Type>
									<Value>DimensionDynamicAccountController</Value>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>parmAccountTypeEnumName</Name>
									<Type>String</Type>
									<Value>AccountType</Value>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>parmIsDefaultAccount</Name>
									<Type>Enum</Type>
									<TypeName>boolean</TypeName>
									<Value>False</Value>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>parmValidateBlockedForManualEntry</Name>
									<Type>Enum</Type>
									<TypeName>NoYes</TypeName>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>parmLockMainAccountSegment</Name>
									<Type>Enum</Type>
									<TypeName>NoYes</TypeName>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>parmPostingType</Name>
									<Type>Enum</Type>
									<TypeName>LedgerPostingType</TypeName>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>parmIncludeTotalAccounts</Name>
									<Type>Enum</Type>
									<TypeName>NoYes</TypeName>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>parmIncludeFinancialAccounts</Name>
									<Type>Enum</Type>
									<TypeName>NoYes</TypeName>
								</AxFormControlExtensionProperty>
							</ExtensionProperties>
						</FormControlExtension>
						<DataSource>SKS_LB_Journal_LedgerTmp</DataSource>
						<ReferenceField>LedgerDimension</ReferenceField>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormRealControl">
						<Name>XferAmount</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1533916890</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Real</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<ExtendedDataType>AmountCur</ExtendedDataType>
						<NoOfDecimals>-1</NoOfDecimals>
					</AxFormControl>
				</Controls>
				<ColumnsMode>Fill</ColumnsMode>
				<FrameType>None</FrameType>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonGroupControl">
				<Name>ButtonGroup</Name>
				<ElementPosition>1431655764</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<LeftMode>Center</LeftMode>
				<Type>ButtonGroup</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormButtonControl">
						<Name>OK</Name>
						<ElementPosition>1073741822</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<HelpText>@SKS717</HelpText>
						<Skip>Yes</Skip>
						<Type>Button</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Text>@SYS5473</Text>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormButtonControl">
						<Name>Cancel</Name>
						<ElementPosition>1610612733</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<HelpText>@SKS953</HelpText>
						<Skip>Yes</Skip>
						<Type>Button</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Text>@SYS50163</Text>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalRight</ArrangeMethod>
				<Style>DialogCommitContainer</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>