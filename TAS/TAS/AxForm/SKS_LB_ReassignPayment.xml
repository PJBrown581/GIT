<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>SKS_LB_ReassignPayment</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class SKS_LB_ReassignPayment extends FormRun
{
    SKS_LB_JournalAR gJournalAR;
    CustTable gCustTable;
    DirPartyTable lDirPartytable;
    int64 recID[];
    str dimStr[];
    CustVendAC  oldAcct;
    CustVendAC  newAcct;
    boolean ledgerFlag;

}
]]></Source>
			</Method>
			<Method>
				<Name>enabledisable</Name>
				<Source><![CDATA[
    void enabledisable()
    {
        customercompany.text(curExt());
        if(existingpayment.selection() == SKS_LB_UseExisting::Existing)
        {
            customercompany.enabled(false);
            customeraccount.text('');
            customeraccount.enabled(false);
            existingpaymentsgrid.visible(true);
        }
        else if(existingpayment.selection() == SKS_LB_UseExisting::New)
        {
            if(SKS_LB_Bank::find(gJournalAR.BankAcct, gJournalAR.FormatID).LBRestrictCrossCompanySearch)
            {
                customercompany.enabled(false);
            }
            else
            {
                customercompany.enabled(true);
                customercompany.text(gJournalAR.dataAreaId);
            }
            customeraccount.enabled(true);
            existingpaymentsgrid.visible(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        super(); 
       
        if (element.args().dataset() != tablenum(SKS_LB_JournalAR))
        {
            throw error("@SYS96590");
        }
            
        gJournalAR = element.args().record();  

        if(gJournalAR.isDED == NoYes::Yes)
        {
            existingpayment.selection(SKS_LB_UseExisting::New);
        }
       
        if(gJournalAR.IsTransferredToLedger)
        {
            XferAmount.realValue(gJournalAR.PmtAmountCur);    
        }
        else
        {
            XferAmount.realValue(gJournalAR.PmtAmountCur - gJournalAR.ActualSettleAmountCur);
        }

        element.EnableDisable();
        ledgerFlag = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>InitTransferRecord</Name>
				<Source><![CDATA[
    public SKS_LB_JournalAR InitTransferRecord(SKS_LB_JournalAR _Journalar)
    {
        SKS_PP_Setup        TmpSKS_pp_setup;
        SKS_LB_Bank         TmpSKS_LB_Bank;
        DirPartyTable       DirPartyTable;
        DimensionDefault    custDim;
        _Journalar.CustomerCompany = customercompany.valuestr();
        _Journalar.CustAccount = customerAccount.valueStr();
        select firstonly lbdefaultfromcust, LBDefaultFromJournal, LBUseInvoiceDimensions from TmpSKS_pp_setup;
        select firstonly LBJournalName from TmpSKS_LB_Bank where TmpSKS_LB_Bank.bankaccountID == _Journalar.bankacct && tmpSKS_LB_Bank.LBformatid == _Journalar.formatid;
        if(TmpSKS_pp_setup.LBDefaultFromCust)//call method that merges
        {
            custDim = gCustTable.DefaultDimension;
        }
        else
        {
            custDim = 0;
        }
        _Journalar.DefaultDimension = SKS_LB_Process_IMPORTTEMP_Records::LBDimensionMerge(TmpSKS_pp_setup, 0 , custDim, TmpSKS_LB_Bank.LBJournalName, customercompany.valuestr());
        _Journalar.Party = CustTable::findByCompany(gJournalAR.CustomerCompany, gJournalAR.CustAccount).party;
        select firstOnly Name from DirPartyTable where DirPartyTable.RecId == gJournalAR.Party;
        _Journalar.CustName = DirPartyTable.Name;

        _Journalar.LBSettlementMethod = SKS_LB_Depositor::find(CustomerCompany.valueStr(), CustomerAccount.valueStr(), false).LBSettlementMethod;
        _Journalar.CustTransOpenRecId = 0;
        _Journalar.CustTransRecId = 0;
        _Journalar.Invoice = '';
        _Journalar.ActualSettleAmountCur = 0;
        //_Journalar.IsTransferredToLedger = NoYes::No;       
        _Journalar.CustAccountSugg = '';
        return _Journalar;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshWorkbenchGoodGrid</Name>
				<Source><![CDATA[
    void refreshWorkbenchGoodGrid()
    {
        
        str formCaller;
        formCaller = element.args().caller().toString();
        if(strScan(formCaller,'ReassignPayments',0,strLen(formCaller))>0)
        {
            element.args().caller().RefreshGoodGridOnly();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runXfer</Name>
				<Source><![CDATA[
    boolean runXfer()
    {
        container   tmpCompany;
        SKS_LB_JournalARApplic lJournalarApplic;
        SKS_LB_Deductions       lsks_lb_deductions;
                                                                                      
        //Info(strFmt('%1 - %2', SKS_LB_JournalAR.PmtAmountCur,gJournalAR.PmtAmountCur ));

        if (CustomerAccount.valueStr() != '' ) 
        {
            tmpCompany = [CustomerCompany.valueStr()];
            newAcct =  CustomerAccount.valuestr();
            Select crosscompany:tmpCompany AccountNum, Party from gCustTable where gCustTable.AccountNum == CustomerAccount.valuestr();

            if (!gCustTable)
            {
                // Customer %1 could not be found.
                error(strfmt("@SYS119849",CustomerAccount.valueStr()));
                CustomerAccount.setFocus();
                return false;
            }
        }
        else 
        {
            if(existingpayment.selection() == SKS_LB_UseExisting::Existing)
            {
                newAcct = SKS_LB_JournalAR.custaccount;

                Select crosscompany:tmpCompany AccountNum, Party from gCustTable where gCustTable.AccountNum == newAcct;

                if (!gCustTable)
                {
                    // Customer %1 could not be found.
                    error(strfmt("@SYS119849",CustomerAccount.valueStr()));
                    CustomerAccount.setFocus();
                    return false;
                }
            }
        }


        if (XferAmount.realValue() == 0)
        {
            info("@SKS950");
            XferAmount.setFocus();
            return false;
        }

   
        ttsbegin;          
       
        if(gJournalAR.IsTransferredToLedger)
        {
            oldAcct = LedgerDynamicAccountHelper::getAccountNumberFromDynamicAccount(gJournalAR.LedgerDimension);
            ledgerFlag = true;
        }
        else
        {
            oldAcct = gJournalAR.CustAccount;
        }
                          
        gJournalAR.reread();
        if(existingpayment.selection() == SKS_LB_UseExisting::New)
        {
            if(gJournalAR.PmtAmountCur == XferAmount.realValue())
            {
                select firstonly lsks_lb_deductions where lsks_lb_deductions.JournalARParentRecId == gJournalAR.RecId;
                if(lsks_lb_deductions)
                {
                    if (Box::yesNo("@SKS:SKGDeleteRelatedDed",DialogButton::No, "@SKS352")==DialogButton::yes)
                    {
                        delete_from lsks_lb_deductions where lsks_lb_deductions.JournalARParentRecId == gJournalAR.RecId;
                    }
                    else
                    {
                        return false;
                    }
                }
                gJournalAR = this.InitTransferRecord(gJournalAR);
                delete_from lJournalarApplic where lJournalarApplic.SKS_LB_JournalARRecId == gJournalAR.RecId;
                gJournalAR.update();
            }
            else
            {
                //subtract the amount being reassigned form the current selected record
                gJournalAR.PmtAmountCur -= XferAmount.realValue();
                gJournalAR.PmtWasSplit = NoYes::Yes;
                gJournalAR.write();

                //build the new record
                Amount amount = gJournalAR.PmtAmountCur;

                gJournalAR.PmtAmountCur = SKS_PP_StringFormats::CurrStr2CurrNum(xferamount.valueStr());
                gJournalAR.FileRecord = 0;
                gJournalAR.PmtWasSplit = NoYes::Yes;
                gJournalAR = this.InitTransferRecord(gJournalAR);
                gJournalAR.FeeValue = 0;

                gJournalAR.IsTransferredToLedger = NoYes::No;

                gJournalAR.insert();
            }

            // Payment was added for customer %1
            Info(strfmt("@SKS959",customeraccount.valueStr()));

        }
        else
        {
            // existing customer
            if (SKS_LB_JournalAR)
            {
                //update the record that the amount is being moved to
                SKS_LB_JournalAR.PmtAmountCur += XferAmount.realValue();
                SKS_LB_JournalAR.PmtWasSplit = NoYes::Yes;    
                
                //if(SKS_LB_JournalAR.Description == '')
                //{
                //    SKS_LB_JournalAR.Description = gJournalAR.Description;
                //}
              
                if(gJournalAR.PmtAmountCur == XferAmount.realValue())
                {
                    SKS_LB_JournalAR.IsTransferredToLedger = NoYes::No;      
                }
                else
                {
                    customerAccount.text(gJournalAR.CustAccount);
                    gJournalAR = this.InitTransferRecord(gJournalAR);
                    gJournalAR.update();
                }
                SKS_LB_JournalAR.write();

                if(gJournalAR.PmtAmountCur == XferAmount.realValue())
                {
                    gJournalAR.delete();
                }
                else
                {
                    //update the record that the amount is being moved from
                    gJournalAR.PmtAmountCur -= XferAmount.realValue();
                    gJournalAR.PmtWasSplit = NoYes::Yes;
                    gJournalAR.write();

                    if(gJournalAR.PmtAmountCur == 0)
                    {
                        gJournalAR.delete();
                    }
                }
            }
        }

        ttscommit;

        return true;
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>SKS_LB_JournalAR</Name>
				<Methods>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        public void executeQuery()
        {
            Query locQuery = new Query();
            locQuery.addDataSource(tablenum(SKS_LB_JournalAR));
            locQuery.dataSourceTable(tablenum(SKS_LB_JournalAR)).clearRanges();
            locQuery.allowCrossCompany(false);
            QueryBuildDataSource locQBDS = locQuery.dataSourceTable(tablenum(SKS_LB_JournalAR));

            QueryBuildRange queryBuildRange = locQBDS.addRange(fieldNum(SKS_LB_JournalAR, recID));
            queryBuildRange.value(queryValue(SysQuery::valueNot(gJournalAR.RecId)));
            queryBuildRange = locQBDS.addRange(fieldNum(SKS_LB_JournalAR, CustomerCompany));
            queryBuildRange.value(queryValue(gJournalAR.company()));
            queryBuildRange = locQBDS.addRange(fieldNum(SKS_LB_JournalAR, chkRefNbr));
            queryBuildRange.value(queryValue(gJournalAR.chkrefnbr));
            queryBuildRange = locQBDS.addRange(fieldNum(SKS_LB_JournalAR, JournalId));
            queryBuildRange.value(queryValue(gJournalAR.JournalId));
            queryBuildRange = locQBDS.addRange(fieldNum(SKS_LB_JournalAR, BatchNum));
            queryBuildRange.value(queryValue(gJournalAR.BatchNum));

            queryBuildRange = locQBDS.addRange(fieldNum(SKS_LB_JournalAR, IsTransferredToLedger));
            queryBuildRange.value(queryValue(SysQuery::value(NoYes::No)));

            queryBuildRange = locQBDS.addRange(fieldNum(SKS_LB_JournalAR, PmtAmountCur));
            queryBuildRange.value(strFmt("(PmtAmountCur > %1)", 0));
            //qbr2.value(strFmt("(TransactionAmt >= %1)", queryValue(parmPaymentAmount)));

            this.query(locQuery);
            super();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>ExistingPayment</Name>
				<Type>RadioButton</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();

            element.enabledisable();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>CustomerCompany</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;
            DataArea lDataArea;

            if (this.valueStr() != '')

            {
                Select firstonly ID from lDataArea where lDataArea.ID == this.valuestr();
                if (!lDataArea)
                {
                    info(strfmt("@SYS10666",this.valueStr()));
                    ret=false;
                }
                else
                {
                    ret=true;
                }
            }
            else
            {
                ret=false;
            }

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret = super();

            CustomerAccount.text('');
        
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>CustomerAccount</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            CustTable::lookupCustomer(CustomerAccount, CustomerCompany.valueStr());
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            if (CustomerCompany.valueStr() == '')
            {
                info("@SYS115146");
                ret = false;
            }
            else
            {
                if (this.valueStr() != '')
                {
                    changeCompany(CustomerCompany.valueStr())
                    {
                        Select AccountNum from gCustTable where gCustTable.AccountNum == this.valuestr();
                        if (!gCustTable)
                        {
                            info(strfmt("@SYS119849",this.valueStr()));
                            ret=false;
                        }
                        else
                        {
                            ret=true;
                        }
                    }
                }
            }

            return ret;


        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>XferAmount</Name>
				<Type>Real</Type>
				<Methods>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();


            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>OK</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {   
            SKS_LB_JournalAR    journalAR;               
            SKS_LB_Journal local_LB_Journal;
            SKS_LB_JournalAR lSKS_LB_JournalAR;

            SKS_LB_JournalARErrors  lSKS_LB_JournalARErrors;

            select local_LB_Journal where  local_LB_Journal.JournalID == SKS_LB_JournalAR.JournalID
                && local_LB_Journal.BatchNum == SKS_LB_JournalAR.BatchNum;

            // newacct validation
            while select lSKS_LB_JournalARErrors
                where lSKS_LB_JournalARErrors.JournalId == SKS_LB_JournalAR.JournalID
                    && lSKS_LB_JournalARErrors.BatchNum == SKS_LB_JournalAR.BatchNum 
            {
                SKS_LB_FileFormat sks_lb_fileformat = SKS_LB_FileFormat::find(local_LB_Journal.formatid);
                    
                if(sks_lb_fileformat.FileType == SKS_LB_filetype::BAI2 || sks_lb_fileformat.FileType == SKS_LB_FileType::Symcor)
                {
                    select firstonly lSKS_LB_JournalAR
                         where lSKS_LB_JournalAR.parentrecid == lSKS_LB_JournalARErrors.parentrecid
                            && lSKS_LB_JournalAR.JournalId == local_LB_Journal.JournalID
                            && lSKS_LB_JournalAR.BatchNum == local_LB_Journal.BatchNum;
                }
                else                        
                {
                    select firstonly lSKS_LB_JournalAR
                         where lSKS_LB_JournalAR.ChkRefNbr == lSKS_LB_JournalARErrors.ChkRefNbr
                            && lSKS_LB_JournalAR.JournalId == local_LB_Journal.JournalID
                            && lSKS_LB_JournalAR.BatchNum == local_LB_Journal.BatchNum;
                }


                if (lSKS_LB_JournalAR)
                {
                    error(strfmt("@SKS:SplitLineError", lSKS_LB_JournalAR.CustAccount + "@SYS35673" + lSKS_LB_JournalAR.ChkRefNbr));
                    return;
                }
            }

            // validate amount
            gJournalAR = element.args().record();
            if(gJournalAR.IsTransferredToLedger)
            {
                if(str2Num(XferAmount.valueStr()) > gJournalAR.PmtAmountCur )
                {
                    error("@SKS:PaymentError");
                    return;
                }
            }
            else
            {
                if(str2Num(XferAmount.valueStr()) > (gJournalAR.PmtAmountCur - gJournalAR.ActualSettleAmountCur) )
                {
                    error("@SKS:PaymentError");
                    return;
                }
            }

            if(gJournalAR.PmtAmountCur == XferAmount.realValue())
            {
                ttsbegin;
                select forupdate lSKS_LB_JournalAR where lSKS_LB_JournalAR.RecId == gJournalAR.RecId;
                lSKS_LB_JournalAR.IsTransferredToLedger = NoYes::No;
                lSKS_LB_JournalAR.doUpdate();
                ttscommit;
            }

            if (element.runXfer())
            {
                if(ledgerFlag)
                {
                    info(strfmt("@SKS:MovedToCust", XferAmount.valueStr(), OldAcct, newacct));
                }
                else
                {
                    info(strfmt("@SKS952", XferAmount.valueStr(), OldAcct, newacct));
                }
                element.refreshWorkbenchGoodGrid();
                element.closeOK();  
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Cancel</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            super();

            element.closeCancel();
        }

]]></Source>
					</Method>
					<Method>
						<Name>validateXfer</Name>
						<Source><![CDATA[
        void validateXfer()
        {

        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>SKS_LB_JournalAR</Name>
			<Table>SKS_LB_JournalAR</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>ActualSettleAmountCur</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AresDed</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AssignedTo</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AutoCROffsetLedgerDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AutoCRRev</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AutoCRRevJrnlId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AutoRevLedgerDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AutoRevOffsetLedgerDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankAcct</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BatchNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ChangedPmtAmountCur</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ChkRefNbr</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustAccount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustAccountErr</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustAccountSugg</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustBankAccountNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustBankRegNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustomerCompany</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustTransOpenRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustTransRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Description</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DiscApplyAmt</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FeeId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FeeValue</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FileDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Filename</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FileRecord</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FormatID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ImageIdentifierBack</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ImageIdentifierFront</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Invoice</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InvoiceIdErr</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>isDED</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>JournalId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LBCustAccount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LBInvoice</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LBSettlementMethod</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LedgerJournalTransRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LineNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MarkedForApply</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MOP</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OffsetDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OffsetDimensionReference</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ParentJournalARID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ParentRecid</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Party</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PayJrnlDeposit</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymNote</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PendingSettlement</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PmtAmountCur</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PmtWasSplit</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Prepayment</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RefNbrDupe</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReviewStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RevReasonCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SplitPayment</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TrackingInvoices</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>WriteOff</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@SKS946</Caption>
		<DialogSize xmlns="">Medium</DialogSize>
		<Pattern xmlns="">Dialog</Pattern>
		<PatternVersion xmlns="">1.2</PatternVersion>
		<Style xmlns="">Dialog</Style>
		<WindowType xmlns="">Popup</WindowType>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>FilterGrp</Name>
				<ElementPosition>715827882</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Pattern>FieldsFieldGroups</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormRadioButtonControl">
						<Name>ExistingPayment</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>613566756</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HelpText>@SKS3228</HelpText>
						<Type>RadioButton</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Columns>2</Columns>
						<EnumType>SKS_LB_UseExisting</EnumType>
						<Items />
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>CustomerCompany</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ConfigurationKey>SKS_PositivePay</ConfigurationKey>
						<ElementPosition>920350134</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<ExtendedDataType>SelectableDataArea</ExtendedDataType>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>CustomerAccount</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ConfigurationKey>SKS_PositivePay</ConfigurationKey>
						<ElementPosition>1227133512</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<ExtendedDataType>CustAccount</ExtendedDataType>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormRealControl">
						<Name>XferAmount</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1533916890</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Real</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<ExtendedDataType>AmountCur</ExtendedDataType>
						<NoOfDecimals>-1</NoOfDecimals>
					</AxFormControl>
				</Controls>
				<ColumnsMode>Fill</ColumnsMode>
				<FrameType>None</FrameType>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>GridGrp</Name>
				<HeightMode>SizeToAvailable</HeightMode>
				<Pattern>ToolbarList</Pattern>
				<PatternVersion>1.2</PatternVersion>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>CustomFilterGroup</Name>
						<Pattern>CustomFilters</Pattern>
						<PatternVersion>1.1</PatternVersion>
						<Type>Group</Type>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl>
								<Name>QuickFilterControl</Name>
								<FormControlExtension>
									<Name>QuickFilterControl</Name>
									<ExtensionComponents />
									<ExtensionProperties>
										<AxFormControlExtensionProperty>
											<Name>targetControlName</Name>
											<Type>String</Type>
											<Value>ExistingPaymentsGrid</Value>
										</AxFormControlExtensionProperty>
										<AxFormControlExtensionProperty>
											<Name>defaultColumnName</Name>
											<Type>String</Type>
										</AxFormControlExtensionProperty>
										<AxFormControlExtensionProperty>
											<Name>placeholderText</Name>
											<Type>String</Type>
										</AxFormControlExtensionProperty>
									</ExtensionProperties>
								</FormControlExtension>
							</AxFormControl>
						</Controls>
						<ArrangeMethod>HorizontalLeft</ArrangeMethod>
						<FrameType>None</FrameType>
						<Style>CustomFilter</Style>
						<ViewEditMode>Edit</ViewEditMode>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGridControl">
						<Name>ExistingPaymentsGrid</Name>
						<AllowEdit>No</AllowEdit>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1840700268</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Grid</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>SKS_LB_JournalAR_CustomerCompany</Name>
								<ElementPosition>613566756</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataField>CustomerCompany</DataField>
								<DataSource>SKS_LB_JournalAR</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>SKS_LB_JournalAR_CustAccount</Name>
								<ElementPosition>920350134</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataField>CustAccount</DataField>
								<DataSource>SKS_LB_JournalAR</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>SKS_LB_JournalAR_ChkRefNbr</Name>
								<ElementPosition>1227133512</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataField>ChkRefNbr</DataField>
								<DataSource>SKS_LB_JournalAR</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormRealControl">
								<Name>SKS_LB_JournalAR_PmtAmountCur</Name>
								<ElementPosition>1533916890</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>Real</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataField>PmtAmountCur</DataField>
								<DataSource>SKS_LB_JournalAR</DataSource>
								<NoOfDecimals>-1</NoOfDecimals>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>SKS_LB_JournalAR_Invoice</Name>
								<ElementPosition>1840700268</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataField>Invoice</DataField>
								<DataSource>SKS_LB_JournalAR</DataSource>
							</AxFormControl>
						</Controls>
						<DataSource>SKS_LB_JournalAR</DataSource>
						<MultiSelect>No</MultiSelect>
						<ShowRowLabels>No</ShowRowLabels>
					</AxFormControl>
				</Controls>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonGroupControl">
				<Name>ButtonGroup</Name>
				<ElementPosition>1431655764</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<LeftMode>Center</LeftMode>
				<Type>ButtonGroup</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormButtonControl">
						<Name>OK</Name>
						<ElementPosition>1073741822</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<HelpText>@SKS717</HelpText>
						<Skip>Yes</Skip>
						<Type>Button</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Text>@SYS5473</Text>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormButtonControl">
						<Name>Cancel</Name>
						<ElementPosition>1610612733</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<HelpText>@SKS953</HelpText>
						<Skip>Yes</Skip>
						<Type>Button</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Text>@SYS50163</Text>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalRight</ArrangeMethod>
				<Style>DialogCommitContainer</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>