<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>SKS_BR_SplitTrans</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class SKS_BR_SplitTrans extends FormRun
{
    BankAccountTrans    gBankAccountTrans;

}
]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        super();

        gBankAccountTrans = element.args().record();

        element.updateOriginalAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOriginalAmount</Name>
				<Source><![CDATA[
    private Amount getOriginalAmount()
    {
        Amount ret;

        if (AmountType.selection() == SKS_CCR_BankTransAmountType::TranCurrencyAmount)
        {
            ret = gBankAccountTrans.BankTransAmountCur;
        }
        else if (AmountType.selection() == SKS_CCR_BankTransAmountType::TranAmount)
        {
            ret = gBankAccountTrans.AmountCur;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateOriginalAmount</Name>
				<Source><![CDATA[
    private void updateOriginalAmount()
    {
        OriginalAmt.realvalue(element.getOriginalAmount() - SplitAmt.realValue());
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSplit</Name>
				<Source><![CDATA[
    private boolean validateSplit()
    {
        boolean ret = true;

        if (ret
            && SplitAmt.realValue() == 0)
        {
            ret = checkFailed("@SKS:BRSplitTransAmountZeroError");
        }

        if (ret)
        {
            Amount originalAmount = element.getOriginalAmount();
            if (!((originalAmount > 0 && SplitAmt.realValue() > 0)
                   || (originalAmount < 0 && SplitAmt.realValue() < 0)))
            {
                ret = checkFailed("@SKS:BRSplitTransAmountSignError");
            }
        }

        if (ret
            && abs(SplitAmt.realValue()) > abs(element.getOriginalAmount()))
        {
            ret = checkFailed("@SKS:BRSplitTransAmountGreaterError");
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="" />
		<DataControls xmlns="">
			<Control>
				<Name>AmountType</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret = super();

            element.updateOriginalAmount();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SplitAmt</Name>
				<Type>Real</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret = super();

            element.updateOriginalAmount();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>FormCommandButtonControl1</Name>
				<Type>CommandButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            if (!element.validateSplit())
            {
                throw Exception::Error;
            }

            BankAccountTrans    NewBankAccountTrans;
            CurrencyExchangeHelper locCurrencyExchangeHelper;
            SKS_CCR_BankTransAmountType locSKS_CCR_BankTransAmountType;
            str strAmountType = AmountType.valueStr();

            super();
            changecompany(gBankAccountTrans.company())
            {
                locCurrencyExchangeHelper = CurrencyExchangeHelper::construct();
                locCurrencyExchangeHelper.parmExchangeDate(gBankAccountTrans.TransDate);
        
                if(SplitAmt.realValue() != 0)
                {
                    ttsBegin;
                
                    locSKS_CCR_BankTransAmountType = str2Enum(locSKS_CCR_BankTransAmountType, strAmountType);
                    if(locSKS_CCR_BankTransAmountType == SKS_CCR_BankTransAmountType::TranCurrencyAmount)
                    {
                        gBankAccountTrans.AmountCur = locCurrencyExchangeHelper.calculateCurrencyToCurrency(gBankAccountTrans.BankTransCurrencyCode, gBankAccountTrans.CurrencyCode,OriginalAmt.realValue(), true, true);
                        gBankAccountTrans.BankTransAmountCur = OriginalAmt.realValue();
                    }
                    else
                    {
                        gBankAccountTrans.AmountCur = OriginalAmt.realvalue();
                        gBankAccountTrans.BankTransAmountCur = locCurrencyExchangeHelper.calculateCurrencyToCurrency(gBankAccountTrans.CurrencyCode, gBankAccountTrans.BankTransCurrencyCode,OriginalAmt.realValue(), true, true);
                    }

                    gBankAccountTrans.calcAmountMST();
                    gBankAccountTrans.calcAmountReportingCurrency();
                    gBankAccountTrans.update();

                    buf2Buf(gBankAccountTrans, NewBankAccountTrans);

                    NewBankAccountTrans.AmountCorrect = 0;

                    if(locSKS_CCR_BankTransAmountType == SKS_CCR_BankTransAmountType::TranCurrencyAmount)
                    {
                        NewBankAccountTrans.AmountCur = locCurrencyExchangeHelper.calculateCurrencyToCurrency(gBankAccountTrans.BankTransCurrencyCode, gBankAccountTrans.CurrencyCode,SplitAmt.realValue(), true, true);
                        NewBankAccountTrans.BankTransAmountCur = SplitAmt.realValue();
                    }
                    else
                    {
                        NewBankAccountTrans.AmountCur = SplitAmt.realvalue();
                        NewBankAccountTrans.BankTransAmountCur = locCurrencyExchangeHelper.calculateCurrencyToCurrency(gBankAccountTrans.CurrencyCode, gBankAccountTrans.BankTransCurrencyCode,SplitAmt.realValue(), true, true);
                    }
                    NewBankAccountTrans.calcAmountMST();
                    NewBankAccountTrans.calcAmountReportingCurrency();

                    NewBankAccountTrans.insert();
                    ttsCommit;
                }
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources />
	<Design>
		<Caption xmlns="">@SKS6758</Caption>
		<Pattern xmlns="">Dialog</Pattern>
		<PatternVersion xmlns="">1.2</PatternVersion>
		<Style xmlns="">Dialog</Style>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>FormGroupControl1</Name>
				<HeightMode>SizeToAvailable</HeightMode>
				<Pattern>FieldsFieldGroups</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormComboBoxControl">
						<Name>AmountType</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>ComboBox</Type>
						<FormControlExtension
							i:nil="true" />
						<EnumType>SKS_CCR_BankTransAmountType</EnumType>
						<Items />
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormRealControl">
						<Name>OriginalAmt</Name>
						<AllowEdit>No</AllowEdit>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>Real</Type>
						<FormControlExtension
							i:nil="true" />
						<ExtendedDataType>AmountCur</ExtendedDataType>
						<Label>@SYS81979</Label>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormRealControl">
						<Name>SplitAmt</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>Real</Type>
						<FormControlExtension
							i:nil="true" />
						<ExtendedDataType>Amountcur</ExtendedDataType>
						<Label>@SYS4002262</Label>
					</AxFormControl>
				</Controls>
				<ColumnsMode>Fill</ColumnsMode>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonGroupControl">
				<Name>FormButtonGroupControl1</Name>
				<Type>ButtonGroup</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>FormCommandButtonControl1</Name>
						<Type>CommandButton</Type>
						<FormControlExtension
							i:nil="true" />
						<Command>OK</Command>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>FormCommandButtonControl2</Name>
						<Type>CommandButton</Type>
						<FormControlExtension
							i:nil="true" />
						<Command>Cancel</Command>
						<SaveRecord>No</SaveRecord>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalRight</ArrangeMethod>
				<Style>DialogCommitContainer</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>