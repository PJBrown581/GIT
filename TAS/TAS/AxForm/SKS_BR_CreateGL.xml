<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>SKS_BR_CreateGL</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class SKS_BR_CreateGL extends FormRun
{
    SKS_BR_BankTran gSKS_BR_BankTran;
}
]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        ;
    
    
        super();
        gSKS_BR_BankTran = element.args().record();
        if(!gSKS_BR_BankTran)
        {
            throw error("@SYS96590"); //Form cannot be called directly.
    
        }
    
    
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="" />
		<DataControls xmlns="">
			<Control>
				<Name>GLMappingRuleGroupIDs</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            Query                   query = new Query();
            QueryBuildDataSource    queryBuildDataSource;
        
            // Create an instance of SysTableLookup where 'this' is the current form control
            SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(SKS_BR_GLMappingRuleGroup), this);
            ;
            query.allowCrossCompany(true);
        
            // Add fields to be shown in the lookup form
            sysTableLookup.addLookupField(fieldNum(SKS_BR_GLMappingRuleGroup, RuleGroupId));
        
            // Limit and arrange the data selection
            queryBuildDataSource = query.addDataSource(tableNum(SKS_BR_GLMappingRuleGroup));
            sysTableLookup.parmQuery(query);
        
            // Perform the lookup
            sysTableLookup.performFormLookup();
        
            // Don't call super() (commented out in the code)
            //   super()
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>OKButton</Name>
				<Type>CommandButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            SKS_BR_GLProcessing         locSKS_BR_GLProcessing;
            SKS_BR_Parse                locSKS_BR_Parse;
            SKS_PP_Setup                locSKS_PP_Setup;
            SKS_BR_GLMappingRuleGroup   locSKS_BR_GLMappingRuleGroup;
            SKS_BR_ParseRuleId          locParseRuleId;
            SKS_BR_ParsedValue          locParsedValue;
            SKS_BR_BankTran             locSKS_BR_BankTran;
            SKS_BR_ParseRule            locSKS_BR_ParseRule;
            SKS_BR_GLMappingRuleLookup  locSKS_BR_GLMappingRuleLookup
            ;
        
            locSKS_BR_Parse = new SKS_BR_Parse(gSKS_BR_BankTran);
            locSKS_BR_GLProcessing = new SKS_BR_GLProcessing();
            select firstOnly ParseRuleID, GLMatchOrCreate, recid from locSKS_BR_GLMappingRuleGroup where locSKS_BR_GLMappingRuleGroup.RuleGroupId == GLMappingRuleGroupIDs.text();
            if(!locSKS_BR_GLMappingRuleGroup)
            {
                info(strFmt("@SKS3355", GLMappingRuleGroupIDs.text()));
                return;
            }
            locParseRuleId = locSKS_BR_GLMappingRuleGroup.parseRuleId;
            if(!locParseRuleId && locSKS_BR_GLMappingRuleGroup.GLMatchOrCreate == SKS_BR_GLMatchOrCreate::GLMatch)
            {
                info(strFmt("@SKS3356", GLMappingRuleGroupIDs.text()));
                return;
            }
            if(locParseRuleId)
            {
                locSKS_BR_ParseRule = locSKS_BR_Parse.getParseRule(locParseRuleId);
            }
            if(strLen(locSKS_BR_Parse.getErrorText()) > 0)
            {
                info(locSKS_BR_Parse.getErrorText());
                return;
            }
            if(locSKS_BR_ParseRule)
            {
                locParsedValue = locSKS_BR_Parse.parse(locSKS_BR_Parse.getFullString());
            }
            select firstonly BRGLCreationCompany, BRJournalName from locSKS_pp_Setup;
            select firstonly forupdate locSKS_BR_BankTran where locSKS_BR_BankTran.RecId == gSKS_BR_BankTran.recid;
            if(locSKS_BR_ParseRule)
            {
                locSKS_BR_BankTran.ParsedValue = locParsedValue;
                locSKS_BR_BankTran.ParseRuleId = locParseRuleId;
            }
            locSKS_BR_BankTran.GLCreationCompany = locSKS_PP_Setup.BRGLCreationCompany;
            locSKS_BR_BankTran.JournalName = locSKS_PP_Setup.BRJournalName;
            locSKS_BR_BankTran.GLMappingRuleGroupId = GLMappingRuleGroupIDs.text();
            locSKS_BR_BankTran.MatchingRuleGroupId = '';
            if(locSKS_BR_ParseRule)
            {
                locSKS_BR_GLMappingRuleLookup = SKS_BR_GLProcessing::findLookupValue(locSKS_BR_BankTran.GLMappingRuleGroupId, locParsedValue);
            }
            if(locSKS_BR_GLMappingRuleLookup && locSKS_BR_GLMappingRuleLookup.GLMatchOrCreate == SKS_BR_GLMatchOrCreate::GLCreateSweepAndMatchZBA)
            {
                locSKS_BR_BankTran.MatchingRuleGroupId = locSKS_BR_GLMappingRuleLookup.MatchingRuleGroupId;
            }
            if(!locSKS_BR_GLMappingRuleLookup
                && locSKS_BR_GLMappingRuleGroup.GLMatchOrCreate == SKS_BR_GLMatchOrCreate::GLMatch)
            {
                info(strFmt("@SKS3359",GLMappingRuleGroupIDs.text(),  locParseRuleId, locParsedValue));
                return;
            }
            ttsBegin;
            locSKS_BR_BankTran.update();
            locSKS_BR_GLProcessing.setHeaderRecId(locSKS_BR_BankTran.BankHeaderRecId);
            locSKS_BR_GLProcessing.RunFromCreateGLButton(gSKS_BR_BankTran.recid);
            if(locSKS_BR_GLProcessing.getErrorText() != '')
            {
                ttsabort;
                error(locSKS_BR_GLProcessing.getErrorText());
                return;
            }
        
            ttsCommit;
        
            if(AutoPost.checked())
            {
                SKS_BR_ReadFile::postGL(locSKS_BR_BankTran.BankHeaderRecId);
            }
            element.close();
        
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>CancelButton</Name>
				<Type>CommandButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            super();
            element.close();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources />
	<Design>
		<BackgroundColor xmlns="">WindowBackground</BackgroundColor>
		<Caption xmlns="">@SKS519</Caption>
		<DialogSize xmlns="">Medium</DialogSize>
		<Frame xmlns="">Dialog</Frame>
		<HideToolbar xmlns="">Yes</HideToolbar>
		<Pattern xmlns="">Dialog</Pattern>
		<PatternVersion xmlns="">1.2</PatternVersion>
		<Style xmlns="">Dialog</Style>
		<WindowType xmlns="">Popup</WindowType>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>DialogContent</Name>
				<ElementPosition>715827882</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<HeightMode>SizeToAvailable</HeightMode>
				<Pattern>FieldsFieldGroups</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>GLMappingRuleGroupIDs</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1288490187</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HelpText>@SKS3354</HelpText>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Label>@SKS2188</Label>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCheckBoxControl">
						<Name>AutoPost</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1717986916</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HelpText>@SKS2930</HelpText>
						<Type>CheckBox</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Label>@SKS2929</Label>
					</AxFormControl>
				</Controls>
				<ColumnsMode>Fill</ColumnsMode>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonGroupControl">
				<Name>ButtonGroup</Name>
				<ElementPosition>1073741822</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<LeftMode>AutoRight</LeftMode>
				<Type>ButtonGroup</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>OKButton</Name>
						<ElementPosition>1073741822</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Skip>Yes</Skip>
						<Type>CommandButton</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Command>OK</Command>
						<DefaultButton>Yes</DefaultButton>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>CancelButton</Name>
						<ElementPosition>1610612733</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Skip>Yes</Skip>
						<Type>CommandButton</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Command>Cancel</Command>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalRight</ArrangeMethod>
				<Style>DialogCommitContainer</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>