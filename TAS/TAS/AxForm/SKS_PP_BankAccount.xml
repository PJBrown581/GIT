<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>SKS_PP_BankAccount</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
          
[Form]
public class SKS_PP_BankAccount extends FormRun
{
    SKS_PP_Setup sks_pp_setup;
    SKS_EFT_Setup sks_eft_setup;
    NoYes mIsBAI2;
    #define.ValidAnnualPeriod2(11)
    #define.ValidAnnualPeriod1(-1)

          
}
]]></Source>
			</Method>
			<Method>
				<Name>disableAPEFT</Name>
				<Source><![CDATA[
    private void disableAPEFT()
    {
        if(!sks_eft_setup.ModAPEFT)
        {
            SKS_EFT_APBankAccount.enabled(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>disableAREFT</Name>
				<Source><![CDATA[
    private void disableAREFT()
    {
        if(!sks_eft_setup.ModAREFT)
        {
            SKS_EFT_ARBankAccount.enabled(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>disableBankRec</Name>
				<Source><![CDATA[
    private void disableBankRec()
    {
        if(!sks_pp_setup.ModBR)
        {
            // ///////////////    NEVER ADD CODE TO THIS METHOD  \\\\\\\\\\\\\\\\\\\\\\\\\
            // Never add code to this method.  Add any new controls to method setBRControlProperties().
            // Follow the examples there.  Your contol's enable/disable should be set in ONE LINE for the entire FORM.
            // We should NOT have multiple places that set the control's enable property directly
            // the controls here are in the process of being moved to the setBRControlProperties() method.
            Mask1.enabled(false);
            Mask2.enabled(false);
            Mask3.enabled(false);
            Mask4.enabled(false);
            SKS_PP_BankScr_BRInCommID.enabled(false);
            UseEBRSetupDefaults.enabled(false);
            SKS_PP_BankScr_BRFormatID.enabled(false);
            AlternateBankID.enabled(false);
        }
        element.setBRControlProperties(); // <-- Any new BR fields should be placed in this method and follow the codepattern there.
        // ///////////////    NEVER ADD CODE TO THIS METHOD -- See Note at top of this method  \\\\\\\\\\\\\\\\\\\\\\\\\
    }

]]></Source>
			</Method>
			<Method>
				<Name>ccr_disableCCRRec</Name>
				<Source><![CDATA[
    // SKS_FDD_13903
    private void ccr_disableCCRRec()
    {
        if(!sks_pp_setup.ModCCReconciliationExtensions)
        {
            // ///////////////    NEVER ADD CODE TO THIS METHOD  \\\\\\\\\\\\\\\\\\\\\\\\\
            // Never add code to this method.  Add any new controls to method setBRControlProperties().
            // Follow the examples there.  Your contol's enable/disable should be set in ONE LINE for the entire FORM.
            // We should NOT have multiple places that set the control's enable property directly
            // the controls here are in the process of being moved to the setBRControlProperties() method.
            Mask1.enabled(false);
            Mask2.enabled(false);
            Mask3.enabled(false);
            Mask4.enabled(false);
            CCR_FormatID.enabled(false);
            CCR_UseSetupDefaults.enabled(false);
            CCR_InCommID.enabled(false);
            CCR_AlternateBankID.enabled(false);
        }
        element.setCCRControlProperties(); 
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBRControlProperties</Name>
				<Source><![CDATA[
    private void setBRControlProperties()
    {
        //SKS_ElectronicBankAPIChanges
        SKS_BR_FileFormat SKS_BR_FileFormat;

        select firstonly SKS_BR_FileFormat where SKS_BR_FileFormat.FormatID == SKS_PP_BankScr.BRFormatID;

        if (SKS_BR_FileFormat.RecId && SKS_BR_FileFormat.APIFormatType == SKS_EB_APIFormatType::API)
        {
            SKS_PP_BankScr.BRPath = '';//BR Path is not relevant for API and should be blanked.
            SKS_PP_BankScr.BRBankFabricLocation = '';//BR BankFabric location is not relevant for API and should be blanked.
            SKS_PP_BankScr_ds.object(FieldNum(SKS_PP_BANK, BRBankFabricLocation)).visible(false);
            SKS_PP_BankScr_ds.object(FieldNum(SKS_PP_BANK, BRBankFabricLocation)).mandatory(false);
            SKS_PP_BankScr_ds.object(FieldNum(SKS_PP_BANK, BRCreateBankStatements)).allowEdit(false);
            SKS_PP_BankScr_ds.object(FieldNum(SKS_PP_BANK, BRCreateBankStatementsIfNoTrans)).allowEdit(false);
            SKS_PP_BankScr_ds.object(FieldNum(SKS_PP_BANK, BRPath)).visible(false);
            SKS_PP_BankScr_ds.object(FieldNum(SKS_PP_BANK, BRPath)).allowEdit(false);
            SKS_PP_BankScr_ds.object(FieldNum(SKS_PP_BANK, BRPath)).mandatory(false);
            ImportFileSearch.visible(false);
            APIOptionsGroup.visible(true);
		}
        //SKS_ElectronicBankAPIChanges
		else
        {
            // Follow the examples here.  Your contol's enable/disable should be set in ONE LINE for the entire FORM.
            // Buttons and unbound controls can be set directly via their "enabled" property.
            // But, bound controls are to be set using the data source's "allowEdit" property.
            btnRefreshFromSetup.enabled(!SKS_PP_BankScr.BRFromSetup); //Allowed, as buttons are unbound controls.(unbound = not linked to a database field)
            SKS_PP_BankScr_ds.object(FieldNum(SKS_PP_BANK, BRCreateBankStatements)).allowEdit(sks_pp_setup.ModBR && !SKS_PP_BankScr.BRFromSetup); //Allowed.  Bound control set via "allowEdit"
            SKS_PP_BankScr_ds.object(FieldNum(SKS_PP_BANK, BRAutoReconcile)).allowEdit(SKS_PP_Setup.ModBR && !SKS_PP_BankScr.BRFromSetup && SKS_PP_BankScr.BRCreateBankStatements);//Allowed.  Bound control set via "allowEdit"
            SKS_PP_BankScr_ds.object(FieldNum(SKS_PP_BANK, BRInCommID)).allowEdit(!SKS_PP_BankScr.BRFromSetup && sks_pp_setup.BREdition == SKS_BR_Edition::Advanced);//Allowed.  Bound control set via "allowEdit"
            SKS_PP_BankScr_ds.object(FieldNum(SKS_PP_BANK, BRCreateBankStatementsIfNoTrans)).allowEdit(SKS_PP_Setup.ModBR && !SKS_PP_BankScr.BRFromSetup && SKS_PP_BankScr.BRCreateBankStatements);//Allowed.  Bound control set via "allowEdit"
            SKS_PP_BankScr_ds.object(FieldNum(SKS_PP_BANK, BRNotifyStatements)).allowEdit(SKS_PP_Setup.ModBR && !SKS_PP_BankScr.UseeBankRecBankStatementMonitorDefaults && SKS_PP_BankScr.BRCreateBankStatements && SKS_PP_BankScr.BRCreateBankStatementsIfNoTrans);//Allowed.  Bound control set via "allowEdit"
            SKS_PP_BankScr_ds.object(FieldNum(SKS_PP_BANK, BRNotifyMinusDays)).allowEdit(SKS_PP_Setup.ModBR && !SKS_PP_BankScr.UseeBankRecBankStatementMonitorDefaults && SKS_PP_BankScr.BRNotifyStatements);//Allowed.  Bound control set via "allowEdit"
            SKS_PP_BankScr_ds.object(FieldNum(SKS_PP_BANK, BREmail)).allowEdit(SKS_PP_Setup.ModBR && !SKS_PP_BankScr.UseeBankRecBankStatementMonitorDefaults && SKS_PP_BankScr.BRNotifyStatements);//Allowed.  Bound control set via "allowEdit"
            SKS_PP_BankScr_ds.object(FieldNum(SKS_PP_BANK, BRBatchJobId)).allowEdit(SKS_PP_Setup.ModBR && !SKS_PP_BankScr.UseeBankRecBankStatementMonitorDefaults && SKS_PP_BankScr.BRNotifyStatements);//Allowed.  Bound control set via "allowEdit"
            SKS_PP_BankScr_ds.object(FieldNum(SKS_PP_BANK, BRBankHolidayGroupID)).allowEdit(SKS_PP_Setup.ModBR && !SKS_PP_BankScr.UseeBankRecBankStatementMonitorDefaults && SKS_PP_BankScr.BRNotifyStatements);//Allowed.  Bound control set via "allowEdit"
            SKS_PP_BankScr_ds.object(FieldNum(SKS_PP_BANK, BRBankFabricLocation)).allowEdit(SKS_PP_BankScr.CCR_IsCCReconciliation == NoYes::No &&  SKS_PP_Setup.ModBR && SKS_EB_FileStorage.StorageOption_BR == SKS_EB_BankIntegOptWithNoLicense::BankFabricEnumValue && !SKS_PP_BankScr.BRFromSetup);//Allowed.  Bound control set via "allowEdit"
            SKS_PP_BankScr_ds.object(FieldNum(SKS_PP_BANK, BRBankFabricLocation)).visible(SKS_PP_BankScr.CCR_IsCCReconciliation == NoYes::No && SKS_EB_FileStorage.StorageOption_BR == SKS_EB_BankIntegOptWithNoLicense::BankFabricEnumValue);//Visible.  Bound control set via "Visible"
            SKS_PP_BankScr_ds.object(FieldNum(SKS_PP_BANK, BRBankFabricLocation)).mandatory(SKS_PP_Setup.ModBR && SKS_PP_BankScr.CCR_IsCCReconciliation == NoYes::No && SKS_PP_BankScr.CCR_IsCCReconciliation == NoYes::No && SKS_EB_FileStorage.StorageOption_BR == SKS_EB_BankIntegOptWithNoLicense::BankFabricEnumValue && strLen(SKS_PP_BankScr.BRFormatID) > 0);//Visible.  Bound control set via "Visible"
            SKS_PP_BankScr_ds.object(FieldNum(SKS_PP_BANK, BRPath)).allowEdit(SKS_PP_BankScr.CCR_IsCCReconciliation == NoYes::No && SKS_PP_Setup.ModBR && SKS_EB_FileStorage.StorageOption_BR == SKS_EB_BankIntegOptWithNoLicense::FileHubLocalEnumValue && !SKS_PP_BankScr.BRFromSetup);//Allowed.  Bound control set via "allowEdit"
            SKS_PP_BankScr_ds.object(FieldNum(SKS_PP_BANK, BRPath)).visible(SKS_PP_BankScr.CCR_IsCCReconciliation == NoYes::No && SKS_EB_FileStorage.StorageOption_BR == SKS_EB_BankIntegOptWithNoLicense::FileHubLocalEnumValue || SKS_EB_FileStorage.StorageOption_BR == SKS_EB_BankIntegOptWithNoLicense::NotLicensedEnumValue);//Visible.  Bound control set via "Visible"
            SKS_PP_BankScr_ds.object(FieldNum(SKS_PP_BANK, BRPath)).mandatory(SKS_PP_Setup.ModBR && SKS_PP_BankScr.CCR_IsCCReconciliation == NoYes::No && SKS_EB_FileStorage.StorageOption_BR == SKS_EB_BankIntegOptWithNoLicense::FileHubLocalEnumValue && !SKS_PP_BankScr.BRFromSetup && strLen(SKS_PP_BankScr.BRFormatID) > 0);//Allowed.  Bound control set via "allowEdit"
            SKS_PP_BankScr_ds.object(FieldNum(SKS_PP_BANK, BROverrideDecimalPlaces)).allowEdit(SKS_PP_Setup.ModBR && SKS_PP_BankScr.CCR_IsCCReconciliation == NoYes::No && mIsBAI2);//Only appllicable for BAI2 formats, disable for all others
            SKS_PP_BankScr_ds.object(FieldNum(SKS_PP_BANK, BROverrideDecimalPlacesNumberOfDecimalPlaces)).allowEdit(SKS_PP_Setup.ModBR && SKS_PP_BankScr.CCR_IsCCReconciliation == NoYes::No && mIsBAI2 && SKS_PP_BankScr.BROverrideDecimalPlaces == NoYes::Yes);//Only appllicable for BAI2 formats, disable for all others

            ImportFileSearch.visible(true);
            APIOptionsGroup.visible(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>disablePositivePay</Name>
				<Source><![CDATA[
    private void disablePositivePay()
    {
        // ///////////////    NEVER ADD CODE TO THIS METHOD  \\\\\\\\\\\\\\\\\\\\\\\\\
        // Never add code to this method.  Add any new controls to method setBRControlProperties().
        // Follow the examples there.  Your contol's enable/disable should be set in ONE LINE for the entire FORM.
        // We should NOT have multiple places that set the control's enable property directly
        // the controls here are in the process of being moved to the setPPControlProperties() method.
        if(!sks_pp_setup.ModPosPay)
        {
            //Positive Pay
            SetupDefaults.enabled(false);
            SKS_PP_BankScr_CommID.enabled(false);
            DeleteFile.enabled(false);
            Filename.enabled(false);
            HeaderTrailerID.enabled(false);
            AccountInfo.enabled(false);
            PPFormatId.enabled(false);
        }
        element.setPPControlProperties(); // <-- Any new PP fields should be placed in this method and follow the codepattern there.
        // ///////////////    NEVER ADD CODE TO THIS METHOD -- See Note at top of this method  \\\\\\\\\\\\\\\\\\\\\\\\\

    }

]]></Source>
			</Method>
			<Method>
				<Name>setPPControlProperties</Name>
				<Source><![CDATA[
    public void setPPControlProperties()
    {
        // Code pattern: A countrol's property should only appear once.  It's rules should be inside the allowEdit(...)
        //  this control/property combination should not appear anywhere else in the entire form.  call this method to change the property.
        //  See setBRControlProperties() for a better example
        SKS_PP_BankScr_ds.object(FieldNum(SKS_PP_Bank, PPArchive)).allowEdit(sks_pp_setup.ModPosPay);
        SKS_PP_BankScr_ds.object(FieldNum(SKS_PP_BANK, PPArchivePath)).allowEdit(sks_pp_setup.ModPosPay &&  !SKS_PP_BankScr.PPFromSetup && SKS_PP_BankScr.PPArchive && SKS_EB_FileStorage.StorageOption_PP == SKS_EB_BankIntegOptWithNoLicense::FileHubLocalEnumValue);
        SKS_PP_BankScr_ds.object(FieldNum(SKS_PP_BANK, PPArchivePath )).visible(sks_pp_setup.ModPosPay && SKS_EB_FileStorage.StorageOption_PP == SKS_EB_BankIntegOptWithNoLicense::FileHubLocalEnumValue);
        SKS_PP_BankScr_ds.object(FieldNum(SKS_PP_BANK, PPArchivePath)).mandatory(sks_pp_setup.ModPosPay && sks_pp_setup.PPArchive && SKS_EB_FileStorage.StorageOption_PP == SKS_EB_BankIntegOptWithNoLicense::FileHubLocalEnumValue && strLen(SKS_PP_BankScr.PPFormatId) > 0);//Visible.  Bound control set via "Visible"
        SKS_PP_BankScr_ds.object(FieldNum(SKS_PP_BANK, PPBankFabricLocation)).allowEdit(SKS_PP_Setup.ModPosPay && SKS_EB_FileStorage.StorageOption_PP == SKS_EB_BankIntegOptWithNoLicense::BankFabricEnumValue && !SKS_PP_BankScr.PPFromSetup);//Allowed.  Bound control set via "allowEdit"
        SKS_PP_BankScr_ds.object(FieldNum(SKS_PP_BANK, PPBankFabricLocation)).visible(SKS_PP_Setup.ModPosPay && SKS_EB_FileStorage.StorageOption_PP == SKS_EB_BankIntegOptWithNoLicense::BankFabricEnumValue);//Visible.  Bound control set via "Visible"
        SKS_PP_BankScr_ds.object(FieldNum(SKS_PP_BANK, PPBankFabricLocation)).mandatory(sks_pp_setup.ModPosPay && SKS_EB_FileStorage.StorageOption_PP == SKS_EB_BankIntegOptWithNoLicense::BankFabricEnumValue && strLen(SKS_PP_BankScr.PPFormatId) > 0);//Visible.  Bound control set via "Visible"
        SKS_PP_BankScr_ds.object(FieldNum(SKS_PP_BANK, PPPath)).allowEdit(SKS_PP_Setup.ModPosPay && SKS_EB_FileStorage.StorageOption_PP == SKS_EB_BankIntegOptWithNoLicense::FileHubLocalEnumValue && !SKS_PP_BankScr.PPFromSetup);//Allowed.  Bound control set via "allowEdit"
        SKS_PP_BankScr_ds.object(FieldNum(SKS_PP_BANK, PPPath)).visible(SKS_PP_Setup.ModPosPay && SKS_EB_FileStorage.StorageOption_PP == SKS_EB_BankIntegOptWithNoLicense::FileHubLocalEnumValue || SKS_EB_FileStorage.StorageOption_PP == SKS_EB_BankIntegOptWithNoLicense::NotLicensedEnumValue);//Visible.  Bound control set via "Visible"
        SKS_PP_BankScr_ds.object(FieldNum(SKS_PP_BANK, PPPath)).mandatory(sks_pp_setup.ModPosPay && SKS_EB_FileStorage.StorageOption_PP == SKS_EB_BankIntegOptWithNoLicense::FileHubLocalEnumValue && strLen(SKS_PP_BankScr.PPFormatId) > 0);//Visible.  Bound control set via "Visible"

        SKS_PP_BankScr_ds.object(FieldNum(SKS_PP_BANK, PPFileName)).visible(SKS_EB_FileStorage.StorageOption_PP == SKS_EB_BankIntegOptWithNoLicense::FileHubLocalEnumValue || SKS_EB_FileStorage.StorageOption_PP == SKS_EB_BankIntegOptWithNoLicense::NotLicensedEnumValue);   // 17274
    }

]]></Source>
			</Method>
			<Method>
				<Name>enablelockboxbutton</Name>
				<Source><![CDATA[
    void enablelockboxbutton()
    {
        if (sks_pp_setup.ModLockbox == NoYes::Yes)
        {
            SKS_LB_bank.enabled(true);
        }
        else
        {
            SKS_LB_bank.enabled(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCCRControlProperties</Name>
				<Source><![CDATA[
    private void setCCRControlProperties()
    {
        SKS_PP_BankScr_ds.object(FieldNum(SKS_PP_BANK, CCR_AutoReconcile)).allowEdit(SKS_PP_Setup.ModCCReconciliationExtensions && !SKS_PP_BankScr.CCR_FromSetup);//Allowed.  Bound control set via "allowEdit"
        SKS_PP_BankScr_ds.object(FieldNum(SKS_PP_BANK, CCR_InCommID)).allowEdit(!SKS_PP_BankScr.CCR_FromSetup && SKS_PP_Setup.ModCCReconciliationExtensions);//Allowed.  Bound control set via "allowEdit"
        SKS_PP_BankScr_ds.object(FieldNum(SKS_PP_BANK, CCR_BankFabricLocation)).allowEdit(SKS_PP_BankScr.CCR_IsCCReconciliation == NoYes::Yes && !SKS_PP_BankScr.CCR_FromSetup && SKS_PP_Setup.ModCCReconciliationExtensions && SKS_EB_FileStorage.StorageOption_CCR == SKS_EB_BankIntegOptWithNoLicense::BankFabricEnumValue);//Allowed.  Bound control set via "allowEdit"
        SKS_PP_BankScr_ds.object(FieldNum(SKS_PP_BANK, CCR_BankFabricLocation)).visible(SKS_PP_BankScr.CCR_IsCCReconciliation == NoYes::Yes && SKS_EB_FileStorage.StorageOption_CCR == SKS_EB_BankIntegOptWithNoLicense::BankFabricEnumValue);//Bound control set via "Visible"
        SKS_PP_BankScr_ds.object(FieldNum(SKS_PP_BANK, CCR_BankFabricLocation)).mandatory(SKS_PP_Setup.ModCCReconciliationExtensions && SKS_PP_BankScr.CCR_IsCCReconciliation == NoYes::Yes && SKS_EB_FileStorage.StorageOption_CCR == SKS_EB_BankIntegOptWithNoLicense::BankFabricEnumValue && strLen(SKS_PP_BankScr.CCR_FormatID) > 0);//Mandatory.  Bound control set via "Mandatory"
        SKS_PP_BankScr_ds.object(FieldNum(SKS_PP_BANK, CCR_Path)).allowEdit(SKS_PP_BankScr.CCR_IsCCReconciliation == NoYes::Yes && !SKS_PP_BankScr.CCR_FromSetup && SKS_PP_Setup.ModCCReconciliationExtensions && SKS_EB_FileStorage.StorageOption_CCR == SKS_EB_BankIntegOptWithNoLicense::FileHubLocalEnumValue);//bound control enabled if Filehub is selected.  Disabled for BankFabric and not licensed.
        SKS_PP_BankScr_ds.object(FieldNum(SKS_PP_BANK, CCR_Path)).visible(SKS_PP_BankScr.CCR_IsCCReconciliation == NoYes::Yes && SKS_EB_FileStorage.StorageOption_CCR != SKS_EB_BankIntegOptWithNoLicense::BankFabricEnumValue); //Bound control set via "Visible" if Not licensed or is FileHub
        SKS_PP_BankScr_ds.object(FieldNum(SKS_PP_BANK, CCR_Path)).mandatory(SKS_PP_Setup.ModCCReconciliationExtensions && SKS_EB_FileStorage.StorageOption_CCR == SKS_EB_BankIntegOptWithNoLicense::FileHubLocalEnumValue && strLen(SKS_PP_BankScr.CCR_FormatId) > 0);//bound control enabled if Filehub is selected.  Disabled for BankFabric and not licensed.
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        SKS_PP_Sys   SKS_PP_Sys;
        ;

        super();

        SKS_PP_Sys = new SKS_PP_Sys();

        if ( !SKS_PP_Sys.ValidateSetup(this.name()))
        {
            this.close();
        }

        select * from sks_pp_setup;
        select * from sks_eft_setup;

        element.disableBankRec();
        element.ccr_disableCCRRec();// SKS_FDD_13903
        element.disablePositivePay();
        element.disableAPEFT();
        element.disableAREFT();
        AttachmentPrompt.text("@SKS:SKGBankAttachName");
        element.enableTASParameter();// FDD9652 Day end process
        element.enableOverdraftTASParameter(); // FDD 9848 OD InterestCalculation

    }

]]></Source>
			</Method>
			<Method>
				<Name>enableTASParameter</Name>
				<Source><![CDATA[
    /// <summary>
    /// FDD9652 enable/disable of setup fields
    /// </summary>
    /// <param name = "_delRecord"></param>
    void enableTASParameter()
    {
        if (SKS_PP_BankScr.IHB_UseTASSetupDefault)
        {
            element.loadDefaultTASBankStmtSetup();
            InhouseBankAccountSetup.enabled(false);
        }
        else
        {
            InhouseBankAccountSetup.enabled(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadDefaultTASBankStmtSetup</Name>
				<Source><![CDATA[
    /// <summary>
    /// FDD9652 load od default values from TAS setup.
    /// </summary>
    void loadDefaultTASBankStmtSetup()
    {
        SKS_PP_Setup      inhouseTASBankSetup;

        inhouseTASBankSetup = SKS_PP_Setup::find();

        SKS_PP_BankScr.IHB_Format                               = inhouseTASBankSetup.IHB_format;
        SKS_PP_BankScr.IHB_InhouseBankTransactionTypeMappingId  = inhouseTASBankSetup.IHB_InhouseBankTransactionTypeMappingId;
        SKS_PP_BankScr.IHB_AttachFileName                       = inhouseTASBankSetup.IHB_AttachFileName;
        SKS_PP_BankScr.IHB_AttachTemplate                       = inhouseTASBankSetup.IHB_AttachTemplate;
        SKS_PP_BankScr.IHB_SendEmail                            = inhouseTASBankSetup.IHB_SendEmail;
        SKS_PP_BankScr.IHB_FileType                             = inhouseTASBankSetup.IHB_FileType;
        SKS_PP_BankScr.IHB_TemplateLanguage                     = inhouseTASBankSetup.IHB_TemplateLanguage;
        SKS_PP_BankScr.IHB_ReplyToEmail                         = inhouseTASBankSetup.IHB_ReplyToEmail;
        SKS_PP_BankScr.IHB_ReplyToName                          = inhouseTASBankSetup.IHB_ReplyToName;
        SKS_PP_BankScr.IHB_CreateFile                           = inhouseTASBankSetup.IHB_CreateFile;
        SKS_PP_BankScr.IHB_FilePath                             = inhouseTASBankSetup.IHB_FilePath;
        SKS_PP_BankScr.IHB_UseTASSetupDefault                   = true;
        SKS_PP_BankScr.IHB_BankHolidayGroupId                   = inhouseTASBankSetup.IHB_BankHolidayGroupID; //9812 CR
        SKS_PP_BankScr.IHBBankFabricLocation                    = inhouseTASBankSetup.IHBBankFabricLocation;
        SKS_PP_BankScr.IHBInterestBankFabricLocation            = inhouseTASBankSetup.IHBInterestBankFabricLocation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadDefaultTASBankStmtSetupActive</Name>
				<Source><![CDATA[
    /// <summary>
    /// FDD9652 load od default values from TAS setup in DS active event.
    /// </summary>
    void loadDefaultTASBankStmtSetupActive()
    {
        SKS_PP_Setup      inhouseTASBankSetup;

        inhouseTASBankSetup = SKS_PP_Setup::find();

        if (element.defaultTASParm())
        {
            SKS_PP_BankScr.IHB_Format                               = inhouseTASBankSetup.IHB_format;
            SKS_PP_BankScr.IHB_InhouseBankTransactionTypeMappingId  = inhouseTASBankSetup.IHB_InhouseBankTransactionTypeMappingId;
            SKS_PP_BankScr.IHB_AttachFileName                       = inhouseTASBankSetup.IHB_AttachFileName;
            SKS_PP_BankScr.IHB_AttachTemplate                       = inhouseTASBankSetup.IHB_AttachTemplate;
            SKS_PP_BankScr.IHB_SendEmail                            = inhouseTASBankSetup.IHB_SendEmail;
            SKS_PP_BankScr.IHB_FileType                             = inhouseTASBankSetup.IHB_FileType;
            SKS_PP_BankScr.IHB_TemplateLanguage                     = inhouseTASBankSetup.IHB_TemplateLanguage;
            SKS_PP_BankScr.IHB_ReplyToEmail                         = inhouseTASBankSetup.IHB_ReplyToEmail;
            SKS_PP_BankScr.IHB_ReplyToName                          = inhouseTASBankSetup.IHB_ReplyToName;
            SKS_PP_BankScr.IHB_CreateFile                           = inhouseTASBankSetup.IHB_CreateFile;
            SKS_PP_BankScr.IHB_FilePath                             = inhouseTASBankSetup.IHB_FilePath;
            SKS_PP_BankScr.IHB_UseTASSetupDefault                   = true;
            SKS_PP_BankScr.IHB_BankHolidayGroupId                   = inhouseTASBankSetup.IHB_BankHolidayGroupID; //9812 CR
            SKS_PP_BankScr.IHBBankFabricLocation                    = inhouseTASBankSetup.IHBBankFabricLocation;
        }
        element.enableTASParameter();
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultTASParm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if data not defaulted from TAS setup.
    /// </summary>
    /// <returns></returns>
    boolean defaultTASParm()
    {
        boolean     result = NoYes::No;

        if (SKS_PP_BankScr_ds.object(fieldNum(SKS_PP_Bank, IHB_InhouseBankTransactionTypeMappingId)).getValue() == '' &&
            SKS_PP_BankScr_ds.object(fieldNum(SKS_PP_Bank, IHB_AttachFileName)).getValue() == '' &&
            SKS_PP_BankScr_ds.object(fieldNum(SKS_PP_Bank, IHB_SendEmail)).getValue() == NoYes::No &&
            SKS_PP_BankScr_ds.object(fieldNum(SKS_PP_Bank, IHB_TemplateLanguage)).getValue() == '' &&
            SKS_PP_BankScr_ds.object(fieldNum(SKS_PP_Bank, IHB_ReplyToEmail)).getValue() == '' &&
            SKS_PP_BankScr_ds.object(fieldNum(SKS_PP_Bank, IHB_ReplyToName)).getValue() == '' &&
            SKS_PP_BankScr_ds.object(fieldNum(SKS_PP_Bank, IHB_CreateFile)).getValue() == NoYes::No &&
            SKS_PP_BankScr_ds.object(fieldNum(SKS_PP_Bank, IHB_FilePath)).getValue() == '' &&
            SKS_PP_BankScr_ds.object(fieldNum(SKS_PP_Bank, IHBBankFabricLocation)).getValue() == '' &&
            SKS_PP_BankScr_ds.object(fieldNum(SKS_PP_Bank, IHB_BankHolidayGroupID)).getValue() == '') //9812 CR
        {
            result = NoYes::Yes;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>disableTASParameterField</Name>
				<Source><![CDATA[
    /// <summary>
    /// FDD9652 Disable/enable fields.
    /// </summary>
    void disableTASParameterField()
    {
        InhouseBankAccountSetup_IHB_InhouseBankTransactionTypeMappingId.enabled(false);
        InhouseBankAccountSetup_IHB_AttachFileName.enabled(false);
        InhouseBankAccountSetup_IHB_SendEmail.enabled(false);
        InhouseBankAccountSetup_IHB_AttachTemplate.enabled(false);
        InhouseBankAccountSetup_IHB_TemplateLanguage.enabled(false);
        InhouseBankAccountSetup_IHB_ReplyToEmail.enabled(false);
        InhouseBankAccountSetup_IHB_ReplyToName.enabled(false);
        InhouseBankAccountSetup_IHB_CreateFile.enabled(false);
        InhouseBankAccountSetup_IHB_FilePath.enabled(false);
        InhouseBankAccountSetup_IHBBankFabricLocation.enabled(false);
        InhouseBankAccountSetup_IHB_FileType.enabled(false);
        InhouseBankAccountSetup_IHB_BankHolidayGroupId.enabled(false); //9812 CR
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPPNumeric</Name>
				<Source><![CDATA[
    Public boolean isPPNumeric(str strValue)
    {
        Boolean   xppBool;
        System.Boolean netBool;
        Str matchPattern = '^[0-9]*$';
        System.Text.RegularExpressions.Match myMatch;
        new InteropPermission(InteropKind::ClrInterop).assert();
        myMatch = System.Text.RegularExpressions.Regex::Match(strValue,matchPattern);
        netBool = myMatch.get_Success();
        xppBool = netBool;
        CodeAccessPermission::revertAssert();
        Return xppBool;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadFromSetup</Name>
				<Source><![CDATA[
    void loadFromSetup()
    {
        ;

        SKS_PP_BankScr.PPPath = sks_pp_setup.PPPath;
        SKS_PP_BankScr.PPBankFabricLocation = sks_pp_setup.PPBankFabricLocation;
        SKS_PP_BankScr.PPHeadTrailId = sks_pp_setup.PPHeadTrailID;
        SKS_PP_BankScr.PPFileName = sks_pp_setup.PPFileName;
        SKS_PP_BankScr.PPDelete = sks_pp_setup.PPDelete;
        SKS_PP_BankScr.PPCommType = sks_pp_setup.PPCommType;
        SKS_PP_Bankscr.PPCommUserProg = sks_pp_setup.PPCommUserProg;
        SKS_PP_BankScr.PPOutCommID = sks_pp_setup.PPOutCommID;
        SKS_PP_BankScr.PPOutServerSideFileProc = sks_pp_setup.PPOutServerSideFileProc;
        SKS_PP_BankScr.PPArchivePath = sks_pp_setup.PPPathArchive;
        SKS_PP_BankScr.PPArchive = sks_pp_setup.PPArchive;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadEMailFromSetup</Name>
				<Source><![CDATA[
    void loadEMailFromSetup()
    {
        SKS_PP_BankScr.IHB_Remit = sks_eft_setup.IHB_Remit;
        SKS_PP_BankScr.APEMReplytoName = sks_eft_setup.APEMReplytoName;
        SKS_PP_BankScr.APEMReplyToAddr = sks_eft_setup.APEMReplyToAddr;
        SKS_PP_BankScr.APEMAttachmentName = sks_eft_setup.APEMAttachmentName;
        SKS_PP_BankScr.APEMCompanyName = sks_eft_setup.APEMCompanyName;
        SKS_PP_BankScr.APEMTemplateAttach = sks_eft_setup.APEMTemplateAttach;
        SKS_PP_BankScr.APEMTemplateNoAttach = sks_eft_setup.APEMTemplateNoAttach;
        SKS_PP_BankScr.APEMTemplateLanguage = sks_eft_setup.APEMTemplateLanguage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>PPFormatIdLookup</Name>
				<Source><![CDATA[
    public void PPFormatIdLookup(FormControl callingControl)
    {

        Query                   query          = new Query();
        QueryBuildDataSource    queryBuildDataSource;
        QueryBuildRange         queryBuildRange;

        // Create an instance of SysTableLookup where 'this'
        // is the current form control.
        SysTableLookup sysTableLookup =
            SysTableLookup::newParameters(tableNum(SKS_PP_FileFormat), callingControl);
        ;

        // Add fields to be shown in the lookup form.
        sysTableLookup.addLookupField(fieldNum(SKS_PP_FileFormat, FormatID));
        sysTableLookup.addLookupField(fieldNum(SKS_PP_FileFormat, Descr));

        // Limit and arrange the data selection.
        queryBuildDataSource = query.addDataSource(tableNum(SKS_PP_FileFormat));
        queryBuildRange = queryBuildDataSource.addRange(
            fieldNum(SKS_PP_FileFormat, Selected));
        queryBuildRange.value('1');
        sysTableLookup.parmQuery(query);

        // Perform the lookup.
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshFromBRSetup</Name>
				<Source><![CDATA[
    void refreshFromBRSetup()
    {
        SKS_BR_FileFormat locSKS_BR_FileFormat;

        select firstonly APIFormatType from locSKS_BR_FileFormat where locSKS_BR_FileFormat.FormatID == SKS_PP_BankScr.BRFormatID;
        SKS_PP_BankScr.BRPath = locSKS_BR_FileFormat.APIFormatType == SKS_EB_APIFormatType::API ? '' : SKS_PP_Setup.BRPath; //BRPath is not relevant for API Formats
        SKS_PP_BankScr.BRAutoReconcile = SKS_PP_Setup.BRAutoReconcile;
        SKS_PP_BankScr.BRCreateBankStatements = SKS_PP_Setup.BRCreateBankStatements;
        SKS_PP_BankScr.BRInCommID = SKS_PP_Setup.BRInCommID;
        SKS_PP_BankScr.BRCreateBankStatementsIfNoTrans = SKS_PP_Setup.BRCreateBankStatementsIfNoTrans;
        SKS_PP_BankScr.BRBankFabricLocation = locSKS_BR_FileFormat.APIFormatType == SKS_EB_APIFormatType::API ? '' : SKS_PP_Setup.BRBankFabricLocation;//BR BankFabic location is not relevant for API Formats
    }

]]></Source>
			</Method>
			<Method>
				<Name>ccr_refreshFromCCRSetup</Name>
				<Source><![CDATA[
    ///<summary>
    /// SKS_FDD_13903 - To fresh the setup from CCR module
    ///</summary>
    void ccr_refreshFromCCRSetup()
    {
        SKS_PP_BankScr.CCR_Path = SKS_PP_Setup.CCRPath;
        SKS_PP_BankScr.CCR_AutoReconcile = SKS_PP_Setup.CCRAutoReconcile;
        SKS_PP_BankScr.CCR_InCommID = SKS_PP_Setup.CCRInCommID;
        SKS_PP_BankScr.CCR_BankFabricLocation = SKS_PP_Setup.CCRBankFabricLocation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reloadFormatID</Name>
				<Source><![CDATA[
    Public void reloadFormatID()
    {
        BankName.text(BankAccountSrc.Name);
        BankTransit.text(BankAccountSrc.RegistrationNum);
        BankAccountNum.text(BankAccountSrc.AccountNum);

        Select SKS_PP_FileFormatSrc where SKS_PP_FileFormatSrc.FormatId == SKS_PP_BankScr.PPFormatId;
        PPFormatDesc.text(SKS_PP_FileFormatSrc.Descr);

        if (strRTrim(SKS_PP_FileFormatSrc.BankPP01Descr) != '')
        {
            Mask1.visible(true);
            Mask1.enabled(true);
            Mask1.limitText(strLen(strRTrim(SKS_PP_FileFormatSrc.BankPP01Mask)), AutoMode::Fixed);
            Mask1.label(SKS_PP_FileFormatSrc.BankPP01Descr);

        }
        else
        {
            Mask1.visible(false);
            Mask1.enabled(false);

        }

        if (strRTrim(SKS_PP_FileFormatSrc.BankPP02Descr) != '')
        {
            Mask2.visible(true);
            Mask2.enabled(true);
            Mask2.limitText(strLen(strRTrim(SKS_PP_FileFormatSrc.BankPP02Mask)), AutoMode::Fixed);
            Mask2.label(SKS_PP_FileFormatSrc.BankPP02Descr);

        }
        else
        {
            Mask2.visible(false);
            Mask2.enabled(false);

        }

        if (strRTrim(SKS_PP_FileFormatSrc.BankPP03Descr) != '')
        {
            Mask3.visible(true);
            Mask3.enabled(true);
            Mask3.limitText(strLen(strRTrim(SKS_PP_FileFormatSrc.BankPP03Mask)), AutoMode::Fixed);
            Mask3.label(SKS_PP_FileFormatSrc.BankPP03Descr);

        }
        else
        {
            Mask3.visible(false);
            Mask3.enabled(false);

        }

        if (strRTrim(SKS_PP_FileFormatSrc.BankPP04Descr) != '')
        {
            Mask4.visible(true);
            Mask4.enabled(true);
            Mask4.limitText(strLen(strRTrim(SKS_PP_FileFormatSrc.BankPP04Mask)), AutoMode::Fixed);
            Mask4.label(SKS_PP_FileFormatSrc.BankPP04Descr);

        }
        else
        {
            Mask4.visible(false);
            Mask4.enabled(false);

        }


    }

]]></Source>
			</Method>
			<Method>
				<Name>setBRFormatDesc</Name>
				<Source><![CDATA[
    void setBRFormatDesc()
    {
        if(sks_pp_setup.ModBR)
        {
            SKS_BR_FileFormat SKS_BR_FileFormat;

            select firstonly * from SKS_BR_FileFormat where SKS_BR_FileFormat.FormatID == SKS_PP_BankScr.BRFormatID;

            //SKS_ElectronicBankAPIChanges
            if (SKS_BR_FileFormat.RecId && SKS_BR_FileFormat.APIFormatType == SKS_EB_APIFormatType::API)
            {
                SKS_PP_BankScr.BRCreateBankStatements = NoYes::Yes;
                SKS_PP_BankScr.BRCreateBankStatementsIfNoTrans = NoYes::Yes;
			}
            //SKS_ElectronicBankAPIChanges

            SKS_BR_FileFormat_Descr.text(SKS_BR_FileFormat.Descr);

            if(SKS_BR_FileFormat)
            {
                if(SKS_BR_FileFormat.FileType == SKS_BR_FileType::BAI2)
                {
                    mIsBAI2 = NoYes::Yes;
                }
                else
                {
                    mIsBAI2 = NoYes::No;
                    if(SKS_PP_BankScr.BROverrideDecimalPlaces == NoYes::Yes)
                    {
                        SKS_PP_BankScr.BROverrideDecimalPlaces = NoYes::No;
                        SKS_PP_BankScr.BROverrideDecimalPlacesNumberOfDecimalPlaces = 0;
                    }
                }
            }
            
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ccr_setFormatDesc</Name>
				<Source><![CDATA[
    // SKS_FDD_13903
    void ccr_setFormatDesc()
    {
        SKS_BR_FileFormat SKS_BR_FileFormat;
        if(sks_pp_setup.ModCCReconciliationExtensions)
        {
            //select Descr from mSKS_BR_FileFormat where mSKS_BR_FileFormat.FormatID == SKS_PP_BankScr.CCR_FormatID;
            CCR_FormatDescr.text(SKS_BR_FileFormat.Descr);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSetupDefaults</Name>
				<Source><![CDATA[
    Public void validateSetupDefaults()
    {
        // ///////////////    NEVER ADD CODE TO THIS METHOD  \\\\\\\\\\\\\\\\\\\\\\\\\
        // Never add code to this method.  Add any new controls to method setBRControlProperties().
        // Follow the examples there.  Your contol's enable/disable should be set in ONE LINE for the entire FORM.
        // We should NOT have multiple places that set the control's enable property directly
        // the controls here are in the process of being moved to the setPPControlProperties() method.

        if (SKS_PP_BankScr.PPFromSetup == NoYes::Yes)
        {
            DeleteFile.enabled(false);
            HeaderTrailerID.enabled(false);
            RefreshSetup.enabled(false);          
            FileName.enabled(false);
            SKS_PP_BankScr_CommID.enabled(false);
        }
        else
        {
            DeleteFile.enabled(true);
            HeaderTrailerID.enabled(true);
            RefreshSetup.enabled(true);
            FileName.enabled(true);
            SKS_PP_BankScr_CommID.enabled(true);
        }
        element.setPPControlProperties();
        element.setBRControlProperties(); // <-- Any new PP fields should be placed in this method and follow the codepattern there.
        // ///////////////    NEVER ADD CODE TO THIS METHOD -- See Note at top of this method  \\\\\\\\\\\\\\\\\\\\\\\\\
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLinkedIHB</Name>
				<Source><![CDATA[
    //IHB_3.3.21 SKS 9536
    Public void validateLinkedIHB()
    {
        sks_PP_Bank     sks_PP_Bank;
        if (SKS_PP_BankScr.SKS_IHBInhouseBank == NoYes::Yes)
        {
            element.sks_IHBenableInHouseBank();
            if(SKS_PP_BankScr_Linkedinhousebankcompany.valueStr() && SKS_PP_BankScr_Linkedinhousebankaccount.valueStr())
            {
                changecompany(SKS_PP_BankScr_Linkedinhousebankcompany.valueStr())
                {
                    ttsbegin;
                    select firstonly forupdate SKS_IHBLinkedinhousebankcompany, SKS_IHBLinkedinhousebankaccount,
                               BankAccountId,DataAreaId,RecId from sks_PP_Bank
                                where sks_PP_Bank.BankAccountId == SKS_PP_BankScr_Linkedinhousebankaccount.valueStr();

                    sks_PP_Bank.SKS_IHBLinkedinhousebankcompany = sks_PP_Bankscr.DataAreaId;
                    sks_PP_Bank.SKS_IHBLinkedinhousebankaccount = BankAccount.valueStr();
                    element.sks_IHBenableInHouseBank();
                    sks_PP_Bank.update();
                    ttscommit;
                }
            }
        }
        else
        {
            //Check if the same customer company in SwitchBoardExternalVendor form exists or not and throw error based on that
            SKS_IHB_SwitchboardExternalVendor sks_IHB_SwitchboardExternalVendor;
            select firstonly CustomerCompany from sks_IHB_SwitchboardExternalVendor
                    where sks_IHB_SwitchboardExternalVendor.CustomerIHBBank == SKS_PP_BankScr.BankAccountId &&
            sks_IHB_SwitchboardExternalVendor.CustomerCompany == SKS_PP_BankScr.SKS_IHBLinkedinhousebankcompany;

            if(!sks_IHB_SwitchboardExternalVendor) // FDD-18672 - IHB Intercompany netting ERP outside of D365
            {
                element.sks_IHBenableInHouseBank();

                if(SKS_PP_BankScr_Linkedinhousebankcompany.valueStr() && SKS_PP_BankScr_Linkedinhousebankaccount.valueStr())
                {
                    changecompany(SKS_PP_BankScr_Linkedinhousebankcompany.valueStr())
                    {
                        ttsbegin;
                        select firstonly forupdate SKS_IHBLinkedinhousebankcompany, SKS_IHBLinkedinhousebankaccount,
                               BankAccountId,DataAreaId,RecId from sks_PP_Bank
                                where sks_PP_Bank.BankAccountId == SKS_PP_BankScr_Linkedinhousebankaccount.valueStr();

                        sks_PP_Bank.SKS_IHBLinkedinhousebankcompany = '';
                        sks_PP_Bank.SKS_IHBLinkedinhousebankaccount = '';
                        sks_PP_Bank.update();
                        ttscommit;
                    }
                }
                SKS_PP_BankScr.SKS_IHBLinkedinhousebankcompany = '';
                SKS_PP_BankScr.SKS_IHBLinkedinhousebankaccount = '';
                SKS_PP_BankScr_ds.refresh();
            }
            else
            {
                SKS_PP_BankScr_ds.refresh();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sks_IHBenableInHouseBank</Name>
				<Source><![CDATA[
    /// <summary>
    /// IHB_3.3.21 SKS 9536
    /// </summary>
    public void sks_IHBenableInHouseBank()
    {
        if(SKS_PP_BankScr.SKS_IHBInhouseBank == NoYes::Yes && !SKS_PP_BankScr_Linkedinhousebankcompany.valueStr() && !SKS_PP_BankScr_Linkedinhousebankaccount.valueStr())
        {
            SKS_PP_BankScr_Linkedinhousebankcompany.enabled(true);
            SKS_PP_BankScr_Linkedinhousebankaccount.enabled(true);
        }
        else
        {
            SKS_PP_BankScr_Linkedinhousebankcompany.enabled(false);
            SKS_PP_BankScr_Linkedinhousebankaccount.enabled(false);
        }
        //SKS FDD 9615 - start
        if(SKS_PP_BankScr.SKS_IHBInhouseBank == NoYes::Yes)
        {
            IHBRemitEmail.enabled(true);
            InternalContact.enabled(true);
            //Bug 10259 -->
            SKS_PP_BankScr_ds.object(fieldNum(SKS_PP_Bank, IHB_UseTASSetupDefault)).enabled(true);
            SKS_PP_BankScr_ds.object(fieldNum(SKS_PP_Bank, IHB_EmailAddress)).enabled(true);
            //Bug 10259 <--
            //Bug 10302 --->
            IHBInterestCalc.enabled(true);
            //Bug 10302 <---
            // FDD 9848 OD InterestCalculation-->
            IHB_InterestNote.enabled(true);
            SKS_PP_BankScr_ds.object(fieldNum(SKS_PP_Bank, IHB_AppropiationAmount)).enabled(true);
            SKS_PP_BankScr_ds.object(fieldNum(SKS_PP_Bank, IHB_OD_InterestNoteEmailAddress)).enabled(true);
            // FDD 9848 OD InterestCalculation<--
            //SKS_Bug_12317 -->
            if (SKS_PP_BankScr.IHB_InterestCalcMethod == SKS_IHB_InterestCalcMeth::Noncompounded)
            {
                IHBInterestRate_IHB_InterestRepaymentNonCompounded.mandatory(true);
            }
            else
            {
                IHBInterestRate_IHB_InterestRepaymentNonCompounded.mandatory(false);
            }
            //SKS_Bug_12317 <--
        }
        else
        {
            IHBRemitEmail.enabled(false);
            InternalContact.enabled(false);
            //Bug 10259 -->
            SKS_PP_BankScr_ds.object(fieldNum(SKS_PP_Bank, IHB_UseTASSetupDefault)).enabled(false);
            SKS_PP_BankScr_ds.object(fieldNum(SKS_PP_Bank, IHB_EmailAddress)).enabled(false);
            //Bug 10259 <--
            //Bug 10302 --->
            IHBInterestCalc.enabled(false);
            //Bug 10302 <---
            // FDD 9848 OD InterestCalculation-->
            IHB_InterestNote.enabled(false);
            SKS_PP_BankScr_ds.object(fieldNum(SKS_PP_Bank, IHB_AppropiationAmount)).enabled(false);
            SKS_PP_BankScr_ds.object(fieldNum(SKS_PP_Bank, IHB_OD_InterestNoteEmailAddress)).enabled(false);
            // FDD 9848 OD InterestCalculation<--

        }
        //SKS FDD 9615 - end

        SKS_PP_BankScr_ds.object(FieldNum(SKS_PP_BANK, IHBBankFabricLocation)).allowEdit(SKS_EB_FileStorage.StorageOption_IHB == SKS_EB_BankIntegOptWithNoLicense::BankFabricEnumValue);//Allowed.  Bound control set via "allowEdit"
        SKS_PP_BankScr_ds.object(FieldNum(SKS_PP_BANK, IHBBankFabricLocation)).visible(SKS_EB_FileStorage.StorageOption_IHB == SKS_EB_BankIntegOptWithNoLicense::BankFabricEnumValue);//Visible.  Bound control set via "Visible"
        SKS_PP_BankScr_ds.object(FieldNum(SKS_PP_BANK, IHB_FilePath)).allowEdit(SKS_EB_FileStorage.StorageOption_IHB == SKS_EB_BankIntegOptWithNoLicense::FileHubLocalEnumValue);//Allowed.  Bound control set via "allowEdit"
        SKS_PP_BankScr_ds.object(FieldNum(SKS_PP_BANK, IHB_FilePath)).visible(SKS_EB_FileStorage.StorageOption_IHB == SKS_EB_BankIntegOptWithNoLicense::FileHubLocalEnumValue || SKS_EB_FileStorage.StorageOption_BR == SKS_EB_BankIntegOptWithNoLicense::NotLicensedEnumValue);//Visible.  Bound control set via "Visible"

        SKS_PP_BankScr_ds.object(FieldNum(SKS_PP_BANK, IHBInterestBankFabricLocation)).allowEdit(SKS_EB_FileStorage.StorageOption_IHB == SKS_EB_BankIntegOptWithNoLicense::BankFabricEnumValue);//Allowed.  Bound control set via "allowEdit"
        SKS_PP_BankScr_ds.object(FieldNum(SKS_PP_BANK, IHBInterestBankFabricLocation)).visible(SKS_EB_FileStorage.StorageOption_IHB == SKS_EB_BankIntegOptWithNoLicense::BankFabricEnumValue);//Visible.  Bound control set via "Visible"
        SKS_PP_BankScr_ds.object(FieldNum(SKS_PP_BANK, IHB_InterestFilePath)).allowEdit(SKS_EB_FileStorage.StorageOption_IHB == SKS_EB_BankIntegOptWithNoLicense::FileHubLocalEnumValue);//Allowed.  Bound control set via "allowEdit"
        SKS_PP_BankScr_ds.object(FieldNum(SKS_PP_BANK, IHB_InterestFilePath)).visible(SKS_EB_FileStorage.StorageOption_IHB == SKS_EB_BankIntegOptWithNoLicense::FileHubLocalEnumValue || SKS_EB_FileStorage.StorageOption_BR == SKS_EB_BankIntegOptWithNoLicense::NotLicensedEnumValue);//Visible.  Bound control set via "Visible"
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableBRCustSettlement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enable the cusomer settlement group.
    /// </summary>
    // CR-9479
    void enableBRCustSettlement(boolean _enable)
    {
        SKS_PP_BankScr_ds.object(fieldNum(SKS_PP_Bank, BRInvoiceNotFound)).allowEdit(_enable);
        SKS_PP_BankScr_ds.object(fieldNum(SKS_PP_Bank, BRAutoPostInvoiceNotFound)).allowEdit(_enable);
        SKS_PP_BankScr_ds.object(fieldNum(SKS_PP_Bank, BRCustRemitAnalysisRuleGroup)).allowEdit(_enable);
        SKS_PP_BankScr_ds.object(fieldNum(SKS_PP_Bank, BRCustomerSearchAcrossCompany)).allowEdit(_enable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableBRAutoPostInvoiceNotFound</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enable the auto post invoice not found checkbox.
    /// </summary>
    // CR-9479
    void enableBRAutoPostInvoiceNotFound()
    {
        if(SKS_PP_BankScr.BRInvoiceNotFound == SKS_BR_InvoiceNotFound::None)
        {
            SKS_PP_BankScr.BRAutoPostInvoiceNotFound = NoYes::No;
        }
        SKS_PP_Bankscr_ds.object(fieldNum(SKS_PP_Bank,BRAutoPostInvoiceNotFound)).allowEdit(SKS_PP_BankScr.BRInvoiceNotFound != SKS_BR_InvoiceNotFound::None);
    }

]]></Source>
			</Method>
			<Method>
				<Name>disableEMail</Name>
				<Source><![CDATA[
    void disableEMail()
    {
        boolean enabledProperty;

        if (SKS_PP_BankScr.APEMFromSetup == NoYes::Yes)
        {
            enabledProperty = boolean::false;
        }
        else
        {
            enabledProperty = boolean::true;
        }

        SKS_PP_BankScr_IHB_Remit.enabled(enabledProperty);
        SKS_PP_BankScr_APEMReplytoName.enabled(enabledProperty);
        SKS_PP_BankScr_APEMReplyToAddr.enabled(enabledProperty);
        SKS_PP_BankScr_APEMAttachmentName.enabled(enabledProperty);
        SKS_PP_BankScr_APEMCompanyName.enabled(enabledProperty);
        SKS_PP_BankScr_APEMTemplateAttach.enabled(enabledProperty);
        SKS_PP_BankScr_APEMTemplateNoAttach.enabled(enabledProperty);
        SKS_PP_BankScr_APEMTemplateLanguage.enabled(enabledProperty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>sks_APLoadInternalContactInfoFromSetup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the internal contact information from TAS parameter setup.
    /// </summary>
    // SKS_AP_Remit attachment
    void sks_APLoadInternalContactInfoFromSetup()
    {
        SKS_PP_BankScr.APContactName  = sks_eft_setup.APContactName;
        SKS_PP_BankScr.APContactPhone = sks_eft_setup.APContactPhone;
        SKS_PP_BankScr.APContactEmail = sks_eft_setup.APContactEmail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sks_APdisableInternalContact</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method used to disable internal contact. SKS_AP_remit attachment
    /// </summary>
    // SKS_AP_remit attachment
    void sks_APdisableInternalContact()
    {
        boolean enabledProperty;

        if (SKS_PP_BankScr.AP_EMFromSetup == NoYes::Yes)
        {
            enabledProperty = boolean::false;
        }
        else
        {
            enabledProperty = boolean::true;
        }
        SKS_PP_BankScr_APContactName.enabled(enabledProperty);
        SKS_PP_BankScr_APContactPhone.enabled(enabledProperty);
        SKS_PP_BankScr_APContactEmail.enabled(enabledProperty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInhouseTab</Name>
				<Source><![CDATA[
    public void setInhouseTab()
    {
        if (InhouseBankAccountSetup_IHB_SendEmail.value() == NoYes::Yes)
        {
            SKS_PP_BankScr_ds.object(fieldNum(SKS_PP_Bank, IHB_FileType)).enabled(true);
            SKS_PP_BankScr_ds.object(fieldNum(SKS_PP_Bank, IHB_AttachTemplate)).enabled(true);
            SKS_PP_BankScr_ds.object(fieldNum(SKS_PP_Bank, IHB_TemplateLanguage)).enabled(true);
            SKS_PP_BankScr_ds.object(fieldNum(SKS_PP_Bank, IHB_ReplyToEmail)).enabled(true);
            SKS_PP_BankScr_ds.object(fieldNum(SKS_PP_Bank, IHB_ReplyToName)).enabled(true);
        }
        else
        {
            SKS_PP_BankScr_ds.object(fieldNum(SKS_PP_Bank, IHB_FileType)).enabled(false);
            SKS_PP_BankScr_ds.object(fieldNum(SKS_PP_Bank, IHB_AttachTemplate)).enabled(false);
            SKS_PP_BankScr_ds.object(fieldNum(SKS_PP_Bank, IHB_TemplateLanguage)).enabled(false);
            SKS_PP_BankScr_ds.object(fieldNum(SKS_PP_Bank, IHB_ReplyToEmail)).enabled(false);
            SKS_PP_BankScr_ds.object(fieldNum(SKS_PP_Bank, IHB_ReplyToName)).enabled(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableInterestCalculationFields</Name>
				<Source><![CDATA[
    private void enableInterestCalculationFields()
    {
        boolean enableIHBInterestCalcFields;

        if (SKS_PP_BankScr.IHB_UseInterestCalcDefaults == NoYes::No)
        {
            enableIHBInterestCalcFields = true;
        }
        IHBInterestRate_IHB_InterestCalcFreq.enabled(enableIHBInterestCalcFields);
        IHBInterestRate_IHB_InterestCalcMethod.enabled(enableIHBInterestCalcFields);
        IHBInterestRate_IHB_InterestDaysCalcMethod.enabled(enableIHBInterestCalcFields);
        IHBInterestRate_IHB_InterestMarkupId.enabled(enableIHBInterestCalcFields);
        IHBInterestRate_IHB_InterestIncomeLedgerDimension.enabled(enableIHBInterestCalcFields);
        IHBInterestRate_IHB_InterestExpenseLedgerDimension.enabled(enableIHBInterestCalcFields);
        IHBInterestRate_IHB_InterestIncomeBankTransType.enabled(enableIHBInterestCalcFields);
        IHBInterestRate_IHB_InterestExpenseBankTransType.enabled(enableIHBInterestCalcFields);
        IHBInterestRate_IHB_InterestRateFormat.enabled(enableIHBInterestCalcFields);
        IHBInterestRate_IHB_CommId.enabled(enableIHBInterestCalcFields);
        IHBInterestRate_IHB_InterestFilePath.enabled(enableIHBInterestCalcFields);
        SKS_PP_BankScr_IHBInterestBankFabricLocation.enabled(enableIHBInterestCalcFields);
        SKS_PP_BankScr_IHB_CalculationFrequencyEndMonth.enabled(SKS_PP_BankScr.IHB_InterestCalcFreq == SKS_IHB_InterestCalcFreq::Annual && enableIHBInterestCalcFields);
        SKS_PP_BankScr_IHB_CalculationFrequencyStartMonth.enabled(SKS_PP_BankScr.IHB_InterestCalcFreq == SKS_IHB_InterestCalcFreq::Annual && enableIHBInterestCalcFields);
        // FDD 9848 OD InterestCalculation -->
        SKS_PP_BankScr_IHB_AppropriationfeeID.enabled(enableIHBInterestCalcFields);
        SKS_PP_BankScr_IHB_OverdraftInterestID.enabled(enableIHBInterestCalcFields);
        SKS_PP_BankScr_IHB_AppropriationFeeLedgerAccount.enabled(enableIHBInterestCalcFields);
        SKS_PP_BankScr_IHB_OverdraftInterestLedgerAccount.enabled(enableIHBInterestCalcFields);
        // FDD 9848 OD InterestCalculation <--
        IHBInterestRate_IHB_InterestRepaymentNonCompounded.enabled(SKS_PP_BankScr.IHB_InterestCalcMethod == SKS_IHB_InterestCalcMeth::Noncompounded && enableIHBInterestCalcFields); //FDD-11448

    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultInterestCalculationValuesFromSetup</Name>
				<Source><![CDATA[
    private void defaultInterestCalculationValuesFromSetup()
    {
        SKS_PP_Setup    locSKS_PP_Setup = SKS_PP_Setup::find();

        if (SKS_PP_BankScr.IHB_UseInterestCalcDefaults == NoYes::Yes)
        {
            SKS_PP_BankScr.IHB_InterestCalcFreq               = locSKS_PP_Setup.IHB_InterestCalcFreq;
            SKS_PP_BankScr.IHB_InterestCalcMethod             = locSKS_PP_Setup.IHB_InterestCalcMethod;
            SKS_PP_BankScr.IHB_InterestDaysCalcMethod         = locSKS_PP_Setup.IHB_InterestDaysCalcMethod;
            SKS_PP_BankScr.IHB_InterestMarkupId               = locSKS_PP_Setup.IHB_InterestMarkupId;
            SKS_PP_BankScr.IHB_InterestExpenseLedgerDimension = locSKS_PP_Setup.IHB_InterestExpenseLedgerDimension;
            SKS_PP_BankScr.IHB_InterestIncomeLedgerDimension  = locSKS_PP_Setup.IHB_InterestIncomeLedgerDimension;
            SKS_PP_BankScr.IHB_InterestExpenseBankTransType   = locSKS_PP_Setup.IHB_InterestExpenseBankTransType;
            SKS_PP_BankScr.IHB_InterestIncomeBankTransType    = locSKS_PP_Setup.IHB_InterestIncomeBankTransType;
            SKS_PP_BankScr.IHB_InterestRateFormat             = locSKS_PP_Setup.IHB_InterestRateFormat;
            SKS_PP_BankScr.IHB_CommId                         = locSKS_PP_Setup.IHB_CommId;
            SKS_PP_BankScr.IHB_InterestFilePath               = locSKS_PP_Setup.IHB_InterestFilePath;
            SKS_PP_BankScr.IHBInterestBankFabricLocation      = locSKS_PP_Setup.IHBInterestBankFabricLocation;
            SKS_PP_BankScr.IHB_CalculationFrequencyEndMonth   = locSKS_PP_Setup.IHB_CalculationFrequencyEndMonth;
            SKS_PP_BankScr.IHB_CalculationFrequencyStartMonth = locSKS_PP_Setup.IHB_CalculationFrequencyStartMonth;
            // FDD 9848 OD InterestCalculation -->
            SKS_PP_BankScr.IHB_AppropriationfeeID             = locSKS_PP_Setup.IHB_AppropriationfeeID;
            SKS_PP_BankScr.IHB_AppropriationFeeLedgerAccount  = locSKS_PP_Setup.IHB_AppropriationFeeLedgerAccount;
            SKS_PP_BankScr.IHB_OverdraftInterestID            = locSKS_PP_Setup.IHB_OverdraftInterestID;
            SKS_PP_BankScr.IHB_OverdraftInterestLedgerAccount = locSKS_PP_Setup.IHB_OverdraftInterestLedgerAccount;
            // FDD 9848 OD InterestCalculation <--
            SKS_PP_BankScr.IHB_InterestRepaymentNonCompounded = locSKS_PP_Setup.IHB_InterestRepaymentNonCompounded; //FDD-11448
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableOverdraftTASParameter</Name>
				<Source><![CDATA[
    /// <summary>
    /// enable and disable overdraft parameters
    /// </summary>
    // FDD 9848 OD InterestCalculation
    public void enableOverdraftTASParameter()
    {
        if (SKS_PP_BankScr.IHB_OD_UseTASSetupDefault)
        {
            element.loadDefaultTASOverfdraftSetup();

            SKS_PP_BankScr_ds.object(fieldNum(SKS_PP_Bank, IHB_OD_FileName)).enabled(false);
            SKS_PP_BankScr_ds.object(fieldNum(SKS_PP_Bank, IHB_OD_AttachTemplate)).enabled(false);
            SKS_PP_BankScr_ds.object(fieldNum(SKS_PP_Bank, IHB_OD_SendEmail)).enabled(false);
            SKS_PP_BankScr_ds.object(fieldNum(SKS_PP_Bank, IHB_OD_FileType)).enabled(false);
            SKS_PP_BankScr_ds.object(fieldNum(SKS_PP_Bank, IHB_OD_TemplateLanguage)).enabled(false);
            SKS_PP_BankScr_ds.object(fieldNum(SKS_PP_Bank, IHB_OD_ReplyToEmail)).enabled(false);
            SKS_PP_BankScr_ds.object(fieldNum(SKS_PP_Bank, IHB_OD_ReplyToName)).enabled(false);
        }
        else
        {

            SKS_PP_BankScr_ds.object(fieldNum(SKS_PP_Bank, IHB_OD_FileName)).enabled(true);
            SKS_PP_BankScr_ds.object(fieldNum(SKS_PP_Bank, IHB_OD_AttachTemplate)).enabled(true);
            SKS_PP_BankScr_ds.object(fieldNum(SKS_PP_Bank, IHB_OD_SendEmail)).enabled(true);
            SKS_PP_BankScr_ds.object(fieldNum(SKS_PP_Bank, IHB_OD_FileType)).enabled(true);
            SKS_PP_BankScr_ds.object(fieldNum(SKS_PP_Bank, IHB_OD_TemplateLanguage)).enabled(true);
            SKS_PP_BankScr_ds.object(fieldNum(SKS_PP_Bank, IHB_OD_ReplyToEmail)).enabled(true);
            SKS_PP_BankScr_ds.object(fieldNum(SKS_PP_Bank, IHB_OD_ReplyToName)).enabled(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadDefaultTASOverfdraftSetup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overdraft interest calculation load od default values from TAS setup.
    /// </summary>
    // FDD 9848 OD InterestCalculation
    void loadDefaultTASOverfdraftSetup()
    {
        SKS_PP_Setup      inhouseTASBankSetup;

        inhouseTASBankSetup = SKS_PP_Setup::find();

        SKS_PP_BankScr.IHB_OD_FileName                    = inhouseTASBankSetup.IHB_OD_FileName;
        SKS_PP_BankScr.IHB_OD_AttachTemplate              = inhouseTASBankSetup.IHB_OD_AttachTemplate;
        SKS_PP_BankScr.IHB_OD_SendEmail                   = inhouseTASBankSetup.IHB_OD_SendEmail;
        SKS_PP_BankScr.IHB_OD_FileType                    = inhouseTASBankSetup.IHB_OD_FileType;
        SKS_PP_BankScr.IHB_OD_TemplateLanguage            = inhouseTASBankSetup.IHB_OD_TemplateLanguage;
        SKS_PP_BankScr.IHB_OD_ReplyToEmail                = inhouseTASBankSetup.IHB_OD_ReplyToEmail;
        SKS_PP_BankScr.IHB_OD_ReplyToName                 = inhouseTASBankSetup.IHB_OD_ReplyToName;
        SKS_PP_BankScr.IHB_OD_UseTASSetupDefault          = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>disableODEmailFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// enable and disable email fields when send email is marked.
    /// </summary>
    // FDD 9848 OD InterestCalculation
    private void disableODEmailFields()
    {
        if (SKS_PP_BankScr_IHB_OD_SendEmail.value() == NoYes::Yes)
        {
            SKS_PP_BankScr_ds.object(fieldNum(SKS_PP_Bank, IHB_OD_AttachTemplate)).enabled(true);
            SKS_PP_BankScr_ds.object(fieldNum(SKS_PP_Bank, IHB_OD_TemplateLanguage)).enabled(true);
            SKS_PP_BankScr_ds.object(fieldNum(SKS_PP_Bank, IHB_OD_ReplyToEmail)).enabled(true);
            SKS_PP_BankScr_ds.object(fieldNum(SKS_PP_Bank, IHB_OD_ReplyToName)).enabled(true);
            SKS_PP_BankScr_ds.object(fieldNum(SKS_PP_Bank, IHB_OD_FileType)).enabled(true);
            SKS_PP_BankScr_ds.object(fieldNum(SKS_PP_Bank, IHB_OD_FileName)).enabled(true);
        }
        else
        {
            SKS_PP_BankScr_ds.object(fieldNum(SKS_PP_Bank, IHB_OD_AttachTemplate)).enabled(false);
            SKS_PP_BankScr_ds.object(fieldNum(SKS_PP_Bank, IHB_OD_TemplateLanguage)).enabled(false);
            SKS_PP_BankScr_ds.object(fieldNum(SKS_PP_Bank, IHB_OD_ReplyToEmail)).enabled(false);
            SKS_PP_BankScr_ds.object(fieldNum(SKS_PP_Bank, IHB_OD_ReplyToName)).enabled(false);
            SKS_PP_BankScr_ds.object(fieldNum(SKS_PP_Bank, IHB_OD_FileType)).enabled(false);
            SKS_PP_BankScr_ds.object(fieldNum(SKS_PP_Bank, IHB_OD_FileName)).enabled(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadDefaultTASOverdraftSetupActive</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overdraft interest calculation default values from TAS setup in DS active event.
    /// </summary>
    // FDD 9848 OD InterestCalculation
    void loadDefaultTASOverdraftSetupActive()
    {
        SKS_PP_Setup      inhouseTASBankSetup;

        inhouseTASBankSetup = SKS_PP_Setup::find();

        if (element.defaultOverdraftTASParm())
        {
            SKS_PP_BankScr.IHB_OD_SendEmail                   = inhouseTASBankSetup.IHB_OD_SendEmail;
            SKS_PP_BankScr.IHB_OD_FileType                    = inhouseTASBankSetup.IHB_OD_FileType;
            SKS_PP_BankScr.IHB_OD_TemplateLanguage            = inhouseTASBankSetup.IHB_OD_TemplateLanguage;
            SKS_PP_BankScr.IHB_OD_ReplyToEmail                = inhouseTASBankSetup.IHB_OD_ReplyToEmail;
            SKS_PP_BankScr.IHB_OD_ReplyToName                 = inhouseTASBankSetup.IHB_OD_ReplyToName;
            SKS_PP_BankScr.IHB_OD_UseTASSetupDefault          = true;//SKS_Bug_12071
            SKS_PP_BankScr.IHB_OD_AttachTemplate              = inhouseTASBankSetup.IHB_OD_AttachTemplate;
        }
        element.enableOverdraftTASParameter();
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadIHBInterestEndDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// enable disable interest enddate from payoff calculated.
    /// </summary>
    // FDD 11448
    void loadIHBInterestEndDate()
    {
        if(SKS_PP_BankScr.IHB_PayOffCalculated == NoYes::Yes)
        {
            IHBInterestRate_IHB_InterestEndDate.enabled(false);
        }
        else
        {
            IHBInterestRate_IHB_InterestEndDate.enabled(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultOverdraftTASParm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if data not defaulted from TAS setup.
    /// </summary>
    /// <returns></returns>
    // FDD 9848 OD InterestCalculation
    boolean defaultOverdraftTASParm()
    {
        boolean     result = NoYes::No;

        if (SKS_PP_BankScr_ds.object(fieldNum(SKS_PP_Bank, IHB_OD_FileName)).getValue() == '' &&
            SKS_PP_BankScr_ds.object(fieldNum(SKS_PP_Bank, IHB_OD_SendEmail)).getValue() == NoYes::No &&
            SKS_PP_BankScr_ds.object(fieldNum(SKS_PP_Bank, IHB_OD_TemplateLanguage)).getValue() == '' &&
            SKS_PP_BankScr_ds.object(fieldNum(SKS_PP_Bank, IHB_OD_ReplyToEmail)).getValue() == '' &&
            SKS_PP_BankScr_ds.object(fieldNum(SKS_PP_Bank, IHB_OD_ReplyToName)).getValue() == '' )
        {
            result = NoYes::Yes;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadLedgeraccountsForOD</Name>
				<Source><![CDATA[
    /// <summary>
    /// default ledger values from setup
    /// </summary>
    public void loadLedgeraccountsForOD()
    {
        SKS_PP_BankScr.IHB_AppropriationfeeID  = sks_PP_setup.IHB_AppropriationfeeID;
        SKS_PP_BankScr.IHB_AppropriationFeeLedgerAccount = sks_PP_setup.IHB_AppropriationFeeLedgerAccount;
        SKS_PP_BankScr.IHB_OverdraftInterestID = sks_PP_setup.IHB_OverdraftInterestID;
        SKS_PP_BankScr.IHB_OverdraftInterestLedgerAccount = sks_PP_setup.IHB_OverdraftInterestLedgerAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIHBFieldsCanChange</Name>
				<Source><![CDATA[
    //SKS_Bug_12085 -->
    /// <summary>
    ///
    /// </summary>
    protected void checkIHBFieldsCanChange(SKS_PP_Bank _sks_PP_Bank)
    {
        SKS_PP_Bank sks_PP_Bankloc = _sks_PP_Bank;
        SKS_PP_Bank sks_PP_BankOrig = sks_PP_Bankloc.orig();
        SKS_IHB_CalculatedInterestSummary   sks_IHB_CalculatedInterestSummary;

        if((sks_PP_BankOrig.IHB_InterestCalcFreq != sks_PP_Bankloc.IHB_InterestCalcFreq)
          ||(sks_PP_BankOrig.IHB_AppropriationfeeID != sks_PP_Bankloc.IHB_AppropriationfeeID)
          ||(sks_PP_BankOrig.IHB_CalculationFrequencyEndMonth != sks_PP_Bankloc.IHB_CalculationFrequencyEndMonth)
          ||(sks_PP_BankOrig.IHB_CalculationFrequencyStartMonth != sks_PP_Bankloc.IHB_CalculationFrequencyStartMonth)
          ||(sks_PP_BankOrig.IHB_InterestCalcMethod != sks_PP_Bankloc.IHB_InterestCalcMethod)
          ||(sks_PP_BankOrig.IHB_InterestMarkupId != sks_PP_Bankloc.IHB_InterestMarkupId)
          ||(sks_PP_BankOrig.IHB_InterestDaysCalcMethod != sks_PP_Bankloc.IHB_InterestDaysCalcMethod)
          ||(sks_PP_BankOrig.IHB_OverdraftInterestID != sks_PP_Bankloc.IHB_OverdraftInterestID)
          ||(sks_PP_BankOrig.IHB_InterestRateId != sks_PP_Bankloc.IHB_InterestRateId))
        {
            select firstonly BankAccountID from sks_IHB_CalculatedInterestSummary
                where sks_IHB_CalculatedInterestSummary.BankAccountID == _sks_pp_bank.BankAccountId;
            if(sks_IHB_CalculatedInterestSummary.BankAccountID)
            {
                throw error(strFmt("@SKS:SKGIHBValuesCantbeChanged", sks_IHB_CalculatedInterestSummary.BankAccountID));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateIHBVendorNettingSwitchBoard</Name>
				<Source><![CDATA[
    /// <summary>
    /// // FDD-18672 - IHB Intercompany netting ERP outside of D365
    /// </summary>
    private void validateIHBVendorNettingSwitchBoard()
    {
        //Check if the same customer company in SwitchBoardExternalVendor form exists or not and throw error based on that
        SKS_IHB_SwitchboardExternalVendor sks_IHB_SwitchboardExternalVendor;
        select firstonly CustomerCompany from sks_IHB_SwitchboardExternalVendor
                    where sks_IHB_SwitchboardExternalVendor.CustomerIHBBank == SKS_PP_BankScr.BankAccountId &&
            sks_IHB_SwitchboardExternalVendor.CustomerCompany == SKS_PP_BankScr.SKS_IHBLinkedinhousebankcompany;
                //    sks_IHB_SwitchboardExternalVendor.CustomerCompany != this.SKS_IHBLinkedinhousebankcompany;// condition to not throw the error if it is the same company

        if(sks_IHB_SwitchboardExternalVendor)
        {
            SKS_PP_BankScr.SKS_IHBInhouseBank  = NoYes::Yes;
            throw error("@SKS:SKGIHBRecordChanged");
        }
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>SKS_PP_BankScr</Name>
				<Methods>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        public int active()
        {
            int ret;
            ;

            ret = super();

            element.reloadFormatID();
            element.validateSetupDefaults();
            element.setBRFormatDesc();
            element.setBRControlProperties();
            element.setCCRControlProperties();// SKS_FDD_13903
            element.enablelockboxbutton();
            element.setPPControlProperties();
            CustomerSettlementOptions_UseeBankRecCustSettlementSetupDefaults.modified();
            // CR-9479 -->
            if(!SKS_PP_BankScr.UseeBankRecCustSettlementSetupDefaults)
            {
                element.enableBRAutoPostInvoiceNotFound();
            }
            // CR-9479 <-
            //IHB3.3.21 SKS 9536 start
            element.validateLinkedIHB();
            element.sks_IHBenableInHouseBank();
            //IHB3.3.21 SKS 9536 end
            //SKS FDD 9615 - start
            element.disableEMail();
            element.sks_APdisableInternalContact();
            //SKS FDD 9615 - end
            element.loadDefaultTASBankStmtSetupActive(); // FDD9652 Day end process
            // SKS FDD 9564 start
            element.enableInterestCalculationFields();
            // SKS FDD 9564 end
            element.loadDefaultTASOverdraftSetupActive();// FDD 9848 OD InterestCalculation
            element.loadIHBInterestEndDate(); //FDD-11448
            // SKS_FDD_13903 -->
            if(SKS_PP_BankScr.CCR_IsCCReconciliation == NoYes::Yes)
            {
                EBR.visible(false);
                EBRCustSettelement.visible(false);
                CCR.visible(true);
                element.ccr_setFormatDesc();
            }
            else
            {
                CCR.visible(false);
                EBR.visible(true);
                EBRCustSettelement.visible(true);
            }
            // SKS_FDD_13903 <--
            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>validateWrite</Name>
						<Source><![CDATA[
        public boolean validateWrite()
        {
            boolean ret = true; //Bug-12123
            SKS_BR_FileFormat locSKS_BR_FileFormat;

            if(sks_pp_setup.ModPosPay && SKS_PP_BankScr.PPFormatId != '')
            {
                if(Mask1.isVisible() && !Mask1.valueStr())
                {
                    warning("@SKS253"); //required field

                    tab.tab(2);
                    Mask1.setFocus();

                    return false;
                }

                if(Mask2.isVisible() && !Mask2.valueStr())
                {
                    warning("@SKS253"); //required field

                    Mask2.setFocus();

                    return false;
                }

                if(Mask3.isVisible() && !Mask3.valueStr())
                {
                    warning("@SKS253"); //required field

                    Mask3.setFocus();

                    return false;
                }

                if(Mask4.isVisible() && !Mask4.valueStr())
                {
                    warning("@SKS253"); //required field

                    Mask4.setFocus();

                    return false;
                }

                if(SKS_PP_BankScr.PPFromSetup == NoYes::No)
                {


                    
                    if(!FileName.valueStr() && PPFormatID.valueStr() && FileName.visible() && SKS_PP_BankScr_ds.object(FieldNum(SKS_PP_BANK, PPFileName)).visible())
                    {
                        warning("@SKS253"); //required field

                        FileName.setFocus();

                        return false;
                    }

                    if(SKS_PP_BankScr.PPArchive && !SKS_PP_BankScr.PPArchivePath && SKS_EB_FileStorage.StorageOption_PP == SKS_EB_BankIntegOptWithNoLicense::FileHubLocalEnumValue)
                    {
                        warning("@SKS39" + ' ' + strFmt("@SKS2643","@SKS75")); //required field

                        return false;
                    }

                }

                if(SKS_PP_BankScr.PPOutCommID == '')
                {
                    warning("@SKS253"); //required field
                    SKS_PP_BankScr_CommID.setFocus();
                    return false;
                }

            }


            if (sks_pp_setup.ModBR == NoYes::Yes && SKS_PP_BankScr.BRFormatID != '')
            {
                if (SKS_PP_BankScr.BRFromSetup == NoYes::No)
                {
                    if( SKS_PP_BankScr.BRInCommID == '')
                    {
                        warning("@SKS253"); //required field
                        SKS_PP_BankScr_BRInCommID.setFocus();
                        return false;
                    }
                    select firstonly APIFormatType from locSKS_BR_FileFormat where locSKS_BR_FileFormat.FormatID == SKS_PP_BankScr.BRFormatID;
                    if ((locSKS_BR_FileFormat.APIFormatType == SKS_EB_APIFormatType::File) && (!SKS_PP_BankScr.CCR_IsCCReconciliation) && strlen(SKS_PP_BankScr_BRPath.valueStr()) == 0 && SKS_PP_BankScr_BrFormatID.valueStr() && SKS_EB_FileStorage.StorageOption_BR == SKS_EB_BankIntegOptWithNoLicense::FileHubLocalEnumValue)
                    {
                        warning(strFmt("@SKS2468", "@SKS516")); //required field
                        SKS_PP_BankScr_BRPath.setFocus();
                        return false;
                    }
                    /*else if (strlen(SKS_PP_BankScr_BRBankFabricLocation.valueStr()) == 0 && SKS_PP_BankScr_BrFormatID.valueStr() && SKS_EB_FileStorage.StorageOption_BR == SKS_EB_BankIntegOptWithNoLicense::BankFabricEnumValue)
                    {
                        warning("@SKS253", "@SKS179"); //required field
                        SKS_PP_BankScr_BRBankFabricLocation.setFocus();
                        return false;
                    }
                    */
                }

                if(SKS_PP_BankScr.BRNotifyStatements == NoYes::Yes)
                {
                    if(SKS_PP_BankScr.BREmail == '' || SKS_PP_BankScr.BRBatchJobId == 0)
                    {
                        warning("@SKS:NewLabel40", "@SKS179"); //required field
                        if(SKS_PP_BankScr.BREmail == '')
                        {
                            MissingBankStatements_BREmail.setFocus();
                        }
                        else if(SKS_PP_BankScr.BRBatchJobId == 0)
                        {
                            MissingBankStatements_BRBatchJobId.setFocus();
                        }
                        return false;
                    }
                }
            }
            // SKS_FDD_13903 -->
            if (sks_pp_setup.ModCCReconciliationExtensions == NoYes::Yes && SKS_PP_BankScr.CCR_FormatID != '')
            {
                if (SKS_PP_BankScr.CCR_FromSetup == NoYes::No)
                {
                    if( SKS_PP_BankScr.CCR_InCommID == '')
                    {
                        warning("@SKS253"); //required field
                        CCR_InCommID.setFocus();
                        return false;
                    }
                    if ((SKS_PP_BankScr.CCR_IsCCReconciliation) && strlen(SKS_PP_BankSrc_CCR_Path.valueStr()) == 0 && CCR_FormatID.valueStr() && SKS_EB_FileStorage.StorageOption_CCR == SKS_EB_BankIntegOptWithNoLicense::FileHubLocalEnumValue)
                    {
                        warning("@SKS253", "@SKS179"); //required field
                        SKS_PP_BankSrc_CCR_Path.setFocus();
                        return false;
                    }
                    /*else if (strlen(SKS_PP_BankScr_CCR_BankFabricLocation.valueStr()) == 0 && CCR_FormatID.valueStr() && SKS_EB_FileStorage.StorageOption_CCR == SKS_EB_BankIntegOptWithNoLicense::BankFabricEnumValue)
                    {
                        warning("@SKS253", "@SKS179"); //required field
                        SKS_PP_BankScr_CCR_BankFabricLocation.setFocus();
                        return false;
                    }
                    */
                }
            }
            // SKS_FDD_13903 -<-
            // 9564 -->
            if (SKS_PP_BankScr.IHB_InterestCalcFreq == SKS_IHB_InterestCalcFreq::Annual)
            {
                if( SKS_PP_BankScr.IHB_CalculationFrequencyStartMonth == MonthsOfYear::None)
                {
                    warning("@SKS253"); //required field
                    SKS_PP_BankScr_IHB_CalculationFrequencyStartMonth.setFocus();
                    return false;
                }
                if (SKS_PP_BankScr.IHB_CalculationFrequencyEndMonth == MonthsOfYear::None)
                {
                    warning("@SKS253"); //required field
                    SKS_PP_BankScr_IHB_CalculationFrequencyEndMonth.setFocus();
                    return false;
                }
                if (SKS_PP_BankScr.IHB_CalculationFrequencyEndMonth - SKS_PP_BankScr.IHB_CalculationFrequencyStartMonth != #ValidAnnualPeriod2
                    && SKS_PP_BankScr.IHB_CalculationFrequencyStartMonth - SKS_PP_BankScr.IHB_CalculationFrequencyEndMonth != #ValidAnnualPeriod2
                    && SKS_PP_BankScr.IHB_CalculationFrequencyEndMonth - SKS_PP_BankScr.IHB_CalculationFrequencyStartMonth != #ValidAnnualPeriod1)
                {
                    warning("@SKS:SKGInterestCalculationInvalidAnnualPeriod"); //Starting and ending months should cover the period of an year.
                    SKS_PP_BankScr_IHB_CalculationFrequencyEndMonth.setFocus();
                    return false;
                }
            }
            // 9564 <--
            if (SKS_PP_BankScr.IHB_InterestCalcMethod == SKS_IHB_InterestCalcMeth::Noncompounded) //FDD-11448 --->
            {
                if( SKS_PP_BankScr.IHB_InterestRepaymentNonCompounded == '')
                {
                    warning("@SKS253"); //required field
                    IHBInterestRate_IHB_InterestRepaymentNonCompounded.setFocus();
                    return false;
                }
            }
            //<--- FDD-11448

            if(SKS_PP_BankScr.BRCustRemitAnalysisRuleGroup && !SKS_LB_RemitTxtAnalysis::find(SKS_PP_BankScr.BRCustRemitAnalysisRuleGroup))
            {
                // check if this field exists                
                error(strFmt("@SKS:RuleTaxGrpMissing",
                    SKS_PP_BankScr.BRCustRemitAnalysisRuleGroup, fieldPName(SKS_LB_RemitTxtAnalysis, RuleId), tableId2PName(tableNum(SKS_LB_RemitTxtAnalysis))));
                return false;
            }


            ret = super();

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>create</Name>
						<Source><![CDATA[
        public void create(boolean _append = false)
        {
            ;
            super(_append);

            SKS_PP_BankScr.BRFromSetup = NoYes::Yes;
            SKS_PP_BankScr.CCR_FromSetup = NoYes::Yes;// SKS_FDD_13903
            SKS_PP_BankScr.UseeBankRecBankStatementMonitorDefaults = NoYes::Yes;
            element.refreshFromBRSetup();
            element.ccr_refreshFromCCRSetup();// SKS_FDD_13903
            element.setBRControlProperties();
            element.setCCRControlProperties();// SKS_FDD_13903
            //SKS FDD 9615 start
            SKS_PP_BankScr.APEMFromSetup = NoYes::Yes;
            SKS_PP_BankScr.AP_EMFromSetup = NoYes::Yes;
            element.loadEMailFromSetup();
            element.disableEMail();
            element.sks_APLoadInternalContactInfoFromSetup();
            element.sks_APdisableInternalContact();
            //SKS FDD 9615 end
            element.loadLedgeraccountsForOD(); // FDD 9848 OD InterestCalculation
        }

]]></Source>
					</Method>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        /// <summary>
        /// init method
        /// </summary>
        public void init()
        {
            super();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields>
					<Field>
						<DataField>AlternateBankID</DataField>
						<Methods>
							<Method>
								<Name>validate</Name>
								<Source><![CDATA[
            public boolean validate()
            {
                boolean ret;

                ret = super();
                if(strStartsWith(this.getValue(),  ' ') || strEndsWith(this.getValue(), ' ') || strStartsWith(this.getValue(), '\t') || strEndsWith(this.getValue(),'\t'))
                {
                    error(strFmt("@SKS3842", this.labelText()));
                    ret = false;
                }
                return ret;
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>BankAccountId</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                BankAccountSrc_DS.executeQuery();
                element.reloadFormatID();
                super();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>BRBankFabricLocation</DataField>
						<Methods>
							<Method>
								<Name>validate</Name>
								<Source><![CDATA[
            /// <summary>
            /// validate the BankFabric location supplied by the user
            /// </summary>
            /// <returns>True if the location is valid, false if it cannot be found on the BF server</returns>
            public boolean validate()
            {
                boolean valid = true;
                str validationMessage;
                SKS_BR_File locSKS_BR_File;
                SKS_BF_TmpLookupTable locSKS_BF_TmpLookupTable;
                Query locQuery;
                QueryRun locQueryRun;
                QueryBuildDataSource locQueryBuildDataSource;
    

                valid = super();
                if(valid && SKS_PP_BankScr.BRBankFabricLocation)
                {
                    locQuery = new Query();
                    locQueryBuildDataSource = locQuery.addDataSource(tableNum(SKS_BF_TmpLookupTable));
                    locQueryBuildDataSource.addRange(fieldnum(SKS_BF_TmpLookupTable,Name))
                                            .value(queryValue(SKS_PP_BankScr.BRBankFabricLocation));;
                    locQueryRun = new QueryRun(locQuery);
                    locQueryRun.setRecord(SKS_BF_TmpLookupTable::construct(SKS_BF_FileLocCategory::BR));
                    if(!locQueryRun.next())
                    {
                        valid = false;
                        Error('@SKS:SKGSKSPPSetupInvalidBRBFLocationMsg');
                    }
                }
                if (valid && SKS_EB_FileStorage.StorageOption_BR == SKS_EB_BankIntegOptWithNoLicense::BankFabricEnumValue)
                {

                    locSKS_BR_File = SKS_BR_File::construct(SKS_EB_FileStorage.StorageOption_BR ==  SKS_EB_BankIntegOptWithNoLicense::BankFabricEnumValue ? SKS_BF_BankIntType::BankFabric : SKS_BF_BankIntType::FileHubLocal );
                    validationMessage = locSKS_BR_File.validateBRPath(SKS_PP_BankScr, null, false, SKS_EB_FileStorage);
                    if (strlen(validationMessage) != 0)
                    {
                        error(validationMessage);
                        valid = false;
                    }
                }
                return valid;
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>BRCreateBankStatements</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();
                if(!SKS_PP_BankScr.BRCreateBankStatements)
                {
                    SKS_PP_BankScr.BRAutoReconcile = NoYes::No;
                    SKS_PP_BankScr.BRCreateBankStatementsIfNoTrans = NoYes::No;

                    if(!SKS_PP_BankScr.UseeBankRecBankStatementMonitorDefaults)
                    {
                        SKS_PP_Bankscr.BRNotifyStatements = NoYes::No;
                    }
                }
                element.setBRControlProperties();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>BRCreateBankStatementsIfNoTrans</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();
                element.setBRControlProperties();
                if(!SKS_PP_Bankscr.BRCreateBankStatementsIfNoTrans && !SKS_PP_BankScr.UseeBankRecBankStatementMonitorDefaults)
                {
                    SKS_PP_Bankscr.BRNotifyStatements = NoYes::No;
                }
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>BRFormatID</DataField>
						<Methods>
							<Method>
								<Name>validate</Name>
								<Source><![CDATA[
            public boolean validate()
            {
                boolean valid;
                str validateMessage;
                SKS_PP_Bank tmpSKS_PP_Bank;
                BankAccountTable tmpBankAccount;
                SKS_BR_File locSKS_BR_File;

                valid = super();

                if (valid && SKS_PP_BankScr.BRFormatID != '')
                {
                    //SKS_ElectronicBankAPIChanges
					SKS_BR_FileFormat SKS_BR_FileFormat;

					select firstonly SKS_BR_FileFormat where SKS_BR_FileFormat.FormatID == SKS_PP_BankScr.BRFormatID;
                    //SKS_ElectronicBankAPIChanges

                    if(strlen(BankAccountSrc.AccountNum) == 0 && strLen(BankAccountSrc.IBAN) == 0)
                    {
                        error("@SKS329");
                        valid = false;
                    }
                    else if (SKS_BR_FileFormat.APIFormatType != SKS_EB_APIFormatType::API)//SKS_ElectronicBankAPIChanges
                    {
                        if(strLen(BankAccountSrc.AccountID) > 0)
                        {
                            tmpSKS_PP_Bank = SKS_EB_Bank::ValidateBankAcct(SKS_PP_BankScr, BankAccountSrc);
                            if(tmpSKS_PP_Bank)
                            {
                                error(strFmt("@SKS848", BankAccountSrc.AccountNum, tmpSKS_PP_Bank.BankAccountId, tmpSKS_PP_Bank.dataAreaId, BankAccountSrc.CurrencyCode));
                                return false;
                            }
                        }
                        tmpSKS_PP_Bank = null;
                        tmpBankAccount = null;
                        if(strLen(BankAccountSrc.IBAN) > 0)
                        {
                            tmpSKS_PP_Bank = SKS_EB_Bank::ValidateIBANBankAcct(SKS_PP_BankScr, BankAccountSrc);
                            if(tmpSKS_PP_Bank)
                            {

                                error(strFmt("@SKS4122", BankAccountSrc.IBAN, tmpSKS_PP_Bank.BankAccountId, tmpSKS_PP_Bank.dataAreaId, BankAccountSrc.CurrencyCode));
                                return false;
                            }
                        }
                        // If other bank accounts use this path, there are rules related to formatID and path
                        locSKS_BR_File = SKS_BR_File::construct((SKS_EB_FileStorage.StorageOption_BR ==  SKS_EB_BankIntegOptWithNoLicense::BankFabricEnumValue ? SKS_BF_BankIntType::BankFabric : SKS_BF_BankIntType::FileHubLocal) );
                        validateMessage = locSKS_BR_File.validateBRPath(SKS_PP_BankScr, null, false, SKS_EB_FileStorage);
                        
                        if (strlen(validateMessage) != 0)
                        {
                            error(validateMessage + num2char(10) + num2char(10) +
                                strFmt("@SKS544", "@SKS547", "@SKS313"), "@SKS179");
                            valid = false;
                        }
                        //Verify the selected format is not a CAMT.053 Multi Currency Account Format being used on a single currency account
                        /*select firstonly RecId from locBankAccountTable where locBankAccountTable.RecId != BankAccountSrc.RecId && locBankAccountTable.AccountNum == BankAccountSrc.AccountNum;
                        select DataAreaId, RecId from locSKS_BR_FileFormat where locSKS_BR_FileFormat.FormatID == SKS_PP_BankScr.BRFormatID && locSKS_BR_FileFormat.BR_CAMT053MulitCurrencyAccounts == NoYes::Yes;
                        if(!locBankAccountTable && locSKS_BR_FileFormat)
                        {
                            error(strFmt("@SKS:SKGBRMultiCurrencyFormatNotValidErrorMsg", BankAccountSrc.AccountNum, SKS_PP_BankScr.BRFormatID, "@SKS:SKGBRMultiCurrencyAccountsLabel"));
                            valid = false;
                        }*/

                    }
                }
                return valid;
            }

]]></Source>
							</Method>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();
                element.setBRFormatDesc();
                element.setBRControlProperties();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>BRFromSetup</DataField>
						<Methods>
							<Method>
								<Name>validate</Name>
								<Source><![CDATA[
            public boolean validate()
            {
                boolean valid;
                str validateMessage;
                SKS_BR_File locSKS_BR_File;

                valid = super();

                if (valid)
                {
                    locSKS_BR_File = SKS_BR_File::construct((SKS_EB_FileStorage.StorageOption_BR ==  SKS_EB_BankIntegOptWithNoLicense::BankFabricEnumValue ? SKS_BF_BankIntType::BankFabric : SKS_BF_BankIntType::FileHubLocal));
                    // If other bank accounts use this path, there are rules related to formatID and path
                    validateMessage = locSKS_BR_File.validateBRPath(SKS_PP_BankScr, null, false, SKS_EB_FileStorage);
                    if (strlen(validateMessage) != 0)
                    {
                        error(validateMessage);
                        valid = false;
                    }
                }

                return valid;
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>BRInCommID</DataField>
						<Methods>
							<Method>
								<Name>validate</Name>
								<Source><![CDATA[
            public boolean validate()
            {
                boolean ret;
        
                ret = super();
        
                // SKS_ElectronicBankAPIChanges
                if (ret && SKS_PP_BankScr.BRInCommID)
                {
					SKS_BR_FileFormat SKS_BR_FileFormat;
                    SKS_EB_CommProcess	commProcess;

					select firstonly SKS_BR_FileFormat 
						where SKS_BR_FileFormat.FormatID == SKS_PP_BankScr.BRFormatID;

                    select firstonly commProcess
                        where commProcess.CommID == SKS_PP_BankScr.BRInCommID;

                    if (SKS_BR_FileFormat.APIFormatType == SKS_EB_APIFormatType::API && 
                        commProcess.APIFormatType != SKS_EFT_APIFormatType::API)
                    {
                        ret = checkFailed('@SKS:NewLabel12');
					}
				}
                // SKS_ElectronicBankAPIChanges

                return ret;
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>BRInvoiceNotFound</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            /// <summary>
            /// 9479
            /// </summary>
            public void modified()
            {
                super();
                element.enableBRAutoPostInvoiceNotFound();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>BRNotifyStatements</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            /// <summary>
            /// modified method
            /// </summary>
            public void modified()
            {
                super();
                element.setBRControlProperties();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>BRPath</DataField>
						<Methods>
							<Method>
								<Name>validate</Name>
								<Source><![CDATA[
            public boolean validate()
            {
                boolean valid = true;
                str validationMessage;
                SKS_BR_File locSKS_BR_File;
                ;
                SKS_PP_BankScr.BRPath = SKS_BR_File::removeDoubleBackslash(SKS_PP_BankScr.BRPath);
                SKS_PP_BankScr.BRPath = SKS_BR_File::removeLastPathSlash(SKS_PP_BankScr.BRPath);
                SKS_PP_BankScr.BRPath = strLTrim(SKS_PP_BankScr.BRPath);

                valid = super();

                if(valid && SKS_BR_File::PathForwardSlashExists(SKS_PP_BankScr.BRPath))
                {
                    Error("@sks:SKGFileForwardSlashValidate");
                    valid = false;
                }

                if (valid && SKS_EB_FileStorage.StorageOption_BR == SKS_EB_BankIntegOptWithNoLicense::FileHubLocalEnumValue)
                {
                    if (strlen(SKS_PP_BankScr.BRPath) == 0)
                    {
                        error("@SKS253"); //required field
                        valid = false;
                    }
                    else if(!SKS_EB_FileHub::directoryExistsForm(SKS_PP_BankScr.BRPath))
                    {
                        error(strFmt("@SYS55831", SKS_PP_BankScr.BRPath)); //file path does not exist
                        valid = false;
                    }
                    else
                    {
                        locSKS_BR_File = SKS_BR_File::construct(SKS_EB_FileStorage.StorageOption_BR ==  SKS_EB_BankIntegOptWithNoLicense::BankFabricEnumValue ? SKS_BF_BankIntType::BankFabric : SKS_BF_BankIntType::FileHubLocal );
                        validationMessage = locSKS_BR_File.validateBRPath(SKS_PP_BankScr, null, false, SKS_EB_FileStorage);
                        if (strlen(validationMessage) != 0)
                        {
                            error(validationMessage);
                            valid = false;
                        }
                    }
                }
                return valid;
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>CCR_AlternateBankID</DataField>
						<Methods>
							<Method>
								<Name>validate</Name>
								<Source><![CDATA[
            /// <summary>
            /// SKS_FDD_13903
            /// </summary>
            /// <returns>boolean</returns>
            public boolean validate()
            {
                SKS_PP_Bank locSKS_PP_Bank;
                boolean ret;

                ret = super();
                if(strStartsWith(this.getValue(),  ' ') || strEndsWith(this.getValue(), ' ') || strStartsWith(this.getValue(), '\t') || strEndsWith(this.getValue(),'\t'))
                {
                    error(strFmt("@SKS3842", this.labelText()));
                    ret = false;
                }
                if(ret && strLen(this.getValue()) > 0 )
                {
                    select firstonly crossCompany DataAreaId, CCR_AlternateBankID,
                            BankAccountID, RecId from locSKS_PP_Bank
                        where locSKS_PP_Bank.CCR_AlternateBankID == SKS_PP_BankScr.CCR_AlternateBankID
                            && (locSKS_PP_Bank.BankAccountId != SKS_PP_BankScr.BankAccountId  //this clause and the next are becuse if you entered a valid id,
                                || locSKS_PP_Bank.dataAreaId != SKS_PP_BankScr.dataAreaId);// then a used id, you would become trapped in this field.
                    if(locSKS_PP_Bank)
                    {
                        error(strFmt("@SKS2163", locSKS_PP_Bank.company(), locSKS_PP_Bank.BankAccountId));
                        ret = false;
                    }
                }
                return ret;
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>CCR_BankFabricLocation</DataField>
						<Methods>
							<Method>
								<Name>validate</Name>
								<Source><![CDATA[
            /// <summary>
            /// validate method
            /// </summary>
            /// <returns>boolean</returns>
            public boolean validate()
            {
                boolean valid = true;
                str validationMessage;
                SKS_CCR_File locSKS_CCR_File;

                SKS_PP_BankScr.CCR_BankFabricLocation = SKS_CCR_File::removeLastPathSlash(SKS_PP_BankScr.CCR_BankFabricLocation);
                SKS_PP_BankScr.CCR_BankFabricLocation = strLTrim(SKS_PP_BankScr.CCR_BankFabricLocation);

                valid = super();

                if (valid)
                {
                    locSKS_CCR_File = SKS_CCR_File::construct(SKS_EB_FileStorage.StorageOption_CCR ==  SKS_EB_BankIntegOptWithNoLicense::BankFabricEnumValue ? SKS_BF_BankIntType::BankFabric : SKS_BF_BankIntType::FileHubLocal);
                    validationMessage = locSKS_CCR_File.validateCCR_Path(SKS_PP_BankScr, null, false, SKS_EB_FileStorage);
                    if (strlen(validationMessage) != 0)
                    {
                        error(validationMessage);
                        valid = false;
                    }
                }
                return valid;
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>CCR_FormatID</DataField>
						<Methods>
							<Method>
								<Name>validate</Name>
								<Source><![CDATA[
            public boolean validate()
            {
                boolean valid;
                str validateMessage;
                SKS_PP_Bank tmpSKS_PP_Bank;
                BankAccountTable tmpBankAccount;
                SKS_CCR_File locSKS_CCR_File;
                ;

                valid = super();

                if (valid && SKS_PP_BankScr.CCR_FormatID != '')
                {
                    if(strlen(BankAccountSrc.AccountNum) == 0 && strLen(BankAccountSrc.IBAN) == 0)
                    {
                        error("@SKS:SKGCCRRequiresBankAccountnumberOrIBAN");
                        valid = false;
                    }
                    else
                    {
                        if(strLen(BankAccountSrc.AccountID) > 0)
                        {
                            tmpSKS_PP_Bank = SKS_EB_Bank::ValidateBankAcct(SKS_PP_BankScr, BankAccountSrc);
                            if(tmpSKS_PP_Bank)
                            {
                                error(strFmt("@SKS:SKGCCRBankAccountnumberMustUnique", BankAccountSrc.AccountNum, tmpSKS_PP_Bank.BankAccountId, tmpSKS_PP_Bank.dataAreaId));
                                return false;
                            }
                        }
                        tmpSKS_PP_Bank = null;
                        tmpBankAccount = null;
                        if(strLen(BankAccountSrc.IBAN) > 0)
                        {
                            tmpSKS_PP_Bank = SKS_EB_Bank::ValidateIBANBankAcct(SKS_PP_BankScr, BankAccountSrc);
                            if(tmpSKS_PP_Bank)
                            {

                                error(strFmt("@SKS:SKGCCRIBANMustUnique", BankAccountSrc.IBAN, tmpSKS_PP_Bank.BankAccountId, tmpSKS_PP_Bank.dataAreaId));
                                return false;
                            }
                        }
                        // If other bank accounts use this path, there are rules related to formatID and path
                        locSKS_CCR_File = SKS_CCR_File::construct(SKS_EB_FileStorage.StorageOption_CCR ==  SKS_EB_BankIntegOptWithNoLicense::BankFabricEnumValue ? SKS_BF_BankIntType::BankFabric : SKS_BF_BankIntType::FileHubLocal);
                        validateMessage = locSKS_CCR_File.validateCCR_Path(SKS_PP_BankScr, null, false,SKS_EB_FileStorage);
                        if (strlen(validateMessage) != 0)
                        {
                            error(validateMessage + num2char(10) + num2char(10) +
                                strFmt("@SKS544", "@SKS547", "@SKS:SKGCCReconciliation"), "@SKS179");
                            valid = false;
                        }
                    }
                }
                return valid;
            }

]]></Source>
							</Method>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            /// <summary>
            /// SKS_FDD_13903
            /// </summary>
            public void modified()
            {
                super();
                element.ccr_setFormatDesc();
                element.setCCRControlProperties();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>CCR_FromSetup</DataField>
						<Methods>
							<Method>
								<Name>validate</Name>
								<Source><![CDATA[
            /// <summary>
            /// SKS_FDD_13903
            /// </summary>
            /// <returns>boolean</returns>
            public boolean validate()
            {
                boolean valid;
                str validateMessage;
                SKS_CCR_File locSKS_CCR_File;
                ;

                valid = super();

                if (valid)
                {
                    locSKS_CCR_File = SKS_CCR_File::construct(SKS_EB_FileStorage.StorageOption_CCR ==  SKS_EB_BankIntegOptWithNoLicense::BankFabricEnumValue ? SKS_BF_BankIntType::BankFabric : SKS_BF_BankIntType::FileHubLocal);
                    // If other bank accounts use this path, there are rules related to formatID and path
                    validateMessage = locSKS_CCR_File.validateCCR_Path(SKS_PP_BankScr, null, false, SKS_EB_FileStorage);
                    if (strlen(validateMessage) != 0)
                    {
                        error(validateMessage);
                        valid = false;
                    }
                }

                return valid;
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>CCR_IsCCReconciliation</DataField>
						<Methods>
							<Method>
								<Name>validate</Name>
								<Source><![CDATA[
            /// <summary>
            /// SKS_FDD_13903 - Show the pop-up when the user is trying to un-check the CCR_IsCCReconciliation check box
            /// </summary>
            /// <returns>boolean</returns>
            public boolean validate()
            {
                SKS_PP_Bank     sks_pp_bankOrig = SKS_PP_BankScr.orig();
                DialogButton    dialogButton;
                boolean ret;
        
                ret = super();
                if(sks_pp_bankOrig.CCR_IsCCReconciliation == NoYes::Yes && SKS_PP_BankScr.CCR_IsCCReconciliation == NoYes::No)
                {
                    dialogButton = Box::yesNo("@SKS:SKGCCRUncheckingLog", dialogButton::No);
                    if(dialogButton == DialogButton::Yes)
                    {
                        SKS_PP_BankScr.CCR_FormatID = '';
                    }
                    else
                    {
                        return false;
                    }
                }
                if(sks_pp_bankOrig)
                {
                    if(sks_pp_bankOrig.CCR_IsCCReconciliation == NoYes::No && SKS_PP_BankScr.CCR_IsCCReconciliation == NoYes::Yes)
                    {
                        SKS_PP_BankScr.BRFormatID = '';
                    }
                }
        
                return ret;
            }

]]></Source>
							</Method>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            /// <summary>
            /// SKS_FDD_13903
            /// </summary>
            public void modified()
            {
                super();
                if(SKS_PP_BankScr.CCR_IsCCReconciliation == NoYes::Yes)
                {
                    EBR.visible(false);
                    EBRCustSettelement.visible(false);
                    CCR.visible(true);
                }
                else
                {
                    EBR.visible(true);
                    EBRCustSettelement.visible(true);
                    CCR.visible(false);
                }

                element.setCCRControlProperties(); // SKS_16830
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>CCR_Path</DataField>
						<Methods>
							<Method>
								<Name>validate</Name>
								<Source><![CDATA[
            /// <summary>
            /// SKS_FDD_13903
            /// </summary>
            /// <returns>boolean</returns>
            public boolean validate()
            {
                boolean valid = true;
                str validationMessage;
                SKS_CCR_File locSKS_CCR_File;
                ;
                SKS_PP_BankScr.CCR_Path = SKS_CCR_File::removeLastPathSlash(SKS_PP_BankScr.CCR_Path);
                SKS_PP_BankScr.CCR_Path = strLTrim(SKS_PP_BankScr.CCR_Path);

                valid = super();

                if (valid)
                {
                    if(!SKS_EB_FileHub::directoryExistsForm(SKS_PP_BankScr.CCR_Path) && SKS_EB_FileStorage.StorageOption_CCR == SKS_EB_BankIntegOptWithNoLicense::FileHubLocalEnumValue)
                    {
                        error(strFmt("@SYS55831", SKS_PP_BankScr.CCR_Path)); //file path does not exist
                        valid = false;
                    }
                    else
                    {
                        locSKS_CCR_File = SKS_CCR_File::construct(SKS_EB_FileStorage.StorageOption_CCR ==  SKS_EB_BankIntegOptWithNoLicense::BankFabricEnumValue ? SKS_BF_BankIntType::BankFabric : SKS_BF_BankIntType::FileHubLocal);
                        validationMessage = locSKS_CCR_File.validateCCR_Path(SKS_PP_BankScr, null, false, SKS_EB_FileStorage);
                        if (strlen(validationMessage) != 0)
                        {
                            error(validationMessage);
                            valid = false;
                        }
                    }
                }
                return valid;
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>IHB_AppropriationfeeID</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            /// <summary>
            /// Enable and disable ledger account field if appropriation fee id
            /// </summary>
            // FDD 9848 OD InterestCalculation
            public void modified()
            {
                super();
                if (SKS_PP_BankScr.IHB_AppropriationfeeID == '')
                {
                    SKS_PP_BankScr_IHB_AppropriationFeeLedgerAccount.mandatory(false);
                }
                else
                {
                    if(SKS_PP_BankScr.IHB_AppropriationFeeLedgerAccount == 0)
                    {
                        SKS_PP_BankScr_IHB_AppropriationFeeLedgerAccount.mandatory(true);
                    }
                }
                element.checkIHBFieldsCanChange(SKS_PP_BankScr);//SKS_Bug_12085
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>IHB_CalculationFrequencyEndMonth</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            //SKS_Bug_12085 -->
            public void modified()
            {
                super();
                element.checkIHBFieldsCanChange(SKS_PP_BankScr);
            }
            //SKS_Bug_12085 <--

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>IHB_CalculationFrequencyStartMonth</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            //SKS_Bug_12085 -->
            public void modified()
            {
                super();
                element.checkIHBFieldsCanChange(SKS_PP_BankScr);
            }
            //SKS_Bug_12085 <--

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>IHB_InterestCalcFreq</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();
                if (SKS_PP_BankScr.IHB_InterestCalcFreq == SKS_IHB_InterestCalcFreq::Month)
                {
                    SKS_PP_BankScr.IHB_CalculationFrequencyStartMonth = MonthsOfYear::None;
                    SKS_PP_BankScr.IHB_CalculationFrequencyEndMonth   = MonthsOfYear::None;
                    SKS_PP_BankScr_IHB_CalculationFrequencyStartMonth.enabled(false);
                    SKS_PP_BankScr_IHB_CalculationFrequencyEndMonth.enabled(false);
                }
                else
                {
                    SKS_PP_BankScr_IHB_CalculationFrequencyStartMonth.enabled(true);
                    SKS_PP_BankScr_IHB_CalculationFrequencyEndMonth.enabled(true);
                }
                element.checkIHBFieldsCanChange(SKS_PP_BankScr);//SKS_Bug_12085
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>IHB_InterestCalcMethod</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            /// <summary>
            /// Enable disable ihb interest repayment field
            /// </summary>
            /// FDD-11448
            public void modified()
            {
                super();
                if (SKS_PP_BankScr.IHB_InterestCalcMethod == SKS_IHB_InterestCalcMeth::Compound)
                {
                    IHBInterestRate_IHB_InterestRepaymentNonCompounded.enabled(false);
                    IHBInterestRate_IHB_InterestRepaymentNonCompounded.mandatory(false);
                    SKS_PP_BankScr.IHB_InterestRepaymentNonCompounded = '';
                }
                else
                {
                    IHBInterestRate_IHB_InterestRepaymentNonCompounded.enabled(true);
                    IHBInterestRate_IHB_InterestRepaymentNonCompounded.mandatory(true);
                }
                element.checkIHBFieldsCanChange(SKS_PP_BankScr);//SKS_Bug_12085
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>IHB_InterestDaysCalcMethod</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            //SKS_Bug_12085 -->
            public void modified()
            {
                super();
                element.checkIHBFieldsCanChange(SKS_PP_BankScr);
            }
            //SKS_Bug_12085 <--

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>IHB_InterestFilePath</DataField>
						<Methods>
							<Method>
								<Name>validate</Name>
								<Source><![CDATA[
            /// <summary>
            /// validate method
            /// </summary>
            /// <returns>boolean</returns>
            public boolean validate()
            {
                boolean ret;

                SKS_PP_BankScr.IHB_InterestFilePath = SKS_BR_File::removeLastPathSlash(SKS_PP_BankScr.IHB_InterestFilePath);
                ret = super();

                if(ret)
                {
                    ret = SKS_EB_FileHub::directoryExistsForm(SKS_PP_BankScr.IHB_InterestFilePath);
                }

                return ret;
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>IHB_InterestMarkupId</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            //SKS_Bug_12085 -->
            public void modified()
            {
                super();
                element.checkIHBFieldsCanChange(SKS_PP_BankScr);
            }
            //SKS_Bug_12085 <--

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>IHB_InterestRateId</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            //SKS_Bug_12085 -->
            public void modified()
            {
                super();
                element.checkIHBFieldsCanChange(SKS_PP_BankScr);
            }
            //SKS_Bug_12085 <--

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>IHB_OverdraftInterestID</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            /// <summary>
            /// enable and disable ledger account field if overdraft interest id is empty
            /// </summary>
            // FDD 9848 OD InterestCalculation
            public void modified()
            {
                super();

                if (SKS_PP_BankScr.IHB_OverdraftInterestID == '')
                {
                    SKS_PP_BankScr_IHB_OverdraftInterestLedgerAccount.mandatory(false);
                }
                else
                {
                    if(SKS_PP_BankScr.IHB_OverdraftInterestLedgerAccount == 0)
                    {
                        SKS_PP_BankScr_IHB_OverdraftInterestLedgerAccount.mandatory(true);
                    }
                }
                element.checkIHBFieldsCanChange(SKS_PP_BankScr);//SKS_Bug_12085

            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>IHB_UseInterestCalcDefaults</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            /// <summary>
            /// modified method
            /// </summary>
            public void modified()
            {
                super();
                element.enableInterestCalculationFields();
                element.defaultInterestCalculationValuesFromSetup();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>PP01</DataField>
						<Methods>
							<Method>
								<Name>validate</Name>
								<Source><![CDATA[
            public boolean validate()
            {
                boolean ret;

                ret = super();

                if(subStr(strupr(SKS_PP_FileFormatSrc.BankPP01Mask),0,1) == 'U')
                {
                    SKS_PP_BankScr.PP01 = strupr(SKS_PP_BankScr.PP01);
                }
                else if (subStr(SKS_PP_FileFormatSrc.BankPP01Mask,0,1) == '9')
                {
                    if (!element.isPPNumeric(SKS_PP_BankScr.PP01))
                    {
                        Box::warning("@SKS204");
                        ret = false;
                    }
                }

                return ret;
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>PP02</DataField>
						<Methods>
							<Method>
								<Name>validate</Name>
								<Source><![CDATA[
            public boolean validate()
            {
                boolean ret;

                ret = super();

                if(subStr(strupr(SKS_PP_FileFormatSrc.BankPP02Mask),0,1) == 'U')
                {
                    SKS_PP_BankScr.PP02 = strupr(SKS_PP_BankScr.PP02);
                }
                else if (subStr(SKS_PP_FileFormatSrc.BankPP02Mask,0,1) == '9')
                {
                    if (!element.isPPNumeric(SKS_PP_BankScr.PP02))
                    {
                        Box::warning("@SKS204");
                        ret = false;
                    }
                }

                return ret;
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>PP03</DataField>
						<Methods>
							<Method>
								<Name>validate</Name>
								<Source><![CDATA[
            public boolean validate()
            {
                boolean ret;

                ret = super();

                if(subStr(strupr(SKS_PP_FileFormatSrc.BankPP03Mask),0,1) == 'U')
                {
                    SKS_PP_BankScr.PP03 = strupr(SKS_PP_BankScr.PP03);
                }
                else if (subStr(SKS_PP_FileFormatSrc.BankPP03Mask,0,1) == '9')
                {
                    if (!element.isPPNumeric(SKS_PP_BankScr.PP03))
                    {
                        Box::warning("@SKS204");
                        ret = false;
                    }
                }

                return ret;
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>PP04</DataField>
						<Methods>
							<Method>
								<Name>validate</Name>
								<Source><![CDATA[
            public boolean validate()
            {
                boolean ret;

                ret = super();

                if(subStr(strupr(SKS_PP_FileFormatSrc.BankPP04Mask),0,1) == 'U')
                {
                    SKS_PP_BankScr.PP04 = strupr(SKS_PP_BankScr.PP04);
                }
                else if (subStr(SKS_PP_FileFormatSrc.BankPP04Mask,0,1) == '9')
                {
                    if (!element.isPPNumeric(SKS_PP_BankScr.PP04))
                    {
                        Box::warning("@SKS204");
                        ret = false;
                    }
                }

                return ret;
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>PPArchive</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();
                element.setPPControlProperties();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>PPArchivePath</DataField>
						<Methods>
							<Method>
								<Name>validate</Name>
								<Source><![CDATA[
            public boolean validate()
            {
                boolean ret;
                ;

                SKS_PP_BankScr.PPArchivePath = SKS_BR_File::removeLastPathSlash(SKS_PP_BankScr.PPArchivePath);
                ret = super();

                if(ret && SKS_EB_FileStorage.StorageOption_PP == SKS_EB_BankIntegOptWithNoLicense::FileHubLocalEnumValue)
                {
                    ret = SKS_EB_FileHub::directoryExistsForm(SKS_PP_BankScr.PPArchivePath);
                }

                return ret;
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>PPFileName</DataField>
						<Methods>
							<Method>
								<Name>validate</Name>
								<Source><![CDATA[
            public boolean validate()
            {
                boolean ret;
                ret = super();

                if(ret)
                {
                    ret = SKS_EB_FileHub::validateFileName(SKS_PP_BankScr.PPFileName);
                }

                return ret;
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>PPFormatId</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                SKS_PP_BankScr.PP01 = '';
                SKS_PP_BankScr.PP02 = '';
                SKS_PP_BankScr.PP03 = '';
                SKS_PP_BankScr.PP04 = '';

                element.reloadFormatID();

            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>PPPath</DataField>
						<Methods>
							<Method>
								<Name>validate</Name>
								<Source><![CDATA[
            public boolean validate()
            {
                boolean ret;

                SKS_PP_BankScr.PPPath = SKS_BR_File::removeLastPathSlash(SKS_PP_BankScr.PPPath);
                ret = super();

                if(ret)
                {
                    ret = SKS_EB_FileHub::directoryExistsForm(SKS_PP_BankScr.PPPath);
                }

                return ret;
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>UseeBankRecBankStatementMonitorDefaults</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                if(SKS_PP_BankScr.UseeBankRecBankStatementMonitorDefaults)
                {
                    SKS_PP_BankScr.BRBankHolidayGroupID = SKS_PP_Setup.BRBankHolidayGroupID;
                    SKS_PP_BankScr.BRNotifyStatements   = SKS_PP_Setup.BRNotifyStatements;
                    SKS_PP_BankScr.BRNotifyMinusDays    = SKS_PP_Setup.BRNotifyMinusDays;
                    SKS_PP_BankScr.BRBatchJobId         = SKS_PP_Setup.BRBatchJobId;
                    SKS_PP_BankScr.BREmail              = SKS_PP_Setup.BREmail;
                }
                else
                {
                    if(!SKS_PP_BankScr.BRCreateBankStatementsIfNoTrans)
                    {
                        SKS_PP_BankScr.BRNotifyStatements = NoYes::No;
                    }
                }
                element.setBRControlProperties();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
				</Fields>
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>RefreshSetup</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            ;

            super();

            element.loadFromSetup();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>PPSetupCommunications</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            Args args = new Args();
            FormRun formrun;
            ;

            args.parmObject( formrun);
            args.caller(element);
            formrun = new MenuFunction( menuitemdisplaystr( SKS_EB_COMMUNICATIONS ), MenuItemType::Display).create(args);
            formrun.run();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>PPFormatId</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            element.PPFormatIdLookup(this);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SetupDefaults</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();

            if(SKS_PP_BankScr.PPFromSetup)
            {
                element.loadFromSetup();
            }

            element.validateSetupDefaults();
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SKS_PP_BankScr_PPBankFabricLocation</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        /// <summary>
        /// lookup method
        /// </summary>
        public void lookup()
        {
            Query query = new Query();
            QueryBuildDataSource qbds;
            QueryBuildRange queryBuildRange;
            SysTableLookup sysTableLookup;

            sysTableLookup = SysTableLookup::newParameters(tablenum(SKS_BF_TmpLookupTable),this);
            sysTableLookup.addLookupfield(fieldnum(SKS_BF_TmpLookupTable,Name));
            sysTableLookup.addLookupfield(fieldnum(SKS_BF_TmpLookupTable,Description));
            qbds = query.addDataSource(tableNum(SKS_BF_TmpLookupTable));
            queryBuildRange = qbds.addRange(fieldnum(SKS_BF_TmpLookupTable,Name));
            sysTableLookup.parmTmpBuffer(SKS_BF_TmpLookupTable::construct(SKS_BF_FileLocCategory::PosPay));
            sysTableLookup.performFormLookup();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>HeaderTrailerID</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
            boolean retVal;
            SKS_PP_HeaderTrailer HeadTrail;
            ;

            ret = super();
            retVal = False;

            While Select *
                From HeadTrail
                Where HeadTrail.FormatId == SKS_PP_BankScr.PPFormatId
                    && HeadTrail.HeadTrailId == SKS_PP_BankScr.PPHeadTrailId
            {
                retVal = true;
            }

            //Debug Statement
            //Box::info(This.valueStr());

            if (retVal == False)
            {
                Box::Warning("@SKS199");//message box
                ret = False;
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>btnRefreshFromSetup</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {

            super();

            //SKS_ElectronicBankAPIChanges
            SKS_BR_FileFormat SKS_BR_FileFormat;

            select firstonly SKS_BR_FileFormat where SKS_BR_FileFormat.FormatID == SKS_PP_BankScr.BRFormatID;

            if (SKS_BR_FileFormat.RecId && SKS_BR_FileFormat.APIFormatType != SKS_EB_APIFormatType::API)
            {
                element.refreshFromBRSetup();
            }
			else
            {
                SKS_PP_BankScr.BRPath = '';
                SKS_PP_BankScr.BRBankFabricLocation = '';
			}
            //SKS_ElectronicBankAPIChanges
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>BRSetupCommunications</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            Args args = new Args();
            FormRun formrun;
            ;

            args.parmObject( formrun);
            args.caller(element);
            formrun = new MenuFunction( menuitemdisplaystr( SKS_EB_COMMUNICATIONS ), MenuItemType::Display).create(args);
            formrun.run();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>CreateBatch</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// SKS_BR5
        /// </summary>
        public void clicked()
        {
            super();
            SKS_BR_Batch::createBatch(element);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SKS_PP_BankScr_BRFormatID</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        /// modified method
        /// </summary>
        /// <returns>boolean</returns>
        public boolean modified()
        {
            boolean ret;
            SKS_BR_FileFormat locSKS_BR_FileFormat;

            ret = super();
            if(ret)
            {
                element.setBRControlProperties();
                //This is needed because if you switch between API formats and FILE formats,
                //  you may have blank fields, or fileds that need blanked and the refresh handles both
                if(SKS_PP_BankScr.BRFormatID && SKS_PP_BankScr.BRFromSetup)
                {
                        element.refreshFromBRSetup();
                }

                select APIFormatType from locSKS_BR_FileFormat where locSKS_BR_FileFormat.FormatID == SKS_PP_BankScr.BRFormatID;
                if(locSKS_BR_FileFormat.APIFormatType == SKS_EB_APIFormatType::API)
                {
                    SKS_PP_BankScr.BRPath = '';
                    SKS_PP_BankScr.BRBankFabricLocation = '';
                }
            }
            
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>UseEBRSetupDefaults</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();

            if(SKS_PP_BankScr.BRFromSetup)
            {
                //SKS_ElectronicBankAPIChanges
                SKS_BR_FileFormat SKS_BR_FileFormat;

                select firstonly SKS_BR_FileFormat where SKS_BR_FileFormat.FormatID == SKS_PP_BankScr.BRFormatID;

                if (SKS_BR_FileFormat.RecId && SKS_BR_FileFormat.APIFormatType != SKS_EB_APIFormatType::API)
                {
                    element.refreshFromBRSetup();
                }
                else
                {
                    SKS_PP_BankScr.BRPath = '';
                    SKS_PP_BankScr.BRBankFabricLocation = '';
                }
                //SKS_ElectronicBankAPIChanges
            }

            element.setBRControlProperties();

            return ret;

        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SKS_PP_BankScr_BRBankFabricLocation</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        /// <summary>
        /// lookup method
        /// </summary>
        public void lookup()
        {
            Query query = new Query();
            QueryBuildDataSource qbds;
            QueryBuildRange queryBuildRange;
            SysTableLookup sysTableLookup;

            sysTableLookup = SysTableLookup::newParameters(tablenum(SKS_BF_TmpLookupTable),this);
            sysTableLookup.addLookupfield(fieldnum(SKS_BF_TmpLookupTable,Name));
            sysTableLookup.addLookupfield(fieldnum(SKS_BF_TmpLookupTable,Description));
            qbds = query.addDataSource(tableNum(SKS_BF_TmpLookupTable));
            queryBuildRange = qbds.addRange(fieldnum(SKS_BF_TmpLookupTable,Name));
            sysTableLookup.parmTmpBuffer(SKS_BF_TmpLookupTable::construct(SKS_BF_FileLocCategory::BR));
            sysTableLookup.performFormLookup();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SKS_PP_BANK_BRCreateBankStatements</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            if(!SKS_PP_BankScr.BRCreateBankStatements)
            {
                SKS_PP_BankScr.BRCreateBankStatementsIfNoTrans = NoYes::No;
                if(!SKS_PP_BankScr.UseeBankRecBankStatementMonitorDefaults)
                {
                    SKS_PP_BankScr.BRNotifyStatements = NoYes::No;
                }
            }
            element.setBRControlProperties();
            ret = super();
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>MissingBankStatements_BRCreateBankStatementsIfNoTrans</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        /// BR5 enabling notify statements if both create statements and create statements if no transactions marked
        /// </summary>
        /// <returns>boolean</returns>
        public boolean modified()
        {
            boolean ret;

            ret = super();
            if(!SKS_PP_BankScr.BRCreateBankStatementsIfNoTrans && !SKS_PP_BankScr.UseeBankRecBankStatementMonitorDefaults)
            {
                SKS_PP_BankScr.BRCreateBankStatementsIfNoTrans = NoYes::No;
            }
            element.setBRControlProperties();
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SKS_PP_BANK_BRAutoReconcile</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();
            if(this.checked() && !sks_pp_setup.BRAutomaticallyPostGL)
            {
                info("@SKS2928");
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>MissingBankStatements_BRBatchJobId</Name>
				<Type>ReferenceGroup</Type>
				<Methods>
					<Method>
						<Name>lookupReference</Name>
						<Source><![CDATA[
        /// <summary>
        /// SKS_BR5
        /// </summary>
        /// <returns>Returns MissingBankStatements_BRBatchJobId</returns>
        public Common lookupReference()
        {
            return SKS_BR_BankStatementMonitor::lookupReference(MissingBankStatements_BRBatchJobId);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AlternateBankID</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            SKS_PP_Bank sks_PP_Bank;
            boolean ret;
            SKS_BR_FileFormat locSKS_BR_FileFormat;
            BankAccountTable locBankAccountTable;

            ret = super();
            if(ret && strLen(this.text()) > 0 && SKS_PP_BankScr.BRFormatID == '')
            {
                error("@SKS:SKGBRAltAcctNbrValidationFailedForNoFmtIDMsg");
                ret = false;
            }
            else if(ret && strLen(this.text()) > 0 )
            {
                //locSKS_BR_FileFormat.BR_CAMT053MulitCurrencyAccounts
                select firstonly BR_CAMT053MulitCurrencyAccounts, RecId from locSKS_BR_FileFormat where locSKS_BR_FileFormat.FormatID == SKS_PP_BankScr.BRFormatID;
                if(locSKS_BR_FileFormat.BR_CAMT053MulitCurrencyAccounts == NoYes::Yes)
                {
                    select firstonly * from sks_PP_Bank 
                        where sks_PP_Bank.AlternateBankID == this.text()
                            && sks_PP_Bank.BankAccountId != SKS_PP_BankScr.BankAccountId
                        join AccountNum, DataAreaId, RecId from locBankAccountTable
                            where locBankAccountTable.AccountID == sks_PP_Bank.BankAccountId
                        && locBankAccountTable.AccountNum != BankAccountSrc.AccountNum;
                    if(sks_PP_Bank)
                    {
                        error(strFmt("@SKS:SKGBRAltActIDValidationFailIDInUseForDifActMsg", sks_PP_Bank.company(), sks_PP_Bank.BankAccountId, locBankAccountTable.AccountNum));
                        ret = false;
                    }
                    else
                    {
                        select firstonly * from sks_PP_Bank
                        where sks_PP_Bank.AlternateBankID == this.text()
                            && sks_PP_Bank.BankAccountId != SKS_PP_BankScr.BankAccountId
                        join AccountNum, DataAreaId, RecId from locBankAccountTable
                            where locBankAccountTable.AccountID == sks_PP_Bank.BankAccountId
                            && locBankAccountTable.AccountNum == BankAccountSrc.AccountNum
                            && locBankAccountTable.CurrencyCode == BankAccountSrc.CurrencyCode;
                        if(sks_PP_Bank)
                        {
                            error(strFmt("@SKS:SKGBRAltActNbrAmbiguousBankAccountMsg", sks_PP_Bank.company()));
                            ret = false;
                        }
                    }

                }
                else
                {
                    select firstonly crossCompany * from sks_PP_Bank where sks_PP_Bank.AlternateBankID == this.text()
                        && sks_PP_Bank.BankAccountId != SKS_PP_BankScr.BankAccountId  //this clause and the next are becuse if you entered a valid id,
                        && sks_PP_Bank.dataAreaId != SKS_PP_BankScr.dataAreaId;// then a used id, you would become trapped in this field.
                    if(sks_PP_Bank)
                    {
                        error(strFmt("@SKS2163", sks_PP_Bank.company(), sks_PP_Bank.BankAccountId));
                        ret = false;
                    }
                }
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SKS_PP_BankScr_BROverrideDecimalPlaces</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        /// modified method
        /// </summary>
        /// <returns>boolean</returns>
        public boolean modified()
        {
            boolean ret;
    
            ret = super();
            if(ret)
            {
                element.setBRControlProperties();
            }
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>CustomerSettlementOptions_UseeBankRecCustSettlementSetupDefaults</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
    
            ret = super();
    
            if (SKS_PP_BankScr.UseeBankRecCustSettlementSetupDefaults == NoYes::Yes)
            {
                SKS_PP_BankScr_ds.object(fieldNum(SKS_PP_Bank, MatchingRulesGroupIdCustSettle)).allowEdit(false);
                SKS_PP_BankScr_ds.object(fieldNum(SKS_PP_Bank, InvoiceSearchCrossComp)).allowEdit(false);
                SKS_PP_BankScr_ds.object(fieldNum(SKS_PP_Bank, ApplyDiscOfImportFile)).allowEdit(false);
                SKS_PP_BankScr_ds.object(fieldNum(SKS_PP_Bank, DefaultDimensionFromInvoice)).allowEdit(false);
                SKS_PP_BankScr_ds.object(fieldNum(SKS_PP_Bank, AutoPostOnImportOptionPayEqualsInvoice)).allowEdit(false);
                SKS_PP_BankScr_ds.object(fieldNum(SKS_PP_Bank, AutoPostOnImportOptionInvOverpay)).allowEdit(false);
                SKS_PP_BankScr_ds.object(fieldNum(SKS_PP_Bank, AutoPostOnImportOptionInvShortpay)).allowEdit(false);
                element.enableBRCustSettlement(false); // CR-9479
            }
            else
            {
                SKS_PP_BankScr_ds.object(fieldNum(SKS_PP_Bank, MatchingRulesGroupIdCustSettle)).allowEdit(true);
                SKS_PP_BankScr_ds.object(fieldNum(SKS_PP_Bank, InvoiceSearchCrossComp)).allowEdit(true);
                SKS_PP_BankScr_ds.object(fieldNum(SKS_PP_Bank, ApplyDiscOfImportFile)).allowEdit(true);
                SKS_PP_BankScr_ds.object(fieldNum(SKS_PP_Bank, DefaultDimensionFromInvoice)).allowEdit(true);
                SKS_PP_BankScr_ds.object(fieldNum(SKS_PP_Bank, AutoPostOnImportOptionPayEqualsInvoice)).allowEdit(true);
                SKS_PP_BankScr_ds.object(fieldNum(SKS_PP_Bank, AutoPostOnImportOptionInvOverpay)).allowEdit(true);
                SKS_PP_BankScr_ds.object(fieldNum(SKS_PP_Bank, AutoPostOnImportOptionInvShortpay)).allowEdit(true);
                // CR-9479 -->
                element.enableBRCustSettlement(true);
                element.enableBRAutoPostInvoiceNotFound();
                // CR-9479 <--
            }
    
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>CustomerSettlementOptions_MatchingRulesGroupIdCustSettle</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        /// <summary>
        ///
        /// </summary>
        public void lookup()
        {
            SKS_SplitARBRMatchingGroups::filterMatchingGroupLookup(this, SKS_LB_MatchingRulesGroupType::BR);            
        }

]]></Source>
					</Method>
					<Method>
						<Name>jumpRef</Name>
						<Source><![CDATA[
        /// <summary>
        ///
        /// </summary>
        public void jumpRef()
        {
            SKS_SplitARBRMatchingGroups::matchingGroupJumpRef(SKS_PP_BankScr.MatchingRulesGroupIdCustSettle, element);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>CustomerSettlementOptions_BRCustRemitAnalysisRuleGroup</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>jumpRef</Name>
						<Source><![CDATA[
        /// <summary>
        /// Commit changes prior to executing the jumpRef
        /// </summary>
        public void jumpRef()
        {
            SKS_PP_BankScr.update();
    
            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>CCRSetupCommunicationsMenuItem</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            Args args = new Args();
            FormRun formrun;
            ;

            args.parmObject( formrun);
            args.caller(element);
            formrun = new MenuFunction( menuitemdisplaystr( SKS_EB_COMMUNICATIONS ), MenuItemType::Display).create(args);
            formrun.run();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>CCR_FormatID</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        /// modified method
        /// </summary>
        /// <returns>boolean</returns>
        public boolean modified()
        {
            boolean ret;
    
            ret = super();
            if(ret)
            {
                element.setCCRControlProperties();
            }
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>CCR_UseSetupDefaults</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
    
            ret = super();
    
            if(SKS_PP_BankScr.CCR_FromSetup)
            {
                element.ccr_refreshFromCCRSetup();
            }
    
            element.setCCRControlProperties();
    
            return ret;
    
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SKS_PP_BankScr_CCR_BankFabricLocation</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            Query query = new Query();
            QueryBuildDataSource qbds;
            QueryBuildRange queryBuildRange;
            SysTableLookup sysTableLookup;

            sysTableLookup = SysTableLookup::newParameters(tablenum(SKS_BF_TmpLookupTable),this);
            sysTableLookup.addLookupfield(fieldnum(SKS_BF_TmpLookupTable,Name));
            sysTableLookup.addLookupfield(fieldnum(SKS_BF_TmpLookupTable,Description));
            qbds = query.addDataSource(tableNum(SKS_BF_TmpLookupTable));
            queryBuildRange = qbds.addRange(fieldnum(SKS_BF_TmpLookupTable,Name));
            sysTableLookup.parmTmpBuffer(SKS_BF_TmpLookupTable::construct(SKS_BF_FileLocCategory::CCR));
            sysTableLookup.performFormLookup();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>CCR_AutoReconcile</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
    
            ret = super();
            if(this.checked() && !sks_pp_setup.CCRAutomaticallyPostGL)
            {
                info("@SKS2928");
            }
    
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>CCR_AlternateBankID</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            SKS_PP_Bank sks_PP_Bank;
            boolean ret;
    
            ret = super();
            if(ret && strLen(this.text()) > 0 )
            {
                select firstonly crossCompany * from sks_PP_Bank where sks_PP_Bank.CCR_AlternateBankID == this.text()
                    && sks_PP_Bank.BankAccountId != SKS_PP_BankScr.BankAccountId  //this clause and the next are becuse if you entered a valid id,
                    && sks_PP_Bank.dataAreaId != SKS_PP_BankScr.dataAreaId;// then a used id, you would become trapped in this field.
                if(sks_PP_Bank)
                {
                    error(strFmt("@SKS2163", sks_PP_Bank.company(), sks_PP_Bank.BankAccountId));
                    ret = false;
                }
            }
    
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SKS_PP_BankScr_InhouseBank</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        /// IHB_3.3.18 SKS 9536
        /// </summary>
        /// <returns>boolean</returns>
        public boolean modified()
        {
            boolean ret;

            ret = super();
            if(SKS_PP_BankScr.SKS_IHBInhouseBank == NoYes::Yes)
            {
                element.validateLinkedIHB();
            }
            else
            {
                element.sks_IHBenableInHouseBank();
                if(SKS_PP_BankScr.SKS_IHBLinkedinhousebankcompany != '' || SKS_PP_BankScr.SKS_IHBLinkedinhousebankaccount != '')
                {
                    if (Box::yesNo("@SKS:SKGIHBUnlink", DialogButton::Yes))
                    {
                        element.validateIHBVendorNettingSwitchBoard(); // FDD-18672 - IHB Intercompany netting ERP outside of D365
                        element.validateLinkedIHB();
                    }
                    else
                    {
                        SKS_PP_BankScr.SKS_IHBInhouseBank = NoYes::Yes;
                        element.sks_IHBenableInHouseBank();
                    }
                }
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SKS_PP_BankScr_Linkedinhousebankcompany</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        /// modified method
        /// </summary>
        /// <returns>boolean</returns>
        public boolean modified()
        {
            boolean ret;

            ret = super();
            SKS_PP_BankScr.SKS_IHBLinkedinhousebankaccount = '';

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SKS_PP_BankScr_Linkedinhousebankaccount</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        /// <summary>
        /// lookup method
        /// </summary>
        public void lookup()
        {
            PmfTableLookupExtended  sysTableLookup;
            Query                   query;
            QueryBuildDataSource    queryBuildDataSource;
            Container               companyList = CustVendOpenTransManager::findSharedServiceCompanies(curext());
            int                     i;

            sysTableLookup     = PmfTableLookupExtended::newParameters(tablenum(SKS_PP_Bank),this);
            query = new Query();

            queryBuildDataSource = query.addDataSource(tablenum(SKS_PP_Bank));
            queryBuildDataSource.addRange(fieldNum(SKS_PP_Bank, SKS_IHBInhouseBank)).value(queryValue(Noyes::yes));
            queryBuildDataSource.addRange(fieldNum(SKS_PP_Bank, SKS_IHBLinkedinhousebankaccount)).value(SysQuery::valueEmptyString());//Bug 10096

            sysTableLookup.addLookupfield(fieldnum(SKS_PP_Bank,BankAccountId));

            query.allowCrossCompany(true);
            query.clearCompanyRange();
            if(SKS_PP_BankScr_Linkedinhousebankcompany.valueStr())
            {
                query.addCompanyRange(SKS_PP_BankScr_Linkedinhousebankcompany.valueStr());
            }
            else
            {
                for (i=1; i <= conLen(companyList); i++)
                {
                    query.addCompanyRange(conPeek(companyList, i));
                }
            }
            sysTableLookup.parmQuery(query);
            sysTableLookup.performFormLookup();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SKS_PP_BankScr_APEMFromSetup</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();

            if(SKS_PP_BankScr.APEMFromSetup)
            {
                element.loadEMailFromSetup();
            }

            element.disableEMail();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SKS_PP_BankScr_AP_EMFromSetup</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        /// Modified method for control.
        /// </summary>
        /// <returns>
        /// Boolean value.
        /// </returns>
        public boolean modified()
        {
            boolean ret;

            ret = super();

            if(SKS_PP_BankScr.AP_EMFromSetup)
            {
                element.sks_APLoadInternalContactInfoFromSetup();
            }
            element.sks_APdisableInternalContact();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SKS_PP_BankScr_IHB_UseTASSetupDefault</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        /// modified method
        /// </summary>
        /// <returns>boolean</returns>
        public boolean modified()
        {
            boolean ret;

            ret = super();
            element.enableTASParameter();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>InhouseBankAccountSetup_IHB_SendEmail</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        /// modified method
        /// </summary>
        /// <returns>boolean</returns>
        public boolean modified()
        {
            boolean ret;

            ret = super();
            element.setInhouseTab();
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>InhouseBankAccountSetup_IHB_CreateFile</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        /// modified method
        /// </summary>
        /// <returns>boolean</returns>
        public boolean modified()
        {
            boolean ret;

            ret = super();
            InhouseBankAccountSetup_IHB_FilePath.enabled(InhouseBankAccountSetup_IHB_CreateFile.value());
            InhouseBankAccountSetup_IHBBankFabricLocation.enabled(InhouseBankAccountSetup_IHB_CreateFile.value());
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>InhouseBankAccountSetup_IHBBankFabricLocation</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        /// <summary>
        ///
        /// </summary>
        public void lookup()
        {
            Query query = new Query();
            QueryBuildDataSource qbds;
            QueryBuildRange queryBuildRange;
            SysTableLookup sysTableLookup;

            sysTableLookup = SysTableLookup::newParameters(tablenum(SKS_BF_TmpLookupTable),this);
            sysTableLookup.addLookupfield(fieldnum(SKS_BF_TmpLookupTable,Name));
            sysTableLookup.addLookupfield(fieldnum(SKS_BF_TmpLookupTable,Description));
            qbds = query.addDataSource(tableNum(SKS_BF_TmpLookupTable));
            queryBuildRange = qbds.addRange(fieldnum(SKS_BF_TmpLookupTable,Name));
            sysTableLookup.parmTmpBuffer(SKS_BF_TmpLookupTable::construct(SKS_BF_FileLocCategory::BR));
            sysTableLookup.performFormLookup();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SKS_PP_BankScr_IHBInterestBankFabricLocation</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        /// <summary>
        ///
        /// </summary>
        public void lookup()
        {
            Query query = new Query();
            QueryBuildDataSource qbds;
            QueryBuildRange queryBuildRange;
            SysTableLookup sysTableLookup;

            sysTableLookup = SysTableLookup::newParameters(tablenum(SKS_BF_TmpLookupTable),this);
            sysTableLookup.addLookupfield(fieldnum(SKS_BF_TmpLookupTable,Name));
            sysTableLookup.addLookupfield(fieldnum(SKS_BF_TmpLookupTable,Description));
            qbds = query.addDataSource(tableNum(SKS_BF_TmpLookupTable));
            queryBuildRange = qbds.addRange(fieldnum(SKS_BF_TmpLookupTable,Name));
            sysTableLookup.parmTmpBuffer(SKS_BF_TmpLookupTable::construct(SKS_BF_FileLocCategory::InHouseBankInterestRate));
            sysTableLookup.performFormLookup();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SKS_PP_BankScr_IHB_OD_UseTASSetupDefault</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        /// enable and disable overdraft TAS parameters
        /// </summary>
        /// <returns>boolean</returns>
        // FDD 9848 OD InterestCalculation
        public boolean modified()
        {
            boolean ret;

            ret = super();

            element.enableOverdraftTASParameter();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SKS_PP_BankScr_IHB_OD_SendEmail</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        /// disable overdraft email fields if send email is unchecked
        /// </summary>
        /// <returns>boolean</returns>
        // FDD 9848 OD InterestCalculation
        public boolean modified()
        {
            boolean ret;

            ret = super();
            element.disableODEmailFields();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>SKS_PP_BankScr</Name>
			<Table>SKS_PP_Bank</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AccountType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AcctType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AlternateBankID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AltLBAcctLookup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>APContactEmail</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>APContactName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>APContactPhone</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>APEMAttachmentName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>APEMCompanyName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>APEMFromSetup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>APEMReplyToAddr</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>APEMReplytoName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>APEMTemplateAttach</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>APEMTemplateLanguage</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>APEMTemplateNoAttach</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ApplyDiscOfImportFile</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AP_EMFromSetup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AutoPostOnImportOptionInvOverpay</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AutoPostOnImportOptionInvShortpay</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AutoPostOnImportOptionPayEqualsInvoice</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankAccountId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BRAutoPostInvoiceNotFound</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BRAutoReconcile</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BRBankFabricLocation</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BRBankHolidayGroupID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BRBatchJobId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BRCreateBankStatements</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BRCreateBankStatementsIfNoTrans</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BRCustomerSearchAcrossCompany</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BRCustRemitAnalysisRuleGroup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BREmail</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BRFormatID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BRFromSetup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BRInCommID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BRInvoiceNotFound</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BRNotifyMinusDays</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BRNotifyStatements</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BROverrideDecimalPlaces</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BROverrideDecimalPlacesNumberOfDecimalPlaces</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BRPath</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CCR_AlternateBankID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CCR_AutoReconcile</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CCR_BankFabricLocation</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CCR_FormatID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CCR_FromSetup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CCR_InCommID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CCR_IsCCReconciliation</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CCR_Path</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultDimensionFromInvoice</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EnrichmentInCommID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FirstStatementDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Frequency</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IHBBankFabricLocation</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IHBInterestBankFabricLocation</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IHB_AppropiationAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IHB_AppropriationfeeID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IHB_AppropriationFeeLedgerAccount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IHB_AttachFileName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IHB_AttachTemplate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IHB_BankHolidayGroupId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IHB_CalculationFrequencyEndMonth</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IHB_CalculationFrequencyStartMonth</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IHB_CommId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IHB_CreateFile</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IHB_EmailAddress</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IHB_FilePath</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IHB_FileType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IHB_Format</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IHB_InhouseBankTransactionTypeMappingId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IHB_InterestCalcFreq</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IHB_InterestCalcMethod</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IHB_InterestDaysCalcMethod</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IHB_InterestEndDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IHB_InterestExpenseBankTransType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IHB_InterestExpenseLedgerDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IHB_InterestFilePath</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IHB_InterestIncomeBankTransType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IHB_InterestIncomeLedgerDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IHB_InterestMarkupId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IHB_InterestRateFormat</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IHB_InterestRateId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IHB_InterestRepaymentNonCompounded</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IHB_LastStatementDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IHB_OD_AttachTemplate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IHB_OD_FileName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IHB_OD_FileType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IHB_OD_InterestNoteEmailAddress</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IHB_OD_ReplyToEmail</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IHB_OD_ReplyToName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IHB_OD_SendEmail</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IHB_OD_TemplateLanguage</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IHB_OD_UseTASSetupDefault</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IHB_OverdraftInterestID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IHB_OverdraftInterestLedgerAccount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IHB_PayOffCalculated</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IHB_Remit</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IHB_ReplyToEmail</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IHB_ReplyToName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IHB_SendEmail</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IHB_TemplateLanguage</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IHB_UseInterestCalcDefaults</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IHB_UseTASSetupDefault</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InvoiceSearchCrossComp</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LBArchive</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LBArchivePath</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LBDelete</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LBFormatId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LBFromSetup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LBJournalName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LBPath</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LBSuggCustGood</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LookBackDays</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MatchingRulesGroupIdCustSettle</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PP01</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PP02</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PP03</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PP04</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PPArchive</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PPArchivePath</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PPBankFabricLocation</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PPCommType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PPCommUserProg</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PPDelete</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PPFileName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PPFormatId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PPFromSetup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PPHeadTrailId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PPOutCommID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PPOutServerSideFileProc</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PPPath</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PPPath1</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SKS_IHBInhouseBank</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SKS_IHBLinkedinhousebankaccount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SKS_IHBLinkedinhousebankcompany</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>UseeBankRecBankStatementMonitorDefaults</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>UseeBankRecCustSettlementSetupDefaults</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>SKS_PP_FileFormatSrc</Name>
			<Table>SKS_PP_FileFormat</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>BankPP01Descr</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankPP01Mask</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankPP02Descr</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankPP02Mask</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankPP03Descr</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankPP03Mask</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankPP04Descr</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankPP04Mask</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankTransitNoCD</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BlockFill</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Crlf</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Descr</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FormatId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LastEffDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LeadingSpace</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MultiAcctAllowed</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecordLen</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Selected</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TrailerRecord</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TrimRecord</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VoidChkSeparate</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AllowCheck>No</AllowCheck>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>BankAccountSrc</Name>
			<Table>BankAccountTable</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AccountID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AccountNameKana_JP</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AccountNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ActiveFrom</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ActiveTo</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankAccountStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankCIN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankClearingCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankCodeType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankCompanyStatementName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankConstantSymbol</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankContractAccount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankDestinationName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankGroupId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankInterbankClearingCode_BE</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankMultiCurrency</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankPositivePayFormat</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankPositivePayFormatName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankPositivePayStartDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankReconAllowedPennyDifference</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankReconciliationEnabled</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankReconciliationMatchRuleSet</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankReconciliationStmtAsPaymConfirm</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankReconMatchAutoAfterImport</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankReconMatchRuleManualMatch</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankReconMatchRuleManualReversal</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankSortCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankStatementFormat</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankStatementName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankSuffix</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankTransferCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CellularPhone</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CFMBankBalanceMinimum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CompanyPaymId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ContactPerson</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CorrAccount_W</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CurrencyCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CurrencyOrder_TemplateName_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CurrencyOrder_TemplateRefRecId_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CurrencySellOrder_TemplateName_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CurrencySellOrder_TemplateRefRecId_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustomerPaymentFeeLedgerDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustPaymFeePost</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DebitDirectId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DiscCreditMaxMST</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DivisionPaymId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Email</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FeeContractAccount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>GiroContract</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>GiroContractAccount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IBAN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IFSC_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IncludeBankBarCode_FI</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InvoiceRemitAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InvoiceRemittanceLedgerDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>isBankPrenote</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsNACHAFileBlocked</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LedgerDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LedgerJournalNameId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Location</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LvDefaultBank</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LvPayOrderType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Name</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NsfFeeMarkupGroupId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NsfFeeMarkupGroupModule</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NsfLedgerJournalName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OverDraftLimit</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Pager</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymForeignExportPath_LT</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymLocalExportPath_LT</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymOrderNumSeqId_W</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Phone</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PhoneLocal</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PostingProfileBillsRemitCollection_IT</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PostingProfileBillsRemitDiscount_IT</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PostingProfileRemitNotes_IT</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PrenoteResponseDays</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PrintGiro_FI</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>QRIBAN_CH</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RegistrationNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RemitCollectionAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RemitDiscountAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RemittanceCollectionLedgerDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RemittanceDiscountLedgerDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Rfc_MX</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SKS_EFT_AcctApprovalDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SKS_EFT_AcctApprover</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SKS_EFT_AcctModifiedDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SKS_EFT_AcctModifier</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SKS_EFT_AcctStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SMS</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SpecificSymbol</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SWIFTNo</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TeleFax</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Telex</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TemplateFileName_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TemplateRefRecId_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransType_JP</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>UPIId_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>UPIIName_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>URL</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>SKS_PP_BankScr</JoinSource>
			<LinkType>Active</LinkType>
			<AllowCheck>No</AllowCheck>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>SKS_EB_FileStorage</Name>
			<Table>SKS_EB_FileStorage</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>BankFabricClientID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankFabricClientIDS</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankFabricPin</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankfabricPinExchDatetime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankFabricResponseReason</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankFabricResponseStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankFabricScope</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankFabricSecretName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankFabricSubscription</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankFabricTenant</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankFabricURL</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankIntegDefaultForNewModules</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FileHubLocation</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FileHubToken</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FileStorageType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SKS_EB_BankIntegOpt</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>StorageOption_APEFTFXDD</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>StorageOption_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>StorageOption_CCR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>StorageOption_IHB</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>StorageOption_LB</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>StorageOption_MandateAutomation</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>StorageOption_PP</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Trace</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@SKS179</Caption>
		<DataSource xmlns="">SKS_PP_BankScr</DataSource>
		<Pattern xmlns="">SimpleListDetails</Pattern>
		<PatternVersion xmlns="">1.3</PatternVersion>
		<Style xmlns="">SimpleListDetails</Style>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>ActionPane</Name>
				<ElementPosition>715827882</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<HeightMode>Auto</HeightMode>
				<Type>ActionPane</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>ButtonGroup</Name>
						<ElementPosition>1610612734</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>ButtonGroup</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>SKS_EFT_APBankAccount</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1073741822</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>MenuFunctionButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<MenuItemName>SKS_EFT_APBankAccount</MenuItemName>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>SKS_EFT_ARBankAccount</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1610612733</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<HelpText>@SKS1934</HelpText>
								<Type>MenuFunctionButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<MenuItemName>SKS_EFT_ARBankAccount</MenuItemName>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>SKS_LB_Bank</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1879048189</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>MenuFunctionButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataSource>SKS_PP_BankScr</DataSource>
								<MenuItemName>SKS_LB_Bank</MenuItemName>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>SKS_EFT_CNPBankAccount</Name>
								<Type>MenuFunctionButton</Type>
								<FormControlExtension
									i:nil="true" />
								<MenuItemName>SKS_EFT_CNPBankAccount</MenuItemName>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>SKS_EFT_BTBBankAccount</Name>
								<Type>MenuFunctionButton</Type>
								<FormControlExtension
									i:nil="true" />
								<MenuItemName>SKS_EFT_BTBBankAccount</MenuItemName>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>SKS_IHB_InhouseBankStatementPrint</Name>
								<Type>MenuFunctionButton</Type>
								<FormControlExtension
									i:nil="true" />
								<MenuItemName>SKS_IHB_InhouseBankStatementPrint</MenuItemName>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>SKS_IHB_InterestRateVsMarkup</Name>
								<Type>MenuFunctionButton</Type>
								<FormControlExtension
									i:nil="true" />
								<DataSource>SKS_PP_BankScr</DataSource>
								<MenuItemName>SKS_IHB_InterestRateVsMarkup</MenuItemName>
							</AxFormControl>
						</Controls>
						<ArrangeMethod>Vertical</ArrangeMethod>
					</AxFormControl>
				</Controls>
				<AlignChild>No</AlignChild>
				<AlignChildren>No</AlignChildren>
				<ArrangeMethod>Vertical</ArrangeMethod>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>GridContainer</Name>
				<AutoDeclaration>Yes</AutoDeclaration>
				<ElementPosition>858993458</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<HeightMode>SizeToAvailable</HeightMode>
				<Type>Group</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl>
						<Name>QuickFilterControl</Name>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension>
							<Name>QuickFilterControl</Name>
							<ExtensionComponents />
							<ExtensionProperties>
								<AxFormControlExtensionProperty>
									<Name>targetControlName</Name>
									<Type>String</Type>
									<Value>Grid</Value>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>defaultColumnName</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>placeholderText</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
							</ExtensionProperties>
						</FormControlExtension>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGridControl">
						<Name>Grid</Name>
						<AlignControl>Yes</AlignControl>
						<AllowEdit>No</AllowEdit>
						<ElementPosition>1431655764</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Grid</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>SizeToContent</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>GridBankAccount</Name>
								<ElementPosition>715827882</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataField>BankAccountId</DataField>
								<DataSource>SKS_PP_BankScr</DataSource>
								<Label>@SKS179</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>GridPPFormatID</Name>
								<ElementPosition>1073741823</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataField>PPFormatId</DataField>
								<DataSource>SKS_PP_BankScr</DataSource>
								<Label>@SKS39</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>GridBRFormatID</Name>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataField>BRFormatID</DataField>
								<DataSource>SKS_PP_BankScr</DataSource>
								<Label>@SKS818</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>CCR_Format_ID</Name>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataField>CCR_FormatID</DataField>
								<DataSource>SKS_PP_BankScr</DataSource>
								<Label>@SKS:SKGCCReconciliation</Label>
							</AxFormControl>
						</Controls>
						<AlternateRowShading>No</AlternateRowShading>
						<DataSource>SKS_PP_BankScr</DataSource>
						<GridLinesStyle>Vertical</GridLinesStyle>
						<MultiSelect>No</MultiSelect>
						<ShowRowLabels>No</ShowRowLabels>
						<Style>List</Style>
					</AxFormControl>
				</Controls>
				<RightMargin>0</RightMargin>
				<RightMarginMode>Fixed</RightMarginMode>
				<FrameType>None</FrameType>
				<Style>SidePanel</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>DetailsHeader</Name>
				<ElementPosition>1073741822</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Pattern>FieldsFieldGroups</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>BankAccount</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1073741822</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<DataField>BankAccountId</DataField>
						<DataSource>SKS_PP_BankScr</DataSource>
						<Label>@SKS179</Label>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>BankName</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1610612733</ElementPosition>
						<Enabled>No</Enabled>
						<FilterExpression>%1</FilterExpression>
						<Skip>Yes</Skip>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<DataField>Name</DataField>
						<DataSource>BankAccountSrc</DataSource>
						<IMEMode>Disabled</IMEMode>
						<Label>@SKS180</Label>
						<PresenceIndicatorAllowed>No</PresenceIndicatorAllowed>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>BankID</Name>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>BankID</DataField>
						<DataSource>SKS_PP_BankScr</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCheckBoxControl">
						<Name>CCR_IsCCReconciliation</Name>
						<Type>CheckBox</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>CCR_IsCCReconciliation</DataField>
						<DataSource>SKS_PP_BankScr</DataSource>
					</AxFormControl>
				</Controls>
				<ColumnsMode>Fill</ColumnsMode>
				<FrameType>None</FrameType>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormTabControl">
				<Name>Tab</Name>
				<AlignControl>No</AlignControl>
				<AutoDeclaration>Yes</AutoDeclaration>
				<ElementPosition>1610612733</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Type>Tab</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>BankInfo</Name>
						<ElementPosition>715827882</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Pattern>FieldsFieldGroups</Pattern>
						<PatternVersion>1.1</PatternVersion>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>Group_</Name>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>BankTransit</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1073741822</ElementPosition>
										<Enabled>No</Enabled>
										<FilterExpression>%1</FilterExpression>
										<Skip>Yes</Skip>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>RegistrationNum</DataField>
										<DataSource>BankAccountSrc</DataSource>
										<FastTabSummary>No</FastTabSummary>
										<IMEMode>Disabled</IMEMode>
										<Label>@SKS183</Label>
										<PresenceIndicatorAllowed>No</PresenceIndicatorAllowed>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>BankAccountSrc_SWIFTNo</Name>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>SWIFTNo</DataField>
										<DataSource>BankAccountSrc</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>BankAccountNum</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1610612733</ElementPosition>
										<Enabled>No</Enabled>
										<FilterExpression>%1</FilterExpression>
										<Skip>Yes</Skip>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>AccountNum</DataField>
										<DataSource>BankAccountSrc</DataSource>
										<FastTabSummary>No</FastTabSummary>
										<IMEMode>Disabled</IMEMode>
										<Label>@SKS184</Label>
										<PresenceIndicatorAllowed>No</PresenceIndicatorAllowed>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>BankAccountSrc_IBAN</Name>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>IBAN</DataField>
										<DataSource>BankAccountSrc</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>BankAccountSrc_CurrencyCode</Name>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>CurrencyCode</DataField>
										<DataSource>BankAccountSrc</DataSource>
									</AxFormControl>
								</Controls>
							</AxFormControl>
						</Controls>
						<ColumnsMode>Fill</ColumnsMode>
						<Caption>@SKS32</Caption>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>PosPay</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1073741823</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Pattern>ToolbarFields</Pattern>
						<PatternVersion>1.1</PatternVersion>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormActionPaneControl">
								<Name>FileInfoActionPane</Name>
								<Type>ActionPane</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormButtonGroupControl">
										<Name>FileInfoButtonGroup</Name>
										<Type>ButtonGroup</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormButtonControl">
												<Name>RefreshSetup</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>715827882</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<HelpText>@SKS736</HelpText>
												<NeededPermission>Update</NeededPermission>
												<Type>Button</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<Visible>No</Visible>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<SaveRecord>No</SaveRecord>
												<Text>@SKS193</Text>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormMenuFunctionButtonControl">
												<Name>PPSetupCommunications</Name>
												<ElementPosition>1610612733</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>MenuFunctionButton</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<MenuItemName>SKS_EB_Communications</MenuItemName>
												<Text>@SKS2442</Text>
											</AxFormControl>
										</Controls>
									</AxFormControl>
								</Controls>
								<Style>Strip</Style>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>FileInfoContentGroup</Name>
								<Pattern>FieldsFieldGroups</Pattern>
								<PatternVersion>1.1</PatternVersion>
								<Type>Group</Type>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>AccountInfo</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1073741822</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>PPFormatId</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>858993458</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<DataField>PPFormatId</DataField>
												<DataSource>SKS_PP_BankScr</DataSource>
												<FastTabSummary>Yes</FastTabSummary>
												<IMEMode>Disabled</IMEMode>
												<PresenceIndicatorAllowed>No</PresenceIndicatorAllowed>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>PPFormatDesc</Name>
												<AllowEdit>No</AllowEdit>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1288490187</ElementPosition>
												<Enabled>No</Enabled>
												<FilterExpression>%1</FilterExpression>
												<Skip>Yes</Skip>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<DataField>Descr</DataField>
												<DataSource>SKS_PP_FileFormatSrc</DataSource>
												<IMEMode>Disabled</IMEMode>
												<PresenceIndicatorAllowed>No</PresenceIndicatorAllowed>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>Mask1</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>715827882</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<DataField>PP01</DataField>
												<DataSource>SKS_PP_BankScr</DataSource>
												<Label>@SKS200</Label>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>Mask2</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1073741823</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<DataField>PP02</DataField>
												<DataSource>SKS_PP_BankScr</DataSource>
												<Label>@SKS201</Label>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>Mask3</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1431655764</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<DataField>PP03</DataField>
												<DataSource>SKS_PP_BankScr</DataSource>
												<Label>@SKS202</Label>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>Mask4</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1789569705</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<DataField>PP04</DataField>
												<DataSource>SKS_PP_BankScr</DataSource>
												<Label>@SKS203</Label>
											</AxFormControl>
										</Controls>
										<Caption>@SYS6055</Caption>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>SetupDefaults</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>477218588</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>CheckBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>PPFromSetup</DataField>
										<DataSource>SKS_PP_BankScr</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>CommunicationsOptions</Name>
										<ElementPosition>775480205</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>SKS_PP_BankScr_CommID</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1073741822</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<DataField>PPOutCommID</DataField>
												<DataSource>SKS_PP_BankScr</DataSource>
												<Label>@SKS2444</Label>
											</AxFormControl>
										</Controls>
										<Caption>@SKS91</Caption>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>ProcessingOptionsGroup</Name>
										<Type>Group</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormCheckBoxControl">
												<Name>DeleteFile</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>954437176</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>CheckBox</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<DataField>PPDelete</DataField>
												<DataSource>SKS_PP_BankScr</DataSource>
											</AxFormControl>
										</Controls>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>FileInfoGroup</Name>
										<Type>Group</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>FilePath</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1193046470</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<DataField>PPPath</DataField>
												<DataSource>SKS_PP_BankScr</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>SKS_PP_BankScr_PPBankFabricLocation</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>String</Type>
												<FormControlExtension
													i:nil="true" />
												<DataField>PPBankFabricLocation</DataField>
												<DataSource>SKS_PP_BankScr</DataSource>
												<LookupOnly>Yes</LookupOnly>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>FileName</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1431655764</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<DataField>PPFileName</DataField>
												<DataSource>SKS_PP_BankScr</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormCheckBoxControl">
												<Name>SKS_PP_BankScr_PPArchive</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1491308087</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>CheckBox</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<DataField>PPArchive</DataField>
												<DataSource>SKS_PP_BankScr</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>SKS_PP_BankScr_PPArchivePath</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1580786572</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<DataField>PPArchivePath</DataField>
												<DataSource>SKS_PP_BankScr</DataSource>
											</AxFormControl>
										</Controls>
										<Breakable>No</Breakable>
										<Style>BorderedGroup</Style>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>HeaderTrailerGroup</Name>
										<Type>Group</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormComboBoxControl">
												<Name>HeaderTrailerID</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1670265058</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>ComboBox</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<DataField>PPHeadTrailId</DataField>
												<DataSource>SKS_PP_BankScr</DataSource>
												<Label>@SKS51</Label>
												<Items />
											</AxFormControl>
										</Controls>
									</AxFormControl>
								</Controls>
								<ColumnsMode>Fill</ColumnsMode>
								<FrameType>None</FrameType>
							</AxFormControl>
						</Controls>
						<Caption>@SKS39</Caption>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>EBR</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1431655764</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Pattern>ToolbarFields</Pattern>
						<PatternVersion>1.1</PatternVersion>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormActionPaneControl">
								<Name>FileInformationActionPane</Name>
								<Type>ActionPane</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormButtonGroupControl">
										<Name>FileInformationButtonGroup</Name>
										<Type>ButtonGroup</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormButtonControl">
												<Name>btnRefreshFromSetup</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1288490187</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<HelpText>@SKS736</HelpText>
												<NeededPermission>Update</NeededPermission>
												<Type>Button</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<Visible>No</Visible>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<SaveRecord>No</SaveRecord>
												<Text>@SKS193</Text>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormMenuFunctionButtonControl">
												<Name>BRSetupCommunications</Name>
												<ElementPosition>1574821339</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>MenuFunctionButton</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<MenuItemName>SKS_EB_Communications</MenuItemName>
												<Text>@SKS2442</Text>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormButtonControl">
												<Name>CreateBatch</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<HelpText>@SKS2467</HelpText>
												<Type>Button</Type>
												<FormControlExtension
													i:nil="true" />
												<Text>@SKS6191</Text>
											</AxFormControl>
										</Controls>
									</AxFormControl>
								</Controls>
								<Style>Strip</Style>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>BankRecContentGroup</Name>
								<Pattern>FieldsFieldGroups</Pattern>
								<PatternVersion>1.1</PatternVersion>
								<Type>Group</Type>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>AccountFormatInfo</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>858993458</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>SKS_PP_BankScr_BRFormatID</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1073741822</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<DataField>BRFormatID</DataField>
												<DataSource>SKS_PP_BankScr</DataSource>
												<FastTabSummary>Yes</FastTabSummary>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>SKS_BR_FileFormat_Descr</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1610612733</ElementPosition>
												<Enabled>No</Enabled>
												<FilterExpression>%1</FilterExpression>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Label>@SKS131</Label>
											</AxFormControl>
										</Controls>
										<Caption>@SYS6055</Caption>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>FileInformationContentGroup</Name>
										<Type>Group</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormCheckBoxControl">
												<Name>UseEBRSetupDefaults</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>858993458</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>CheckBox</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<DataField>BRFromSetup</DataField>
												<DataSource>SKS_PP_BankScr</DataSource>
												<Label>@SKS548</Label>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>SKS_PP_BankScr_BRInCommID</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1431655763</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<DataField>BRInCommID</DataField>
												<DataSource>SKS_PP_BankScr</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>SKS_PP_BankScr_BRPath</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1717986916</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<DataField>BRPath</DataField>
												<DataSource>SKS_PP_BankScr</DataSource>
												<Label>@SKS516</Label>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>SKS_PP_BankScr_BRBankFabricLocation</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>String</Type>
												<FormControlExtension
													i:nil="true" />
												<DataField>BRBankFabricLocation</DataField>
												<DataSource>SKS_PP_BankScr</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormCheckBoxControl">
												<Name>SKS_PP_BANK_BRCreateBankStatements</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1861152492</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>CheckBox</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<DataField>BRCreateBankStatements</DataField>
												<DataSource>SKS_PP_BankScr</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormCheckBoxControl">
												<Name>MissingBankStatements_BRCreateBankStatementsIfNoTrans</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<FilterExpression>%1</FilterExpression>
												<Type>CheckBox</Type>
												<FormControlExtension
													i:nil="true" />
												<DataField>BRCreateBankStatementsIfNoTrans</DataField>
												<DataSource>SKS_PP_BankScr</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormCheckBoxControl">
												<Name>SKS_PP_BANK_BRAutoReconcile</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>2004318068</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>CheckBox</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<DataField>BRAutoReconcile</DataField>
												<DataSource>SKS_PP_BankScr</DataSource>
											</AxFormControl>
										</Controls>
										<FrameType>None</FrameType>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>MissingBankStatements</Name>
										<Type>Group</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormCheckBoxControl">
												<Name>MissingBankStatements_UseeBankRecBankStatementMonitorDefaults</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>CheckBox</Type>
												<FormControlExtension
													i:nil="true" />
												<DataField>UseeBankRecBankStatementMonitorDefaults</DataField>
												<DataSource>SKS_PP_BankScr</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormCheckBoxControl">
												<Name>MissingBankStatements_BRNotifyStatements</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<FilterExpression>%1</FilterExpression>
												<Type>CheckBox</Type>
												<FormControlExtension
													i:nil="true" />
												<DataField>BRNotifyStatements</DataField>
												<DataSource>SKS_PP_BankScr</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormIntegerControl">
												<Name>MissingBankStatements_BRNotifyMinusDays</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<FilterExpression>%1</FilterExpression>
												<Type>Integer</Type>
												<FormControlExtension
													i:nil="true" />
												<DataField>BRNotifyMinusDays</DataField>
												<DataSource>SKS_PP_BankScr</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>MissingBankStatements_BREmail</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<FilterExpression>%1</FilterExpression>
												<Type>String</Type>
												<FormControlExtension
													i:nil="true" />
												<DataField>BREmail</DataField>
												<DataSource>SKS_PP_BankScr</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormReferenceGroupControl">
												<Name>MissingBankStatements_BRBatchJobId</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<FilterExpression>%1</FilterExpression>
												<Type>ReferenceGroup</Type>
												<FormControlExtension
													i:nil="true" />
												<Controls />
												<DataSource>SKS_PP_BankScr</DataSource>
												<ReferenceField>BRBatchJobId</ReferenceField>
												<ReplacementFieldGroup>SKS_Caption</ReplacementFieldGroup>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>MissingBankStatements_BRBankHolidayGroupID</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<FilterExpression>%1</FilterExpression>
												<Type>String</Type>
												<FormControlExtension
													i:nil="true" />
												<DataField>BRBankHolidayGroupID</DataField>
												<DataSource>SKS_PP_BankScr</DataSource>
											</AxFormControl>
										</Controls>
										<Caption>@SKS4415</Caption>
										<DataSource>SKS_PP_BankScr</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>ImportFileSearch</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1717986916</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>AlternateBankID</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1431655764</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HelpText>@SKS2165</HelpText>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<DataField>AlternateBankID</DataField>
												<DataSource>SKS_PP_BankScr</DataSource>
												<Label>@SKS2161</Label>
											</AxFormControl>
										</Controls>
										<Caption>@SKS2164</Caption>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>APIOptionsGroup</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1717986916</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormComboBoxControl">
												<Name>APIOptionsGroup_Frequency</Name>
												<Type>ComboBox</Type>
												<FormControlExtension
													i:nil="true" />
												<DataField>Frequency</DataField>
												<DataSource>SKS_PP_BankScr</DataSource>
												<Items />
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormDateControl">
												<Name>APIOptionsGroup_FirstStatementDate</Name>
												<Type>Date</Type>
												<FormControlExtension
													i:nil="true" />
												<DataField>FirstStatementDate</DataField>
												<DataSource>SKS_PP_BankScr</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormIntegerControl">
												<Name>APIOptionsGroup_LookBackDays</Name>
												<Type>Integer</Type>
												<FormControlExtension
													i:nil="true" />
												<DataField>LookBackDays</DataField>
												<DataSource>SKS_PP_BankScr</DataSource>
											</AxFormControl>
										</Controls>
										<DataGroup>APIOptions</DataGroup>
										<DataSource>SKS_PP_BankScr</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>FormatSpecificOptions</Name>
										<HelpText>@SKS:SKGFormatSpecificOptionsHelpText</HelpText>
										<Type>Group</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls />
										<Caption>@SKS:SKGFormatSpecificOptionsLabel</Caption>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>BAI2</Name>
										<HelpText>@SKS:SKGFormatSpecificOptionsBAI2HelpText</HelpText>
										<Type>Group</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormCheckBoxControl">
												<Name>SKS_PP_BankScr_BROverrideDecimalPlaces</Name>
												<Type>CheckBox</Type>
												<FormControlExtension
													i:nil="true" />
												<DataField>BROverrideDecimalPlaces</DataField>
												<DataSource>SKS_PP_BankScr</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormIntegerControl">
												<Name>SKS_PP_BankScr_BROverrideDecimalPlacesNumberOfDecimalPlaces</Name>
												<Type>Integer</Type>
												<FormControlExtension
													i:nil="true" />
												<DataField>BROverrideDecimalPlacesNumberOfDecimalPlaces</DataField>
												<DataSource>SKS_PP_BankScr</DataSource>
											</AxFormControl>
										</Controls>
										<Caption>@SKS266</Caption>
									</AxFormControl>
								</Controls>
								<ColumnsMode>Fill</ColumnsMode>
								<FrameType>None</FrameType>
							</AxFormControl>
						</Controls>
						<Caption>@SKS:SKGBRGeneral</Caption>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>EBRCustSettelement</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1431655764</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Pattern>ToolbarFields</Pattern>
						<PatternVersion>1.1</PatternVersion>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormActionPaneControl">
								<Name>CustSettelemtActionPane</Name>
								<Type>ActionPane</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormButtonGroupControl">
										<Name>CustSettlementGroup</Name>
										<Type>ButtonGroup</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls />
									</AxFormControl>
								</Controls>
								<Style>Strip</Style>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>BankRecContentGroupCustSettlement</Name>
								<Pattern>FieldsFieldGroups</Pattern>
								<PatternVersion>1.1</PatternVersion>
								<Type>Group</Type>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>CustomerSettlementOptions</Name>
										<ElementPosition>1932735281</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormCheckBoxControl">
												<Name>CustomerSettlementOptions_UseeBankRecCustSettlementSetupDefaults</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>536870910</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>CheckBox</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<DataField>UseeBankRecCustSettlementSetupDefaults</DataField>
												<DataSource>SKS_PP_BankScr</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>CustomerSettlementOptions_MatchingRulesGroupIdCustSettle</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<FilterExpression>%1</FilterExpression>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<DataField>MatchingRulesGroupIdCustSettle</DataField>
												<DataSource>SKS_PP_BankScr</DataSource>
												<Label>@SKS:BRMatchingRulesGroup</Label>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>CustomerSettlementOptions_BRCustRemitAnalysisRuleGroup</Name>
												<Type>String</Type>
												<FormControlExtension
													i:nil="true" />
												<DataField>BRCustRemitAnalysisRuleGroup</DataField>
												<DataSource>SKS_PP_BankScr</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormCheckBoxControl">
												<Name>CustomerSettlementOptions_BRCustomerSearchAcrossCompany</Name>
												<Type>CheckBox</Type>
												<FormControlExtension
													i:nil="true" />
												<DataField>BRCustomerSearchAcrossCompany</DataField>
												<DataSource>SKS_PP_BankScr</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormComboBoxControl">
												<Name>CustomerSettlementOptions_BRInvoiceNotFound</Name>
												<Type>ComboBox</Type>
												<FormControlExtension
													i:nil="true" />
												<DataField>BRInvoiceNotFound</DataField>
												<DataSource>SKS_PP_BankScr</DataSource>
												<Items />
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormCheckBoxControl">
												<Name>CustomerSettlementOptions_BRAutoPostInvoiceNotFound</Name>
												<Type>CheckBox</Type>
												<FormControlExtension
													i:nil="true" />
												<DataField>BRAutoPostInvoiceNotFound</DataField>
												<DataSource>SKS_PP_BankScr</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormCheckBoxControl">
												<Name>CustomerSettlementOptions_InvoiceSearchCrossComp</Name>
												<FilterExpression>%1</FilterExpression>
												<Type>CheckBox</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<DataField>InvoiceSearchCrossComp</DataField>
												<DataSource>SKS_PP_BankScr</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormCheckBoxControl">
												<Name>CustomerSettlementOptions_ApplyDiscOfImportFile</Name>
												<FilterExpression>%1</FilterExpression>
												<Type>CheckBox</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<DataField>ApplyDiscOfImportFile</DataField>
												<DataSource>SKS_PP_BankScr</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormCheckBoxControl">
												<Name>CustomerSettlementOptions_DefaultDimensionFromInvoice</Name>
												<FilterExpression>%1</FilterExpression>
												<Type>CheckBox</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<DataField>DefaultDimensionFromInvoice</DataField>
												<DataSource>SKS_PP_BankScr</DataSource>
											</AxFormControl>
										</Controls>
										<DataGroup>CustomerSettlementOptions</DataGroup>
										<DataSource>SKS_PP_BankScr</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>AutoPostImportOptions</Name>
										<ElementPosition>2040109463</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormCheckBoxControl">
												<Name>AutoPostImportOptions_AutoPostOnImportOptionPayEqualsInvoice</Name>
												<FilterExpression>%1</FilterExpression>
												<Type>CheckBox</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<DataField>AutoPostOnImportOptionPayEqualsInvoice</DataField>
												<DataSource>SKS_PP_BankScr</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormCheckBoxControl">
												<Name>AutoPostImportOptions_AutoPostOnImportOptionInvOverpay</Name>
												<FilterExpression>%1</FilterExpression>
												<Type>CheckBox</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<DataField>AutoPostOnImportOptionInvOverpay</DataField>
												<DataSource>SKS_PP_BankScr</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormCheckBoxControl">
												<Name>AutoPostImportOptions_AutoPostOnImportOptionInvShortpay</Name>
												<FilterExpression>%1</FilterExpression>
												<Type>CheckBox</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<DataField>AutoPostOnImportOptionInvShortpay</DataField>
												<DataSource>SKS_PP_BankScr</DataSource>
											</AxFormControl>
										</Controls>
										<DataGroup>AutoPostImportOptions</DataGroup>
										<DataSource>SKS_PP_BankScr</DataSource>
									</AxFormControl>
								</Controls>
								<ColumnsMode>Fill</ColumnsMode>
								<FrameType>None</FrameType>
							</AxFormControl>
						</Controls>
						<Caption>@SKS:SKGBRCustSettlement</Caption>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>CCR</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Pattern>ToolbarFields</Pattern>
						<PatternVersion>1.1</PatternVersion>
						<Type>TabPage</Type>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormActionPaneControl">
								<Name>CCRActionPane</Name>
								<Type>ActionPane</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormButtonGroupControl">
										<Name>CCRSetupCommunications</Name>
										<Type>ButtonGroup</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormMenuFunctionButtonControl">
												<Name>CCRSetupCommunicationsMenuItem</Name>
												<ElementPosition>1574821339</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>MenuFunctionButton</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<MenuItemName>SKS_EB_Communications</MenuItemName>
												<Text>@SKS2442</Text>
											</AxFormControl>
										</Controls>
									</AxFormControl>
								</Controls>
								<Style>Strip</Style>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>CCRContentGroup</Name>
								<Pattern>FieldsFieldGroups</Pattern>
								<PatternVersion>1.1</PatternVersion>
								<Type>Group</Type>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>CCRAccountFormatInfo</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>858993458</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>CCR_FormatID</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1073741822</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<DataField>CCR_FormatID</DataField>
												<DataSource>SKS_PP_BankScr</DataSource>
												<FastTabSummary>Yes</FastTabSummary>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>CCR_FormatDescr</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1610612733</ElementPosition>
												<Enabled>No</Enabled>
												<FilterExpression>%1</FilterExpression>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Label>@SKS131</Label>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormCheckBoxControl">
												<Name>CCR_UseSetupDefaults</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>858993458</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>CheckBox</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<DataField>CCR_FromSetup</DataField>
												<DataSource>SKS_PP_BankScr</DataSource>
												<Label>@SKS:SKGCCRUseCCRSetupDefaults</Label>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>CCR_InCommID</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1431655763</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<DataField>CCR_InCommID</DataField>
												<DataSource>SKS_PP_BankScr</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>SKS_PP_BankSrc_CCR_Path</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1717986916</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<DataField>CCR_Path</DataField>
												<DataSource>SKS_PP_BankScr</DataSource>
												<Label>@SKS516</Label>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>SKS_PP_BankScr_CCR_BankFabricLocation</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>String</Type>
												<FormControlExtension
													i:nil="true" />
												<DataField>CCR_BankFabricLocation</DataField>
												<DataSource>SKS_PP_BankScr</DataSource>
												<LookupOnly>Yes</LookupOnly>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormCheckBoxControl">
												<Name>CCR_AutoReconcile</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>2004318068</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>CheckBox</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<DataField>CCR_AutoReconcile</DataField>
												<DataSource>SKS_PP_BankScr</DataSource>
											</AxFormControl>
										</Controls>
										<Caption>@SYS6055</Caption>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>CCRImportFileSearch</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1717986916</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>CCR_AlternateBankID</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1431655764</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HelpText>@SKS2165</HelpText>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<DataField>CCR_AlternateBankID</DataField>
												<DataSource>SKS_PP_BankScr</DataSource>
												<Label>@SKS:SKGBRAlternateAccountID</Label>
											</AxFormControl>
										</Controls>
										<Caption>@SKS2164</Caption>
									</AxFormControl>
								</Controls>
								<ColumnsMode>Fill</ColumnsMode>
								<FrameType>None</FrameType>
							</AxFormControl>
						</Controls>
						<Caption>@SKS:SKGCCReconciliation</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>IHBank</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Pattern>FieldsFieldGroups</Pattern>
						<PatternVersion>1.1</PatternVersion>
						<Type>TabPage</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormCheckBoxControl">
								<Name>SKS_PP_BankScr_InhouseBank</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>CheckBox</Type>
								<FormControlExtension
									i:nil="true" />
								<DataField>SKS_IHBInhouseBank</DataField>
								<DataSource>SKS_PP_BankScr</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>SKS_PP_BankScr_Linkedinhousebankcompany</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<DataField>SKS_IHBLinkedinhousebankcompany</DataField>
								<DataSource>SKS_PP_BankScr</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>SKS_PP_BankScr_Linkedinhousebankaccount</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<DataField>SKS_IHBLinkedinhousebankaccount</DataField>
								<DataSource>SKS_PP_BankScr</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>IHBRemitEmail</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>SKS_PP_BankScr_APEMFromSetup</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>511305630</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>CheckBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>APEMFromSetup</DataField>
										<DataSource>SKS_PP_BankScr</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>SKS_PP_BankScr_IHB_Remit</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>CheckBox</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>IHB_Remit</DataField>
										<DataSource>SKS_PP_BankScr</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>SKS_PP_BankScr_APEMTemplateNoAttach</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>858993458</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>APEMTemplateNoAttach</DataField>
										<DataSource>SKS_PP_BankScr</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>SKS_PP_BankScr_APEMTemplateAttach</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1288490187</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>APEMTemplateAttach</DataField>
										<DataSource>SKS_PP_BankScr</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>SKS_PP_BankScr_APEMTemplateLanguage</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1717986916</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>APEMTemplateLanguage</DataField>
										<DataSource>SKS_PP_BankScr</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>SKS_PP_BankScr_APEMReplytoName</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1073741822</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>APEMReplytoName</DataField>
										<DataSource>SKS_PP_BankScr</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>SKS_PP_BankScr_APEMReplyToAddr</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1610612733</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>APEMReplyToAddr</DataField>
										<DataSource>SKS_PP_BankScr</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>SKS_PP_BankScr_APEMCompanyName</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>APEMCompanyName</DataField>
										<DataSource>SKS_PP_BankScr</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>SKS_PP_BankScr_APEMAttachmentName</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1073741822</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>APEMAttachmentName</DataField>
										<DataSource>SKS_PP_BankScr</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>AttachmentPrompt</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DisplayHeight>2</DisplayHeight>
										<DisplayHeightMode>Fixed</DisplayHeightMode>
										<Label>@SKS:SKGBankAttachName</Label>
										<MultiLine>Yes</MultiLine>
										<Text>@SKS:SKGBankAttachName</Text>
									</AxFormControl>
								</Controls>
								<Caption>@SKS:SKGIHBRemitEmailCap</Caption>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>InternalContact</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>SKS_PP_BankScr_AP_EMFromSetup</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>CheckBox</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>AP_EMFromSetup</DataField>
										<DataSource>SKS_PP_BankScr</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>SKS_PP_BankScr_APContactName</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>APContactName</DataField>
										<DataSource>SKS_PP_BankScr</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>SKS_PP_BankScr_APContactPhone</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>APContactPhone</DataField>
										<DataSource>SKS_PP_BankScr</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>SKS_PP_BankScr_APContactEmail</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>APContactEmail</DataField>
										<DataSource>SKS_PP_BankScr</DataSource>
									</AxFormControl>
								</Controls>
								<Caption>@SKS:SKGIHBRemitIntConCap</Caption>
								<DataSource>SKS_PP_BankScr</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>InhouseBankSetup</Name>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>SKS_PP_BankScr_IHB_UseTASSetupDefault</Name>
										<Type>CheckBox</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>IHB_UseTASSetupDefault</DataField>
										<DataSource>SKS_PP_BankScr</DataSource>
									</AxFormControl>
								</Controls>
								<Caption>@SKS:SKGIHBStatementGeneration</Caption>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>InhouseBankAccountSetup</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>InhouseBankAccountSetup_IHB_Format</Name>
										<Type>ComboBox</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>IHB_Format</DataField>
										<DataSource>SKS_PP_BankScr</DataSource>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>InhouseBankAccountSetup_IHB_InhouseBankTransactionTypeMappingId</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>IHB_InhouseBankTransactionTypeMappingId</DataField>
										<DataSource>SKS_PP_BankScr</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>InhouseBankAccountSetup_IHB_AttachFileName</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>IHB_AttachFileName</DataField>
										<DataSource>SKS_PP_BankScr</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>InhouseBankAccountSetup_IHB_SendEmail</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>CheckBox</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>IHB_SendEmail</DataField>
										<DataSource>SKS_PP_BankScr</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>InhouseBankAccountSetup_IHB_AttachTemplate</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>IHB_AttachTemplate</DataField>
										<DataSource>SKS_PP_BankScr</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>InhouseBankAccountSetup_IHB_TemplateLanguage</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>IHB_TemplateLanguage</DataField>
										<DataSource>SKS_PP_BankScr</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>InhouseBankAccountSetup_IHB_ReplyToEmail</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>IHB_ReplyToEmail</DataField>
										<DataSource>SKS_PP_BankScr</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>InhouseBankAccountSetup_IHB_ReplyToName</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>IHB_ReplyToName</DataField>
										<DataSource>SKS_PP_BankScr</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>InhouseBankAccountSetup_IHB_CreateFile</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>CheckBox</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>IHB_CreateFile</DataField>
										<DataSource>SKS_PP_BankScr</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>InhouseBankAccountSetup_IHB_FilePath</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>IHB_FilePath</DataField>
										<DataSource>SKS_PP_BankScr</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>InhouseBankAccountSetup_IHB_FileType</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>ComboBox</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>IHB_FileType</DataField>
										<DataSource>SKS_PP_BankScr</DataSource>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>InhouseBankAccountSetup_IHB_BankHolidayGroupId</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>IHB_BankHolidayGroupId</DataField>
										<DataSource>SKS_PP_BankScr</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>InhouseBankAccountSetup_IHB_Remit</Name>
										<Type>CheckBox</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>IHB_Remit</DataField>
										<DataSource>SKS_PP_BankScr</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>InhouseBankAccountSetup_SKS_IHBLinkedinhousebankaccount</Name>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>SKS_IHBLinkedinhousebankaccount</DataField>
										<DataSource>SKS_PP_BankScr</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>InhouseBankAccountSetup_IHB_EmailAddress</Name>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>IHB_EmailAddress</DataField>
										<DataSource>SKS_PP_BankScr</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>InhouseBankAccountSetup_SKS_IHBLinkedinhousebankcompany</Name>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>SKS_IHBLinkedinhousebankcompany</DataField>
										<DataSource>SKS_PP_BankScr</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>InhouseBankAccountSetup_IHB_LastStatementDate</Name>
										<Type>Date</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>IHB_LastStatementDate</DataField>
										<DataSource>SKS_PP_BankScr</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>InhouseBankAccountSetup_SKS_IHBInhouseBank</Name>
										<Type>CheckBox</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>SKS_IHBInhouseBank</DataField>
										<DataSource>SKS_PP_BankScr</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>InhouseBankAccountSetup_IHB_UseTASSetupDefault</Name>
										<Type>CheckBox</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>IHB_UseTASSetupDefault</DataField>
										<DataSource>SKS_PP_BankScr</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>InhouseBankAccountSetup_IHBBankFabricLocation</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>IHBBankFabricLocation</DataField>
										<DataSource>SKS_PP_BankScr</DataSource>
									</AxFormControl>
								</Controls>
								<DataGroup>InhouseStatement</DataGroup>
								<DataSource>SKS_PP_BankScr</DataSource>
								<FrameType>None</FrameType>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>SKS_PP_BankScr_IHB_EmailAddress</Name>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<DataField>IHB_EmailAddress</DataField>
								<DataSource>SKS_PP_BankScr</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormDateControl">
								<Name>SKS_PP_BankScr_IHB_LastStatementDate</Name>
								<Enabled>No</Enabled>
								<Type>Date</Type>
								<FormControlExtension
									i:nil="true" />
								<DataField>IHB_LastStatementDate</DataField>
								<DataSource>SKS_PP_BankScr</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>IHBInterestCalc</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>IHBInterestRate_IHB_UseInterestCalcDefaults</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>CheckBox</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>IHB_UseInterestCalcDefaults</DataField>
										<DataSource>SKS_PP_BankScr</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>IHBInterestRate_IHB_InterestCalcFreq</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>ComboBox</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>IHB_InterestCalcFreq</DataField>
										<DataSource>SKS_PP_BankScr</DataSource>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>SKS_PP_BankScr_IHB_CalculationFrequencyStartMonth</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>ComboBox</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>IHB_CalculationFrequencyStartMonth</DataField>
										<DataSource>SKS_PP_BankScr</DataSource>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>SKS_PP_BankScr_IHB_CalculationFrequencyEndMonth</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>ComboBox</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>IHB_CalculationFrequencyEndMonth</DataField>
										<DataSource>SKS_PP_BankScr</DataSource>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>IHBInterestRate_IHB_InterestCalcMethod</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>ComboBox</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>IHB_InterestCalcMethod</DataField>
										<DataSource>SKS_PP_BankScr</DataSource>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>IHBInterestRate_IHB_InterestDaysCalcMethod</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>ComboBox</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>IHB_InterestDaysCalcMethod</DataField>
										<DataSource>SKS_PP_BankScr</DataSource>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>IHBInterestRate_IHB_InterestMarkupId</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>IHB_InterestMarkupId</DataField>
										<DataSource>SKS_PP_BankScr</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>SKS_PP_BankScr_IHB_AppropriationfeeID</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>IHB_AppropriationfeeID</DataField>
										<DataSource>SKS_PP_BankScr</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormSegmentedEntryControl">
										<Name>SKS_PP_BankScr_IHB_AppropriationFeeLedgerAccount</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>SegmentedEntry</Type>
										<FormControlExtension>
											<Name>SegmentedEntryControl</Name>
											<ExtensionComponents />
											<ExtensionProperties>
												<AxFormControlExtensionProperty>
													<Name>parmControllerClassName</Name>
													<Type>String</Type>
													<Value>DimensionDynamicAccountController</Value>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmAccountTypeEnumName</Name>
													<Type>String</Type>
													<Value>AccountType</Value>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmIsDefaultAccount</Name>
													<Type>Enum</Type>
													<TypeName>boolean</TypeName>
													<Value>False</Value>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmValidateBlockedForManualEntry</Name>
													<Type>Enum</Type>
													<TypeName>NoYes</TypeName>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmLockMainAccountSegment</Name>
													<Type>Enum</Type>
													<TypeName>NoYes</TypeName>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmPostingType</Name>
													<Type>Enum</Type>
													<TypeName>LedgerPostingType</TypeName>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmIncludeTotalAccounts</Name>
													<Type>Enum</Type>
													<TypeName>NoYes</TypeName>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmIncludeFinancialAccounts</Name>
													<Type>Enum</Type>
													<TypeName>NoYes</TypeName>
												</AxFormControlExtensionProperty>
											</ExtensionProperties>
										</FormControlExtension>
										<DataSource>SKS_PP_BankScr</DataSource>
										<ReferenceField>IHB_AppropriationFeeLedgerAccount</ReferenceField>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>SKS_PP_BankScr_IHB_OverdraftInterestID</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>IHB_OverdraftInterestID</DataField>
										<DataSource>SKS_PP_BankScr</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormSegmentedEntryControl">
										<Name>SKS_PP_BankScr_IHB_OverdraftInterestLedgerAccount</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>SegmentedEntry</Type>
										<FormControlExtension>
											<Name>SegmentedEntryControl</Name>
											<ExtensionComponents />
											<ExtensionProperties>
												<AxFormControlExtensionProperty>
													<Name>parmControllerClassName</Name>
													<Type>String</Type>
													<Value>DimensionDynamicAccountController</Value>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmAccountTypeEnumName</Name>
													<Type>String</Type>
													<Value>AccountType</Value>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmIsDefaultAccount</Name>
													<Type>Enum</Type>
													<TypeName>boolean</TypeName>
													<Value>False</Value>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmValidateBlockedForManualEntry</Name>
													<Type>Enum</Type>
													<TypeName>NoYes</TypeName>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmLockMainAccountSegment</Name>
													<Type>Enum</Type>
													<TypeName>NoYes</TypeName>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmPostingType</Name>
													<Type>Enum</Type>
													<TypeName>LedgerPostingType</TypeName>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmIncludeTotalAccounts</Name>
													<Type>Enum</Type>
													<TypeName>NoYes</TypeName>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmIncludeFinancialAccounts</Name>
													<Type>Enum</Type>
													<TypeName>NoYes</TypeName>
												</AxFormControlExtensionProperty>
											</ExtensionProperties>
										</FormControlExtension>
										<DataSource>SKS_PP_BankScr</DataSource>
										<ReferenceField>IHB_OverdraftInterestLedgerAccount</ReferenceField>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormSegmentedEntryControl">
										<Name>IHBInterestRate_IHB_InterestIncomeLedgerDimension</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>SegmentedEntry</Type>
										<FormControlExtension>
											<Name>SegmentedEntryControl</Name>
											<ExtensionComponents />
											<ExtensionProperties>
												<AxFormControlExtensionProperty>
													<Name>parmControllerClassName</Name>
													<Type>String</Type>
													<Value>DimensionDynamicAccountController</Value>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmAccountTypeEnumName</Name>
													<Type>String</Type>
													<Value>AccountType</Value>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmIsDefaultAccount</Name>
													<Type>Enum</Type>
													<TypeName>boolean</TypeName>
													<Value>False</Value>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmValidateBlockedForManualEntry</Name>
													<Type>Enum</Type>
													<TypeName>NoYes</TypeName>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmLockMainAccountSegment</Name>
													<Type>Enum</Type>
													<TypeName>NoYes</TypeName>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmPostingType</Name>
													<Type>Enum</Type>
													<TypeName>LedgerPostingType</TypeName>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmIncludeTotalAccounts</Name>
													<Type>Enum</Type>
													<TypeName>NoYes</TypeName>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmIncludeFinancialAccounts</Name>
													<Type>Enum</Type>
													<TypeName>NoYes</TypeName>
												</AxFormControlExtensionProperty>
											</ExtensionProperties>
										</FormControlExtension>
										<DataSource>SKS_PP_BankScr</DataSource>
										<ReferenceField>IHB_InterestIncomeLedgerDimension</ReferenceField>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormSegmentedEntryControl">
										<Name>IHBInterestRate_IHB_InterestExpenseLedgerDimension</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>SegmentedEntry</Type>
										<FormControlExtension>
											<Name>SegmentedEntryControl</Name>
											<ExtensionComponents />
											<ExtensionProperties>
												<AxFormControlExtensionProperty>
													<Name>parmControllerClassName</Name>
													<Type>String</Type>
													<Value>DimensionDynamicAccountController</Value>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmAccountTypeEnumName</Name>
													<Type>String</Type>
													<Value>AccountType</Value>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmIsDefaultAccount</Name>
													<Type>Enum</Type>
													<TypeName>boolean</TypeName>
													<Value>False</Value>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmValidateBlockedForManualEntry</Name>
													<Type>Enum</Type>
													<TypeName>NoYes</TypeName>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmLockMainAccountSegment</Name>
													<Type>Enum</Type>
													<TypeName>NoYes</TypeName>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmPostingType</Name>
													<Type>Enum</Type>
													<TypeName>LedgerPostingType</TypeName>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmIncludeTotalAccounts</Name>
													<Type>Enum</Type>
													<TypeName>NoYes</TypeName>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmIncludeFinancialAccounts</Name>
													<Type>Enum</Type>
													<TypeName>NoYes</TypeName>
												</AxFormControlExtensionProperty>
											</ExtensionProperties>
										</FormControlExtension>
										<DataSource>SKS_PP_BankScr</DataSource>
										<ReferenceField>IHB_InterestExpenseLedgerDimension</ReferenceField>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>IHBInterestRate_IHB_InterestIncomeBankTransType</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>IHB_InterestIncomeBankTransType</DataField>
										<DataSource>SKS_PP_BankScr</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>IHBInterestRate_IHB_InterestExpenseBankTransType</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>IHB_InterestExpenseBankTransType</DataField>
										<DataSource>SKS_PP_BankScr</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>IHBInterestRate_IHB_InterestRepaymentNonCompounded</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>IHB_InterestRepaymentNonCompounded</DataField>
										<DataSource>SKS_PP_BankScr</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>IHBInterestRate_IHB_InterestRateFormat</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>IHB_InterestRateFormat</DataField>
										<DataSource>SKS_PP_BankScr</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>IHBInterestRate_IHB_CommId</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>IHB_CommId</DataField>
										<DataSource>SKS_PP_BankScr</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>IHBInterestRate_IHB_InterestFilePath</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>IHB_InterestFilePath</DataField>
										<DataSource>SKS_PP_BankScr</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>SKS_PP_BankScr_IHBInterestBankFabricLocation</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>IHBInterestBankFabricLocation</DataField>
										<DataSource>SKS_PP_BankScr</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>IHBInterestRate_IHB_InterestRateId</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>IHB_InterestRateId</DataField>
										<DataSource>SKS_PP_BankScr</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>IHBInterestRate_IHB_InterestEndDate</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>Date</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>IHB_InterestEndDate</DataField>
										<DataSource>SKS_PP_BankScr</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>SKS_PP_BankScr_IHB_PayOffCalculated</Name>
										<Type>CheckBox</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>IHB_PayOffCalculated</DataField>
										<DataSource>SKS_PP_BankScr</DataSource>
									</AxFormControl>
								</Controls>
								<Caption>@SKS:SKGIHBInhouseBankIntCalc</Caption>
								<DataSource>SKS_PP_BankScr</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>IHB_InterestNote</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>SKS_PP_BankScr_IHB_OD_UseTASSetupDefault</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>CheckBox</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>IHB_OD_UseTASSetupDefault</DataField>
										<DataSource>SKS_PP_BankScr</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>SKS_PP_BankScr_IHB_OD_SendEmail</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>CheckBox</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>IHB_OD_SendEmail</DataField>
										<DataSource>SKS_PP_BankScr</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>SKS_PP_BankScr_IHB_OD_AttachTemplate</Name>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>IHB_OD_AttachTemplate</DataField>
										<DataSource>SKS_PP_BankScr</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>SKS_PP_BankScr_IHB_OD_TemplateLanguage</Name>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>IHB_OD_TemplateLanguage</DataField>
										<DataSource>SKS_PP_BankScr</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>SKS_PP_BankScr_IHB_OD_ReplyToEmail</Name>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>IHB_OD_ReplyToEmail</DataField>
										<DataSource>SKS_PP_BankScr</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>SKS_PP_BankScr_IHB_OD_ReplyToName</Name>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>IHB_OD_ReplyToName</DataField>
										<DataSource>SKS_PP_BankScr</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>SKS_PP_BankScr_IHB_OD_FileType</Name>
										<Type>ComboBox</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>IHB_OD_FileType</DataField>
										<DataSource>SKS_PP_BankScr</DataSource>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>SKS_PP_BankScr_IHB_OD_FileName</Name>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>IHB_OD_FileName</DataField>
										<DataSource>SKS_PP_BankScr</DataSource>
									</AxFormControl>
								</Controls>
								<Caption>@SKS:SKGInterestGrp</Caption>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>SKS_PP_BankScr_IHB_OD_InterestNoteEmailAddress</Name>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<DataField>IHB_OD_InterestNoteEmailAddress</DataField>
								<DataSource>SKS_PP_BankScr</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormRealControl">
								<Name>SKS_PP_BankScr_IHB_AppropiationAmount</Name>
								<Type>Real</Type>
								<FormControlExtension
									i:nil="true" />
								<DataField>IHB_AppropiationAmount</DataField>
								<DataSource>SKS_PP_BankScr</DataSource>
							</AxFormControl>
						</Controls>
						<ColumnsMode>Fill</ColumnsMode>
						<Caption>@SKS:SKGIHB</Caption>
					</AxFormControl>
				</Controls>
				<AlignChild>No</AlignChild>
				<ArrangeMethod>Vertical</ArrangeMethod>
				<Style>FastTabs</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>