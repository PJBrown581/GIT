<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>SKS_EFTAP_CreateSendFiles</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class SKS_EFTAP_CreateSendFiles extends FormRun
{

    SKS_EFT_FileNbr gEFTFileNbr;
    SKS_EFT_FileFormat gSKS_EFT_FileFormat;
    Str gExitKeepDelete;
    formRun gSKS_FXA_DetailsForm;
    str SelectFileNumber;
    boolean EFTFileNameCanChange;

    boolean SubFormOpen;

    boolean APtestFile;
    boolean ARtestFile;

    int EFTModule;

    boolean CreatedAPTestFile;
    boolean CreatedARTestFile;
    boolean selectionChangeFlag;
    boolean ServerSide;
    SKS_EFT_Setup sKS_EFT_Setup; // CR-9196
   
        
    //<Issue21311>
    //public boolean canClose()
    //{
    //    boolean ret;

    //    ret = super();

    //    if ( SubFormOpen == true)
    //    {
    //        return false;
    //    }

    //    if(DSSKS_EFTAP_File.EffectiveDate == dateNull()
    //        && (DSSKS_EFTAP_File.FXAProcessing == NoYes::No
    //            && gSKS_EFT_FileFormat.EffectiveDateMethod == SKS_EFT_EffectiveDateMethod::FormatOffset))
    //    {
    //        error("@SKS3693");
    //        return false;
    //    }
    //    super();        

    //    return ret;
    //}
    //</Issue21311>

}
]]></Source>
			</Method>
			<Method>
				<Name>clearSelected</Name>
				<Source><![CDATA[
    void clearSelected()
    {
        element.editSelectFileNumber( true, '');
        nextactiondisplay.setEditText( Enum2str(SKS_PP_NextActionDisplay::Select));
        nextactiondisplay.enabled(false);
        BeginProcessing.enabled(false);
        PrintReport.enabled(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>editSelectFileNumber</Name>
				<Source><![CDATA[
    //BP Deviation Documented
    edit SKS_EFT_FileNbr editSelectFileNumber( boolean set, SKS_EFT_FileNbr value )
    {
        if (set)
        {
            SelectFileNumber = value;
        }

        return SelectFileNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>EnableControlsFromAction</Name>
				<Source><![CDATA[
    void EnableControlsFromAction()
    {

        str test;
        SKS_EFT_Setup setuprecord;

        test = nextactiondisplay.getText(nextactiondisplay.selection());
        if ( test != Enum2str(SKS_PP_NextActionDisplay::Select))
        {
            select firstonly APPrintAuditChg, ARPrintAuditChg from setuprecord;
            BeginProcessing.enabled(true);
            if(EFTModule== SKS_EFT_Module::AP)
            {
                printReport.enabled(setuprecord.APPrintAuditChg);
            }
            else  if(EFTmodule == SKS_EFT_Module::AR)
            {
                printReport.enabled(setuprecord.ARPrintAuditChg);
            }
        }
        else
        {
            BeginProcessing.enabled(false);
            PrintReport.enabled(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableEffectiveDate</Name>
				<Source><![CDATA[
    public void enableEffectiveDate(boolean _enabled)
    {
        DSSKS_EFTAP_FILE_ds.object(fieldNum(SKS_EFTAP_File,EffectiveDate)).enabled(_enabled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableFileButtons</Name>
				<Source><![CDATA[
    private void enableFileButtons()
    {
        boolean fileExists;
        str errfilePathName;
        str logfilePathName;
        boolean controlfileexists;
        str controlLogFilePathName;
        str controlErrFilePathName;
        SKS_EB_FileHub fileHub = SKS_EB_FileHub::construct(DSSKS_EFTAP_File.BFBankIntegration);

        // #15996 -- For old records continue to query filehub/BankFabric for error file
        if (!DSSKS_EFTAP_File.ErrFileExist && !DSSKS_EFTAP_File.LogErrFilesChecked)
        {
            // Error file
            errfilePathName = DSSKS_EFTAP_File.FilePath + '\\Log\\' + DSSKS_EFTAP_File.FileName + '.err';
            controlErrFilePathName = DSSKS_EFTAP_File.FilePath + '\\Log\\' + DSSKS_EFTAP_File.ControlFileName + '.err';

            fileHub.runFileInquire(errfilePathName);
            fileExists = fileHub.attrFileExists();
            fileHub.runFileInquire(controlErrFilePathName);
            controlfileexists = fileHub.attrFileExists();

            DSSKS_eftap_file.LogErrFilesChecked = NoYes::Yes;
            DSSKS_eftap_file.ErrFileExist = (fileExists || controlfileexists)  ? NoYes::Yes : NoYes::No;
        }

        if(DSSKS_EFTAP_File.ErrFileExist) // || (fileExists || controlfileexists))
        {
            errorfile.enabled(true);
        }
        else
        {
            errorfile.enabled(false);
        }

        // #15996 -- For old records continue to query filehub/BankFabric for log file
        if (!DSSKS_EFTAP_File.LogFileExist && !DSSKS_EFTAP_File.LogErrFilesChecked)
        {
            // Log file
            logfilePathName = DSSKS_EFTAP_File.FilePath + '\\Log\\' + DSSKS_EFTAP_File.FileName + '.log';
            controlLogFilePathName = DSSKS_EFTAP_File.FilePath + '\\Log\\' + DSSKS_EFTAP_File.ControlFileName + '.log';

            fileHub.runFileInquire(logfilePathName);
            fileExists = fileHub.attrFileExists();
            fileHub.runFileInquire(controlLogFilePathName);
            controlfileexists = fileHub.attrFileExists();

            DSSKS_eftap_file.LogErrFilesChecked = NoYes::Yes;
            DSSKS_eftap_file.LogFileExist = (fileExists || controlfileexists)  ? NoYes::Yes : NoYes::No;
        }

        if(DSSKS_EFTAP_File.LogFileExist) // || (fileExists || controlfileexists))
        {
            logfile.enabled(true);
        }
        else
        {
            logfile.enabled(false);
        }
        if(DSSKS_EFTAP_File.APIFormatType == SKS_EFT_APIFormatType::API)
        {
            DSSKS_EFTAP_File_FilePath.visible(false);
            DSSKS_EFTAP_File_FileName.visible(false);

            TabPage1.visible(false);
            TabPageFXAll.visible(false);
        }
        else
        {
            DSSKS_EFTAP_File_FilePath.visible(true);
            DSSKS_EFTAP_File_FileName.visible(true);

            TabPage1.visible(true);
            TabPageFXAll.visible(true);
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>enableFXAllControls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enable/disable controls on the FXAll tab.
    /// </summary>
    /// <param name="_enable">
    /// this parameter determenes if the controls are enabled:  True = enabled, false = disabled
    /// </param>
    /// <remarks>
    /// Currently, controls are disabled by design.  This method must be public as it is called by child form SKS_EFT_SelectViewFiles
    /// </remarks>
    private void enableFXAllControls(boolean _enable)
    {

        DSSKS_EFTAP_File_ds.object(fieldNum(SKS_EFTAP_File,FXATradeSent)).enabled(_enable);
        DSSKS_EFTAP_File_ds.object(fieldNum(SKS_EFTAP_File,FXAAllTradeAcksReceived)).enabled(_enable);
        DSSKS_EFTAP_File_ds.object(fieldNum(SKS_EFTAP_File,FXASettlementConfReceived)).enabled(_enable);
        DSSKS_EFTAP_File_ds.object(fieldNum(SKS_EFTAP_File,FXAPaymentInstructionsSent)).enabled(_enable);
        if(DSSKS_EFTAP_File.FXAProcessing == NoYes::Yes)
        {
            SKS_FXA_Details.enabled(true);
        }
        else
        {
            SKS_FXA_Details.enabled(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSKS_EFT_FileFormat</Name>
				<Source><![CDATA[
    public SKS_EFT_FileFormat getSKS_EFT_FileFormat()
    {
        return gSKS_EFT_FileFormat;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSKS_EFT_Module</Name>
				<Source><![CDATA[
    public SKS_EFT_Module getSKS_EFT_Module()
    {
        return element.args().parmEnum();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        SKS_PP_Sys   tmpSKS_PP_Sys;
        SKS_PP_500PPBas dd500PP;
        //SKS_EFTAP_File    tmpSKS_EFTAP_File;
        SKS_EFT_Setup  setuprecord;
        str message;
        int result;
        //VendPaymModeTable vendPaymModeTable;
        //CustPaymModeTable custPaymModeTable;
        //SKS_EFT_Bank tmpsks_eft_bank;
        //SKS_EFTAR_Bank tmpsks_eftar_bank;
        //SKS_EFTBTB_Bank tmpsks_eftbtb_bank;
        //SKS_EFT_FileNbr NextFileNbr;

        ;

        super();

        if(element.args().parmEnum() == SKS_EFT_Module::AP)
        {
            this.design().caption("@SKS1453");
            EFTModule = SKS_EFT_Module::AP;
            select firstonly APFileAddEBNbr,APFileAddDate,APFileNameConnector, APServerSideFiles,SKS_BFL_FIleCompare from setuprecord;
            serverside = setuprecord.APServerSideFiles;
            Alerts.enabled(false);
            AdvEmailDate.enabled(false);
            Alerts.visible(false);
            AdvEmailDate.visible(false);
            History.menuItemType(MenuItemType::Display);
            History.menuItemName("@SKS6146");
        }        
        else if(element.args().parmEnum() == SKS_EFT_Module::BTB)
        {
            this.design().caption("@SKS:SKGBTBCreateAndSendFomCaption");
            SelectViewPayments.text('Select/view transfers');
            EFTModule = SKS_EFT_Module::BTB;
            DSSKS_EFTAP_File_FXAllProcessing.visible(false);
            History.text('@SKS3190');
            History.menuItemType(MenuItemType::Display);
            History.menuItemName("@SKS6146");
            SKS_FXA_Details.visible(false);
            TabPageFXAll.visible(false);
            DSSKS_EFTAP_File_journalOption.visible(false);
            Alerts.enabled(false);
            AdvEmailDate.enabled(false);
            Alerts.visible(false);
            AdvEmailDate.visible(false);
            PrintReport.visible(false);
            DSSKS_EFTAP_File_TransferDirection.visible(true);
            DSSKS_EFTAP_File_PmtCount.label('@SKS2380');
            PaymentCount.label('@SKS:SKSOriginalCount');

            select firstonly BTBFileAddEBNbr,BTBFileAddDate,BTBFileNameConnector, BTBServerSideFiles,SKS_BFL_FIleCompare from setuprecord;
            serverside = setuprecord.BTBServerSideFiles;
            if (setuprecord.BTBServerSideFiles)
            {
                DSSKS_EFTAP_File_FilePath.lookupButton(FormLookupButton::Hidden);
            }

        }
        else if(element.args().parmEnum() == SKS_EFT_Module::CNP)
        {
            this.design().caption('@SKS:SKGCNPCreateSendFile');
            EFTModule = SKS_EFT_Module::CNP;
            DSSKS_EFTAP_File_FXAllProcessing.visible(false);
            History.text('@SKS3190');
            History.menuItemType(MenuItemType::Display);
            History.menuItemName("@SKS6146");
            SKS_FXA_Details.visible(false);
            TabPageFXAll.visible(false);
            PrintReport.visible(false);
            Alerts.enabled(false);
            AdvEmailDate.enabled(false);
            Alerts.visible(false);
            AdvEmailDate.visible(false);
            DSSKS_EFTAP_File_journalOption.visible(false);
            DSSKS_EFTAP_File_PmtCount.label('@SKS2380');
            PaymentCount.label('@SKS:SKSOriginalCount');
            select firstonly CNPFileAddEBNbr,CNPFileAddDate,CNPFileNameConnector, CNPServerSideFiles,SKS_BFL_FIleCompare from setuprecord;
            serverside = setuprecord.CNPServerSideFiles;
            if (setuprecord.CNPServerSideFiles)
            {
                DSSKS_EFTAP_File_FilePath.lookupButton(FormLookupButton::Hidden);
            }

        }
        else
        {
            this.design().caption("@SKS1835");
            EFTModule = SKS_EFT_Module::AR;
            DSSKS_EFTAP_File_TransmitDate.label("@SKS2597");
            DSSKS_EFTAP_File_TransmitDate.helpText("@SKS2609");
            DSSKS_EFTAP_File_FXAllProcessing.visible(false);
            History.caption("@SKS4144");
            History.menuItemType(MenuItemType::Display);
            History.menuItemName(menuitemDisplayStr(SKS_DD_FileHistory));
            SKS_FXA_Details.visible(false);
            TabPageFXAll.visible(false);
            select firstonly ARFileAddEBNbr,ARFileAddDate,ARFileNameConnector, ARServerSideFiles,SKS_BFL_FIleCompare from setuprecord;
            serverside = setuprecord.ARServerSideFiles;
        }

        SubFormOpen = false;
        tmpSKS_PP_Sys = new SKS_PP_Sys();


        if ( !tmpSKS_PP_Sys.ValidateSetup(this.name(), element.args().parmEnum()))
        {
            this.close();
        }
        else
        {

            EFTFileNameCanChange = false;

            select firstonly dataAreaId from DSSKS_EFTAP_File where DSSKS_EFTAP_File.eftFileType == EFTModule;
            if (!DSSKS_EFTAP_File )
            {
                if(EFTModule == SKS_EFT_Module::AP)
                {
                    //  If no AP records, then display Welcome.
                    message = "@SKS1441";
                    Box::info("@SKS1442",message);
                }
                else if(EFTModule == SKS_EFT_Module::BTB)
                {
                    //  If no BTB records, then display Welcome.
                    message = "@SKS:SKGBTBEFTCreateandsendFiles";
                    Box::info("@SKS:SKGBTBCreateanSendFileWelcomeMsg",message);
                }
                else if(EFTModule == SKS_EFT_Module::CNP)
                {
                    //  If no CNP records, then display Welcome.
                    message = "@SKS:SKGCNPEFTCreateandsendFiles";
                    Box::info("@SKS:SKGCNPCreateanSendFileWelcomeMsg",message);
                }
                else
                {
                    //  If no AR EFT records, then display Welcome.
                    message = "@SKS1851";
                    Box::info("@SKS1852",message);
                }
            }

            dd500PP = new SKS_PP_500PPBas();
            if(EFTModule == SKS_EFT_Module::AP)
            {
                result = dd500PP.IsRegistered('APEFT');
            }
            else if(EFTModule == SKS_EFT_Module::AR)
            {
                result = dd500PP.IsRegistered('AREFT');
            }
            else if(EFTModule == SKS_EFT_Module::BTB)
            {
                result = dd500PP.IsRegistered('BTBEFT');
            }
            else if(EFTModule == SKS_EFT_Module::CNP)
            {
                result = dd500PP.IsRegistered('CNPEFT');
            }

            if (result != 1)
            {
                box::warning("@SKS326");
                this.close();
            }

            if (setuprecord.SKS_BFL_FIleCompare)
            {
                BFLFileCompare.enabled(true);
            }
            else
            {
                BFLFileCompare.enabled(false);
            }

            BeginProcessing.enabled(false);
            PrintReport.enabled(false);

            if(EFTModule == SKS_EFT_Module::AP || EFTModule == SKS_EFT_Module::CNP)
            {
                printReport.value(setuprecord.APPrintAudit);
            }
            else if(EFTModule == SKS_EFT_Module::AR)
            {
                printReport.value(setuprecord.ARPrintAudit);
            }
            //else if(EFTModule == SKS_EFT_Module::BTB)
            //{
            //    printReport.value(setuprecord.BTBPrintAudit);
            //}
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>LineStatusUpdates</Name>
				<Source><![CDATA[
    [SuppressBPWarningAttribute('BPCheckSelectForUpdateAbsent','Buffer gSKS_EFT_FileFormat is global and subject to updates in other methods.  This buffer must be selected forupdate.')]
    void LineStatusUpdates(SKS_EFT_Module _module = SKS_EFT_Module::AP)
    {

        SKS_EFT_Setup  setuprecord;
        ;

        DSSKS_EFTAP_File_ds.allowDelete(true);

        if(DSSKS_EFTAP_File.journaloption == SKS_EFT_FileJournalOption::MasterAccountList)
        {
            DSSKS_EFTAP_File_JournalOption.enabled(false);
            SelectViewPayments.enabled(false);
        }
        else
        {
            DSSKS_EFTAP_File_JournalOption.enabled(true);
            SelectViewPayments.enabled(true);
        }

        DSSKS_EFTAP_File_ds.object(fieldNum(SKS_EFTAP_File,EffectiveDate)).enabled(DSSKS_EFTAP_File.FXAProcessing == NoYes::No);
        if(DSSKS_EFTAP_File.EFTFileType ==  SKS_EFT_Module::AP || DSSKS_EFTAP_File.EFTFileType ==  SKS_EFT_Module::CNP)
        {
            Select forupdate gSKS_EFT_FileFormat where gSKS_EFT_FileFormat.FormatId == DSSKS_EFTAP_File.FormatId;
            DSSKS_EFTAP_File_DS.object(fieldNum(SKS_EFTAP_File,EffectiveDate)).allowEdit(gSKS_EFT_FileFormat.EffectiveDateMethod == SKS_EFT_EffectiveDateMethod::FormatOffset || gSKS_EFT_FileFormat.EffectiveDateMethod == SKS_EFT_EffectiveDateMethod::PaymSpecOffset);
        }
        FileDetails.enabled(true);

        select firstonly APFileNameCanChange, ARFileNameCanChange, APReqPreNote, ARReqPreNote, ModFX from setuprecord;
        //Advance Email
        if(DSSKS_EFTAP_File.AdvEmail == NoYes::Yes)
        {
            Alerts.enabled(true);
            AdvEmailDate.enabled(true);
        }
        else
        {
            Alerts.enabled(false);
            AdvEmailDate.enabled(false);
        }

        //<Issue20996: FXAProcessing field cannot be editable>
        // FXAProcessing field
        //DSSKS_EFTAP_File_ds.object(fieldNum(SKS_EFTAP_File, FXAProcessing)).enabled(setuprecord.ModFX);
        //</Issue20996>

        if(DSSKS_EFTAP_file.JournalOption == SKS_EFT_filejournaloption::TestFile)
        {
            DSSKS_EFTAP_File_JournalOption.enabled(false);
        }
        else if(element.args().parmEnum() == SKS_EFT_Module::AP)
        {
            if (setupRecord.APReqPreNote != 1)
            {
                DSSKS_EFTAP_File_JournalOption.enabled(false);
            }
        }
        else
        {
            if (setupRecord.ARReqPreNote != 1)
            {
                DSSKS_EFTAP_File_JournalOption.enabled(false);
            }
        }


        if(DSSKS_EFTAP_file.FileStatus == SKS_EFT_FileStatus::NotProcessed)
        {
            FileDetails.enabled(false);
        }

        if(DSSKS_EFTAP_file.FileStatus == SKS_EFT_FileStatus::Completed || DSSKS_EFTAP_file.FileStatus == SKS_EFT_FileStatus::CompletedNoEmail)
        {
            DSSKS_EFTAP_file_ds.allowDelete(false);
        }
        else
        {
            DSSKS_EFTAP_file_ds.allowDelete(true);
        }

        if (DSSKS_EFTAP_File.BFBankIntegration == SKS_BF_BankIntType::FileHubLocal
            && (DSSKS_EFTAP_file.FileStatus != SKS_EFT_FileStatus::Completed && DSSKS_EFTAP_file.FileStatus != SKS_EFT_FileStatus::CompletedNoEmail)
            && ((EFTModule == SKS_EFT_Module::AP && setuprecord.APFileNameCanChange == noyes::Yes) ||
               (EFTModule == SKS_EFT_Module::AR && setuprecord.ARFileNameCanChange == noyes::Yes)))
        {
            DSSKS_EFTAP_File_FilePath.allowEdit(true);
            DSSKS_EFTAP_File_FileName.allowEdit(true);
        }
        else
        {
            DSSKS_EFTAP_File_FilePath.allowEdit(false);
            DSSKS_EFTAP_File_FileName.allowEdit(false);
        }
        If (DSSKS_EFTAP_file.FileStatus == SKS_EFT_FileStatus::Completed || DSSKS_EFTAP_file.FileStatus == SKS_EFT_FileStatus::CompletedNoEmail)
        {
            DSSKS_EFTAP_File_JournalOption.enabled(false);
            DSSKS_EFTAP_FILE_ds.object(fieldNum(SKS_EFTAP_File,EffectiveDate)).enabled(false);
        }

        if (DSSKS_EFTAP_file.JournalOption == SKS_EFT_FileJournalOption::TestFile)
        {
            SelectViewPayments.enabled(false);
            FileDetails.enabled(false);
            BeginProcessing.enabled(true);
            nextactiondisplay.enabled(true);
            NextActionDisplay.clear();
            nextactiondisplay.add(Enum2str(SKS_PP_NextActionDisplay::CreateSendFile));
            nextactiondisplay.setEditText( Enum2str(SKS_PP_NextActionDisplay::CreateSendFile));

        }

        if (DSSKS_EFTAP_file.JournalOption == SKS_EFT_FileJournalOption::PreNotesOnly)
        {
            SelectViewPayments.enabled(false);
        }

        If (DSSKS_EFTAP_file.Selected == 1)
        {
            nextactiondisplay.enabled(true);
        }
        else
        {
            nextactiondisplay.enabled(false);
        }

        this.enableFileButtons();
        //FXAll controls on the FXAll tab are always diabled.
        this.enableFXAllControls(false);

        if(DSSKS_EFTAP_File.APIFormatType == SKS_EFT_APIFormatType::API)
        {
            FileDetails.enabled(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>openTestWriteFile</Name>
				<Source><![CDATA[
    protected boolean openTestWriteFile(str pathname, str filename)
    {
        str testFile;
        SKS_EB_FileHub fileHub = SKS_EB_FileHub::construct();

        testFile = pathname + '\\' + filename +  '.SKTest';

        fileHub.parmThrowErrorIfException(false);
        fileHub.runFileCreate(testfile, 'Test file');

        if (fileHub.errorHasException())
        {
            error(fileHub.errorException());
            return false;
        }
        else
        {
            fileHub.runFileDelete(testfile);
            return true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>RefreshParentPmtInfo</Name>
				<Source><![CDATA[
    void RefreshParentPmtInfo()
    {

        //SKS_EFTAP_File.update();
        DSSKS_EFTAP_File_ds.research(True);
    }

]]></Source>
			</Method>
			<Method>
				<Name>SubFormStatus</Name>
				<Source><![CDATA[
    void SubFormStatus( boolean opened )
    {
        SubFormOpen = opened;
    }

]]></Source>
			</Method>
			<Method>
				<Name>TestFile</Name>
				<Source><![CDATA[
    public boolean TestFile( str path, str file, boolean displayMessage)
    {
        if(!SKS_EB_FileHub::directoryExistsForm(path))
        {
            return false;
        }

        if(!element.openTestWriteFile(path, file))
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateParentAPPreNoteInfo</Name>
				<Source><![CDATA[
    void updateParentAPPreNoteInfo(DataAreaId company, str BankAccount, str PaymMode) //FDD-10590
    {
        SKS_EFT_Bank sks_eft_bank;
        vendPaymModeTable vendPaymModeTableFormat;
        ;

        DSSKS_EFTAP_File.PreNoteOnlyBankAccountId = BankAccount;
        DSSKS_EFTAP_File.PreNotesOnlyPaymMode = PaymMode;
        select firstonly SKS_EFT_FormatId from vendPaymModeTableFormat where vendPaymModeTableFormat.PaymMode == DSSKS_EFTAP_File.PreNotesOnlyPaymMode;
        sks_eft_bank = sks_eft_bank::findByCompany(company, DSSKS_EFTAP_File.PreNoteOnlyBankAccountId,DSSKS_EFTAP_File.PreNotesOnlyPaymMode); //FDD-10590
        DSSKS_EFTAP_File.FileName = sks_eft_bank.APFileName;
        //BankFaric
        DSSKS_EFTAP_File.FilePath = (DSSKS_EFTAP_File.BFBankIntegration == SKS_BF_BankIntType::FileHubLocal) ? sks_eft_bank.APFilePath : sks_eft_bank.APBankFabricFileLocation;
        DSSKS_EFTAP_File.FormatId = vendPaymModeTableFormat.SKS_EFT_FormatId;

        DSSKS_EFTAP_File.FileName = SKS_EFT_Common::getFileName(DSSKS_EFTAP_File.FileNbr, DSSKS_EFTAP_File.FileName, SKS_EFT_Module::AP);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateParentARPreNoteInfo</Name>
				<Source><![CDATA[
    void updateParentARPreNoteInfo(DataAreaId company, str BankAccount, str PaymMode) //FDD-10590
    {
        SKS_EFTAR_Bank sks_eftar_bank;
        SKS_EB_FileStorage sks_eb_filestorage;
        custPaymModeTable custPaymModeTableFormat;
        ;

        select firstonly sks_eb_filestorage;

        DSSKS_EFTAP_File.PreNoteOnlyBankAccountId = BankAccount;
        DSSKS_EFTAP_File.PreNotesOnlyPaymMode = PaymMode;
        select firstonly SKS_EFT_FormatId from custPaymModeTableFormat where custPaymModeTableFormat.PaymMode == DSSKS_EFTAP_File.PreNotesOnlyPaymMode;
        sks_eftar_bank = sks_eftar_bank::findByCompany(company,DSSKS_EFTAP_File.PreNoteOnlyBankAccountId,DSSKS_EFTAP_File.PreNotesOnlyPaymMode); //FDD-10590
        DSSKS_EFTAP_File.FileName = sks_eftar_bank.ARFileName;
        //BankFaric
        DSSKS_EFTAP_File.FilePath = (DSSKS_EFTAP_File.BFBankIntegration == SKS_BF_BankIntType::FileHubLocal) ? sks_eftar_bank.ARFilePath : sks_eftar_bank.ARBankFabricFileLocation;
        DSSKS_EFTAP_File.FormatId = custPaymModeTableFormat.SKS_EFT_FormatId;

        DSSKS_EFTAP_File.FileName = SKS_EFT_Common::getFileName(DSSKS_EFTAP_File.FileNbr, DSSKS_EFTAP_File.FileName, SKS_EFT_Module::AR);

    }

]]></Source>
			</Method>
			<Method>
				<Name>updateParentPmtInfo</Name>
				<Source><![CDATA[
    void updateParentPmtInfo( int PmtCount, AmountMST PmtTotal, str FormatId)
    {
        ;

        DSSKS_EFTAP_File.PmtCount = PmtCount;
        DSSKS_EFTAP_File.PmtTotal = PmtTotal;
        DSSKS_EFTAP_File.OriginalPmtTotal = PmtTotal;
        DSSKS_EFTAP_File.FormatId = FormatId;
        element.RefreshParentPmtInfo();


    }

]]></Source>
			</Method>
			<Method>
				<Name>UpdateSelectCheckBox</Name>
				<Source><![CDATA[
    void UpdateSelectCheckBox()
    {
        str APmessage, ARmessage;
        str transmitted;
        str completemsg, filecreatedmsg,keepmsg,advemailfailedmsg,advemailsentmsg,advemailnotsentmsg;
        SKS_EFT_Bank tmpsks_eft_bank;
        SKS_EFTAR_Bank tmpsks_eftar_bank;
        str advemailpendingmsg, completedmailpendingmsg; // 9205 CR
        ;


        APmessage = "@SKS1441";
        Armessage = "@SKS1851";
        transmitted = "@SKS1445";
        completemsg = "@SKS1446";
        filecreatedmsg = "@SKS1447";
        keepmsg = "@SKS1448";
        advemailfailedmsg = "@SKS1983";
        advemailsentmsg = "@SKS1984";
        advemailnotsentmsg = "@SKS1985";
        // 9205 CR -->
        advemailpendingmsg = "@SKS:SKGWarningAdvEmailPending";
        completedmailpendingmsg = "@SKS:SKGWarningCompletedEmailPending";
        // 9205 CR <--
        Container   multiCompanies; //FDD-10590

        if ( DSSKS_EFTAP_File.Selected == false)
        {
            if ( DSSKS_EFTAP_File.FileNbr == element.editSelectFileNumber( false, '') )
            {
                element.clearSelected();
            }
        }
        else
        {

            element.editSelectFileNumber( true,  DSSKS_EFTAP_File.FileNbr);
            NextActionDisplay.clear();
            //NextActionDisplay.enumType(0);

            // --------------------------------------------------
            // Warning if Already processed
            // --------------------------------------------------
            // Statuses:
            //   Not Processed   blank
            //   Created         F
            //   Completed       C

            // ;Not Processed,F;File Created,C;Completed
            // ;Select,A;Create & Send file,K;Complete/Keep,P;Print Audit Report

            // ;Select,A;Create & Send file,S;Send File,K;Complete/Keep,E;Send Emails only,P;Print Audit Report,C;Complete Now screen

            if (DSSKS_EFTAP_file.JournalOption == SKS_EFT_FileJournalOption::PreNotesOnly)
            {
                if(EFTModule == SKS_EFT_Module::AP)
                {
                    multiCompanies = SKS_EB_VirtualCompany::getEFT_APMultiCompanies(); //FDD-10590 --->
                    if(multiCompanies != connull())
                    {
                        Select crosscompany:multiCompanies count(RecId) from tmpsks_eft_bank where tmpsks_eft_bank.APACHPreNote == 1;
                    }
                    else
                    {
                        Select count(RecId) from tmpsks_eft_bank where tmpsks_eft_bank.APACHPreNote == 1;
                    } //<--- FDD-10590
                    If (tmpsks_eft_bank.RecId >= 1) //Bug-11864
                    {
                        //mulitple banks have require prenotes selected
                        SelectPreNotes.clicked();
                    }
                    else
                    {    //only one bank with require prenotes selected
                        select firstonly * from tmpsks_eft_bank where tmpsks_eft_bank.APACHPreNote == 1;
                        element.updateParentAPPreNoteInfo(tmpsks_eft_bank.company(), tmpsks_eft_bank.BankAccountId, tmpsks_eft_bank.PaymMode); //FDD-10590
                    }

                }
                else //AR
                {
                    multiCompanies = SKS_EB_VirtualCompany::getDDMultiCompanies(); //FDD-10590 --->
                    if(multiCompanies != connull())
                    {
                        Select crosscompany:multiCompanies count(RecId) from tmpsks_eftar_bank where tmpsks_eftar_bank.ARACHPreNote == 1;
                    }
                    else
                    {
                        Select count(RecId) from tmpsks_eftar_bank where tmpsks_eftar_bank.ARACHPreNote == 1;
                    }
                    //<--- FDD-10590
                    If (tmpsks_eftar_bank.RecId >= 1) //Bug-11864
                    {
                        //mulitple banks have require prenotes selected
                        SelectARPreNotes.clicked();
                    }
                    else
                    {    //only one bank with require prenotes selected
                        select firstonly * from tmpsks_eftar_bank where tmpsks_eftar_bank.ARACHPreNote == 1;
                        element.updateParentARPreNoteInfo(tmpsks_eft_bank.company(),tmpsks_eftar_bank.BankAccountId, tmpsks_eftar_bank.PaymMode); //FDD-10590
                    }

                }

            }
            switch  ( DSSKS_EFTAP_File.FileStatus)
            {
                case SKS_EFT_FileStatus::AdvEmailFailed:
                    nextactiondisplay.add(Enum2str(SKS_PP_NextActionDisplay::CreateSendFile));
                    nextactiondisplay.add(Enum2str(SKS_PP_NextActionDisplay::SendAdvEmail));
                    nextactiondisplay.setEditText( Enum2str(SKS_PP_NextActionDisplay::SendAdvEmail));
                    box::info(advemailfailedmsg,ARmessage);
                    break;

                case SKS_EFT_FileStatus::AdvEmailSent:
                    nextactiondisplay.add(Enum2str(SKS_PP_NextActionDisplay::CreateSendFile));
                    nextactiondisplay.add(Enum2str(SKS_PP_NextActionDisplay::SendAdvEmail));
                    nextactiondisplay.add(Enum2str(SKS_PP_NextActionDisplay::Send));
                    nextactiondisplay.setEditText( Enum2str(SKS_PP_NextActionDisplay::CreateSendFile));
                    box::info(advemailsentmsg,ARmessage);
                    break;

                case SKS_EFT_FileStatus::AdvEmailNotSent:
                    nextactiondisplay.add(Enum2str(SKS_PP_NextActionDisplay::CreateSendFile));
                    nextactiondisplay.add(Enum2str(SKS_PP_NextActionDisplay::SendAdvEmail));
                    nextactiondisplay.setEditText( Enum2str(SKS_PP_NextActionDisplay::SendAdvEmail));
                    box::info(advemailnotsentmsg,ARmessage);
                    break;

                case  SKS_EFT_FileStatus::FileCreated:
                    // Warning - File has been Created, Next Action set to Complete/Keep...
                    nextactiondisplay.add(Enum2str(SKS_PP_NextActionDisplay::CreateSendFile));
                    nextactiondisplay.add(Enum2str(SKS_PP_NextActionDisplay::CompleteKeep));
                    if(DSSKS_EFTAP_file.JournalOption != SKS_EFT_FileJournalOption::PreNotesOnly && DSSKS_EFTAP_file.JournalOption != SKS_EFT_FileJournalOption::MasterAccountList)
                    {
                        nextactiondisplay.add(Enum2str(SKS_PP_NextActionDisplay::PrintAudit));
                    }
                    nextactiondisplay.add(Enum2str(SKS_PP_NextActionDisplay::SendAdvEmail));
                    nextactiondisplay.add(Enum2str(SKS_PP_NextActionDisplay::RetryComm));
                    nextactiondisplay.setEditText( Enum2str(SKS_PP_NextActionDisplay::Send));
                    if(eftmodule == SKS_EFT_Module::AP)
                    {
                        box::info(filecreatedmsg,APmessage);
                    }
                    else
                    {
                        box::info(filecreatedmsg,ARmessage);
                    }
                    break;
                case  SKS_EFT_FileStatus::Completed:
                    // Warning - File has been Sent/Processed.....
                    nextactiondisplay.add(Enum2str(SKS_PP_NextActionDisplay::Select));
                    if (DSSKS_EFTAP_file.JournalOption != SKS_EFT_FileJournalOption::PreNotesOnly &&
                        DSSKS_EFTAP_file.JournalOption != SKS_EFT_FileJournalOption::MasterAccountList &&
                        eftmodule != SKS_EFT_Module::CNP &&
                        eftmodule != SKS_EFT_Module::BTB)
                    {
                        nextactiondisplay.add(Enum2str(SKS_PP_NextActionDisplay::PrintAudit));
                    }
                    nextactiondisplay.add(Enum2str(SKS_PP_NextActionDisplay::CreateSendFile));
                    nextactiondisplay.setEditText( Enum2str(SKS_PP_NextActionDisplay::Select));
                    if(eftmodule == SKS_EFT_Module::AP)
                    {
                        box::warning(completemsg,APmessage);
                    }
                    else
                    {
                        box::warning(completemsg,ARmessage);
                    }
                    break;
                case  SKS_EFT_FileStatus::CompletedNoEmail:
                    // Warning - File has been Sent/Processed.....
                    nextactiondisplay.add(Enum2str(SKS_PP_NextActionDisplay::CreateSendFile));
                    nextactiondisplay.add(Enum2str(SKS_PP_NextActionDisplay::PrintAudit));
                    nextactiondisplay.add(Enum2str(SKS_PP_NextActionDisplay::EmailOnly));
                    nextactiondisplay.setEditText( Enum2str(SKS_PP_NextActionDisplay::EmailOnly));
                    if(eftmodule == SKS_EFT_Module::AP)
                    {
                        box::warning("@SKS169",APmessage);
                    }
                    else
                    {
                        box::warning("@SKS169",ARmessage);
                    }

                    break;
                case  SKS_EFT_FileStatus::Transmitted:
                    nextactiondisplay.add(Enum2str(SKS_PP_NextActionDisplay::CompleteKeep));
                    nextactiondisplay.add(Enum2str(SKS_PP_NextActionDisplay::CreateSendFile));
                    if (DSSKS_EFTAP_file.JournalOption != SKS_EFT_FileJournalOption::PreNotesOnly &&
                        DSSKS_EFTAP_file.JournalOption != SKS_EFT_FileJournalOption::MasterAccountList &&
                        eftmodule != SKS_EFT_Module::CNP &&
                        eftmodule != SKS_EFT_Module::BTB)
                    {
                        nextactiondisplay.add(Enum2str(SKS_PP_NextActionDisplay::PrintAudit));
                    }
                    nextactiondisplay.setEditText( Enum2str(SKS_PP_NextActionDisplay::CompleteKeep));
                    if(eftmodule == SKS_EFT_Module::AP)
                    {
                        box::info(transmitted,APmessage);
                    }
                    else
                    {
                        box::info(transmitted,ARmessage);
                    }
                    break;
                case  SKS_EFT_FileStatus::CommFailed:
                    nextactiondisplay.add(Enum2str(SKS_PP_NextActionDisplay::RetryComm));
                    nextactiondisplay.add(Enum2str(SKS_PP_NextActionDisplay::CreateSendFile));
                    nextactiondisplay.add(Enum2str(SKS_PP_NextActionDisplay::CompleteKeep));
                    nextactiondisplay.setEditText( Enum2str(SKS_PP_NextActionDisplay::RetryComm));
                    break;
                // 9205 CR -->
                case SKS_EFT_FileStatus::AdvEmailPending:
                    if(eftmodule == SKS_EFT_Module::AR)
                    {
                        nextactiondisplay.add(Enum2str(SKS_PP_NextActionDisplay::CreateSendFile));
                        nextactiondisplay.add(Enum2str(SKS_PP_NextActionDisplay::SendAdvEmail));
                        nextactiondisplay.selectText(enum2Str(SKS_PP_NextActionDisplay::CreateSendFile));
                        box::warning(advemailpendingmsg);
                    }
                    break;
                case SKS_EFT_FileStatus::CompletedEmailPending:
                    if(eftmodule == SKS_EFT_Module::AR || eftmodule == SKS_EFT_Module::AP) //CR -9496 AP
                    {
                        nextactiondisplay.add(Enum2str(SKS_PP_NextActionDisplay::CreateSendFile));
                        nextactiondisplay.add(Enum2str(SKS_PP_NextActionDisplay::PrintAudit));
                        nextactiondisplay.add(Enum2str(SKS_PP_NextActionDisplay::EmailOnly));
                        nextactiondisplay.selectText(enum2Str(SKS_PP_NextActionDisplay::EmailOnly));
                        box::warning(completedmailpendingmsg);
                    }
                    break;
                // 9205 CR <--
                case SKS_EFT_FileStatus::CompletedRemitdetailFailed:    //DevOps - 21456
                    if(eftmodule == SKS_EFT_Module::AP)
                    {
                        nextactiondisplay.add(Enum2str(SKS_PP_NextActionDisplay::EmailOnly));
                        nextactiondisplay.add(Enum2str(SKS_PP_NextActionDisplay::CreateSendFile));
                        nextactiondisplay.selectText(enum2Str(SKS_PP_NextActionDisplay::EmailOnly));
                        box::warning(completedmailpendingmsg);
                    }
                    break;
                default:
                    nextactiondisplay.add(Enum2str(SKS_PP_NextActionDisplay::CreateSendFile));
                    if(eftmodule == SKS_EFT_Module::AR)
                    {
                        if(DSSKS_EFTAP_File.AdvEmail == NoYes::Yes)
                        {
                            // CR-9196 -->
                            // When line is manually created and selected for payments,then next action should be defaulted to “Send adv e-mail" based on TAS parameters setup.
                            sKS_EFT_Setup = SKS_EFT_Setup::find();
                            if(sKS_EFT_Setup.ARAdvEmailNotify && sKS_EFT_Setup.ModAREmail)
                            {
                                nextactiondisplay.add(Enum2str(SKS_PP_NextActionDisplay::SendAdvEmail));
                                nextactiondisplay.selectText(enum2str(SKS_PP_NextActionDisplay::SendAdvEmail));
                            }
                            // CR-9196 <--
                        }
                        else
                        {
                            nextactiondisplay.setEditText( Enum2str(SKS_PP_NextActionDisplay::CreateSendFile));
                        }
                    }
                    else
                    {
                        nextactiondisplay.setEditText( Enum2str(SKS_PP_NextActionDisplay::CreateSendFile));
                    }
                    // Not Processed or In Process,  Only allow Create & Send for these Keep/Deletes
                    break;

            }

            nextactiondisplay.enabled(true);
            element.EnableControlsFromAction();
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>validate_paths_filename</Name>
				<Source><![CDATA[
    public boolean validate_paths_filename(boolean showmessage)
    {
        str message;


        if ( DSSKS_EFTAP_File.FileNbr != element.editSelectFileNumber( false, '') )
        {

            if ( strlen( element.editSelectFileNumber( false, '')) > 0)
            {
                // --------------------------------------------------
                // Only one File can be selected at a time
                // --------------------------------------------------
                If (showmessage)
                {
                    if(EFTModule == SKS_EFT_Module::AP)
                    {
                        message = "@SKS1441";
                    }
                    else
                    {
                        message = "@SKS1851";
                    }
                    Box::warning("@SKS1449",message); // MSG_ONLY_ONE_FILE_SELECTED_AT_A_TIME:24214
                }
                DSSKS_EFTAP_File.Selected = false;
                return false;
            }
            else
            {
                // --------------------------------------------------
                // Can only select if some batches have been attached
                // --------------------------------------------------
                // Use BatchCount here as Void batches can have a zero Total Value
                if (DSSKS_EFTAP_File.PmtCount == 0 && DSSKS_EFTAP_File.FileStatus != SKS_EFT_FileStatus::Transmitted && DSSKS_EFTAP_File.OriginalPmtTotal == 0
                    && (DSSKS_EFTAP_file.JournalOption != SKS_EFT_FileJournalOption::PreNotesOnly
                        && DSSKS_EFTAP_file.JournalOption != SKS_EFT_FileJournalOption::MasterAccountList))
                {
                    if (showmessage)
                    {
                        if(EFTModule == SKS_EFT_Module::AP)
                        {
                            message = "@SKS1441";
                            Box::warning("@SKS1450",message);
                        }
                        else
                        {
                            message = "@SKS1851";
                            Box::warning("@SKS1854",message);
                        }
                    }
                    DSSKS_EFTAP_File.Selected = false;
                    return false;
                }
                // -------------------------------------------------------
                // If not yet processed, then test filename/path
                // -------------------------------------------------------
                else if ( DSSKS_EFTAP_File.FileStatus != SKS_EFT_FileStatus::FileCreated  &&
                          DSSKS_EFTAP_File.FileStatus != SKS_EFT_FileStatus::Completed &&
                          DSSKS_EFTAP_File.JournalOption != SKS_EFT_FileJournalOption::PreNotesOnly
                          )

                {
                    //Bankfabric
                    if (DSSKS_EFTAP_File.BFBankIntegration == SKS_BF_BankIntType::FileHubLocal)
                    {
                        if ( element.TestFile( DSSKS_EFTAP_File.FilePath, DSSKS_EFTAP_File.FileName, true) == false)
                        {
                            // Message already displayed in TesFile().
                            DSSKS_EFTAP_File.Selected = false;
                            return false;
                        }
                    }
                    //TODO: Discuss with Kevin about testing BankFabric Connection??
                }

            }
        }
        return true;

    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>DSSKS_EFTAP_File</Name>
				<Methods>
					<Method>
						<Name>delete</Name>
						<Source><![CDATA[
        public void delete()
        {
            super();
            SelectViewPayments.enabled(false);
        }

]]></Source>
					</Method>
					<Method>
						<Name>validateDelete</Name>
						<Source><![CDATA[
        public boolean validateDelete()
        {
            boolean ret = true;
            SKS_EFT_FilePmtSelection TmpSKS_EFT_FilePmtSelection;
            str message;
            ;

            message = "@SKS1451";

            if ( DSSKS_EFTAP_File.FileStatus == SKS_EFT_FileStatus::FileCreated)
            {
                // Warning!  This file was created, but not completed.  If you delete the Journals in the file will be available
                // to be reselected into another AP EFT file.  Are you sure you want to continue and delete this file?
                if ( Box::yesNo( message, DialogButton::No, "@SKS155") == DialogButton::No)
                {
                    ret =  false;
                }
            }
            else
            {
                ret = super();
            }

            if(ret == true && DSSKS_EFTAP_File.Selected == True)
            {
                element.editSelectFileNumber( True, '');
            }

            if ( ret == true && DSSKS_EFTAP_File.RecId > 0 )
            {
                // Clear the Journals
                ttsbegin;

                while select forupdate crosscompany TmpSKS_EFT_FilePmtSelection 
                order by TmpSKS_EFT_FilePmtSelection.dataAreaId
                        where TmpSKS_EFT_FilePmtSelection.FileRecId == DSSKS_EFTAP_File.RecId
                {
                    changecompany(TmpSKS_EFT_FilePmtSelection.company())
                    {
                        TmpSKS_EFT_FilePmtSelection.Selected = false;
                        TmpSKS_EFT_FilePmtSelection.FileRecId = 0;
                        TmpSKS_EFT_FilePmtSelection.PrimaryFormat = false;
                        TmpSKS_EFT_FilePmtSelection.update();
                    }

                }
                ttscommit;
            }
            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        public int active()
        {
            int ret;

            ret = super();

            element.LineStatusUpdates();

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            SKS_EFT_Setup  setuprecord;
            //SKS_EFTAR_Bank sks_eftar_bank;

            QueryBuildDataSource    qbs;
            QueryBuildRange         qbrange;
            //QueryBuildRange         locCompletedQueryBuildRange, locCompletedQueryBuildRange2, locCompletedQueryBuildRange3;

            super();

            if(element.args().parmEnum() == SKS_EFT_Module::AP)
            {
                select firstonly APReqPreNote from setupRecord;
                if (setupRecord)
                {
                    if ( setupRecord.APReqPreNote == 1)
                    {
                        New_PreNotes.visible(true);
                        New_PreNotes.enabled(true);
                        DSSKs_EFTAP_FILE_journalOption.enabled(true);
                    }
                    else
                    {
                        New_PreNotes.enabled(false);
                        New_PreNotes.visible(false);
                        DSSKs_EFTAP_FILE_journalOption.enabled(false);
                    }
                }

                this.object(fieldNum(SKS_EFTAP_File, TransferDirection)).visible(false);
            }
            else if(element.args().parmEnum() == SKS_EFT_Module::AR)
            {
                select firstonly ARReqPreNote from setupRecord;
                if ( setupRecord.ARReqPreNote == 1)
                {
                    New_PreNotes.visible(true);
                    New_PreNotes.enabled(true);
                    DSSKs_EFTAP_FILE_journalOption.enabled(true);
                }
                else
                {
                    New_PreNotes.enabled(false);
                    New_PreNotes.visible(false);
                    DSSKs_EFTAP_FILE_journalOption.enabled(false);
                }

                this.object(fieldNum(SKS_EFTAP_File, TransferDirection)).visible(false);
            }

            qbs = this.query().dataSourceTable(tablenum(SKS_EFTAP_File));
            qbs.clearRanges();
            qbs.addSortField(fieldname2id(tablenum(SKS_EFTAP_File), fieldstr(SKS_EFTAP_File,FileNbr)),SortOrder::Descending);
            qbrange = qbs.addRange(fieldNum(SKS_EFTAP_File,EFTFileType));
            SKS_EFT_Module callerfrmParmEnum = element.args().parmEnum();
            qbrange.value(enum2Value(callerfrmParmEnum));
            qbrange.status(RangeStatus::Hidden);

            if(element.args().menuItemName() == 'SKS_EFT_TasAPFilesNotCompletedMI' || element.args().menuItemName() == 'SKS_EFT_TasARDiretDebitFilesWorkspace_NotCompleted')
            {
                qbs.addRange(fieldNum(SKS_EFTAP_File,FileStatus)).value(queryValue(enum2Value(SKS_EFT_FileStatus::AdvEmailFailed)));
                qbs.addRange(fieldNum(SKS_EFTAP_File,FileStatus)).value(queryValue(enum2Value(SKS_EFT_FileStatus::AdvEmailNotSent)));
                qbs.addRange(fieldNum(SKS_EFTAP_File,FileStatus)).value(queryValue(enum2Value(SKS_EFT_FileStatus::AdvEmailPending)));
                qbs.addRange(fieldNum(SKS_EFTAP_File,FileStatus)).value(queryValue(enum2Value(SKS_EFT_FileStatus::AdvEmailSent)));
                qbs.addRange(fieldNum(SKS_EFTAP_File,FileStatus)).value(queryValue(enum2Value(SKS_EFT_FileStatus::CommFailed)));
                qbs.addRange(fieldNum(SKS_EFTAP_File,FileStatus)).value(queryValue(enum2Value(SKS_EFT_FileStatus::FileCreated)));
                qbs.addRange(fieldNum(SKS_EFTAP_File,FileStatus)).value(queryValue(enum2Value(SKS_EFT_FileStatus::FXAllAllTradeAcksRecieved)));
                qbs.addRange(fieldNum(SKS_EFTAP_File,FileStatus)).value(queryValue(enum2Value(SKS_EFT_FileStatus::FXAllAllTradeAcksRecieved)));
                qbs.addRange(fieldNum(SKS_EFTAP_File,FileStatus)).value(queryValue(enum2Value(SKS_EFT_FileStatus::FXAllPaymentInstructionSent)));
                qbs.addRange(fieldNum(SKS_EFTAP_File,FileStatus)).value(queryValue(enum2Value(SKS_EFT_FileStatus::FXAllSettlementCenterComplete)));
                qbs.addRange(fieldNum(SKS_EFTAP_File,FileStatus)).value(queryValue(enum2Value(SKS_EFT_FileStatus::FXAllTradeSent)));
                qbs.addRange(fieldNum(SKS_EFTAP_File,FileStatus)).value(queryValue(enum2Value(SKS_EFT_FileStatus::NotApplicable)));
                qbs.addRange(fieldNum(SKS_EFTAP_File,FileStatus)).value(queryValue(enum2Value(SKS_EFT_FileStatus::NotProcessed)));
                qbs.addRange(fieldNum(SKS_EFTAP_File,FileStatus)).value(queryValue(enum2Value(SKS_EFT_FileStatus::Transmitted)));
            }

            DSSKS_EFTAP_File_DS.cacheAddMethod('Alerts');
            DSSKS_EFTAP_File_DS.cacheAddMethod('GetPaymentCount');
            DSSKS_EFTAP_File_DS.cacheAddMethod('GetApprovedCount');
            DSSKS_EFTAP_File_DS.cacheAddMethod('GetRejectedCount');
        }

]]></Source>
					</Method>
					<Method>
						<Name>create</Name>
						<Source><![CDATA[
        public void create(boolean _append = false)
        {
            if((!CreatedAPTestFile && !CreatedARTestFile) || DSSKS_EFTAP_file.FileStatus == SKS_EFT_FileStatus::Completed)
            {
                super(_append);

                DSSKS_EFTAP_File.create(element.args().parmEnum(),
                                    New_Prenotes.enabled(),
                                    New_Prenotes.value());

                If (New_Prenotes.enabled())
                {
                    if(New_Prenotes.value())
                    {
                        New_Prenotes.value(false);
                    }
                }
            }
            // CR-9196 -->
            sKS_EFT_Setup = SKS_EFT_Setup::find();
            if(element.args().parmEnum() == SKS_EFT_Module::AR && sKS_EFT_Setup.ARAdvEmailNotify && sKS_EFT_Setup.ModAREmail)
            {
                nextactiondisplay.clear();
                nextactiondisplay.add(Enum2str(SKS_PP_NextActionDisplay::CreateSendFile));
                nextactiondisplay.add(Enum2str(SKS_PP_NextActionDisplay::SendAdvEmail));
                nextactiondisplay.selectText(Enum2str(SKS_PP_NextActionDisplay::SendAdvEmail));
            }
            // CR-9196 <--
        }

]]></Source>
					</Method>
				</Methods>
				<Fields>
					<Field>
						<DataField>FileNbr</DataField>
						<Methods>
							<Method>
								<Name>jumpRef</Name>
								<Source><![CDATA[
            /// <summary>
            ///
            /// </summary>
            public void jumpRef()
            {
                if(element.getSKS_EFT_Module() == SKS_EFT_Module::AR)
                {
                    Args arguments = new Args();
                    arguments.record(DSSKS_EFTAP_File);
                    arguments.name(formStr(SKS_EFTAP_CreateSendFiles));
                    arguments.parmEnum(SKS_EFT_Module::AR);

                    FormRun formRun = classFactory.formRunClass(arguments);
                    formRun.init();
                    formRun.run();
                    formRun.wait(true);
                }
                else if(element.getSKS_EFT_Module() == SKS_EFT_Module::BTB)
                {
                    Args arguments = new Args();
                    arguments.record(DSSKS_EFTAP_File);
                    arguments.name(formStr(SKS_EFTAP_CreateSendFiles));
                    arguments.parmEnum(SKS_EFT_Module::BTB);

                    FormRun formRun = classFactory.formRunClass(arguments);
                    formRun.init();
                    formRun.run();
                    formRun.wait(true);
                }
                else if(element.getSKS_EFT_Module() == SKS_EFT_Module::CNP)
                {
                    Args arguments = new Args();
                    arguments.record(DSSKS_EFTAP_File);
                    arguments.name(formStr(SKS_EFTAP_CreateSendFiles));
                    arguments.parmEnum(SKS_EFT_Module::CNP);

                    FormRun formRun = classFactory.formRunClass(arguments);
                    formRun.init();
                    formRun.run();
                    formRun.wait(true);
                }
                else
                {
                    super();
                }
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>FilePath</DataField>
						<Methods>
							<Method>
								<Name>validate</Name>
								<Source><![CDATA[
            public boolean validate()
            {
                boolean ret;

                ret = super();

                if ( !element.TestFile(DSSKS_EFTAP_File.FilePath,'TEST', true) )
                {
                    return false;
                }
                return true;
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>Selected</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                ;
                super();
                element.UpdateSelectCheckBox();
            }

]]></Source>
							</Method>
							<Method>
								<Name>validate</Name>
								<Source><![CDATA[
            public boolean validate()
            {
                ;
                return element.validate_paths_filename(true);
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
				</Fields>
			</DataSource>
			<DataSource>
				<Name>SKS_EFT_InboundStatuses</Name>
				<Methods>
					<Method>
						<Name>validateWrite</Name>
						<Source><![CDATA[
        public boolean validateWrite()
        {
           // boolean ret;

            //Create and send attempts to write a record to inbound statuses even no no record is being written
            //ret = super();

            return true;
        }

]]></Source>
					</Method>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        public void write()
        {
            //Create and send attempts to write a record to inbound statuses even no no record is being written
            //super();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>BeginProcessing</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            SKS_EB_CommProcess locSKS_EB_CommProcess;
            SKS_EFT_Processing sks_eft_Processing;
            SKS_PP_NextActionDisplay action;
            boolean isPreNotesOnly = DSSKS_EFTAP_File.JournalOption == SKS_EFT_FileJournalOption::PreNotesOnly;

            sks_eft_Processing = new SKS_EFT_Processing();

            str strNextActionDisplay = nextactiondisplay.getText(nextactiondisplay.selection());

            switch (strNextActionDisplay)
            {
                case Enum2str(SKS_PP_NextActionDisplay::CompleteKeep):
                    action = SKS_PP_NextActionDisplay::CompleteKeep;
                    break;
                case Enum2str(SKS_PP_NextActionDisplay::CreateSendFile):
                    action = SKS_PP_NextActionDisplay::CreateSendFile;
                    break;
                case Enum2str(SKS_PP_NextActionDisplay::PrintAudit):
                    action = SKS_PP_NextActionDisplay::PrintAudit;
                    break;
                case Enum2str(SKS_PP_NextActionDisplay::Send):
                    action = SKS_PP_NextActionDisplay::Send;
                    break;
                case Enum2str(SKS_PP_NextActionDisplay::EmailOnly):
                    action = SKS_PP_NextActionDisplay::EmailOnly;
                    break;
                case Enum2str(SKS_PP_NextActionDisplay::SendAdvEmail):
                    action = SKS_PP_NextActionDisplay::SendAdvEmail;
                    break;
                case Enum2str(SKS_PP_NextActionDisplay::RetryComm):
                    action = SKS_PP_NextActionDisplay::RetryComm;
                    break;
            }

            //BankFabric
            if (DSSKS_EFTAP_File.BFBankIntegration == SKS_BF_BankIntType::FileHubLocal)
            {
                if(!SKS_EB_FileHub::directoryExistsForm(DSSKS_EFTAP_File.filepath))
                {
                    return;
                }
            }           

            gEFTFileNbr = element.editSelectFileNumber(false,'');

            //<Issue20063: Get CommID from parameters if CommID from DataSource is empty
            if(DSSKS_EFTAP_File.CommID)
            {
                select firstonly locSKS_EB_CommProcess where locSKS_EB_CommProcess.CommID == DSSKS_EFTAP_File.CommID;
            }
            else
            {
                select firstonly locSKS_EB_CommProcess where locSKS_EB_CommProcess.CommID == sKS_EFT_Setup.APCommID;
            }
            //</Issue20063>
            
            if(PrintReport.value() == NoYes::Yes || (locSKS_EB_CommProcess && locSKS_EB_CommProcess.FileComplete == SKS_EB_FileComplete::Prompt))
            {
                sks_eft_Processing.APARrocess_EFT(gEFTFileNbr, action, PrintReport.value(), EFTModule, locSKS_EB_CommProcess, false, false, isPreNotesOnly);
            }
            else
            {                   
                SysOperationSandbox::callStaticMethod(classNum(SKS_EFT_Processing), staticMethodStr(SKS_EFT_Processing, APARrocess_EFT_Static), [gEFTFileNbr, action, PrintReport.value(), EFTModule, locSKS_EB_CommProcess, false, false, isPreNotesOnly], "@SKS151", "@SKS:ProcessComplete");
            }
                       
            super();

            DSSKS_EFTAP_File_ds.research(true);

            DSSKS_EFTAP_File.Selected = false;
            if (DSSKS_EFTAP_file.FileStatus == SKS_EFT_FileStatus::Completed  && DSSKS_EFTAP_file.JournalOption == SKS_EFT_FileJournalOption::TestFile)
            {
                aptestfile = False;
                CreatedAPTestFile = False;
            }
            element.LineStatusUpdates();
            element.clearSelected();
            DSSKS_EFTAP_File.update();
            DSSKS_EFTAP_File_ds.research(true);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>LogFile</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            str sFileName;
            str filePathName;
            str sControlFileName;
            str controlFilePathName;
            ;

            sFileName = DSSKS_EFTAP_File.FileName + '.log';
            filepathname = DSSKS_EFTAP_File.filePath + '\\Log\\' + sFileName;

            sControlFileName = DSSKS_EFTAP_File.ControlFileName + '.log';
            controlFilePathName = DSSKS_EFTAP_File.filePath + '\\Log\\' + sControlFileName;
            super();

            SKS_EB_FileHub::fileDisplayForm(filepathname,DSSKS_EFTAP_File.BFBankIntegration);

            if(DSSKS_EFTAP_File.ControlFileName != '')
            {
                sControlFileName = DSSKS_EFTAP_File.ControlFileName + '.log';                   //SKS_Bug_11575
                ControlFilePathName = DSSKS_EFTAP_File.filePath + '\\Log\\' + sControlFileName;
                SKS_EB_FileHub::fileDisplayForm(ControlFilePathName,DSSKS_EFTAP_File.BFBankIntegration);
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ErrorFile</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            str sFileName;
            str filePathName;
            str sControlFileName;
            str ControlFilePathName;
            ;

            sFileName = DSSKS_EFTAP_File.FileName + '.err';
            filepathname = DSSKS_EFTAP_File.filePath + '\\Log\\' + sFileName;

            super();

            SKS_EB_FileHub::fileDisplayForm(filepathname,DSSKS_EFTAP_File.BFBankIntegration);

            if(DSSKS_EFTAP_File.ControlFileName != '')
            {
                sControlFileName = DSSKS_EFTAP_File.ControlFileName + '.err';
                ControlFilePathName = DSSKS_EFTAP_File.filePath + '\\Log\\' + sControlFileName;
                SKS_EB_FileHub::fileDisplayForm(ControlFilePathName,DSSKS_EFTAP_File.BFBankIntegration);
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>BFLFileCompare</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        ///
        /// </summary>
        public void clicked()
        {
            SKS_EFT_BFLD365CompareFiles BFLD365CompareFiles;
            str     filePathName;

            BFLD365CompareFiles = new SKS_EFT_BFLD365CompareFiles();
            
            //check file status
            if (DSSKS_EFTAP_File.FileStatus != SKS_EFT_FileStatus::NotProcessed && DSSKS_EFTAP_File.FileStatus != SKS_EFT_FileStatus::NotApplicable)
            {
                //check file exist
                if (DSSKS_EFTAP_File.FileName && DSSKS_EFTAP_File.FilePath)
                {
                    // create file
                    filePathName = BFLD365CompareFiles.createfiletocompare(DSSKS_EFTAP_File.FileNbr, DSSKS_EFTAP_File.EFTFileType);

                    
                }
                else
                {
                    Info("File name and file path is required for file comparision");
                }
            }
            else
            {
                Info("file is not processed and can not compare");
            }
            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>PrintReport</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>New_PreNotes</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();



        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>NextActionDisplay</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>selectionChange</Name>
						<Source><![CDATA[
        public int selectionChange()
        {
            int ret;

            ret = super();

            if(!selectionChangeFlag)
            {
                element.UpdateSelectCheckBox();
            }

            element.EnableControlsFromAction();
            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;
            str test;
            str msg = '';

            ret = super();

            selectionChangeFlag = true;

            test = nextactiondisplay.getText(nextactiondisplay.selection());

            if ( test != Enum2str(SKS_PP_NextActionDisplay::PrintAudit) &&  test != Enum2str(SKS_PP_NextActionDisplay::Select))
            {
                if(DSSKS_EFTAP_File.FileStatus == SKS_EFT_FileStatus::AdvEmailFailed || DSSKS_EFTAP_File.FileStatus == SKS_EFT_FileStatus::AdvEmailNotSent
                    &&  test == Enum2str(SKS_PP_NextActionDisplay::CreateSendFile))
                {
                    msg = "@sks1976";
                }
                if(DSSKS_EFTAP_File.FileStatus == SKS_EFT_FileStatus::AdvEmailSent &&  test == Enum2str(SKS_PP_NextActionDisplay::CreateSendFile))
                {
                    msg = "@SKS1986";
                }
                if(DSSKS_EFTAP_File.FileStatus == SKS_EFT_FileStatus::AdvEmailSent &&  test == Enum2str(SKS_PP_NextActionDisplay::SendAdvEmail))
                {
                    msg = "@SKS1978";
                }
                if(DSSKS_EFTAP_File.FileStatus == SKS_EFT_FileStatus::AdvEmailFailed &&  test == Enum2str(SKS_PP_NextActionDisplay::SendAdvEmail))
                {
                    msg = "@SKS1996";
                }

                if ( DSSKS_EFTAP_File.FileStatus == SKS_EFT_FileStatus::FileCreated && test != Enum2str(SKS_PP_NextActionDisplay::CompleteKeep))
                {
                    msg = "@SKS176"; // 24215; // MSG_ALREADY_TRANSMITTED -This file has already been Created.  Are you sure you want to continue?
                }
                else if ( DSSKS_EFTAP_File.FileStatus == SKS_EFT_FileStatus::Completed)
                {
                    msg = "@SKS177"; // 24216; // MSG_ALREADY_TRANSMITTED_KEPT - This file has already been Completed.  Are you sure you want to continue?
                }

                if ( strlen(msg) > 0)
                {
                    if(DSSKS_EFTAP_File.EFTFileType == SKS_EFT_Module::AP)
                    {
                        if ( Box::yesNo( msg, DialogButton::No, "@SKS1441") == DialogButton::No)
                        {
                            ret = false;
                        }
                    }
                    else
                    {
                        if ( Box::yesNo( msg, DialogButton::No, "@SKS1851") == DialogButton::No)
                        {
                            ret = false;
                        }
                    }
                }
            }

            selectionChangeFlag = ret;
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>DSSKS_EFTAP_File_Selected</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;
            str message, message2;
            ;


            message = "@SKS1457";
            message2 = "@SKS1458";

            If (DSSKS_EFTAP_file.JournalOption == SKS_EFT_FileJournalOption::TestFile && (aptestfile || artestfile))
            {
                ret = checkfailed(message);
            }
            else If (DSSKS_EFTAP_file.JournalOption == SKS_EFT_FileJournalOption::TestFile && (!aptestfile || !artestfile ))
            {
                ret = checkfailed(message2);
                BeginProcessing.enabled(false);
            }
            //<Issue20996: Can only be selected after all FX processes are done>
            else if(DSSKS_EFTAP_File.FXAProcessing == NoYes::Yes 
                && (DSSKS_EFTAP_File.FXATradeSent == utcDateTimeNull()
                   || DSSKS_EFTAP_File.FXAAllTradeAcksReceived == utcDateTimeNull()
                   || DSSKS_EFTAP_File.FXASettlementConfReceived == utcDateTimeNull()
                   || DSSKS_EFTAP_File.FXAPaymentInstructionsSent == utcDateTimeNull()))
            {
                ret = checkfailed("@SKS3690");
                ret = false;
            }
            //</Issue20996>
            else 
            {
                ret = super();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>DSSKS_EFTAP_File_journalOption</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;


            ret = super();


            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();

            str strGetEditText = this.getText(this.selection());

            if (strGetEditText == Enum2str(SKS_EFT_filejournaloption::PreNotesOnly) && DSSKS_EFTAP_File.JournalOption != SKS_EFT_filejournaloption::PreNotesOnly)
            {
                ret = checkfailed("@SYS84303");
            }
            else if (strGetEditText == Enum2str(SKS_EFT_filejournaloption::TestFile) && DSSKS_EFTAP_File.JournalOption != SKS_EFT_filejournaloption::TestFile)
            {
                ret = checkfailed("@SYS84303");
            }
            else if (aptestfile && strGetEditText != Enum2str(SKS_EFT_filejournaloption::TestFile) )
            {
                ret = checkfailed("@SYS84303");
            }
            else if(strGetEditText == Enum2str(SKS_EFT_filejournaloption::MasterAccountList))
            {
                ret = checkfailed("@SYS84303");
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>DSSKS_EFTAP_File</Name>
			<Table>SKS_EFTAP_File</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AdvEmail</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AdvEmailDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CommID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ComputerName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>ControlFileFormatId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>ControlFileName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EffectiveDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EFTFileType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FileName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FileNbr</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FilePath</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FileStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FormatGroup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FormatId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FXAAllTradeAcksReceived</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FXAPaymentInstructionsSent</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>FXAProcessing</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FXASettlementConfReceived</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FXATradeSent</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>InboundStatusChange</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>InboundStatusesRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InOutKeyFormat1</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InOutKeyFormat2</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InOutKeyFormat3</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>JournalOption</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MALBankAccountId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MALPaymMode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MultiFormat</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>OriginalPmtTotal</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PmtCount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>PmtTotal</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PreNoteOnlyBankAccountId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PreNotesOnlyPaymMode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Ret_NbrGoodRecs</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Selected</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>TransferDirection</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransmitDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransmitDateTime</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<Index>FileNbrIdx</Index>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>SKS_EFT_InboundStatuses</Name>
			<Table>SKS_EFT_InboundStatuses</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FormatId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Origin</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>StatusId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>StatusIdDisplay</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>StatusType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>DSSKS_EFTAP_File</JoinSource>
			<LinkType>OuterJoin</LinkType>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@SKS1453</Caption>
		<DataSource xmlns="">DSSKS_EFTAP_File</DataSource>
		<HideIfEmpty xmlns="">No</HideIfEmpty>
		<Pattern xmlns="">Task</Pattern>
		<PatternVersion xmlns="">1.2</PatternVersion>
		<ViewEditMode xmlns="">Edit</ViewEditMode>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>ActionPane</Name>
				<ElementPosition>715827882</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<HeightMode>Auto</HeightMode>
				<Type>ActionPane</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>ButtonGroup</Name>
						<ElementPosition>1610612734</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>ButtonGroup</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>SelectViewPayments</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>572662304</ElementPosition>
								<Enabled>No</Enabled>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<HelpText>@SKS1454</HelpText>
								<Type>MenuFunctionButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataSource>DSSKS_EFTAP_File</DataSource>
								<MenuItemName>SKS_EFTAP_SelectViewFiles</MenuItemName>
								<Text>@SKS1455</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>FileDetails</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>858993456</ElementPosition>
								<Enabled>No</Enabled>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>MenuFunctionButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataSource>DSSKS_EFTAP_File</DataSource>
								<MenuItemName>SKS_EFTAP_FileDetails</MenuItemName>
								<Text>@SKS:SKGLineDet</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>SelectPreNotes</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1049880892</ElementPosition>
								<Enabled>No</Enabled>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>MenuFunctionButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<Visible>No</Visible>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataSource>DSSKS_EFTAP_File</DataSource>
								<MenuItemName>SKS_EFT_PreNotes_Accounts</MenuItemName>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>SelectARPreNotes</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1240768328</ElementPosition>
								<Enabled>No</Enabled>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>MenuFunctionButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<Visible>No</Visible>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataSource>DSSKS_EFTAP_File</DataSource>
								<MenuItemName>SKS_EFT_ARPreNotes_Accounts</MenuItemName>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>SKS_FXA_Details</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1073741823</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>MenuFunctionButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<MenuItemName>SKS_FXA_Details</MenuItemName>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormButtonSeparatorControl">
								<Name>Separator</Name>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>ButtonSeparator</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>BeginProcessing</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1789569705</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<HelpText>@SKS734</HelpText>
								<LeftMode>AutoRight</LeftMode>
								<Type>Button</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Text>@SKS151</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>LogFile</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1825361098</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<HelpText>@SKS2483</HelpText>
								<Type>Button</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Text>@SYS88403</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>ErrorFile</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1932735281</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<HelpText>@SKS2474</HelpText>
								<Type>Button</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Text>@SKS2473</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>History</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>2040109463</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>MenuFunctionButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<MenuItemName>SKS_EFT_FileHistory</MenuItemName>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>BFLFileCompare</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>Button</Type>
								<FormControlExtension
									i:nil="true" />
								<Text>BFL file compare</Text>
							</AxFormControl>
						</Controls>
						<ArrangeMethod>Vertical</ArrangeMethod>
					</AxFormControl>
				</Controls>
				<AlignChild>No</AlignChild>
				<AlignChildren>No</AlignChildren>
				<ArrangeMethod>Vertical</ArrangeMethod>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormTabControl">
				<Name>Tab</Name>
				<AlignControl>No</AlignControl>
				<ElementPosition>1670265058</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Type>Tab</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>OverviewTab</Name>
						<Pattern>ToolbarList</Pattern>
						<PatternVersion>1.2</PatternVersion>
						<Type>TabPage</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>Body</Name>
								<ElementPosition>1193046470</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Pattern>CustomFilters</Pattern>
								<PatternVersion>1.1</PatternVersion>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl>
										<Name>QuickFilterControl</Name>
										<FormControlExtension>
											<Name>QuickFilterControl</Name>
											<ExtensionComponents />
											<ExtensionProperties>
												<AxFormControlExtensionProperty>
													<Name>targetControlName</Name>
													<Type>String</Type>
													<Value>Grid</Value>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>defaultColumnName</Name>
													<Type>String</Type>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>placeholderText</Name>
													<Type>String</Type>
												</AxFormControlExtensionProperty>
											</ExtensionProperties>
										</FormControlExtension>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>GroupNextAction</Name>
										<ElementPosition>1476395006</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<NeededPermission>Update</NeededPermission>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormCheckBoxControl">
												<Name>PrintReport</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>858993458</ElementPosition>
												<Enabled>No</Enabled>
												<FilterExpression>%1</FilterExpression>
												<Type>CheckBox</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Label>@SKS152</Label>
												<Style>Toggle</Style>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormCheckBoxControl">
												<Name>New_PreNotes</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1288490187</ElementPosition>
												<Enabled>No</Enabled>
												<FilterExpression>%1</FilterExpression>
												<Type>CheckBox</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<Visible>No</Visible>
												<FormControlExtension
													i:nil="true" />
												<Label>@SKS1456</Label>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormComboBoxControl">
												<Name>NextActionDisplay</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1717986916</ElementPosition>
												<Enabled>No</Enabled>
												<FilterExpression>%1</FilterExpression>
												<Type>ComboBox</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Label>@SKS153</Label>
												<Items />
											</AxFormControl>
										</Controls>
										<ArrangeMethod>HorizontalLeft</ArrangeMethod>
									</AxFormControl>
								</Controls>
								<ArrangeMethod>HorizontalLeft</ArrangeMethod>
								<FrameType>None</FrameType>
								<Style>CustomFilter</Style>
								<ViewEditMode>Edit</ViewEditMode>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGridControl">
								<Name>Grid</Name>
								<ElementPosition>984263336</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Grid</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>DSSKS_EFTAP_File_Selected</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>16519104</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>CheckBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<BackgroundColor>WindowBackground</BackgroundColor>
										<DataField>Selected</DataField>
										<DataSource>DSSKS_EFTAP_File</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>DSSKS_EFTAP_File_FileNbr</Name>
										<AllowEdit>No</AllowEdit>
										<ElementPosition>24778656</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>FileNbr</DataField>
										<DataSource>DSSKS_EFTAP_File</DataSource>
										<Label>@SKS:SKGAPIOutBoundId</Label>
										<Mandatory>Yes</Mandatory>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>DSSKS_EFTAP_File_FXAllProcessing</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>28908432</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>CheckBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<BackgroundColor>WindowBackground</BackgroundColor>
										<DataField>FXAProcessing</DataField>
										<DataSource>DSSKS_EFTAP_File</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Alerts</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>33038208</ElementPosition>
										<Enabled>No</Enabled>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>Alerts</DataMethod>
										<DataSource>DSSKS_EFTAP_File</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>AdvEmailDate</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>41297760</ElementPosition>
										<Enabled>No</Enabled>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<HelpText>@SKS1975</HelpText>
										<Type>Date</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>AdvEmailDate</DataField>
										<DataSource>DSSKS_EFTAP_File</DataSource>
										<Label>@SKS1974</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>DSSKS_EFTAP_File_EffectiveDate</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>66076416</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Date</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>EffectiveDate</DataField>
										<DataSource>DSSKS_EFTAP_File</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateTimeControl">
										<Name>DSSKS_EFTAP_File_TransmitDateTime</Name>
										<AllowEdit>No</AllowEdit>
										<ElementPosition>68829600</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>DateTime</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>TransmitDateTime</DataField>
										<DataSource>DSSKS_EFTAP_File</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>DSSKS_EFTAP_File_TransmitDate</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>71582784</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Date</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>TransmitDate</DataField>
										<DataSource>DSSKS_EFTAP_File</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>DSSKS_EFTAP_File_FileStatus</Name>
										<ElementPosition>74335968</ElementPosition>
										<Enabled>No</Enabled>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>FileStatus</DataField>
										<DataSource>DSSKS_EFTAP_File</DataSource>
										<Label>@SKS:SKGAPIOutBoundStatus</Label>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>DSSKS_EFTAP_File_TransferDirection</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>ComboBox</Type>
										<Visible>No</Visible>
										<FormControlExtension
											i:nil="true" />
										<DataField>TransferDirection</DataField>
										<DataSource>DSSKS_EFTAP_File</DataSource>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormIntegerControl">
										<Name>DSSKS_EFTAP_File_PmtCount</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>82595520</ElementPosition>
										<Enabled>No</Enabled>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Integer</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>PmtCount</DataField>
										<DataSource>DSSKS_EFTAP_File</DataSource>
										<Label>@SKS1459</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>DSSKS_EFTAP_File_PmtTotal</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>90855072</ElementPosition>
										<Enabled>No</Enabled>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>getPmtTotal</DataMethod>
										<DataSource>DSSKS_EFTAP_File</DataSource>
										<Label>@SKS:SKSCurrentTotal</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>DSSKS_EFTAP_File_OriginalPmtTotal</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>94984848</ElementPosition>
										<Enabled>No</Enabled>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>getOriginalPmtTotal</DataMethod>
										<DataSource>DSSKS_EFTAP_File</DataSource>
										<Label>@SKS:SKSOriginalTotal</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>DSSKS_EFTAP_File_journalOption</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>99114624</ElementPosition>
										<Enabled>No</Enabled>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>JournalOption</DataField>
										<DataSource>DSSKS_EFTAP_File</DataSource>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>DSSKS_EFTAP_File_FormatId</Name>
										<ElementPosition>107374176</ElementPosition>
										<Enabled>No</Enabled>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>FormatId</DataField>
										<DataSource>DSSKS_EFTAP_File</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>DSSKS_EFTAP_File_MultiFormat</Name>
										<ElementPosition>221631318</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>CheckBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<BackgroundColor>WindowBackground</BackgroundColor>
										<DataField>MultiFormat</DataField>
										<DataSource>DSSKS_EFTAP_File</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormInt64Control">
										<Name>PaymentCount</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>335888460</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<HelpText>@SKS2840</HelpText>
										<Type>Int64</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>getPaymentCount</DataMethod>
										<DataSource>DSSKS_EFTAP_File</DataSource>
										<Label>@SKS2839</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>DSSKS_EFTAP_File_ResponseType</Name>
										<ElementPosition>74335968</ElementPosition>
										<Enabled>No</Enabled>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>ResponseType</DataField>
										<DataSource>DSSKS_EFTAP_File</DataSource>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormInt64Control">
										<Name>ApprovedCount</Name>
										<ElementPosition>450145602</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<HelpText>@SKS2841</HelpText>
										<Type>Int64</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>getApprovedCount</DataMethod>
										<DataSource>DSSKS_EFTAP_File</DataSource>
										<Label>@SYS10158</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormInt64Control">
										<Name>RejectedCount</Name>
										<ElementPosition>564402744</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<HelpText>@SKS2842</HelpText>
										<Type>Int64</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>getRejectedCount</DataMethod>
										<DataSource>DSSKS_EFTAP_File</DataSource>
										<Label>@SYS784</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>SKS_EFT_InboundStatuses_StatusIdDisplay</Name>
										<ElementPosition>678659886</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>StatusIdDisplay</DataField>
										<DataSource>SKS_EFT_InboundStatuses</DataSource>
										<Label>@SKS2849</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateTimeControl">
										<Name>DSSKS_EFTAP_File_InboundStatusChange</Name>
										<ElementPosition>792917032</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>DateTime</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>InboundStatusChange</DataField>
										<DataSource>DSSKS_EFTAP_File</DataSource>
									</AxFormControl>
								</Controls>
								<AlternateRowShading>No</AlternateRowShading>
								<DataSource>DSSKS_EFTAP_File</DataSource>
								<MultiSelect>No</MultiSelect>
								<ShowRowLabels>No</ShowRowLabels>
								<VisibleCols>11</VisibleCols>
								<VisibleColsMode>Fixed</VisibleColsMode>
								<VisibleRows>11</VisibleRows>
								<VisibleRowsMode>Fixed</VisibleRowsMode>
							</AxFormControl>
						</Controls>
						<Caption>@SKS178</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>TabPage</Name>
						<ElementPosition>1431655764</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Pattern>FieldsFieldGroups</Pattern>
						<PatternVersion>1.1</PatternVersion>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>AdditionalData</Name>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>DSSKS_EFTAP_File_BFBankIntegration</Name>
										<AllowEdit>No</AllowEdit>
										<Type>ComboBox</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>BFBankIntegration</DataField>
										<DataSource>DSSKS_EFTAP_File</DataSource>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>DSSKS_EFTAP_File_APIFormatType</Name>
										<AllowEdit>No</AllowEdit>
										<Type>ComboBox</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>APIFormatType</DataField>
										<DataSource>DSSKS_EFTAP_File</DataSource>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>DSSKS_EFTAP_File_FilePath</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>858993458</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>FilePath</DataField>
										<DataSource>DSSKS_EFTAP_File</DataSource>
										<Label>@SKS:SKGBFFileLocation</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>DSSKS_EFTAP_File_FileName</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1288490187</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>FileName</DataField>
										<DataSource>DSSKS_EFTAP_File</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>DSSKS_EFTAP_File_CommID</Name>
										<AllowEdit>No</AllowEdit>
										<ElementPosition>1717986916</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>CommID</DataField>
										<DataSource>DSSKS_EFTAP_File</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>DSSKS_EFTAP_File_FormatGroupVersion</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>FormatGroupVersion</DataField>
										<DataSource>DSSKS_EFTAP_File</DataSource>
										<Label>@SKS:SKGFmtGroupVersion</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>DSSKS_EFTAP_File_FormatGroupCodeSource</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>ComboBox</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>FormatGroupCodeSource</DataField>
										<DataSource>DSSKS_EFTAP_File</DataSource>
										<Label>@SKS:SKGFormatCodeSource</Label>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>DSSKS_EFTAP_File_FormatGroupDataContractVersion</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>FormatGroupDataContractVersion</DataField>
										<DataSource>DSSKS_EFTAP_File</DataSource>
										<Label>@SKS:SKS_EFT_DataContractVersion</Label>
									</AxFormControl>
								</Controls>
								<DataSource>DSSKS_EFTAP_File</DataSource>
								<FrameType>None</FrameType>
							</AxFormControl>
						</Controls>
						<ColumnsMode>Fill</ColumnsMode>
						<Caption>@SYS138078</Caption>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>TabPage1</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1789569705</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Pattern>FieldsFieldGroups</Pattern>
						<PatternVersion>1.1</PatternVersion>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>ControlFile</Name>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>DSSKS_EFTAP_File_ControlFileName</Name>
										<ElementPosition>1073741822</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>ControlFileName</DataField>
										<DataSource>DSSKS_EFTAP_File</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>DSSKS_EFTAP_File_ControlFileFormatId</Name>
										<ElementPosition>1610612733</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>ControlFileFormatId</DataField>
										<DataSource>DSSKS_EFTAP_File</DataSource>
									</AxFormControl>
								</Controls>
							</AxFormControl>
						</Controls>
						<ColumnsMode>Fill</ColumnsMode>
						<Caption>@SKS3247</Caption>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>TabPageFXAll</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1879048189</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Pattern>FieldsFieldGroups</Pattern>
						<PatternVersion>1.1</PatternVersion>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>FXAllTab</Name>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormDateTimeControl">
										<Name>FXAllTab_FXAllTradeSent</Name>
										<ElementPosition>715827882</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>DateTime</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>FXATradeSent</DataField>
										<DataSource>DSSKS_EFTAP_File</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateTimeControl">
										<Name>FXAllTab_FXAllConfimationsReceived</Name>
										<ElementPosition>1073741823</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>DateTime</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>FXAAllTradeAcksReceived</DataField>
										<DataSource>DSSKS_EFTAP_File</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateTimeControl">
										<Name>FXAllTab_FXAllPaymentInstructionsSent</Name>
										<ElementPosition>1252698793</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>DateTime</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>FXAPaymentInstructionsSent</DataField>
										<DataSource>DSSKS_EFTAP_File</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateTimeControl">
										<Name>FXAllTab_FXAllSettlementDetailsReceived</Name>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>DateTime</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>FXASettlementConfReceived</DataField>
										<DataSource>DSSKS_EFTAP_File</DataSource>
									</AxFormControl>
								</Controls>
								<DataSource>DSSKS_EFTAP_File</DataSource>
							</AxFormControl>
						</Controls>
						<ColumnsMode>Fill</ColumnsMode>
						<Caption>@SKS3604</Caption>
						<DataSource>DSSKS_EFTAP_File</DataSource>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
				</Controls>
				<AlignChild>No</AlignChild>
				<ArrangeMethod>Vertical</ArrangeMethod>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>