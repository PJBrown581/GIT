<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>SKS_BR_DDRStatementReconciliationTrans</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class SKS_BR_DDRStatementReconciliationTrans extends FormRun
{
    SKS_BR_Banktran                     bankTran;
    SKS_BR_BankReconciliationTrans      sKS_BR_BankReconciliationTrans;
    [FormObservable]
    RefRecId                            bankTransRecId;
    BankAccountStatement                bankAccountStatement;
    FormDataSource                      callingFormDataSource;
    int                                 origPosition;
    int                                 nextPosition;
    FormDataSource                      callingFormDataSourceBankAcctStmt;
    [FormObservable]
    SKS_BR_ManualReconciliationID       myGuid;//GUID refactor
    Voucher selectedRec;
    #SKS_Global //GUID refactor

    FromDate                    fromDate;
    FromDate                    toDate;
    PmfTableLookupExtended      sysTableLookup;
    BankAccountStatement        statement;
    Query                       query;
    QueryBuildDataSource        qbds;
    QueryBuildDataSource        qbdsBankTran;
    QueryBuildDataSource        qbdsBankAcctStatement;
    container                   bankRecCompanies;
    boolean                     queryData = false;
    boolean                     blankData = false;
    str                         origBankAcctStatement = '';
    str custId,paymReference,custVoucher;

}
]]></Source>
			</Method>
			<Method>
				<Name>abandonChanges</Name>
				<Source><![CDATA[
    [SuppressBPWarning('BPErrorSelectUsingFirstOnly', 'The buffer is used forupdate.')]
    void abandonChanges(CustTrans _custTrans)
    {
        CustTrans       locCustTrans;

        ttsbegin;
        if(_custTrans.company())
        {
            select forupdate locCustTrans where locCustTrans.RecId == _custTrans.RecId;

            if(locCustTrans)
            {
                locCustTrans.SKS_BR_DDR_IsSelected = false;
                locCustTrans.update();
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearSelected</Name>
				<Source><![CDATA[
    void clearSelected()
    {
        element.editSelectedRecord( true, '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>close</Name>
				<Source><![CDATA[
    public void close()
    {
        SKS_BR_BankTran locBankTranSelect;

        select crosscompany locBankTranSelect where locBankTranSelect.RecId == bankTransRecId;

        changecompany(locBankTranSelect.company())
        {
            this.updateBankRecTran(locBankTranSelect);
            super();
            this.refreshCallerForm(nextPosition);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBankRecTran</Name>
				<Source><![CDATA[
    public void updateBankRecTran(SKS_BR_BankTran _BankTranSelect)
    {
        BankAccountTrans locAccountTrans;

        // If no matching Bank transaction(s), remove guid from SKS_BR_BankTran record
        if (_BankTranSelect.ManualReconciliationID != emptyGuid())
        {
            select firstonly RecId from locAccountTrans where locAccountTrans.SKS_BR_ManualReconciliationID == _BankTranSelect.ManualReconciliationID;
            if (locAccountTrans.RecId == 0)
            {
                ttsbegin;
                _BankTranSelect.selectForUpdate(true);
                _BankTranSelect.ManualReconciliationID = emptyGuid();
                _BankTranSelect.doUpdate();
                ttscommit;
            }
        }

        element.unmarkInUse(bankTransRecId);

        if (_BankTranSelect.Matched == NoYes::No)
        {
            SKS_BR_GLProcessing::colorImportedTransaction(bankTransRecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>bookRefresh</Name>
				<Source><![CDATA[
    public void bookRefresh()
    {
        SKS_BR_BankTran_ds.research(true); 
        SKS_BR_BankTran_ds.refresh();
        DDRCustTrans_ds.research(true);
        DDRCustTrans_ds.refresh();
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableButtons</Name>
				<Source><![CDATA[
    public void enableButtons(NoYes _enabled = false)
    {
        SKS_BR_BankTran_ds.allowEdit(_enabled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    [SuppressBPWarning('BPCheckSQLQueryInInit','Refactoring data access loop can be moved to class to avoid performance bottleneck.But it require more efforts and may impact funtionality related to bank transations and related objects.')]   //TAS_CAR
    public void init()
    {
        super();

        if (element.args().parmObject())
        {
            SKS_BR_BankReconciliationTrans = element.args().parmObject();
            Company.text(SKS_BR_BankReconciliationTrans.parmDataAreaId());
            BankAccount.text(SKS_BR_BankReconciliationTrans.parmCompanyBankAccountId());
            ImportTransType.text(SKS_BR_BankReconciliationTrans.parmImportTranType());
            Currency.text(SKS_BR_BankReconciliationTrans.parmcurrency());

            bankTran.RecId  = SKS_BR_BankReconciliationTrans.parmRecId();
            bankTransRecId  = bankTran.RecId;
            // if there is a match already, should get the same guid, otherwise create new guid
            if (SKS_BR_BankReconciliationTrans.parmTransGuid() != emptyGuid())
            {
                myGuid = SKS_BR_BankReconciliationTrans.parmTransGuid();
            }
            else
            {
                myGuid = newGuid();
                SKS_BR_BankReconciliationTrans.parmTransGuid(myGuid);
            }
        }

        select ReconcileDate from bankAccountStatement
            where bankAccountStatement.AccountStatementNum == SKS_BR_BankReconciliationTrans.parmBankAccountStatementNum();
        if(bankAccountStatement.ReconcileDate == dateNull())
        {
            element.markInUse(bankTransRecId); // //SKS_BR_BlockInUse
        }

        CustTransFromDate.dateValue(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone())-90);
        CustTransToDate.dateValue(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>markInUse</Name>
				<Source><![CDATA[
    //SKS_BR_BlockInUse
    public void markInUse(RefRecId _bankTran)
    {
        SKS_BR_Banktran bankTranLoc;

        select firstonly bankTranLoc where bankTranLoc.RecId == _bankTran;

        if(bankTranLoc)
        {
            ttsBegin;
            bankTranLoc.reread();
            bankTranLoc.selectForUpdate(true);
            bankTranLoc.markUserPrivate();
            bankTranLoc.update();
            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshCallerForm</Name>
				<Source><![CDATA[
    Public void refreshCallerForm(int _position)
    {
        int locPosition = _position;
        if (callingFormDataSource)
        {
            if (locPosition == 0)
            {
                locPosition = origPosition;
            }

            callingFormDataSource.refresh();
            callingFormDataSource.reread();
            callingFormDataSource.rereadReferenceDataSources();
            callingFormDataSource.research(true);
            callingFormDataSource.setPosition(locPosition);
        }
        if (callingFormDataSourceBankAcctStmt)
        {
            callingFormDataSourceBankAcctStmt.reread();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unmarkInUse</Name>
				<Source><![CDATA[
    //SKS_BR_BlockInUse
    public void unmarkInUse(RefRecId _bankTran)
    {
        SKS_BR_Banktran bankTranLoc;

        select firstonly bankTranLoc where bankTranLoc.RecId == _bankTran;

        if(bankTranLoc)
        {
            ttsBegin;
            bankTranLoc.reread();
            bankTranLoc.selectForUpdate(true);
            bankTranLoc.unMarkUserPrivate();
            bankTranLoc.update();
            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadData</Name>
				<Source><![CDATA[
    public void loadData(boolean _queryData, boolean _blankData)
    {
        queryData = _queryData;
        blankData = _blankData;

        DDRCustTrans_ds.refresh();
        DDRCustTrans_ds.reread();
        DDRCustTrans_ds.executeQuery();

        element.enableButtons();
    }

]]></Source>
			</Method>
			<Method>
				<Name>editSelectedRecord</Name>
				<Source><![CDATA[
    //BP Deviation Documented
    edit Voucher editSelectedRecord( boolean set, Voucher value )
    {
        if (set)
        {
            selectedRec = value;
        }
    
        return selectedRec;
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>SKS_BR_BankTran</Name>
				<Methods>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        public void executeQuery()
        {
            SKS_BR_BankTran_ds.query().dataSourceTable(tableNum(SKS_BR_BankTran)).clearRanges();
            SKS_BR_BankTran_ds.query().dataSourceTable(tableNum(SKS_BR_BankTran)).addRange(fieldNum(SKS_BR_BankTran,RecId)).value(int642str(bankTransRecId));
            super();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>DDRCustTrans</Name>
				<Methods>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        /// <summary>
        /// Initialize query build ds /range variables
        /// </summary>
        public void init()
        {
            super();

            DDRCustTrans_ds.query().dataSourceTable(tableNum(CustTrans)).clearDynalinks();
            DDRCustTrans_ds.query().dataSourceTable(tableNum(CustTrans)).clearLinks();
            DDRCustTrans_ds.query().dataSourceTable(tableNum(CustTrans)).clearRanges();
        }

]]></Source>
					</Method>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        public void executeQuery()
        {
            //SKS CR 9729 -->
            query = this.query() ;
            query.allowCrossCompany(true);
            query.clearCompanyRange();

            DDRCustTrans_ds.query().dataSourceTable(tableNum(CustTrans)).clearDynalinks();
            DDRCustTrans_ds.query().dataSourceTable(tableNum(CustTrans)).clearLinks();
            DDRCustTrans_ds.query().dataSourceTable(tableNum(CustTrans)).clearRanges();

            if(!bankRecCompanies)
            {
                bankRecCompanies = SKS_EB_VirtualCompany::getBankRecCompanies();
            }

            this.query().dataSourceTable(tableNum(CustTrans)).clearDynalinks();

            this.query().dataSourceTable(tableNum(CustTrans)).clearRange(fieldNum(CustTrans,AccountNum));
            this.query().dataSourceTable(tableNum(CustTrans)).clearRange(fieldNum(CustTrans, PaymReference));//SKS CR 9729
            this.query().dataSourceTable(tableNum(CustTrans)).clearRange(fieldNum(CustTrans,Voucher));
            this.query().dataSourceTable(tableNum(CustTrans)).clearRange(fieldNum(CustTrans,TransDate));
            this.query().dataSourceTable(tableNum(CustTrans)).clearRange(fieldNum(CustTrans,AmountCur));

            TransDate  lfromDate = CustTransFromDate.dateValue();
            TransDate  ltoDate = CustTransToDate.dateValue();

            this.query().dataSourceTable(tableNum(CustTrans)).addRange(fieldNum(CustTrans,TransDate)).value((queryRange(lfromDate,ltoDate)));

            if(CustTransDataAreaId.valueStr() != '')
            {
                query.addCompanyRange(CustTransDataAreaId.valueStr());
            }
            else
            {
                for(int i = 1;i <= conLen(bankRecCompanies);i++)
                {
                    query.addCompanyRange(conPeek(bankRecCompanies, i));
                }
            }
              
            if(custId)
            {
                this.query().dataSourceTable(tableNum(CustTrans)).addRange(fieldNum(CustTrans,AccountNum)).value(custId);
                this.query().dataSourceTable(tableNum(CustTrans)).addRange(fieldNum(CustTrans,AccountNum)).status(RangeStatus::Hidden);
            }

            if(paymReference)
            {
                this.query().dataSourceTable(tableNum(CustTrans)).addRange(fieldNum(CustTrans,PaymReference)).value(paymReference);
                this.query().dataSourceTable(tableNum(CustTrans)).addRange(fieldNum(CustTrans,PaymReference)).status(RangeStatus::Hidden);
            }
            if(custVoucher)
            {
                this.query().dataSourceTable(tableNum(CustTrans)).addRange(fieldNum(CustTrans,Voucher)).value(custVoucher);
                this.query().dataSourceTable(tableNum(CustTrans)).addRange(fieldNum(CustTrans,Voucher)).status(RangeStatus::Hidden);
            }

            str currencyCode = Currency.valueStr();
            str amt =  num2str(SKS_BR_BankTran.TranAmount, 10,2,DecimalSeparator::Dot,ThousandSeparator::None);

            this.query().dataSourceTable(tableNum(CustTrans)).addRange(fieldNum(CustTrans,AmountCur)).value(amt);
            this.query().dataSourceTable(tableNum(CustTrans)).addRange(fieldNum(CustTrans,AmountCur)).status(RangeStatus::Hidden);

            this.query().dataSourceTable(tableNum(CustTrans)).addRange(fieldNum(CustTrans,CurrencyCode)).value(currencyCode);
            this.query().dataSourceTable(tableNum(CustTrans)).addRange(fieldNum(CustTrans,CurrencyCode)).status(RangeStatus::Hidden);

            //this.query().dataSourceTable(tableNum(CustTrans)).addRange(fieldNum(CustTrans,CompanyBankAccountId)).value(bankAccnt);
            //this.query().dataSourceTable(tableNum(CustTrans)).addRange(fieldNum(CustTrans,CompanyBankAccountId)).status(RangeStatus::Hidden);

            QueryRun queryrun;
            CustTrans lcusttransk,lcustTrans;

            queryrun    = new queryrun(query);
            container c,con;
            while(queryrun.next())
            {
                lcustTrans   = queryrun.get(tablenum(CustTrans));

                select firstonly crosscompany lcusttransk where lcusttransk.Voucher == lcustTrans.LastSettleVoucher;

                if(lcustTrans.LastSettleVoucher == '' || ( lcustTrans.LastSettleVoucher == lcusttransk.Voucher && lcusttransk.Invoice) )
                {
                    c+= queryValue(lcustTrans.RecId);
                }
                
                con+= queryValue(lcustTrans.RecId);
             
            }
            if(conLen(c) > 0)
            {
                this.query().dataSourceTable(tableNum(CustTrans)).addRange(fieldNum(CustTrans,RecId)).value((con2str(c))); 
            }
            else
            {
                this.query().dataSourceTable(tableNum(CustTrans)).addRange(fieldNum(CustTrans,RecId)).value(queryNotValueCon_W((con)));
            }

            this.query().dataSourceTable(tablenum(CustTrans)).addSortField(fieldnum(CustTrans, TransDate),SortOrder::Descending);

            // Initially the form is loaded without data
            // The user will need to click Apply filter to load data
            // The queryData variable is set to true the first time Apply filter is clicked
            if(queryData)
            {
                super();
            }
        }

]]></Source>
					</Method>
				</Methods>
				<Fields>
					<Field>
						<DataField>SKS_BR_DDR_IsSelected</DataField>
						<Methods>
							<Method>
								<Name>validate</Name>
								<Source><![CDATA[
            public boolean validate()
            {
                boolean ret;
        
                ret = super();
        
                if (DDRCustTrans.Voucher != element.editSelectedRecord( false, ''))
                {
                    str len =  element.editSelectedRecord(false, '');
                    if ( strlen(len) > 0)
                    {
                        // --------------------------------------------------
                        // Only one File can be selected at a time
                        // --------------------------------------------------
                        Box::warning("@SKS:SKGBRDDRCustTransValidation"); 
                        return false;
                    }
                }
                return true;
            }

]]></Source>
							</Method>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();
            
                if( this.getValue() == false)
                {
                    if (DDRCustTrans.Voucher == element.editSelectedRecord( false, '') )
                    {
                        element.clearSelected();
                    }
                }
                else
                {
                    element.editSelectedRecord( true,  DDRCustTrans.Voucher);
                }
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
				</Fields>
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>ApplyFilter</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// filter the data
        /// </summary>
        public void clicked()
        {
            super();
    
            element.loadData(true, false);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>CustTransDataAreaId</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        /// Filter the imported transactions grid based on company
        /// </summary>
        /// <returns>Return true</returns>
        // 8702 CR
        public boolean modified()
        {
            boolean ret;
    
            ret = super();

            CustomerId.text('');
            CustPaymentReference.text('');
            Voucher.text(''); 
    
            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        /// <summary>
        /// Company lookup by hierarchies
        /// </summary>
        /// CR - 8702
        public void lookup()
        {
            QueryBuildDataSource    queryBuildDataSource;
            QueryBuildRange         queryBuildRange;
            Container               companyList = SKS_EB_VirtualCompany::getBankRecCompanies();
            int                     i;
            str                     hierarchiesCompany;
        
            sysTableLookup     = PmfTableLookupExtended::newParameters(tablenum(DataArea),this);
            sysTableLookup.addLookupfield(fieldnum(DataArea,Id));
            sysTableLookup.addLookupfield(fieldnum(DataArea,Name));
        
            query = new Query();
            queryBuildDataSource = query.addDataSource(tablenum(DataArea));
            queryBuildRange = queryBuildDataSource.addRange(fieldNum(DataArea,id));
            for (i=1; i <= conLen(companyList); i++)
            {
                hierarchiesCompany += conPeek(companyList, i) + ',';
            }
            queryBuildRange.value(hierarchiesCompany);
        
            sysTableLookup.parmQuery(query);
            sysTableLookup.performFormLookup();
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        /// <summary>
        /// validating the comapny
        /// </summary>
        /// <returns> yes or no</returns>
        public boolean validate()
        {
            boolean ret,check;
        
            ret = super();

            QueryBuildDataSource    queryBuildDataSource;
            QueryBuildRange         queryBuildRange;
            Container               companyList = SKS_EB_VirtualCompany::getBankRecCompanies();
            int                     i;
            str                     hierchCompany, selectedCompany;

            query = new Query();
            queryBuildDataSource = query.addDataSource(tablenum(DataArea));
            queryBuildRange = queryBuildDataSource.addRange(fieldNum(DataArea,id));
            for (i=1; i <= conLen(companyList); i++)
            {
                hierchCompany = conPeek(companyList, i);
                selectedCompany = CustTransDataAreaId.valueStr();

                if(selectedCompany == hierchCompany)
                {
                    check = true;
                    ret = true;
                }
            }
        
            if(!check && selectedCompany !='')
            {
                ret = checkFailed("@SKS:SKGDDRComapnyHierarchieValidation");
                CustTransDataAreaId.setFocus();
            }
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>CustomerId</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        /// <summary>
        /// Bank account lookup
        /// </summary>
        // 8702 CR
        public void lookup()
        {
            QueryBuildDataSource    queryBuildDataSource;
            Container               companyList = SKS_EB_VirtualCompany::getBankRecCompanies();
            int                     i;
    
            sysTableLookup     = PmfTableLookupExtended::newParameters(tablenum(CustTable),this);
    
            sysTableLookup.addLookupfield(fieldnum(CustTable,AccountNum));
            sysTableLookup.addLookupfield(fieldNum(CustTable,DataAreaId));
            query = new Query();
    
            queryBuildDataSource = query.addDataSource(tablenum(CustTable));
       
            query.allowCrossCompany(true);
            query.clearCompanyRange();
            if(CustTransDataAreaId.valueStr())
            {
                query.addCompanyRange(CustTransDataAreaId.valueStr());
            }
            else
            {
                for (i=1; i <= conLen(companyList); i++)
                {
                    query.addCompanyRange(conPeek(companyList, i));
                }
            }
            sysTableLookup.parmQuery(query);
            sysTableLookup.performFormLookup();
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        /// Set the company field value
        /// </summary>
        /// <returns>Return true</returns>
        public boolean modified()
        {
            boolean ret;
        
            ret = super();

            custId = CustomerId.valueStr();

            CustPaymentReference.text('');
            Voucher.text('');
        
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>CustPaymentReference</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        /// <summary>
        /// Bank account lookup
        /// </summary>
        // 8702 CR
        public void lookup()
        {
            Container               companyList = SKS_EB_VirtualCompany::getBankRecCompanies();
            int                     i;
            QueryBuildDataSource    qbd;

            sysTableLookup     = PmfTableLookupExtended::newParameters(tablenum(CustTrans),this);
            
            sysTableLookup.addLookupfield(fieldnum(CustTrans,PaymReference));
            sysTableLookup.addLookupfield(fieldNum(CustTrans,DataAreaId));
            query = new Query();
            qbd = query.addDataSource(Tablenum(CustTrans));

            if(CustomerId.valueStr())
            {
                qbd.addRange(fieldnum(CustTrans,AccountNum)).value(queryvalue(CustomerId.valueStr()));
            }
            qbd.addRange(fieldnum(CustTrans,PaymReference)).value(sysquery::valueNotEmptyString());
            qbd.addRange(fieldnum(CustTrans,AmountCur)).value('< 0');

            query.allowCrossCompany(true);
            query.clearCompanyRange();
            if(CustTransDataAreaId.valueStr())
            {
                query.addCompanyRange(CustTransDataAreaId.valueStr());
            }
            else
            {
                for (i=1; i <= conLen(companyList); i++)
                {
                    query.addCompanyRange(conPeek(companyList, i));
                }
            }
            sysTableLookup.parmQuery(query);
            sysTableLookup.performFormLookup();
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        /// Set the company field value
        /// </summary>
        /// <returns>Return true</returns>
        // 8702 CR
        public boolean modified()
        {
            boolean ret;
        
            ret = super();
        
            paymReference = CustPaymentReference.valueStr();

            Voucher.text('');

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Voucher</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        /// <summary>
        /// Bank account lookup
        /// </summary>
        // 8702 CR
        public void lookup()
        {
            Container               companyList = SKS_EB_VirtualCompany::getBankRecCompanies();
            int                     i;
            QueryBuildDataSource    qbd;
    
            sysTableLookup     = PmfTableLookupExtended::newParameters(tablenum(CustTrans),this);
            
            sysTableLookup.addLookupfield(fieldnum(CustTrans,Voucher));
            sysTableLookup.addLookupfield(fieldNum(CustTrans,DataAreaId));
            query = new Query();
            qbd = query.addDataSource(Tablenum(CustTrans));
            
            if(CustomerId.valueStr())
            {
                qbd.addRange(fieldnum(CustTrans,AccountNum)).value(queryvalue(CustomerId.valueStr()));
            }
            qbd.addRange(fieldnum(CustTrans,Voucher)).value(sysquery::valueNotEmptyString());
            query.allowCrossCompany(true);
            query.clearCompanyRange();
            if(CustTransDataAreaId.valueStr())
            {
                query.addCompanyRange(CustTransDataAreaId.valueStr());
            }
            else
            {
                for (i=1; i <= conLen(companyList); i++)
                {
                    query.addCompanyRange(conPeek(companyList, i));
                }
            }
            sysTableLookup.parmQuery(query);
            sysTableLookup.performFormLookup();
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        /// Set the company field value
        /// </summary>
        /// <returns>Return true</returns>
        // 8702 CR
        public boolean modified()
        {
            boolean ret;
        
            ret = super();
        
            custVoucher = Voucher.valueStr();
        
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>PostBtn</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            SKS_BR_GLProcessing_transactionform locSKS_BR_GLProcessing;
            SKS_BR_DDRMatching                  locSKS_BR_DDRMatching;
            boolean                             isPosted;
            boolean matchFound;
            RefRecId origStatementRecId;
            BankAccountTrans bankAccountTrans;

            super();

            locSKS_BR_GLProcessing = new SKS_BR_GLProcessing_transactionform();
            locSKS_BR_DDRMatching = new SKS_BR_DDRMatching();


            isPosted = locSKS_BR_DDRMatching.postGL(sks_br_banktran, DDRCustTrans, true);

            if(isPosted)
            {
                if(origStatementRecId == 0)
                {
                    origStatementRecId = sks_br_banktran.OriginalStatementRecId;
                }
                changecompany(sks_br_banktran.company())
                {
                    bankAccountTrans = locSKS_BR_DDRMatching.glMatch(sks_br_banktran);

                    if(bankAccountTrans)
                    {
                        ttsbegin;
                        matchFound = true;
                        guid locguid = newGuid();
                        locSKS_BR_DDRMatching.stampIntermBankAccountTrans(sks_br_banktran,bankAccountTrans, locguid);
                        locSKS_BR_DDRMatching.stampIntermSKS_BR_BankTran(sks_br_banktran, locguid, false, true);
                        ttscommit;
                    }
                }
                postbtn.enabled(false);
                CustTrans_SKS_BR_DDR_IsSelected.enabled(false);
            }


            element.abandonChanges(DDRCustTrans);
            element.dataSource().reread();
            element.dataSource().refresh();
            element.dataSource().research(true);
            SKS_BR_BankTran_ds.reread();
            SKS_BR_BankTran_ds.refresh();
            SKS_BR_BankTran_ds.research(true);

            element.refreshCallerForm(origPosition);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>CustTrans_SKS_BR_DDR_IsSelected</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// enable/disable the post button
        /// </summary>
        public void clicked()
        {
            super();

            if(SKS_BR_BankTran.TranAmount - DDRCustTrans.AmountCur  == 0)
            {
                postbtn.enabled(true);
            }
            else
            {
                postbtn.enabled(false);
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>SKS_BR_BankTran</Name>
			<Table>SKS_BR_BankTran</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AccountId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AccountStatementDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AccountStatementNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankCustomerNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankHeaderRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankTranIntermRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankTranRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankTranType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BookNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreateGL</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustAccount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustCompany</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustomerName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustomerRuleStep</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustRemitAnalysisRule</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>eBankRecCustGroupId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EbankRecMatchingRuleGroupId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FileDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Filename</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FileTranType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>GLCreationCompany</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>GLMappingRuleGroupId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>GLMatchOrCreate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ImportedStatementDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ImportedStatementNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IntermMatch</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IntermPaymentJournalNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InUse</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InUseBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>JournalName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LedgerJournalRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LineNumInFile</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ManualReconciliationID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MatchConfidence</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MatchDefaultRule</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Matched</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MatchedType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MatchIndicator</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MatchingRuleGroupActionStep</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MatchingRuleGroupId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MatchStep</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MultipleMatches</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OrigBankVoucher</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OriginalStatementRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ParsedValue</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ParseRuleId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymentJournalNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymentMatch</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RemitenceSettlementActionStep</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RevVoucher</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SessionId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SessionLoginDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SettlementAction</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SettlementType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TranAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TranDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TranDescription</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TranDescriptionUser</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransactionFeesAmt</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>UnsettledAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>UserBlockId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ValueDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Voucher</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ZBAParentRecid</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<CrossCompanyAutoQuery>Yes</CrossCompanyAutoQuery>
			<AllowDelete>No</AllowDelete>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>DDRCustTrans</Name>
			<Table>CustTrans</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AccountingEvent</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AccountNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AmountCur</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AmountMST</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Approved</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Approver</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankCentralBankPurposeCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankCentralBankPurposeText</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankLCExportLine</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankRemittanceFileId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BillOfExchangeID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BillOfExchangeSeqNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BillOfExchangeStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CancelledPayment</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CashDiscBaseDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CashDiscCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CashPayment</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Closed</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CollectionLetter</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CollectionLetterCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CompanyBankAccountId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ControlNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Correct</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedTransactionId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CurrencyCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustAutomationExclude</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustBillingClassification</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustExchAdjustmentRealized</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustExchAdjustmentUnrealized</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DeliveryMode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DirectDebitMandate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DocumentDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DocumentNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DueDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EUROTriangulation</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExchAdjustment</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExchAdjustmentReporting</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExchRate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExchRateSecond</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FixedExchRate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Interest</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Invoice</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InvoiceProject</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InvoiceType_IT</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LastExchAdj</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LastExchAdjRate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LastExchAdjRateReporting</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LastExchAdjVoucher</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LastSettleAccountNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LastSettleCompany</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LastSettleDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LastSettleVoucher</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MCRPaymOrderID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedTransactionId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OffsetRecid</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OrderAccount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PackedExtensions</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymMethod</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymMode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymReference</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymSchedId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymSpec</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymTermId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PostingProfile</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PostingProfileClose</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Prepayment</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReasonRefRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReportingCurrencyAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReportingCurrencyCrossRate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReportingCurrencyExchRate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReportingCurrencyExchRateSecondary</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReportingExchAdjustmentRealized</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReportingExchAdjustmentUnrealized</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RetailCustTrans</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RetailStoreId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RetailTerminalId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RetailTransactionId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SettleAmountCur</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SettleAmountMST</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SettleAmountReporting</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Settlement</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SKS_BR_DDR_AlreadyMarked</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SKS_BR_DDR_IntermMatch</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SKS_BR_DDR_IsSelected</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SKS_BR_DDR_ManualReconciliationID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SKS_BR_DDR_MarkedFromReconcileStatement</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SKS_DD_IsDirectDebit</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxInvoiceSalesId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ThirdPartyBankAccountId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Txt</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Voucher</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<CrossCompanyAutoQuery>Yes</CrossCompanyAutoQuery>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@SKS:SKGBRDDRTransReconsltn</Caption>
		<Pattern xmlns="">Custom</Pattern>
		<ViewEditMode xmlns="">Edit</ViewEditMode>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormTabControl">
				<Name>Tab</Name>
				<AlignControl>No</AlignControl>
				<ElementPosition>1073741823</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Type>Tab</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>BankStatementFilter</Name>
						<ElementPosition>858993458</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormActionPaneControl">
								<Name>FilterActionPane</Name>
								<Type>ActionPane</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormButtonGroupControl">
										<Name>FilterButtonGroup</Name>
										<Type>ButtonGroup</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormButtonControl">
												<Name>ApplyFilter</Name>
												<HelpText>@SKS:SKGApplyFilterHelpText</HelpText>
												<NeededPermission>Read</NeededPermission>
												<Type>Button</Type>
												<FormControlExtension
													i:nil="true" />
												<Text>@SYS122037</Text>
											</AxFormControl>
										</Controls>
									</AxFormControl>
								</Controls>
								<Style>Strip</Style>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>DefaultViewGroup</Name>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls />
								<Columns>2</Columns>
								<FrameType>None</FrameType>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>Group1Copy1</Name>
								<ElementPosition>1610612733</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>CustTransDataAreaId</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>920350134</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<ExtendedDataType>SelectableDataArea</ExtendedDataType>
										<Label>@SYS342276</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>CustomerId</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1533916890</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Label>@SKS:SKGBRDDRCustId</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>CustTransFromDate</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>Date</Type>
										<FormControlExtension
											i:nil="true" />
										<Label>@SKS:SKGBRDDRFromDate</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>CustTransToDate</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>Date</Type>
										<FormControlExtension
											i:nil="true" />
										<Label>@SKS:SKGBRDDRToDate</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>CustPaymentReference</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1533916890</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Label>@SKS:SKGBRDDRPaymentRef</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Voucher</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1533916890</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Label>@SKS:SKGBRDDRPaymVoucher</Label>
									</AxFormControl>
								</Controls>
								<Columns>4</Columns>
								<FrameType>None</FrameType>
							</AxFormControl>
						</Controls>
						<Caption>@SKS:SKGBRDDRCustTransFilter</Caption>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>Header</Name>
						<ElementPosition>715827882</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormActionPaneControl">
								<Name>ActionPane</Name>
								<ElementPosition>1073741822</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>SizeToAvailable</HeightMode>
								<Type>ActionPane</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormActionPaneTabControl">
										<Name>ActionPaneTab</Name>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>ActionPaneTab</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormButtonGroupControl">
												<Name>ButtonGroup</Name>
												<ElementPosition>1073741822</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>SizeToAvailable</HeightMode>
												<Type>ButtonGroup</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>SizeToAvailable</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormButtonControl">
														<Name>PostBtn</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1431655764</ElementPosition>
														<Enabled>No</Enabled>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>SizeToAvailable</HeightMode>
														<HelpText>@SKS4329</HelpText>
														<Type>Button</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>SizeToAvailable</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<Text>@SYS41360</Text>
													</AxFormControl>
												</Controls>
												<ArrangeMethod>Vertical</ArrangeMethod>
												<Columns>2</Columns>
											</AxFormControl>
										</Controls>
										<AlignChild>No</AlignChild>
										<AlignChildren>No</AlignChildren>
										<ArrangeMethod>Vertical</ArrangeMethod>
									</AxFormControl>
								</Controls>
								<AlignChild>No</AlignChild>
								<AlignChildren>No</AlignChildren>
								<ArrangeMethod>Vertical</ArrangeMethod>
								<Style>Strip</Style>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGridControl">
								<Name>Grid</Name>
								<ElementPosition>1610612733</ElementPosition>
								<Enabled>No</Enabled>
								<FilterExpression>%1</FilterExpression>
								<Height>100</Height>
								<HeightMode>Manual</HeightMode>
								<Type>Grid</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>PaymentAmount</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>252645134</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>TranAmount</DataField>
										<DataSource>SKS_BR_BankTran</DataSource>
										<Label>@SKS4412</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Company</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>631612835</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>dataAreaId</DataField>
										<DataSource>SKS_BR_BankTran</DataSource>
										<Label>@SKS4411</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>BankAccount</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>757935402</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>AccountId</DataField>
										<DataSource>SKS_BR_BankTran</DataSource>
										<Label>@SKS4319</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Currency</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>884257969</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>getOrigStatementCurrency</DataMethod>
										<DataSource>SKS_BR_BankTran</DataSource>
										<Label>@SKS4309</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>ImportTransType</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1515870804</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>FileTranType</DataField>
										<DataSource>SKS_BR_BankTran</DataSource>
										<Label>@SKS518</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>DDRRefNum</Name>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>DDRReferenceNumber</DataField>
										<DataSource>SKS_BR_BankTran</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Notes</Name>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>TranDescription</DataField>
										<DataSource>SKS_BR_BankTran</DataSource>
									</AxFormControl>
								</Controls>
								<DataSource>SKS_BR_BankTran</DataSource>
							</AxFormControl>
						</Controls>
						<Caption>@SKS4299</Caption>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>CustTrans</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1073741823</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>SizeToAvailable</HeightMode>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormActionPaneControl">
								<Name>ActionPane1Copy1</Name>
								<ElementPosition>1073741822</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>SizeToAvailable</HeightMode>
								<Type>ActionPane</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormActionPaneTabControl">
										<Name>ActionPaneTab1Copy1</Name>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>ActionPaneTab</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormButtonGroupControl">
												<Name>ButtonGroup1Copy1</Name>
												<ElementPosition>1431655764</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>ButtonGroup</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls />
												<ArrangeMethod>Vertical</ArrangeMethod>
											</AxFormControl>
										</Controls>
										<AlignChild>No</AlignChild>
										<AlignChildren>No</AlignChildren>
										<ArrangeMethod>Vertical</ArrangeMethod>
									</AxFormControl>
								</Controls>
								<AlignChild>No</AlignChild>
								<AlignChildren>No</AlignChildren>
								<ArrangeMethod>Vertical</ArrangeMethod>
								<Style>Strip</Style>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGridControl">
								<Name>Grid1Copy1</Name>
								<ElementPosition>1610612733</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Height>200</Height>
								<HeightMode>Manual</HeightMode>
								<Type>Grid</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>CustTrans_SKS_BR_DDR_IsSelected</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>CheckBox</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>SKS_BR_DDR_IsSelected</DataField>
										<DataSource>DDRCustTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>CustTrans_AccountNum</Name>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>AccountNum</DataField>
										<DataSource>DDRCustTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>DDRCustTrans_AmountCur</Name>
										<Type>Real</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>AmountCur</DataField>
										<DataSource>DDRCustTrans</DataSource>
										<Label>@SKS3116</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>CustTrans_PaymReference</Name>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>PaymReference</DataField>
										<DataSource>DDRCustTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>CustTrans_Voucher</Name>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>Voucher</DataField>
										<DataSource>DDRCustTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>CustTrans_TransDate</Name>
										<Type>Date</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>TransDate</DataField>
										<DataSource>DDRCustTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>DDRCustTrans_PaymMode</Name>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>PaymMode</DataField>
										<DataSource>DDRCustTrans</DataSource>
									</AxFormControl>
								</Controls>
								<DataSource>DDRCustTrans</DataSource>
								<MultiSelect>No</MultiSelect>
							</AxFormControl>
						</Controls>
						<Caption>@SKS:SKGBRDDRCustTrans</Caption>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
				</Controls>
				<AlignChild>No</AlignChild>
				<ArrangeMethod>Vertical</ArrangeMethod>
				<Scrollbars>Yes</Scrollbars>
				<Style>FastTabs</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>