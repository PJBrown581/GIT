<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>SKS_PRA_StatementReconciliationTrans</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class SKS_PRA_StatementReconciliationTrans extends FormRun

{
    SKS_LB_JournalAR                    mainFileAR;
    DimensionDynamicAccountController   dimAccountController;
    Name                                mainAccountDimAttrName;
    RecId                               currentMainAccountId;
    MainAccountRecId                    previousMainAccountId;
    SKS_BR_Banktran                     bankTran;
    SKS_BR_Banktran                     tmpContainer_BankTran;
    SKS_BR_BankAcctStmt                 gSKS_BR_BankAcctStmt;
    BankAccountStatement                locBankAccountStatement;
    SKS_BR_BankReconciliationTrans      sKS_BR_BankReconciliationTrans;
    SKS_BR_NextAvailBankTran            locSKS_BR_NextAvailBankTran;
    [FormObservable]
    RefRecId                            bankTransRecId;
    SKS_BR_Banktran                     bankTranVoucher;//TFS 7335
    SKS_BR_GLProcessing_Transactionform locSKS_BR_GLProcessing_TransactionForm;
    int                                 lineNumber;
    PmfTableLookupExtended              invoicelookup;
    BankAccountStatement                bankAccountStatement;
    Amountcur                           origTranAmount;
    FormDataSource                      callingFormDataSource;
    int                                 origPosition;
    int                                 nextPosition;
    Voucher                             voucherLoc;// TFS 7335
    FormDataSource                      callingFormDataSourceBankAcctStmt;
    [FormObservable]
    SKS_BR_ManualReconciliationID       myGuid;//GUID refactor
    MainAccountRecId                    currentMainAccount;
    MainAccountRecId                    previousMainAccount;
    DimensionAttributeRecId             mainAccountDimAttr;
    #SKS_Global //GUID refactor


}
]]></Source>
			</Method>
			<Method>
				<Name>close</Name>
				<Source><![CDATA[
    public void close()
    {
        SKS_BR_BankTran locBankTranSelect;

        select crosscompany locBankTranSelect where locBankTranSelect.RecId == bankTransRecId;

        changecompany(locBankTranSelect.company())
        {
            this.updateBankRecTran(locBankTranSelect);
            super();
            this.refreshCallerForm(nextPosition);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBankRecTran</Name>
				<Source><![CDATA[
    public void updateBankRecTran(SKS_BR_BankTran _BankTranSelect)
    {
        SKS_BR_BankTran locBankTransFind, sKS_BR_BankTranUpdate;
        SKS_LB_JournalARApplic  sKS_LB_JournalARApplicFind;
        BankAccountTrans locAccountTrans;

        // If no matching Bank transaction(s), remove guid from SKS_BR_BankTran record
        if (_BankTranSelect.ManualReconciliationID != emptyGuid())
        {
            select firstonly RecId from locAccountTrans where locAccountTrans.SKS_BR_ManualReconciliationID == _BankTranSelect.ManualReconciliationID;
            if (locAccountTrans.RecId == 0)
            {
                ttsbegin;
                _BankTranSelect.selectForUpdate(true);
                _BankTranSelect.ManualReconciliationID = emptyGuid();
                _BankTranSelect.doUpdate();
                ttscommit;
            }
        }

        if (_BankTranSelect.Matched == NoYes::No)
        {
            SKS_BR_GLProcessing::colorImportedTransaction(bankTransRecId);// TFS 7351
        }

        // 8764 CR -->
        if(_BankTranSelect.GLMatchOrCreate  == SKS_BR_GLMatchOrCreate::CustomerSettlement ||
            _BankTranSelect.GLMatchOrCreate   == SKS_BR_GLMatchOrCreate::Manual)
        {
            select  count(RecId) from sKS_LB_JournalARApplicFind where sKS_LB_JournalARApplicFind.SKS_BR_BankTran == _BankTranSelect.RecId;
            if(sKS_LB_JournalARApplic.RecId == 0)
            {
                select firstonly crosscompany locBankTransFind
                        where locBankTransFind.RecId           == bankTransRecId &&
                            (locBankTransFind.GLMatchOrCreate  == SKS_BR_GLMatchOrCreate::CustomerSettlement ||
                            locBankTransFind.GLMatchOrCreate   == SKS_BR_GLMatchOrCreate::Manual);

                if(locBankTransFind && locBankTransFind.GLCreationCompany)
                {
                    select firstonly forupdate AccountId,CustAccount,CustCompany from sKS_BR_BankTranUpdate
                            where sKS_BR_BankTranUpdate.RecId   == locBankTransFind.RecId;
                    ttsbegin;
                    sKS_BR_BankTranUpdate.CustAccount = '';
                    sKS_BR_BankTranUpdate.CustCompany = locBankTransFind.GLCreationCompany;
                    sKS_BR_BankTranUpdate.doUpdate();
                    ttscommit;
                }
            }
            else
            {
                select sKS_LB_JournalARApplicFind
                        where sKS_LB_JournalARApplicFind.SKS_BR_BankTran == _BankTranSelect.RecId &&
                            sKS_LB_JournalARApplicFind.AccountType == LedgerJournalACType::Cust;
                if(sKS_LB_JournalARApplicFind)
                {
                    SKS_LB_JournalARApplic::customerBankTransUpdate(sKS_LB_JournalARApplicFind);
                }
            }
        }
        // 8764 CR <--
    }

]]></Source>
			</Method>
			<Method>
				<Name>bookRefresh</Name>
				<Source><![CDATA[
    public void bookRefresh()
    {
        SKS_LB_JournalARApplic_ds.research(true);
        SKS_LB_JournalARApplic_ds.refresh();
        SKS_BR_BankTran_ds.research(true);
        SKS_BR_BankTran_ds.refresh();
        SKS_PRA_PaymentTable_ds.research(true);
        SKS_PRA_PaymentTable_ds.refresh();
    }

]]></Source>
			</Method>
			<Method>
				<Name>bookRefreshAlreadyMarked</Name>
				<Source><![CDATA[
    /// <summary>
    /// To refresh the caller data source and retain the record postion after already marked form is closed
    /// </summary>
    // 8778 CR
    public void bookRefreshAlreadyMarked(int _position)
    {
        SKS_LB_JournalARApplic_ds.research();
        SKS_LB_JournalARApplic_ds.active();
        SKS_LB_JournalARApplic_ds.setPosition(_position);
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableButtons</Name>
				<Source><![CDATA[
    public void enableButtons(NoYes _enabled = false)
    {
        SKS_BR_BankTran_ds.allowEdit(_enabled);
        SKS_LB_JournalARApplic_ds.allowEdit(_enabled);
        SKS_LB_JournalARApplic_ds.allowCreate(_enabled);
        SKS_LB_JournalARApplic_ds.allowDelete(_enabled);
        Maintain.enabled(_enabled);
        TemplateButtongroup.enabled(_enabled);
        AccountDimensionButtongroup.enabled(_enabled);
        OffsetAccountDimensionButtongroup.enabled(_enabled);
        InquiriesButtongroup.enabled(_enabled);
        FullSettlementGroup.enabled(_enabled 
            && 
            (SKS_LB_JournalARApplic.CustTransOpenRecId !=  0 && SKS_LB_JournalARApplic.AccountType == LedgerJournalACType::Cust)
            ||
            (SKS_LB_JournalARApplic.VendTransOpenRecId !=  0 && SKS_LB_JournalARApplic.AccountType == LedgerJournalACType::Vend)); // 7528 Item 3
        SKS_BR_VATTaxForm.enabled(_enabled); //CR-8793
        RemainOnAcctBtn.enabled(_enabled && Difference.realValue() != 0); 
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    [SuppressBPWarning('BPCheckSQLQueryInInit','Refactoring data access loop can be moved to class to avoid performance bottleneck.But it require more efforts and may impact funtionality related to bank transations and related objects.')]   //TAS_CAR
    public void init()
    {
        lineNumber = 1;
        mainAccountDimAttr = DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount);
        RecordInsertList    nextAvailBankTranRecordInsertList = new  RecordInsertList(tableNum(SKS_BR_NextAvailBankTran));      //TAS_CAR

        super();

        
        locSKS_BR_GLProcessing_TransactionForm = new SKS_BR_GLProcessing_Transactionform();

        if (element.args().parmObject())
        {
            SKS_BR_BankReconciliationTrans = element.args().parmObject();
            Company.text(SKS_BR_BankReconciliationTrans.parmDataAreaId());
            BankAccount.text(SKS_BR_BankReconciliationTrans.parmCompanyBankAccountId());
            StatementDate.dateValue(SKS_BR_BankReconciliationTrans.parmTransDate());
            StatementNumber.text(SKS_BR_BankReconciliationTrans.parmBankAccountStatementNum());
            ImportBankNumber.text(SKS_BR_BankReconciliationTrans.parmSKS_BR_BankNum());
            ImportCustNumber.text(SKS_BR_BankReconciliationTrans.parmSKS_BR_BankCustomerNum());
            ImportTransType.text(SKS_BR_BankReconciliationTrans.parmImportTranType());
            CustCompany.text(SKS_BR_BankReconciliationTrans.parmSelectableDataArea());
            Customer.text(SKS_BR_BankReconciliationTrans.parmCustAccount());
            Currency.text(SKS_BR_BankReconciliationTrans.parmcurrency());

            bankTran.RecId  = SKS_BR_BankReconciliationTrans.parmRecId();
            bankTransRecId  = bankTran.RecId;
            // if there is a match already, should get the same guid, otherwise create new guid
            if (SKS_BR_BankReconciliationTrans.parmTransGuid() != emptyGuid())
            {
                myGuid = SKS_BR_BankReconciliationTrans.parmTransGuid();
            }
            else
            {
                myGuid = newGuid();
                SKS_BR_BankReconciliationTrans.parmTransGuid(myGuid);
            }

            select firstonly Voucher from bankTranVoucher
                where bankTranVoucher.RecId == bankTransRecId;
            voucherLoc      = bankTranVoucher.Voucher;//TFS 7335
        }

        callingFormDataSource = sKS_BR_BankReconciliationTrans.parmformDatasource();
        origPosition          = callingFormDataSource.getPosition();
        callingFormDataSourceBankAcctStmt = sKS_BR_BankReconciliationTrans.parmformDatasourceBankAcctStmt();

        delete_from locSKS_BR_NextAvailBankTran;
        //SKS CR 9729 -->
        FormDataSource bankTran_ds = sKS_BR_BankReconciliationTrans.parmformDatasource();
        changecompany(bankTran_ds.cursor().dataareaid)
        {
            locSKS_BR_NextAvailBankTran = null;
            for (tmpContainer_BankTran = bankTran_ds.getFirst() ? bankTran_ds.getFirst() : bankTran_ds.cursor();
            tmpContainer_BankTran;
            tmpContainer_BankTran = bankTran_ds.getNext())
            //SKS CR 9729 <--
            {
            
                locSKS_BR_NextAvailBankTran.LineNumber = LineNumber;
                locSKS_BR_NextAvailBankTran.AccountId = tmpContainer_BankTran.AccountId;
                locSKS_BR_NextAvailBankTran.AccountStatementNum = tmpContainer_BankTran.AccountStatementNum;
                locSKS_BR_NextAvailBankTran.BankNum = tmpContainer_BankTran.BankNum;
                locSKS_BR_NextAvailBankTran.TranAmount = tmpContainer_BankTran.TranAmount;
                locSKS_BR_NextAvailBankTran.TranDate = tmpContainer_BankTran.TranDate;
                locSKS_BR_NextAvailBankTran.CustAccount = tmpContainer_BankTran.CustAccount;
                locSKS_BR_NextAvailBankTran.CustCompany = tmpContainer_BankTran.CustCompany;
                locSKS_BR_NextAvailBankTran.SKS_BR_BankTranCompany = tmpContainer_BankTran.dataareaid;
                locSKS_BR_NextAvailBankTran.BankCustomerNum = tmpContainer_BankTran.BankCustomerNum;
                locSKS_BR_NextAvailBankTran.SKS_BR_BankTranRecid = tmpContainer_BankTran.RecId;
                locSKS_BR_NextAvailBankTran.Matched = tmpContainer_BankTran.Matched;
                locSKS_BR_NextAvailBankTran.InUse = tmpContainer_BankTran.InUse;
                nextAvailBankTranRecordInsertList.add(locSKS_BR_NextAvailBankTran);     //TAS_CAR
                lineNumber++;
            }
            nextAvailBankTranRecordInsertList.insertDatabase();   
        }//TAS_CAR
        if(sKS_BR_BankReconciliationTrans.parmMatched() == NoYes::Yes || sKS_BR_BankReconciliationTrans.parmBankTransVoucher() != '')
        {
            this.enableButtons(false);

            BankTransSum.realValue(SKS_BR_BankTran_ds.bankSum());
            difference.realValue(SKS_BR_BankTran_ds.difference());
        }
        else
        {
            this.enableButtons(true);

            BankTransSum.realvalue(SKS_BR_BankTran_ds.bankSum());
            difference.realvalue(SKS_BR_BankTran_ds.difference());
        }
        SKS_LB_JournalARApplic_SKS_Invoice.allowEdit(true);
        SKS_LB_JournalARApplic_SKS_AccountType.enter(); // 7440
        element.enableApplyTolerance();  // CR-8779

        if(sKS_BR_BankReconciliationTrans.parmBankTransVoucher() != '' && sKS_BR_BankReconciliationTrans.parmMatched() == NoYes::No)
        {
            warning(strFmt("@SKS:SKGBRVoucherLinkedValidation", sKS_BR_BankReconciliationTrans.parmJounraNum(), sKS_BR_BankReconciliationTrans.parmBankTransVoucher()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshCallerForm</Name>
				<Source><![CDATA[
    Public void refreshCallerForm(int Position )
    {
        if (callingFormDataSource)
        {
            if (position == 0)
            {
                position = origPosition;
            }

            callingFormDataSource.refresh();
            callingFormDataSource.reread();
            callingFormDataSource.rereadReferenceDataSources();
            callingFormDataSource.research(true);           
            //18253
            //callingFormDataSource.findRecord(SKS_BR_Banktran); // 18651
            callingFormDataSource.positionToRecord(SKS_BR_Banktran); // 18651
        }
        if (callingFormDataSourceBankAcctStmt)
        {
            callingFormDataSourceBankAcctStmt.reread();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFullSettlement</Name>
				<Source><![CDATA[
    /// <summary>
    /// 7363
    /// </summary>
    public void updateFullSettlement(boolean _isfullSettlement = false, boolean  _isRemoveSettlement = false)
    {
        SKS_LB_JournalARApplic   sKS_LB_JournalARApplicLoc;
        SKS_LB_JournalARApplic   sKS_LB_JournalARApplicUpdate;
        MultiSelectionHelper     selectionHelper = MultiSelectionHelper::construct();
        container                selectedRecords;
        int                      recordPos;
        int                      position; // 7475

        selectionHelper.parmDataSource(sKS_LB_JournalARApplic_DS);
        sKS_LB_JournalARApplicLoc = selectionHelper.getFirst();

        recordPos = 1;
        while (sKS_LB_JournalARApplicLoc)
        {
            select firstonly forupdate sKS_LB_JournalARApplicUpdate
                where sKS_LB_JournalARApplicUpdate.RecId == sKS_LB_JournalARApplicLoc.RecId
                    && sKS_LB_JournalARApplicLoc.displayInvoiceBalance() != 0
                    && sKS_LB_JournalARApplicUpdate.AlreadyMarked == NoYes::No; // 7446

            if(sKS_LB_JournalARApplicUpdate.RecId)
            {
                selectedRecords = conIns(selectedRecords,recordPos,sKS_LB_JournalARApplicUpdate.RecId);
                recordPos ++;
                ttsbegin;
                if(_isfullSettlement)
                {
                    sKS_LB_JournalARApplicUpdate.FullSettlement = NoYes::Yes;
                    sKS_LB_JournalARApplicUpdate.Status = SKS_BR_Status::Full;
                    sKS_LB_JournalARApplicUpdate.modifiedField(fieldNum(SKS_LB_JournalARApplic, FullSettlement));
                }
                if(_isRemoveSettlement)
                {
                    sKS_LB_JournalARApplicUpdate.FullSettlement = NoYes::No;
                    sKS_LB_JournalARApplicUpdate.Status = SKS_BR_Status::None;
                    sKS_LB_JournalARApplicUpdate.modifiedField(fieldNum(SKS_LB_JournalARApplic, FullSettlement));
                }
                sKS_LB_JournalARApplicUpdate.doUpdate();
                ttscommit;
            }
            sKS_LB_JournalARApplicLoc = selectionHelper.getNext();
        }
        position = SKS_LB_journalARApplic_ds.getPosition(); // 7475
        SKS_BR_BankTran_ds.refresh();
        SKS_BR_BankTran_ds.reread();
        SKS_LB_journalARApplic_ds.research();
        SKS_LB_journalARApplic_ds.setPosition(position); // 7475
        for(int i = 1; i<= conLen(selectedRecords); i++)
        {
            SKS_LB_journalARApplic_ds.positionToRecord(SKS_LB_journalARApplic::find(conPeek(selectedRecords, i)));
            SKS_LB_journalARApplic_ds.mark(true);
        }
        //7653 -->
        BankTransSum.realValue(SKS_BR_BankTran_ds.bankSum());
        Difference.realValue(SKS_BR_BankTran_ds.difference());
        //7653 <--
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableDisableRemainOnAcctBtn</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    public void enableDisableRemainOnAcctBtn()
    {
        RemainOnAcctBtn.enabled(SKS_LB_JournalARApplic.AccountType == LedgerJournalACType::Vend ||
                                 SKS_LB_JournalARApplic.AccountType == LedgerJournalACType::Cust); // CR-9480
    }

]]></Source>
			</Method>
			<Method>
				<Name>onSegmentChangedForPrimaryAccount</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    public RecId onSegmentChangedForPrimaryAccount(
        SegmentedEntryControl           _segmentedEntryControl,
        DimensionControlSegment         _dimensionControlSegment,
        RecId                           _currentMainAccountId,
        SKS_LB_JournalARApplic          _sKS_LB_JournalARApplic,
        RefRecId                        _bankTransRecId)
    {
        RecId                           updatedMainAccountId;
        RecId                           mainAccountId;
        //LedgerJournalTable              ledgerJournalTableLocal;
        Map                             headerDimensionSpecifiers;
        Map                             dimensionSpecifiers;
        SKS_BR_BankTran                 locBanKTran;
        MainAccountLegalEntity          mainAccountLegalEntity;
        RefRecId                        legalEntity = CompanyInfo::findDataArea(_sKS_LB_JournalARApplic.CustTransDataAreaId).RecId;

        select firstonly crosscompany RecId, JournalName from locBanKTran
            where locBanKTran.RecId == _bankTransRecId;

        mainAccountId = MainAccount::findByMainAccountId(_dimensionControlSegment.parmValue()).RecId;

        mainAccountLegalEntity = MainAccountLegalEntity::findByMainAccountLegalEntity(mainAccountId, legalEntity);

        updatedMainAccountId = _currentMainAccountId;

        changecompany(_segmentedEntryControl.parmDataAreaId())
        {
            if (_dimensionControlSegment.parmDimensionAttribute().RecId == DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount))
            {
                mainAccountId = _dimensionControlSegment.parmDimensionAttributeValue().EntityInstance;
                if ((mainAccountId != 0) && (_currentMainAccountId != mainAccountId))
                {
                    updatedMainAccountId = mainAccountId;
                    headerDimensionSpecifiers = null;

                    if (_sKS_LB_JournalARApplic.CustTransDataAreaId == locBanKTran.company() && mainAccountLegalEntity.DefaultDimension != 0)
                    {
                        headerDimensionSpecifiers = LedgerDimensionDefaultingEngine::getDefaultDimensionSpecifiers(mainAccountLegalEntity.DefaultDimension);
                    }
                    else if (_sKS_LB_JournalARApplic.CustTransDataAreaId != locBanKTran.company() || mainAccountLegalEntity.DefaultDimension == 0)
                    {
                        //LedgerInterCompany ledgerInterCompanyRecord = LedgerInterCompany::findCompanyPair(_sKS_LB_JournalARApplic.CustTransDataAreaId, ledgerJournalTableLocal.Company());
                        DimensionDefault journalHeaderDefaultDimensions = ledgerJournalName::find(locBanKTran.JournalName).DefaultDimension;
                        headerDimensionSpecifiers = LedgerDimensionDefaultingEngine::getDefaultDimensionSpecifiers(journalHeaderDefaultDimensions);
                    }
                    dimensionSpecifiers = element.addMainAccountDimensionValues(mainAccountId, headerDimensionSpecifiers);

                    if (dimensionSpecifiers)
                    {
                        _segmentedEntryControl.setDimensionSpecifiers(dimensionSpecifiers, false);
                    }
                }
                else if (mainAccountId == 0)
                {
                    updatedMainAccountId = 0;
                }
            }
        }

        return updatedMainAccountId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addMainAccountDimensionValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    public Map addMainAccountDimensionValues(RecId _mainAccountId, Map _preceedingDimensionSpecifiers)
    {
        MainAccountLegalEntity          mainAccountLegalEntity;
        Map                             dimensionSpecifiers;
        Map                             mainAccountDimensionSpecifiers;

        mainAccountLegalEntity = MainAccountLegalEntity::findByMainAccountLegalEntity(_mainAccountId, CompanyInfo::current());
        if (mainAccountLegalEntity.DefaultDimension)
        {
            mainAccountDimensionSpecifiers = LedgerDimensionDefaultingEngine::getDefaultDimensionSpecifiers(mainAccountLegalEntity.DefaultDimension);
            if (_preceedingDimensionSpecifiers)
            {
                dimensionSpecifiers = LedgerDimensionDefaultingEngine::addDimensionSpecifiers(_preceedingDimensionSpecifiers, mainAccountDimensionSpecifiers);
            }
            else
            {
                dimensionSpecifiers = mainAccountDimensionSpecifiers;
            }
        }
        else
        {
            dimensionSpecifiers = _preceedingDimensionSpecifiers;
        }

        return dimensionSpecifiers;
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableApplyTolerance</Name>
				<Source><![CDATA[
    /// <summary>
    /// CR-8779
    /// </summary>
    public void enableApplyTolerance()
    {
        CustParameters              custParameters;
        SKS_LB_JournalARApplic      locJournalARApplic;
        VendParameters              vendParameters; // CR-9480

        // CR-9480 -->
        // If both customer and vendor is exist in new journal line then tolerance will apply based on customer parameter setup.
        select firstonly RecId, AccountType from locJournalARApplic
            order by AccountType
                where locJournalARApplic.SKS_BR_BankTran     == SKS_BR_BankReconciliationTrans.parmRecId()
                    && (locJournalARApplic.AccountType       == LedgerJournalACType::Cust
                    || locJournalARApplic.AccountType        == LedgerJournalACType::Vend)
                    && locJournalARApplic.TransactionAmount  != 0;

        if(locJournalARApplic.AccountType == LedgerJournalACType::Cust)
        {
            select firstonly MaxMSTDiff, MaxMSTOverUnder from custParameters;
        }
        else
        {
            select firstonly MaxMSTDiff, MaxMSTOverUnder from vendParameters;
        }
        // CR-9480 <--
        // If there is atleast one customer settlement and difference is within the maximum penny difference or maximum underpayment or overpayment then only enable ApplyTolerance
        if(custParameters && /*CR-9480*/ locJournalARApplic.RecId != 0 && ((abs(Difference.realValue()) <= custParameters.MaxMSTDiff && abs(Difference.realValue()) > 0) ||
             (abs(Difference.realValue()) <= custParameters.MaxMSTOverUnder && abs(Difference.realValue()) > 0 )))
        {
            ApplyToleranceGroup.enabled(true);
        }
        // CR-9480 -->
        else if(vendParameters && locJournalARApplic.RecId != 0 && ((abs(Difference.realValue()) <= vendParameters.MaxMSTDiff && abs(Difference.realValue()) > 0) ||
             (abs(Difference.realValue()) <= vendParameters.MaxMSTOverUnder && abs(Difference.realValue()) > 0 )))
        {
            ApplyToleranceGroup.enabled(true);
        }
        // CR-9480 <--
        else
        {
            ApplyToleranceGroup.enabled(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableVATTaxButton</Name>
				<Source><![CDATA[
    /// <summary>
    /// CR-8793
    /// </summary>
    public void enableVATTaxButton()
    {
        if(SKS_LB_JournalARApplic.AccountType == LedgerJournalACType::Ledger)
        {
            SKS_BR_VATTaxForm.enabled(true);
        }
        else
        {
            SKS_BR_VATTaxForm.enabled(false);
        }
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>SKS_BR_BankTran</Name>
				<Methods>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        public void executeQuery()
        {
            SKS_BR_BankTran_ds.query().dataSourceTable(tableNum(SKS_BR_BankTran)).clearRanges();
            SKS_BR_BankTran_ds.query().dataSourceTable(tableNum(SKS_BR_BankTran)).addRange(fieldNum(SKS_BR_BankTran,RecId)).value(int642str(bankTransRecId));
            super();
        }

]]></Source>
					</Method>
					<Method>
						<Name>bankSum</Name>
						<Source><![CDATA[
        /// <summary>
        /// bankSum display method
        /// </summary>
        /// <returns>AmountCur</returns>
        [SysClientCacheDataMethodAttribute(true)]
        Display amountcur bankSum()
        {
            BankAccountTrans            accountTrans;
            SKS_LB_JournalARApplic      journalARApplic;
            changecompany(SKS_BR_Banktran.company())
            {
                select sum(AmountCur) from accountTrans
                    where accountTrans.SKS_BR_ManualReconciliationID == myGuid; //7653
                // If not posted /matched, do not get amount from journalARAppli table
                if(!sKS_BR_BankReconciliationTrans.parmMatched() || accountTrans.AmountCur == 0)// 7352
                {
                    select sum(TransactionAmount) from journalARApplic
                        where journalARApplic.SKS_BR_BankTran == bankTransRecId; //7653
                }
            }

            return accountTrans.AmountCur + journalARApplic.TransactionAmount;
        }

]]></Source>
					</Method>
					<Method>
						<Name>difference</Name>
						<Source><![CDATA[
        Display amountcur difference()
        {
            return PaymentAmount.realValue() - SKS_BR_BankTran_ds.bankSum();
        }

]]></Source>
					</Method>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        /// <summary>
        /// active method
        /// </summary>
        /// <returns>int</returns>
        public int active()
        {
            int ret;

            ret = super();

            BankTransSum.update();
            Difference.update();
            SKS_LB_JournalARApplic_SKS_AccountType.enter(); // 7440

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>SKS_LB_JournalARApplic</Name>
				<Methods>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        public int active()
        {
            int ret;

            ret = super();

            SKS_BR_InvoiceInquiry.enabled(SKS_LB_JournalARApplic.Invoice != ''?true:false);
            SKS_LB_JournalARApplic_SKS_Account.parmDataAreaId(SKS_LB_JournalARApplic.CustTransDataAreaId);//Bug#7255
            SKS_LB_JournalARApplic_SKS_AccountType.enter(); // 7440
            element.enableDisableRemainOnAcctBtn();

            if (SKS_LB_JournalARApplic.AccountType == LedgerJournalACType::Ledger)
            {
                currentMainAccountId = MainAccount::getMainAccountRecIdFromLedgerDimension(SKS_LB_JournalARApplic.LedgerDimension);
                previousMainAccountId = currentMainAccountId;
            }
            else
            {
                currentMainAccountId = 0;
                previousMainAccountId = 0;
            }
            //Sks_Bug_7535 --->
            //9657 CR -->
            boolean isOpenTransaction = false;
            str defaultTrxDescription = '';
            if(SKS_LB_JournalARApplic.CustTransOpenRecId || SKS_LB_JournalARApplic.VendTransOpenRecId)
            {
                isOpenTransaction = true;
                defaultTrxDescription = SKS_LB_JournalARApplic.AccountType == LedgerJournalACType::Cust ? SKS_PP_Setup::find().CustPaymentsDescription : SKS_PP_Setup::find().VendPaymentsDescription;
            }
            //9657 CR <--
            if(SKS_LB_JournalARApplic.Invoice == '' && !(isOpenTransaction && SKS_LB_JournalARApplic.Description == defaultTrxDescription)/*9657 CR*/)
            {
                SKS_LB_JournalARApplic_Description.enabled(true);
            }
            else
            {
                SKS_LB_JournalARApplic_Description.enabled(false);
            }
            SKS_LB_JournalARApplic_SKS_Invoice.enabled(SKS_LB_JournalARApplic.AccountType == LedgerJournalACType::Cust);
            //Sks_Bug_7535 <---
            // 7655 -->
            // CR-8793 -->
            if(sKS_BR_BankReconciliationTrans.parmMatched() == NoYes::No && sKS_BR_BankReconciliationTrans.parmBankTransVoucher() == '')
            {
                // CR-8793 <--
                if (SKS_LB_JournalARApplic.AccountType == LedgerJournalACType::Bank)  // 7626 // CR-9480
                {
                    AccountDimensionButtongroup.enabled(true);
                    SKS_LB_JournalARApplic_SKS_Invoice.enabled(false);
                    DiscAmount.enabled(false);
                    editDiscountTakenPercent.enabled(false);
                }
                else if (SKS_LB_JournalARApplic.AccountType == LedgerJournalACType::Cust || SKS_LB_JournalARApplic.AccountType == LedgerJournalACType::Vend) // CR-9480
                {
                    AccountDimensionButtongroup.enabled(true);
                    SKS_LB_JournalARApplic_SKS_Invoice.enabled(true);
                    SKS_LB_JournalARApplic_SKS_Invoice.allowEdit(true);
                    DiscAmount.enabled(true);
                    editDiscountTakenPercent.enabled(true);
                }
                else
                {
                    AccountDimensionButtongroup.enabled(false);
                    SKS_LB_JournalARApplic_SKS_Invoice.enabled(false);
                    DiscAmount.enabled(false);
                    editDiscountTakenPercent.enabled(false);
                    // CR-8793 -->
                }

            }
            else
            {
                element.enableButtons(false);
            }
            //  vvv 7528 vvv
            RemainOnAcctBtn.enabled(Difference.realValue() != 0.0); // 7528 - Item 2: Remainder on Acct Button
            FullSettlementGroup.enabled((SKS_LB_JournalARApplic.CustTransOpenRecId !=  0 && SKS_LB_JournalARApplic.AccountType == LedgerJournalACType::Cust)
                ||
                (SKS_LB_JournalARApplic.VendTransOpenRecId !=  0 && SKS_LB_JournalARApplic.AccountType == LedgerJournalACType::Vend)); // 7528 - Item 3: Disable Full Settlement & Remove Settlement when there is no invoice
            

            //  ^^^ 7528 ^^^

            // CR-8793 <--
            // 7655 <--
            SKS_BR_AlreadyMarkedInquiry.enabled(SKS_LB_JournalARApplic.AlreadyMarked); // 8778 CR
            element.enableApplyTolerance(); // CR-8779
            element.enableVATTaxButton(); // CR-8793

            boolean isIHBBank;
            //SKS_Bug_21409--->
            changecompany(SKS_BR_BankTran.company())
            {
                if(SKS_PP_Bank::findIHBBank(SKS_BR_BankTran.AccountId)) //SKS_Bug_21409
                {
                    isIHBBank = true;
                }
            }
            //SKS_Bug_21409<---

            // SKS_10238 CR -->
            if(SKS_LB_JournalARApplic.AccountType == LedgerJournalACType::Bank &&
                SKS_LB_JournalARApplic.LedgerDimension)
            {
                if(SKS_PP_Bank::findIHBBank(LedgerDynamicAccountHelper::getAccountNumberFromDynamicAccount(SKS_LB_JournalARApplic.LedgerDimension), SKS_LB_JournalARApplic.CustTransDataAreaId))
                {
                    SKS_IHB_IntercoAccount.enabled(true);
                }
                else if(isIHBBank) //SKS_Bug_21409
                {
                    SKS_IHB_IntercoAccount.enabled(true);
                }
                else
                {
                    SKS_IHB_IntercoAccount.enabled(false);
                }
            }
            else if(isIHBBank) //SKS_Bug_21409
            {
                SKS_IHB_IntercoAccount.enabled(true);
            }
            else
            {
                SKS_IHB_IntercoAccount.enabled(false);
            }
            // SKS_10238 CR <--

            if(SKS_LB_JournalARApplic.AccountType == LedgerJournalACType::Cust)
            {
                BankRecCustPostingProfile.allowEdit(true);
                SKS_LB_JournalARApplic_BankRecPrepayment.allowEdit(true);
            }
            else
            {
                BankRecCustPostingProfile.allowEdit(false);
                SKS_LB_JournalARApplic_BankRecPrepayment.allowEdit(false);
                BankRecCustPostingProfile.visible(false);
                SKS_LB_JournalARApplic.BankRecCustPostingProfile = '';
            }

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        public void write()
        {
            DimensionAttributeValueCombination  dAVC;
            SKS_LB_JournalARApplic             journalARApplic;

            // 7572 -->
            if(SKS_LB_JournalARApplic.DefaultDimension == 0) //8655
            {
                if(SKS_LB_JournalARApplic.AccountType == LedgerJournalACType::Cust || SKS_LB_JournalARApplic.AccountType == LedgerJournalACType::Vend || SKS_LB_JournalARApplic.AccountType == LedgerJournalACType::Bank) // 7626 //8655
                {
                    SKS_LB_JournalARApplic.DefaultDimension = SKS_LB_JournalARApplic::getCustDefaultDimension(SKS_LB_JournalARApplic);
                }
                else
                {
                    select firstonly DisplayValue from dAVC
                        where dAVC.RecId == SKS_LB_JournalARApplic.LedgerDimension;

                    SKS_LB_JournalARApplic.DefaultDimension = SKS_LB_JournalARApplic::getAccountDefaultDimension(dAVC.DisplayValue,SKS_LB_JournalARApplic.CustTransDataAreaId,SKS_LB_JournalARApplic.AccountType);
                }
            }
            // 7572 <--
            if(SKS_LB_JournalARApplic.DefaultBankDimension == 0) // 8655
            {
                SKS_LB_JournalARApplic.DefaultBankDimension = SKS_LB_JournalARApplic::getDefaultBankAccount(SKS_LB_JournalARApplic.findSKS_BR_BankTran()); //8655
            }

            if (!SKS_LB_JournalARApplic.RecId)
            {
                BankTransSum.realValue(SKS_BR_BankTran_ds.bankSum());
                Difference.realValue(SKS_BR_BankTran_ds.difference());
            }
            else
            {
                select firstonly TransactionAmount,RecId from journalARApplic
                    where journalARApplic.RecId == SKS_LB_JournalARApplic.RecId;

                if (origTranAmount!= SKS_LB_JournalARApplic.TransactionAmount)
                {
                    BankTransSum.realValue(SKS_BR_BankTran_ds.bankSum());
                    Difference.realValue(SKS_BR_BankTran_ds.difference());
                }
            }

            super();
            //SKS_Bug_21409--->
            if(!SKS_PP_Bank::findIHBBank(LedgerDynamicAccountHelper::getAccountNumberFromDynamicAccount(SKS_LB_JournalARApplic.LedgerDimension), SKS_LB_JournalARApplic.CustTransDataAreaId))
            {
                SKS_PP_Bank     lSKS_PP_Bank;

                changecompany(SKS_BR_BankTran.company())
                {
                    lSKS_PP_Bank = SKS_PP_Bank::findIHBBank(SKS_BR_BankTran.AccountId);
                }

                if(lSKS_PP_Bank.SKS_IHBLinkedinhousebankcompany && SKS_LB_JournalARApplic.IHBIntercoLedgerDimension == 0)
                {
                    SKS_LB_JournalARApplic.IHBIntercoCompany = lSKS_PP_Bank.SKS_IHBLinkedinhousebankcompany;
                    error("@SKS:SKGIHBDetails");
                }
            }
            //SKS_Bug_21409<---

            // 8764 CR -->
            if(SKS_LB_JournalARApplic.AccountType == LedgerJournalACType::Cust)
            {
                SKS_LB_JournalARApplic::customerBankTransUpdate(SKS_LB_JournalARApplic);
            }
            // 8764 CR <--
        }

]]></Source>
					</Method>
					<Method>
						<Name>initValue</Name>
						<Source><![CDATA[
        public void initValue()
        {

            super();

            if (CustCompany.valueStr())
            {
                SKS_LB_JournalARApplic.CustTransDataAreaId = SKS_BR_BankTran.CustCompany;
            }
            else
            {
                //SKS_LB_JournalARApplic.CustTransDataAreaId = BankAccountTable::find(SKS_BR_BankReconciliationTrans.parmCompanyBankAccountId()).dataAreaId;
                SKS_LB_JournalARApplic.CustTransDataAreaId = SKS_BR_BankTran.company();   //SKS_VSTS_14397

            }
            SKS_BR_BankTran.reread(); // SKS_Bug_9628
            //SKS_Bug 9414: New lines should not be created with a customer selected
            if (SKS_BR_BankTran.CustAccount && SKS_BR_BankTran.CustCompany)//SKS_Bug_8692
            {
                //SKS_Bug_8692 -->
                changecompany(SKS_BR_BankTran.CustCompany)
                {
                    SKS_LB_JournalARApplic.LedgerDimension = LedgerDynamicAccountHelper::getDynamicAccountFromAccountNumber(SKS_BR_BankTran.CustAccount, LedgerJournalACType::Cust);
                }
                //SKS_Bug_8692 <--
            }

            SKS_LB_JournalARApplic.AccountType = LedgerJournalACType::Cust;
        }

]]></Source>
					</Method>
					<Method>
						<Name>delete</Name>
						<Source><![CDATA[
        /// <summary>
        /// Delete record
        /// </summary>
        public void delete()
        {
            super();

            // Last index will be 0 on the last record of Delete for current line
            // or on the last line of mutli-select delete.
            if(SKS_LB_JournalARApplic_ds.recordsMarked().lastIndex() == 0)
            {
                SKS_BR_BankTran_ds.refresh();
                BankTransSum.realValue(SKS_BR_BankTran_ds.bankSum());
                Difference.realValue(SKS_BR_BankTran_ds.difference());
                SKS_LB_JournalARApplic_ds.refresh();
                SKS_BR_BankTran_ds.research(true);// TFS 7264
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        /// <summary>
        /// 7446
        /// </summary>
        public void executeQuery()
        {
            this.query().dataSourceName(identifierStr(SKS_LB_JournalARApplic)).addSortField(fieldNum(SKS_LB_JournalARApplic, RecId),SortOrder::Ascending);//8764 CR
            this.query().dataSourceName(identifierStr(SKS_LB_JournalARApplic)).addSortField(fieldNum(SKS_LB_JournalARApplic, InvoiceDate),SortOrder::Ascending); //7486

            super();
        }

]]></Source>
					</Method>
					<Method>
						<Name>UpdateStatus</Name>
						<Source><![CDATA[
        /// <summary>
        /// UpdateStatus method
        /// </summary>
        public void UpdateStatus()
        {
            // vvv 16743 vvv
            Amount locJournalNetAmount = SKS_LB_JournalARApplic.TransactionAmount < 0 
                ? SKS_LB_JournalARApplic.TransactionAmount - SKS_LB_JournalARApplic.discApplyAmount
                : SKS_LB_JournalARApplic.TransactionAmount + SKS_LB_JournalARApplic.discApplyAmount;
            Amount locDifferenceBetweenNetAmountAndSettlementAmount = locJournalNetAmount 
                    - CustTransOpen::find(sks_lb_journalarapplic.custTransOpenRecid).amountCur;
            // ^^^ 16743 ^^^
            if((SKS_LB_JournalARApplic.TransactionAmount + SKS_LB_JournalARApplic.discApplyAmount) != 0 )
            {
                if(abs(locDifferenceBetweenNetAmountAndSettlementAmount) <= abs(CustParameters::findByCompany(curext()).MaxMSTOverUnder)) // <<< 16743
                {
                    SKS_LB_JournalARApplic.status = SKS_BR_Status::Full;
                }
                else
                {
                    SKS_LB_JournalARApplic.status = SKS_BR_Status::partial;
                }
            }
            else
            {
                SKS_LB_JournalARApplic.status = SKS_BR_Status::None;//Set status to none
            }
        }

]]></Source>
					</Method>
				</Methods>
				<Fields>
					<Field>
						<DataField>AccountType</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            /// <summary>
            /// modified method
            /// </summary>
            public void modified()
            {
                super();

                if(SKS_LB_JournalARApplic.accountType != LedgerJournalACType::cust)
                {
                    SKS_LB_JournalARApplic.BankRecCustPostingProfile = '';
                    SKS_LB_JournalARApplic.BankRecPrepayment = NoYes::No;
                    BankRecCustPostingProfile.allowEdit(false);
                    SKS_LB_JournalARApplic_BankRecPrepayment.allowEdit(false);
                    BankRecCustPostingProfile.visible(false);
                }
                else
                {
                    BankRecCustPostingProfile.allowEdit(true);
                    SKS_LB_JournalARApplic_BankRecPrepayment.allowEdit(true);
                    BankRecCustPostingProfile.visible(true);
                }
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>DiscApplyAmount</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            /// <summary>
            /// modified method
            /// </summary>
            public void modified()
            {
                super();

                SKS_BR_BankTran_ds.refresh();
                BankTransSum.update();
                Difference.update();
                SKS_LB_journalARApplic_ds.refresh();
                SKS_LB_journalARApplic_ds.research(true);
            }

]]></Source>
							</Method>
							<Method>
								<Name>validate</Name>
								<Source><![CDATA[
            /// <summary>
            /// validate method
            /// </summary>
            /// <returns>boolean</returns>
            public boolean validate()
            {
                boolean ret;

                ret = super();

                if(SKS_LB_JournalARApplic.DiscApplyAmount != 0)
                {
                    if(CustTransOpen::find(SKS_LB_JournalARApplic.CustTransOpenRecId).UseCashDisc == UseCashDisc::Never)
                    {
                        error(strFmt("@SKS5999", SKS_LB_JournalARApplic.Invoice));
                        SKS_LB_JournalARApplic.DiscApplyAmount = 0;
                    }
                }

                return ret;
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>DiscountTakenPercent</DataField>
						<Methods>
							<Method>
								<Name>validate</Name>
								<Source><![CDATA[
            /// <summary>
            /// validate method
            /// </summary>
            /// <returns>boolean</returns>
            public boolean validate()
            {
                boolean ret;

                ret = super();

                if(SKS_LB_JournalARApplic.DiscountTakenPercent != 0)
                {
                    if(CustTransOpen::find(SKS_LB_JournalARApplic.CustTransOpenRecId).UseCashDisc == UseCashDisc::Never)
                    {
                        error(strFmt("@SKS4162", SKS_LB_JournalARApplic.invoice));
                        SKS_LB_JournalARApplic.DiscountTakenPercent = 0;
                    }
                }

                return ret;
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>FullSettlement</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            /// <summary>
            /// modified method
            /// </summary>
            public void modified()
            {
                super();

                SKS_BR_BankTran_ds.refresh();
                SKS_BR_BankTran_ds.research();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>Invoice</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                boolean lbIsMarked = false;
                DimensionAttributeValueCombination  dAVC; //SKS_Bug_12034

                super();
                //SKS_Bug_12034 -->
                if(SKS_LB_JournalARApplic.AccountType == LedgerJournalACType::Cust || SKS_LB_JournalARApplic.AccountType == LedgerJournalACType::Vend || SKS_LB_JournalARApplic.AccountType == LedgerJournalACType::Bank) // 7626 //8655
                {
                    SKS_LB_JournalARApplic.DefaultDimension = SKS_LB_JournalARApplic::getCustDefaultDimension(SKS_LB_JournalARApplic);
                }
                else
                {
                    select firstonly DisplayValue from dAVC
                        where dAVC.RecId == SKS_LB_JournalARApplic.LedgerDimension;

                    SKS_LB_JournalARApplic.DefaultDimension = SKS_LB_JournalARApplic::getAccountDefaultDimension(dAVC.DisplayValue,SKS_LB_JournalARApplic.CustTransDataAreaId,SKS_LB_JournalARApplic.AccountType);
                }
                //SKS_Bug_12034 <--
                changeCompany(SKS_LB_JournalARApplic.CustTransDataAreaId)
                {
                    // CR-9480 -->
                    if(SKS_LB_JournalARApplic_SKS_AccountType.valueStr() == enum2Str(LedgerJournalACType::Cust))
                    {
                        // CR-9480 <--
                        if(!invoicelookup && SKS_LB_JournalARApplic_SKS_Invoice.valueStr() != '')
                        {
                            lbIsMarked = SKS_BR_GLProcessing_Transactionform::isMarkedTransaction(SKS_LB_JournalARApplic,  CustTrans::findFromInvoice(SKS_LB_JournalARApplic_SKS_Invoice.valueStr()).RecId);
                        }
                        else if(invoicelookup)
                        {
                            lbIsMarked = SKS_BR_GLProcessing_Transactionform::isMarkedTransaction(SKS_LB_JournalARApplic, invoicelookup.parmSelectionRecord().RecId);
                            // CR-9480 -->
                        }
                    }
                    else
                    {
                        if(!invoicelookup && SKS_LB_JournalARApplic_SKS_Invoice.valueStr() != '')
                        {
                            lbIsMarked = SKS_BR_GLProcessing_Transactionform::isMarkedVendTransaction(SKS_LB_JournalARApplic,  SKS_LB_JournalARApplic::findFromVendInvoice(SKS_LB_JournalARApplic_SKS_Invoice.valueStr()).RecId);
                        }
                        else if(invoicelookup)
                        {
                            lbIsMarked = SKS_BR_GLProcessing_Transactionform::isMarkedVendTransaction(SKS_LB_JournalARApplic, invoicelookup.parmSelectionRecord().RecId);
                        }
                    }
                    // CR-9480 <--
                    if (lbIsMarked)
                    {
                        SKS_LB_JournalARApplic.AlreadyMarked = NoYes::Yes;
                    }
                    else
                    {
                        SKS_LB_JournalARApplic.AlreadyMarked = NoYes::No;
                    }
                }
                SKS_LB_JournalARApplic.FullSettlement = NoYes::No;
                invoicelookup  = null; // 7456

                if (SKS_LB_JournalARApplic.Invoice == '')
                {
                    SKS_LB_JournalARApplic_SKS_InvoiceAmount.realValue(0.00);
                    InvoiceBalance.realValue(0.00);
                    SettlementAvail.realValue(0.00);
                    DiscountAvail.realValue(0.00);
                    DiscountAvailPercent.realValue(0.00);
                    //CR-9657 -->
                    SKS_LB_JournalARApplic.Description = '';
                }
                else
                {
                    str defaultDescription = SKS_LB_JournalARApplic.AccountType == LedgerJournalACType::Cust ? SKS_PP_Setup::find().CustPaymentsDescription : SKS_PP_Setup::find().VendPaymentsDescription;
                    SKS_LB_JournalARApplic.Description = defaultDescription;
                }
                //CR-9657 <--
                SKS_LB_JournalARApplic_Description.enabled(SKS_LB_JournalARApplic_SKS_Invoice.valueStr() !='' ? false : true);//Sks_Bug_7535
            }

]]></Source>
							</Method>
							<Method>
								<Name>lookup</Name>
								<Source><![CDATA[
            public void lookup(FormControl _formControl, str _filterStr)
            {
                invoicelookup = null;
                // CR-9480 -->
                if(SKS_LB_JournalARApplic_SKS_AccountType.valueStr() == enum2Str(LedgerJournalACType::Cust))
                {
                    // CR-9480 <--
                    invoicelookup = SKS_LB_JournalARApplic::lookupInvoiceId(_formControl,SKS_LB_JournalARApplic);
                    // CR-9480 -->
                }
                else
                {
                    invoicelookup = SKS_LB_JournalARApplic::lookupVendorInvoiceId(_formControl,SKS_LB_JournalARApplic);
                }
                // CR-9480 <--
            }

]]></Source>
							</Method>
							<Method>
								<Name>validate</Name>
								<Source><![CDATA[
            /// <summary>
            /// validate method
            /// </summary>
            /// <returns>boolean</returns>
            public boolean validate()
            {
                boolean ret;

                ret = super();

                if(ret)
                {
                    changecompany(SKS_LB_JournalARApplic.CustTransDataAreaId) // 7456
                    {
                        // CR-9480 -->
                        if(SKS_LB_JournalARApplic_SKS_AccountType.valueStr() == enum2Str(LedgerJournalACType::Cust))
                        {
                            // CR-9480 <--
                            if(CustTrans::findFromInvoice(SKS_LB_JournalARApplic_SKS_Invoice.valueStr()).RecId == 0)
                            {
                                ret = false;
                            }
                            // CR-9480 -->
                        }
                        else
                        {
                            if(SKS_LB_JournalARApplic::findFromVendInvoice(SKS_LB_JournalARApplic_SKS_Invoice.valueStr()).RecId == 0)
                            {
                                ret = false;
                            }
                        }
                        // CR-9480 <--
                    }
                }

                return ret;
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>LedgerDimension</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            /// <summary>
            /// Runs required logic on modification of main account field.
            /// </summary>
            /// <remarks>
            /// Validates whether the current reason code is appropriate for the new main account
            /// selected. If not, the reason code and comment fields are cleared.
            /// </remarks>
            public void modified()
            {
                LedgerJournalACType     ledgerJournalACType;
                boolean                 hasAccountChanged;
                SKS_PP_Bank             sKS_PP_Bank; // SKS_10238 CR

                if (SKS_LB_JournalARApplic.AccountType == ledgerJournalACType::Ledger)
                {
                    hasAccountChanged = currentMainAccountId != previousMainAccountId;

                    previousMainAccountId = currentMainAccountId;
                }
                else
                {
                    // force a non-ledger account change because there are no dimensions
                    hasAccountChanged = true;
                }

                if (hasAccountChanged)
                {
                    // SKS_18691
                    DimensionAttributeValueCombination  dAVC;
                    //SKS_LB_JournalARApplic             journalARApplic;

                    if(SKS_LB_JournalARApplic.AccountType == LedgerJournalACType::Cust || SKS_LB_JournalARApplic.AccountType == LedgerJournalACType::Vend || SKS_LB_JournalARApplic.AccountType == LedgerJournalACType::Bank) // 7626 //8655
                    {
                        SKS_LB_JournalARApplic.DefaultDimension = SKS_LB_JournalARApplic::getCustDefaultDimension(SKS_LB_JournalARApplic);
                    }
                    else
                    {
                        select firstonly DisplayValue from dAVC
                            where dAVC.RecId == SKS_LB_JournalARApplic.LedgerDimension;

                        SKS_LB_JournalARApplic.DefaultDimension = SKS_LB_JournalARApplic::getAccountDefaultDimension(dAVC.DisplayValue,SKS_LB_JournalARApplic.CustTransDataAreaId,SKS_LB_JournalARApplic.AccountType);
                    }
                    // SKS_18691

                    //This call needs to be made to update the RemittanceLocation reference group field which is modified in the ledgerJournalEngine.accountNumModified() method.
                    SKS_LB_JournalARApplic_ds.rereadReferenceDataSources();

                }

                SKS_LB_JournalARApplic_ds.refresh();


                if (this.getValue())
                {
                    ledgerJournalACType = SKS_LB_JournalARApplic_ds.object(fieldNum(SKS_LB_JournalARApplic, AccountType)).getValue();


                }
                SKS_LB_JournalARApplic_ds.rereadReferenceDataSources();
                // SKS_10238 CR -->
                if(SKS_LB_JournalARApplic.AccountType == ledgerJournalACType::Bank &&
                    SKS_LB_JournalARApplic.LedgerDimension)
                {
                    sKS_PP_Bank = SKS_PP_Bank::findIHBBank(LedgerDynamicAccountHelper::getAccountNumberFromDynamicAccount(SKS_LB_JournalARApplic.LedgerDimension), SKS_LB_JournalARApplic.CustTransDataAreaId);
                    if(sKS_PP_Bank)
                    {
                        SKS_LB_JournalARApplic.IHBIntercoCompany = sKS_PP_Bank.SKS_IHBLinkedinhousebankcompany;
                    }
                    else
                    {
                        SKS_LB_JournalARApplic.IHBIntercoCompany = '';
                    }
                }
                else
                {
                    SKS_LB_JournalARApplic.IHBIntercoCompany = '';
                }
                SKS_LB_JournalARApplic.IHBIntercoLedgerDimension = 0;
                // SKS_10238 CR <--
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>TaxCode</DataField>
						<Methods>
							<Method>
								<Name>lookup</Name>
								<Source><![CDATA[
            /// <summary>
            /// Lookup method
            /// </summary>
            /// <param name = "_formControl">_formControl</param>
            /// <param name = "_filterStr">_filterStr</param>
            public void lookup(FormControl _formControl, str _filterStr)
            {
                //<Issue21228>
                Query query = new Query();
                QueryBuildDataSource qbdsTaxTable, qbdsTaxAccountGroup, qbdsDimTax, qbdsDimJournal;
                SysTableLookup sysTableLookup;
                
                if(SKS_LB_JournalARApplic.AccountType != LedgerJournalACType::Ledger)
                {                
                    super(_formControl, _filterStr);
                }
                else
                {
                    sysTableLookup = SysTableLookup::newParameters(tableNum(TaxTable), _formControl);
                    qbdsTaxTable = query.addDataSource(tableNum(TaxTable));

                    qbdsTaxAccountGroup = qbdsTaxTable.addDataSource(tableNum(TaxLedgerAccountGroup));
                    qbdsTaxAccountGroup.joinMode(JoinMode::InnerJoin);
                    qbdsTaxAccountGroup.relations(true);

                    qbdsDimTax = qbdsTaxAccountGroup.addDataSource(tableNum(DimensionAttributeValueCombination));
                    qbdsDimTax.joinMode(JoinMode::InnerJoin);
                    qbdsDimTax.relations(false);
                    qbdsDimTax.addLink(fieldNum(DimensionAttributeValueCombination, RecId), fieldNum(TaxLedgerAccountGroup, TaxReportLedgerDimension));

                    qbdsDimJournal = qbdsDimTax.addDataSource(tableNum(DimensionAttributeValueCombination));
                    qbdsDimJournal.joinMode(JoinMode::InnerJoin);
                    qbdsDimJournal.relations(false);
                    qbdsDimJournal.addLink(fieldNum(DimensionAttributeValueCombination, MainAccount), fieldNum(DimensionAttributeValueCombination, MainAccount));

                    qbdsDimJournal.addRange(fieldNum(DimensionAttributeValueCombination, RecId)).value(SysQuery::value(SKS_LB_JournalARApplic.LedgerDimension));

                    sysTableLookup.addLookupField(fieldNum(TaxTable, TaxCode));
                    sysTableLookup.addLookupField(fieldNum(TaxTable, TaxName));

                    sysTableLookup.parmQuery(query);
                    sysTableLookup.performFormLookup();
                }
                //</Issue21228>
            }

]]></Source>
							</Method>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            /// <summary>
            /// Modified method
            /// </summary>
            public void modified()
            {
                super();

                //<Issue21228>
                if(SKS_LB_JournalARApplic.TaxCode && SKS_LB_JournalARApplic.AccountType == LedgerJournalACType::Ledger)
                {
                    if(!SKS_LB_JournalARApplic::validateTaxCode(SKS_LB_JournalARApplic))
                    {
                        throw Error('@SKS:MainAccountInvalidatesSalesTaxCode');
                    }
                }
                //</Issue21228>
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
				</Fields>
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>PostBtn</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            SKS_BR_GLProcessing_transactionform locSKS_BR_GLProcessing;
            boolean                             isPosted;
            boolean                             isMapped = true;
            SKS_PP_Bank     sKS_PP_Bank;
            SKS_BR_BankTran     locSKS_BR_BankTran;
            LedgerJournalName   locLedgerJournalName;

            super();
            //SKS_Bug_21409--->
            changecompany(SKS_BR_BankTran.company())
            {
                sKS_PP_Bank = SKS_PP_Bank::findIHBBank(SKS_BR_BankTran.AccountId);
            }

            if(sKS_PP_Bank.SKS_IHBLinkedinhousebankcompany && SKS_LB_JournalARApplic.IHBIntercoLedgerDimension == 0)
            {
                throw error("@SKS:SKGIHBDetails");
            }
            //SKS_Bug_21409<---
            locSKS_BR_GLProcessing = new SKS_BR_GLProcessing_transactionform();

            select firstonly locSKS_BR_BankTran
                where locSKS_BR_BankTran.RecId == bankTransRecId;

            locLedgerJournalName = LedgerJournalName::find(locSKS_BR_BankTran.ManualJournalName);

            boolean isJouranlWFEnabled = false;

            if((locLedgerJournalName.ApproveActive == NoYes::Yes || locLedgerJournalName.WorkflowApproval == NoYes::Yes))
            {
                isJouranlWFEnabled = true;
            }


            if(SKS_PP_Setup::find().BRAutoPostManualEntries && !isJouranlWFEnabled)
            {
                // <-- 10248
                isPosted = locSKS_BR_GLProcessing.PostGL(bankTransRecId, sKS_BR_BankReconciliationTrans, true);

                if(isPosted)
                {
                    if(sKS_BR_BankReconciliationTrans.parmDataAreaId() != '') // 10248 -->
                    {
                        changecompany(sKS_BR_BankReconciliationTrans.parmDataAreaId())
                        {
                            isMapped = locSKS_BR_GLProcessing.MatchExistingBankTransactions(sKS_BR_BankReconciliationTrans);
                        }
                    }
                }

                if(isMapped && isPosted)
                {
                    //element.unmarkInUse(bankTransRecId); //SKS_BR_BlockInUse
                    //element.getNextRecordInGrid();
                }
                else
                {
                    info("@SKS:SKGBRNoJournalCreated");
                }
            }
            else
            {
                isPosted = locSKS_BR_GLProcessing.PostGL(bankTransRecId, sKS_BR_BankReconciliationTrans, true);

                if(isPosted)
                {
                    if(sKS_BR_BankReconciliationTrans.parmDataAreaId() != '') // 10248 -->
                    {
                        changecompany(sKS_BR_BankReconciliationTrans.parmDataAreaId())
                        {
                            isMapped = locSKS_BR_GLProcessing.MatchExistingBankTransactions(sKS_BR_BankReconciliationTrans);
                        }
                    }
                }

                //element.unmarkInUse(bankTransRecId); //SKS_BR_BlockInUse
                //element.getNextRecordInGrid();
            }

            element.dataSource().reread();
            element.dataSource().refresh();
            element.dataSource().research(true);
            SKS_BR_BankTran_ds.reread();
            SKS_BR_BankTran_ds.refresh();
            SKS_BR_BankTran_ds.research(true);

            //BankAccountTrans_ds.reread();
            //BankAccountTrans_ds.refresh();
            //BankAccountTrans_ds.research(true);

            element.refreshCallerForm(origPosition);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>NextAvailableBtn</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            super();

            //element.getNextRecordInGrid();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>PRAHeader</Name>
				<Type>TabPage</Type>
				<Methods>
					<Method>
						<Name>expand</Name>
						<Source><![CDATA[
        /// <summary>
        /// expand method
        /// </summary>
        public void expand()
        {
            super();
            SKS_LB_JournalARApplic_SKS_AccountType.enter(); // 7440
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AnalyzeButton</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// clicked method
        /// </summary>
        public void clicked()
        {
            Args args = new Args();
            SKS_BR_NoteType SKS_BR_NoteType;

            args.record(SKS_BR_BankTran);
            args.parmEnum(str2enum(SKS_BR_NoteType,NoteType.valueStr()));
            args.parm(Search.valueStr());
            SKS_BR_AnalyzeNCreateJournal::main(args);

            super();

            SKS_LB_JournalARApplic_ds.refresh();
            SKS_LB_JournalARApplic_ds.research();

            SKS_BR_BankTran_ds.research(true); // TFS 7264
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>NoteType</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();

            if (NoteType.valueStr() == enum2str(SKS_BR_NoteType::Original))
            {
                NoteOrig.visible(true);
                NoteUser.visible(false);
                Search.visible(false);
            }
            else if (NoteType.valueStr() == enum2str(SKS_BR_NoteType::User))
            {
                NoteOrig.visible(false);
                NoteUser.visible(true);
                Search.visible(false);
            }
            else // Search
            {
                NoteOrig.visible(false);
                NoteUser.visible(false);
                Search.visible(true);
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>LoadOpenTransBtn</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            MultiSelectionHelper                helper;
            SKS_LB_JournalARApplic              journalARApplic;
            container                           companies;
            container                           custAccounts;
            int                                 conResult;
            int                                 conComp;
            int                                 conCount;
            int                                 compCount;
            DimensionAttributeValueCombination  davccust;
            // CR-9480 -->
            DimensionAttributeValueCombination  davcVend;
            container                           vendAccounts;
            // CR-9480 <--

            super();
            concount = 1;
            compcount = 1;

            helper = MultiSelectionHelper::construct();
            helper.parmDatasource(SKS_LB_JournalARApplic_ds);
            journalARApplic = helper.getFirst();

            while (journalARApplic.RecId != 0)
            {
                if (companies!=conNull())
                {
                    conResult = conFind(companies,journalARApplic.CustTransDataAreaId);
                }
                if (!conResult)
                {
                    companies = conins(companies,conCount,journalARApplic.CustTransDataAreaId);
                    conCount++;
                }
                //Inserting the selected customer accounts into Container
                if (journalARApplic.AccountType == LedgerJournalACType::Cust)
                {
                    select firstonly displayvalue
                        from davcCust where davcCust.RecId == journalARApplic.LedgerDimension;

                    concomp = conFind(custAccounts,davcCust.DisplayValue);

                    if (!concomp)
                    {
                        custAccounts = conins(custAccounts,compCount,davcCust.DisplayValue);
                        compCount++;
                    }
                }
                // CR-9480 -->
                else if(journalARApplic.AccountType == LedgerJournalACType::Vend)
                {
                    select firstonly displayvalue
                        from davcVend where davcVend.RecId == journalARApplic.LedgerDimension;

                    concomp = conFind(vendAccounts,davcVend.DisplayValue);

                    if (!concomp)
                    {
                        vendAccounts = conins(vendAccounts,compCount,davcVend.DisplayValue);
                        compCount++;
                    }
                }
                // CR-9480 <--
                journalARApplic = helper.getNext();
            }
            // CR-9480 -->
            if(vendAccounts)
            {
                locSKS_BR_GLProcessing_TransactionForm.loadVendOpenTransactions(bankTransRecId, companies, vendAccounts);
            }
            if(custAccounts)
            {
                // CR-9480 <--
                locSKS_BR_GLProcessing_TransactionForm.LoadOpenTransactions(bankTransRecId, companies, custAccounts);
            }
            // CR-9480
            SKS_LB_JournalARApplic::checkIsAlreadyMarked(bankTransRecId); // CR-9480
            SKS_LB_JournalARApplic_ds.refresh();
            SKS_LB_JournalARApplic_ds.research();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>RemainOnAcctBtn</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// clicked method
        /// </summary>
        public void clicked()
        {
            real    remainAmt;
            SKS_LB_JournalARApplic  locJournalARApplic;
            boolean recFound = false;
            super();

            remainAmt = PaymentAmount.realValue() - SKS_BR_BankTran_ds.bankSum();

            if(remainAmt != 0)
            {
                if(SKS_LB_JournalARApplic.LedgerDimension != 0)
                {
                    if(SKS_LB_JournalARApplic.CustTransRecId == 0 && SKS_LB_JournalARApplic.VendTransRecId == 0) // CR-9480
                    {
                        SKS_LB_JournalARApplic.transactionAmount += remainAmt;
                    }
                    else
                    {
                        // CR-9480 -->
                        if(SKS_LB_JournalARApplic.AccountType == LedgerJournalACType::Vend && SKS_LB_JournalARApplic.VendTransRecId)
                        {
                            ttsbegin;
                            select firstonly forupdate locJournalARApplic where locJournalARApplic.SKS_BR_BankTran == SKS_LB_JournalARApplic.SKS_BR_BankTran && locJournalARApplic.VendTransRecId == 0
                                && locJournalARApplic.accounttype == LedgerJournalACType::Vend;

                            while(locJournalARApplic && recFound == false)
                            {
                                if(VendTable::findByLedgerDimension(locJournalARApplic.LedgerDimension).AccountNum != VendTable::findByLedgerDimension(SKS_LB_JournalARApplic.LedgerDimension).AccountNum)
                                {
                                    next locJournalARApplic;
                                }
                                else
                                {
                                    recFound = true;
                                }
                            }
                        }
                        else
                        {
                            // CR-9480 <--
                            ttsbegin;
                            select firstonly forupdate locJournalARApplic where locJournalARApplic.SKS_BR_BankTran == SKS_LB_JournalARApplic.SKS_BR_BankTran && locJournalARApplic.CustTransRecid == 0
                                && locJournalARApplic.accounttype == LedgerJournalACType::Cust;

                            while(locJournalARApplic && recFound == false)
                            {
                                if(CustTable::findByLedgerDimension(locJournalARApplic.LedgerDimension).AccountNum != CustTable::findByLedgerDimension(SKS_LB_JournalARApplic.LedgerDimension).AccountNum)
                                {
                                    next locJournalARApplic;
                                }
                                else
                                {
                                    recFound = true;
                                }
                                // CR-9480
                            }
                        }

                        if(locJournalARApplic)
                        {
                            locJournalARApplic.TransactionAmount += remainAmt;
                            locJournalARApplic.update();
                        }
                        else
                        {
                            locJournalARApplic.CustTransDataAreaID = SKS_LB_JournalARApplic.CustTransDataAreaId;
                            locJournalARApplic.AccountType = SKS_LB_JournalARApplic.AccountType;
                            locJournalARApplic.LedgerDimension = SKS_LB_JournalARApplic.LedgerDimension;
                            locJournalARApplic.SKS_BR_BankTran = SKS_LB_JournalARApplic.SKS_BR_BankTran;
                            locJournalARApplic.TransactionAmount = remainAmt;
                            locJournalARApplic.DefaultDimension = SKS_LB_JournalARApplic::getCustDefaultDimension(locJournalARApplic); // 7572
                            locJournalARApplic.DefaultBankDimension = SKS_LB_JournalARApplic::getDefaultBankAccount(locJournalARApplic.findSKS_BR_BankTran());//8655
                            locJournalARApplic.insert();
                        }

                        ttscommit;
                    }
                    SKS_LB_JournalARApplic_ds.write();
                    
                    SKS_BR_BankTran_ds.refresh();
                    BankTransSum.update();
                    Difference.update();
                    SKS_LB_journalARApplic_ds.refresh();
                    SKS_LB_journalARApplic_ds.research(true);
                }
                else
                {
                    // CR-9480 -->
                    if(SKS_LB_JournalARApplic.AccountType == LedgerJournalACType::Vend)
                    {
                        info("@SKS:SKGInfoVendorNotFound");
                    }
                    else
                    {
                        // CR-9480 <--
                        info("@SKS:SKGInfoCustNotFound");
                    }
                    // CR-9480
                }
            }
            else
            {
                Info("@SKS:SKGInfoRemainingAmtNull");
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ApplyTolerance</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// CR-8779
        /// </summary>
        public void clicked()
        {
            SKS_LB_JournalARApplic          locJournalARApplic;
            LedgerDimensionDefaultAccount   ledgerDimensionDefaultAccount;
            CustParameters                  custParameters;
            // CR-9480 -->
            VendParameters                  vendParameters;
            SKS_LB_JournalARApplic          journalARApplic;
            AmountMST                       maxMSTDiff;
            AmountMST                       maxMSTOverUnder;


            // If both customer and vendor is exist in new journal line then tolerance will apply based on customer parameter setup.
            select firstonly RecId, AccountType from journalARApplic
                order by AccountType
                    where journalARApplic.SKS_BR_BankTran   == SKS_BR_BankReconciliationTrans.parmRecId()
                        &&  (journalARApplic.AccountType       == LedgerJournalACType::Cust
                        || journalARApplic.AccountType        == LedgerJournalACType::Vend)
                        && journalARApplic.TransactionAmount  != 0;

            if(journalARApplic.AccountType == LedgerJournalACType::Vend)
            {
                select firstonly MaxMSTDiff,MaxMSTOverUnder from vendParameters;
                maxMSTDiff      = vendParameters.MaxMSTDiff;
                maxMSTOverUnder = vendParameters.MaxMSTOverUnder;
            }
            else
            {
                select firstonly MaxMSTDiff,MaxMSTOverUnder from custParameters;
                maxMSTDiff      = custParameters.MaxMSTDiff;
                maxMSTOverUnder = custParameters.MaxMSTOverUnder;
            }
            // CR-9480 <--

            super();
            changecompany(SKS_BR_BankTran.DataAreaId)
            {
                locJournalARApplic.CustTransDataAreaId = SKS_BR_BankTran.DataAreaId;
                locJournalARApplic.AccountType         = LedgerJournalACType::Ledger;

                if(maxMSTDiff!= 0 || maxMSTOverUnder != 0) // CR-9480
                {
                    if(abs(Difference.realValue()) <= abs(maxMSTDiff))
                    {
                        ledgerDimensionDefaultAccount = LedgerSystemAccounts::find(LedgerPostingType::MSTDiff).LedgerDimension;
                        ledgerDimensionDefaultAccount = LedgerDimensionFacade::serviceCreateLedgerDimension(ledgerDimensionDefaultAccount,SKS_LB_JournalARApplic.DefaultDimension);
                        locJournalARApplic.TransactionAmount = Difference.realValue();
                    }
                    else
                    {
                        ledgerDimensionDefaultAccount = LedgerSystemAccounts::find(LedgerPostingType::CashDiscount).LedgerDimension;
                        ledgerDimensionDefaultAccount = LedgerDimensionFacade::serviceCreateLedgerDimension(LedgerDimensionDefaultAccount,SKS_LB_JournalARApplic.DefaultDimension);
                        locJournalARApplic.TransactionAmount = Difference.realValue();
                    }
                    locJournalARApplic.LedgerDimension = ledgerDimensionDefaultAccount;
                }
                locJournalARApplic.SKS_BR_BankTran     = SKS_LB_JournalARApplic.SKS_BR_BankTran;
                locJournalARApplic.DefaultDimension    = SKS_LB_JournalARApplic::getCustDefaultDimension(locJournalARApplic);
                locJournalARApplic.DefaultBankDimension = SKS_LB_JournalARApplic::getDefaultBankAccount(locJournalARApplic.findSKS_BR_BankTran());

                locJournalARApplic.insert();
            }
            SKS_LB_JournalARApplic_ds.refresh();
            SKS_LB_JournalARApplic_ds.research(true);
            SKS_BR_BankTran_ds.refresh();
            Difference.update();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>FullSettlement</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// 7363
        /// </summary>
        public void clicked()
        {
            element.updateFullSettlement(true,false);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>RemoveSettlement</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// 7363
        /// </summary>
        public void clicked()
        {
            element.updateFullSettlement(false,true);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SaveTemplate</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            Args    args;

            args = new Args();
            args.record(SKS_LB_JournalARApplic);
            args.parm("@SKS4296");
            SKS_BR_JournalTemplateCopyPeriodic::main(args);

            SKS_LB_JournalARApplic_ds.research();

            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AccountDimension</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            FormRun formRun;
            MenuFunction menuFunction;
            Args args;

            // Launch the Dimension form modally, this form will change the default dimension field on the record
            menuFunction = new MenuFunction(this.menuitemname(), this.menuItemType());
            args = new Args();
            args.record(SKS_LB_JournalARApplic);
            formRun = menuFunction.create(args);
            formRun.run();
            formRun.wait(true);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>OffsetAccountDimension</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            FormRun formRun;
            MenuFunction menuFunction;
            Args args;

            // Launch the Dimension form modally, this form will change the default dimension field on the record
            menuFunction = new MenuFunction(this.menuitemname(), this.menuItemType());
            args = new Args();
            args.record(SKS_LB_JournalARApplic); // 7572
            args.parm("@SYS16503");// 7572
            formRun = menuFunction.create(args);
            formRun.run();
            formRun.wait(true);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SKS_LB_JournalARApplic_SKS_AccountType</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();


            if (this.valueStr() == enum2str(LedgerJournalACType::Bank)) // 7626 //8655 //CR-9480
            {
                AccountDimensionButtongroup.enabled(true);
                SKS_LB_JournalARApplic_SKS_Invoice.enabled(false);
                DiscAmount.enabled(false);
                editDiscountTakenPercent.enabled(false);
            }
            else if (this.valueStr() == enum2str(LedgerJournalACType::Cust) || this.valueStr() == enum2str(LedgerJournalACType::Vend)) // CR-9480
            {
                AccountDimensionButtongroup.enabled(true);
                SKS_LB_JournalARApplic_SKS_Invoice.enabled(true);
                SKS_LB_JournalARApplic_SKS_Invoice.allowEdit(true);
                DiscAmount.enabled(true);
                editDiscountTakenPercent.enabled(true);
            }
            else
            {
                AccountDimensionButtongroup.enabled(false);
                SKS_LB_JournalARApplic_SKS_Invoice.enabled(false);
                DiscAmount.enabled(false);
                editDiscountTakenPercent.enabled(false);
            }
            element.enableVATTaxButton(); // CR-8793

            SKS_LB_JournalARApplic.LedgerDimension = 0;
            SKS_LB_JournalARApplic.Invoice = '';
            SKS_LB_JournalARApplic.FullSettlement = NoYes::No;
            SKS_LB_JournalARApplic.modifiedField(fieldNum(SKS_LB_JournalARApplic, LedgerDimension));
            SKS_LB_JournalARApplic.modifiedField(fieldNum(SKS_LB_JournalARApplic, Invoice));
            //Sks_Bug_7535 ---->
            if(this.valueStr()  == enum2str(LedgerJournalACType::Ledger) ||
                this.valueStr()  == enum2str(LedgerJournalACType::Vend)  ||
                (this.valueStr()  == enum2str(LedgerJournalACType::Cust) &&
                SKS_LB_JournalARApplic_SKS_Invoice.valueStr() == ''))
            {
                SKS_LB_JournalARApplic_Description.enabled(true);
            }
            else
            {
                SKS_LB_JournalARApplic_Description.enabled(false);
            }
            //Sks_Bug_7535 <----

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>enter</Name>
						<Source><![CDATA[
        /// <summary>
        /// enter method
        /// </summary>
        public void enter()
        {
            super();
            this.delete(enum2str(LedgerJournalACType::RCash));
            this.delete(enum2str(LedgerJournalACType::Employee_RU));
            this.delete(enum2str(LedgerJournalACType::FixedAssets_RU));
            this.delete(enum2str(LedgerJournalACType::RDeferrals));
            this.delete(enum2str(LedgerJournalACType::Project)); // 7440
            this.delete(enum2str(LedgerJournalACType::FixedAssets)); // 7440
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SKS_LB_JournalARApplic_SKS_Account</Name>
				<Type>SegmentedEntry</Type>
				<Methods>
					<Method>
						<Name>accountNumLookup</Name>
						<Source><![CDATA[
        public boolean accountNumLookup(
            FormControl            _formControl,
            SKS_LB_JournalARApplic     _SKS_LB_JournalARApplic)
        {
            boolean accountNumLookUp = false;

            if (!accountNumLookUp)
            {
                accountNumLookUp = true;

                switch(_SKS_LB_JournalARApplic.AccountType)
                {
                    case LedgerJournalACType::Bank:
                        BankAccountTable::lookupBankAccount(_formControl,
                                                            _SKS_LB_JournalARApplic.CustTransDataareaid);
                        break;

                    case LedgerJournalACType::Cust:
                        CustTable::lookupCustomer(_formControl,
                                                    _SKS_LB_JournalARApplic.CustTransDataareaid);
                        break;

                    case LedgerJournalACType::FixedAssets:
                        AssetTable::lookupAccountNum(_formControl,
                                                    _SKS_LB_JournalARApplic.CustTransDataareaid);
                        break;

                    case LedgerJournalACType::Project:
                        ProjTable::lookupProjId(_formControl,
                                                _SKS_LB_JournalARApplic);
                        break;

                    case LedgerJournalACType::Vend:
                        VendTable::lookupVendor(_formControl,
                                                _SKS_LB_JournalARApplic.CustTransDataareaid);
                        break;

                    default:
                        accountNumLookUp = false;
                        break;
                }
            }

            return accountNumLookUp;
        }

]]></Source>
					</Method>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        /// <summary>
        /// lookup method
        /// </summary>
        public void lookup()
        {

            if (!this.accountNumLookup(this,SKS_LB_JournalARApplic))
            {
                super();
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>checkUseCustomLookup</Name>
						<Source><![CDATA[
        /// <summary>
        /// checkUseCustomLookup method
        /// </summary>
        /// <param name = "_accountTypeEnumValue">_accountTypeEnumValue</param>
        /// <param name = "_secondaryAccountTypeEnumValue">_secondaryAccountTypeEnumValue</param>
        /// <returns>boolean</returns>
        public boolean checkUseCustomLookup(int _accountTypeEnumValue, int _secondaryAccountTypeEnumValue)
        {
            boolean ret;

            ret = super(_accountTypeEnumValue, _secondaryAccountTypeEnumValue);

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>updateUseCustomLookup</Name>
						<Source><![CDATA[
        /// <summary>
        /// updateUseCustomLookup method
        /// </summary>
        public void updateUseCustomLookup()
        {
            super();
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        /// modified method
        /// </summary>
        /// <returns>boolean</returns>
        public boolean modified()
        {
            boolean ret;

            ret = super();

            SKS_LB_JournalARApplic.Invoice = '';
            SKS_LB_JournalARApplic.FullSettlement = NoYes::No;
            if(SKS_LB_JournalARApplic.AccountType != LedgerJournalACType::Ledger)
            {
                SKS_LB_JournalARApplic.modifiedField(fieldNum(SKS_LB_JournalARApplic, Invoice));
            }
            SKS_LB_JournalARApplic.TransactionAmount = 0; //CR-8779
            TransactionAmount.modified();// CR-8779

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>onSegmentChanged</Name>
						<Source><![CDATA[
        /// <summary>
        /// onSegmentChanged method
        /// </summary>
        /// <param name = "_segment">_segment</param>
        public void onSegmentChanged(DimensionControlSegment _segment)
        {
            if (_segment.parmDimensionAttribute().RecId == mainAccountDimAttr)
            {
                previousMainAccountId = currentMainAccountId;
            }

            super(_segment);

            currentMainAccountId = element.onSegmentChangedForPrimaryAccount(SKS_LB_JournalARApplic_SKS_Account,_segment,currentMainAccount,SKS_LB_JournalARApplic,bankTransRecId);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SKS_LB_JournalARApplic_SKS_Invoice</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        /// modified method
        /// </summary>
        /// <returns>boolean</returns>
        public boolean modified()
        {
            boolean ret;

            ret = super();

            TransactionAmount.modified(); // CR - 8779

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>TransactionAmount</Name>
				<Type>Real</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        /// modified method
        /// </summary>
        /// <returns>boolean</returns>
        public boolean modified()
        {
            boolean ret;
            int     position; // 7446
            origTranAmount = SKS_LB_JournalARApplic.TransactionAmount;

            ret = super();
            SKS_LB_JournalARApplic_ds.write();

            SKS_BR_BankTran_ds.refresh();
            BankTransSum.update();
            Difference.update();
            position = SKS_LB_journalARApplic_ds.getPosition();// 7446
            SKS_LB_journalARApplic_ds.refresh();
            SKS_LB_journalARApplic_ds.setPosition(position);// 7446
            //7653-->
            BankTransSum.realValue(SKS_BR_BankTran_ds.bankSum());
            Difference.realValue(SKS_BR_BankTran_ds.difference());
            //7653 <--
            SKS_LB_journalARApplic_ds.updatestatus();
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>DiscAmount</Name>
				<Type>Real</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        /// 7446
        /// </summary>
        /// <returns>Return true</returns>
        public boolean modified()
        {
            boolean ret;
            int     position; // 7446
            ret = super();
            if(ret)
            {
                SKS_LB_JournalARApplic_ds.write();

                SKS_BR_BankTran_ds.refresh();
                BankTransSum.update();
                Difference.update();
                position = SKS_LB_journalARApplic_ds.getPosition();// 7446
                SKS_LB_journalARApplic_ds.refresh();
                SKS_LB_journalARApplic_ds.research(true);
                SKS_LB_journalARApplic_ds.setPosition(position);// 7446
            }
            SKS_LB_journalARApplic_ds.updatestatus();
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>editDiscountTakenPercent</Name>
				<Type>Real</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        /// 7334
        /// </summary>
        /// <returns>Return true</returns>
        public boolean modified()
        {
            boolean ret;
            int     position; // 7446
            ret = super();
            if(ret)
            {
                SKS_LB_JournalARApplic_ds.write();

                SKS_BR_BankTran_ds.refresh();
                BankTransSum.update();
                Difference.update();
                position = SKS_LB_journalARApplic_ds.getPosition();// 7446
                SKS_LB_journalARApplic_ds.refresh();
                SKS_LB_journalARApplic_ds.research(true);
                SKS_LB_journalARApplic_ds.setPosition(position);// 7446
            }
            SKS_LB_journalARApplic_ds.updatestatus();
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SKS_LB_JournalARApplic_CustTransDataAreaId</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        /// Modify the <c>SKS_LB_JournalARApplic</c> table based on custTransDataAreaId
        /// </summary>
        /// <returns>Return true</returns>
        public boolean modified()
        {
            boolean ret;

            ret = super();

            SKS_LB_JournalARApplic_SKS_Account.parmDataAreaId(SKS_LB_JournalARApplic.CustTransDataAreaId);//Bug#7255
            SKS_LB_JournalARApplic.AccountType = LedgerJournalACType::Cust;
            SKS_LB_JournalARApplic.FullSettlement = NoYes::No;
            SKS_LB_JournalARApplic.modifiedField(fieldNum(SKS_LB_JournalARApplic,AccountType));
            SKS_LB_JournalARApplic.DiscApplyAmount = 0;
            SKS_LB_JournalARApplic.InvoiceDate = dateNull();
            SKS_LB_JournalARApplic.InvoiceDueDate = dateNull();
            TransactionAmount.modified(); // CR-8779

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>SKS_BR_BankTran</Name>
			<Table>SKS_BR_BankTran</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AccountId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AccountStatementDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AccountStatementNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AuthorizationCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankCustomerNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankHeaderRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankTranIntermRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankTranRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankTranType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BaseAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BookNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CardNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Comment</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CommissionAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreateGL</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreditCardType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustAccount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustCompany</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustomerRuleStep</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustRemitAnalysisRule</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DDRInboundReasonCodesRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DDRMappingRuleGroupId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DDRReasonCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DDRReferenceNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DDRReversalDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>eBankRecCustGroupId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EbankRecMatchingRuleGroupId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExchangeAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FileDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Filename</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FileTranType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>GLCreationCompany</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>GLMappingRuleGroupId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>GLMatchOrCreate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ImportedStatementDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ImportedStatementNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IntermMatch</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IntermPaymentJournalNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InUse</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InUseBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsManual</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsSettlementCombinedJournal</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IVAAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>JournalName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LedgerJournalRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LineNumInFile</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ManualJournalName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ManualReconciliationID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MatchConfidence</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MatchDefaultRule</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Matched</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MatchedType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MatchIndicator</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MatchingRuleGroupActionStep</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MatchingRuleGroupId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MatchStep</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MultipleMatches</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OrigBankVoucher</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OriginalStatementRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ParsedValue</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ParseRuleId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymentJournalNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymentMatch</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PurchaseAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RemitenceSettlementActionStep</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReteivaAmountNeg</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReteivaAmountPos</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RevVoucher</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SessionId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SessionLoginDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SettlementAction</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SettlementImportAutoPost</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SettlementType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxRetentionAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TerminalCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TrackId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TranAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TranDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TranDescription</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TranDescriptionShort</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TranDescriptionUser</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransactionFeesAmt</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TypeOfMovement</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>UniqueCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>UserBlockId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ValueDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Voucher</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VoucherReceiptNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ZBAParentRecid</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<CrossCompanyAutoQuery>Yes</CrossCompanyAutoQuery>
			<AllowDelete>No</AllowDelete>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>SKS_LB_JournalARApplic</Name>
			<Table>SKS_LB_JournalARApplic</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AccountType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AlreadyMarked</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AltInvLookupRef</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AltInvLookupType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ApplyDiscount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AutoCRAutoRev</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AutoCROffsetLedgerDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AutoRevLedgerDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AutoRevOffsetLedgerDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankRecCustPostingProfile</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankRecPrepayment</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BRGJPostingDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustTransDataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustTransOpenRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustTransRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultBankDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Description</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DiscApplyAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DiscountTakenPercent</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FileRecord</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FullSettlement</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IHBIntercoAccountType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IHBIntercoCompany</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IHBIntercoLedgerDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IHB_InterestRepayment</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InvBalance</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Invoice</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InvoiceDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InvoiceDueDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LBInvoice</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LedgerDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RevReasonCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SettleAmountCur</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SettleAvail</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SKS_BR_BankTran</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SKS_LB_JournalARRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>Status</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxGroup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxItemGroup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TrackingInvoices</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransactionAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VendTransOpenRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VendTransRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>WriteOff</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>WriteOffId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<CrossCompanyAutoQuery>Yes</CrossCompanyAutoQuery>
			<JoinSource>SKS_BR_BankTran</JoinSource>
			<LinkType>Active</LinkType>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>SKS_PRA_PaymentTable</Name>
			<Table>SKS_PRA_PaymentTable</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>BankBIC</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustAccount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustBBAN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustEmail</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustIBAN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OptInfo</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PmtAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PmtAmtSum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PmtDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PmtEntryCount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PmtRef</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PmtUstrd</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Processed</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TrackId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>UniqueFileId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<CrossCompanyAutoQuery>Yes</CrossCompanyAutoQuery>
			<JoinSource>SKS_BR_BankTran</JoinSource>
			<LinkType>Active</LinkType>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">Customer settlement details</Caption>
		<Pattern xmlns="">Custom</Pattern>
		<ViewEditMode xmlns="">Edit</ViewEditMode>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormTabControl">
				<Name>Tab</Name>
				<AlignControl>No</AlignControl>
				<ElementPosition>1073741823</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Type>Tab</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>Header</Name>
						<ElementPosition>715827882</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormActionPaneControl">
								<Name>ActionPane</Name>
								<ElementPosition>1073741822</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>SizeToAvailable</HeightMode>
								<Type>ActionPane</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormActionPaneTabControl">
										<Name>ActionPaneTab</Name>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>ActionPaneTab</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormButtonGroupControl">
												<Name>ButtonGroup</Name>
												<ElementPosition>1073741822</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>SizeToAvailable</HeightMode>
												<Type>ButtonGroup</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>SizeToAvailable</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormButtonControl">
														<Name>PostBtn</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1431655764</ElementPosition>
														<Enabled>No</Enabled>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>SizeToAvailable</HeightMode>
														<HelpText>@SKS4329</HelpText>
														<Type>Button</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>SizeToAvailable</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<Text>@SYS41360</Text>
													</AxFormControl>
												</Controls>
												<ArrangeMethod>Vertical</ArrangeMethod>
												<Columns>2</Columns>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormButtonGroupControl">
												<Name>NextAvailableButtonGroup</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1610612733</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>SizeToAvailable</HeightMode>
												<Type>ButtonGroup</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>SizeToAvailable</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormButtonControl">
														<Name>NextAvailableBtn</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1431655764</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>SizeToAvailable</HeightMode>
														<HelpText>@SKS4327</HelpText>
														<Type>Button</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>SizeToAvailable</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<Text>@SKS4304</Text>
													</AxFormControl>
												</Controls>
												<ArrangeMethod>Vertical</ArrangeMethod>
												<Columns>2</Columns>
											</AxFormControl>
										</Controls>
										<AlignChild>No</AlignChild>
										<AlignChildren>No</AlignChildren>
										<ArrangeMethod>Vertical</ArrangeMethod>
									</AxFormControl>
								</Controls>
								<AlignChild>No</AlignChild>
								<AlignChildren>No</AlignChildren>
								<ArrangeMethod>Vertical</ArrangeMethod>
								<Style>Strip</Style>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGridControl">
								<Name>Grid</Name>
								<ElementPosition>1610612733</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Height>100</Height>
								<HeightMode>Manual</HeightMode>
								<Type>Grid</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>PaymentAmount</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>252645134</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>TranAmount</DataField>
										<DataSource>SKS_BR_BankTran</DataSource>
										<Label>@SKS4412</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>BankTransSum</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>378967701</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<CacheDataMethod>Yes</CacheDataMethod>
										<DataMethod>bankSum</DataMethod>
										<DataSource>SKS_BR_BankTran</DataSource>
										<Label>@SKS4308</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>Difference</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>505290268</ElementPosition>
										<Enabled>No</Enabled>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<CacheDataMethod>Yes</CacheDataMethod>
										<DataMethod>difference</DataMethod>
										<DataSource>SKS_BR_BankTran</DataSource>
										<Label>@SKS4312</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Company</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>631612835</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>dataAreaId</DataField>
										<DataSource>SKS_BR_BankTran</DataSource>
										<Label>@SKS4411</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>BankAccount</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>757935402</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>AccountId</DataField>
										<DataSource>SKS_BR_BankTran</DataSource>
										<Label>@SKS4319</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Currency</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>884257969</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>getOrigStatementCurrency</DataMethod>
										<DataSource>SKS_BR_BankTran</DataSource>
										<Label>@SKS4309</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>StatementDate</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1010580536</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Date</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>ImportedStatementDate</DataField>
										<DataSource>SKS_BR_BankTran</DataSource>
										<Label>@SKS3108</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>StatementNumber</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1136903103</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>ImportedStatementNum</DataField>
										<DataSource>SKS_BR_BankTran</DataSource>
										<Label>@SKS3106</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>ImportBankNumber</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1263225670</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>BankNum</DataField>
										<DataSource>SKS_BR_BankTran</DataSource>
										<Label>@SKS521</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>ImportCustNumber</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1389548237</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>BankCustomerNum</DataField>
										<DataSource>SKS_BR_BankTran</DataSource>
										<Label>@SKS2259</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>ImportTransType</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1515870804</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>FileTranType</DataField>
										<DataSource>SKS_BR_BankTran</DataSource>
										<Label>@SKS518</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>SKS_BR_BankTran_TrackId</Name>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>TrackId</DataField>
										<DataSource>SKS_BR_BankTran</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>CustCompany</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1642193371</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>CustCompany</DataField>
										<DataSource>SKS_BR_BankTran</DataSource>
										<Label>@SKS4310</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Customer</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1768515938</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>CustAccount</DataField>
										<DataSource>SKS_BR_BankTran</DataSource>
										<Label>@SKS4311</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>SKS_BR_BankTran_PaymentJournalNum</Name>
										<ElementPosition>1894838505</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Visible>No</Visible>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>PaymentJournalNum</DataField>
										<DataSource>SKS_BR_BankTran</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>SKS_BR_BankTran_Voucher</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>2021161072</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>Voucher</DataField>
										<DataSource>SKS_BR_BankTran</DataSource>
									</AxFormControl>
								</Controls>
								<DataSource>SKS_BR_BankTran</DataSource>
							</AxFormControl>
						</Controls>
						<Caption>@SKS4299</Caption>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>PRAHeader</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1073741823</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>SizeToAvailable</HeightMode>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormActionPaneControl">
								<Name>ActionPane1</Name>
								<ElementPosition>1073741822</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>SizeToAvailable</HeightMode>
								<Type>ActionPane</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormActionPaneTabControl">
										<Name>ActionPaneTab1</Name>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>ActionPaneTab</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormButtonGroupControl">
												<Name>ButtonGroup1</Name>
												<ElementPosition>1431655764</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>ButtonGroup</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls />
												<ArrangeMethod>Vertical</ArrangeMethod>
											</AxFormControl>
										</Controls>
										<AlignChild>No</AlignChild>
										<AlignChildren>No</AlignChildren>
										<ArrangeMethod>Vertical</ArrangeMethod>
									</AxFormControl>
								</Controls>
								<AlignChild>No</AlignChild>
								<AlignChildren>No</AlignChildren>
								<ArrangeMethod>Vertical</ArrangeMethod>
								<Style>Strip</Style>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGridControl">
								<Name>Grid1</Name>
								<ElementPosition>1610612733</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Height>100</Height>
								<HeightMode>Manual</HeightMode>
								<Type>Grid</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>SKS_PRA_PaymentTable_CustAccount</Name>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>CustAccount</DataField>
										<DataSource>SKS_PRA_PaymentTable</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>SKS_PRA_PaymentTable_CustName</Name>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>CustName</DataField>
										<DataSource>SKS_PRA_PaymentTable</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>SKS_PRA_PaymentTable_PmtRef</Name>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>PmtRef</DataField>
										<DataSource>SKS_PRA_PaymentTable</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>SKS_PRA_PaymentTable_PmtDate</Name>
										<Type>Date</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>PmtDate</DataField>
										<DataSource>SKS_PRA_PaymentTable</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>SKS_PRA_PaymentTable_PmtAmount</Name>
										<Type>Real</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>PmtAmount</DataField>
										<DataSource>SKS_PRA_PaymentTable</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>SKS_PRA_PaymentTable_TrackId</Name>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>TrackId</DataField>
										<DataSource>SKS_PRA_PaymentTable</DataSource>
									</AxFormControl>
								</Controls>
								<DataSource>SKS_PRA_PaymentTable</DataSource>
							</AxFormControl>
						</Controls>
						<Caption>Remit header</Caption>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>Note</Name>
						<ElementPosition>1431655764</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>SizeToAvailable</HeightMode>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormActionPaneControl">
								<Name>ActionPane2</Name>
								<ElementPosition>1073741822</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>SizeToAvailable</HeightMode>
								<Type>ActionPane</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormActionPaneTabControl">
										<Name>ActionPaneTab2</Name>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>ActionPaneTab</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormButtonGroupControl">
												<Name>ButtonGroup2</Name>
												<ElementPosition>1431655764</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>ButtonGroup</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormButtonControl">
														<Name>AnalyzeButton</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<HelpText>@SKS:SKGBRAnalyzeButtonHelpText</HelpText>
														<Type>Button</Type>
														<FormControlExtension
															i:nil="true" />
														<Text>@SYS117478</Text>
													</AxFormControl>
												</Controls>
												<ArrangeMethod>Vertical</ArrangeMethod>
											</AxFormControl>
										</Controls>
										<AlignChild>No</AlignChild>
										<AlignChildren>No</AlignChildren>
										<ArrangeMethod>Vertical</ArrangeMethod>
									</AxFormControl>
								</Controls>
								<AlignChild>No</AlignChild>
								<AlignChildren>No</AlignChildren>
								<ArrangeMethod>Vertical</ArrangeMethod>
								<Style>Strip</Style>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>Group1</Name>
								<ElementPosition>1610612733</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>SizeToAvailable</HeightMode>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>NoteType</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>715827882</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<HelpText>@SKS4328</HelpText>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<EnumType>SKS_BR_NoteType</EnumType>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>NoteOrig</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1073741823</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>TranDescription</DataField>
										<DataSource>SKS_BR_BankTran</DataSource>
										<ExtendedDataType>SKS_BR_Note</ExtendedDataType>
										<Label>@SKS4264</Label>
										<MultiLine>Yes</MultiLine>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>NoteUser</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>TranDescriptionUser</DataField>
										<DataSource>SKS_BR_BankTran</DataSource>
										<Label>@SKS4305</Label>
										<MultiLine>Yes</MultiLine>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Search</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1789569705</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<HelpText>@SKS4330</HelpText>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<ExtendedDataType>SKS_BR_NoteMemo</ExtendedDataType>
										<Label>@SKS4297</Label>
									</AxFormControl>
								</Controls>
							</AxFormControl>
						</Controls>
						<Caption>@SKS4305</Caption>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>ProposedSettlement</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1789569705</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>SizeToAvailable</HeightMode>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormActionPaneControl">
								<Name>ActionPane3</Name>
								<ElementPosition>1073741822</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>SizeToAvailable</HeightMode>
								<Type>ActionPane</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormActionPaneTabControl">
										<Name>ActionPaneTab3</Name>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>ActionPaneTab</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormButtonGroupControl">
												<Name>NewDeleteGroup</Name>
												<ElementPosition>536870910</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>ButtonGroup</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormCommandButtonControl">
														<Name>NewButton</Name>
														<ElementPosition>1073741822</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>CommandButton</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<ButtonDisplay>TextWithImageLeft</ButtonDisplay>
														<Command>New</Command>
														<NormalImage>New</NormalImage>
														<Primary>Yes</Primary>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormCommandButtonControl">
														<Name>DeleteButton</Name>
														<ElementPosition>1610612733</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>CommandButton</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<ButtonDisplay>TextWithImageLeft</ButtonDisplay>
														<Command>DeleteRecord</Command>
														<NeedsRecord>Yes</NeedsRecord>
														<NormalImage>Delete</NormalImage>
														<Primary>Yes</Primary>
														<SaveRecord>No</SaveRecord>
														<Text>@sys14425</Text>
													</AxFormControl>
												</Controls>
												<ArrangeMethod>Vertical</ArrangeMethod>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormButtonGroupControl">
												<Name>Maintain</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>805306365</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>SizeToAvailable</HeightMode>
												<Type>ButtonGroup</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>SizeToAvailable</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormButtonControl">
														<Name>LoadOpenTransBtn</Name>
														<ElementPosition>1431655764</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<HelpText>@SKS4326</HelpText>
														<Type>Button</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<MultiSelect>Yes</MultiSelect>
														<NeedsRecord>Yes</NeedsRecord>
														<Text>@SKS898</Text>
													</AxFormControl>
												</Controls>
												<ArrangeMethod>Vertical</ArrangeMethod>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormButtonGroupControl">
												<Name>RemainOnAcctBtnGrp</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>ButtonGroup</Type>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormButtonControl">
														<Name>RemainOnAcctBtn</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<HelpText>@SKS6201</HelpText>
														<Type>Button</Type>
														<FormControlExtension
															i:nil="true" />
														<NeedsRecord>Yes</NeedsRecord>
														<Text>@SKS6004</Text>
													</AxFormControl>
												</Controls>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormButtonGroupControl">
												<Name>ApplyToleranceGroup</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>ButtonGroup</Type>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormButtonControl">
														<Name>ApplyTolerance</Name>
														<Type>Button</Type>
														<FormControlExtension
															i:nil="true" />
														<NeedsRecord>Yes</NeedsRecord>
														<Text>@SKS6262</Text>
													</AxFormControl>
												</Controls>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormButtonGroupControl">
												<Name>FullSettlementGroup</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<HeightMode>SizeToAvailable</HeightMode>
												<Type>ButtonGroup</Type>
												<WidthMode>SizeToAvailable</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormButtonControl">
														<Name>FullSettlement</Name>
														<HelpText>@SKS6000</HelpText>
														<Type>Button</Type>
														<FormControlExtension
															i:nil="true" />
														<MultiSelect>Yes</MultiSelect>
														<NeedsRecord>Yes</NeedsRecord>
														<Text>@SYS75399</Text>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormButtonControl">
														<Name>RemoveSettlement</Name>
														<HelpText>@SKS6002</HelpText>
														<Type>Button</Type>
														<FormControlExtension
															i:nil="true" />
														<MultiSelect>Yes</MultiSelect>
														<NeedsRecord>Yes</NeedsRecord>
														<Text>@SKS6001</Text>
													</AxFormControl>
												</Controls>
												<ArrangeMethod>Vertical</ArrangeMethod>
												<Columns>2</Columns>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormButtonGroupControl">
												<Name>TemplateButtongroup</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1073741820</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>SizeToAvailable</HeightMode>
												<Type>ButtonGroup</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>SizeToAvailable</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormMenuButtonControl">
														<Name>MenuButton</Name>
														<ElementPosition>1431655764</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>MenuButton</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<Controls>
															<AxFormControl xmlns=""
																i:type="AxFormMenuFunctionButtonControl">
																<Name>SKS_BR_ApplyTemplate</Name>
																<Type>MenuFunctionButton</Type>
																<FormControlExtension
																	i:nil="true" />
																<DataSource>SKS_BR_BankTran</DataSource>
																<MenuItemName>SKS_BR_ApplyTemplate</MenuItemName>
															</AxFormControl>
															<AxFormControl xmlns=""
																i:type="AxFormButtonControl">
																<Name>SaveTemplate</Name>
																<ElementPosition>1610612733</ElementPosition>
																<FilterExpression>%1</FilterExpression>
																<HeightMode>SizeToAvailable</HeightMode>
																<HelpText>@SKS4296</HelpText>
																<Type>Button</Type>
																<VerticalSpacing>-1</VerticalSpacing>
																<WidthMode>SizeToAvailable</WidthMode>
																<FormControlExtension
																	i:nil="true" />
																<Text>@SKS4296</Text>
															</AxFormControl>
														</Controls>
														<Text>@SKS4300</Text>
													</AxFormControl>
												</Controls>
												<ArrangeMethod>Vertical</ArrangeMethod>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormButtonGroupControl">
												<Name>AccountDimensionButtongroup</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1342177275</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>SizeToAvailable</HeightMode>
												<Type>ButtonGroup</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>SizeToAvailable</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormMenuFunctionButtonControl">
														<Name>AccountDimension</Name>
														<ElementPosition>1431655764</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>SizeToAvailable</HeightMode>
														<Type>MenuFunctionButton</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>SizeToAvailable</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<MenuItemName>SKS_BR_BankAccountTransDimension</MenuItemName>
														<NeedsRecord>Yes</NeedsRecord>
														<Text>@SKS4398</Text>
													</AxFormControl>
												</Controls>
												<ArrangeMethod>Vertical</ArrangeMethod>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormButtonGroupControl">
												<Name>OffsetAccountDimensionButtongroup</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1610612730</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>SizeToAvailable</HeightMode>
												<Type>ButtonGroup</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>SizeToAvailable</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormMenuFunctionButtonControl">
														<Name>OffsetAccountDimension</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1431655764</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>SizeToAvailable</HeightMode>
														<Type>MenuFunctionButton</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>SizeToAvailable</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<MenuItemName>SKS_BR_BankAccountTransDimension</MenuItemName>
														<NeedsRecord>Yes</NeedsRecord>
														<Text>@SKS:SKGBRBankAccountDimensions</Text>
													</AxFormControl>
												</Controls>
												<ArrangeMethod>Vertical</ArrangeMethod>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormButtonGroupControl">
												<Name>InquiriesButtongroup</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1879048185</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>SizeToAvailable</HeightMode>
												<Type>ButtonGroup</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>SizeToAvailable</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormMenuFunctionButtonControl">
														<Name>SKS_BR_InvoiceInquiry</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1431655764</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>MenuFunctionButton</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<MenuItemName>SKS_BR_InvoiceInquiry</MenuItemName>
														<NeedsRecord>Yes</NeedsRecord>
													</AxFormControl>
												</Controls>
												<ArrangeMethod>Vertical</ArrangeMethod>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormButtonGroupControl">
												<Name>AlreadyMarkedInquiryButtonGroup</Name>
												<Type>ButtonGroup</Type>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormMenuFunctionButtonControl">
														<Name>SKS_BR_AlreadyMarkedInquiry</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<Enabled>No</Enabled>
														<Type>MenuFunctionButton</Type>
														<FormControlExtension
															i:nil="true" />
														<DataSource>SKS_LB_JournalARApplic</DataSource>
														<MenuItemName>SKS_BR_AlreadyMarkedInquiry</MenuItemName>
														<NeedsRecord>Yes</NeedsRecord>
													</AxFormControl>
												</Controls>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormButtonGroupControl">
												<Name>VATTaxButtonGroup</Name>
												<Type>ButtonGroup</Type>
												<Visible>No</Visible>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormMenuFunctionButtonControl">
														<Name>SKS_BR_VATTaxForm</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<Type>MenuFunctionButton</Type>
														<FormControlExtension
															i:nil="true" />
														<DataSource>SKS_LB_JournalARApplic</DataSource>
														<MenuItemName>SKS_BR_VATTaxForm</MenuItemName>
														<NeedsRecord>Yes</NeedsRecord>
													</AxFormControl>
												</Controls>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormButtonGroupControl">
												<Name>IntercoAccountButtonGroup</Name>
												<HeightMode>SizeToAvailable</HeightMode>
												<Type>ButtonGroup</Type>
												<Visible>No</Visible>
												<WidthMode>SizeToAvailable</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormMenuFunctionButtonControl">
														<Name>SKS_IHB_IntercoAccount</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<Enabled>No</Enabled>
														<HeightMode>Auto</HeightMode>
														<Type>MenuFunctionButton</Type>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<DataSource>SKS_LB_JournalARApplic</DataSource>
														<MenuItemName>SKS_IHB_IntercoAccount</MenuItemName>
														<NeedsRecord>Yes</NeedsRecord>
													</AxFormControl>
												</Controls>
											</AxFormControl>
										</Controls>
										<AlignChild>No</AlignChild>
										<AlignChildren>No</AlignChildren>
										<ArrangeMethod>Vertical</ArrangeMethod>
										<DataSource>SKS_LB_JournalARApplic</DataSource>
									</AxFormControl>
								</Controls>
								<AlignChild>No</AlignChild>
								<AlignChildren>No</AlignChildren>
								<ArrangeMethod>Vertical</ArrangeMethod>
								<Style>Strip</Style>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGridControl">
								<Name>Grid3</Name>
								<ElementPosition>1610612733</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Height>250</Height>
								<HeightMode>Manual</HeightMode>
								<Type>Grid</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>SKS_LB_JournalARApplic_AlreadyMarked</Name>
										<AllowEdit>No</AllowEdit>
										<ElementPosition>2054114790</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<HelpText>@SKS4323</HelpText>
										<Type>CheckBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<BackgroundColor>WindowBackground</BackgroundColor>
										<DataField>AlreadyMarked</DataField>
										<DataSource>SKS_LB_JournalARApplic</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>SKS_LB_JournalARApplic_SKS_AccountType</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>373475416</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>AccountType</DataField>
										<DataSource>SKS_LB_JournalARApplic</DataSource>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormSegmentedEntryControl">
										<Name>SKS_LB_JournalARApplic_SKS_Account</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>466844270</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>SegmentedEntry</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension>
											<Name>SegmentedEntryControl</Name>
											<ExtensionComponents />
											<ExtensionProperties>
												<AxFormControlExtensionProperty>
													<Name>parmControllerClassName</Name>
													<Type>String</Type>
													<TypeName>str</TypeName>
													<Value>DimensionDynamicAccountController</Value>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmIsDefaultAccount</Name>
													<Type>Enum</Type>
													<TypeName>boolean</TypeName>
													<Value>False</Value>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmValidateBlockedForManualEntry</Name>
													<Type>Enum</Type>
													<TypeName>NoYes</TypeName>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmLockMainAccountSegment</Name>
													<Type>Enum</Type>
													<TypeName>NoYes</TypeName>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmPostingType</Name>
													<Type>Enum</Type>
													<TypeName>LedgerPostingType</TypeName>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmIncludeTotalAccounts</Name>
													<Type>Enum</Type>
													<TypeName>NoYes</TypeName>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmIncludeFinancialAccounts</Name>
													<Type>Enum</Type>
													<TypeName>NoYes</TypeName>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmAccountTypeEnumName</Name>
													<Type>String</Type>
													<Value>AccountType</Value>
												</AxFormControlExtensionProperty>
											</ExtensionProperties>
										</FormControlExtension>
										<DataSource>SKS_LB_JournalARApplic</DataSource>
										<ReferenceField>LedgerDimension</ReferenceField>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>AccountName</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>560213124</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<CacheDataMethod>No</CacheDataMethod>
										<DataMethod>accountName</DataMethod>
										<DataSource>SKS_LB_JournalARApplic</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>SKS_LB_JournalARApplic_SKS_Invoice</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>653581978</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>Invoice</DataField>
										<DataSource>SKS_LB_JournalARApplic</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>TransactionAmount</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1400532810</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>TransactionAmount</DataField>
										<DataSource>SKS_LB_JournalARApplic</DataSource>
										<Label>@SKS4295</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>DiscAmount</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1493901664</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>DiscApplyAmount</DataField>
										<DataSource>SKS_LB_JournalARApplic</DataSource>
										<Label>@SKS4314</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>editDiscountTakenPercent</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1587270518</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>DiscountTakenPercent</DataField>
										<DataSource>SKS_LB_JournalARApplic</DataSource>
										<Label>@SKS4317</Label>
										<NoOfDecimals>1</NoOfDecimals>
										<NoOfDecimalsMode>Fixed</NoOfDecimalsMode>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>SettlementAvail</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>933688540</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<CacheDataMethod>No</CacheDataMethod>
										<DataMethod>displaySettlementAvail</DataMethod>
										<DataSource>SKS_LB_JournalARApplic</DataSource>
										<Label>@SKS4298</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>DiscountAvail</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1027057394</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>displayDiscountAvail</DataMethod>
										<DataSource>SKS_LB_JournalARApplic</DataSource>
										<Label>@SKS4315</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>DiscountAvailPercent</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1120426248</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>displayDiscountAvailPercent</DataMethod>
										<DataSource>SKS_LB_JournalARApplic</DataSource>
										<Label>@SKS4316</Label>
										<NoOfDecimals>1</NoOfDecimals>
										<NoOfDecimalsMode>Fixed</NoOfDecimalsMode>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>InvoiceBalance</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>840319686</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>displayinvoicebalance</DataMethod>
										<DataSource>SKS_LB_JournalARApplic</DataSource>
										<Label>@SKS3512</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>SKS_LB_JournalARApplic_SKS_InvoiceAmount</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>746950832</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>displayInvoiceAmount</DataMethod>
										<DataSource>SKS_LB_JournalARApplic</DataSource>
										<Label>@SKS4336</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>SKS_LB_JournalARApplic_SKS_InvoiceDate</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1680639372</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Date</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>InvoiceDate</DataField>
										<DataSource>SKS_LB_JournalARApplic</DataSource>
										<Label>@SKS4292</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>SKS_LB_JournalARApplic_SKS_InvoiceDueDate</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1774008226</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Date</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>InvoiceDueDate</DataField>
										<DataSource>SKS_LB_JournalARApplic</DataSource>
										<Label>@SKS4293</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>SKS_LB_JournalARApplic_CustTransDataAreaId</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>280106562</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>CustTransDataAreaId</DataField>
										<DataSource>SKS_LB_JournalARApplic</DataSource>
										<Label>@SKS4411</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>SKS_LB_JournalARApplic_AltInvLookupType</Name>
										<ElementPosition>1867377080</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>AltInvLookupType</DataField>
										<DataSource>SKS_LB_JournalARApplic</DataSource>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>SKS_LB_JournalARApplic_AltInvLookupRef</Name>
										<ElementPosition>1960745934</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>AltInvLookupRef</DataField>
										<DataSource>SKS_LB_JournalARApplic</DataSource>
										<Label>Remit reference</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>SKS_LB_JournalARApplic_BRGJPostingDate</Name>
										<Type>Date</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>BRGJPostingDate</DataField>
										<DataSource>SKS_LB_JournalARApplic</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>SKS_LB_JournalARApplic_Description</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>Description</DataField>
										<DataSource>SKS_LB_JournalARApplic</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>SKS_LB_JournalARApplic_BankRecPrepayment</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>CheckBox</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>BankRecPrepayment</DataField>
										<DataSource>SKS_LB_JournalARApplic</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>BankRecCustPostingProfile</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>BankRecCustPostingProfile</DataField>
										<DataSource>SKS_LB_JournalARApplic</DataSource>
									</AxFormControl>
								</Controls>
								<DataSource>SKS_LB_JournalARApplic</DataSource>
							</AxFormControl>
						</Controls>
						<Caption>Proposed settlement</Caption>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
				</Controls>
				<AlignChild>No</AlignChild>
				<ArrangeMethod>Vertical</ArrangeMethod>
				<Scrollbars>Yes</Scrollbars>
				<Style>FastTabs</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>