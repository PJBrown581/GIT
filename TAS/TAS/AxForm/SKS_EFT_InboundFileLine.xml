<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>SKS_EFT_InboundFileLine</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class SKS_EFT_InboundFileLine extends FormRun
{
    SKS_EFT_InboundFile mSKS_EFT_InboundFile;
    SpecTransManager    spectransmanager;

}
]]></Source>
			</Method>
			<Method>
				<Name>AutoPostJournal</Name>
				<Source><![CDATA[
    void AutoPostJournal(boolean autopost, LedgerJournalTable _jourTable, SKS_EFT_InboundFile lsks_eft_inboundfile, ledgerjournalid   journalnum)
    {
        LedgerJournalCheckPost  jourCheckPost;

        if(AutoPost)
        {
            jourCheckPost = ledgerJournalCheckPost::newLedgerJournalTable(_jourTable, NoYes::Yes, NoYes::Yes);

            jourCheckPost.run();
            info(strFmt("@SKS:SKGIHBCreatedInCompany", _jourTable.JournalNum, _jourTable.DataAreaId)); // SKS_FDD_9664

            SKS_EFT_Processing::createFileHistory(SKS_EFT_ActionHistory::PostedPaymReversed, lSKS_EFT_InboundFile.OutboundFileRecId, sks_eft_inboundfileline.InboundFileNbr,
                                                  "@SKS3034", JournalNum);
        }
        else
        {
            info("@SKS3017");
            info(strFmt("@SKS:SKGIHBCreatedInCompany", _jourTable.JournalNum,_jourTable.DataAreaId)); // SKS_FDD_9664
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableDisable</Name>
				<Source><![CDATA[
    public void enableDisable()
    {
        SKS_EFT_InboundTransCompletion lSKS_EFT_InboundTransCompletion;
        SKS_EFT_Bank        lsks_eft_bank;
        SKS_EFTCNP_Bank        lsks_eftcnp_bank;
        LedgerJournalTrans  lLedgerJournalTrans;
        LedgerJournalTable  lLedgerJournalTable;
        SKS_EFT_FileDetail  lsks_eft_filedetailLoc; //SKS_FDD_10590
        ;

        reversepostedpayment.enabled(false);

        if (mSKS_EFT_InboundFile.Module == SKS_EFT_Module::BTB)
        {
            reversepostedpayment.visible(false);
        }
        if (mSKS_EFT_InboundFile.Module == SKS_EFT_Module::CNP)
        {
            reversepostedpayment.visible(true);
        }
        if(SKS_EFT_InboundFileLine.FileDetailRecId != 0)
        {
            SKS_EFT_InboundFileLine_ds.object(fieldNum(SKS_EFT_InboundFileLine, filedetailrecid)).allowEdit(false);
        }
        else
        {
            SKS_EFT_InboundFileLine_ds.object(fieldNum(SKS_EFT_InboundFileLine, filedetailrecid)).allowEdit(true);
        }
        if (SKS_EFT_InboundFileLine)
        {
            select firstOnly lSKS_EFT_InboundTransCompletion
                where lSKS_EFT_InboundTransCompletion.InboundFileGroupId == mSKS_EFT_InboundFile.InboundFileGroupId
                    && lSKS_EFT_InboundTransCompletion.InboundStatusRecID == SKS_EFT_InboundFileLine.InboundStatusesRecId;
            if (lSKS_EFT_InboundTransCompletion)
            {
                AddStatusAction.enabled(false);
            }
            else
            {
                AddStatusAction.enabled(true);
            }
        }
        else
        {
            AddStatusAction.enabled(false);
        }

        if(SKS_EFT_InboundFileLine.Action == SKS_EFT_InboundPossibleActions::RejectFailure)
        {
            select firstonly lsks_eft_filedetailLoc where lsks_eft_filedetailLoc.RecId == SKS_EFT_InboundFileLine.FileDetailRecId;

            if(lsks_eft_filedetailLoc)
            {
                changecompany(lsks_eft_filedetailLoc.PaymentCompany ? lsks_eft_filedetailLoc.PaymentCompany : lsks_eft_filedetailLoc.DataAreaId)
                {
                    lLedgerJournalTrans = null;
                    lLedgerJournaltable = null;

                    select firstonly JournalNum, RecId from lLedgerJournalTrans
                        where lledgerJournalTrans.recid == lsks_eft_filedetailLoc.PaymentLineRecId
                    join JournalNum, Posted from lLedgerJournalTable
                        where lLedgerJournalTrans.JournalNum == lLedgerJournaltable.journalnum
                        && lLedgerJournaltable.Posted == NoYes::Yes;
                }
            }

            if (mSKS_EFT_InboundFile.Module == SKS_EFT_Module::CNP)
            {
                lsks_eftcnp_bank  = SKS_EFTCNP_Bank::findByCompany(lsks_eft_filedetailLoc.PaymentCompany ? lsks_eft_filedetailLoc.PaymentCompany : lsks_eft_filedetailLoc.DataAreaId, lsks_eft_filedetailLoc.BankAccountId, lsks_eft_filedetailLoc.PaymMode);
    
                if(lsks_eftcnp_bank.AllowPostedPmtReversal == NoYes::Yes && lLedgerJournalTrans)
                {
                    reversepostedpayment.enabled(true);
                }
                else
                {
                    reversepostedpayment.enabled(false);
                }
            }
            else
            {
                lsks_eft_bank  = SKS_EFT_Bank::findByCompany(lsks_eft_filedetailLoc.PaymentCompany ? lsks_eft_filedetailLoc.PaymentCompany : lsks_eft_filedetailLoc.DataAreaId, lsks_eft_filedetailLoc.BankAccountId, lsks_eft_filedetailLoc.PaymMode);

                if(lsks_eft_bank.AllowPostedPmtReversal == NoYes::Yes && lLedgerJournalTrans)
                {
                    reversepostedpayment.enabled(true);
                }
                else
                {
                    reversepostedpayment.enabled(false);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        //<SKS-begin>
        SKS_EFT_InboundFile sks_EFT_InboundFile;
        //</SKS-end>

        super();

        if (element.args().record() && element.args().record().TableId == tablenum(SKS_EFT_InboundFile))
        {
            mSKS_EFT_InboundFile = element.args().record();
        }
        else
        {
            throw error("@SYS111577"); //Invalid argument
        }
        //<SKS-begin>
        sks_EFT_InboundFile = element.args().record();

        if (sks_EFT_InboundFile.Module == SKS_EFT_Module::AP && element.args().menuItemName() == menuitemDisplayStr(SKS_EFT_InboundFileLine))
        {
            this.design().caption("@SKS6133");
        }
        else if (sks_EFT_InboundFile.Module == SKS_EFT_Module::BTB)
        {
            this.design().caption('Bank to bank inbound file details');
            FormTabPageControl2.caption('Transfer info');
            SKS_EFT_InboundFileLine_PaymDate.label('Transfer date');
            SKS_EFT_InboundFileLine_PaymAmtCurr.label('Currency');
            ReferenceGroupOutboundFileDetail.label('Transfer reference');
        }
        else if (sks_EFT_InboundFile.Module == SKS_EFT_Module::CNP)
        {
            this.design().caption('Customer reimbursements inbound file details');
            
        }
        else if (element.args().menuItemName() == menuitemDisplayStr(SKS_EFT_APIInboundFileLine))
        {
            this.design().caption("@SKS:SKGAPIInboundDetails");
        }
        else
        {
            this.design().caption("@SKS6135");
        }
        //</SKS-end>
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>SKS_EFT_InboundFileLine</Name>
				<Methods>
					<Method>
						<Name>linkActive</Name>
						<Source><![CDATA[
        public void linkActive()
        {
            super();
            element.enableDisable();
        }

]]></Source>
					</Method>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        public int active()
        {
            int ret;

            ;
            ret = super();

            element.enableDisable();
            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>selectionChanged</Name>
						<Source><![CDATA[
        /// <summary>
        /// To enable or disable the reverse posted payment button.
        /// </summary>
        // 9192 CR
        public void selectionChanged()
        {
            int                         markedRecord;
            boolean                     ret;
            SKS_EFT_Bank                lsks_eft_bank;
            SKS_EFTAR_Bank              lsks_eftar_bank;
            //SKS_EFTBTB_Bank             lsks_eftbtb_bank;
            SKS_EFTCNP_Bank             lsks_eftcnp_bank;
            LedgerJournalTrans          lLedgerJournalTrans;
            LedgerJournalTrans          localLedgerjournaltrans;
            LedgerJournalTable          lLedgerJournaltable;
            SKS_EFT_FileDetail          sKS_EFT_FileDetail;
            SKS_EFT_InboundFileLine     sKS_EFT_InboundFileLineLoc;
            MultiSelectionHelper        selectionHelper = MultiSelectionHelper::construct();

            super();
            selectionHelper.parmDataSource(SKS_EFT_InboundFileLine_DS);
            sKS_EFT_InboundFileLineLoc = selectionHelper.getFirst();
            markedRecord = SKS_EFT_InboundFileLine_DS.recordsMarked().lastIndex();
            while (sKS_EFT_InboundFileLineLoc)
            {
                if(sKS_EFT_InboundFileLineLoc.Action == SKS_EFT_InboundPossibleActions::RejectFailure)
                {
                    select firstonly Module, bankAccountID, PaymMode, PaymentLineRecId, PaymentCompany from sKS_EFT_FileDetail //SKS_FDD_10590
                        where sKS_EFT_FileDetail.RecId == sKS_EFT_InboundFileLineLoc.FileDetailRecId;
                    if(sKS_EFT_FileDetail.PaymentCompany) //SKS_FDD_10590 --->
                    {
                        changecompany(sKS_EFT_FileDetail.PaymentCompany)
                        {
                            lLedgerJournalTrans = null;
                            lLedgerJournaltable = null;

                            select firstonly JournalNum, RecId, Company from lLedgerJournalTrans where lledgerJournalTrans.recid == sKS_EFT_FileDetail.PaymentLineRecId
                            join JournalNum, Posted from lLedgerJournalTable
                                where lLedgerJournalTrans.JournalNum == lLedgerJournaltable.journalnum
                                    && lLedgerJournaltable.Posted == NoYes::Yes;
                        }
                    }//<--- SKS_FDD_10590
                    else
                    {
                        select firstonly JournalNum, RecId, Company from lLedgerJournalTrans where lledgerJournalTrans.recid == sKS_EFT_FileDetail.PaymentLineRecId //FDD-10590
                        join JournalNum, Posted from lLedgerJournalTable
                            where lLedgerJournalTrans.JournalNum == lLedgerJournaltable.journalnum
                                && lLedgerJournaltable.Posted == NoYes::Yes;
                    }
                    if(lLedgerJournalTrans)
                    {
                        if(sKS_EFT_FileDetail.Module == SKS_EFT_Module::AP)
                        {
                            if(sKS_EFT_FileDetail.PaymentCompany) //SKS_FDD_10590 --->
                            {
                                lsks_eft_bank = SKS_EFT_Bank::findByCompany(sKS_EFT_FileDetail.PaymentCompany, sKS_EFT_FileDetail.bankAccountID, sKS_EFT_FileDetail.PaymMode);
                            }//SKS_FDD_10590 <--
                            else
                            {
                                select firstonly AllowPostedPmtReversal, BankAccountID, paymmode from lsks_eft_bank
                                    where lsks_eft_bank.BankAccountId == sKS_EFT_FileDetail.bankAccountID
                                        && lsks_eft_bank.PaymMode == sKS_EFT_FileDetail.PaymMode;
                            }
                            if(lLedgerJournalTrans.Company != curExt())
                            {
                                changecompany(lLedgerJournalTrans.Company)
                                {
                                    select localLedgerjournaltrans where localLedgerjournaltrans.ForeignVoucher == lLedgerJournalTrans.voucher
                                        && localLedgerJournalTrans.ForeignCompany == lLedgerJournalTrans.dataAreaId
                                        && localLedgerjournaltrans.Invoice == lLedgerJournalTrans.Invoice
                                        && localLedgerjournaltrans.AmountCurCredit == lLedgerJournalTrans.AmountCurCredit
                                        && localLedgerjournaltrans.AmountCurDebit == lLedgerJournalTrans.AmountCurDebit
                                        && localLedgerjournaltrans.TransDate == lLedgerJournalTrans.TransDate
                                        && localLedgerjournaltrans.LedgerDimension == lLedgerJournalTrans.LedgerDimension
                                        && localLedgerjournaltrans.VendTransId != 0;

                                    ret = SKS_EFT_Reversal::checkVendTransCanBeReversed(localLedgerjournaltrans, sKS_EFT_FileDetail);
                                }
                            }
                            else
                            {
                                ret = SKS_EFT_Reversal::checkVendTransCanBeReversed(lLedgerJournalTrans, sKS_EFT_FileDetail);
                            }
                            if(lsks_eft_bank.AllowPostedPmtReversal == NoYes::Yes && ret)
                            {
                                reversepostedpayment.enabled(true);
                            }
                            else
                            {
                                reversepostedpayment.enabled(false);
                                break;
                            }
                        }
                        //else if(sKS_EFT_FileDetail.Module == SKS_EFT_Module::BTB)
                        //{
                        //    if(sKS_EFT_FileDetail.PaymentCompany) //SKS_FDD_10590 --->
                        //    {
                        //        lsks_eftbtb_bank = SKS_EFTBTB_Bank::findByCompany(sKS_EFT_FileDetail.PaymentCompany, sKS_EFT_FileDetail.bankAccountID, sKS_EFT_FileDetail.PaymMode);
                        //    }
                        //    //SKS_FDD_10590 <--
                        //    else
                        //    {
                        //        select firstonly BankAccountID, paymmode from lsks_eftbtb_bank
                        //            where lsks_eftbtb_bank.BankAccountId == sKS_EFT_FileDetail.bankAccountID
                        //                && lsks_eftbtb_bank.PaymMode == sKS_EFT_FileDetail.PaymMode;
                        //    }
                        //    if(lLedgerJournalTrans.Company != curExt())
                        //    {
                        //        changecompany(lLedgerJournalTrans.Company)
                        //        {
                        //            select localLedgerjournaltrans where localLedgerjournaltrans.ForeignVoucher == lLedgerJournalTrans.voucher
                        //                && localLedgerJournalTrans.ForeignCompany == lLedgerJournalTrans.dataAreaId
                        //                && localLedgerjournaltrans.Invoice == lLedgerJournalTrans.Invoice
                        //                && localLedgerjournaltrans.AmountCurCredit == lLedgerJournalTrans.AmountCurCredit
                        //                && localLedgerjournaltrans.AmountCurDebit == lLedgerJournalTrans.AmountCurDebit
                        //                && localLedgerjournaltrans.TransDate == lLedgerJournalTrans.TransDate
                        //                && localLedgerjournaltrans.LedgerDimension == lLedgerJournalTrans.LedgerDimension
                        //                && localLedgerjournaltrans.VendTransId != 0;

                        //            //ret = SKS_EFT_Reversal::checkBankTransCanBeReversed(localLedgerjournaltrans, sKS_EFT_FileDetail);
                        //        }
                        //    }
                        //    //else
                        //    //{
                        //    //    ret = SKS_EFT_Reversal::checkBankTransCanBeReversed(lLedgerJournalTrans, sKS_EFT_FileDetail);
                        //    //}
                        //}
                        else if(sKS_EFT_FileDetail.Module == SKS_EFT_Module::AR)
                        {
                            if(sKS_EFT_FileDetail.PaymentCompany)//SKS_FDD_10590 -->
                            {
                                lsks_eftar_bank = SKS_EFTAR_Bank::findByCompany(sKS_EFT_FileDetail.PaymentCompany, sKS_EFT_FileDetail.bankAccountID, sKS_EFT_FileDetail.PaymMode);
                            } //SKS_FDD_10590 <--
                            else
                            {
                                select firstonly AllowPostedPmtReversal, BankAccountID, paymmode from lsks_eftar_bank
                                    where lsks_eftar_bank.BankAccountId == sKS_EFT_FileDetail.bankAccountID
                                        && lsks_eftar_bank.PaymMode == sKS_EFT_FileDetail.PaymMode;
                            }
                            if(lLedgerJournalTrans.Company != curExt())
                            {
                                changecompany(lLedgerJournalTrans.Company)
                                {
                                    select localLedgerjournaltrans where localLedgerjournaltrans.ForeignVoucher == lLedgerJournalTrans.voucher
                                        && localLedgerJournalTrans.ForeignCompany == lLedgerJournalTrans.dataAreaId
                                        && localLedgerjournaltrans.Invoice == lLedgerJournalTrans.Invoice
                                        && localLedgerjournaltrans.AmountCurCredit == lLedgerJournalTrans.AmountCurCredit
                                        && localLedgerjournaltrans.AmountCurDebit == lLedgerJournalTrans.AmountCurDebit
                                        && localLedgerjournaltrans.TransDate == lLedgerJournalTrans.TransDate
                                        && localLedgerjournaltrans.LedgerDimension == lLedgerJournalTrans.LedgerDimension
                                        && localLedgerjournaltrans.CustTransId != 0;

                                    ret = SKS_EFT_Reversal::checkCustTransCanBeReversed(localLedgerjournaltrans, sKS_EFT_FileDetail);
                                }
                            }
                            else
                            {
                                ret = SKS_EFT_Reversal::checkCustTransCanBeReversed(lLedgerJournalTrans, sKS_EFT_FileDetail);
                            }
                            if(lsks_eftar_bank.AllowPostedPmtReversal == NoYes::Yes && ret)
                            {
                                reversepostedpayment.enabled(true);
                            }
                            else
                            {
                                reversepostedpayment.enabled(false);
                                break;
                            }
                        }
                    }
                    else if(sKS_EFT_FileDetail.Module == SKS_EFT_Module::CNP)
                    {
                        if(sKS_EFT_FileDetail.PaymentCompany)//SKS_FDD_10590 -->
                        {
                            lsks_eftcnp_bank = SKS_EFTCNP_Bank::findByCompany(sKS_EFT_FileDetail.PaymentCompany, sKS_EFT_FileDetail.bankAccountID, sKS_EFT_FileDetail.PaymMode);
                        }
                        //SKS_FDD_10590 <--
                        else
                        {
                            select firstonly AllowPostedPmtReversal, BankAccountID, paymmode from lsks_eftcnp_bank
                                    where lsks_eftcnp_bank.BankAccountId == sKS_EFT_FileDetail.bankAccountID
                                        && lsks_eftcnp_bank.PaymMode == sKS_EFT_FileDetail.PaymMode;
                        }
                        if(lLedgerJournalTrans.Company != curExt())
                        {
                            changecompany(lLedgerJournalTrans.Company)
                            {
                                select localLedgerjournaltrans where localLedgerjournaltrans.ForeignVoucher == lLedgerJournalTrans.voucher
                                        && localLedgerJournalTrans.ForeignCompany == lLedgerJournalTrans.dataAreaId
                                        && localLedgerjournaltrans.Invoice == lLedgerJournalTrans.Invoice
                                        && localLedgerjournaltrans.AmountCurCredit == lLedgerJournalTrans.AmountCurCredit
                                        && localLedgerjournaltrans.AmountCurDebit == lLedgerJournalTrans.AmountCurDebit
                                        && localLedgerjournaltrans.TransDate == lLedgerJournalTrans.TransDate
                                        && localLedgerjournaltrans.LedgerDimension == lLedgerJournalTrans.LedgerDimension
                                        && localLedgerjournaltrans.CustTransId != 0;

                                ret = SKS_EFT_Reversal::checkCustTransCanBeReversed(localLedgerjournaltrans, sKS_EFT_FileDetail);
                            }
                        }
                        else
                        {
                            ret = SKS_EFT_Reversal::checkCustTransCanBeReversed(lLedgerJournalTrans, sKS_EFT_FileDetail);
                        }
                        if(lsks_eftcnp_bank.AllowPostedPmtReversal == NoYes::Yes && ret)
                        {
                            reversepostedpayment.enabled(true);
                        }
                        else
                        {
                            reversepostedpayment.enabled(false);
                            break;
                        }
                    }
                        
                }
                else
                {
                    reversepostedpayment.enabled(false);
                    break;
                }
                sKS_EFT_InboundFileLineLoc = selectionHelper.getNext();
            }
        }

]]></Source>
					</Method>
				</Methods>
				<Fields>
					<Field>
						<DataField>FileDetailRecId</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                if(sks_eft_inboundfileline.filedetailrecid != 0)
                {
                    sks_eft_inboundfileline_ds.object(fieldnum(sks_eft_inboundFileline,filedetailrecid)).allowedit(false);
                    SKS_EFT_InboundFileLine.update();
                    SKS_EFT_InboundFiles::findStatus(mSKS_EFT_InboundFile);
                    SKS_EFT_InboundFileLine_ds.research(true);

                }
                else
                {
                    sks_eft_inboundfileLine_ds.object(fieldnum(sks_eft_inboundFileline,filedetailrecid)).allowedit(true);
                }
            }

]]></Source>
							</Method>
							<Method>
								<Name>validate</Name>
								<Source><![CDATA[
            public boolean validate()
            {
                boolean ret;

                ret = super();

                if(ret)
                {
                    if (Box::yesNo("@SKS2863", DialogButton::No) == DialogButton::Yes)
                    {
                        ret = true;
                    }
                    else
                    {
                        ret = false;
                    }
                }

                return ret;
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
				</Fields>
			</DataSource>
			<DataSource>
				<Name>SKS_EFT_InboundStatuses</Name>
				<Methods>
					<Method>
						<Name>validateWrite</Name>
						<Source><![CDATA[
        public boolean validateWrite()
        {
           // boolean ret;

            //ret = super();

            return true;
        }

]]></Source>
					</Method>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        public void write()
        {
            //super();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>SKS_EFT_InboundReasonCodes</Name>
				<Methods>
					<Method>
						<Name>validateWrite</Name>
						<Source><![CDATA[
        public boolean validateWrite()
        {
            //boolean ret;

            //ret = super();

            return true;
        }

]]></Source>
					</Method>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        public void write()
        {
            //super();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>AddStatusAction</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            Dialog                      dialog;
            DialogField                 pjStatus;
            DialogField                 apply2All;
            SKS_EFT_FileDetail          lsks_EFT_FileDetail;
            SKS_EFT_InboundFile         lsks_EFT_InboundFile;
            SKS_EFT_InboundFileLine     lsks_EFT_InboundFileLine;
            SKS_EFT_InboundTransCompletion inboundTransCompletion;

            ;

            // Create Default Bank Account Information dialog
            dialog = new Dialog("@SKS2910");
            PJStatus = dialog.addField(enumStr(SKS_EFT_PaymentJournalStatus));
            apply2All = dialog.addField(enumStr(NoYes),strFmt("@SKS2912",SKS_EFT_InboundStatuses.StatusId));
            apply2All.value(NoYes::Yes);
            if (dialog.run())
            {
                ttsBegin;
                inboundTransCompletion.InboundFileGroupId = mSKS_EFT_InboundFile.InboundFileGroupId;
                inboundTransCompletion.InboundStatusRecID = SKS_EFT_InboundFileLine.InboundStatusesRecId;
                inboundTransCompletion.PaymentJournalStatus = PJStatus.value();
                inboundTransCompletion.insert();
                if (apply2All)
                {
                    while select RecId from lsks_EFT_InboundFile
                            where lsks_EFT_InboundFile.InboundFileGroupId == mSKS_EFT_InboundFile.InboundFileGroupId
                            join forUpdate lsks_EFT_InboundFileLine
                                where lsks_EFT_InboundFileLine.InboundFileNbr == lsks_EFT_InboundFile.InboundFileNbr
                                    && lsks_EFT_InboundFileLine.InboundStatusesRecId == SKS_EFT_InboundFileLine.InboundStatusesRecId
                                    && lsks_EFT_InboundFileLine.FileDetailRecId != 0
                            join lsks_EFT_FileDetail
                                where lsks_EFT_InboundFileLine.FileDetailRecId == lsks_EFT_FileDetail.RecId
                    {
                        lsks_EFT_InboundFileLine.updatepaymentjournalLines(lsks_EFT_FileDetail, PJStatus.value());
                        lsks_EFT_InboundFileLine.update();
                    }
                }
                ttsCommit;
                FormDataUtil::getFormDataSource(mSKS_EFT_InboundFile).research(true);
            }
            return;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Reversepostedpayment</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            SKS_EFT_FileDetail  lsks_eft_filedetail;
            LedgerJournalTable  PaymJournal;
            SKS_EFT_InboundFile lSKS_EFT_InboundFile;
            LedgerJournalId     JournalNum;
            boolean             autopost;
            BankChequeTable     lBankChequeTable;
            LedgerJournalTrans  lLedgerJournalTrans;
            SKS_EFT_Bank        sks_eft_bank;
            SKS_EFTAR_Bank      sks_eftar_bank;
            SKS_EFTCNP_Bank     sks_eftcnp_bank;
            //<SKS-begin>
            SKS_EFT_InboundFile SKS_EFT_InboundFileAP;
            SKS_EFT_InboundFile SKS_EFT_InboundFileAR;
            SKS_EFT_InboundFile SKS_EFT_InboundFileCNP;
            //</SKS-end>
            // 9192 CR -->
            int                         cnt = 0;
            int                         markedRecord;
            SKS_EFT_InboundFileLine     sKS_EFT_InboundFileLineLoc;
            MultiSelectionHelper        selectionHelper = MultiSelectionHelper::construct();
            // 9192 CR <--
            // CR-9541 -->
            LedgerJournalNameId     revJournalName;
            PaymMode                revPaymMode;
            // CR-9541 <--
            Args argsBankChequeTable = new Args();
            TransDate latestDate;
            SKS_EFT_Setup sks_eft_setup;

            super();

            // 9192 CR -->
            selectionHelper.parmDataSource(SKS_EFT_InboundFileLine_DS);
            sKS_EFT_InboundFileLineLoc = selectionHelper.getFirst();
            markedRecord = SKS_EFT_InboundFileLine_DS.recordsMarked().lastIndex();

            select firstonly PaymentLineRecId from lsks_eft_filedetail where lsks_eft_filedetail.RecId == sKS_EFT_InboundFileLineLoc.FileDetailRecId;

            while (sKS_EFT_InboundFileLineLoc)
            {
                if(lsks_eft_filedetail.PaymentCompany)
                {
                    changecompany(lsks_eft_filedetail.PaymentCompany)
                    {
                        lLedgerJournalTrans = null;
                        select firstOnly TransDate from lLedgerJournalTrans where lLedgerJournalTrans.RecId == lsks_eft_filedetail.PaymentLineRecId;
                    }
                }
                else
                {
                    select firstOnly TransDate from lLedgerJournalTrans where lLedgerJournalTrans.RecId == lsks_eft_filedetail.PaymentLineRecId;
                }

                if(lLedgerJournalTrans.TransDate > latestDate)
                {
                    latestDate = lLedgerJournalTrans.TransDate;
                }

                sKS_EFT_InboundFileLineLoc = selectionHelper.getNext();
            }

            TransDate reversalDate = SKS_PP_Sys::getReversalDate(latestDate);

            sKS_EFT_InboundFileLineLoc = selectionHelper.getFirst();

            while (sKS_EFT_InboundFileLineLoc)
            {
                SKS_EFT_InboundFileLine = sKS_EFT_InboundFileLineLoc;
                cnt++;
                //SKS_FDD_10590 -->
                select RecId, PaymentLineRecId, PaymMode, BankAccountID, Module, filerecid, PaymentCompany from lsks_eft_filedetail
                    where lsks_eft_filedetail.RecId == SKS_EFT_InboundFileLine.FileDetailRecId;

                if(lsks_eft_filedetail.Module == SKS_EFT_Module::AP)
                {
                    select firstonly RecId from SKS_EFT_InboundFileAP  where SKS_EFT_InboundFileAP.InboundFileNbr == SKS_EFT_InboundFileLine.InboundFileNbr;
                }
                else if(lsks_eft_filedetail.Module == SKS_EFT_Module::CNP)
                {
                    select firstonly RecId from SKS_EFT_InboundFileCNP  where SKS_EFT_InboundFileCNP.InboundFileNbr == SKS_EFT_InboundFileLine.InboundFileNbr;
                }
                else
                {
                    select firstonly RecId from SKS_EFT_InboundFileAR  where SKS_EFT_InboundFileAR.InboundFileNbr == SKS_EFT_InboundFileLine.InboundFileNbr;
                }
                //SKS_FDD_10590 <--
                if(lsks_eft_filedetail.PaymentCompany) //SKS_FDD_10590 --->
                {
                    changecompany(lsks_eft_filedetail.PaymentCompany)
                    {
                        lBankChequeTable = null;
                        lLedgerJournalTrans = null;
                        sks_eft_bank = null;
                        sks_eftar_bank = null;
                        sks_eft_setup = null;

                        select firstOnly lLedgerJournalTrans where lLedgerJournalTrans.RecId == lsks_eft_filedetail.PaymentLineRecId;

                        if(lsks_eft_filedetail.Module == SKS_EFT_Module::AP)
                        {
                            select firstonly sks_eft_bank where sks_eft_bank.BankAccountId == lsks_eft_filedetail.BankAccountId
                            && sks_eft_bank.PaymMode == lsks_eft_filedetail.PaymMode;
                            autopost = sks_eft_bank.AutoPostPaymentJournal;
                            // CR-9541 -->
                            revJournalName = sks_eft_bank.RevJournalName;
                            revPaymMode = sks_eft_bank.RevPaymMode;
                            // CR-9541 <--

                        }
                        if(lsks_eft_filedetail.Module == SKS_EFT_Module::CNP)
                        {
                            select firstonly sks_eftcnp_bank where sks_eftcnp_bank.BankAccountId == lsks_eft_filedetail.BankAccountId
                            && sks_eftcnp_bank.PaymMode == lsks_eft_filedetail.PaymMode;
                            autopost = sks_eftcnp_bank.AutoPostPaymentJournal;

                            revJournalName = sks_eftcnp_bank.RevJournalName;
                            revPaymMode = sks_eftcnp_bank.RevPaymMode;

                        }
                        else
                        {
                            select firstonly sks_eftar_bank where sks_eftar_bank.BankAccountId == lsks_eft_filedetail.BankAccountId
                                && sks_eftar_bank.PaymMode == lsks_eft_filedetail.PaymMode;
                            autopost = sks_eftar_bank.AutoPostPaymentJournal;
                            // CR-9541 -->
                            revJournalName = sks_eftar_bank.RevJournalName;
                            revPaymMode = sks_eftar_bank.RevPaymMode;
                            // CR-9541 <--
                        }
                        // 9192 CR <--
                        if(lLedgerJournalTrans.BankChequeNum != '')
                        {
                            select lBankChequeTable where lBankChequeTable.ChequeNum == lLedgerJournalTrans.BankChequeNum
                        && lBankChequeTable.AccountID == lsks_eft_filedetail.BankAccountId;
                            argsBankChequeTable.record(lBankChequeTable);

                            BankChequeCancel::main(argsBankChequeTable);

                            SKS_EFT_Processing::createFileHistory(SKS_EFT_ActionHistory::paymReversalCreated, lSKS_EFT_InboundFile.OutboundFileRecId, sks_eft_inboundfileline.InboundFileNbr,
                                strFmt("@SKS3042", lBankChequeTable.ChequeNum), '');
                        }
                        else
                        {
                            ttsBegin;
                            PaymJournal = SKS_EFT_Reversal::createCustVendBankReversal(PaymJournal, lLedgerJournalTrans, revPaymMode, reversalDate, lsks_eft_filedetail, null, revJournalName); // CR-9541
                            ttsCommit;
                        }

                        if(lLedgerJournalTrans.BankChequeNum == '')
                        {
                            JournalNum = PaymJournal.JournalNum;
                            changecompany(lsks_eft_filedetail.DataAreaId) // SKS_FDD_10590
                            {
                                select firstonly outboundfilerecid from lSKS_EFT_InboundFile where lSKS_EFT_InboundFile.InboundFileNbr == SKS_EFT_InboundFileLine.InboundFileNbr;
                            }
                            try
                            {
                                // 9192 CR -->
                                if(markedRecord <=  cnt)
                                {
                                    element.AutoPostJournal(AutoPost, PaymJournal, lsks_eft_inboundFile, Journalnum);
                                }
                                // 9192 CR <--
                            }
                            catch
                            {
                                //call sks_eft_filehistory method to inform of failure
                                SKS_EFT_Processing::createFileHistory(SKS_EFT_ActionHistory::paymReversalFailed, lSKS_EFT_InboundFile.OutboundFileRecId, sks_eft_inboundfileline.InboundFileNbr,
                            '', JournalNum);
                            }
                            // 9192 CR -->
                        }
                    }

                } //<--- SKS_FDD_10590
                else
                {
                    select firstOnly lLedgerJournalTrans where lLedgerJournalTrans.RecId == lsks_eft_filedetail.PaymentLineRecId;

                    if(lsks_eft_filedetail.Module == SKS_EFT_Module::AP)
                    {
                        select firstonly sks_eft_bank where sks_eft_bank.BankAccountId == lsks_eft_filedetail.BankAccountId
                            && sks_eft_bank.PaymMode == lsks_eft_filedetail.PaymMode;
                        autopost = sks_eft_bank.AutoPostPaymentJournal;
                        // CR-9541 -->
                        revJournalName = sks_eft_bank.RevJournalName;
                        revPaymMode = sks_eft_bank.RevPaymMode;
                        // CR-9541 <--

                    }
                    else if(lsks_eft_filedetail.Module == SKS_EFT_Module::CNP)
                    {
                        select firstonly sks_eftcnp_bank where sks_eftcnp_bank.BankAccountId == lsks_eft_filedetail.BankAccountId
                            && sks_eftcnp_bank.PaymMode == lsks_eft_filedetail.PaymMode;
                        autopost = sks_eftcnp_bank.AutoPostPaymentJournal;

                        revJournalName = sks_eftcnp_bank.RevJournalName;
                        revPaymMode = sks_eftcnp_bank.RevPaymMode;
                    }
                    else
                    {
                        select firstonly sks_eftar_bank where sks_eftar_bank.BankAccountId == lsks_eft_filedetail.BankAccountId
                                && sks_eftar_bank.PaymMode == lsks_eft_filedetail.PaymMode;
                        autopost = sks_eftar_bank.AutoPostPaymentJournal;
                        // CR-9541 -->
                        revJournalName = sks_eftar_bank.RevJournalName;
                        revPaymMode = sks_eftar_bank.RevPaymMode;
                        // CR-9541 <--
                    }
                    // 9192 CR <--
                    if(lLedgerJournalTrans.BankChequeNum != '')
                    {
                        select lBankChequeTable where lBankChequeTable.ChequeNum == lLedgerJournalTrans.BankChequeNum
                        && lBankChequeTable.AccountID == lsks_eft_filedetail.BankAccountId;
                        argsBankChequeTable.record(lBankChequeTable);

                        BankChequeCancel::main(argsBankChequeTable);

                        SKS_EFT_Processing::createFileHistory(SKS_EFT_ActionHistory::paymReversalCreated, lSKS_EFT_InboundFile.OutboundFileRecId, sks_eft_inboundfileline.InboundFileNbr,
                                strFmt("@SKS3042", lBankChequeTable.ChequeNum), '');
                    }
                    else
                    {
                        ttsBegin;
                        PaymJournal = SKS_EFT_Reversal::createCustVendBankReversal(PaymJournal, lLedgerJournalTrans, revPaymMode, reversalDate, lsks_eft_filedetail, null, revJournalName); // CR-9541
                        ttsCommit;
                    }

                    if(lLedgerJournalTrans.BankChequeNum == '')
                    {
                        JournalNum = PaymJournal.JournalNum;
                        changecompany(lsks_eft_filedetail.DataAreaId) // SKS_FDD_10590
                        {
                            select firstonly outboundfilerecid from lSKS_EFT_InboundFile where lSKS_EFT_InboundFile.InboundFileNbr == SKS_EFT_InboundFileLine.InboundFileNbr;
                        }
                        try
                        {
                            // 9192 CR -->
                            if(markedRecord <=  cnt)
                            {
                                element.AutoPostJournal(AutoPost, PaymJournal, lsks_eft_inboundFile, Journalnum);
                            }
                            // 9192 CR <--
                        }
                        catch
                        {
                            //call sks_eft_filehistory method to inform of failure
                            SKS_EFT_Processing::createFileHistory(SKS_EFT_ActionHistory::paymReversalFailed, lSKS_EFT_InboundFile.OutboundFileRecId, sks_eft_inboundfileline.InboundFileNbr,
                            '', JournalNum);
                        }
                        // 9192 CR -->
                    }
                }

                sKS_EFT_InboundFileLineLoc = selectionHelper.getNext();
                // 9192 CR <--
            }
            ReversePostedPayment.enabled(false); // 9192 CR
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ReferenceGroupOutboundFileDetail</Name>
				<Type>ReferenceGroup</Type>
				<Methods>
					<Method>
						<Name>lookupReference</Name>
						<Source><![CDATA[
        public Common lookupReference()
        {
            SKS_EFT_FileDetail      lSKS_EFT_FileDetail;
            Query                   query = new Query();
            QueryBuildDataSource    queryBuildDataSource;
            QueryBuildRange         queryBuildRange;

            // Create an instance of SysTableLookup where 'this' is the current form control
            SysReferenceTableLookup sysTableLookup = SysReferenceTableLookup::newParameters(tableNum(SKS_EFT_FileDetail), ReferenceGroupOutboundFileDetail, true);
            ;

            // Add fields to be shown in the lookup form
            sysTableLookup.addLookupField(fieldNum(SKS_EFT_FileDetail, PaymentReference));

            // Limit and arrange the data selection
            queryBuildDataSource = query.addDataSource(tableNum(SKS_EFT_FileDetail));
            queryBuildDataSource.addSortField(fieldNum(SKS_EFT_FileDetail, PaymentReference), SortOrder::Descending);

            // Restrict by outbound file
            queryBuildRange = queryBuildDataSource.addRange(fieldNum(SKS_EFT_FileDetail, FileRecId));
            queryBuildRange.value(int642str(mSKS_EFT_InboundFile.OutboundFileRecId));

            // Restrict to payment lines
            queryBuildRange = queryBuildDataSource.addRange(fieldNum(SKS_EFT_FileDetail, PaymentReference));
            queryBuildRange.value(sysquery::valueNotEmptyString());

            sysTableLookup.parmQuery(query);

            // Perform the lookup
            lSKS_EFT_FileDetail = sysTableLookup.performFormLookup();

            return lSKS_EFT_FileDetail;
        }

]]></Source>
					</Method>
					<Method>
						<Name>jumpRef</Name>
						<Source><![CDATA[
        public void jumpRef()
        {
            SKS_EFTAP_File eftFile;

            select firstOnly eftFile where eftFile.RecId == mSKS_EFT_InboundFile.OutboundFileRecId;

            Args arguments = new Args();
            arguments.record(eftFile);
            arguments.name(formStr(SKS_EFTAP_CreateSendFiles));
            arguments.parmEnum(msks_EFT_InboundFile.Module);

            FormRun formRun = classFactory.formRunClass(arguments);
            formRun.init();
            formRun.run();
            formRun.wait(true);

        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>SKS_EFT_InboundFileLine</Name>
			<Table>SKS_EFT_InboundFileLine</Table>
			<Fields>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>Action</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>AdditionalData</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>BankAmt</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>BankAmtCurr</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>BankRefNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>BankRefNum2</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>ExchRate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FileDetailRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>FileLineNbr</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>InboundFileNbr</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InboundReasonCodesRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>InboundRefNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InboundStatusesRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>InOutKeyFormat1</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>InOutKeyFormat2</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>InOutKeyFormat3</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>PaymAmtCurr</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>PaymDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>PaymentAmt</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>ReasonCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>StatusId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>SKS_EFT_InboundStatuses</Name>
			<Table>SKS_EFT_InboundStatuses</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FormatId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Origin</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>StatusId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>StatusIdDisplay</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>StatusType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>SKS_EFT_InboundFileLine</JoinSource>
			<LinkType>OuterJoin</LinkType>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>SKS_EFT_InboundReasonCodes</Name>
			<Table>SKS_EFT_InboundReasonCodes</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FormatId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Origin</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReasonCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReasonDesc</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>SKS_EFT_InboundFileLine</JoinSource>
			<LinkType>OuterJoin</LinkType>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@SKS2736</Caption>
		<DataSource xmlns="">SKS_EFT_InboundFileLine</DataSource>
		<Pattern xmlns="">Task</Pattern>
		<PatternVersion xmlns="">1.2</PatternVersion>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>ActionPane</Name>
				<ElementPosition>429496729</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Type>ActionPane</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>Actions</Name>
						<ElementPosition>1789569705</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>ButtonGroup</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>AddStatusAction</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1431655764</ElementPosition>
								<Enabled>No</Enabled>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<HelpText>@SKS2910</HelpText>
								<Type>Button</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Text>@SKS2911</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>Reversepostedpayment</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1789569705</ElementPosition>
								<Enabled>No</Enabled>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<HelpText>@SKS3040</HelpText>
								<Type>Button</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<MultiSelect>Yes</MultiSelect>
								<Text>@SKS3015</Text>
							</AxFormControl>
						</Controls>
						<ArrangeMethod>Vertical</ArrangeMethod>
					</AxFormControl>
				</Controls>
				<AlignChild>No</AlignChild>
				<AlignChildren>No</AlignChildren>
				<ArrangeMethod>Vertical</ArrangeMethod>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>FormGroupControl1</Name>
				<Pattern>CustomFilters</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls />
				<ArrangeMethod>HorizontalLeft</ArrangeMethod>
				<FrameType>None</FrameType>
				<Style>CustomFilter</Style>
				<ViewEditMode>Edit</ViewEditMode>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormTabControl">
				<Name>FormTabControl1</Name>
				<Type>Tab</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>FormTabPageControl1</Name>
						<Pattern>ToolbarList</Pattern>
						<PatternVersion>1.2</PatternVersion>
						<Type>TabPage</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGridControl">
								<Name>Grid</Name>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Grid</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>SKS_EFT_InboundFileLine_Action</Name>
										<ElementPosition>613566756</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>Action</DataField>
										<DataSource>SKS_EFT_InboundFileLine</DataSource>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>SKS_EFT_InboundFileLine_StatusId</Name>
										<ElementPosition>920350134</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>StatusId</DataField>
										<DataSource>SKS_EFT_InboundFileLine</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>SKS_EFT_InboundStatuses_StatusIdDisplay</Name>
										<ElementPosition>1150437667</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>StatusIdDisplay</DataField>
										<DataSource>SKS_EFT_InboundStatuses</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>SKS_EFT_InboundFileLine_ReasonCode</Name>
										<ElementPosition>1380525201</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>ReasonCode</DataField>
										<DataSource>SKS_EFT_InboundFileLine</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>SKS_EFT_InboundReasonCodes_ReasonDesc</Name>
										<ElementPosition>1474264565</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>ReasonDesc</DataField>
										<DataSource>SKS_EFT_InboundReasonCodes</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>SKS_EFT_InboundFileLine_AdditionalData</Name>
										<ElementPosition>1636178016</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>AdditionalData</DataField>
										<DataSource>SKS_EFT_InboundFileLine</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormReferenceGroupControl">
										<Name>ReferenceGroupOutboundFileDetail</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1891830831</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>ReferenceGroup</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls />
										<DataSource>SKS_EFT_InboundFileLine</DataSource>
										<Label>@SYS22514</Label>
										<ReferenceField>FileDetailRecId</ReferenceField>
										<ReplacementFieldGroup>OutboundLink</ReplacementFieldGroup>
									</AxFormControl>
								</Controls>
								<AlternateRowShading>No</AlternateRowShading>
								<DataSource>SKS_EFT_InboundFileLine</DataSource>
								<Style>Tabular</Style>
							</AxFormControl>
						</Controls>
						<Caption>@BI:BIOnDemandDeploy</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>FormTabPageControl2</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Pattern>FieldsFieldGroups</Pattern>
						<PatternVersion>1.1</PatternVersion>
						<Type>TabPage</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormDateControl">
								<Name>SKS_EFT_InboundFileLine_PaymDate</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>Date</Type>
								<FormControlExtension
									i:nil="true" />
								<DataField>PaymDate</DataField>
								<DataSource>SKS_EFT_InboundFileLine</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormRealControl">
								<Name>SKS_EFT_InboundFileLine_BankAmt</Name>
								<Type>Real</Type>
								<FormControlExtension
									i:nil="true" />
								<DataField>BankAmt</DataField>
								<DataSource>SKS_EFT_InboundFileLine</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>SKS_EFT_InboundFileLine_BankAmtCurr</Name>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<DataField>BankAmtCurr</DataField>
								<DataSource>SKS_EFT_InboundFileLine</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormRealControl">
								<Name>SKS_EFT_InboundFileLine_PaymentAmt</Name>
								<Type>Real</Type>
								<FormControlExtension
									i:nil="true" />
								<DataField>PaymentAmt</DataField>
								<DataSource>SKS_EFT_InboundFileLine</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>SKS_EFT_InboundFileLine_PaymAmtCurr</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<DataField>PaymAmtCurr</DataField>
								<DataSource>SKS_EFT_InboundFileLine</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>SKS_EFT_InboundFileLine_ExchRate</Name>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<DataField>ExchRate</DataField>
								<DataSource>SKS_EFT_InboundFileLine</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>SKS_EFT_InboundFileLine_BankRefNum</Name>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<DataField>BankRefNum</DataField>
								<DataSource>SKS_EFT_InboundFileLine</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>SKS_EFT_InboundFileLine_BankRefNum2</Name>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<DataField>BankRefNum2</DataField>
								<DataSource>SKS_EFT_InboundFileLine</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>SKS_EFT_InboundFileLine_InboundRefNum</Name>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<DataField>InboundRefNum</DataField>
								<DataSource>SKS_EFT_InboundFileLine</DataSource>
								<Label>@SKS:SKGInboundRefNum</Label>
							</AxFormControl>
						</Controls>
						<ColumnsMode>Fill</ColumnsMode>
						<Caption>@MCR30702</Caption>
					</AxFormControl>
				</Controls>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>