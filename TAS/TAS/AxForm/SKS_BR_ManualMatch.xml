<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>SKS_BR_ManualMatch</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class SKS_BR_ManualMatch extends FormRun
{
    #SKS_Global

    Guid myGuid;
    int selectedBATCount;
    int selectedSBBTCount;
    boolean keepChanges;
    SKS_BR_RecIdXRefList gBankAccountTrans_SKS_BR_RecIdXRefList;
    SKS_BR_RecIdXRefList gSKS_BR_BankTran_SKS_BR_RecIdXRefList;
    SKS_BR_BankAcctStmt gSKS_BR_BankAcctStmt;
    SKS_BR_ClickNMatchCriteria gSKS_BR_ClickNMatchCriteria;
    boolean gFormLoadCompleted;
    boolean gIsReconciled;
    boolean gFormModified;
    boolean Value;
    FormDataSource callingFormDataSourceBankAcctStmt;

}
]]></Source>
			</Method>
			<Method>
				<Name>activate</Name>
				<Source><![CDATA[
    public void activate(boolean _active)
    {
        super(_active);
        strEdtAcctStmtNum.text(gSKS_BR_BankAcctStmt.getAccountStmtNum());
        strEdtAcctStmtAcctID.text(gSKS_BR_BankAcctStmt.getAccountId());
        dateEdtAcctStmtDate.dateValue(gSKS_BR_BankAcctStmt.getAccountStatementDate());
        if(gIsReconciled)
        {
            BtnCancel.enabled(false);
            SKS_BR_BankTran_ds.allowEdit(false);
            BankAccountTrans_ds.allowEdit(false);
            SelectAllDisplayedBankAccountTrans.enabled(false);
            ClearAllBankAccountTransRegardlessOfFilter.enabled(false);
            SelectAllDisplayedSKS_BR_BANKTRAN.enabled(false);
            ClearAllSKS_BR_BANKTRANRegardlessOfFilter.enabled(false);

            //For reconciled statements, you can only see the match you had selected when you entered the form.
            //If no matched record was selected on the preceding form(SKS_BR_BankTran or SKS_BR_ReconcileStatement),
            //   then nothing gets displayed.
            SKS_BR_MatchFilter.selection(SKS_BR_MatchFilter::Matched);
            SKS_BR_MatchFilter.enabled(false);

        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>cancel</Name>
				<Source><![CDATA[
    public void cancel()
    {
        //clear all selections from BANKACCOUTTRANS & SKS_BR_BANKTRAN tables
        ttsbegin;
        SKS_BR_Matching::removeGuidMatch(myGuid);
        ttscommit;

        BankAccountTrans_DS.research();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canClose</Name>
				<Source><![CDATA[
    public boolean canClose()
    {
        boolean ret;

        ret = super();
        if(ret && !gIsReconciled && gFormModified)
        {
            //if there is anything in the buffer (Translation "You've got item's checked.)
            if(gSKS_BR_BankTran_SKS_BR_RecIdXRefList.sks_Len() > 0
                || gBankAccountTrans_SKS_BR_RecIdXRefList.sks_Len() > 0)
            {
                //if(yes, contine with the form closing, if then we will say it's not
                //  allowed to close and the return value will end the cancel process
                if(Box::yesNo("@SKS3731", DialogButton::No) == DialogButton::No)
                {
                    ret = false;
                }
                else
                {
                    keepchanges = false;
                }
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>close</Name>
				<Source><![CDATA[
    public void close()
    {
        if(!gIsReconciled && gFormModified)
        {
            if (keepchanges)
            {
                element.saveMatches();
            }
            else
            {
                element.cancel();
            }
        }
        if (callingFormDataSourceBankAcctStmt)
        {
            callingFormDataSourceBankAcctStmt.reread();
        }
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        FormRun     callerForm;
        SKS_BR_BankTran     locSKS_BR_BankTran;//SKS_BR1

        gSKS_BR_BankTran_SKS_BR_RecIdXRefList = new SKS_BR_RecIdXRefList();
        gBankAccountTrans_SKS_BR_RecIdXRefList = new SKS_BR_RecIdXRefList();
        keepchanges = false;
        selectedBATCount = 0;
        selectedSBBTCount = 0;
        gFormModified = false;

        if(element.args().parmObject())
        {
            callerForm = element.args().caller();
            gSKS_BR_ClickNMatchCriteria = element.args().parmObject();
            gSKS_BR_BankAcctStmt = gSKS_BR_ClickNMatchCriteria.GetSKS_BR_BankAcctStmt();
            callingFormDataSourceBankAcctStmt = gSKS_BR_ClickNMatchCriteria.parmformDatasourceBankAcctStmt();
            myGuid = gSKS_BR_ClickNMatchCriteria.getManualReconciliationID();
            //determine if we are view transactions on a reconciled statement
            if(gSKS_BR_BankAcctStmt.getReconcileDate() != Global::dateNull())
            {
                gIsReconciled = true;
            }
            else
            {
                gIsReconciled = false;
            }
            //the From load completed is used to populate the buffers if we are loading a previous click-n-match session
            gFormLoadCompleted = false;
        }
        else
        {
            throw error("@SYS96590"); //Form cannot be called directly.
        }

        super();

        if (callerForm.name() != '')
        {
            SKS_BR_MatchFilter.selectionChange(); // This is required

            locSKS_BR_BankTran = gSKS_BR_BankAcctStmt.getSKS_BR_BankTran();

            if (locSKS_BR_BankTran.MatchIndicator == SKS_BR_MatchIndicator::Green)
            {
                SKS_BR_MatchFilter.selection(SKS_BR_MatchFilter::Matched);
            }
            else
            {
                SKS_BR_MatchFilter.selection(enum2int(SKS_BR_MatchFilter::All));
            }
            SKS_BR_MatchFilter.selectionChange();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReconciledStatement</Name>
				<Source><![CDATA[
    public boolean isReconciledStatement()
    {
        transdate locAccountStatementDate = gSKS_BR_BankAcctStmt.getAccountStatementDate();
        BankAccountStatementNum locBankAccountStatementNum = gSKS_BR_BankAcctStmt.getAccountStmtNum();
        BankAccountStatement locBankAccountStatement;
        boolean rtnval = false;
        ;

        select firstonly recid from locBankAccountStatement
            where locBankAccountStatement.ReconcileDate != dateNull()
                && locBankAccountStatement.AccountStatementDate == locAccountStatementDate
                && locBankAccountStatement.AccountStatementNum == locBankAccountStatementNum
                && locBankAccountStatement.AccountId == gSKS_BR_BankAcctStmt.getAccountId();

        if(locBankAccountStatement)
        {
            rtnval = true;
        }
        return rtnval;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateTotals</Name>
				<Source><![CDATA[
    void populateTotals()
    {
        real returnvalue;
        BankAccountTrans locBankAccountTrans;
        SKS_BR_BankTran locSKS_BR_BankTran;
        ;

        returnvalue = 0;

        select sum(AmountCur), sum(AmountCorrect) from locBankAccountTrans
            where locBankAccountTrans.SKS_BR_ManualReconciliationID == myGuid;

        Select Sum(TranAmount) from locSKS_BR_BankTran
            where locSKS_BR_BankTran.ManualReconciliationID == myGuid;

        if (locBankAccountTrans)
        {
            UnreconciledTransSelectedTotal.realValue(locBankAccountTrans.AmountCur + locBankAccountTrans.AmountCorrect);
        }
        else
        {
            UnreconciledTransSelectedTotal.realValue(0);
        }

        if(locSKS_BR_BankTran)
        {
            ImportedTransSelectedTotal.realValue(locSKS_BR_BankTran.TranAmount);
        }
        else
        {
            ImportedTransSelectedTotal.realValue(0);
        }
        returnvalue = Difference.realValue(UnreconciledTransSelectedTotal.realValue() - ImportedTransSelectedTotal.realValue());

        //if((returnvalue == 0) && ((selectedBATcount > 0 && selectedSBBTcount >= 0) || (selectedBATcount == 0 && selectedSBBTcount == 0)))
        if ((returnvalue == 0) && ((selectedBATcount >= 0 || selectedSBBTcount >= 0) || (selectedBATcount == 0 && selectedSBBTcount == 0))) //SKS_18745
        {
            BtnOK.enabled(true);
        }
        else
        {
            BtnOK.enabled(false);
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>prematchCheckAndContinue</Name>
				<Source><![CDATA[
    boolean prematchCheckAndContinue(SKS_BR_ManualReconciliationID MatchGuid)
    {
        SKS_BR_BankTran localSKS_BR_BankTran;
        boolean rtnval = false;
        DialogButton localDialogButton;
        ;



        select firstonly recid from localSKS_BR_BankTran where localSKS_BR_BankTran.ManualReconciliationID == MatchGuid && localSKS_BR_BankTran.IntermMatch == NoYes::Yes;

        if(localSKS_BR_BankTran)
        {
            LocalDialogButton = Box::okCancel("@SKS2322", DialogButton::Cancel);
        }

        if(localDialogButton == DialogButton::Ok)
        {
            rtnval = true;
        }

        return rtnval;


    }

]]></Source>
			</Method>
			<Method>
				<Name>refillRecidBuffers</Name>
				<Source><![CDATA[
    public void refillRecidBuffers()
    {
        BankAccountTrans locBankAccountTrans;
        SKS_BR_BankTran locSKS_BR_BankTran;
        ;

        while select RecId, AccountStatement from locBankAccountTrans
            where locBankAccountTrans.SKS_BR_ManualReconciliationID == myGuid
        {
            if(!gFormModified && strLen(locBankAccountTrans.AccountStatement) == 0)
            {
                gFormModified = true;
            }
            selectedBATCount++;
            gBankAccountTrans_SKS_BR_RecIdXRefList.sks_append(locBankAccountTrans.RecId, locBankAccountTrans.RecId);
        }
        while select RecId, AccountStatementNum from locSKS_BR_BankTran
            where locSKS_BR_BankTran.ManualReconciliationID == myGuid
        {
            if(!gFormModified && strLen(locSKS_BR_BankTran.AccountStatementNum) == 0)
            {
                gFormModified = true;
            }
            selectedSBBTCount++;
            gSKS_BR_BankTran_SKS_BR_RecIdXRefList.sks_append(locSKS_BR_BankTran.RecId, locSKS_BR_BankTran.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>researchAll</Name>
				<Source><![CDATA[
    public void researchAll(boolean _retainPosition)
    {
        BankAccountTrans_ds.research(_retainPosition);
        element.populateTotals();
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveMatches</Name>
				<Source><![CDATA[
    boolean saveMatches()
    {
        BankAccountTrans    locBankAccountTransUpd;
        SKS_BR_BankTran     locSKS_BR_BankTranUpd;
        RecID               locRecID;
        int                 locPosition, locContainerMax;
        ;

        //commit all selections to BANKACCOUTTRANS table(essentially, completing the matching process)
        ttsbegin;
        locContainerMax = gBankAccountTrans_SKS_BR_RecIdXRefList.sks_Len();
        for (locPosition = 1; locPosition <= locContainerMax; locPosition++)
        {
            locRecID = gBankAccountTrans_SKS_BR_RecIdXRefList.sks_peekRecID(locPosition);

            select firstonly forupdate locBankAccountTransUpd
                where locBankAccountTransUpd.RecId == locRecID;
            if(locBankAccountTransUpd)
            {
                locBankAccountTransUpd.AccountStatement = gSKS_BR_BankAcctStmt.getAccountStmtNum();
                locBankAccountTransUpd.AccountStatementDate = gSKS_BR_BankAcctStmt.getAccountStatementDate();
                locBankAccountTransUpd.Included = NOYES::Yes;
                locBankAccountTransUpd.SKS_BR_IsSelected = NoYes::Yes; // SKS_BR1
                locBankAccountTransUpd.update();
                SKS_BR_Matching::ClearCheck(locBankAccountTransUpd,locBankAccountTransUpd.AccountStatementDate);
            }
            else
            {
                error(strFmt("@SKS3732",  int642str(locRecID)));
                ttsAbort;
                return false;
            }
        }


        //Commit all selections to the SKS_BR_BANKTRAN table
        locContainerMax = gSKS_BR_BankTran_SKS_BR_RecIdXRefList.sks_Len();
        for (locPosition = 1; locPosition <= locContainerMax; locPosition++)
        {
            locRecID = gSKS_BR_BankTran_SKS_BR_RecIdXRefList.sks_peekRecID(locPosition);

            select firstonly forupdate locSKS_BR_BankTranUpd
                where locSKS_BR_BankTranUpd.RecId == locRecID;
            if(locSKS_BR_BankTranUpd)
            {
                locSKS_BR_BankTranUpd.AccountStatementnum = gSKS_BR_BankAcctStmt.getAccountStmtNum();
                locSKS_BR_BankTranUpd.AccountStatementDate = gSKS_BR_BankAcctStmt.getAccountStatementDate();
                locSKS_BR_BankTranUpd.MatchStep = 0; //click-n-match constitiutes a manual match so it has not step
                locSKS_BR_BankTranUpd.MatchConfidence = 100; //click-n-match constitiutes a manual match so it is 100% confidence
                locSKS_BR_BankTranUpd.MatchedType = SKS_BR_MatchedType::ClickNMatch;
                // SKS_BR1 -->
                locSKS_BR_BankTranUpd.Matched = NoYes::Yes;
                locSKS_BR_BankTranUpd.MatchIndicator = SKS_BR_MatchIndicator::Green;
                // SKS_BR1 <--
                locSKS_BR_BankTranUpd.update();
            }
            else
            {
                error(strFmt("@SKS3733",  int642str(locRecID)));
                ttsAbort;
                return false;
            }
        }
        ttscommit;

        BankAccountTrans_DS.research();
        return true;

    }

]]></Source>
			</Method>
			<Method>
				<Name>setLedgerAccountNum</Name>
				<Source><![CDATA[
    void setLedgerAccountNum(BankAccountTrans _bankAccountTrans)
    {
        ;
        _bankAccountTrans.LedgerDimension = BankTransType::find(_bankAccountTrans.BankTransType).LedgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateManyToManyMatching</Name>
				<Source><![CDATA[
    //SKS_BR1
    public boolean validateManyToManyMatching()
    {
        BankAccountTrans    bankAccountTransCount;
        SKS_BR_BankTran     locSKS_BR_BankTran;

        Select count(RecId) from locSKS_BR_BankTran
            where locSKS_BR_BankTran.ManualReconciliationID == myGuid;
        Select count(RecId) from bankAccountTransCount
            where bankAccountTransCount.SKS_BR_ManualReconciliationID == myGuid;
        if(locSKS_BR_BankTran.RecId == 0 && bankAccountTransCount.RecId == 0)
        {
            return true;
        }
        if (locSKS_BR_BankTran.RecId == 0)
        {
            select count(RecId) from bankAccountTransCount
                where bankAccountTransCount.SKS_BR_ManualReconciliationID == myGuid;
            if(BankAccountTrans.RecId >= 2)
            {
                return true;
            }
        }
        else
        {
            select count(RecId) from bankAccountTransCount
                where bankAccountTransCount.SKS_BR_ManualReconciliationID == myGuid;
            if (bankAccountTransCount.RecId >= 1 && locSKS_BR_BankTran.RecId > 1)
            {
                return true;
            }
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateOneToManyMatching</Name>
				<Source><![CDATA[
    // vvvv 14667 vvv
    public boolean validateOneToManyMatching()
    {
        BankAccountTrans    locBankAccountTransCount;
        SKS_BR_BankTran     locSKS_BR_BankTran;
        FormRun             callerForm = element.args().caller();
        SKS_PP_Setup        locSKS_PP_Setup;

        select firstonly BREnableOldClickNMatchRules from locSKS_PP_Setup;
        Select count(RecId) from locSKS_BR_BankTran
            where locSKS_BR_BankTran.ManualReconciliationID == myGuid;
        Select count(RecId) from locBankAccountTransCount
            where locBankAccountTransCount.SKS_BR_ManualReconciliationID == myGuid;
        // if nothing is selected, return true and let the form close, since it doesn't hurt to go this route.
        if(locSKS_BR_BankTran.RecId == 0 && locBankAccountTransCount.RecId == 0)
        {
            return true;
        }
        else if(locSKS_BR_BankTran.RecId == 1 && locBankAccountTransCount.RecId >= 2)
        {
            // one-to-many is only allowed if coming in from SKS_BR_BankTran
            if( strUpr(callerForm.name()) == 'SKS_BR_BANKTRAN' || locSKS_PP_Setup.BREnableOldClickNMatchRules)
            {
                return true;
            }
            else
            {
                warning("@SKS:SKGBR1toNClkNMatchCshBnkMgmtWarning");
                return false;
            }
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateOneToOneMatching</Name>
				<Source><![CDATA[
    /// <summary>
    /// If enabled in setup, validate that a 1 to 1 match exist.
    /// </summary>
    /// <returns>boolean indication if completeing the currently selected records' match is allowed.</returns>
    public boolean validateOneToOneMatching()
    {
        BankAccountTrans    locBankAccountTransCount;
        SKS_BR_BankTran     locSKS_BR_BankTran;
        SKS_PP_Setup        locSKS_PP_Setup;

        select firstonly BREnableOldClickNMatchRules from locSKS_PP_Setup;
        if(!locSKS_PP_Setup.BREnableOldClickNMatchRules) //19335
        {
            warning("@SKS:SKGBR1to1ClkNMtchWarning");
            return false;
        }

        Select count(RecId) from locSKS_BR_BankTran
            where locSKS_BR_BankTran.ManualReconciliationID == myGuid;
        Select count(RecId) from locBankAccountTransCount
            where locBankAccountTransCount.SKS_BR_ManualReconciliationID == myGuid;
        if (locSKS_BR_BankTran.RecId == 1 && locBankAccountTransCount.RecId == 1)
        {
            return true;
        }
        return false;
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>SKS_BR_BankTran</Name>
				<Methods>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        public void executeQuery()
        {
            #SKS_GLOBAL

            QueryBuildDataSource    dsSKS_BR_BankTran;
            QueryBuildRange         qbrRange;
            str                     locFilterQuery;
            BankAccountStatement    locBankAccountStatement;
            transdate locAccountStatementDate = gSKS_BR_BankAcctStmt.getAccountStatementDate();
            BankAccountStatementNum locBankAccountStatementNum = gSKS_BR_BankAcctStmt.getAccountStmtNum();

            //Get the data source
            dsSKS_BR_BankTran = this.query().dataSourceName(SKS_BR_BankTran_ds.name());
            // Create the query restrictions.
            dsSKS_BR_BankTran.addSortField(fieldNum(SKS_BR_BankTran,TranDate),SortOrder::Ascending);

            //if the statement being loaded is reconciled, selected item's matches in a disabled manner.  It should not be editable.
            if(gIsReconciled)
            {
                //Limit the query to items that are matched under the passed in Guid
                qbrRange = this.query().dataSourceTable(tablenum(SKS_BR_BankTran)).addRange(fieldNum(SKS_BR_BankTran, ManualReconciliationID));
                locFilterQuery = strFmt('(%1 == "%2")',
                fieldStr(SKS_BR_BANKTRAN,ManualReconciliationID), //%1
                guid2str(myguid)); //%2
                locFilterQuery = qbrRange.value(locFilterQuery);
                qbrRange.status(RangeStatus::Hidden);
            }
            //Exising match & unmatched items
            else
            {
                select firstonly SKS_BR_BankHeaderRecId from locBankAccountStatement
                    where locBankAccountStatement.AccountStatementDate == locAccountStatementDate
                        && locBankAccountStatement.AccountStatementNum == locBankAccountStatementNum
                        && locBankAccountStatement.AccountId == gSKS_BR_BankAcctStmt.getAccountId();
                qbrRange = this.query().dataSourceTable(tablenum(SKS_BR_BankTran)).addRange(fieldNum(SKS_BR_BankTran, AccountId));
                qbrRange.value(queryValue(gSKS_BR_BankAcctStmt.getAccountId()));
                qbrRange.status(RangeStatus::Hidden);

                if(!locBankAccountStatement.SKS_BR_BankHeaderRecId)// TFS 7306 TFS 9528
                {
                    qbrRange = this.query().dataSourceTable(tablenum(SKS_BR_BankTran)).addRange(fieldNum(SKS_BR_BankTran, TranDate));
                    qbrRange.value(queryRange(gSKS_BR_ClickNMatchCriteria.GetFromDate(), gSKS_BR_ClickNMatchCriteria.GetToDate()));
                    qbrRange.status(RangeStatus::Hidden);
                }
                else // TFS 7306 -->
                {
                    qbrRange = this.query().dataSourceTable(tablenum(SKS_BR_BankTran)).addRange(fieldNum(SKS_BR_BankTran, ImportedStatementDate));
                    qbrRange.value(queryValue(gSKS_BR_BankAcctStmt.getAccountStatementDate()));
                    qbrRange.status(RangeStatus::Hidden);
                }
                // TFS 7306 <--

                //SKS_BR1 & 7529 (Filter Fix)-->
                qbrRange = this.query().dataSourceTable(tablenum(SKS_BR_BankTran)).addRange(fieldNum(SKS_BR_BankTran, ManualReconciliationID));
                if (SKS_BR_MatchFilter.selection() != SKS_BR_MatchFilter::All)
                {
                    if (SKS_BR_MatchFilter.selection() == SKS_BR_MatchFilter::Unmatched)
                    {
                        qbrRange = this.query().dataSourceTable(tablenum(SKS_BR_BankTran)).addRange(fieldNum(SKS_BR_BankTran, ManualReconciliationID));
                        locFilterQuery = strFmt('((%1 != "%2") && (%3 == %4)) || (%1 == "%2")',
                        fieldStr(SKS_BR_BankTran,ManualReconciliationID), //%1
                        #EmptyGuidString, //%2
                        fieldStr(SKS_BR_BankTran,INTERMMATCH), //%3
                        int2str(NoYes::Yes));//%4
                    }
                    else
                    {
                        locFilterQuery = strFmt('(%1 == "%2")',
                        fieldStr(SKS_BR_BankTran,ManualReconciliationID), //%1
                        guid2str(myguid)); //%2
                    }
                    qbrRange.status(RangeStatus::Hidden);
                }
                else
                {
                    //SKS_BR1 <--

                    locFilterQuery = strFmt('((%1 != "%2") && (%3 == %4)) || (%1 == "%2") || (%1 == "%5")',
                    fieldStr(SKS_BR_BankTran,ManualReconciliationID), //%1
                    #EmptyGuidString, //%2
                    fieldStr(SKS_BR_BankTran,INTERMMATCH), //%3
                    int2str(NoYes::Yes),//%4
                    guid2str(myguid)); //%5
                }
                qbrRange.value(locFilterQuery);
                //  7529 (Filter Fix) <--
                qbrRange.status(RangeStatus::Hidden);
            }

            this.query();
            super();

            if(!gFormLoadCompleted)
            {
                element.refillRecidBuffers();
                element.populateTotals();
                gFormLoadCompleted = true;
            }
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>BankAccountTrans</Name>
				<Methods>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        public int active()
        {
            int ret;
            ;

            if(BankAccountTrans.SKS_BR_ManualReconciliationID != str2guid(#EmptyGuidString))
            {
                BankAccountTrans_ds.object(fieldNum(BankAccountTrans,
                                   AmountCorrect)).enabled(true);
                BankAccountTrans_AmountCorrected.enabled(true);

            }
            else
            {
                BankAccountTrans_ds.object(fieldNum(BankAccountTrans,
                                   AmountCorrect)).enabled(false);
                BankAccountTrans_AmountCorrected.enabled(false);
            }

            ret = super();
            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        public void executeQuery()
        {
            #SKS_GLOBAL

            QueryBuildDataSource    dsBankAccountTrans;
            QueryBuildRange qbrRange;
            str locFilterQuery;

            this.query().dataSourceTable(tablenum(BankAccountTrans)).clearRanges();

            // Create the query restrictions.
            dsBankAccountTrans = this.query().dataSourceName(BankAccountTrans_ds.name());

            dsBankAccountTrans.addSortField(fieldname2id(tablenum(BankAccountTrans), fieldstr(BankAccountTrans,TransDate)),SortOrder::Ascending);
            //if the statement being loaded is reconciled, selected item's matches in a disabled manner.  It should not be editable.
            if(gIsReconciled)
            {
                //Disable the datasource
                //dsBankAccountTrans.enabled(false);
                //Limit the query to items that are matched under the passed in Guid
                qbrRange = dsBankAccountTrans.addRange(fieldNum(BankAccountTrans, SKS_BR_ManualReconciliationID));
                locFilterQuery = strFmt('(%1 == "%2")',
                fieldStr(BankAccountTrans,SKS_BR_ManualReconciliationID), //%1
                guid2str(myguid)); //%2
                locFilterQuery = qbrRange.value(locFilterQuery);
                qbrRange.status(RangeStatus::Hidden);
            }
            //Exising match & unmatched items
            else
            {
                //SKS_BR1 -->
               /* if (SKS_BR_MatchFilter.selection() != SKS_BR_MatchFilter::All)
                {
                    qbrRange = dsBankAccountTrans.addRange(fieldNum(BankAccountTrans, SKS_BR_ManualReconciliationID));
                    if (SKS_BR_MatchFilter.selection() == SKS_BR_MatchFilter::Unmatched)
                    {
                        qbrRange.value(queryValue(emptyGuid()));
                    }
                    else
                    {
                        qbrRange.value(queryValue(!emptyGuid()));
                    }
                    qbrRange.status(RangeStatus::Hidden);
                }*/
                //SKS_BR1 <--


                //NO RECONCILED ITEMS
                qbrRange = dsBankAccountTrans.addRange(fieldNum(BankAccountTrans, Reconciled));
                qbrRange.value(enum2str(NoYes::No));
                qbrRange.status(RangeStatus::Hidden);

                //qbrRange = dsBankAccountTrans.addRange(fieldNum(BankAccountTrans, Included));
                //qbrRange.value(enum2str(NoYes::No));
                //qbrRange.status(RangeStatus::Hidden);

                //ONLY TRANS ON OUR CURRENT BANK ACCOUNT
                qbrRange = dsBankAccountTrans.addRange(fieldNum(BankAccountTrans, AccountId));
                qbrRange.value(queryValue(gSKS_BR_BankAcctStmt.getAccountId()));
                qbrRange.status(RangeStatus::Hidden);

                qbrRange = dsBankAccountTrans.addRange(fieldNum(BankAccountTrans, SKS_BR_ManualReconciliationID));
                //SKS_BR1 --> //filtering changed due to #
                if (SKS_BR_MatchFilter.selection() != SKS_BR_MatchFilter::All)
                {
                    if (SKS_BR_MatchFilter.selection() == SKS_BR_MatchFilter::Unmatched)
                    {
                        //((%1 != "%2") && (%3 == %4))                      PREMATCHES
                        //(%1 == %2 && %6 == "" && %7 == "01/01/1900")      UNMATCHED ITEMS (Specifically avoiding items that were cleared in the Reconciliation form.
                        locFilterQuery = strFmt('((%1 != "%2") && (%3 == %4)) || ((%1 == "%2") && (%5 == "") && (%6 == %7))',
                            fieldStr(BankAccountTrans,SKS_BR_ManualReconciliationID), //%1
                            #EmptyGuidString, //%2
                            fieldStr(BankAccountTrans,SKS_BR_INTERMMATCH), //%3
                            int2str(NoYes::Yes), //%4
                            fieldStr(BankAccountTrans, AccountStatement),//%5
                            fieldStr(BankAccountTrans,AccountStatementDate), //%6
                            Date2StrXpp(dateNull()));//%7
                    }
                    else
                    {
                        //(%1 == "%2")                      ITEMS BELONGING TO MY CURRENT GUID and NOT prematcehes
                        locFilterQuery = strFmt('(%1 == "%2")',
                            fieldStr(BankAccountTrans,SKS_BR_ManualReconciliationID), //%1
                            guid2str(myguid)); //%2
                    }
                }
                else
                {
                //SKS_BR1 <--
                    //((%1 != "%2") && (%3 == %4))                      PREMATCHES
                    //(%1 == %2 && %6 == "" && %7 == "01/01/1900")      UNMATCHED ITEMS (Specifically avoiding items that were cleared in the Reconciliation form.
                    //(%1 == "%5")                                      ITEMS BELONGING TO MY CURRENT GUID
                    locFilterQuery = strFmt('((%1 != "%2") && (%3 == %4)) || ((%1 == "%2") && (%6 == "") && (%7 == %8)) || (%1 == "%5")',
                        fieldStr(BankAccountTrans,SKS_BR_ManualReconciliationID), //%1
                        #EmptyGuidString, //%2
                        fieldStr(BankAccountTrans,SKS_BR_INTERMMATCH), //%3
                        int2str(NoYes::Yes), //%4
                        guid2str(myguid), //%5
                        fieldStr(BankAccountTrans, AccountStatement),//%6
                        fieldStr(BankAccountTrans,AccountStatementDate), //%7
                        Date2StrXpp(dateNull()));//%8
                }
                locFilterQuery = qbrRange.value(locFilterQuery);
                qbrRange.status(RangeStatus::Hidden);
            }

            this.query();

            super();
        }

]]></Source>
					</Method>
					<Method>
						<Name>boolIsIntermMatched</Name>
						<Source><![CDATA[
        /// <summary>
        /// Is interim matched edit method.
        /// </summary>
        /// <param name = "_set">If true, sets the value</param>
        /// <param name = "_BankAccountTrans">Bank account trans</param>
        /// <param name = "_selected">Selected</param>
        /// <returns>Returns true if matched.</returns>
        public edit boolean boolIsIntermMatched(boolean _set, BankAccountTrans _BankAccountTrans, boolean _selected)
        {
            #SKS_Global

            boolean rtnval = false;
            ;

            if (_BankAccountTrans.SKS_BR_ManualReconciliationID != str2guid(#EmptyGuidString) && _BankAccountTrans.SKS_BR_IntermMatch == NoYes::Yes)
            {
                rtnval = true;
            }

            return rtnval;

        }

]]></Source>
					</Method>
					<Method>
						<Name>boolIsMatched</Name>
						<Source><![CDATA[
        //BP Deviation Documented
        public edit boolean boolIsMatched(boolean _set, BankAccountTrans _BankAccountTrans, boolean _selected)
        {
            #SKS_Global

            boolean rtnval = false;
            ;

            if (_BankAccountTrans.SKS_BR_ManualReconciliationID != str2guid(#EmptyGuidString) && _BankAccountTrans.SKS_BR_IntermMatch == NoYes::No)
            {
                rtnval = true;
            }

            return rtnval;

        }

]]></Source>
					</Method>
				</Methods>
				<Fields>
					<Field>
						<DataField>AmountCorrect</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();
                element.setLedgerAccountNum(bankAccountTrans);
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
				</Fields>
			</DataSource>
			<DataSource>
				<Name>BankAccountTable</Name>
				<Methods>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        public void write()
        {
            //super();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>BtnOK</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            BankAccountStatement    locBankAccountStatement;
            CompanyBankAccountId    locAccountID;
            TransDate               locAccountStatementDate;
            BankAccountStatementNum locAccountStatementNum;
            BankAccountTrans        locBankAccountTrans; // CR-9689

            // Below validation:
            // For eBanking Auto-created statements, when launched from eBankRec statement reconciliation,
            //  this form should only be used for many to many or many to zero matching.
            // It will not allow one to one or one to many matching – that should be done using the new Transaction reconciliation form.
            // For manually created statements, we will allow any balanced matches to occur.

            locAccountID = gSKS_BR_BankAcctStmt.getAccountId();
            locAccountStatementDate = gSKS_BR_BankAcctStmt.getAccountStatementDate();
            locAccountStatementNum = gSKS_BR_BankAcctStmt.getAccountStmtNum();
            keepChanges = True;

            select firstonly RecId, ReconcileDate, SKS_BR_BankHeaderRecId from locBankAccountStatement
                    where locBankAccountStatement.AccountId == locAccountID
                        && locBankAccountStatement.AccountStatementDate == locAccountStatementDate
                        && locBankAccountStatement.AccountStatementNum == locAccountStatementNum;

            if(element.validateManyToManyMatching() 
                || element.validateOneToManyMatching() 
                || element.validateOneToOneMatching()
                || locBankAccountStatement.SKS_BR_BankHeaderRecId == 0) //SKS_BR1
            {
                if(!gIsReconciled && gFormModified)
                {
                    // vvv9689/14529vvv
                    ttsbegin;
                    while select forupdate locBankAccountTrans
                        where locBankAccountTrans.SKS_BR_ManualReconciliationID == myGuid
                    {
                        locBankAccountTrans.update();
                    }
                    ttscommit;
                    // ^^^CR-9689/14529^^^

                    if(locBankAccountStatement)
                    {
                        if(locBankAccountStatement.ReconcileDate != dateNull())
                        {
                            //This shouldn't be reacheable because you cannot press reconcile if a user has click-n-match in play for the account they are trying to reconcile.
                            error(
                                strFmt("@SKS3730",
                                        locAccountID, locAccountStatementDate, locAccountStatementNum,
                                        SKS_PP_StringFormats::strDateMMDDYYYY(locBankAccountStatement.ReconcileDate, DateSeparator::Slash))
                            );
                            keepChanges = false;
                        }
                    }
                    else
                    {
                        //shouldn't be reachable because you had to have a statement to open the reconcilation for which lead to eBanking Imported Trans which lead to Click-n-match
                        error(
                                strFmt("@SKS3729",
                                        locAccountID, locAccountStatementDate, locAccountStatementNum)
                            );
                        keepChanges = false;
                    }
                }
                super();
                element.close();
            }
            else
            {
                info("@SKS4273");
            }


        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>BtnCancel</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            ;
            super();
            if(element.canClose())
            {
                element.close();
            }
            else
            {
                element.researchAll(true);
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SKS_BR_MatchFilter</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();

            BankAccountTrans_ds.executeQuery();
            SKS_BR_BankTran_ds.executeQuery();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SelectAllDisplayedBankAccountTrans</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            BankAccountTrans  locBankAccountTrans;
            DialogButton locDialogButton = DialogButton::Yes;
            boolean locPrematchExists = false;
            ;

            if(element.isReconciledStatement())
            {
                error("@SKS3734");
                return;
            }

            //spin through all shown lines, selecting any that are not currently selected
            locBankAccountTrans = BankAccountTrans_ds.getFirst(false); //priming read    locDialogButton = DialogButton::Yes;
            while (locBankAccountTrans && !locPrematchExists)
            {
                //only check the ones not already selected
                if(locBankAccountTrans.SKS_BR_ManualReconciliationID != myGuid
                    && locBankAccountTrans.SKS_BR_ManualReconciliationID != str2guid(#EmptyGuidString))
                {
                    locPrematchExists = true;
                }
                locBankAccountTrans = BankAccountTrans_ds.getNext();
            }
            if(locPrematchExists)
            {
                locDialogButton = Box::yesNo("@SKS3229",DialogButton::Yes, "@SKS1598");

            }
            if(locDialogButton == DialogButton::Yes)
            {
                locBankAccountTrans = BankAccountTrans_ds.getFirst(false); //priming read
                while (locBankAccountTrans)
                {
                    //only check the ones not already selected & not prematched
                    if (locBankAccountTrans.SKS_BR_ManualReconciliationID == str2guid(#EmptyGuidString))
                    {
                        locBankAccountTrans.SKS_BR_ManualReconciliationID = myGuid;
                        locBankAccountTrans.update();
                        BankAccountTrans_ds.reread();

                        selectedBATCount++;
                        gBankAccountTrans_SKS_BR_RecIdXRefList.sks_append(locBankAccountTrans.RecId, locBankAccountTrans.RecId);
                        if(!gFormModified)
                        {
                            gFormModified = true;
                        }
                    }
                    locBankAccountTrans = BankAccountTrans_ds.getNext();
                }


            }

            BankAccountTrans_ds.executeQuery();
            super();
            element.populateTotals();


        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ClearAllBankAccountTransRegardlessOfFilter</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            BankAccountTrans locBankAccountTrans;
            ;

            if(element.isReconciledStatement())
            {
                error("@SKS3734");
                return;
            }

            locBankAccountTrans = BankAccountTrans_ds.getFirst(false);
            while (locBankAccountTrans)
            {
                if(locBankAccountTrans.SKS_BR_ManualReconciliationID == myGuid && locBankAccountTrans.AccountStatementDate != dateNull())
                {
                    if(Box::YesNo("@SKS:SKGBRUnmatchAllTransWarning",DialogButton::No,strFmtLB("@SKS1598")) == DialogBUtton::No)
                    {
                        return;
                    }
                    else
                    {
                        ttsBegin;
                        SKS_BR_Matching::breakExistingPrematch(BankAccountTrans.RecId,SKS_BR_ClearPrematches::ClearBankAccountTrans);
                        SelectedSBBTCount = 0;
                        SelectedBATCount = 0;
                        gSKS_BR_BankTran_SKS_BR_RecIdXRefList = new SKS_BR_RecIdXRefList();
                        gBankAccountTrans_SKS_BR_RecIdXRefList = new SKS_BR_RecIdXRefList();
                        SKS_BR_BankTran_ds.research();
                        BankAccountTrans_ds.research();
                        ttscommit;
                        break;
                    }
                }
                locBankAccountTrans = BankAccountTrans_ds.getNext();
            }

            locBankAccountTrans = BankAccountTrans_ds.getFirst(false); //priming read    locDialogButton = DialogButton::Yes;
            while (locBankAccountTrans)
            {
                //only check the ones not already selected & not prematched
                if (locBankAccountTrans.SKS_BR_ManualReconciliationID == myGuid)
                {
                    if(locBankAccountTrans.Reconciled == NoYes::No)
                    {
                        SKS_BR_Matching::UnclearCheck(locBankAccountTrans);
                        locBankAccountTrans.AccountStatement = strMin();
                        locBankAccountTrans.AccountStatementDate = dateNull();
                        locBankAccountTrans.Included = NoYes::No;
                        locBankAccountTrans.SKS_BR_ManualReconciliationID = str2guid(#EmptyGuidString);
                        locBankAccountTrans.update();
                    }
                    BankAccountTrans_ds.reread();
                    selectedBATCount--;
                    gBankAccountTrans_SKS_BR_RecIdXRefList.sks_del(gBankAccountTrans_SKS_BR_RecIdXRefList.sks_findRecID(locBankAccountTrans.RecId));
                    if(!gFormModified)
                    {
                        gFormModified = true;
                    }
                }
                locBankAccountTrans = BankAccountTrans_ds.getNext();
            }
            BankAccountTrans_ds.executeQuery();
            super();
            element.populateTotals();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>chkboxBATSelected</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
            BankAccountTrans locBankAccountTrans;
            ;

            if(!this.checked() && BankAccountTrans.AccountStatementDate != dateNull())
            {
                ttsBegin;
                SKS_BR_Matching::breakExistingPrematch(BankAccountTrans.RecId,SKS_BR_ClearPrematches::ClearBankAccountTrans);
                SelectedSBBTCount = 0;
                SelectedBATCount = 0;
                gSKS_BR_BankTran_SKS_BR_RecIdXRefList = new SKS_BR_RecIdXRefList();
                gBankAccountTrans_SKS_BR_RecIdXRefList = new SKS_BR_RecIdXRefList();
                SKS_BR_BankTran_ds.research(true);
                BankAccountTrans_ds.research(true);
                ttscommit;
            }
            else if(this.checked() == true)
            {
                SKS_BR_Matching::breakExistingPrematch(BankAccountTrans.RecId,SKS_BR_ClearPrematches::ClearBankAccountTrans);
                ttsBegin;
                select forupdate crossCompany locBankAccountTrans where locBankAccountTrans.RecId == BankAccountTrans.RecId;
                locBankAccountTrans.SKS_BR_ManualReconciliationID = myGuid;
                locBankAccountTrans.update();
                SKS_BR_BankTran_ds.reread();
                ttsCommit;
                selectedBATCount++;
                gBankAccountTrans_SKS_BR_RecIdXRefList.sks_append(BankAccountTrans.RecId, BankAccountTrans.RecId);
            }
            else
            {
                //if it hasn't received a AccountStatment, we can skp the UNCLEAR check because
                //  the check cannot have been cleard yet.
                if(strLen(locBankAccountTrans.AccountStatement) > 0)
                {
                    SKS_BR_Matching::UnclearCheck(locBankAccountTrans);
                }
                BankAccountTrans.SKS_BR_ManualReconciliationID = str2Guid(#EmptyGuidString);
                BankAccountTrans.AccountStatement = strMin();
                BankAccountTrans.AccountStatementDate = dateNull();
                BankAccountTrans.Included = 0;
                BankAccountTrans.SKS_BR_ALREADYMARKED = 0;
                BankAccountTrans.SKS_BR_ISSELECTED = 0;
                selectedBATCount--;
                gBankAccountTrans_SKS_BR_RecIdXRefList.sks_del(gBankAccountTrans_SKS_BR_RecIdXRefList.sks_findRecID(BankAccountTrans.RecId));

            }
            ret = super();
            element.researchAll(true);

            if(!gFormModified)
            {
                gFormModified = true;
            }
            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            #SKS_Global

            BankAccountTrans locBankAccountTrans;
            boolean ret;
            ;

            ret = super();
            if(ret)
            {
                if(BankAccountTrans.SKS_BR_ManualReconciliationID == myGuid && BankAccountTrans.AccountStatementDate != dateNull())
                {
                    if(Box::YesNo("@SKS:SKGBRUnmatchAllTransWarning",DialogButton::No,strFmtLB("@SKS1598")) == DialogBUtton::No)
                    {
                        return false;
                    }
                }
                else if(BankAccountTrans.SKS_BR_ManualReconciliationID != myGuid) //if we are not unchecking we'll need to check this out.
                {
                    select firstOnly SKS_BR_Intermmatch, SKS_BR_ManualReconciliationID from locBankAccountTrans where locBankAccountTrans.RecId == BankAccountTrans.RecId;
                    //if it is not interm matched and the guid is set, then someone else has claimed this record.
                    if(!locBankAccountTrans.SKS_BR_Intermmatch && locBankAccountTrans.SKS_BR_ManualReconciliationID != str2guid(#EmptyGuidString))
                    {
                        ret = false;
                        warning("@SKS3078");
                    }
                    else
                    {
                        ret = SKS_BR_Matching::boolValidatePrematchedContine(BankAccountTrans.SKS_BR_IntermMatch, "@SYS320983");
                    }
                }
            }
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>BankAccountTrans_AmountCorrect</Name>
				<Type>Real</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
            ;

            ret = super();
            BankAccountTrans_ds.research(true);
            element.populateTotals();
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>BankAccountTrans_AmountCorrected</Name>
				<Type>Real</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();
            BankAccountTrans_ds.research(true);
            element.populateTotals();
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SelectAllDisplayedSKS_BR_BANKTRAN</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            SKS_BR_BANKTRAN  locSKS_BR_BANKTRAN;
            DialogButton locDialogButton = DialogButton::Yes;
            boolean locPrematchExists = false;
            ;

            if(element.isReconciledStatement())
            {
                error("@SKS3734");
                return;
            }

            //spin through all shown lines, selecting any that are not currently selected
            locSKS_BR_BANKTRAN = SKS_BR_BANKTRAN_ds.getFirst(false); //priming read    locDialogButton = DialogButton::Yes;
            while (locSKS_BR_BANKTRAN && !locPrematchExists)
            {
                //only check the ones not already selected
                if(locSKS_BR_BANKTRAN.ManualReconciliationID != myGuid
                    && locSKS_BR_BANKTRAN.ManualReconciliationID != str2guid(#EmptyGuidString))
                {
                    locPrematchExists = true;
                }
                locSKS_BR_BANKTRAN = SKS_BR_BANKTRAN_ds.getNext();
            }
            if(locPrematchExists)
            {
                locDialogButton = Box::yesNo("@SKS3229",DialogButton::Yes, "@SKS1598");

            }
            if(locDialogButton == DialogButton::Yes)
            {
                locSKS_BR_BANKTRAN = SKS_BR_BANKTRAN_ds.getFirst(false); //priming read    locDialogButton = DialogButton::Yes;
                while (locSKS_BR_BANKTRAN)
                {
                    //only check the ones not already selected & not prematched
                    if (locSKS_BR_BANKTRAN.ManualReconciliationID == str2guid(#EmptyGuidString))
                    {
                        locSKS_BR_BANKTRAN.ManualReconciliationID = myGuid;
                        locSKS_BR_BANKTRAN.update();
                        SKS_BR_BANKTRAN_ds.reread();

                        selectedSBBTCount++;
                        gSKS_BR_BankTran_SKS_BR_RecIdXRefList.sks_append(locSKS_BR_BANKTRAN.RecId, locSKS_BR_BANKTRAN.RecId);
                        if(!gFormModified)
                        {
                            gFormModified = true;
                        }
                    }
                    locSKS_BR_BANKTRAN = SKS_BR_BANKTRAN_ds.getNext();
                }


            }
            SKS_BR_BANKTRAN_ds.executeQuery();
            super();
            element.populateTotals();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ClearAllSKS_BR_BANKTRANRegardlessOfFilter</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            SKS_BR_BANKTRAN locSKS_BR_BANKTRAN;
            ;

            if(element.isReconciledStatement())
            {
                error("@SKS3734");
                return;
            }

            locSKS_BR_BANKTRAN = SKS_BR_BANKTRAN_ds.getFirst(false); //priming read    locDialogButton = DialogButton::Yes;
            while (locSKS_BR_BANKTRAN)
            {

                if(locSKS_BR_BANKTRAN.ManualReconciliationID != emptyGuid() && SKS_BR_BankTran.AccountStatementDate != dateNull())
                {
                    if(Box::YesNo("@SKS:SKGBRUnmatchAllTransWarning",DialogButton::No,strFmtLB("@SKS1598")) == DialogBUtton::No)
                    {
                        return;
                    }
                    else
                    {
                        ttsBegin;
                        SKS_BR_Matching::breakExistingPrematch(locSKS_BR_BANKTRAN.RecId,SKS_BR_ClearPrematches::ClearSKS_BR_BankTran);
                        SelectedSBBTCount = 0;
                        SelectedBATCount = 0;
                        gSKS_BR_BankTran_SKS_BR_RecIdXRefList = new SKS_BR_RecIdXRefList();
                        gBankAccountTrans_SKS_BR_RecIdXRefList = new SKS_BR_RecIdXRefList();
                        SKS_BR_BankTran_ds.research();
                        BankAccountTrans_ds.research();
                        ttscommit;
                    }
                }

                locSKS_BR_BANKTRAN = SKS_BR_BANKTRAN_ds.getNext();
            }


            locSKS_BR_BANKTRAN = SKS_BR_BANKTRAN_ds.getFirst(false); //priming read    locDialogButton = DialogButton::Yes;
            while (locSKS_BR_BANKTRAN)
            {
                //only check the ones not already selected & not prematched
                if (locSKS_BR_BANKTRAN.ManualReconciliationID == myGuid)
                {
                    SKS_BR_Matching::removeMatchSKS_BR_BankTran(locSKS_BR_BANKTRAN);
                    locSKS_BR_BANKTRAN.update();
                    SKS_BR_BANKTRAN_ds.reread();
                    selectedSBBTCount--;
                    gSKS_BR_BankTran_SKS_BR_RecIdXRefList.sks_del(gSKS_BR_BankTran_SKS_BR_RecIdXRefList.sks_findRecID(locSKS_BR_BANKTRAN.RecId));
                    if(!gFormModified)
                    {
                        gFormModified = true;
                    }
                }
                locSKS_BR_BANKTRAN = SKS_BR_BANKTRAN_ds.getNext();
            }
            SKS_BR_BANKTRAN_ds.executeQuery();
            super();
            element.populateTotals();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>chkboxSBBTSelected</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
            SKS_BR_BankTran locSKS_BR_BankTran;
            ;

            if(!this.checked() && SKS_BR_BankTran.AccountStatementDate != dateNull())
            {
                ttsBegin;
                SKS_BR_Matching::breakExistingPrematch(SKS_BR_BankTran.RecId,SKS_BR_ClearPrematches::ClearSKS_BR_BankTran);
                SelectedSBBTCount = 0;
                SelectedBATCount = 0;
                gSKS_BR_BankTran_SKS_BR_RecIdXRefList = new SKS_BR_RecIdXRefList();
                gBankAccountTrans_SKS_BR_RecIdXRefList = new SKS_BR_RecIdXRefList();                
                ttscommit;
            }
            else if(this.checked() == true)
            {
                SKS_BR_Matching::breakExistingPrematch(SKS_BR_BankTran.RecId,SKS_BR_ClearPrematches::ClearSKS_BR_BankTran);
                ttsBegin;
                select firstonly forupdate crossCompany locSKS_BR_BankTran where locSKS_BR_BankTran.RecId == SKS_BR_BankTran.RecId;
                locSKS_BR_BankTran.ManualReconciliationID = myGuid;
                locSKS_BR_BankTran.update();
                ttsCommit;
                SelectedSBBTCount++;
                gSKS_BR_BankTran_SKS_BR_RecIdXRefList.sks_append(SKS_BR_BankTran.RecId, SKS_BR_BankTran.RecId);
            }
            else
            {
                SKS_BR_Matching::removeMatchSKS_BR_BankTran(SKS_BR_BankTran);
                SKS_BR_BankTran.update();
                SelectedSBBTCount--;
                gSKS_BR_BankTran_SKS_BR_RecIdXRefList.sks_del(gSKS_BR_BankTran_SKS_BR_RecIdXRefList.sks_findRecID(SKS_BR_BankTran.RecId));
            }
            ret = super();

            element.populateTotals();

            SKS_BR_BankTran_ds.reread();
            SKS_BR_BankTran_ds.refresh();

            BankAccountTrans_ds.reread();
            BankAccountTrans_ds.refresh();

            if(!gFormModified)
            {
                gFormModified = true;
            }
            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;
            SKS_BR_BankTran locSKS_BR_BankTran
            ;

            ret = super();

            if(ret)
            {
                if(SKS_BR_BankTran.ManualReconciliationID == myGuid && SKS_BR_BankTran.AccountStatementDate)
                {
                    if(Box::YesNo("@SKS:SKGBRUnmatchAllTransWarning",DialogButton::No,strFmtLB("@SKS1598")) == DialogBUtton::No)
                    {
                        return false;
                    }
                }
                else if(SKS_BR_BankTran.ManualReconciliationID != myGuid) //if we are not unchecking we'll need to check this out.
                {
                    select firstOnly Intermmatch, ManualReconciliationID from locSKS_BR_BankTran where locSKS_BR_BankTran.RecId == SKS_BR_BankTran.RecId;
                    //if it is not interm matched and the guid is set, then someone else has claimed this record.
                    if(!locSKS_BR_BankTran.Intermmatch && locSKS_BR_BankTran.ManualReconciliationID != str2guid(#EmptyGuidString))
                    {
                        ret = false;
                        warning("@SKS3078");
                    }
                    else
                    {
                        ret = SKS_BR_Matching::boolValidatePrematchedContine(SKS_BR_BankTran.IntermMatch, "@SKS533");
                    }
                }

            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>SKS_BR_BankTran</Name>
			<Table>SKS_BR_BankTran</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AccountId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AccountStatementDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AccountStatementNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>BankCustomerNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankHeaderRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankNum</DataField>
					<Enabled>No</Enabled>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankTranIntermRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankTranRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankTranType</DataField>
					<Enabled>No</Enabled>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BookNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreateGL</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustAccount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustCompany</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustomerName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustomerRuleStep</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustRemitAnalysisRule</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>eBankRecCustGroupId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EbankRecMatchingRuleGroupId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FileDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Filename</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FileTranType</DataField>
					<Enabled>No</Enabled>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>GLCreationCompany</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>GLMappingRuleGroupId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>GLMatchOrCreate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ImportedStatementDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ImportedStatementNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IntermMatch</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IntermPaymentJournalNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InUse</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InUseBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>JournalName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LedgerJournalRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LineNumInFile</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ManualReconciliationID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MatchConfidence</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MatchDefaultRule</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>Matched</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MatchedType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MatchIndicator</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MatchingRuleGroupActionStep</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MatchingRuleGroupId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MatchStep</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MultipleMatches</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OrigBankVoucher</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OriginalStatementRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ParsedValue</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ParseRuleId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymentJournalNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymentMatch</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RemitenceSettlementActionStep</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RevVoucher</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SessionId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SessionLoginDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SettlementAction</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SettlementType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>TranAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TranDate</DataField>
					<Enabled>No</Enabled>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TranDescription</DataField>
					<Enabled>No</Enabled>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TranDescriptionUser</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransactionFeesAmt</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>UnsettledAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>UserBlockId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ValueDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Voucher</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ZBAParentRecid</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>BankAccountTrans</Name>
			<Table>BankAccountTrans</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AccountId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AccountingCurrencyAmountCorrect_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AccountStatement</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AccountStatementDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AcknowledgementDate</DataField>
					<Enabled>No</Enabled>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AmountCorrect</DataField>
					<Enabled>No</Enabled>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>AmountCur</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AmountMST</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AmountReportingCurrency</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankPaymentRegistrationNum_LV</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankTransAmountCur</DataField>
					<Enabled>No</Enabled>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankTransCurrencyCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankTransType</DataField>
					<Enabled>No</Enabled>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Cancel</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CancelPending</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CentralBankPurposeCode_LV</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CentralBankPurposeText_LV</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ChequeNum</DataField>
					<Enabled>No</Enabled>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CorrespondentCountry_LV</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CurrencyCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DepositNum</DataField>
					<Enabled>No</Enabled>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Included</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LedgerDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LedgerTransType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Manual</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymentMode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>PaymReference</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReasonRefRecID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Reconciled</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RefRecId_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReportingCurrencyAmountCorrect_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReportingCurrencyAmount_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SKS_BR_AlreadyMarked</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SKS_BR_BankTranRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SKS_BR_IntermMatch</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SKS_BR_IsSelected</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SKS_BR_ManualReconciliationID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SKS_BR_MarkedFromReconcileStatement</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SKS_EFTAP_InboundRefNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SKS_IHB_AppropriationCalculated</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SKS_IHB_InterestCalculated</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SKS_IHB_StatementDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SKS_IHB_StatementNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SKS_IHB_ValueDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SourceRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SourceTableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxGroup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxItemGroup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>TransDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>Txt</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Voucher</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>BankAccountTable</Name>
			<Table>BankAccountTable</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AccountID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AccountNameKana_JP</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AccountNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ActiveFrom</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ActiveTo</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankAccountStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankCIN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankClearingCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankCodeType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankCompanyStatementName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankConstantSymbol</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankContractAccount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankDestinationName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankGroupId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankInterbankClearingCode_BE</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankMultiCurrency</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankPositivePayFormat</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankPositivePayFormatName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankPositivePayStartDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankReconAllowedPennyDifference</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankReconciliationEnabled</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankReconciliationMatchRuleSet</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankReconciliationStmtAsPaymConfirm</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankReconMatchAutoAfterImport</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankReconMatchRuleManualMatch</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankReconMatchRuleManualReversal</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankSortCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankStatementFormat</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankStatementName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankSuffix</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankTransferCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CellularPhone</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CFMBankBalanceMinimum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CompanyPaymId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ContactPerson</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CorrAccount_W</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CurrencyCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CurrencyOrder_TemplateName_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CurrencyOrder_TemplateRefRecId_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CurrencySellOrder_TemplateName_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CurrencySellOrder_TemplateRefRecId_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustomerPaymentFeeLedgerDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustPaymFeePost</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DebitDirectId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DiscCreditMaxMST</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DivisionPaymId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Email</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FeeContractAccount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>GiroContract</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>GiroContractAccount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IBAN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IncludeBankBarCode_FI</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InvoiceRemitAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InvoiceRemittanceLedgerDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>isBankPrenote</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsNACHAFileBlocked</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LedgerDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LedgerJournalNameId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Location</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LvDefaultBank</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LvPayOrderType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Name</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NsfFeeMarkupGroupId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NsfFeeMarkupGroupModule</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NsfLedgerJournalName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OverDraftLimit</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Pager</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymForeignExportPath_LT</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymLocalExportPath_LT</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymOrderNumSeqId_W</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Phone</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PhoneLocal</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PrenoteResponseDays</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PrintGiro_FI</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RegistrationNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RemitCollectionAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RemitDiscountAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RemittanceCollectionLedgerDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RemittanceDiscountLedgerDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Rfc_MX</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SKS_EFT_AcctApprovalDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SKS_EFT_AcctApprover</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SKS_EFT_AcctModifiedDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SKS_EFT_AcctModifier</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SKS_EFT_AcctStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SKS_EFT_Disbursements</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SMS</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SpecificSymbol</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SWIFTNo</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TeleFax</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Telex</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TemplateFileName_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TemplateRefRecId_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransType_JP</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>URL</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>SKS_BR_BankTran</JoinSource>
			<LinkType>InnerJoin</LinkType>
			<AllowCheck>No</AllowCheck>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@SKS1598</Caption>
		<DataSource xmlns="">BankAccountTrans</DataSource>
		<HeightMode xmlns="">Column</HeightMode>
		<Pattern xmlns="">SimpleDetails-FastTabsContainer</Pattern>
		<PatternVersion xmlns="">1.4</PatternVersion>
		<WidthMode xmlns="">Column</WidthMode>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>ActionPane_ButtonGroup</Name>
				<Type>ActionPane</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>ButtonGroup</Name>
						<ElementPosition>1717986916</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<NeededPermission>Update</NeededPermission>
						<Type>ButtonGroup</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>BtnOK</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1073741822</ElementPosition>
								<Enabled>No</Enabled>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<HelpText>@SKS1709</HelpText>
								<Type>Button</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Text>@SKS207</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>BtnCancel</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1610612733</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<HelpText>@SKS1710</HelpText>
								<Type>Button</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Text>@SYS309330</Text>
							</AxFormControl>
						</Controls>
						<ArrangeMethod>Vertical</ArrangeMethod>
					</AxFormControl>
				</Controls>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>FormHeader</Name>
				<Pattern>FieldsFieldGroups</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>MatchFilterGroupBox</Name>
						<Type>Group</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormComboBoxControl">
								<Name>SKS_BR_MatchFilter</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>214748364</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>ComboBox</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<EnumType>SKS_BR_MatchFilter</EnumType>
								<Label>@SYS53654</Label>
								<Items />
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormRealControl">
								<Name>Difference</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1717986916</ElementPosition>
								<Enabled>No</Enabled>
								<FilterExpression>%1</FilterExpression>
								<Type>Real</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Label>@SYS11152</Label>
								<NoOfDecimals>-1</NoOfDecimals>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormRealControl">
								<Name>ImportedTransSelectedTotal</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1288490187</ElementPosition>
								<Enabled>No</Enabled>
								<FilterExpression>%1</FilterExpression>
								<Type>Real</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Label>@SKS1707</Label>
								<NoOfDecimals>-1</NoOfDecimals>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormRealControl">
								<Name>UnreconciledTransSelectedTotal</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>858993458</ElementPosition>
								<Enabled>No</Enabled>
								<FilterExpression>%1</FilterExpression>
								<Type>Real</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Label>@SKS1599</Label>
								<NoOfDecimals>-1</NoOfDecimals>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>strEdtAcctStmtAcctID</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>858993458</ElementPosition>
								<Enabled>No</Enabled>
								<FilterExpression>%1</FilterExpression>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>CompanyBankAccountId</ExtendedDataType>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>strEdtAcctStmtNum</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1288490187</ElementPosition>
								<Enabled>No</Enabled>
								<FilterExpression>%1</FilterExpression>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>BankAccountStatementNum</ExtendedDataType>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormDateControl">
								<Name>dateEdtAcctStmtDate</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1717986916</ElementPosition>
								<Enabled>No</Enabled>
								<FilterExpression>%1</FilterExpression>
								<Type>Date</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>TransDate</ExtendedDataType>
							</AxFormControl>
						</Controls>
					</AxFormControl>
				</Controls>
				<ColumnsMode>Fill</ColumnsMode>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormTabControl">
				<Name>FormTabControl1</Name>
				<Type>Tab</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>TabPage</Name>
						<ElementPosition>1431655764</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>SizeToAvailable</HeightMode>
						<Pattern>ToolbarList</Pattern>
						<PatternVersion>1.2</PatternVersion>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormActionPaneControl">
								<Name>ActionPane</Name>
								<ElementPosition>954437176</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<NeededPermission>Update</NeededPermission>
								<Type>ActionPane</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormActionPaneTabControl">
										<Name>ActionPaneTab</Name>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>ActionPaneTab</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormButtonGroupControl">
												<Name>BankAccountTransControls</Name>
												<ElementPosition>1431655764</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>ButtonGroup</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormMenuFunctionButtonControl">
														<Name>LedgerTransVoucher1</Name>
														<ElementPosition>715827880</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>MenuFunctionButton</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<MenuItemName>LedgerTransVoucher1</MenuItemName>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormButtonControl">
														<Name>SelectAllDisplayedBankAccountTrans</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1073741822</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<HelpText>@SKS3230</HelpText>
														<Type>Button</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<AutoRefreshData>Yes</AutoRefreshData>
														<Text>@SYS152644</Text>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormButtonControl">
														<Name>ClearAllBankAccountTransRegardlessOfFilter</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1610612733</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<HelpText>@SKS3231</HelpText>
														<Type>Button</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<AutoRefreshData>Yes</AutoRefreshData>
														<Text>@SYS152646</Text>
													</AxFormControl>
												</Controls>
												<ArrangeMethod>Vertical</ArrangeMethod>
											</AxFormControl>
										</Controls>
										<AlignChild>No</AlignChild>
										<AlignChildren>No</AlignChildren>
										<ArrangeMethod>Vertical</ArrangeMethod>
									</AxFormControl>
								</Controls>
								<AlignChild>No</AlignChild>
								<AlignChildren>No</AlignChildren>
								<ArrangeMethod>Vertical</ArrangeMethod>
								<Style>Strip</Style>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGridControl">
								<Name>Grid</Name>
								<ElementPosition>1550960411</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Grid</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>chkboxBATSelected</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>429496728</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>CheckBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<BackgroundColor>WindowBackground</BackgroundColor>
										<DataMethod>boolIsMatched</DataMethod>
										<DataSource>BankAccountTrans</DataSource>
										<Label>@SYS24159</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>BankAccountTrans_Voucher</Name>
										<ElementPosition>536870910</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>Voucher</DataField>
										<DataSource>BankAccountTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>BankAccountTrans_BankTransType</Name>
										<ElementPosition>644245092</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>BankTransType</DataField>
										<DataSource>BankAccountTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>BankAccountTrans_TransDate</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>715827880</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Date</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>TransDate</DataField>
										<DataSource>BankAccountTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>BankAccountTrans_Txt</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>787410668</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>Txt</DataField>
										<DataSource>BankAccountTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>BankAccountTrans_AmountCur</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>858993456</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>AmountCur</DataField>
										<DataSource>BankAccountTrans</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>BankAccountTrans_CurrencyCode</Name>
										<ElementPosition>966367638</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>CurrencyCode</DataField>
										<DataSource>BankAccountTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>BankAccountTrans_AmountCorrect</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1073741820</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>AmountCorrect</DataField>
										<DataSource>BankAccountTrans</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>BankAccountTrans_AmountCorrected</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1288490184</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<HelpText>@SKS1437</HelpText>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>CorrectedAmountCur</DataMethod>
										<DataSource>BankAccountTrans</DataSource>
										<Label>@SYS53245</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>BankAccountTrans_AcknowledgementDate</Name>
										<ElementPosition>1503238548</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Date</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>AcknowledgementDate</DataField>
										<DataSource>BankAccountTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>BankAccountTrans_DepositNum</Name>
										<ElementPosition>1717986912</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>DepositNum</DataField>
										<DataSource>BankAccountTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>BankAccountTrans_ChequeNum</Name>
										<ElementPosition>1932735276</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>ChequeNum</DataField>
										<DataSource>BankAccountTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>BankAccountTrans_PaymReference</Name>
										<ElementPosition>2040109461</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>PaymReference</DataField>
										<DataSource>BankAccountTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>BankAccountTrans_SKS_EFTAP_InboundRefNum</Name>
										<AllowEdit>No</AllowEdit>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>SKS_EFTAP_InboundRefNum</DataField>
										<DataSource>BankAccountTrans</DataSource>
									</AxFormControl>
								</Controls>
								<DataSource>BankAccountTrans</DataSource>
								<MultiSelect>No</MultiSelect>
								<ShowRowLabels>No</ShowRowLabels>
							</AxFormControl>
						</Controls>
						<Caption>@SKS1708</Caption>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>TabPage1</Name>
						<ElementPosition>1431655764</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>SizeToAvailable</HeightMode>
						<Pattern>ToolbarList</Pattern>
						<PatternVersion>1.2</PatternVersion>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormActionPaneControl">
								<Name>ActionPane1</Name>
								<ElementPosition>1073741822</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>ActionPane</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormActionPaneTabControl">
										<Name>ActionPaneTab1</Name>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>ActionPaneTab</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormButtonGroupControl">
												<Name>SKS_BR_BankTranControls</Name>
												<ElementPosition>1431655764</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<NeededPermission>Update</NeededPermission>
												<Type>ButtonGroup</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormButtonControl">
														<Name>SelectAllDisplayedSKS_BR_BANKTRAN</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1073741822</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<HelpText>@SKS3230</HelpText>
														<Type>Button</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<SaveRecord>No</SaveRecord>
														<Text>@SYS152644</Text>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormButtonControl">
														<Name>ClearAllSKS_BR_BANKTRANRegardlessOfFilter</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1610612733</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<HelpText>@SKS3231</HelpText>
														<Type>Button</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<SaveRecord>No</SaveRecord>
														<Text>@SYS152646</Text>
													</AxFormControl>
												</Controls>
												<ArrangeMethod>Vertical</ArrangeMethod>
											</AxFormControl>
										</Controls>
										<AlignChild>No</AlignChild>
										<AlignChildren>No</AlignChildren>
										<ArrangeMethod>Vertical</ArrangeMethod>
									</AxFormControl>
								</Controls>
								<AlignChild>No</AlignChild>
								<AlignChildren>No</AlignChildren>
								<ArrangeMethod>Vertical</ArrangeMethod>
								<Style>Strip</Style>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGridControl">
								<Name>Grid1</Name>
								<ElementPosition>1610612734</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Grid</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>chkboxSBBTSelected</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>477218588</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>CheckBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<BackgroundColor>WindowBackground</BackgroundColor>
										<DataMethod>boolIsMatched</DataMethod>
										<DataSource>SKS_BR_BankTran</DataSource>
										<Label>@SYS5965</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>SKS_BR_BankTran_FileTranType</Name>
										<ElementPosition>715827882</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>FileTranType</DataField>
										<DataSource>SKS_BR_BankTran</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>SKS_BR_BankTran_BankTranType</Name>
										<ElementPosition>954437176</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>BankTranType</DataField>
										<DataSource>SKS_BR_BankTran</DataSource>
										<Label>@SYS71565</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>SKS_BR_BankTran_TranAmount</Name>
										<ElementPosition>1193046470</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>TranAmount</DataField>
										<DataSource>SKS_BR_BankTran</DataSource>
										<Label>@SYS6928</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>BankAccountTable_CurrencyCode</Name>
										<ElementPosition>1312351117</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>CurrencyCode</DataField>
										<DataSource>BankAccountTable</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>SKS_BR_BankTran_TranDate</Name>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Date</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>TranDate</DataField>
										<DataSource>SKS_BR_BankTran</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>SKS_BR_BankTran_BankNum</Name>
										<ElementPosition>1670265058</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>BankNum</DataField>
										<DataSource>SKS_BR_BankTran</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>SKS_BR_BankTran_BankCustomerNum</Name>
										<ElementPosition>1789569705</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>BankCustomerNum</DataField>
										<DataSource>SKS_BR_BankTran</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>SKS_BR_BankTran_TranDescription</Name>
										<ElementPosition>1908874352</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>TranDescription</DataField>
										<DataSource>SKS_BR_BankTran</DataSource>
									</AxFormControl>
								</Controls>
								<DataSource>SKS_BR_BankTran</DataSource>
								<MultiSelect>No</MultiSelect>
								<ShowRowLabels>No</ShowRowLabels>
							</AxFormControl>
						</Controls>
						<Caption>@SKS533</Caption>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
				</Controls>
				<Style>FastTabs</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>