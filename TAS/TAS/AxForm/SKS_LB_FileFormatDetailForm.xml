<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>SKS_LB_FileFormatDetailForm</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class SKS_LB_FileFormatDetailForm extends FormRun
{
    SKS_LB_FileFormat mainFileFormat;
    SKS_LB_FileType mainFileType;


}
]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
    
        super();
    
        if (element.args().dataset() == tablenum(SKS_LB_FileFormat))
        {
            mainFileFormat = element.args().record();
        }
        else
        {
            throw error("@SYS96590");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mainscreenchange</Name>
				<Source><![CDATA[
    void mainscreenchange()
    {
    
        switch (mainFileFormat.FileType)
        {
            case SKS_LB_FileType::CSV:
            case SKS_LB_FileType::TabDelimited:
                SKS_LB_FileFormatDet_FieldStart.visible(false);
                SKS_LB_FileFormatDet_Fieldend.visible(false);
                SKS_LB_FileFormatDet_FieldNbr.visible(true);
                SKS_LB_FileFormatDet_FieldType.visible(true);
                FormatDetailType.visible(false);
                SKS_LB_FileFormatDet_EDIOccurence.visible(false);
                SKS_LB_FileFormatDet_EDISegment.visible(false);
                SKS_LB_FileFormatDet_EDIFieldNbr.visible(false);
                SKS_LB_FileFormatDet_WFRMFSegment.visible(false);
                break;
    
            case SKS_LB_FileType::FixedField:
                SKS_LB_FileFormatDet_FieldStart.visible(true);
                SKS_LB_FileFormatDet_Fieldend.visible(true);
                SKS_LB_FileFormatDet_FieldNbr.visible(false);
                SKS_LB_FileFormatDet_FieldType.visible(true);
                FormatDetailType.visible(false);
                SKS_LB_FileFormatDet_EDIFieldNbr.visible(false);
                SKS_LB_FileFormatDet_EDIOccurence.visible(false);
                SKS_LB_FileFormatDet_EDISegment.visible(false);
                SKS_LB_FileFormatDet_WFRMFSegment.visible(false);
                break;
    
            case SKS_LB_FileType::BAI2:
            case SKS_LB_FileType::Colombia:
                SKS_LB_FileFormatDet_FieldStart.visible(true);
                SKS_LB_FileFormatDet_Fieldend.visible(true);
                SKS_LB_FileFormatDet_FieldNbr.visible(false);
                SKS_LB_FileFormatDet_FieldType.visible(true);
                FormatDetailType.visible(true);
                FormatDetailType.selection(SKS_LB_FormatDetType::MultiLineCheck);
                SKS_LB_FileFormatDet_EDIFieldNbr.visible(false);
                SKS_LB_FileFormatDet_EDIOccurence.visible(false);
                SKS_LB_FileFormatDet_EDISegment.visible(false);
                SKS_LB_FileFormatDet_WFRMFSegment.visible(false);
                break;
    
            case SKS_LB_FileType::EDI820:
            case SKS_LB_FileType::EDI823:
                SKS_LB_FileFormatDet_FieldStart.visible(false);
                SKS_LB_FileFormatDet_Fieldend.visible(false);
                SKS_LB_FileFormatDet_FieldNbr.visible(false);
                SKS_LB_FileFormatDet_FieldType.visible(true);
                SKS_LB_FileFormatDet_EDISegment.visible(true);
                SKS_LB_FileFormatDet_EDIFieldNbr.visible(true);
                SKS_LB_FileFormatDet_EDIOccurence.visible(true);
                FormatDetailType.visible(true);
                FormatDetailType.selection(SKS_LB_FormatDetType::MultiLineCheck);
                SKS_LB_FileFormatDet_WFRMFSegment.visible(false);
                break;
    
            case SKS_LB_FileType::Symcor:
                SKS_LB_FileFormatDet_FieldStart.visible(true);
                SKS_LB_FileFormatDet_Fieldend.visible(true);
                SKS_LB_FileFormatDet_FieldNbr.visible(false);
                SKS_LB_FileFormatDet_FieldType.visible(true);
                FormatDetailType.visible(true);
                FormatDetailType.selection(SKS_LB_FormatDetType::MultiLineCheck);
                SKS_LB_FileFormatDet_EDIFieldNbr.visible(false);
                SKS_LB_FileFormatDet_EDIOccurence.visible(false);
                SKS_LB_FileFormatDet_EDISegment.visible(false);
                SKS_LB_FileFormatDet_WFRMFSegment.visible(false);
                break;
    
            case SKS_LB_FileType::WFRMF:
                SKS_LB_FileFormatDet_FieldStart.visible(true);
                SKS_LB_FileFormatDet_Fieldend.visible(true);
                SKS_LB_FileFormatDet_FieldNbr.visible(false);
                SKS_LB_FileFormatDet_FieldType.visible(true);
                FormatDetailType.visible(true);
                FormatDetailType.selection(SKS_LB_FormatDetType::MultiLineCheck);
                SKS_LB_FileFormatDet_EDIFieldNbr.visible(false);
                SKS_LB_FileFormatDet_EDIOccurence.visible(true);
                SKS_LB_FileFormatDet_EDISegment.visible(false);
                SKS_LB_FileFormatDet_WFRMFSegment.visible(true);
                break;
    
            case SKS_LB_FileType::WFARRemitFile:
                SKS_LB_FileFormatDet_FieldStart.visible(true);
                SKS_LB_FileFormatDet_Fieldend.visible(true);
                SKS_LB_FileFormatDet_FieldNbr.visible(false);
                SKS_LB_FileFormatDet_FieldType.visible(true);
                FormatDetailType.visible(true);
                FormatDetailType.selection(SKS_LB_FormatDetType::Detail);
                SKS_LB_FileFormatDet_EDIFieldNbr.visible(false);
                SKS_LB_FileFormatDet_EDIOccurence.visible(false);
                SKS_LB_FileFormatDet_EDISegment.visible(false);
                SKS_LB_FileFormatDet_WFRMFSegment.visible(false);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sortGrid</Name>
				<Source><![CDATA[
    void sortGrid()
    {
        SKS_LB_FileFormatDet_ds.query().dataSourceNo(1).sortClear();
        if(mainFileFormat.FileType == SKS_LB_FileType::CSV || mainFileFormat.FileType == SKS_LB_FileType::TabDelimited)
        {
            SKS_LB_FileFormatDet_ds.query().dataSourceNo(1).addSortField(fieldNum(SKS_LB_FileFormatDet,FieldNbr),SortOrder::Ascending);
        }
        else if(mainFileFormat.FileType == SKS_LB_FileType::FixedField ||  mainFileFormat.FileType == SKS_LB_FileType::BAI2)
        {
            SKS_LB_FileFormatDet_ds.query().dataSourceNo(1).addSortField(fieldNum(SKS_LB_FileFormatDet,FieldStart),SortOrder::Ascending);
        }
        else if(mainFileFormat.FileType == SKS_LB_FileType::EDI820)
        {
            SKS_LB_FileFormatDet_ds.query().dataSourceNo(1).addSortField(fieldNum(SKS_LB_FileFormatDet,recid),SortOrder::Ascending);
        }
    
    
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>SKS_LB_FileFormatDet</Name>
				<Methods>
					<Method>
						<Name>delete</Name>
						<Source><![CDATA[
        public void delete()
        {
            boolean delete;
            SKS_LB_OffsetDimensionMapping OffSetDimMapping;
            if(SKS_LB_FileFormatDet.FieldType == SKS_LB_FieldType::OffsetDim)
            {
                delete = true;
            }
        
            super();
        
            if(delete)
            {
                delete_from OffSetDimMapping where OffSetDimMapping.SKS_LB_FileFormat == SKS_LB_FileFormatDet.FormatID;
                SKS_LB_OffsetDimMapping.enabled(false);
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>validateWrite</Name>
						<Source><![CDATA[
        public boolean validateWrite()
        {
            boolean ret;
        
            ret = super();
        
            if(mainFileFormat.FileType == SKS_LB_FileType::EDI820 || mainFileFormat.FileType == SKS_LB_FileType::EDI823)
            {
                if(FormatDetailType.selection() == SKS_LB_FormatDetType::MultiLineCheck)
                {
                    if(SKS_LB_FileFormatDet.EDISegment == SKS_LB_EDISegment::REFRMR || SKS_LB_FileFormatDet.EDISegment == SKS_LB_EDISegment::RMR)
                    {
                        error("@SKS2997");
                        ret = false;
                    }
                }
                else if(FormatDetailType.selection() == SKS_LB_FormatDetType::MultiLineInvoice)
                {
                    if(SKS_LB_FileFormatDet.EDISegment != SKS_LB_EDISegment::REFRMR && SKS_LB_FileFormatDet.EDISegment != SKS_LB_EDISegment::RMR && SKS_LB_FileFormatDet.EDISegment != SKS_LB_EDISegment::NTERMR)
                    {
                        error("@SKS2997");
                        ret = false;
                    }
                }
                else if(FormatDetailType.selection() == SKS_LB_FormatDetType::AdjPmtLine)
                {
                    if(SKS_LB_FileFormatDet.EDISegment != SKS_LB_EDISegment::DTMADXENT && SKS_LB_FileFormatDet.EDISegment != SKS_LB_EDISegment::ADXENT
                        && SKS_LB_FileFormatDet.EDISegment != SKS_LB_EDISegment::IT1ADXENT && SKS_LB_FileFormatDet.EDISegment != SKS_LB_EDISegment::NM1ENTPaym
                        && SKS_LB_FileFormatDet.EDISegment != SKS_LB_EDISegment::NTEADXENT)
                    {
                        error("@SKS2997");
                        ret = false;
                    }
                }
                else if(FormatDetailType.selection() == SKS_LB_FormatDetType::AdjInvLine)
                {
                    if(SKS_LB_FileFormatDet.EDISegment != SKS_LB_EDISegment::ADXRMR && SKS_LB_FileFormatDet.EDISegment != SKS_LB_EDISegment::DTMADXRMR
                        && SKS_LB_FileFormatDet.EDISegment != SKS_LB_EDISegment::IT1ADXRMR
                        && SKS_LB_FileFormatDet.EDISegment != SKS_LB_EDISegment::NTEADXRMR)
                    {
                        error("@SKS2997");
                        ret = false;
                    }
                }
            }
            else if(mainFileFormat.FileType == SKS_LB_FileType::WFRMF)
            {
                if(FormatDetailType.selection() == SKS_LB_FormatDetType::MultiLineCheck)
                {
                    if(SKS_LB_FileFormatDet.WFRMFSegment == SKS_LB_WFRMFSegment::BH
                        || SKS_LB_FileFormatDet.WFRMFSegment == SKS_LB_WFRMFSegment::BT
                        || SKS_LB_FileFormatDet.WFRMFSegment == SKS_LB_WFRMFSegment::REM
                        || SKS_LB_FileFormatDet.WFRMFSegment == SKS_LB_WFRMFSegment::RNT)
                    {
                        error("@SKS2997");
                        ret = false;
                    }
                }
                else if(FormatDetailType.selection() == SKS_LB_FormatDetType::MultiLineInvoice)
                {
                    if(SKS_LB_FileFormatDet.WFRMFSegment == SKS_LB_WFRMFSegment::BH
                        || SKS_LB_FileFormatDet.WFRMFSegment == SKS_LB_WFRMFSegment::BT
                        || SKS_LB_FileFormatDet.WFRMFSegment == SKS_LB_WFRMFSegment::PR
                        || SKS_LB_FileFormatDet.WFRMFSegment == SKS_LB_WFRMFSegment::PPR
                        || SKS_LB_FileFormatDet.WFRMFSegment == SKS_LB_WFRMFSegment::PNT
                        || SKS_LB_FileFormatDet.WFRMFSegment == SKS_LB_WFRMFSegment::RMH)
                    {
                        error("@SKS2997");
                        ret = false;
                    }
                }
                else if(FormatDetailType.selection() == SKS_LB_FormatDetType::BatHeader)
                {
                    if(SKS_LB_FileFormatDet.WFRMFSegment != SKS_LB_WFRMFSegment::BH)
                    {
                        error("@SKS2997");
                        ret = false;
                    }
                }
                else if(FormatDetailType.selection() == SKS_LB_FormatDetType::BatTrailer)
                {
                    if(SKS_LB_FileFormatDet.WFRMFSegment != SKS_LB_WFRMFSegment::BT)
                    {
                        error("@SKS2997");
                        ret = false;
                    }
                }

                if(SKS_LB_FileFormatDet.FieldType == sks_lb_fieldtype::LBBankAccount)
                {
                    error(strFmt("@SKS:SKGFieldTypeNotAllowed", SKS_LB_FileFormatDet.FieldType, FormatDetailType.selection()));
                }
            }
            else if(mainFileFormat.FileType == SKS_LB_FileType::BAI2)
            {
                if((FormatDetailType.selection() == SKS_LB_FormatDetType::fileHeader && SKS_LB_FileFormatDet.FieldType != sks_lb_fieldtype::LBBankAccount))
                {
                    error(strFmt("@SKS:SKGFieldTypeNotAllowed", SKS_LB_FileFormatDet.FieldType, FormatDetailType.selection()));
                }
            }
        
            if(ret && SKS_LB_FileFormatDet.FieldType == sks_lb_fieldtype::OffsetDim)
            {
                if(SKS_LB_FileFormatDet.DimSeparator == '')
                {
                    error("@SKS3849");
                    ret = false;
                }
            }
        
            if(ret && SKS_LB_FileFormatDet.EDISegment == SKS_LB_EDISegment::NM1ENTPaym && (SKS_LB_FileFormatDet.FormatDetType != SKS_LB_FormatDetType::MultiLineCheck
                || SKS_LB_FileFormatDet.FieldType != SKS_LB_FieldType::Note))
            {
                error("@SKS4044");
                ret = false;
            }
        
            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>validateDelete</Name>
						<Source><![CDATA[
        public boolean validateDelete()
        {
            boolean ret;
        
            ret = super();
        
            if(ret && sks_lb_fileformatdet.fieldtype == SKS_LB_FieldType::LBBankAccount && mainFileFormat.FileType != SKS_LB_FileType::BAI2 )
            {
                //select verifyacct from sks_lb_fileformat where sks_lb_fileformat.formatid == this.formatid;
                if(mainFileFormat.verifyacct == NoYes::Yes)
                {
                    //give error message explaining why
                    error("@SKS2654");
                    ret = false;
                }
            }
        
            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        public int active()
        {
            int ret;
        
            ret = super();
        
            SKS_LB_FileFormatDet_ds.allowDelete(true);
            SKS_LB_FileFormatDet_ds.allowEdit(true);
            SKS_LB_FileFormatDet_FieldType.allowEdit(true);
            if((SKS_LB_FileFormatDet.FieldType == SKS_LB_FieldType::RecordType )
               && mainFileFormat.FileType == SKS_LB_FileType::BAI2)
            {
                SKS_LB_FileFormatDet_ds.allowDelete(false);
                SKS_LB_FileFormatDet_ds.allowEdit(false);
            }
        
            if(SKS_LB_FileFormatDet.FieldType == SKS_LB_FieldType::OffsetDim)
            {
                SKS_LB_FileFormatDet_ds.object(fieldNum(SKS_LB_FileFormatDet, Dimseparator)).allowEdit(true);
            }
            else
            {
                SKS_LB_FileFormatDet_ds.object(fieldNum(SKS_LB_FileFormatDet, Dimseparator)).allowEdit(false);
            }
        
            if((SKS_LB_FileFormatDet.FieldType == SKS_LB_FieldType::BatchSequence
                || SKS_LB_FileFormatDet.FieldType == SKS_LB_FieldType::BatchNumber
                || SKS_LB_FileFormatDet.FieldType == SKS_LB_FieldType::LastIndicator)
                && mainFileFormat.FileType == SKS_LB_FileType::BAI2)
            {
                SKS_LB_FileFormatDet_ds.allowDelete(false);
                SKS_LB_FileFormatDet_FieldType.allowEdit(false);
            }
        
            if(mainFileFormat.FileType == SKS_LB_FileType::EDI820 || mainFileFormat.FileType == SKS_LB_FileType::EDI823)
            {
                if((SKS_LB_FileFormatDet.EDISegment == SKS_LB_EDISegment::ST)
                || (SKS_LB_FileFormatDet.EDISegment == SKS_LB_EDISegment::BPR)
                || (SKS_LB_FileFormatDet.EDISegment == SKS_LB_EDISegment::TRN)
                || (SKS_LB_FileFormatDet.EDISegment == SKS_LB_EDISegment::RMR))
                {
                    SKS_LB_FileFormatDet_ds.object(fieldNum(SKS_LB_FileFormatDet, EDIOccurrence)).allowEdit(false);
                }
                else
                {
                    SKS_LB_FileFormatDet_ds.object(fieldNum(SKS_LB_FileFormatDet, EDIOccurrence)).allowEdit(true);
                }
            }
        
            if(mainFileFormat.FileType == SKS_LB_FileType::WFRMF)
            {
                if((SKS_LB_FileFormatDet.WFRMFSegment == SKS_LB_WFRMFSegment::BH)
                || (SKS_LB_FileFormatDet.WFRMFSegment == SKS_LB_WFRMFSegment::PR)
                || (SKS_LB_FileFormatDet.WFRMFSegment == SKS_LB_WFRMFSegment::RMH))
                {
                    SKS_LB_FileFormatDet_ds.object(fieldNum(SKS_LB_FileFormatDet, EDIOccurrence)).allowEdit(false);
                }
                else
                {
                    SKS_LB_FileFormatDet_ds.object(fieldNum(SKS_LB_FileFormatDet, EDIOccurrence)).allowEdit(true);
                }
            }
        
            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        public void write()
        {
            super();
            //SKS_LB_FileFormatDet_ds.research(true);
        }

]]></Source>
					</Method>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        public void executeQuery()
        {
            QueryBuildRange qbrRange;
            QueryBuildDataSource qbdSource1;
        
            ;
        
            this.query().dataSourceTable(tablenum(SKS_LB_FileFormatDet)).clearRanges();
            if(mainFileFormat.FileType == sks_lb_filetype::BAI2 || mainfileformat.FileType == SKS_LB_FileType::EDI820
                || mainfileformat.FileType == SKS_LB_FileType::EDI823 || mainfileformat.filetype == SKS_LB_FileType::Symcor
                || mainFileFormat.FileType == SKS_LB_FileType::WFRMF || mainFileFormat.FileType == SKS_LB_FileType::WFARRemitFile
                || mainFileFormat.Filetype == SKS_LB_FileType::Colombia)
            {
                qbdSource1 = this.query().dataSourceTable(tablenum(SKS_LB_FileFormatDet));
                qbrRange = qbdSource1.addRange(fieldnum(SKS_LB_FileFormatDet, FormatDetType));
        
                switch(FormatDetailType.selection())
                {
                    case SKS_LB_FormatDetType::MultiLineInvoice:
                        qbrRange.value(enum2str(SKS_LB_FormatDetType::MultiLineInvoice));
                        break;
                    case SKS_LB_FormatDetType::MultiLineCheck:
                        //if BAI2 file type, you want to retrieve the check line as the default
                        qbrRange.value(enum2str(SKS_LB_FormatDetType::MultiLineCheck));
                        break;
                    case SKS_LB_FormatDetType::BatHeader:
                        qbrRange.value(enum2str(SKS_LB_FormatDetType::BatHeader));
                        break;
                    case SKS_LB_FormatDetType::BatTrailer:
                        qbrRange.value(enum2str(SKS_LB_FormatDetType::BatTrailer));
                        break;
                    case SKS_LB_FormatDetType::AdjInvLine:
                        qbrRange.value(enum2str(SKS_LB_FormatDetType::AdjInvLine));
                        break;
                    case SKS_LB_FormatDetType::AdjPmtLine:
                        qbrRange.value(enum2str(SKS_LB_FormatDetType::AdjPmtLine));
                        break;
                    case SKS_LB_FormatDetType::Detail:
                        qbrRange.value(enum2str(SKS_LB_FormatDetType::Detail));
                        break;
                    case SKS_LB_FormatDetType::DetailSupp:
                        qbrRange.value(enum2str(SKS_LB_FormatDetType::DetailSupp));
                        break;
                    case SKS_LB_FormatDetType::PaymCodeSupp:
                        qbrRange.value(enum2str(SKS_LB_FormatDetType::PaymCodeSupp));
                        break;
                    case SKS_LB_FormatDetType::SuppVarAdd:
                        qbrRange.value(enum2str(SKS_LB_FormatDetType::SuppVarAdd));
                        break;
                    case SKS_LB_FormatDetType::FileHeader:
                        qbrRange.value(enum2str(SKS_LB_FormatDetType::FileHeader));
                        break;
                }
            }
        
            element.sortGrid();
            super();
        }

]]></Source>
					</Method>
					<Method>
						<Name>linkActive</Name>
						<Source><![CDATA[
        public void linkActive()
        {
            SKS_LB_FileFormatDet    FileFormatDet;
            element.mainscreenchange();
            select firstonly fileformatdet where fileformatdet.FormatID == mainFileFormat.FormatID && FileFormatDet.fieldtype == SKS_LB_FieldType::OffsetDim;
        
            if(FileFormatDet)
            {
                SKS_LB_OffsetDimMapping.enabled(true);
            }
            else
            {
                SKS_LB_OffsetDimMapping.enabled(false);
            }
            super();
        }

]]></Source>
					</Method>
					<Method>
						<Name>create</Name>
						<Source><![CDATA[
        public void create(boolean _append = false)
        {
            SKS_LB_FileFormatDet fileNumber;
            int nextFileNumber;
        
            ;
        
            super(_append);
        
            if(SKS_LB_FileFormat.FileType == SKS_LB_FileType::CSV || SKS_LB_FileFormat.FileType == SKS_LB_FileType::TabDelimited )
            {
                SELECT MAXOF(fieldNbr) FROM fileNumber WHERE mainFileFormat.FormatID == fileNumber.FormatID;
        
                if (fileNumber.FieldNbr > 0)
                {
                    nextFileNumber = fileNumber.FieldNbr + 1;
                    SKS_LB_FileFormatDet.FieldNbr = nextFileNumber;
                }
                else
                {
                   SKS_LB_FileFormatDet.FieldNbr = 0001;
                }
            }
            if(mainfileformat.FileType == SKS_LB_FileType::EDI820 || mainfileformat.filetype == SKS_LB_FileType::EDI823 || mainFileFormat.FileType == SKS_LB_FileType::WFRMF)
            {
                SKS_LB_FileFormatDet.EDIOccurrence = 1;
            }
        }

]]></Source>
					</Method>
				</Methods>
				<Fields>
					<Field>
						<DataField>EDISegment</DataField>
						<Methods>
							<Method>
								<Name>validate</Name>
								<Source><![CDATA[
            public boolean validate()
            {
                boolean ret;
            
                ret = super();
            
                if(SKS_LB_FileFormat.FileType == SKS_LB_FileType::EDI823)
                {
                    if(SKS_LB_FileFormatDet.EDISegment == SKS_LB_EDISegment::ADXENT || SKS_LB_FileFormatDet.EDISegment == SKS_LB_EDISegment::NTEADXENT
                        || SKS_LB_FileFormatDet.EDISegment == SKS_LB_EDISegment::DTMADXENT
                        || SKS_LB_FileFormatDet.EDISegment == SKS_LB_EDISegment::ADXRMR || SKS_LB_FileFormatDet.EDISegment == SKS_LB_EDISegment::NTEADXRMR
                        || SKS_LB_FileFormatDet.EDISegment == SKS_LB_EDISegment::DTMADXRMR || SKS_LB_FileFormatDet.EDISegment == SKS_LB_EDISegment::NM1ENTPaym
                        || SKS_LB_FileFormatDet.EDISegment == SKS_LB_EDISegment::IT1ADXRMR || SKS_LB_FileFormatDet.EDISegment == SKS_LB_EDISegment::IT1ADXENT
                        || SKS_LB_FileFormatDet.EDISegment == SKS_LB_EDISegment::NTERMR)
                    {
                        error(strFmt("@SKS3896", SKS_LB_FileFormatDet.EDISegment));
                        ret = false;
                    }
                }
                else if(SKS_LB_FileFormat.FileType == SKS_LB_FileType::EDI820)
                {
                    if(SKS_LB_FileFormatDet.edisegment == SKS_LB_EDISegment::NM1ENTPaym && SKS_LB_FileFormatDet.FormatDetType != SKS_LB_FormatDetType::MultiLineCheck)
                    {
                        error("@SKS4043");
                        ret = false;
                    }
                }
            
                return ret;
            }

]]></Source>
							</Method>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();
            
                if((SKS_LB_FileFormatDet.EDISegment == SKS_LB_EDISegment::ST)
                    || (SKS_LB_FileFormatDet.EDISegment == SKS_LB_EDISegment::BPR)
                    || (SKS_LB_FileFormatDet.EDISegment == SKS_LB_EDISegment::TRN)
                    || (SKS_LB_FileFormatDet.EDISegment == SKS_LB_EDISegment::RMR)
                    || (SKS_LB_FileFormatDet.EDISegment == SKS_LB_EDISegment::ADXENT)
                    || (SKS_LB_FileFormatDet.EDISegment == SKS_LB_EDISegment::ADXRMR))
                {
                    SKS_LB_FileFormatDet.EDIOccurrence = 1;
                    SKS_LB_FileFormatDet_ds.object(fieldNum(SKS_LB_FileFormatDet, EDIOccurrence)).allowEdit(false);
                }
                else
                {
                    SKS_LB_FileFormatDet_ds.object(fieldNum(SKS_LB_FileFormatDet, EDIOccurrence)).allowEdit(true);
                }
            
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>FieldEnd</DataField>
						<Methods>
							<Method>
								<Name>validate</Name>
								<Source><![CDATA[
            public boolean validate()
            {
                boolean ret;
                System.Text.StringBuilder sb = new System.Text.StringBuilder();
            
                ;
                if(SKS_LB_FileFormatDet.FieldEnd < 1 )
                {
                    sb.Append("@SKS239");
                    sb.Replace('%1','1');
                    Box::stop(sb.ToString(),"@SKS225"); //must be greater than 2
                    return false;
                }
                else if(SKS_LB_FileFormatDet.FieldEnd > 9999 )
                {
                    sb.Append("@SKS240");
                    sb.Replace('%1','9999');
                    Box::stop(sb.ToString(),"@SKS225"); //must be less than 9999
                    return false;
                }
            
                if( SKS_LB_FileFormatDet.FieldEnd < SKS_LB_FileFormatDet.FieldStart )
                {
                    Box::stop("@SKS328","@SKS225"); //must be greater than the field start
                    return false;
                }
            
                ret = super();
            
                return ret;
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>FieldNbr</DataField>
						<Methods>
							<Method>
								<Name>validate</Name>
								<Source><![CDATA[
            public boolean validate()
            {
                boolean ret;
                System.Text.StringBuilder sb = new System.Text.StringBuilder();
                ;
                if(SKS_LB_FileFormatDet.FieldNbr < 0 )
                {
                    sb.Append("@SKS239");
                    sb.Replace('%1','0');
                    Box::stop(sb.ToString(),"@SKS225"); //must be greater than 0
                    return false;
                }
                else if(SKS_LB_FileFormatDet.FieldNbr > 9999 )
                {
                    sb.Append("@SKS240");
                    sb.Replace('%1','9999');
                    Box::stop(sb.ToString(),"@SKS225"); //must be less than 9999
                    return false;
                }
                ret = super();
            
                return ret;
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>FieldStart</DataField>
						<Methods>
							<Method>
								<Name>validate</Name>
								<Source><![CDATA[
            public boolean validate()
            {
                boolean ret;
                System.Text.StringBuilder sb = new System.Text.StringBuilder();
            
                ;
                if(SKS_LB_FileFormatDet.FieldStart < 1 )
                {
                    sb.Append("@SKS239");
                    sb.Replace('%1','1');
                    Box::stop(sb.ToString(),"@SKS225"); //must be greater than 0
                    return false;
                }
                else if(SKS_LB_FileFormatDet.FieldStart > 9999 )
                {
                    sb.Append("@SKS240");
                    sb.Replace('%1','9999');
                    Box::stop(sb.ToString(),"@SKS225"); //musst be less than 9999
                    return false;
                }
            
                ret = super();
            
                return ret;
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>FieldType</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();
            
                if(SKS_LB_FileFormatDet.FieldType == SKS_LB_FieldType::OffsetDim)
                {
                    SKS_LB_FileFormatDet_ds.object(fieldNum(SKS_LB_FileFormatDet, Dimseparator)).allowEdit(true);
                    SKS_LB_OffsetDimMapping.enabled(true);
                }
                else
                {
                    SKS_LB_FileFormatDet_ds.object(fieldNum(SKS_LB_FileFormatDet, Dimseparator)).allowEdit(false);
                    SKS_LB_FileFormatDet.DimSeparator = '';
                    SKS_LB_OffsetDimMapping.enabled(false);
                }
            }

]]></Source>
							</Method>
							<Method>
								<Name>validate</Name>
								<Source><![CDATA[
            public boolean validate()
            {
                boolean ret;
                SKS_LB_FileFormat   lsks_lb_fileformat;
                SKS_LB_FileFormatDet    lsks_lb_fileformatdet;
            
                ret = super();
            
                    //For EDI 820 have separate logic that will say that each field type may only be mapped once per Format Detail Type (ex. Check line, Invoice line) with the
                    //exception being the Note field and the "Do Not Import" field
                if(SKS_LB_FileFormat.FileType == SKS_LB_FileType::EDI820)
                {
                    select firstOnly fieldtype from lsks_lb_fileformatdet where lsks_lb_fileformatdet.FormatID == SKS_LB_FileFormatDet.FormatID
                        && lsks_lb_fileformatdet.RecId != SKS_LB_FileFormatDet.RecId && lsks_lb_fileformatdet.fieldtype == SKS_LB_FileFormatDet.fieldtype
                        && lsks_lb_fileformatdet.FormatDetType == SKS_LB_FileFormatDet.FormatDetType && lsks_lb_fileformatdet.FieldType != SKS_LB_FieldType::DoNotImport
                        && lsks_lb_fileformatdet.FieldType != SKS_LB_FieldType::Note;
            
                    if(ret && lsks_lb_fileformatdet)
                    {
                        error("@SKS2999");
                        ret = false;
                    }
            
                    if(SKS_LB_FileFormatDet.EDISegment == SKS_LB_EDISegment::NM1ENTPaym && SKS_LB_FileFormatDet.FieldType != SKS_LB_FieldType::Note)
                    {
                        error("@SKS4042");
                        ret = false;
                    }
                }
                else
                {
                    select firstOnly fieldtype from lsks_lb_fileformatdet where lsks_lb_fileformatdet.FormatID == SKS_LB_FileFormatDet.FormatID
                        && lsks_lb_fileformatdet.RecId != SKS_LB_FileFormatDet.RecId && lsks_lb_fileformatdet.fieldtype == SKS_LB_FileFormatDet.fieldtype
                        && lsks_lb_fileformatdet.FieldType != SKS_LB_FieldType::DoNotImport;
            
                    if(ret && lsks_lb_fileformatdet && lsks_lb_fileformatdet.FieldType != SKS_LB_FieldType::LBBankAccount)
                    {
                        error("@SKS2999");
                        ret = false;
                    }
                }
            
                if(ret && SKS_LB_FileFormatDet.FormatDetType == SKS_LB_FormatDetType::MultiLineInvoice)
                {
                    switch(SKS_LB_FileFormatDet.FieldType)
                    {
                        case SKS_lb_fieldtype::FeeAmount:
                            select firstOnly feeid, formatID from lsks_lb_fileformat where lsks_lb_fileformat.FormatID == SKS_LB_FileFormatDet.FormatID;
            
                            if(lsks_lb_fileformat.FeeId == '')
                            {
                                error("@SKS2971");
                                ret = false;
                            }
                            break;
                        case SKS_LB_FieldType::TxnDescription,
                             SKS_LB_FieldType::Note:
                            if(mainFileFormat.FileType == SKS_LB_FileType::BAI2 || mainfileformat.FileType == SKS_LB_FileType::Symcor)
                            {
                                error("@SKS3083");
                                ret = false;
                            }
                            else if(mainFileFormat.FileType == SKS_LB_FileType::EDI820 || mainFileFormat.FileType == SKS_LB_FileType::EDI823)
                            {
                                if(SKS_LB_FileFormatDet.EDISegment != SKS_LB_EDISegment::BPR && SKS_LB_FileFormatDet.EDISegment != SKS_LB_EDISegment::DTMBPR
                                    && SKS_LB_FileFormatDet.EDISegment != SKS_LB_EDISegment::N1BPR)
                                {
                                    error("@SKS3083");
                                    ret = false;
                                }
                            }
                            break;
                        case SKS_LB_FieldType::NegPaymIndic:
                            if(mainFileFormat.FileType == SKS_LB_FileType::BAI2 || mainfileformat.FileType == SKS_LB_FileType::Symcor)
                            {
                                error("@SKS3087");
                                ret = false;
                            }
                            else if(mainFileFormat.FileType == SKS_LB_FileType::EDI820 || mainFileFormat.FileType == SKS_LB_FileType::EDI823)
                            {
                                if(SKS_LB_FileFormatDet.EDISegment != SKS_LB_EDISegment::BPR && SKS_LB_FileFormatDet.EDISegment != SKS_LB_EDISegment::DTMBPR
                                    && SKS_LB_FileFormatDet.EDISegment != SKS_LB_EDISegment::N1BPR)
                                {
                                    error("@SKS3087");
                                    ret = false;
                                }
                            }
                            break;
                        case SKS_LB_FieldType::DocumentType:
                            select firstOnly invcredindic, formatid from lsks_lb_fileformat where lsks_lb_fileformat.FormatID ==  SKS_LB_FileFormatDet.FormatID;
            
                            if(lsks_lb_fileformat.InvCredIndic == '')
                            {
                                error("@SKS3094");
                                ret = false;
                            }
                            break;
                    }
                }
                else
                {
                    switch(SKS_LB_FileFormatDet.FieldType )
                    {
                        case SKS_lb_fieldtype::FeeAmount:
                            select firstOnly feeid, formatID from lsks_lb_fileformat where lsks_lb_fileformat.FormatID == SKS_LB_FileFormatDet.FormatID;
            
                            if(lsks_lb_fileformat.FeeId == '')
                            {
                                error("@SKS2971");
                                ret = false;
                            }
                            break;
                        case SKS_LB_FieldType::DocumentType:
                            if(mainFileFormat.FileType == SKS_LB_FileType::BAI2 || mainfileformat.FileType == SKS_LB_FileType::Symcor)
                            {
                                error("@SKS3088");
                                ret = false;
                            }
                            else if(mainFileFormat.FileType == SKS_LB_FileType::EDI820 || mainFileFormat.FileType == SKS_LB_FileType::EDI823)
                            {
                                if(SKS_LB_FileFormatDet.EDISegment == SKS_LB_EDISegment::BPR || SKS_LB_FileFormatDet.EDISegment == SKS_LB_EDISegment::DTMBPR
                                    || SKS_LB_FileFormatDet.EDISegment == SKS_LB_EDISegment::N1BPR)
                                {
                                    error("@SKS3088");
                                    ret = false;
                                }
                            }
                            break;
                        case SKS_LB_FieldType::NegPaymIndic:
                            select firstOnly negpaymindic, formatid from lsks_lb_fileformat where lsks_lb_fileformat.FormatID ==  SKS_LB_FileFormatDet.FormatID;
            
                            if(lsks_lb_fileformat.NegPaymIndic == '')
                            {
                                error("@SKS3094");
                                ret = false;
                            }
                            break;
                    }
                }
            
                return ret;
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>WFRMFSegment</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();
            
                if((SKS_LB_FileFormatDet.WFRMFSegment == SKS_LB_WFRMFSegment::BH)
                || (SKS_LB_FileFormatDet.WFRMFSegment == SKS_LB_WFRMFSegment::PR)
                || (SKS_LB_FileFormatDet.WFRMFSegment == SKS_LB_WFRMFSegment::RMH))
                {
                    SKS_LB_FileFormatDet.EDIOccurrence = 1;
                    SKS_LB_FileFormatDet_ds.object(fieldNum(SKS_LB_FileFormatDet, EDIOccurrence)).allowEdit(false);
                }
                else
                {
                    SKS_LB_FileFormatDet_ds.object(fieldNum(SKS_LB_FileFormatDet, EDIOccurrence)).allowEdit(true);
                }
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
				</Fields>
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>FormatDetailType</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;
        
            ret = super();
        
            if(mainfileformat.FileType == SKS_LB_FileType::WFARRemitFile)
            {
                if(formatdetailType.selection() != SKS_LB_FormatDetType::PaymCodeSupp && formatdetailtype.selection() != SKS_LB_FormatDetType::Detail
                    && formatdetailtype.selection() != SKS_LB_FormatDetType::SuppVarAdd && formatdetailtype.selection() != SKS_LB_FormatDetType::DetailSupp
                    && FormatDetailType.selection() != SKS_LB_FormatDetType::BatHeader && FormatDetailType.selection() != SKS_LB_FormatDetType::BatTrailer)
                {
                    error(strFmt("@SKS4130",formatdetailType.valueStr(), mainfileformat.filetype));
                    ret = false;
                }
            }
        
            if(ret)
            {
                if(FormatDetailType.selection() == SKS_LB_FormatDetType::BatHeader)
                {
                    if((mainfileformat.FileType != SKS_LB_FileType::BAI2) && (mainfileformat.FileType != SKS_LB_FileType::WFRMF) && (mainfileformat.FileType != SKS_LB_FileType::WFARRemitFile))
                    {
                        error("@SKS3233");
                        ret = false;
                    }
                }
                else if(FormatDetailType.selection() == SKS_LB_FormatDetType::BatTrailer)
                {
                    if((mainfileformat.FileType != SKS_LB_FileType::BAI2) && (mainfileformat.FileType != SKS_LB_FileType::WFRMF) && (mainfileformat.FileType != SKS_LB_FileType::WFARRemitFile))
                    {
                        error("@SKS3251");
                        ret = false;
                    }
                }
                else if(FormatDetailType.selection() == SKS_LB_FormatDetType::AdjInvLine || FormatDetailType.selection() == SKS_LB_FormatDetType::AdjPmtLine)
                {
                    if(mainfileformat.FileType != SKS_LB_FileType::EDI820)
                    {
                        error("@SKS3888");
                        ret = false;
                    }
                }
                else if(formatdetailType.selection() == SKS_LB_FormatDetType::PaymCodeSupp || formatdetailtype.selection() == SKS_LB_FormatDetType::Detail
                    || formatdetailtype.selection() == SKS_LB_FormatDetType::SuppVarAdd || formatdetailtype.selection() == SKS_LB_FormatDetType::DetailSupp)
                {
                    if(mainfileformat.FileType != SKS_LB_FileType::WFARRemitFile)
                    {
                        error(strFmt("@SKS4130", formatdetailType.valueStr(), mainfileformat.filetype));
                        ret = false;
                    }
                }
                else if (FormatDetailType.selection() == SKS_LB_FormatDetType::FileHeader && (mainFileFormat.FileType != SKS_LB_FileType::BAI2 && mainFileFormat.FileType != SKS_LB_FileType::Colombia))
                {
                    error(strFmt("@SKS4130", formatdetailType.valueStr(), mainfileformat.filetype));
                    ret = false;
                }
                else if (FormatDetailType.selection() == SKS_LB_FormatDetType::MultiLineInvoice && mainFileFormat.FileType == SKS_LB_FileType::Colombia)
                {
                    error(strFmt("@SKS4130", formatdetailType.valueStr(), mainfileformat.filetype));
                    ret = false;
                }
            }
        
            SKS_LB_FileFormatDet_ds.executeQuery();
        
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>SKS_LB_FileFormatDet</Name>
			<Table>SKS_LB_FileFormatDet</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DimSeparator</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EDIFieldNbr</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EDIOccurrence</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EDISegment</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FieldEnd</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FieldNbr</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FieldStart</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FieldType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FormatDetType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FormatID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LineNbr</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>WFRMFSegment</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>SKS_LB_FileFormat</Name>
			<Table>SKS_LB_FileFormat</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>BatchPaymentCount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BatchSplitType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CombineADXRefNbr</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DecimalSeparator</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DecPl</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Descr</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EDISeperator</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EDITerminator</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FeeId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FileType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FormatID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InvCredIndic</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NegPaymIndic</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OmitHeaderRecs</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OmitTrailerRecs</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PmtAmtEQSumChkAmts</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PrepayIndicator</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SamplePathFileName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SettleAmtIncludesAdjAmt</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VerifyAcct</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>SKS_LB_FileFormatDet</JoinSource>
			<LinkType>Active</LinkType>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<AllowUserSetup xmlns="">No</AllowUserSetup>
		<Caption xmlns="">@SKS742</Caption>
		<DataSource xmlns="">SKS_LB_FileFormatDet</DataSource>
		<Pattern xmlns="">SimpleList</Pattern>
		<PatternVersion xmlns="">1.1</PatternVersion>
		<Style xmlns="">SimpleList</Style>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>ActionPane</Name>
				<ElementPosition>536870911</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Type>ActionPane</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormActionPaneTabControl">
						<Name>ActionPaneTab</Name>
						<ElementPosition>1431655764</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>ActionPaneTab</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls />
						<AlignChild>No</AlignChild>
						<AlignChildren>No</AlignChildren>
						<ArrangeMethod>Vertical</ArrangeMethod>
						<Caption>@SKS:OffsetDimension</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>NewDeleteGroup</Name>
						<ElementPosition>1073741822</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>ButtonGroup</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>SKS_LB_OffsetDimMapping</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>MenuFunctionButton</Type>
								<FormControlExtension
									i:nil="true" />
								<MenuItemName>SKS_LB_OffsetDimMapping</MenuItemName>
								<Text>@SKS3851</Text>
							</AxFormControl>
						</Controls>
						<ArrangeMethod>Vertical</ArrangeMethod>
					</AxFormControl>
				</Controls>
				<AlignChild>No</AlignChild>
				<AlignChildren>No</AlignChildren>
				<ArrangeMethod>Vertical</ArrangeMethod>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>Format</Name>
				<ElementPosition>1073741822</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Pattern>CustomAndQuickFilters</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Skip>Yes</Skip>
				<Type>Group</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl>
						<Name>QuickFilterControl</Name>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension>
							<Name>QuickFilterControl</Name>
							<ExtensionComponents />
							<ExtensionProperties>
								<AxFormControlExtensionProperty>
									<Name>targetControlName</Name>
									<Type>String</Type>
									<TypeName>str</TypeName>
									<Value>Grid</Value>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>defaultColumnName</Name>
									<Type>String</Type>
									<TypeName>str</TypeName>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>placeholderText</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
							</ExtensionProperties>
						</FormControlExtension>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>SKS_LB_FileFormat_FormatID</Name>
						<ElementPosition>1073741822</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Skip>Yes</Skip>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<DataField>FormatID</DataField>
						<DataSource>SKS_LB_FileFormat</DataSource>
						<ViewEditMode>View</ViewEditMode>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormComboBoxControl">
						<Name>FormatDetailType</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1610612734</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>ComboBox</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<EnumType>SKS_LB_FormatDetType</EnumType>
						<HideFirstEntry>Yes</HideFirstEntry>
						<Items />
					</AxFormControl>
				</Controls>
				<AlignChild>No</AlignChild>
				<ArrangeMethod>HorizontalLeft</ArrangeMethod>
				<FrameType>None</FrameType>
				<Style>CustomFilter</Style>
				<ViewEditMode>Edit</ViewEditMode>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGridControl">
				<Name>Grid</Name>
				<AutoDeclaration>Yes</AutoDeclaration>
				<ElementPosition>1431655764</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Type>Grid</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormIntegerControl">
						<Name>SKS_LB_FileFormatDet_FieldNbr</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>715827882</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>Integer</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Width>100</Width>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>FieldNbr</DataField>
						<DataSource>SKS_LB_FileFormatDet</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormComboBoxControl">
						<Name>SKS_LB_FileFormatDet_FieldType</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1073741823</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>ComboBox</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>FieldType</DataField>
						<DataSource>SKS_LB_FileFormatDet</DataSource>
						<Items />
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormComboBoxControl">
						<Name>SKS_LB_FileFormatDet_WFRMFSegment</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1133394146</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>ComboBox</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>WFRMFSegment</DataField>
						<DataSource>SKS_LB_FileFormatDet</DataSource>
						<Items />
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormComboBoxControl">
						<Name>SKS_LB_FileFormatDet_EDISegment</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1193046470</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>ComboBox</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>EDISegment</DataField>
						<DataSource>SKS_LB_FileFormatDet</DataSource>
						<Items />
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormIntegerControl">
						<Name>SKS_LB_FileFormatDet_EDIOccurence</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1312351117</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>Integer</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>EDIOccurrence</DataField>
						<DataSource>SKS_LB_FileFormatDet</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormIntegerControl">
						<Name>SKS_LB_FileFormatDet_FieldStart</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1431655764</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>Integer</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Width>100</Width>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>FieldStart</DataField>
						<DataSource>SKS_LB_FileFormatDet</DataSource>
						<Value>1</Value>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormIntegerControl">
						<Name>SKS_LB_FileFormatDet_FieldEnd</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1789569705</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>Integer</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Width>100</Width>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>FieldEnd</DataField>
						<DataSource>SKS_LB_FileFormatDet</DataSource>
						<Value>1</Value>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormIntegerControl">
						<Name>SKS_LB_FileFormatDet_EDIFieldNbr</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1968526675</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>Integer</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>EDIFieldNbr</DataField>
						<DataSource>SKS_LB_FileFormatDet</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>SKS_LB_FileFormatDet_DimSeparator</Name>
						<ElementPosition>2013265917</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>DimSeparator</DataField>
						<DataSource>SKS_LB_FileFormatDet</DataSource>
					</AxFormControl>
				</Controls>
				<AlternateRowShading>No</AlternateRowShading>
				<DataSource>SKS_LB_FileFormatDet</DataSource>
				<MultiSelect>No</MultiSelect>
				<ShowRowLabels>No</ShowRowLabels>
				<Style>Tabular</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>