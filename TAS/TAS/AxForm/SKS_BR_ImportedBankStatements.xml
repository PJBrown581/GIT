<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>SKS_BR_ImportedBankStatements</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class SKS_BR_ImportedBankStatements extends FormRun
{
    QueryBuildRange     reconciledDate;
    QueryBuildRange     brCreated;
    BankAccountStatement gBankAccountStatement;
    TransDate           gAccountStatementDate;
    boolean     bankReconcilationForm;
    PmfTableLookupExtended      gDataAreaIdSysTableLookup,gAccountIDSysTableLookup,gSKS_BR_BankAccountStatementSysTableLookup;
    date gStatementDate;
    Query gAccountIdLookupQuery;
    
    BankAccountStatement        statement;
    //FromDate                    fromDate;
    //FromDate                    toDate;
    boolean                     gQueryData = false;
    boolean                     gClearGrid = false;
    SKS_BR_eBankRecCustomerGroupView    eBankCustGroup;
    Query                       query;
    BankAccountStatement gDataAreaIdSelectedRecord, gBankAccountStatementSelectedRecord;
    BankAccountTable            gBankAccountTable;





}
]]></Source>
			</Method>
			<Method>
				<Name>loadData</Name>
				<Source><![CDATA[
    public void loadData()
    {
        gQueryData = true;
        
        BankAccountStatement_ds.executeQuery();
        BankAccountStatement_ds.refresh();
        BankAccountStatement_ds.reread();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        SKS_PP_Sys   SKS_PP_Sys;
    
        super();
    
        SKS_PP_Sys = new SKS_PP_Sys();
        if (!SKS_PP_Sys.ValidateSetup(this.name()))
        {
            this.close();
        }
    
    
        if (element.args().dataset() == tablenum(BankAccountStatement))
        {
            gBankAccountStatement = element.args().record();
            if(gBankAccountStatement.ReconcileDate != dateNull())
            {
                allReconciled.selection(AllNotReconciled::Reconciled);
            }
            BankAccountStatement_dataAreaId.text(gBankAccountStatement.company());
            BankAccountStatement_AccountIdCopy1.text(gBankAccountStatement.AccountId);
            SKS_BR_BankAcctStatement.text(gBankAccountStatement.AccountStatementNum);
            gAccountStatementDate = gBankAccountStatement.AccountStatementDate;
            allReconciled.enabled(false);
            BankAccountStatement_dataAreaId.enabled(false);
            BankAccountStatement_AccountIdCopy1.enabled(false);
            SKS_BR_BankAcctStatement.enabled(false);
            ApplyFilter.enabled(false);
        }

        //BR-6
        if (element.args().menuItemName() == menuitemDisplayStr(SKS_BR_BankReconciliation))
        {
            bankReconcilationForm = true;
            this.updateControls();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>bankReconcilatinForm</Name>
				<Source><![CDATA[
    public boolean bankReconcilatinForm()
    {
        return bankReconcilationForm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLabel</Name>
				<Source><![CDATA[
    public void setLabel()
    {
        str labelText;

        element.design().caption("@SKS4421");
        labelText = (allReconciled.selection() == 0) ? "@SKS4417" : "@SKS4418";
        BankAccountStatement_Unreconciled.label(labelText);
        ImportedBankStmt_BankReconciliation.text("@SKS4419");
        SKS_BR_BankTran.text("@SKS4420");
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateControls</Name>
				<Source><![CDATA[
    public void updateControls()
    {
        ImportTranCount.visible(false);
        ImportTranMatchCount.visible(false);
        BankAccountStatement_ReconcileDate.visible(false);
        this.setLabel();
        bankAccountName.visible(true);
        calcEndingBalance.visible(true);
        bankBalance.visible(true);
        CalculatedGLBalance.visible(true);
        Difference.visible(true);
        GLTransaction.visible(true);
        bankTransNotCleared.visible(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mainAccountTable</Name>
				<Source><![CDATA[
    public MainAccount mainAccountTable()
    {
        MainAccount     mainAccount;
        LedgerDimensionAccount   ledgerDimensionId;
        DimensionAttributeValueCombination  davc;

        ledgerDimensionId = BankAccountTable::find(BankAccountStatement.AccountId).LedgerDimension;

        select firstonly RecId from davc where davc.RecId == ledgerDimensionId
                join mainAccount where mainAccount.RecId == davc.MainAccount;

        return mainAccount;
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>BankAccountStatement</Name>
				<Methods>
					<Method>
						<Name>importUnmatchedCount</Name>
						<Source><![CDATA[
        [SysClientCacheDataMethodAttribute]
        public display SKS_EB_Count importUnmatchedCount(BankAccountStatement _bankAccountStatement)
        {
            return SKS_BR_BankAcctStmt::importUnmatchedCount(_bankAccountStatement);
        }

]]></Source>
					</Method>
					<Method>
						<Name>importCount</Name>
						<Source><![CDATA[
        [SysClientCacheDataMethodAttribute]
        public display SKS_EB_Count importCount(BankAccountStatement _bankAccountStatement)
        {
            SKS_BR_BankTran lSKS_BR_BankTran;
        
            select count(RecId) from lSKS_BR_BankTran
                where lSKS_BR_BankTran.OriginalStatementRecId == _bankAccountStatement.RecId;

            SKS_EB_Count recIdCnt = lSKS_BR_BankTran.RecId;

            return recIdCnt;
        }

]]></Source>
					</Method>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        public void executeQuery()
        {
            BankAccountStatement_ds.query().dataSourceTable(tableNum(BankAccountStatement)).clearRanges();
            BankAccountStatement_ds.query().clearCompanyRange();
            BankAccountStatement_ds.query().allowCrossCompany(true);
            if(AllReconciled.selection() == AllNotReconciled::Reconciled)
            {
                BankAccountStatement_ds.query().dataSourceTable(tableNum(BankAccountStatement)).addRange(fieldNum(BankAccountStatement,ReconcileDate)).value(SysQuery::valueNot(dateNull()));
            }
            else  if(AllReconciled.selection() == AllNotReconciled::NotReconciled)
            {
                BankAccountStatement_ds.query().dataSourceTable(tableNum(BankAccountStatement)).addRange(fieldNum(BankAccountStatement,ReconcileDate)).value(SysQuery::value(dateNull()));
            }

            if(BankAccountStatement_dataAreaId.text() != '')
            {
                BankAccountStatement_ds.query().addCompanyRange(BankAccountStatement_dataAreaId.text());
            }

            if(SKS_BR_BankAcctStatement.text() != '')// statement number and date are a pair. So if you don't have a statementnumber, don't set a date range
            {
                BankAccountStatement_ds.query().dataSourceTable(tableNum(BankAccountStatement)).addRange(fieldNum(BankAccountStatement,AccountStatementDate)).value(queryValue(gStatementDate));
                BankAccountStatement_ds.query().dataSourceTable(tableNum(BankAccountStatement)).addRange(fieldNum(BankAccountStatement,AccountStatementNum)).value(SKS_BR_BankAcctStatement.text());
            }
            else
            {
                gStatementDate = dateNull();
            }

            if(BankAccountStatement_AccountIdCopy1.text() != '')
            {
                BankAccountStatement_ds.query().dataSourceTable(tableNum(BankAccountStatement)).addRange(fieldNum(BankAccountStatement,AccountId)).value(BankAccountStatement_AccountIdCopy1.text());
            }

            // Initially the form is loaded without data
            // The user will need to click Apply filter to load data
            // The queryData variable is set to true the first time Apply filter is clicked
            if(gQueryData)
            {
                super();
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            super();
        
            allReconciled.selection(1);
        
            BankAccountStatement_ds.cacheAddMethod('unreconciledAmount');
            BankAccountStatement_ds.cacheAddMethod('openingBalance');
            BankAccountStatement_ds.cacheAddMethod('importUnmatchedCount');
            BankAccountStatement_ds.cacheAddMethod('importCount');
        }

]]></Source>
					</Method>
					<Method>
						<Name>unreconciledAmount</Name>
						<Source><![CDATA[
        public display AmountCur unreconciledAmount(BankAccountStatement _bankAccountStatement)
        {
            return SKS_BR_BankAcctStmt::unreconciledAmount(_bankAccountStatement); // SKS_Issue_10214
        }

]]></Source>
					</Method>
					<Method>
						<Name>data_CalcEndingBalance</Name>
						<Source><![CDATA[
        /// <summary>
        /// Difference of ending balance and unreconciledAmount.
        /// </summary>
        /// <param name="_this">
        /// It contains the <c>BankAccountStatement</c> table record.
        /// </param>
        /// <returns>
        /// Return the difference of ending balance and unreconciledamount.
        /// </returns>
        /// SKS_Bug_8628
        [SysClientCacheDataMethodAttribute(true)]
        public display AmountMST data_CalcEndingBalance(BankAccountStatement _this)
        {
            return (_this.EndingBalance - (BankAccountStatement_ds.unreconciledAmount(_this)));
        }

]]></Source>
					</Method>
					<Method>
						<Name>data_difference</Name>
						<Source><![CDATA[
        /// <summary>
        /// Difference of ending balance and calculated gl balance.
        /// </summary>
        /// <param name="_this">
        /// It contains the <c>BankAccountStatement</c> table record.
        /// </param>
        /// <returns>
        /// Return the difference of ending balance and GL balance.
        /// </returns>
        /// SKS_Bug_8628
        [SysClientCacheDataMethodAttribute(true)]
        public display AmountMST data_difference(BankAccountStatement _this)
        {
           
            AmountMST differenceAmount;
            differenceAmount = (BankAccountStatement_ds.data_CalcEndingBalance(_this) - BankAccountStatement.data_CalcGLBalance(_this));

            return differenceAmount;
            
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>ApplyFilter</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// run the loadData method, which will, in turn, run the execute query and populate the grid
        /// </summary>
        public void clicked()
        {
            element.loadData();
            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ImportedBankStmt_BankReconciliation</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            FormRun formRun;
            MenuFunction menuFunction;
            Args args;
        
            if(!BankAccountStatement)
            {
                warning("@SYS82774");
            }
            else
            {
                changeCompany(BankAccountStatement.company())
                {
                    menuFunction = new MenuFunction(menuitemDisplayStr(BankReconciliation), MenuItemType::Display);
                    args = new Args();
                    args.record(BankAccountStatement);
                    args.parmEnum(element.bankReconcilatinForm());
                    args.parmEnumType(enumNum(NoYes));
                    args.caller(this);
                    formRun = menuFunction.create(args);
                    formRun.run();
                    formRun.wait(true);
                }
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SKS_BR_BankTran</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            FormRun formRun;
            Args args;
        
            if(!BankAccountStatement)
            {
                warning("@SYS82774");
            }
            else
            {
                changeCompany(BankAccountStatement.company())
                {
                    args = new Args();
                    args.name(formstr(SKS_BR_BankTran));
                    args.record(BankAccountStatement);
                    args.parmEnum(element.bankReconcilatinForm());
                    args.parmEnumType(enumNum(NoYes));
                    args.caller(this);
                    formRun = classFactory.formRunClass(args);
        
                    formRun.run();
        
                    formRun.wait(true);
                }
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>GLTransaction</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            Args            args = new Args();
            MainAccount     mainAccount;

            super();

            mainAccount = element.mainAccountTable();

            args = new Args();
            args.caller(element);
            args.record(mainAccount);
            args.parmEnum(element.bankReconcilatinForm());
            args.parmEnumType(enumNum(NoYes));
            args.parm(menuItemDisplayStr(SKS_BR_BankReconciliation));
            new MenuFunction(menuItemDisplayStr(LedgerTransAccount), MenuItemType::Display).run(args);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AllReconciled</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
            AllNotReconciled locAllNotReconciled;
            str locStrAllNotReconciled = AllReconciled.valueStr();
            locAllNotReconciled = str2Enum(locAllNotReconciled, locStrAllNotReconciled);

            ret = super();

            SKS_BR_BankAcctStatement.text('');
            //BankAccountStatement_AccountStatementDate1.dateValue(dateNull());
            gQueryData = true;
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>BankAccountStatement_dataAreaId</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        /// Filter the imported transactions grid based on company
        /// </summary>
        /// <returns>Return true</returns>
        // 8702 CR
        public boolean modified()
        {
            boolean ret;

            ret = super();
            BankAccountStatement_AccountIdCopy1.text('');
            SKS_BR_BankAcctStatement.text('');
            gQueryData = true;
            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        /// <summary>
        /// Company lookup by hierarchies
        /// </summary>
        /// CR - 8702
        public void lookup()
        {
            QueryBuildDataSource    queryBuildDataSource;
            QueryBuildRange         queryBuildRange;
            Container               companyList = SKS_EB_VirtualCompany::getBankRecCompanies();
            int                     i;
            str                     hierarchiesCompany;

            gDataAreaIdSysTableLookup     = PmfTableLookupExtended::newParameters(tablenum(DataArea),this);
            gDataAreaIdSysTableLookup.addLookupfield(fieldnum(DataArea,Id));
            gDataAreaIdSysTableLookup.addLookupfield(fieldnum(DataArea,Name));

            query = new Query();
            queryBuildDataSource = query.addDataSource(tablenum(DataArea));
            queryBuildRange = queryBuildDataSource.addRange(fieldNum(DataArea,id));
            for (i=1; i <= conLen(companyList); i++)
            {
                hierarchiesCompany += conPeek(companyList, i) + ',';
            }
            queryBuildRange.value(hierarchiesCompany);

            gDataAreaIdSysTableLookup.parmQuery(query);
            gDataAreaIdSysTableLookup.performFormLookup();
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        /// <summary>
        /// Validate if the data entered in the Company field is valid.  Necessary for manually entered data(not entered via dropdown)
        /// </summary>
        /// <returns>boolean: true if valid, false if invalid</returns>
        public boolean validate()
        {
            boolean ret;
            Container locCompanyList = SKS_EB_VirtualCompany::getBankRecCompanies();
        
            ret = super();
            if(ret && strLen(this.text()) > 0)
            {
                if(conFind(locCompanyList, this.text()) == 0)
                {
                    error(strFmt("@SKS:SKGBRImportedStmtCpnyFltrValidationError",this.text(), this.label()));
                    this.setFocus();
                    ret = false;
                }
            }
            BankAccountStatement_AccountIdCopy1.enabled(ret);
            SKS_BR_BankAcctStatement.enabled(ret);
            ApplyFilter.enabled(ret);
            return ret;

        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>BankAccountStatement_AccountIdCopy1</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        /// <summary>
        /// Bank account lookup
        /// </summary>
        // 8702 CR
        public void lookup()
        {
            QueryBuildDataSource    queryBuildDataSource;
            Container               companyList = SKS_EB_VirtualCompany::getBankRecCompanies();
            int                     i;
            gAccountIDSysTableLookup = null;
            if(!BankAccountStatement_dataAreaId.isValid())
            {
                error(strFmt("@SKS:SKGBRImportedStmtCpnyFltrValidationError", this.text(), this.label()));
                return;
            }
            gAccountIDSysTableLookup     = PmfTableLookupExtended::newParameters(tablenum(BankAccountTable),this);

            gAccountIDSysTableLookup.addLookupfield(fieldnum(BankAccountTable,AccountId));
            gAccountIDSysTableLookup.addLookupfield(fieldnum(BankAccountTable,Name));
            gAccountIDSysTableLookup.addLookupfield(fieldNum(BankAccountTable,DataAreaId));
            query = new Query();

            queryBuildDataSource = query.addDataSource(tablenum(BankAccountTable)).addDataSource(tableNum(SKS_PP_Bank)); // SKS_FDD_13903
            // SKS_FDD_13903 -->
            // TO make sure the we are shwoing only non-CCR bank into the lookup
            queryBuildDataSource.relations(true);
            queryBuildDataSource.addRange(fieldNum(SKS_PP_Bank, CCR_IsCCReconciliation)).value(enum2Str(NoYes::No));
            // SKS_FDD_13903 <--
            query.allowCrossCompany(true);
            query.clearCompanyRange();
            if(BankAccountStatement_dataAreaId.valueStr())
            {
                query.addCompanyRange(BankAccountStatement_dataAreaId.valueStr());
            }
            else
            {
                for (i=1; i <= conLen(companyList); i++)
                {
                    query.addCompanyRange(conPeek(companyList, i));
                }
            }
            gAccountIdLookupQuery = query;
            gAccountIDSysTableLookup.parmQuery(query);
            gAccountIDSysTableLookup.performFormLookup();
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        /// Set the company field value
        /// </summary>
        /// <returns>Return true</returns>
        // 8702 CR
        public boolean modified()
        {
            boolean ret;

            ret = super();

            if(BankAccountStatement_AccountIdCopy1.valueStr() != ''
                && gBankAccountTable != null)
            {
                BankAccountStatement_dataAreaId.text(gBankAccountTable.DataAreaId);
            }
            SKS_BR_BankAcctStatement.text('');
            gAccountStatementDate = dateNull();
            gQueryData = true;
            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        /// <summary>
        /// Validate if the data entered in the Account ID field is valid.  Necessary for manually entered data(not entered via dropdown)
        /// </summary>
        /// <returns>boolean: true if valid, false if invalid</returns>
        public boolean validate()
        {
            boolean ret;
            //QueryRun locQueryRun;
            //QueryBuildDataSource locQueryBuildDataSource;
            //QueryBuildRange locQueryBuildRange;
            //query locTempQuery = gAccountIdLookupQuery;
            container locCompanies;

            ret = super();

            gBankAccountTable = null;
            if(ret && strLen(BankAccountStatement_AccountIdCopy1.text()) > 0 )
            {
                if(strLen(strLRTrim(BankAccountStatement_dataAreaId.text())) > 0)
                {
                    locCompanies += strLRTrim(BankAccountStatement_dataAreaId.text());
                }
                else
                {
                    locCompanies = SKS_EB_VirtualCompany::getBankRecCompanies();
                }

                if(gAccountIDSysTableLookup)
                {
                    gBankAccountTable = gAccountIDSysTableLookup.parmSelectionRecord();
                    if(strUpr(gBankAccountTable.AccountID) != strUpr(BankAccountStatement_AccountIdCopy1.text()))
                    {
                        gBankAccountTable = null;
                        select firstonly crosscompany:locCompanies gBankAccountTable where gBankAccountTable.AccountId == strLRTrim(BankAccountStatement_AccountIdCopy1.text());
                    }
                }
            
                if(!gBankAccountTable)
                {
                    BankAccountStatement_AccountIdCopy1.setFocus();
                    error(strFmt("@SKS:SKGBRImportedStmtCpnyFltrValidationError",this.text(), this.label() ));
                    ret = false;
                }
            }

            SKS_BR_BankAcctStatement.enabled(ret);
            ApplyFilter.enabled(ret);
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SKS_BR_BankAcctStatement</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            if(!BankAccountStatement_AccountIdCopy1.isValid())
            {
                error(strFmt("@SKS:SKGBRImportedStmtCpnyFltrValidationError",this.text(),this.label()));
                return;
            }
           // gSKS_BR_BankAccountStatementSysTableLookup = SKS_BR_BankTran::lookupBankStatements(this, AllReconciled.valueStr(), BankAccountStatement_dataAreaId.valueStr(), BankAccountStatement_AccountIdCopy1.valueStr()); // 8702 CR
            //FormStringControl _lookupCtrl,  Name _filterRecord, dataAreaId _company = '', CompanyBankAccountId _bankAccount = ''
            str filterRecord = AllReconciled.valueStr();
            Query                   locquery;
            QueryBuildDataSource    queryBuildDataSource;
            PmfTableLookupExtended  sysTableLookup;
            DictEnum                dictEnum = new DictEnum(enumnum(AllNotReconciled));
            AllNotReconciled        allNotReconciled =  dictEnum.name2Value(filterRecord);
            Container               companyList = SKS_EB_VirtualCompany::getBankRecCompanies(); //7448
            int                     i; //7448
               
            sysTableLookup     = PmfTableLookupExtended::newParameters(tablenum(BankAccountStatement),this,false);
            sysTableLookup.addLookupfield(fieldnum(BankAccountStatement,accountstatementNum),true);
            sysTableLookup.addLookupfield(fieldnum(BankAccountStatement,accountstatementdate));
            sysTableLookup.addLookupfield(fieldnum(BankAccountStatement,AccountId));
          //  sysTableLookup.addLookupfield(fieldnum(BankAccountStatement, Id));
            sysTableLookup.addLookupfield(fieldnum(BankAccountStatement,ReconcileDate));

            locquery = new Query();          

            queryBuildDataSource = locquery.addDataSource(tablenum(BankAccountStatement));

            queryBuildDataSource.clearRanges();

            //7448 -->
            locquery.allowCrossCompany(true);
            // 8702 CR -->
            if(BankAccountStatement_dataAreaId.valueStr() || BankAccountStatement_AccountIdCopy1.valueStr())
            {
                //queryBuildDataSource.clearRanges();
                if(BankAccountStatement_dataAreaId.valueStr())
                {
                    locquery.addCompanyRange(BankAccountStatement_dataAreaId.valueStr());
                }
                queryBuildDataSource.addRange(fieldNum(BankAccountStatement,AccountId)).value(BankAccountStatement_AccountIdCopy1.valueStr());
            }
            else
            {
                for (i=1; i <= conLen(companyList); i++)
                {
                    locquery.addCompanyRange(conPeek(companyList, i));
                }
            }
            // 8702 CR <--
            //7448 <--
            //SKS_FDD_13903 - To make sure that we are showing only BR related statement into that lookup
            queryBuildDataSource.addRange(fieldNum(BankAccountStatement, SKS_BR_BankHeaderRecId)).value(SysQuery::valueNot(0));
            queryBuildDataSource.addSortField(fieldnum(BankAccountStatement,Accountstatementdate),SortOrder::Descending);

            if(allNotReconciled == AllNotReconciled::NotReconciled)
            {
                queryBuildDataSource.addRange(fieldnum(BankAccountStatement,ReconcileDate)).value(queryvalue(dateNull()));
            }
            if(allNotReconciled == AllNotReconciled::Reconciled)
            {
                queryBuildDataSource.addRange(fieldnum(BankAccountStatement,ReconcileDate)).value('!' + queryvalue(dateNull()));
            }
            sysTableLookup.parmQuery(locquery);
            sysTableLookup.parmUseLookupValue(true);

            sysTableLookup.performFormLookup();

            gSKS_BR_BankAccountStatementSysTableLookup = sysTableLookup;
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean     ret;

            ret = super();

            if (gBankAccountStatementSelectedRecord && SKS_BR_BankAcctStatement.text() != '')
            {
                BankAccountStatement_AccountIdCopy1.text(gBankAccountStatementSelectedRecord.AccountId);
                BankAccountStatement_dataAreaId.text(gBankAccountStatementSelectedRecord.DataAreaId);
                gStatementDate = gBankAccountStatementSelectedRecord.AccountStatementDate;
            }
            else
            {
                gStatementDate = dateNull();
            }
            gQueryData = true;
            if(SKS_BR_BankAcctStatement.text() != '')
            {
                element.loadData();
            }
            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        /// <summary>
        /// Validate if the data entered in the Account ID field is valid.  Necessary for manually entered data(not entered via dropdown)
        /// </summary>
        /// <returns>boolean: true if valid, false if invalid</returns>
        public boolean validate()
        {
            boolean ret;
            ret = super();
            Container   locCompanyList;
            //SKS_BR_BankAccountStatement locSKS_BR_BankAccountStatement;
            if(ret)
            {
                if(strLen(SKS_BR_BankAcctStatement.text()) > 0)
                {
                    gBankAccountStatementSelectedRecord = null;
                    if(gSKS_BR_BankAccountStatementSysTableLookup && strUpr(BankAccountStatement_dataAreaId.valueStr()) == strUpr(SKS_BR_BankAcctStatement.text()))
                    {
                        gBankAccountStatementSelectedRecord = gSKS_BR_BankAccountStatementSysTableLookup.parmSelectionRecord();
                    }
                    else
                    {
                        if(strLen(BankAccountStatement_dataAreaId.text()) > 0)
                        {
                            changecompany(BankAccountStatement_dataAreaId.text())
                            {
                                if(strLen(BankAccountStatement_AccountIdCopy1.text()) == 0)
                                {
                                    select firstonly gBankAccountStatementSelectedRecord
                                        where gBankAccountStatementSelectedRecord.AccountStatementNum == SKS_BR_BankAcctStatement.text();
                                }
                                else
                                {                                    
                                    select firstonly gBankAccountStatementSelectedRecord
                                        where gBankAccountStatementSelectedRecord.AccountStatementNum == SKS_BR_BankAcctStatement.text()
                                        && gBankAccountStatementSelectedRecord.AccountId == BankAccountStatement_AccountIdCopy1.text();
                                }
                            }
                        }
                        else
                        {
                            locCompanyList = SKS_EB_VirtualCompany::getBankRecCompanies();
                            select firstonly crosscompany:locCompanyList gBankAccountStatementSelectedRecord where gBankAccountStatementSelectedRecord.AccountStatementNum == this.text();
                        }

                        if(!gBankAccountStatementSelectedRecord)
                        {
                            BankAccountStatement_AccountIdCopy1.setFocus();
                            error(strFmt("@SKS:SKGBRImportedStmtCpnyFltrValidationError",this.text(), this.label() ));
                            ret = false;
                        }
                    }
                }
            }
            gSKS_BR_BankAccountStatementSysTableLookup = null;
            ApplyFilter.enabled(ret);
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>BankAccountStatement</Name>
			<Table>BankAccountStatement</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AccountId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AccountStatementDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AccountStatementNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CurrencyCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EndingBalance</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReconcileDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<CrossCompanyAutoQuery>Yes</CrossCompanyAutoQuery>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>DataArea</Name>
			<Table>DataArea</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>alwaysNative</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>id</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>isVirtual</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>name</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>timeZone</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>BankAccountStatement</JoinSource>
			<LinkType>InnerJoin</LinkType>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@SKS3020</Caption>
		<DataSource xmlns="">BankAccountStatement</DataSource>
		<Pattern xmlns="">SimpleList</Pattern>
		<PatternVersion xmlns="">1.1</PatternVersion>
		<Style xmlns="">SimpleList</Style>
		<Width xmlns="">1100</Width>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>ActionPane</Name>
				<ElementPosition>429496729</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Type>ActionPane</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>ButtonGroup</Name>
						<ElementPosition>1789569705</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>ButtonGroup</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>ApplyFilter</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<HelpText>@SKS:SKGApplyFilterHelpText</HelpText>
								<NeededPermission>Read</NeededPermission>
								<Type>Button</Type>
								<FormControlExtension
									i:nil="true" />
								<Text>@SYS122037</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>ImportedBankStmt_BankReconciliation</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1073741822</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>MenuFunctionButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataSource>BankAccountStatement</DataSource>
								<MenuItemName>BankReconciliation</MenuItemName>
								<Text>@SYS35442</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>SKS_BR_BankTran</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1610612733</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>MenuFunctionButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<MenuItemName>SKS_BR_BankTran</MenuItemName>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>GLTransaction</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<HelpText>@SKS6157</HelpText>
								<Type>Button</Type>
								<Visible>No</Visible>
								<FormControlExtension
									i:nil="true" />
								<Text>@SKS6158</Text>
							</AxFormControl>
						</Controls>
						<ArrangeMethod>Vertical</ArrangeMethod>
					</AxFormControl>
				</Controls>
				<AlignChild>No</AlignChild>
				<AlignChildren>No</AlignChildren>
				<ArrangeMethod>Vertical</ArrangeMethod>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>FilterControls</Name>
				<Pattern>CustomAndQuickFilters</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl>
						<Name>QuickFilterControl1</Name>
						<Visible>No</Visible>
						<FormControlExtension>
							<Name>QuickFilterControl</Name>
							<ExtensionComponents />
							<ExtensionProperties>
								<AxFormControlExtensionProperty>
									<Name>targetControlName</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>placeholderText</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>defaultColumnName</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
							</ExtensionProperties>
						</FormControlExtension>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>StatementInformation</Name>
						<ElementPosition>1610612733</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormComboBoxControl">
								<Name>AllReconciled</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HelpText>@SYS50992</HelpText>
								<Type>ComboBox</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<EnumType>AllNotReconciled</EnumType>
								<Items />
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>BankAccountStatement_dataAreaId</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>920350134</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>SelectableDataArea</ExtendedDataType>
								<Label>@SYS342276</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>BankAccountStatement_AccountIdCopy1</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1533916890</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Label>@SYS1517</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>SKS_BR_BankAcctStatement</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>613566756</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Label>@SYS23259</Label>
							</AxFormControl>
						</Controls>
						<ColumnsMode>Fill</ColumnsMode>
						<FrameType>None</FrameType>
						<Style>CustomFilter</Style>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalLeft</ArrangeMethod>
				<FrameType>None</FrameType>
				<Style>CustomFilter</Style>
				<ViewEditMode>Edit</ViewEditMode>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGridControl">
				<Name>Grid</Name>
				<ElementPosition>1431655764</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Type>Grid</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>DataArea_Id</Name>
						<ElementPosition>351406412</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>Id</DataField>
						<DataSource>DataArea</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>BankAccountStatement_AccountId</Name>
						<ElementPosition>527109618</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>AccountId</DataField>
						<DataSource>BankAccountStatement</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>bankAccountName</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<DataMethod>SKSBankAccountStatement_Extension::bankAccountName</DataMethod>
						<DataSource>BankAccountStatement</DataSource>
						<Label>@SYS22737</Label>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>BankAccountStatement_CurrencyCode</Name>
						<ElementPosition>614961221</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>CurrencyCode</DataField>
						<DataSource>BankAccountStatement</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormDateControl">
						<Name>BankAccountStatement_AccountStatementDate</Name>
						<ElementPosition>702812824</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>Date</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>AccountStatementDate</DataField>
						<DataSource>BankAccountStatement</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>BankAccountStatement_AccountStatementNum</Name>
						<ElementPosition>878516030</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>AccountStatementNum</DataField>
						<DataSource>BankAccountStatement</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormRealControl">
						<Name>BankAccountStatement_OpeningBalance</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1054219236</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<HelpText>@SYS53034</HelpText>
						<Type>Real</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<CacheDataMethod>Yes</CacheDataMethod>
						<DataMethod>openingBalance</DataMethod>
						<DataSource>BankAccountStatement</DataSource>
						<Label>@SYS22797</Label>
						<NoOfDecimals>-1</NoOfDecimals>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormRealControl">
						<Name>BankAccountStatement_EndingBalance</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1229922442</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>Real</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>EndingBalance</DataField>
						<DataSource>BankAccountStatement</DataSource>
						<NoOfDecimals>-1</NoOfDecimals>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormRealControl">
						<Name>BankAccountStatement_Unreconciled</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1405625648</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<HelpText>@SYS53042</HelpText>
						<Type>Real</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<CacheDataMethod>Yes</CacheDataMethod>
						<DataMethod>unreconciledAmount</DataMethod>
						<DataSource>BankAccountStatement</DataSource>
						<Label>@SYS53063</Label>
						<NoOfDecimals>-1</NoOfDecimals>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormRealControl">
						<Name>calcEndingBalance</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>Real</Type>
						<Visible>No</Visible>
						<FormControlExtension
							i:nil="true" />
						<DataMethod>data_CalcEndingBalance</DataMethod>
						<DataSource>BankAccountStatement</DataSource>
						<Label>@SKS6129</Label>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormRealControl">
						<Name>Bankbalance</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>Real</Type>
						<Visible>No</Visible>
						<FormControlExtension
							i:nil="true" />
						<DataMethod>SKSBankAccountStatement_Extension::bankBalance</DataMethod>
						<DataSource>BankAccountStatement</DataSource>
						<Label>@SYS26542</Label>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormRealControl">
						<Name>bankTransNotCleared</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>Real</Type>
						<Visible>No</Visible>
						<FormControlExtension
							i:nil="true" />
						<DataMethod>SKSBankAccountStatement_Extension::bankTransNotCleared</DataMethod>
						<DataSource>BankAccountStatement</DataSource>
						<Label>@SKS:SKGNotclearedDate</Label>
						<Mandatory>Yes</Mandatory>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormRealControl">
						<Name>CalculatedGLBalance</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>Real</Type>
						<Visible>No</Visible>
						<FormControlExtension
							i:nil="true" />
						<DataMethod>SKSBankAccountStatement_Extension::CalcGLBalance</DataMethod>
						<DataSource>BankAccountStatement</DataSource>
						<Label>@SKS6130</Label>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormRealControl">
						<Name>Difference</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>Real</Type>
						<Visible>No</Visible>
						<FormControlExtension
							i:nil="true" />
						<DataMethod>data_difference</DataMethod>
						<DataSource>BankAccountStatement</DataSource>
						<Label>@SYS11152</Label>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormInt64Control">
						<Name>ImportTranCount</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1581328857</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>Int64</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataMethod>importCount</DataMethod>
						<DataSource>BankAccountStatement</DataSource>
						<Label>@SKS3022</Label>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormInt64Control">
						<Name>ImportTranMatchCount</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1757032066</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>Int64</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataMethod>importUnmatchedCount</DataMethod>
						<DataSource>BankAccountStatement</DataSource>
						<Label>@SKS3023</Label>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormDateControl">
						<Name>BankAccountStatement_ReconcileDate</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1932735276</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>Date</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>ReconcileDate</DataField>
						<DataSource>BankAccountStatement</DataSource>
					</AxFormControl>
				</Controls>
				<AlternateRowShading>No</AlternateRowShading>
				<DataSource>BankAccountStatement</DataSource>
				<MultiSelect>No</MultiSelect>
				<ShowRowLabels>No</ShowRowLabels>
				<Style>Tabular</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>