<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>SKS_EB_Communications</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class SKS_EB_Communications extends FormRun
{
    boolean isSelected = false;


}
]]></Source>
			</Method>
			<Method>
				<Name>getCommType</Name>
				<Source><![CDATA[
    private SKS_BF_BankIntType getCommType()
    {
        SKS_BF_BankIntType rtnval;
        SKS_BF_BankIntType getSKS_BF_BankIntType(SKS_EB_BankIntegOptWithNoLicense _SKS_EB_BankIntegOptWithNoLicense)
        {
            SKS_BF_BankIntType locRtnval;
            locRtnval = _SKS_EB_BankIntegOptWithNoLicense == SKS_EB_BankIntegOptWithNoLicense::FileHubLocalEnumValue? SKS_BF_BankIntType::FileHubLocal : SKS_BF_BankIntType::BankFabric;
            return locRtnval;
        }
        switch(SKS_EB_CommProcess.Module)
        {
            case SKS_EB_Module::APEFT :
                rtnval = getSKS_BF_BankIntType(SKS_EB_FileStorage.StorageOption_APEFTFXDD);
                break;
            case SKS_EB_Module::APMAL :
                rtnval = getSKS_BF_BankIntType(SKS_EB_FileStorage.StorageOption_APEFTFXDD);
                break;
            case SKS_EB_Module::AREFT :
                rtnval = getSKS_BF_BankIntType(SKS_EB_FileStorage.StorageOption_APEFTFXDD);
                break;
            case SKS_EB_Module::CreditCardReconciliation :
                rtnval = getSKS_BF_BankIntType(SKS_EB_FileStorage.StorageOption_CCR);
                break;
            case SKS_EB_Module::FXAll :
                rtnval = getSKS_BF_BankIntType(SKS_EB_FileStorage.StorageOption_APEFTFXDD);
                break;
            case SKS_EB_Module::InHouseBankInterestRate :
            case SKS_EB_Module::IHBExternalVendor:
                rtnval = getSKS_BF_BankIntType(SKS_EB_FileStorage.StorageOption_IHB);
                break;
            case SKS_EB_Module::Lockbox :
                rtnval = getSKS_BF_BankIntType(SKS_EB_FileStorage.StorageOption_LB);
                break;
            case SKS_EB_Module::MandateAutomation :
                rtnval = getSKS_BF_BankIntType(SKS_EB_FileStorage.StorageOption_MandateAutomation);
                break;
            case SKS_EB_Module::PP :
                rtnval = getSKS_BF_BankIntType(SKS_EB_FileStorage.StorageOption_PP);
                break;
            case SKS_EB_Module::eBankRec :
                rtnval = getSKS_BF_BankIntType(SKS_EB_FileStorage.StorageOption_BR);
                break;
            case SKS_EB_Module::BankToBankTransfer :
                rtnval = getSKS_BF_BankIntType(SKS_EB_FileStorage.StorageOption_APEFTFXDD);
                break;
            case SKS_EB_Module::CustomerReimbursements :
                rtnval = getSKS_BF_BankIntType(SKS_EB_FileStorage.StorageOption_APEFTFXDD);
                break;
            case SKS_EB_Module::ElectronicFundsFileRelocation :
                rtnval = getSKS_BF_BankIntType(SKS_EB_FileStorage.StorageOption_APEFTFXDD);
                break;
            case SKS_EB_Module::PCard :
                rtnval = getSKS_BF_BankIntType(SKS_EB_BankIntegOptWithNoLicense::BankFabricEnumValue);
                break;
        }
        return rtnval;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIE</Name>
				<Source><![CDATA[
    public void checkIE()
    {
        LaunchButton.enabled(false);
        //if default is IE set launch button value to 'Launch' else "Browse'
        if(SKS_EB_CommProcess.CommType == SKS_PP_CommunicationsType::Browser)
        {
            LaunchButton.enabled(true);
            LaunchButton.text("@SKS92");
            SKS_EB_CommProcess_PPCommUserProg.label("@SYS37016");
        }
        else if(SKS_EB_CommProcess.CommType == SKS_PP_CommunicationsType::WebService)
        {
            SKS_EB_CommProcess_PPCommUserProg.label("@SKS:SKGWebServiceCommID");
        }
        else
        {
            SKS_EB_CommProcess_PPCommUserProg.label("@SKS59");
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>checkFile</Name>
				<Source><![CDATA[
    public boolean checkFile(str _file)
    {
        SKS_EB_FileHub fileHub = SKS_EB_FileHub::construct();
        fileHub.runFileInquire(_file);
        if(!fileHub.attrFileExists())
        {
            error(strFmt("@SYS315466", _file));
            return false;
        }
        else
        {
            return true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>EnableDisable</Name>
				<Source><![CDATA[
    public void EnableDisable()
    {
        boolean bfcommName;
        if (SKS_EB_CommProcess.Direction == SKS_EB_Direction::InboundRelocation || SKS_EB_CommProcess.Direction == SKS_EB_Direction::Outbound || 
            (SKS_EB_CommProcess.Module == SKS_EB_Module::APEFT && SKS_EB_CommProcess.Direction == SKS_EB_Direction::Inbound && SKS_EB_CommProcess.APIFormatType == SKS_EFT_APIFormatType::API) ||
            (SKS_EB_CommProcess.Module == SKS_EB_Module::eBankRec && SKS_EB_CommProcess.APIFormatType == SKS_EFT_APIFormatType::API) ||
            (SKS_EB_CommProcess.Module == SKS_EB_Module::PCard && SKS_EB_CommProcess.Direction == SKS_EB_Direction::Inbound))

        {
            bfcommName = true;
        }
        //this.getCommType() == SKS_BF_BankIntType::FileHubLocal
        SKS_EB_CommProcess_ds.object(fieldNum(SKS_EB_CommProcess, RelocBankFabricLocation)).visible(this.getCommType() == SKS_BF_BankIntType::BankFabric);
        SKS_EB_CommProcess_ds.object(fieldNum(SKS_EB_CommProcess, RelocFilePath)).visible(this.getCommType() == SKS_BF_BankIntType::FileHubLocal);
        SKS_EB_CommProcess_ds.object(fieldNum(SKS_EB_CommProcess, BankFabricCommunicationName)).enabled(bfcommName);
        SKS_EB_CommParams_ds.object(fieldNum(SKS_EB_CommParams, RelocParamType)).visible(SKS_EB_CommProcess.Direction == SKS_EB_Direction::InboundRelocation && SKS_EB_CommProcess.CommType == SKS_PP_CommunicationsType::WebService);
        SKS_EB_CommParams_ds.object(fieldNum(SKS_EB_CommParams, ParamType)).visible(!SKS_EB_CommParams_ds.object(fieldNum(SKS_EB_CommParams, RelocParamType)).visible());
        SKS_EB_CommProcess_ds.object(fieldNum(SKS_EB_CommProcess, CommTimeout)).enabled(SKS_EB_CommProcess.CommType == SKS_PP_CommunicationsType::User || SKS_EB_CommProcess.CommType == SKS_PP_CommunicationsType::WebService);
        SKS_EB_CommProcess_ds.object(fieldNum(SKS_EB_CommProcess, CommUserProg)).enabled(SKS_EB_CommProcess.CommType != SKS_PP_CommunicationsType::None);
        SKS_EB_CommProcess_PPCommUserProg.lookupButton(false);
        SKS_EB_CommProcess_ds.object(fieldNum(SKS_EB_CommProcess, FileType)).enabled(SKS_EB_CommProcess.CommType == SKS_PP_CommunicationsType::WebService);
        SKS_EB_CommProcess_ds.object(fieldNum(SKS_EB_CommProcess, SCF_FileCreateType)).visible(SKS_EB_CommProcess.Module == SKS_EB_Module::SupplyChainFinance);
        SKS_EB_CommProcess_ds.object(fieldNum(SKS_EB_CommProcess, FileCreateType)).visible(SKS_EB_CommProcess.Module != SKS_EB_Module::SupplyChainFinance);
  
        //SKS_EB_CommProcess_BankFabricCommunicationsName
        SKS_EB_CommProcess_BankFabricCommunicationsName.enabled(true);

        if((SKS_EB_CommProcess.FileCreateType == SKS_EB_filecreate::FixedTime &&
            SKS_EB_CommProcess.Module != SKS_EB_Module::SupplyChainFinance)||
           (SKS_EB_CommProcess.SCF_FileCreateType == SKS_SCF_filecreate::FixedTime &&
            SKS_EB_CommProcess.Module == SKS_EB_Module::SupplyChainFinance))
        {
            SKS_EB_CommProcess_FileCompletionTime.enabled(false);

            if(SKS_EB_CommProcess.Module != SKS_EB_Module::APMAL)
            {
                SKS_EB_CommProcess_ds.object(fieldNum(SKS_EB_CommProcess, CreateSendCpny)).allowEdit(true);
            }
            else
            {
                SKS_EB_CommProcess_ds.object(fieldNum(SKS_EB_CommProcess, CreateSendCpny)).allowEdit(false);
            }

            if(SKS_EB_CommProcess.CreateSendCpny == '' &&
                SKS_EB_CommProcess.Module != SKS_EB_Module::APMAL &&
                SKS_EB_CommProcess.Module != SKS_EB_Module::SupplyChainFinance)
            {
                SKS_EB_CommProcess.CreateSendCpny = curext();
            }

            ReferenceGroup.enabled(true);
            SKS_PP_CreateBatchOUTBOUND.enabled(true);

            if(SKS_EB_CommProcess.BatchJobId != 0)
            {
                SKS_PP_ViewBatchOUTBOUND.enabled(true);
            }
            else
            {
                SKS_PP_ViewBatchOUTBOUND.enabled(false);
            }

        }
        else
        {

            SKS_EB_CommProcess.CreateSendCpny = '';
            SKS_EB_CommProcess_ds.object(fieldNum(SKS_EB_CommProcess, CreateSendCpny)).allowEdit(false);
            ReferenceGroup.enabled(false);
            ReferenceGroup.value(0);

            if(SKS_EB_CommProcess.Direction != SKS_EB_Direction::Inbound)
            {
                SKS_EB_CommProcess.BatchJobId = 0;
            }

            SKS_PP_CreateBatchOUTBOUND.enabled(false);
            SKS_PP_ViewBatchOUTBOUND.enabled(false);

            if(SKS_EB_CommProcess.FileComplete == SKS_EB_FileComplete::BasedOnInboundSettings && SKS_EB_CommProcess.Module != SKS_EB_Module::MandateAutomation)
            {
                SKS_EB_CommProcess_FileCompletionTime.enabled(true);
            }
            else
            {
                SKS_EB_CommProcess_FileCompletionTime.enabled(false);
            }
        }

        ParametersGrid.enabled(
                                (SKS_EB_CommProcess.FileCreateType == SKS_EB_filecreate::FixedTime && SKS_EB_CommProcess.CommType != SKS_PP_CommunicationsType::None)
                                || (SKS_EB_CommProcess.FileCreateType != SKS_EB_filecreate::FixedTime && SKS_EB_CommProcess.CommType == SKS_PP_CommunicationsType::User)
                                || (
            (SKS_EB_CommProcess.Module == SKS_EB_Module::MandateAutomation || SKS_EB_CommProcess.Module == SKS_EB_Module::APEFT || SKS_EB_CommProcess.Module == SKS_EB_Module::Lockbox || SKS_EB_CommProcess.Module == SKS_EB_Module::AREFT || SKS_EB_CommProcess.Module == SKS_EB_Module::BankToBankTransfer || SKS_EB_CommProcess.Module == SKS_EB_Module::CustomerReimbursements || SKS_EB_CommProcess.Module == SKS_EB_Module::eBankRec || SKS_EB_CommProcess.Module == SKS_EB_Module::CreditCardReconciliation || SKS_EB_CommProcess.Module == SKS_EB_Module::IHBExternalVendor)
                                        && SKS_EB_CommProcess.Direction == SKS_EB_Direction::InboundRelocation)
                            );

        //DISALLOW EDITS
        SKS_EB_CommProcess_ds.object(fieldNum(SKS_EB_CommProcess, FileCreateType)).allowEdit(false);
        SKS_EB_CommProcess_ds.object(fieldNum(SKS_EB_CommProcess, FileComplete)).allowEdit(false);
        SKS_EB_CommProcess_ds.object(fieldNum(SKS_EB_CommProcess, direction)).allowEdit(false);
        SKS_EB_CommProcess_ds.object(fieldNum(SKS_EB_CommProcess, autopost)).allowEdit(false);
        SKS_EB_CommProcess_ds.object(fieldNum(SKS_EB_CommProcess, relocLBformatid)).allowEdit(false);
        SKS_EB_CommProcess_ds.object(fieldNum(SKS_EB_CommProcess, RestrictFormatComp)).allowEdit(false);

        //SET FIELDS INVISIBLE
        SKS_EB_CommProcess_ds.object(fieldNum(SKS_EB_CommProcess, RelocLBformatId)).visible(false);
        SKS_EB_CommProcess_ds.object(fieldNum(SKS_EB_CommProcess, RelocEFTformatId)).visible(false);
        SKS_EB_CommProcess_ds.object(fieldNum(SKS_EB_CommProcess, RelocCompany)).visible(false);
        SKS_EB_CommProcess_ds.object(fieldNum(SKS_EB_CommProcess, RestrictFormatComp)).visible(false);


        if(SKS_EB_CommProcess.module == SKS_EB_Module::APEFT)
        {
            SKS_EB_CommProcess_ds.object(fieldNum(SKS_EB_CommProcess, FileComplete)).allowEdit(true);
            SKS_EB_CommProcess_ds.object(fieldNum(SKS_EB_CommProcess, direction)).allowEdit(true);
            SKS_EB_CommProcess_ds.object(fieldNum(SKS_EB_CommProcess, RelocEFTformatId)).visible(true);
            SKS_EB_CommProcess_ds.object(fieldNum(SKS_EB_CommProcess, RelocCompany)).visible(true);
            SKS_EB_CommProcess_ds.object(fieldNum(SKS_EB_CommProcess, RelocInboundFileGroupId)).visible(false);
            if(SKS_EB_Commprocess.Direction == SKS_EB_Direction::Outbound)
            {
                SKS_EB_CommProcess_ds.object(fieldNum(SKS_EB_CommProcess, autopost)).allowEdit(true);
            }
        }
        else if(SKS_EB_CommProcess.module == SKS_EB_Module::AREFT)
        {
            SKS_EB_CommProcess_ds.object(fieldNum(SKS_EB_CommProcess, FileComplete)).allowEdit(true);
            SKS_EB_CommProcess_ds.object(fieldNum(SKS_EB_CommProcess, direction)).allowEdit(true);
            SKS_EB_CommProcess_ds.object(fieldNum(SKS_EB_CommProcess, RelocEFTformatId)).visible(true);
            SKS_EB_CommProcess_ds.object(fieldNum(SKS_EB_CommProcess, RelocCompany)).visible(true);
            SKS_EB_CommProcess_ds.object(fieldNum(SKS_EB_CommProcess, RelocInboundFileGroupId)).visible(false);
            if(SKS_EB_Commprocess.Direction == SKS_EB_Direction::Outbound)
            {
                SKS_EB_CommProcess_ds.object(fieldNum(SKS_EB_CommProcess, autopost)).allowEdit(true);
            }
        }
        else if(SKS_EB_CommProcess.module == SKS_EB_Module::BankToBankTransfer)  //FDD-14181- Bank to bank transfer
        {
            SKS_EB_CommProcess_ds.object(fieldNum(SKS_EB_CommProcess, FileComplete)).allowEdit(true);
            SKS_EB_CommProcess_ds.object(fieldNum(SKS_EB_CommProcess, direction)).allowEdit(true);
            SKS_EB_CommProcess_ds.object(fieldNum(SKS_EB_CommProcess, RelocEFTformatId)).visible(false);
            SKS_EB_CommProcess_ds.object(fieldNum(SKS_EB_CommProcess, RelocCompany)).visible(true);
            if(SKS_EB_Commprocess.Direction == SKS_EB_Direction::Outbound)
            {
                SKS_EB_CommProcess_ds.object(fieldNum(SKS_EB_CommProcess, autopost)).allowEdit(true);
            }
        }
        else if(SKS_EB_CommProcess.Module == SKS_EB_Module::PCard)
        {
            SKS_EB_CommProcess_ds.object(fieldNum(SKS_EB_CommProcess, direction)).allowEdit(false);
            SKS_EB_CommProcess_ds.object(fieldNum(SKS_EB_CommProcess, RelocLBFormatID)).visible(false);
            SKS_EB_CommProcess_ds.object(fieldNum(SKS_EB_CommProcess, RelocEFTFormatID)).visible(false);
        }
        else if(SKS_EB_CommProcess.module == SKS_EB_Module::CustomerReimbursements)  //FDD - Customer Reimbursements
        {
            SKS_EB_CommProcess_ds.object(fieldNum(SKS_EB_CommProcess, FileComplete)).allowEdit(true);
            SKS_EB_CommProcess_ds.object(fieldNum(SKS_EB_CommProcess, direction)).allowEdit(true);
            SKS_EB_CommProcess_ds.object(fieldNum(SKS_EB_CommProcess, RelocEFTformatId)).visible(false);
            SKS_EB_CommProcess_ds.object(fieldNum(SKS_EB_CommProcess, RelocCompany)).visible(true);
            if(SKS_EB_Commprocess.Direction == SKS_EB_Direction::Outbound)
            {
                SKS_EB_CommProcess_ds.object(fieldNum(SKS_EB_CommProcess, autopost)).allowEdit(true);
            }
        }
        else if(SKS_EB_CommProcess.module == SKS_EB_Module::MandateAutomation)
        {
            SKS_EB_CommProcess_ds.object(fieldNum(SKS_EB_CommProcess, direction)).allowEdit(true);
            SKS_EB_CommProcess_ds.object(fieldNum(SKS_EB_CommProcess, RelocEFTformatId)).visible(false);
            SKS_EB_CommProcess_ds.object(fieldNum(SKS_EB_CommProcess, CreateSendCpny)).allowEdit(false);
            SKS_EB_CommProcess_ds.object(fieldNum(SKS_EB_CommProcess, RelocCompany)).visible(false);
            SKS_EB_CommProcess_ds.object(fieldNum(SKS_EB_CommProcess, RelocInboundFileGroupId)).visible(false);
            if(SKS_EB_Commprocess.Direction == SKS_EB_Direction::Outbound)
            {
                SKS_EB_CommProcess_ds.object(fieldNum(SKS_EB_CommProcess, autopost)).allowEdit(true);
                SKS_EB_CommProcess_ds.object(fieldNum(SKS_EB_CommProcess, FileCreateType)).allowEdit(false);
            }
        }
        else if(SKS_EB_CommProcess.module == SKS_EB_Module::InHouseBankInterestRate)
        {
            SKS_EB_CommProcess_ds.object(fieldNum(SKS_EB_CommProcess, direction)).allowEdit(false);
        }
        else if(SKS_EB_CommProcess.module == SKS_EB_Module::ElectronicFundsFileRelocation)
        {
            SKS_EB_CommProcess_ds.object(fieldNum(SKS_EB_CommProcess, direction)).allowEdit(false);
            SKS_EB_CommProcess_ds.object(fieldNum(SKS_EB_CommProcess, RelocEFTformatId)).visible(false);
            SKS_EB_CommProcess_ds.object(fieldNum(SKS_EB_CommProcess, RelocCompany)).visible(true);
            SKS_EB_CommProcess_ds.object(fieldNum(SKS_EB_CommProcess, RelocInboundFileGroupId)).visible(true);
        }
        else if(SKS_EB_CommProcess.module == SKS_EB_Module::Lockbox)
        {
            SKS_EB_CommProcess_ds.object(fieldNum(SKS_EB_CommProcess, FileComplete)).allowEdit(true);
            SKS_EB_CommProcess.AutoPost = NoYes::No;
            SKS_EB_CommProcess_ds.object(fieldNum(SKS_EB_CommProcess, direction)).allowEdit(true);
            SKS_EB_CommProcess_ds.object(fieldNum(SKS_EB_CommProcess, RelocLBformatId)).visible(true);
            SKS_EB_CommProcess_ds.object(fieldNum(SKS_EB_CommProcess, RestrictFormatComp)).visible(true);
            SKS_EB_CommProcess_ds.object(fieldNum(SKS_EB_CommProcess, RestrictFormatComp)).allowEdit(true);
            SKS_EB_CommProcess_ds.object(fieldNum(SKS_EB_CommProcess, RelocCompany)).visible(true);
            SKS_EB_CommProcess_ds.object(fieldNum(SKS_EB_CommProcess, RelocInboundFileGroupId)).visible(false);
            if(SKS_EB_CommProcess.RelocCompany != '')
            {
                SKS_EB_CommProcess_ds.object(fieldNum(SKS_EB_CommProcess, relocLBformatid)).allowEdit(true);
            }
        }
        else if(SKS_EB_CommProcess.module == SKS_EB_Module::PP)
        {
            SKS_EB_CommProcess_ds.object(fieldNum(SKS_EB_CommProcess, FileComplete)).allowEdit(true);
            SKS_EB_CommProcess.AutoPost = NoYes::No;
            SKS_EB_CommProcess_ds.object(fieldNum(SKS_EB_CommProcess, FileCreateType)).allowEdit(true);
            SKS_EB_CommProcess_ds.object(fieldNum(SKS_EB_CommProcess, RelocCompany)).visible(true);
            SKS_EB_CommProcess_ds.object(fieldNum(SKS_EB_CommProcess, RelocInboundFileGroupId)).visible(false);
            if(SKS_EB_Commprocess.Direction == SKS_EB_Direction::InboundRelocation)
            {
                SKS_EB_CommProcess_ds.object(fieldNum(SKS_EB_CommProcess, reloceftformatid)).visible(true);
            }
        }
        else if(SKS_EB_CommProcess.module == SKS_EB_Module::eBankRec || SKS_EB_CommProcess.Module == SKS_EB_Module::IHBExternalVendor)
        {
            SKS_EB_CommProcess_ds.object(fieldNum(SKS_EB_CommProcess, FileComplete)).allowEdit(true);
            SKS_EB_CommProcess_ds.object(fieldNum(SKS_EB_CommProcess, direction)).allowEdit(true);
            SKS_EB_CommProcess.AutoPost = NoYes::No;
        }
        else if(SKS_EB_CommProcess.module == SKS_EB_Module::CreditCardReconciliation)
        {
            SKS_EB_CommProcess_ds.object(fieldNum(SKS_EB_CommProcess, FileComplete)).allowEdit(true);
            SKS_EB_CommProcess_ds.object(fieldNum(SKS_EB_CommProcess, direction)).allowEdit(true);
            SKS_EB_CommProcess.AutoPost = NoYes::No;
            SKS_EB_CommProcess_ds.object(fieldNum(SKS_EB_CommProcess, RelocInboundFileGroupId)).visible(false);
        }
        else if(SKS_EB_CommProcess.module == SKS_EB_Module::SupplyChainFinance)  //FDD-14323- Supply chain finance
        {
            SKS_EB_CommProcess_ds.object(fieldNum(SKS_EB_CommProcess, FileComplete)).allowEdit(false);
            SKS_EB_CommProcess_ds.object(fieldNum(SKS_EB_CommProcess, CreateSendCpny)).allowEdit(false);
            SKS_EB_CommProcess_ds.object(fieldNum(SKS_EB_CommProcess, FileCompletionTime)).allowEdit(false);
            SKS_EB_CommProcess_ds.object(fieldNum(SKS_EB_CommProcess, AutoPost)).allowEdit(false);

            SKS_EB_CommProcess_ds.object(fieldNum(SKS_EB_CommProcess, direction)).allowEdit(true);
            //SKS_EB_CommProcess_ds.object(fieldNum(SKS_EB_CommProcess, FileCreateType)).allowEdit(true);
            SKS_EB_CommProcess_ds.object(fieldNum(SKS_EB_CommProcess, RelocCompany)).visible(true);
            //SKS_EB_CommProcess_ds.object(fieldNum(SKS_EB_CommProcess, FileCreateType)).visible(false);
            if(SKS_EB_Commprocess.Direction == SKS_EB_Direction::InboundRelocation)
            {
                SKS_EB_CommProcess_ds.object(fieldNum(SKS_EB_CommProcess, RelocEFTformatId)).visible(false);
                SKS_EB_CommProcess_ds.object(fieldNum(SKS_EB_CommProcess, RelocCompany)).visible(false);
                SKS_EB_CommProcess_ds.object(fieldNum(SKS_EB_CommProcess, RelocInboundFileGroupId)).visible(false);
            }
        }
        else //AReS / AP EFT+ MAL
        {
            SKS_EB_CommProcess_ds.object(fieldNum(SKS_EB_CommProcess, direction)).allowEdit(true);
            SKS_EB_CommProcess_ds.object(fieldNum(SKS_EB_CommProcess, FileComplete)).allowEdit(true);
            SKS_EB_CommProcess.AutoPost = NoYes::No;
            SKS_EB_CommProcess_ds.object(fieldNum(SKS_EB_CommProcess, RelocCompany)).visible(true);
            if(SKS_EB_Commprocess.Direction == SKS_EB_Direction::InboundRelocation)
            {
                SKS_EB_CommProcess_ds.object(fieldNum(SKS_EB_CommProcess, reloceftformatid)).visible(true);
            }

        }

        if ((SKS_EB_CommProcess.Module == SKS_EB_Module::APEFT || SKS_EB_CommProcess.Module == SKS_EB_Module::eBankRec) && SKS_EB_CommProcess.Direction == SKS_EB_Direction::Inbound) //SKS_ElectronicBankAPIChanges
        {
            SKS_EB_CommProcess_APIFormatType.visible(true);
            SKS_EB_CommProcess_EDCreateSendCpny.visible(false);
        }
        else
        {
            SKS_EB_CommProcess_APIFormatType.visible(false);
            SKS_EB_CommProcess_EDCreateSendCpny.visible(false);
        }

        SKS_EB_CommProcess_ds.object(fieldNum(SKS_EB_CommProcess, CommTimeout)).allowEdit(SKS_EB_CommProcess.ServerSideComm);
        SKS_EB_CommProcess.setCommTimeout();
    }

]]></Source>
			</Method>
			<Method>
				<Name>enabledisabletabs</Name>
				<Source><![CDATA[
    public void enabledisabletabs()
    {
        CommunicationsOptionsTabPage.visible(this.getCommType() == SKS_BF_BankIntType::FileHubLocal);
        CommParmsTabPage.visible(this.getCommType() == SKS_BF_BankIntType::FileHubLocal);
        InboundBRPreReadScriptTabPage.visible(this.getCommType() == SKS_BF_BankIntType::FileHubLocal);
        InboundBRPreReadScriptParamsTabPage.visible(this.getCommType() == SKS_BF_BankIntType::FileHubLocal);
        InboundBRPostReadScriptTabPage.visible(this.getCommType() == SKS_BF_BankIntType::FileHubLocal);
        InboundBRPostReadScriptParamsTabPage.visible(this.getCommType() == SKS_BF_BankIntType::FileHubLocal);
       
        if(BankFabricCommunicationOptionsTabPage.visible())
        {
            BankFabricCommunicationOptionsTabPage.expand();
            SKS_EB_CommProcess_APIFormatType.visible(false);
        }

        CommunicationsOptionsTabPage.enabled(!(SKS_EB_CommProcess.Direction == SKS_EB_Direction::Inbound));

        if(BankFabricCommunicationOptionsTabPage.enabled())
        {
            BankFabricCommunicationOptionsTabPage.expand();
        }                         

        if(SKS_EB_CommProcess.Direction == SKS_EB_Direction::Inbound)       
        {
            OutboundCommTabPage.collapse();
            OutboundCommTabPage.enabled(false);
            InboundCommTabPage.enabled(true);
            InboundCommTabPage.expand();
            InboundRelocationCommTabPage.collapse();
            InboundRelocationCommTabPage.enabled(false);
        }
        else if(SKS_EB_CommProcess.Direction == SKS_EB_Direction::Outbound)       
        {
            OutboundCommTabPage.enabled(true);
            OutboundCommTabPage.expand();
            InboundCommTabPage.enabled(false);
            InboundCommTabPage.collapse();
            InboundRelocationCommTabPage.enabled(false);
            InboundRelocationCommTabPage.collapse();
        }
        else //  SKS_EB_Direction:::InboundRelocation
        {
            OutboundCommTabPage.enabled(false);
            OutboundCommTabPage.collapse();
            InboundCommTabPage.enabled(false);
            InboundCommTabPage.collapse();
            InboundRelocationCommTabPage.enabled(true);
            InboundRelocationCommTabPage.expand();
        }

        CommParmsTabPage.enabled(CommunicationsOptionsTabPage.enabled()
                                    && (SKS_EB_CommProcess.CommType == SKS_PP_CommunicationsType::User
                                            || SKS_EB_CommProcess.CommType == SKS_PP_CommunicationsType::WebService));

        if(CommParmsTabPage.enabled())
        {
            CommParmsTabPage.expand();
        }
        else
        {
            CommParmsTabPage.collapse();
        }
        if(CommunicationsOptionsTabPage.enabled())
        {
            CommunicationsOptionsTabPage.expand();
        }
        else
        {
            CommunicationsOptionsTabPage.collapse();
        }

        //Inbound Pre/Post script tabs
        if((SKS_EB_CommProcess.Module == SKS_EB_Module::eBankRec || SKS_EB_CommProcess.Module == SKS_EB_Module::CreditCardReconciliation) && SKS_EB_CommProcess.Direction == SKS_EB_Direction::Inbound)
        {
            InboundBRPreReadScriptTabPage.enabled(true);
            InboundBRPreReadScriptParamsTabPage.enabled(true);
            InboundBRPostReadScriptTabPage.enabled(true);
            InboundBRPostReadScriptParamsTabPage.enabled(true);
        }
        else
        {
            InboundBRPreReadScriptTabPage.collapse();
            InboundBRPreReadScriptTabPage.enabled(false);
            InboundBRPreReadScriptParamsTabPage.collapse();
            InboundBRPreReadScriptParamsTabPage.enabled(false);
            InboundBRPostReadScriptTabPage.collapse();
            InboundBRPostReadScriptTabPage.enabled(false);
            InboundBRPostReadScriptParamsTabPage.collapse();
            InboundBRPostReadScriptParamsTabPage.enabled(false);
        }

   }

]]></Source>
			</Method>
			<Method>
				<Name>enableParametersGridFieldValue</Name>
				<Source><![CDATA[
    public void enableParametersGridFieldValue()
    {
        SKS_EB_CommParams_ds.object(fieldNum(SKS_EB_CommParams,Value)).enabled((SKS_EB_CommProcess.Direction != SKS_EB_Direction::InboundRelocation && SKS_EB_CommParams.ParamType == SKS_EB_ParamType::FixedValue)
            || (SKS_EB_CommProcess.Direction == SKS_EB_Direction::InboundRelocation && SKS_EB_CommParams.RelocParamType == SKS_EB_RelocParamType::FixedValue));

        if((SKS_EB_CommProcess.Direction != SKS_EB_Direction::InboundRelocation && SKS_EB_CommParams.ParamType != SKS_EB_ParamType::FixedValue)
            || (SKS_EB_CommProcess.Direction == SKS_EB_Direction::InboundRelocation && SKS_EB_CommParams.RelocParamType != SKS_EB_RelocParamType::FixedValue))
        {
            SKS_EB_CommParams.Value = '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableParametersGridBRPreReadScriptFieldValue</Name>
				<Source><![CDATA[
    public void enableParametersGridBRPreReadScriptFieldValue()
    {
        if(SKS_EB_CommBRPreReadScriptParams.ParamType == SKS_EB_ParamType::FixedValue)
        {
            SKS_EB_CommBRPreReadScriptParams_ds.object(fieldNum(SKS_EB_CommParams,Value)).enabled(true);
        }
        else
        {
            SKS_EB_CommBRPreReadScriptParams.Value = '';
            SKS_EB_CommBRPreReadScriptParams_ds.object(fieldNum(SKS_EB_CommParams,Value)).enabled(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableParametersGridBRPostReadScriptFieldValue</Name>
				<Source><![CDATA[
    public void enableParametersGridBRPostReadScriptFieldValue()
    {
        if(SKS_EB_CommBRPostReadScriptParams.ParamType == SKS_EB_ParamType::FixedValue)
        {
            SKS_EB_CommBRPostReadScriptParams_ds.object(fieldNum(SKS_EB_CommParams,Value)).enabled(true);
        }
        else
        {
            SKS_EB_CommBRPostReadScriptParams.Value = '';
            SKS_EB_CommBRPostReadScriptParams_ds.object(fieldNum(SKS_EB_CommParams,Value)).enabled(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        SKS_PP_Sys   sks_PP_Sys;

        super();
        select firstonly SKS_EB_FileStorage;

        sks_PP_Sys = new SKS_PP_Sys();
        if (!SKS_PP_Sys.ValidateSetup(this.name(), SKS_EFT_Module::AP)) //SKS_EFT_Module::AP is the default.  Dyn 365 would not let me omit the optional param.
        {
            this.close();
        }

        LaunchButton.text("@SKS92");
        LaunchButton.helpText("@SKS728");

        //Initialize splitter
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSKG_BF_Direction</Name>
				<Source><![CDATA[
    private SKG_BF.Models.Direction getSKG_BF_Direction()
    {
        SKG_BF.Models.Direction rtnval;
        if (SKS_EB_CommProcess.Direction == SKS_EB_Direction::Inbound || SKS_EB_CommProcess.Direction == SKS_EB_Direction::InboundRelocation)
                rtnval = SKG_BF.Models.Direction::In;
        if (SKS_EB_CommProcess.Direction == SKS_EB_Direction::Outbound)
                rtnval = SKG_BF.Models.Direction::Out;
        return rtnval;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankFabricModuleCrossreference</Name>
				<Source><![CDATA[
    private SKS_BF_FileLocCategory getBankFabricModuleCrossreference()
    {
        SKS_BF_FileLocCategory locSKS_BF_FileLocCategory;
        switch(SKS_EB_CommProcess.Module)
        {
            case SKS_EB_Module::APEFT:
                locSKS_BF_FileLocCategory = SKS_BF_FileLocCategory::APEFT;
                break;
            case SKS_EB_Module::AREFT:
                locSKS_BF_FileLocCategory = SKS_BF_FileLocCategory::AREFT;
                break;
            case SKS_EB_Module::eBankRec:
                locSKS_BF_FileLocCategory = SKS_BF_FileLocCategory::BR;
                break;
            case SKS_EB_Module::CreditCardReconciliation:
                locSKS_BF_FileLocCategory = SKS_BF_FileLocCategory::CCR;
                break;
            case SKS_EB_Module::BankToBankTransfer:
                locSKS_BF_FileLocCategory = SKS_BF_FileLocCategory::BTB;
                break;
            case SKS_EB_Module::CustomerReimbursements:
                locSKS_BF_FileLocCategory = SKS_BF_FileLocCategory::CNP;
                break;
            case SKS_EB_Module::ElectronicFundsFileRelocation:
                locSKS_BF_FileLocCategory = SKS_BF_FileLocCategory::ElectronicFundsFileRelocation;
                break;
            case SKS_EB_Module::MandateAutomation:
                locSKS_BF_FileLocCategory = SKS_BF_FileLocCategory::MandateAutomation;
                break;
            case SKS_EB_Module::Lockbox:
                locSKS_BF_FileLocCategory = SKS_BF_FileLocCategory::ARES;
                break;           
            case SKS_EB_Module::AReSExt:
                locSKS_BF_FileLocCategory = SKS_BF_FileLocCategory::ARESExt;
                break;
            case SKS_EB_Module::PP:
                locSKS_BF_FileLocCategory = SKS_BF_FileLocCategory::PosPay;
                break;
            case SKS_EB_Module::IHBExternalVendor:
                locSKS_BF_FileLocCategory = SKS_BF_FileLocCategory::IHBExternalVendor;
                break;
            case SKS_EB_Module::InHouseBankInterestRate:
                locSKS_BF_FileLocCategory = SKS_BF_FileLocCategory::InHouseBankInterestRate;
                break;
            //21186
            case SKS_EB_Module::PCard:
                locSKS_BF_FileLocCategory = SKS_BF_FileLocCategory::PCard;
                break;

            default:
                throw Global::error("@SKS:SKGBankFabricCommError");
        }
        return locSKS_BF_FileLocCategory;

    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        super();

        // when form is first opened, d365 collapse or expands the tabs according to client cache.
        // this method suppress d365 cache and collapse or expand according to the comm direction.
        element.enabledisabletabs();
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>SKS_EB_CommParams</Name>
				<Methods>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        public int active()
        {
            int ret;

            ret = super();

            element.enableParametersGridFieldValue();

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>create</Name>
						<Source><![CDATA[
        public void create(boolean _append = false)
        {
            SKS_EB_CommParams  locSKS_EB_CommParams;
            int nextOrderNumber;
            ;

            if(
                    (SKS_EB_CommProcess.CommType == SKS_PP_CommunicationsType::User
                    || SKS_EB_CommProcess.CommType == SKS_PP_CommunicationsType::WebService)
                    && SKS_EB_CommProcess.CommID != '')
            {
                super(_append);
                SELECT MAXOF(ParamOrder) FROM locSKS_EB_CommParams
                                    where locSKS_EB_CommParams.CommID == SKS_EB_CommProcess.commid
                                    && locSKS_EB_CommParams.ParamGroup == SKS_EB_ParamGroup::unclassified;

                nextOrderNumber = locSKS_EB_CommParams.ParamOrder + 1;
                SKS_EB_CommParams.ParamOrder = nextOrderNumber;
                SKS_EB_CommParams.CommID = SKS_EB_CommProcess.CommID;
                SKS_EB_CommParams.ParamType = SKS_EB_ParamType::FixedValue;
                SKS_EB_CommParams.RelocParamType = SKS_EB_RelocParamType::FixedValue;
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        public void executeQuery()
        {
            this.queryBuildDataSource().addRange(fieldNum(SKS_EB_CommParams, ParamGroup)).value(queryValue(SKS_EB_ParamGroup::unclassified));
            super();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields>
					<Field>
						<DataField>ParamType</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                element.enableParametersGridFieldValue();

            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>RelocParamType</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();
                element.enableParametersGridFieldValue();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
				</Fields>
			</DataSource>
			<DataSource>
				<Name>SKS_EB_CommProcess</Name>
				<Methods>
					<Method>
						<Name>validateWrite</Name>
						<Source><![CDATA[
        public boolean validateWrite()
        {
            boolean ret;
            container locCompanies;
            SKS_PP_Bank locSKS_PP_Bank;
            SKS_PP_Setup locSKS_PP_Setup;
            SKS_BF_BankIntType sks_BF_BankIntType; //BankfFabric

            ret = super();

            //BankFabric
            sks_BF_BankIntType = element.getCommType();
           
            if(SKS_EB_CommProcess.CommID == '')
            {
                error(strfmt("@SKS2468", "@SKS2430"));
                SKS_EB_CommProcess_EBCommID.setfocus();
                return false;
            }

            if(SKS_EB_CommProcess.FileCreateType == SKS_EB_FileCreate::FixedTime
                && SKS_EB_CommProcess.CreateSendCpny == '' 
                && SKS_EB_CommProcess.Module != SKS_EB_Module::APMAL
                && SKS_EB_CommProcess.Module != SKS_EB_Module::SupplyChainFinance)
            {
                error(strfmt("@SKS2468", "@SKS2450"));
                SKS_EB_CommProcess_PPCreateSendCpny.setFocus();
                return false;
            }

            if(SKS_EB_CommProcess.FileCreateType == SKS_EB_FileCreate::FixedTime
                && SKS_EB_CommProcess.Module == SKS_EB_Module::PP
                && SKS_EB_CommProcess.orig().CreateSendCpny != SKS_EB_CommProcess.CreateSendCpny)
            {

                if(strLen(SKS_EB_CommProcess.orig().CreateSendCpny) > 0)
                {
                    changeCompany(SKS_EB_CommProcess.orig().CreateSendCpny)
                    {
                        locCompanies = SKS_EB_VirtualCompany::getPosPayCompanies();
                    }
                    //if you've left the original hierarchy...
                    if(conFind(locCompanies, SKS_EB_CommProcess.CreateSendCpny) == 0)
                    {
                        //...check and see if any bank account  still uses this commid
                        select firstonly crossCompany:locCompanies  BankAccountID, DataAreaId, recid from locSKS_PP_Bank where locSKS_PP_Bank.PPOutCommID == SKS_EB_CommProcess.CommID;
                        if(locSKS_PP_Bank)
                        {
                            error(strFmt("@SKS3934", locSKS_PP_Bank.BankAccountId, locSKS_PP_Bank.company()));
                            SKS_EB_CommProcess_PPCreateSendCpny.setFocus();
                            return false;
                        }
                        //...check and see if any setup record still uses this commid
                        select firstonly crossCompany:locCompanies  DataAreaId, recid from locSKS_PP_Setup where locSKS_PP_Setup.PPOutCommID == SKS_EB_CommProcess.CommID;
                        if(locSKS_PP_Setup)
                        {
                            error(strFmt("@SKS3935", locSKS_PP_Setup.company()));
                            SKS_EB_CommProcess_PPCreateSendCpny.setFocus();
                            return false;
                        }
                    }
                }
                else
                {
                    changeCompany(SKS_EB_CommProcess.CreateSendCpny)
                    {
                        locCompanies = SKS_EB_VirtualCompany::getPosPayCompanies();
                    }
                    //if you've left the original hierarchy...
                    if(conFind(locCompanies, SKS_EB_CommProcess.CreateSendCpny) == 0)
                    {
                        //...check and see if any bank account or setup record in the original hierarchy still uses this commid
                        while select crossCompany  BankAccountID, DataAreaId, recid from locSKS_PP_Bank where locSKS_PP_Bank.PPOutCommID == SKS_EB_CommProcess.CommID
                        {
                            if(conFind(locCompanies, locSKS_PP_Bank.dataareaid) == 0)
                            {
                                error(strFmt("@SKS3936", locSKS_PP_Bank.BankAccountId, locSKS_PP_Bank.dataAreaId));
                                SKS_EB_CommProcess_PPCreateSendCpny.setFocus();
                                ret = false;
                            }
                        }
                        while select firstonly crossCompany:locCompanies  DataAreaId, recid from locSKS_PP_Setup where locSKS_PP_Setup.PPOutCommID == SKS_EB_CommProcess.CommID
                        {
                            if(conFind(locCompanies, locSKS_PP_Setup.dataareaid) == 0)
                            {
                                error(strFmt("@SKS3937", locSKS_PP_Setup.company()));
                                SKS_EB_CommProcess_PPCreateSendCpny.setFocus();
                                ret =  false;
                            }
                        }
                        if(!ret)
                        {
                            return false;
                        }
                    }

                }
            }

            if(((SKS_EB_CommProcess.FileCreateType == SKS_EB_FileCreate::FixedTime &&
                 SKS_EB_CommProcess.Module != SKS_EB_Module::SupplyChainFinance)||
                (SKS_EB_CommProcess.SCF_FileCreateType == SKS_SCF_FileCreate::FixedTime &&
                 SKS_EB_CommProcess.Module == SKS_EB_Module::SupplyChainFinance))
                && SKS_EB_CommProcess.Direction == SKS_EB_Direction::Outbound
                && SKS_EB_CommProcess.BatchJobId == 0)
            {
                error(strfmt("@SKS2468", "@SYS114515"));
                ReferenceGroup.setFocus();
                return false;
            }

            if(SKS_EB_CommProcess.CommType != SKS_PP_CommunicationsType::None && SKS_EB_CommProcess.CommType != SKS_PP_CommunicationsType::WebService
                && SKS_EB_CommProcess.CommUserProg == '' && SKS_EB_CommProcess.Direction == SKS_EB_Direction::Outbound
                && sks_BF_BankIntType == SKS_BF_BankIntType::FileHubLocal)
            {
                error(strfmt("@SKS2468", "@SKS2415"));
                SKS_EB_CommProcess_PPCommuserProg.setfocus();
                return false;
            }
            
            if(SKS_EB_CommProcess.Module == SKS_EB_Module::Lockbox)
            {
                if(SKS_EB_CommProcess.Direction == SKS_EB_Direction::Outbound)
                {
                    error("@SKS3930");
                    return false;
                }
            }

            if(SKS_EB_CommProcess.Direction == SKS_EB_Direction::InboundRelocation)
            {
                if (!SKS_EB_CommProcess.RelocBatchJobId
                    && SKS_EB_CommProcess.Module == SKS_EB_Module::Lockbox)
                {
                    error(strFmt("@SKS3928", "@SYS114515"));
                    return false;
                }

                if (SKS_EB_CommProcess.RelocClass == ''
                    && (SKS_EB_CommProcess.Module != SKS_EB_Module::Lockbox
                        || (sks_BF_BankIntType == SKS_BF_BankIntType::FileHubLocal && SKS_EB_CommProcess.CommType != SKS_PP_CommunicationsType::User)))
                {
                    error(strFmt("@SKS3928", "@SKS3925"));
                    return false;
                }

                if (SKS_EB_CommProcess.RelocCompany == ''
                    && SKS_EB_CommProcess_ds.object(fieldNum(SKS_EB_CommProcess, RelocCompany)).visible()
                    && (SKS_EB_CommProcess.Module != SKS_EB_Module::Lockbox
                        || (sks_BF_BankIntType == SKS_BF_BankIntType::FileHubLocal && SKS_EB_CommProcess.CommType != SKS_PP_CommunicationsType::User)))
                {
                    error(strFmt("@SKS3928", "@SKS3056"));
                    return false;
                }

                if (SKS_EB_CommProcess.RelocFilePath == ''
                    && sks_BF_BankIntType == SKS_BF_BankIntType::FileHubLocal)
                {
                    error(strFmt("@SKS3928", "@SKS115"));
                    return false;
                }

                if (SKS_EB_CommProcess.RelocBankFabricLocation == ''
                    && sks_BF_BankIntType == SKS_BF_BankIntType::BankFabric)
                {
                    error(strFmt("@SKS3928", "@SKS:SKGBFFileLocation"));
                    return false;
                }

                if (SKS_EB_CommProcess.RelocLBFormatId == ''
                    && SKS_EB_CommProcess.Module == SKS_EB_Module::Lockbox
                    && sks_BF_BankIntType == SKS_BF_BankIntType::FileHubLocal
                    && SKS_EB_CommProcess.CommType != SKS_PP_CommunicationsType::User)
                {
                    error(strFmt("@SKS3928", "@SKS11"));
                    return false;
                }

                if (!SKS_EB_CommProcess.CommUserProg
                    && SKS_EB_CommProcess.Module == SKS_EB_Module::Lockbox
                    && sks_BF_BankIntType == SKS_BF_BankIntType::FileHubLocal
                    && SKS_EB_CommProcess.CommType == SKS_PP_CommunicationsType::User)
                {
                    error(strFmt("@SKS3928", "@SKS59"));
                    return false;
                }

                // these 4 fields must be left as empty or must be filled. filling partially is not possible.
                if (SKS_EB_CommProcess.Module == SKS_EB_Module::Lockbox)
                {
                    if (!(
                          (SKS_EB_CommProcess.RelocCompany
                           && SKS_EB_CommProcess.RelocLBFormatId
                           && SKS_EB_CommProcess.RelocClass)
                         ||
                           (!SKS_EB_CommProcess.RelocCompany
                            && !SKS_EB_CommProcess.RelocLBFormatId
                            && !SKS_EB_CommProcess.RelocClass)
                        ))
                    {
                        error(strFmt("@SKS:EBCommLockboxMissingRelocBFFieldsError", "@SKS4411", "@SKS11", "@SKS3925"));
                        return false;
                    }
                }

                if(SKS_EB_CommProcess.Module == SKS_EB_Module::APEFT && SKS_EB_CommProcess.RelocEFTFormatId == '')
                {
                    error(strFmt("@SKS3928", "@SKS11"));
                    return false;
                }

                if(SKS_EB_CommProcess.Module == SKS_EB_Module::ElectronicFundsFileRelocation && SKS_EB_CommProcess.RelocInboundFileGroupId == '')
                {
                    error(strFmt("@SKS3928", "@SKS2723"));
                    return false;
                }

                if(strLen(strLRTrim(SKS_EB_CommProcess.FileType)) != strLen(SKS_EB_CommProcess.FileType))
                {
                    error(strFmt("@SKS:SKGCannotBeginEndWhitespace", "@SKS50"));
                    return false;
                }


                if(SKS_EB_CommProcess.CommType == SKS_PP_CommunicationsType::WebService && strLen(SKS_EB_CommProcess.FileType) == 0 )
                {
                    error(strFmt("@SKS3928", "@SKS50"));
                    return false;
                }
               
                if (sks_BF_BankIntType == SKS_BF_BankIntType::FileHubLocal
                    && SKS_EB_CommProcess.RelocFilePath)
                {
                    SKS_EB_BaseFileRelocation::FileRelocationDirectoryCreation(SKS_EB_CommProcess.RelocFilePath);
                }
            }
                      
            if(SKS_EB_CommProcess_ds.object(fieldNum(SKS_EB_CommProcess, BankFabricCommunicationName)).enabled() && (SKS_EB_CommProcess.BankFabricCommunicationName == ''  && sks_BF_BankIntType == SKS_BF_BankIntType::BankFabric))
            {
                error(strFmt("@SKS3928", "@SKS:SKGBFCommName"));
                return false;
            }
            
            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>validateDelete</Name>
						<Source><![CDATA[
        public boolean validateDelete()
        {
            SKS_PP_Setup    tmpSetup;
            SKS_PP_Bank     tmpBank;
            boolean ret;
            ;

            ret = super();

            select firstonly crossCompany PPOutCommID from tmpSetup
                    where tmpSetup.PPOutCommID == SKS_EB_CommProcess.CommID;

            if(!tmpSetup)
            {
                select firstonly crosscompany PPOutCommID from tmpBank
                    where tmpBank.PPOutCommID == SKS_EB_CommProcess.CommID;
            }

            if (tmpSetup || tmpBank)
            {
                error("@SKS2456");
                ret = false;
            }

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        public int active()
        {
            int ret;

            ret = super();

            element.checkIE();
            element.EnableDisable();
            element.enabledisabletabs();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
				<Fields>
					<Field>
						<DataField>APIFormatType</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                SKS_EB_CommProcess.BatchJobId = 0;
                super();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>BatchJobId</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                if(sks_eb_commprocess.BatchJobId != 0)
                {
                    SKS_EB_CommProcess.RelocBatchJobId = 0;
                }
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>BRPostImportScriptPath</DataField>
						<Methods>
							<Method>
								<Name>validate</Name>
								<Source><![CDATA[
            public boolean validate()
            {
                boolean ret;

                ret = super();
                if(SKS_EB_CommProcess.BRPostImportScriptPath != '')
                {
                    ret = element.checkFile(SKS_EB_CommProcess.BRPostImportScriptPath);
                    if (!ret)
                    {
                        SKS_EB_CommProcess_PPCommUserProg.setFocus();
                    }
                }
                return ret;
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>BRPreImportScriptPath</DataField>
						<Methods>
							<Method>
								<Name>validate</Name>
								<Source><![CDATA[
            /// <summary>
            ///
            /// </summary>
            /// <returns></returns>
            public boolean validate()
            {
                boolean ret;

                ret = super();
                if(SKS_EB_CommProcess.BRPreImportScriptPath != '')
                {
                    ret = element.checkFile(SKS_EB_CommProcess.BRPreImportScriptPath);
                    if (!ret)
                    {
                        SKS_EB_CommProcess_PPCommUserProg.setFocus();
                    }
                }
                return ret;
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>CommType</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                SKS_EB_CommProcess.CommUserProg = ''; //clear this field

                if(SKS_EB_CommProcess.CommType != SKS_PP_CommunicationsType::User
                    && SKS_EB_CommProcess.CommType != SKS_PP_CommunicationsType::WebService)
                {
                    delete_from SKS_EB_CommParams where SKS_EB_CommParams.CommID == SKS_EB_CommProcess.CommID;
                }
                element.enabledisabletabs();
                element.checkIE();//check value to set browse/launch button text
                element.EnableDisable();

            }

]]></Source>
							</Method>
							<Method>
								<Name>validate</Name>
								<Source><![CDATA[
            public boolean validate()
            {
                boolean ret;

                if(((SKS_EB_CommProcess.FileCreateType == SKS_EB_FileCreate::FixedTime &&
                      SKS_EB_CommProcess.Module != SKS_EB_Module::SupplyChainFinance)
                    || SKS_EB_CommProcess.FileCreateType == SKS_EB_FileCreate::UponJrnlPosting
                    || (SKS_EB_CommProcess.SCF_FileCreateType == SKS_SCF_FileCreate::FixedTime &&
                        SKS_EB_CommProcess.Module == SKS_EB_Module::SupplyChainFinance))
                    && SKS_EB_CommProcess.CommType == SKS_PP_CommunicationsType::Browser)
                {
                    error("@SKS2421");
                    return false;
                }               

                if(SKS_EB_CommProcess.CommType == SKS_PP_CommunicationsType::WebService 
                    && (
                            SKS_EB_CommProcess.Module != SKS_EB_Module::APMAL                           
                            && SKS_EB_CommProcess.Module != SKS_EB_Module::MandateAutomation
                            && SKS_EB_CommProcess.Module != SKS_EB_Module::PP
                            && SKS_EB_CommProcess.Module != SKS_EB_Module::eBankRec
                            && SKS_EB_CommProcess.Module != SKS_EB_Module::CreditCardReconciliation
                            && SKS_EB_CommProcess.Module != SKS_EB_Module::SupplyChainFinance
                            && SKS_EB_CommProcess.Module != SKS_EB_Module::BankToBankTransfer
                            && SKS_EB_CommProcess.Module != SKS_EB_Module::ElectronicFundsFileRelocation
                            && SKS_EB_CommProcess.Module != SKS_EB_Module::CustomerReimbursements
                            && SKS_EB_CommProcess.Module != SKS_EB_Module::IHBExternalVendor
                        ))
                {
                    error(strFmt("@SKS:SKS_EB_CommValidationError",
                        enum2Str(SKS_PP_CommunicationsType::WebService),                        
                        enum2Str(SKS_EB_Module::APMAL),                        
                        enum2Str(SKS_EB_Module::MandateAutomation),
                        enum2Str(SKS_EB_Module::PP),
                        enum2Str(SKS_EB_Module::eBankRec),
                        enum2Str(SKS_EB_Module::CreditCardReconciliation),
                        enum2Str(SKS_EB_Module::SupplyChainFinance),
                        enum2Str(SKS_EB_Module::BankToBankTransfer),
                        enum2Str(SKS_EB_Module::ElectronicFundsFileRelocation)));
                }

                ret = super();

                return ret;
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>CommUserProg</DataField>
						<Methods>
							<Method>
								<Name>validate</Name>
								<Source><![CDATA[
            public boolean validate()
            {
                boolean ret;
                ;
                ret = super();


                if(SKS_EB_CommProcess.CommType != SKS_PP_CommunicationsType::Browser && SKS_EB_CommProcess.CommType != SKS_PP_CommunicationsType::WebService && SKS_EB_CommProcess.CommUserProg != '')
                {
                    ret = element.checkFile(SKS_EB_CommProcess.CommUserProg);
                    if (!ret)
                    {
                        SKS_EB_CommProcess_PPCommUserProg.setFocus();
                    }
                }


                return ret;
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>Direction</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();
                
                if(SKS_EB_CommProcess.Module == SKS_EB_Module::APEFT && SKS_EB_CommProcess.Direction == SKS_EB_Direction::Outbound)
                {
                    SKS_EB_CommProcess.FileComplete = SKS_EB_FileComplete::BasedOnInboundSettings;
                    SKS_EB_CommProcess.AutoPost = NoYes::Yes;
                    SKS_EB_CommProcess.CommType = SKS_PP_CommunicationsType::None;                    
                }
                
                element.EnableDisable();
                element.enabledisabletabs();
                SKS_EB_CommProcess.BatchJobId = 0;              
            }

]]></Source>
							</Method>
							<Method>
								<Name>validate</Name>
								<Source><![CDATA[
            public boolean validate()
            {
                boolean ret;

                ret = super();

                if(SKS_EB_CommProcess.Direction == SKS_EB_Direction::Outbound && SKS_EB_CommProcess.Module == SKS_EB_Module::eBankRec)
                {
                    error("@SKS:SKGOutboundUnavailEBankRec");
                    ret = false;
                }

                if(SKS_EB_CommProcess.Direction == SKS_EB_Direction::Outbound && SKS_EB_CommProcess.Module == SKS_EB_Module::CreditCardReconciliation)
                {
                    error("@SKS:SKGCCROutboundUnavail");
                    ret = false;
                }

                if(SKS_EB_CommProcess.Direction == SKS_EB_Direction::Outbound && SKS_EB_CommProcess.Module == SKS_EB_Module::Lockbox)
                {
                    error("@SKS3930");
                    ret = false;
                }

                if(SKS_EB_CommProcess.Direction == SKS_EB_Direction::Outbound && SKS_EB_CommProcess.Module == SKS_EB_Module::IHBExternalVendor)
                {
                    error("@SKS:SKGIHBExtVendorOutboundUnavailble");
                    ret = false;
                }

                if(SKS_EB_CommProcess.Direction == SKS_EB_Direction::InboundRelocation && 
                    (SKS_EB_CommProcess.Module == SKS_EB_Module::BankToBankTransfer ||
                    SKS_EB_CommProcess.Module == SKS_EB_Module::APEFT ||
                    SKS_EB_CommProcess.Module == SKS_EB_Module::AREFT ||
                    SKS_EB_CommProcess.Module == SKS_EB_Module::CustomerReimbursements))
                {
                    error(strFmt("@SKS:SKGBTBEFTFileRelocation", SKS_EB_CommProcess.Module));
                    ret = false;
                }
                return ret;
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>FileComplete</DataField>
						<Methods>
							<Method>
								<Name>validate</Name>
								<Source><![CDATA[
            public boolean validate()
            {
                boolean ret;

                if(SKS_EB_CommProcess.FileComplete == SKS_EB_FileComplete::Prompt
                    && SKS_EB_CommProcess.FileCreateType != SKS_EB_FileCreate::Manual)
                {
                    warning("@SKS2419");
                    return false;
                }

                if(SKS_EB_CommProcess.FileComplete == SKS_EB_FileComplete::BasedOnInboundSettings
                    && (SKS_EB_CommProcess.Module != SKS_EB_Module::APEFT)
                    //<SKS-begin>
                    && (SKS_EB_CommProcess.Module != SKS_EB_Module::AREFT)
                    && (SKS_EB_CommProcess.Module != SKS_EB_Module::BankToBankTransfer)
                    && (SKS_EB_CommProcess.Module != SKS_EB_Module::CustomerReimbursements))
                    //</SKS-end>
                {
                    error("@SKS2808");
                    return false;
                }
                else if(SKS_EB_CommProcess.FileComplete == SKS_EB_FileComplete::BasedOnInboundSettings
                    && ((SKS_EB_CommProcess.Module == SKS_EB_Module::APEFT)
                    //<SKS-begin>
                    || (SKS_EB_CommProcess.Module == SKS_EB_Module::AREFT))
                    || (SKS_EB_CommProcess.Module == SKS_EB_Module::BankToBankTransfer)
                    || (SKS_EB_CommProcess.Module != SKS_EB_Module::CustomerReimbursements))
                    //</SKS-end>
                {
                    SKS_EB_CommProcess_FileCompletionTime.enabled(true);
                }
                else
                {
                    SKS_EB_CommProcess.FileCompletionTime = 0;
                    SKS_EB_CommProcess_FileCompletionTime.enabled(false);
                }

                ret = super();

                return ret;
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>FileCompletionTime</DataField>
						<Methods>
							<Method>
								<Name>validate</Name>
								<Source><![CDATA[
            public boolean validate()
            {
                boolean ret;

                ret = super();

                if(ret && SKS_EB_CommProcess.FileCompletionTime < 0)
                {
                    error("@SKS2829");
                    ret = false;
                }

                return ret;
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>FileCreateType</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                if(SKS_EB_CommProcess.FileCreateType == SKS_EB_FileCreate::Manual)
                {
                    SKS_EB_CommProcess.FileComplete = SKS_EB_FileComplete::Prompt;
                    SKS_EB_CommProcess.CommType = SKS_PP_CommunicationsType::Browser;
                }
                else
                {
                    SKS_EB_CommProcess.FileComplete = SKS_EB_FileComplete::AlwaysMarkIfNoError;
                    SKS_EB_CommProcess.CommType = SKS_PP_CommunicationsType::User;
                }

                element.checkIE();
                element.EnableDisable();
            }

]]></Source>
							</Method>
							<Method>
								<Name>lookup</Name>
								<Source><![CDATA[
            /// <summary>
            ///
            /// </summary>
            /// <param name = "_formControl"></param>
            /// <param name = "_filterStr"></param>
            public void lookup(FormControl _formControl, str _filterStr)
            {
                if(SKS_EB_CommProcess.Module == SKS_EB_Module::MandateAutomation)
                {
                    super(_formControl, _filterStr);
                }
                else
                {
                    super(_formControl, "@SKS2439");
                }
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>Module</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                if(SKS_EB_CommProcess.Module == SKS_EB_Module::PP)
                {
                    SKS_EB_CommProcess_PPCreateSendCpny.lookupbutton(FormLookupButton::always);
                    SKS_EB_CommProcess.BatchJobId = 0;
                    SKS_EB_CommProcess.Direction = SKS_EB_Direction::Outbound;
                }
                else if(SKS_EB_CommProcess.Module == SKS_EB_Module::eBankRec)
                {
                    SKS_EB_CommProcess.FileCreateType = SKS_EB_FileCreate::FixedTime;
                    SKS_EB_CommProcess.CreateSendCpny = '';
                    SKS_EB_CommProcess_PPCreateSendCpny.lookupbutton(FormLookupButton::Hidden);
                    SKS_EB_CommProcess.FileComplete = SKS_EB_FileComplete::AlwaysMarkIfNoError;
                    SKS_EB_CommProcess.CommType = SKS_PP_CommunicationsType::Browser;
                    SKS_EB_CommProcess.BatchJobId = 0;
                    SKS_EB_CommProcess.Direction = SKS_EB_Direction::Inbound;
                }
                else if(SKS_EB_CommProcess.Module == SKS_EB_Module::PCard)
                {
                    SKS_EB_CommProcess.FileCreateType = SKS_EB_FileCreate::FixedTime;
                    SKS_EB_CommProcess.CreateSendCpny = '';
                    SKS_EB_CommProcess_PPCreateSendCpny.lookupbutton(FormLookupButton::Hidden);
                    SKS_EB_CommProcess.FileComplete = SKS_EB_FileComplete::AlwaysMarkIfNoError;
                    SKS_EB_CommProcess.CommType = SKS_PP_CommunicationsType::Browser;
                    SKS_EB_CommProcess.BatchJobId = 0;
                    SKS_EB_CommProcess.Direction = SKS_EB_Direction::Inbound;
                    SKS_EB_CommProcess_ds.object(fieldNum(SKS_EB_CommProcess, direction)).allowEdit(false);
                    SKS_EB_CommProcess_ds.object(fieldNum(SKS_EB_CommProcess, RelocLBFormatID)).visible(false);
                    SKS_EB_CommProcess_ds.object(fieldNum(SKS_EB_CommProcess, RelocEFTFormatID)).visible(false);
                }
                else if(SKS_EB_CommProcess.Module == SKS_EB_Module::CreditCardReconciliation)
                {
                    SKS_EB_CommProcess.FileCreateType = SKS_EB_FileCreate::FixedTime;
                    SKS_EB_CommProcess.CreateSendCpny = '';
                    SKS_EB_CommProcess_PPCreateSendCpny.lookupbutton(FormLookupButton::Hidden);
                    SKS_EB_CommProcess.FileComplete = SKS_EB_FileComplete::AlwaysMarkIfNoError;
                    SKS_EB_CommProcess.CommType = SKS_PP_CommunicationsType::Browser;
                    SKS_EB_CommProcess.BatchJobId = 0;
                    SKS_EB_CommProcess.Direction = SKS_EB_Direction::Inbound;
                }
                else if(SKS_EB_CommProcess.Module == SKS_EB_Module::APMAL)
                {
                    SKS_EB_CommProcess.FileCreateType = SKS_EB_FileCreate::FixedTime;
                    SKS_EB_CommProcess.CreateSendCpny = '';
                    SKS_EB_CommProcess_PPCreateSendCpny.lookupbutton(FormLookupButton::Hidden);
                    SKS_EB_CommProcess.FileComplete = SKS_EB_FileComplete::AlwaysMarkIfNoError;
                    SKS_EB_CommProcess.CommType = SKS_PP_CommunicationsType::User;
                    SKS_EB_CommProcess.BatchJobId = 0;
                    SKS_EB_CommProcess.Direction = SKS_EB_Direction::Outbound;
                }
                else if(SKS_EB_CommProcess.Module == SKS_EB_Module::FXAll)
                {
                    SKS_EB_CommProcess.FileCreateType = SKS_EB_FileCreate::FixedTime;
                    SKS_EB_CommProcess.CreateSendCpny = '';
                    SKS_EB_CommProcess_PPCreateSendCpny.lookupbutton(FormLookupButton::Hidden);
                    SKS_EB_CommProcess.FileComplete = SKS_EB_FileComplete::AlwaysMarkIfNoError;
                    SKS_EB_CommProcess.CommType = SKS_PP_CommunicationsType::User;
                    SKS_EB_CommProcess.BatchJobId = 0;
                    SKS_EB_CommProcess.Direction = SKS_EB_Direction::Inbound;
                }
                else if(SKS_EB_CommProcess.Module == SKS_EB_Module::Lockbox)
                {
                    SKS_EB_CommProcess.BatchJobId = 0;
                    SKS_EB_CommProcess.Direction = SKS_EB_Direction::Inbound;
                    SKS_EB_CommProcess.RelocBatchJobId = 0;
                    SKS_EB_CommProcess.RelocCompany = '';
                    SKS_EB_CommProcess.RelocFilePath = '';
                    SKS_EB_CommProcess.RelocLBFormatId = '';
                    SKS_EB_CommProcess.RestrictFormatComp = NoYes::No;
                    SKS_EB_CommProcess.RelocClass = '';
                }
                else if(SKS_EB_CommProcess.Module == SKS_EB_Module::InHouseBankInterestRate)
                {
                    SKS_EB_CommProcess.BatchJobId = 0;
                    SKS_EB_CommProcess.Direction = SKS_EB_Direction::Inbound;
                    SKS_EB_CommProcess.RelocBatchJobId = 0;
                    SKS_EB_CommProcess.RelocCompany = '';
                    SKS_EB_CommProcess.RelocFilePath = '';
                    SKS_EB_CommProcess.RelocLBFormatId = '';
                    SKS_EB_CommProcess.RestrictFormatComp = NoYes::No;
                    SKS_EB_CommProcess.RelocClass = '';
                }
                else if(SKS_EB_CommProcess.Module == SKS_EB_Module::IHBExternalVendor)
                {
                    SKS_EB_CommProcess.FileCreateType = SKS_EB_FileCreate::FixedTime;
                    SKS_EB_CommProcess.CreateSendCpny = '';
                    SKS_EB_CommProcess_PPCreateSendCpny.lookupbutton(FormLookupButton::Hidden);
                    SKS_EB_CommProcess.FileComplete = SKS_EB_FileComplete::AlwaysMarkIfNoError;
                    SKS_EB_CommProcess.CommType = SKS_PP_CommunicationsType::Browser;
                    SKS_EB_CommProcess.BatchJobId = 0;
                    SKS_EB_CommProcess.Direction = SKS_EB_Direction::Inbound;
                }
                else //AR & AP EFT & DirectDebit-mandate
                {
                    SKS_EB_CommProcess.FileCreateType = SKS_EB_FileCreate::Manual;
                    SKS_EB_CommProcess.FileComplete = SKS_EB_FileComplete::Prompt;
                    SKS_EB_CommProcess.CommType = SKS_PP_CommunicationsType::Browser;
                    SKS_EB_CommProcess.CreateSendCpny = '';
                    SKS_EB_CommProcess_PPCreateSendCpny.lookupbutton(FormLookupButton::Hidden);
                    SKS_EB_CommProcess.BatchJobId = 0;
                    SKS_EB_CommProcess.RelocBatchJobId = 0;
                    SKS_EB_CommProcess.RelocCompany = '';
                    SKS_EB_CommProcess.RelocFilePath = '';
                    SKS_EB_CommProcess.RelocEFTFormatId = '';
                    SKS_EB_CommProcess.RestrictFormatComp = NoYes::No;
                    SKS_EB_CommProcess.RelocClass = '';
                    if(SKS_EB_CommProcess.Module ==  SKS_EB_Module::APEFT) //AP PEFT
                    {
                        //<SKS-begin>
                        SKS_EB_CommProcess_ds.object(fieldNum(SKS_EB_CommProcess, direction)).allowEdit(true);
                        //</SKS-end>
                        SKS_EB_CommProcess_ds.object(fieldNum(SKS_EB_CommProcess, RelocLBFormatID)).visible(false);
                        SKS_EB_CommProcess_ds.object(fieldNum(SKS_EB_CommProcess, RelocEFTFormatID)).visible(true);
                        SKS_EB_CommProcess.Direction = SKS_EB_Direction::Outbound;

                        if(SKS_EB_CommProcess.Module == SKS_EB_Module::APEFT && SKS_EB_CommProcess.Direction == SKS_EB_Direction::Outbound)
                        {
                            SKS_EB_CommProcess.FileComplete = SKS_EB_FileComplete::BasedOnInboundSettings;
                            SKS_EB_CommProcess.AutoPost = NoYes::Yes;
                            SKS_EB_CommProcess.CommType = SKS_PP_CommunicationsType::None;                            
                        }
                    }
                    //<SKS-begin>
                    else if(SKS_EB_CommProcess.Module ==  SKS_EB_Module::AREFT)  //AR EFT
                    {
                        SKS_EB_CommProcess_ds.object(fieldNum(SKS_EB_CommProcess, direction)).allowEdit(true);
                        SKS_EB_CommProcess_ds.object(fieldNum(SKS_EB_CommProcess, RelocLBFormatID)).visible(true);
                        SKS_EB_CommProcess_ds.object(fieldNum(SKS_EB_CommProcess, RelocEFTFormatID)).visible(false);
                        SKS_EB_CommProcess.Direction = SKS_EB_Direction::Outbound;
                    }
                    //</SKS-end>
                    else if (SKS_EB_CommProcess.Module == SKS_EB_Module::InHouseBankInterestRate)
                    {
                        SKS_EB_CommProcess.Direction = SKS_EB_Direction::Inbound;
                        SKS_EB_CommProcess_ds.object(fieldNum(SKS_EB_CommProcess, direction)).allowEdit(false);
                    }
                    else if (SKS_EB_CommProcess.Module == SKS_EB_Module::ElectronicFundsFileRelocation)
                    {
                        SKS_EB_CommProcess.Direction = SKS_EB_Direction::InboundRelocation;
                        SKS_EB_CommProcess_ds.object(fieldNum(SKS_EB_CommProcess, direction)).allowEdit(false);
                        SKS_EB_CommProcess_ds.object(fieldNum(SKS_EB_CommProcess, RelocLBFormatID)).visible(false);
                        SKS_EB_CommProcess_ds.object(fieldNum(SKS_EB_CommProcess, RelocEFTFormatID)).visible(false);
                    }
                    else if(SKS_EB_CommProcess.Module ==  SKS_EB_Module::BankToBankTransfer)  
                    {
                        SKS_EB_CommProcess_ds.object(fieldNum(SKS_EB_CommProcess, direction)).allowEdit(true);
                        SKS_EB_CommProcess_ds.object(fieldNum(SKS_EB_CommProcess, RelocLBFormatID)).visible(false);
                        SKS_EB_CommProcess_ds.object(fieldNum(SKS_EB_CommProcess, RelocEFTFormatID)).visible(false);
                        SKS_EB_CommProcess.Direction = SKS_EB_Direction::Outbound;
                    }
                    else if(SKS_EB_CommProcess.Module ==  SKS_EB_Module::CustomerReimbursements)
                    {
                        SKS_EB_CommProcess_ds.object(fieldNum(SKS_EB_CommProcess, direction)).allowEdit(true);
                        SKS_EB_CommProcess_ds.object(fieldNum(SKS_EB_CommProcess, RelocLBFormatID)).visible(false);
                        SKS_EB_CommProcess_ds.object(fieldNum(SKS_EB_CommProcess, RelocEFTFormatID)).visible(false);
                        SKS_EB_CommProcess.Direction = SKS_EB_Direction::Outbound;
                    }
                    else //Direct Debit-mandate
                    {
                        SKS_EB_CommProcess.Direction = SKS_EB_Direction::Outbound;
                        SKS_EB_CommProcess.FileCreateType = SKS_EB_FileCreate::FixedTime;
                        SKS_EB_CommProcess.SCF_FileCreateType = SKS_SCF_FileCreate::FixedTime;
                        SKS_EB_CommProcess_ds.object(fieldNum(SKS_EB_CommProcess, RelocLBFormatID)).visible(true);
                      //  SKS_EB_CommProcess_ds.object(fieldNum(SKS_EB_CommProcess, RelocEFTFormatID)).visible(false);
                    }
                }

                element.checkIE();
                element.EnableDisable();
                element.enabledisabletabs();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>RelocBatchJobId</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                if(sks_eb_commprocess.RelocBatchJobId != 0)
                {
                    SKS_EB_CommProcess.BatchJobId = 0;
                }
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>RelocCompany</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                container locCompanies;
                SKS_EFT_FileFormat locSKS_EFT_FileFormat;
                SKS_LB_FileFormat locSKS_LB_FileFormat;

                super();
                if(SKS_EB_CommProcess.Module == SKS_EB_Module::Lockbox)
                {
                    if(SKS_EB_CommProcess.RelocCompany == '')
                    {
                        SKS_EB_CommProcess.RelocLBFormatId = '';
                        SKS_EB_CommProcess_ds.object(fieldnum(SKS_EB_CommProcess, reloclbFormatID)).allowedit(false);
                    }
                    else
                    {
                        if(strLen(SKS_EB_CommProcess.RelocLBFormatId) > 0)
                        {
                            locCompanies = [SKS_EB_CommProcess.RelocCompany];
                            select firstOnly crossCompany:locCompanies  RecId from locSKS_LB_FileFormat
                                    where locSKS_LB_FileFormat.FormatId == SKS_EB_CommProcess.RelocLBFormatId;
                        }
                        if(!locSKS_LB_FileFormat)
                        {
                            SKS_EB_CommProcess.RelocLBFormatId = '';
                        }

                        SKS_EB_CommProcess_ds.object(fieldnum(SKS_EB_CommProcess, reloclbFormatID)).allowedit(true);
                    }
                }
                else if(SKS_EB_CommProcess.Module == SKS_EB_Module::APEFT)
                {
                    //AP EFT File Relocation Validation
                    if(SKS_EB_CommProcess.RelocCompany == '')
                    {
                        SKS_EB_CommProcess.RelocLBFormatId = '';
                        SKS_EB_CommProcess_ds.object(fieldnum(SKS_EB_CommProcess, RelocEFTFormatId)).allowedit(false);
                    }
                    else
                    {
                        if(strLen(SKS_EB_CommProcess.RelocEFTFormatId) > 0)
                        {
                            locCompanies = [SKS_EB_CommProcess.RelocCompany];
                            select firstOnly crossCompany:locCompanies  RecId from locSKS_EFT_FileFormat
                                    where locSKS_EFT_FileFormat.FormatId == SKS_EB_CommProcess.RelocEFTFormatId;
                        }
                        if(!locSKS_EFT_FileFormat)
                        {
                            SKS_EB_CommProcess.RelocEFTFormatId = '';
                        }
                        SKS_EB_CommProcess_ds.object(fieldnum(SKS_EB_CommProcess, RelocEFTFormatId)).allowedit(true);
                    }
                }
                SKS_EB_CommProcess_ds.refresh();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>RelocFilePath</DataField>
						<Methods>
							<Method>
								<Name>validate</Name>
								<Source><![CDATA[
            public boolean validate()
            {
                boolean ret;

                if (!SKS_EB_CommProcess.RelocFilePath)
                {
                    return super();
                }

                SKS_EB_CommProcess locSKS_EB_CommProcess;

                SKS_EB_CommProcess.RelocFilePath = SKS_BR_File::removeLastPathSlash(SKS_EB_CommProcess.RelocFilePath);
                ret = super();
                if(!SKS_EB_FileHub::directoryExistsForm(SKS_EB_CommProcess.RelocFilePath))
                {
                    error(strFmt("@SYS55831",SKS_EB_CommProcess.RelocFilePath));
                    return false;
                }
                //Reminder: commprocesses are not company specific, so you don't need to look crosscompany.
                Select RelocFilePath,CommID, DataAreaId, RecId from locSKS_EB_CommProcess where locSKS_EB_CommProcess.RelocFilePath == SKS_EB_CommProcess.RelocFilePath;
                if(locSKS_EB_CommProcess)
                {
                    error(strFmt("@SKS4036", locSKS_EB_CommProcess.CommID));
                    return false;
                }
                return ret;
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>SCF_FileCreateType</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                if(SKS_EB_CommProcess.SCF_FileCreateType == SKS_SCF_FileCreate::Manual)
                {
                    SKS_EB_CommProcess.FileComplete = SKS_EB_FileComplete::Prompt;
                    SKS_EB_CommProcess.CommType = SKS_PP_CommunicationsType::None;
                }
                else
                {
                    SKS_EB_CommProcess.FileComplete = SKS_EB_FileComplete::AlwaysMarkIfNoError;
                    SKS_EB_CommProcess.CommType = SKS_PP_CommunicationsType::None;
                }

                element.checkIE();
                element.EnableDisable();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
				</Fields>
			</DataSource>
			<DataSource>
				<Name>SKS_EB_CommBRPreReadScriptParams</Name>
				<Methods>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        public int active()
        {
            int ret;

            ret = super();

            element.enableParametersGridBRPreReadScriptFieldValue();

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>create</Name>
						<Source><![CDATA[
        public void create(boolean _append = false)
        {
            SKS_EB_CommParams  locSKS_EB_CommParams;
            int nextOrderNumber;
            ;

            if( (SKS_EB_CommProcess.Module == SKS_EB_Module::eBankRec ||SKS_EB_CommProcess.Module == SKS_EB_Module::CreditCardReconciliation) && SKS_EB_CommProcess.CommID != '' && SKS_EB_CommProcess.BRPreImportScriptPath != '')
            {
                super(_append);
                SELECT MAXOF(ParamOrder) FROM locSKS_EB_CommParams
                                    where locSKS_EB_CommParams.CommID == SKS_EB_CommProcess.CommID
                                    && locSKS_EB_CommParams.ParamGroup == SKS_EB_ParamGroup::BRInboundPreParam;

                nextOrderNumber = locSKS_EB_CommParams.ParamOrder + 1;
                SKS_EB_CommBRPreReadScriptParams.ParamOrder = nextOrderNumber;
                SKS_EB_CommBRPreReadScriptParams.CommID = SKS_EB_CommProcess.CommID;
                SKS_EB_CommBRPreReadScriptParams.ParamType = SKS_EB_ParamType::FixedValue;
                SKS_EB_CommBRPreReadScriptParams.ParamGroup = SKS_EB_ParamGroup::BRInboundPreParam;

            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        /// <summary>
        ///
        /// </summary>
        public void executeQuery()
        {
            this.queryBuildDataSource().addRange(fieldNum(SKS_EB_CommParams, ParamGroup)).value(queryValue(SKS_EB_ParamGroup::BRInboundPreParam));
            super();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields>
					<Field>
						<DataField>ParamType</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                element.enableParametersGridBRPreReadScriptFieldValue();

            }

]]></Source>
							</Method>
							<Method>
								<Name>validate</Name>
								<Source><![CDATA[
            /// <summary>
            /// Validate that the choice selected for the Type is a valid possibility for Bank Rec.
            /// </summary>
            /// <returns>true/false based on if the choice for the Type parameter is valid.</returns>
            public boolean validate()
            {
                boolean ret;

                ret = super();
                if(ret &&
                    (SKS_EB_CommBRPreReadScriptParams.ParamType == SKS_EB_ParamType::ControlFileName
                        || SKS_EB_CommBRPreReadScriptParams.ParamType == SKS_EB_ParamType::ControlFileNamePath))
                {
                    error(strFmt("@SKS:SKGBRPrePostParamTypeError", enum2Str(SKS_EB_CommBRPreReadScriptParams.ParamType)));
                    ret = false;
                }

                return ret;
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
				</Fields>
			</DataSource>
			<DataSource>
				<Name>SKS_EB_CommBRPostReadScriptParams</Name>
				<Methods>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        public int active()
        {
            int ret;

            ret = super();

            element.enableParametersGridBRPostReadScriptFieldValue();

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>create</Name>
						<Source><![CDATA[
        public void create(boolean _append = false)
        {
            SKS_EB_CommParams  locSKS_EB_CommParams;
            int nextOrderNumber;
            ;

            if( (SKS_EB_CommProcess.Module == SKS_EB_Module::eBankRec || SKS_EB_CommProcess.Module == SKS_EB_Module::CreditCardReconciliation) && SKS_EB_CommProcess.CommID != '' && SKS_EB_CommProcess.BRPostImportScriptPath != '')


            {
                super(_append);
                SELECT MAXOF(ParamOrder) FROM locSKS_EB_CommParams
                                    where locSKS_EB_CommParams.CommID == SKS_EB_CommProcess.commid
                                        && locSKS_EB_CommParams.ParamGroup == SKS_EB_ParamGroup::BRInboundPostParam;

                nextOrderNumber = locSKS_EB_CommParams.ParamOrder + 1;
                SKS_EB_CommBRPostReadScriptParams.ParamOrder = nextOrderNumber;
                SKS_EB_CommBRPostReadScriptParams.CommID = SKS_EB_CommProcess.CommID;
                SKS_EB_CommBRPostReadScriptParams.ParamType = SKS_EB_ParamType::FixedValue;
                SKS_EB_CommBRPostReadScriptParams.ParamGroup = SKS_EB_ParamGroup::BRInboundPostParam;
            }

        }

]]></Source>
					</Method>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        /// <summary>
        ///
        /// </summary>
        public void executeQuery()
        {
            this.queryBuildDataSource().addRange(fieldNum(SKS_EB_CommParams, ParamGroup)).value(queryValue(SKS_EB_ParamGroup::BRInboundPostParam));
            super();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields>
					<Field>
						<DataField>ParamType</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                element.enableParametersGridBRPostReadScriptFieldValue();

            }

]]></Source>
							</Method>
							<Method>
								<Name>validate</Name>
								<Source><![CDATA[
            /// <summary>
            /// Validate that the choice selected for the Type is a valid possibility for Bank Rec.
            /// </summary>
            /// <returns>true/false based on if the choice for the Type parameter is valid.</returns>
            public boolean validate()
            {
                boolean ret;

                ret = super();
                if(ret &&
                    (SKS_EB_CommBRPostReadScriptParams.ParamType == SKS_EB_ParamType::ControlFileName
                        || SKS_EB_CommBRPostReadScriptParams.ParamType == SKS_EB_ParamType::ControlFileNamePath))
                {
                    error(strFmt("@SKS:SKGBRPrePostParamTypeError", enum2Str(SKS_EB_CommBRPostReadScriptParams.ParamType)));
                    ret = false;
                }

                return ret;
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
				</Fields>
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>SKS_PP_ViewBatchOUTBOUND</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// This method is opens Batch Job form and shows only selected Batch record.
        /// </summary>
        public void clicked()
        {
            Batch::jumpRef(SKS_EB_Commprocess.BatchJobId);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SKS_PP_CreateBatchOUTBOUND</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            SKS_EB_Commprocess.BatchJobId = SKS_EB_Batch::createBatch(SKS_EB_CommProcess, element);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ReferenceGroup</Name>
				<Type>ReferenceGroup</Type>
				<Methods>
					<Method>
						<Name>lookupReference</Name>
						<Source><![CDATA[
        public Common lookupReference()
        {
            Batch   BatchJobID;
            Query                   query = new Query();
            QueryBuildDataSource    queryBuildDataSource;
            QueryBuildRange         queryBuildRange;

            // Create an instance of SysTableLookup where 'this' is the current form control
            SysReferenceTableLookup sysTableLookup = SysReferenceTableLookup::newParameters(tableNum(Batch), ReferenceGroup, true);
            ;
            query.allowCrossCompany(true);

            // Add fields to be shown in the lookup form
            sysTableLookup.addLookupField(fieldNum(Batch, Caption));

            // Limit and arrange the data selection
            queryBuildDataSource = query.addDataSource(tableNum(Batch));
            queryBuildRange = queryBuildDataSource.addRange(fieldNum(Batch, classnumber));
            if(SKS_EB_CommProcess.Module == SKS_EB_Module::PP)
            {
                queryBuildRange.value(int2str(classNum(SKS_PP_AutoCreate)));
            }
            else if(SKS_EB_CommProcess.Module == SKS_EB_Module::APMAL)
            {
                queryBuildRange.value(int2str(classNum(SKS_EFT_MAL_AutoCreate)));
            }
            else if(SKS_EB_CommProcess.Module == SKS_EB_Module::MandateAutomation)
            {
                queryBuildRange.value(con2str(SKS_DD_MandatesBatchOutbound::getOutboundClassQueryVal()));
            }
            else if(SKS_EB_CommProcess.Module == SKS_EB_Module::SupplyChainFinance)   //FDD-14323- Supply chain finance
            {
                queryBuildRange.value(int2str(classNum(SKS_SCF_OutboundFiles)));
            }

            sysTableLookup.parmQuery(query);

            // Perform the lookup
            BatchJobID = sysTableLookup.performFormLookup();

            return BatchJobID;
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();

            if(SKS_EB_CommProcess.BatchJobId != 0)
            {
                SKS_PP_ViewBatchOUTBOUND.enabled(true);
            }
            else
            {
                SKS_PP_ViewBatchOUTBOUND.enabled(false);
            }
            SKS_EB_CommProcess_ds.research(true);
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SKS_EB_CommProcess_PPCreateSendCpny</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            Query                   query = new Query();
            QueryBuildDataSource    queryBuildDataSource;
            QueryBuildRange         queryBuildRange;

            // Create an instance of SysTableLookup where 'this' is the current form control
            SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(SKS_PP_Setup), this);
            ;
            query.allowCrossCompany(true);

            // Add fields to be shown in the lookup form
            sysTableLookup.addLookupField(fieldNum(SKS_PP_Setup, DataAreaId));

            // Limit and arrange the data selection
            queryBuildDataSource = query.addDataSource(tableNum(SKS_PP_Setup));
            queryBuildRange = queryBuildDataSource.addRange(fieldNum(SKS_PP_Setup, ModPosPay));
            queryBuildRange.value('1');
            sysTableLookup.parmQuery(query);

            // Perform the lookup
            sysTableLookup.performFormLookup();

            // Don't call super() (commented out in the code)
            //   super()
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SKS_PP_ViewBatchINBOUND</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// This method is opens Batch Job form and shows only selected Batch record.
        /// </summary>
        public void clicked()
        {
            Batch::jumpRef(SKS_EB_Commprocess.BatchJobId);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SKS_PP_CreateBatchINBOUND</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            SKS_EB_Commprocess.BatchJobId = SKS_EB_Batch::createBatch(SKS_EB_CommProcess, element);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>InboundBatchJobReferenceGroup</Name>
				<Type>ReferenceGroup</Type>
				<Methods>
					<Method>
						<Name>lookupReference</Name>
						<Source><![CDATA[
        public Common lookupReference()
        {
            Batch   BatchJobID;
            Query                   query = new Query();
            QueryBuildDataSource    queryBuildDataSource;
            QueryBuildRange         queryBuildRange;

            // Create an instance of SysTableLookup where 'this' is the current form control
            SysReferenceTableLookup sysTableLookup = SysReferenceTableLookup::newParameters(tableNum(Batch), InboundBatchJobReferenceGroup, true);
            ;
            query.allowCrossCompany(true);

            // Add fields to be shown in the lookup form
            sysTableLookup.addLookupField(fieldNum(Batch, Caption));

            // Limit and arrange the data selection
            queryBuildDataSource = query.addDataSource(tableNum(Batch));
            queryBuildRange = queryBuildDataSource.addRange(fieldNum(Batch, classnumber));

            if(SKS_EB_CommProcess.Module == SKS_EB_Module::Lockbox)
            {
                queryBuildRange.value(int2str(classNum(SKS_LB_AutoCreate)));
            }
            else if(SKS_EB_CommProcess.Module == SKS_EB_Module::APEFT)
            {
                if (SKS_EB_CommProcess.APIFormatType == SKS_EFT_APIFormatType::API)
                {
                    queryBuildRange.value(con2str(SKS_EFT_APIBatchInbound::getInboundClassQueryVal()));
                }
                else
                {
                    queryBuildRange.value(int2str(classNum(SKS_EFT_InboundFiles)));
                }
            }
            else if(SKS_EB_CommProcess.Module == SKS_EB_Module::AREFT)
            {
                queryBuildRange.value(int2str(classNum(SKS_DD_InboundFiles)));
            }
            else if(SKS_EB_CommProcess.Module == SKS_EB_Module::eBankRec)
            {
                if(SKS_EB_CommProcess.APIFormatType == enum2int(SKS_EB_APIFormatType::File))
                {
                    queryBuildRange.value(int2str(classNum(SKS_BR_InboundStatements)));
                }
                else
                {
                    queryBuildRange.value(int2str(classNum(SKS_BR_InboundStatementsAPI)));
                }
            }
            else if(SKS_EB_CommProcess.Module == SKS_EB_Module::CreditCardReconciliation)
            {
                queryBuildRange.value(int2str(classNum(SKS_CCR_Batch)));
            }
            else if(SKS_EB_CommProcess.Module == SKS_EB_Module::FXAll)
            {
                queryBuildRange.value(int2str(classNum(SKS_FXA_Inbound)));
            }
            else if(SKS_EB_CommProcess.Module == SKS_EB_Module::InHouseBankInterestRate)
            {
                queryBuildRange.value(int2str(classNum(SKS_IHB_ImportInterestRates)));
            }
            else if(SKS_EB_CommProcess.Module == SKS_EB_Module::MandateAutomation)
            {
                queryBuildRange.value(con2str(SKS_DD_MandatesBatchInbound::getInboundClassQueryVal()));
            }
            else if(SKS_EB_CommProcess.Module == SKS_EB_Module::SupplyChainFinance)  //FDD-14323- Supply chain finance
            {
                queryBuildRange.value(int2str(classNum(SKS_SCF_InboundFiles)));
            }
            else if(SKS_EB_CommProcess.Module == SKS_EB_Module::BankToBankTransfer)  //FDD-14181- Bank to bank transfer
            {
                queryBuildRange.value(int2str(classNum(SKS_BTB_InboundFiles)));
            }
            else if(SKS_EB_CommProcess.Module == SKS_EB_Module::CustomerReimbursements)  //FDD - Customer Reimbursements
            {
                queryBuildRange.value(int2str(classNum(SKS_CNP_InboundFiles)));
            }
            else if(SKS_EB_CommProcess.Module == SKS_EB_Module::IHBExternalVendor)  //FDD - IHB External Vendor
            {
                queryBuildRange.value(int2str(classNum(SKS_IHB_VendNettingInboundFiles)));
            }
            else if(SKS_EB_CommProcess.Module == SKS_EB_Module::PCard)  
            {
                queryBuildRange.value(int2str(classNum(SKS_PCard_Inbound)));
            }

            sysTableLookup.parmQuery(query);

            // Perform the lookup
            BatchJobID = sysTableLookup.performFormLookup();

            return BatchJobID;

        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();
            if(ret)
            {
                if(SKS_EB_CommProcess.BatchJobId != 0)
                {
                    SKS_PP_ViewBatchOUTBOUND.enabled(true);
                }
                else
                {
                    SKS_PP_ViewBatchOUTBOUND.enabled(false);
                }
            }

            //SKS_EB_CommProcess_ds.research(true);

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SKS_PP_ViewBatchINBOUNDRelocation</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// This method is opens Batch Job form and shows only selected Batch record.
        /// </summary>
        public void clicked()
        {
            Batch::jumpRef(SKS_EB_Commprocess.RelocBatchJobId);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SKS_PP_CreateBatchINBOUNDRelocation</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            SKS_EB_Commprocess.RelocBatchJobId = SKS_EB_Batch::createBatch(SKS_EB_CommProcess, element);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>InboundRelocate</Name>
				<Type>ReferenceGroup</Type>
				<Methods>
					<Method>
						<Name>lookupReference</Name>
						<Source><![CDATA[
        public Common lookupReference()
        {
            Common                  ret;
            Query                   query = new Query();
            QueryBuildDataSource    queryBuildDataSource;
            QueryBuildRange         queryBuildRange;
            // Create an instance of SysTableLookup where 'this' is the current form control
            SysReferenceTableLookup sysTableLookup = SysReferenceTableLookup::newParameters(tableNum(Batch), InboundRelocate, true);
            ;
            query.allowCrossCompany(true);

            // Add fields to be shown in the lookup form
            sysTableLookup.addLookupField(fieldNum(Batch, Caption));

            // Limit and arrange the data selection
            queryBuildDataSource = query.addDataSource(tableNum(Batch));
            queryBuildRange = queryBuildDataSource.addRange(fieldNum(Batch, classnumber));
            if(SKS_EB_CommProcess.Module == SKS_EB_Module::CreditCardReconciliation)
            {
                queryBuildRange.value(int2str(classNum(SKS_CCR_RelocationBatch)));
            }
            else
            {
                queryBuildRange.value(int2str(classNum(SKS_EB_RelocationBatch)));
            }
            sysTableLookup.parmQuery(query);

            // Perform the lookup
            ret = sysTableLookup.performFormLookup();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SKS_EB_CommProcess_RelocBankFabricLocation</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            Query query = new Query();
            QueryBuildDataSource qbds;
            QueryBuildRange queryBuildRange;
            SysTableLookup sysTableLookup;

            sysTableLookup = SysTableLookup::newParameters(tablenum(SKS_BF_TmpLookupTable),this);
            sysTableLookup.addLookupfield(fieldnum(SKS_BF_TmpLookupTable, Name));
            sysTableLookup.addLookupfield(fieldnum(SKS_BF_TmpLookupTable,Description));
            qbds = query.addDataSource(tableNum(SKS_BF_TmpLookupTable));
            queryBuildRange = qbds.addRange(fieldnum(SKS_BF_TmpLookupTable, Name));
            sysTableLookup.parmTmpBuffer(SKS_BF_TmpLookupTable::construct(element.getBankFabricModuleCrossreference(), SKS_BF_LookupTable::FileLocations, element.getSKG_BF_Direction()));
            sysTableLookup.performFormLookup();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SKS_EB_CommProcess_RelocEFTFormatId</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            Query                   query = new Query();
            QueryBuildDataSource    queryBuildDataSource;
            QueryBuildRange         queryBuildRange;

            // Create an instance of SysTableLookup where 'this' is the current form control
            sysTableLookup sysTableLookup = sysTableLookup::newParameters(tableNum(SKS_EFT_FileFormat), SKS_EB_CommProcess_RelocEFTFormatId, true);
            ;
            if(!SKS_EB_Commprocess.RelocCompany)
            {
                error("@SKS:SKGCompanyFieldMustBeSet");
                SKS_EB_CommProcess_RelocCompany.setFocus();
                return;

            }
            changeCompany(SKS_EB_Commprocess.RelocCompany)
            {
                // Add fields to be shown in the lookup form
                sysTableLookup.addLookupField(fieldNum(SKS_EFT_FileFormat, FormatID));

                // Limit and arrange the data selection
                queryBuildDataSource = query.addDataSource(tableNum(SKS_EFT_FileFormat));
                queryBuildRange = queryBuildDataSource.addRange(fieldNum(SKS_EFT_FileFormat, DataAreaId));
                queryBuildRange.value(SKS_EB_CommProcess.relocCompany);
                
                if(SKS_EB_CommProcess.Module == SKS_EB_Module::AREFT)
                {
                    // Direct debit
                    queryBuildDataSource.addRange(fieldNum(SKS_EFT_FileFormat,SKS_DD_InboundFileGroupId)).value(sysquery::valueNotEmptyString());
                    queryBuildDataSource.addRange(fieldNum(SKS_EFT_FileFormat,UseWithCustomers)).value(queryValue(NoYes::Yes));
                }
                else
                {
                    //AP EFT+
                    queryBuildDataSource.addRange(fieldNum(SKS_EFT_FileFormat,InboundFileGroupId)).value(sysquery::valueNotEmptyString());
                    queryBuildDataSource.addRange(fieldNum(SKS_EFT_FileFormat,UseWithVendors)).value(queryValue(NoYes::Yes));
                }

                sysTableLookup.parmQuery(query);

                // Perform the lookup
                sysTableLookup.performFormLookup();
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SKS_EB_CommProcess_RelocLBFormatId</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            Query                   query = new Query();
            QueryBuildDataSource    queryBuildDataSource;
            QueryBuildRange         queryBuildRange;

            // Create an instance of SysTableLookup where 'this' is the current form control
            sysTableLookup sysTableLookup = sysTableLookup::newParameters(tableNum(SKS_LB_FileFormat), SKS_EB_CommProcess_RelocLBFormatId, true);
            ;

            changeCompany(SKS_EB_Commprocess.RelocCompany)
            {
                // Add fields to be shown in the lookup form
                sysTableLookup.addLookupField(fieldNum(SKS_LB_FileFormat, FormatID));

                // Limit and arrange the data selection
                queryBuildDataSource = query.addDataSource(tableNum(SKS_LB_FileFormat));
                queryBuildRange = queryBuildDataSource.addRange(fieldNum(SKS_LB_FileFormat, DataAreaId));
                queryBuildRange.value(SKS_EB_CommProcess.relocCompany);

                sysTableLookup.parmQuery(query);

                // Perform the lookup
                sysTableLookup.performFormLookup();
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SKS_EB_CommProcess_RelocInboundFileGroupId</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            Query                   query = new Query();
            QueryBuildDataSource    queryBuildDataSource;
            QueryBuildRange         queryBuildRange;
    
            // Create an instance of SysTableLookup where 'this' is the current form control
            sysTableLookup sysTableLookup = sysTableLookup::newParameters(tableNum(SKS_EFT_InboundFileGroups), SKS_EB_CommProcess_RelocInboundFileGroupId, true);
            ;
            if(!SKS_EB_Commprocess.RelocCompany)
            {
                error("@SKS:SKGCompanyFieldMustBeSetInboundGroupId");
                SKS_EB_CommProcess_RelocCompany.setFocus();
                return;
    
            }
            changeCompany(SKS_EB_Commprocess.RelocCompany)
            {
                // Add fields to be shown in the lookup form
                sysTableLookup.addLookupField(fieldNum(SKS_EFT_InboundFileGroups, InboundFileGroupId));
    
                // Limit and arrange the data selection
                queryBuildDataSource = query.addDataSource(tableNum(SKS_EFT_InboundFileGroups));
                queryBuildRange = queryBuildDataSource.addRange(fieldNum(SKS_EFT_InboundFileGroups, DataAreaId));
                queryBuildRange.value(SKS_EB_CommProcess.relocCompany);
                
                sysTableLookup.parmQuery(query);
    
                // Perform the lookup
                sysTableLookup.performFormLookup();
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SKS_EB_CommProcess_RelocClass</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        [SuppressBPWarning('BPUpgradeCodeLateBoundCall', 'A late bound call is necessary to show a lookup based on relocation class names')]
        public void lookup()
        {
            DictClass locDictClass;
            SKS_EB_BaseLBFileRelocate locSKS_EB_BaseLBFileRelocation;
            SKS_EFT_BaseFileRelocate locSKS_EFT_BaseFileRelocate;
            SKS_BR_BaseFileRelocate locSKS_BR_BaseFileRelocate;
            SKS_CCR_FileRelocate_Base locSKS_CCR_FileRelocate_Base;
            SKS_MA_BaseFileRelocate locSKS_MA_BaseFileRelocate;
            SKS_SCF_FileRelocate_Base locSKS_SCF_FileRelocate_Base; //FDD-14323- Supply chain finance
            SKS_IHB_VendNettingFileRelocate_Base locSKS_IHB_VendNettingFileRelocate_Base; //FDD-18672- IHB External Vendor

            List locChildClassIDs = new List(Types::String);
            System.String[] locStringArray;
            container locClassesList;


            str locTempStr;
            int locArrayMax;
            int locArrayIndex = 0;
            Enumerator locEnumerator;

            ;

            if(SKS_EB_CommProcess.Module == SKS_EB_Module::Lockbox)
            {
                locSKS_EB_BaseLBFileRelocation = new SKS_EB_BaseLBFileRelocate();
                locDictClass = new DictClass(classIdGet(locSKS_EB_BaseLBFileRelocation));
            }
            else if(SKS_EB_CommProcess.Module == SKS_EB_Module::APEFT
                    || SKS_EB_CommProcess.Module == SKS_EB_Module::AREFT)
            {
                locSKS_EFT_BaseFileRelocate = new SKS_EFT_BaseFileRelocate();
                locDictClass = new DictClass(classIdGet(locSKS_EFT_BaseFileRelocate));
            }
            else if(SKS_EB_CommProcess.Module == SKS_EB_Module::eBankRec)
            {
                locSKS_BR_BaseFileRelocate = new SKS_BR_BaseFileRelocate();
                locDictClass = new DictClass(classIdGet(locSKS_BR_BaseFileRelocate));
            }
            else if(SKS_EB_CommProcess.Module == SKS_EB_Module::CreditCardReconciliation)
            {
                locSKS_CCR_FileRelocate_Base = new SKS_CCR_FileRelocate_Base();
                locDictClass = new DictClass(classIdGet(locSKS_CCR_FileRelocate_Base));
            }
            else if(SKS_EB_CommProcess.Module == SKS_EB_Module::MandateAutomation)
                //</SKS-end>
            {
                locSKS_MA_BaseFileRelocate = new SKS_MA_BaseFileRelocate();
                locDictClass = new DictClass(classIdGet(locSKS_MA_BaseFileRelocate));
            }
            else if(SKS_EB_CommProcess.Module == SKS_EB_Module::SupplyChainFinance)  //FDD-14323- Supply chain finance
            {
                locSKS_SCF_FileRelocate_Base = new SKS_SCF_FileRelocate_Base();
                locDictClass = new DictClass(classIdGet(locSKS_SCF_FileRelocate_Base));
            }
            else if(SKS_EB_CommProcess.Module == SKS_EB_Module::ElectronicFundsFileRelocation) //FDD-14181- Bank to bank transfer
            {
                locSKS_EFT_BaseFileRelocate = new SKS_EFT_BaseFileRelocate();
                locDictClass = new DictClass(classIdGet(locSKS_EFT_BaseFileRelocate));
            }
            else if(SKS_EB_CommProcess.Module == SKS_EB_Module::IHBExternalVendor) //FDD-18672- IHB External Vendor
            {
                locSKS_IHB_VendNettingFileRelocate_Base = new SKS_IHB_VendNettingFileRelocate_Base();
                locDictClass = new DictClass(classIdGet(locSKS_IHB_VendNettingFileRelocate_Base));
            }


            locChildClassIDs = locDictClass.extendedBy(true);
            locEnumerator = locChildClassIDs.getEnumerator();

            while(locEnumerator.moveNext())
            {
                locArrayIndex++;
            }
            locStringArray = new System.String[locArrayIndex]();
            locEnumerator.reset();
            locArrayIndex = 0;
            while(locEnumerator.moveNext())
            {
                locArrayIndex++;
                locStringArray.SetValue(classId2Name(locEnumerator.current()), locArrayIndex - 1);
            }
            System.Array::Sort(locStringArray);

            locArrayMax = locStringArray.get_Count();

            locArrayIndex = 0;
            while(locArrayIndex < locArrayMax)
            {
                locTempStr = locStringArray.GetValue(locArrayIndex);
                locClassesList += locTempStr;
                locArrayIndex++;
            }
            if (locArrayIndex == 0)
            {
                warning("@SKS3475");
            }
            // if there is only one class then set it directly
            else if (locArrayIndex == 1 && locTempStr)
            {
                SKS_EB_CommProcess.RelocClass = locTempStr;
                SKS_EB_CommProcess_ds.refresh();
            }
            // if there are multiple classes then show the lookup for user 
            else
            {
                #ResAppl
                FormRun formRun = classFactory.createSysLookupPicklist();
                formRun.init();
                formRun.choices(locClassesList, #ImageTable);
                formRun.caption("@SYS60851");
                this.performFormLookup(formRun);
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>LaunchButton</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            super();

            if (SKS_EB_CommProcess.CommUserProg)
            {
                Browser br = new Browser();
                br.navigate(SKS_EB_CommProcess.CommUserProg);
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SKS_EB_CommProcess_BankFabricCommunicationsName</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        /// <summary>
        ///
        /// </summary>
        public void lookup()
        {
            Query query = new Query();
            QueryBuildDataSource qbds;
            QueryBuildRange queryBuildRange;
            SysTableLookup sysTableLookup;

            sysTableLookup = SysTableLookup::newParameters(tablenum(SKS_BF_TmpLookupTable),this);
            sysTableLookup.addLookupfield(fieldnum(SKS_BF_TmpLookupTable, Name));
            sysTableLookup.addLookupfield(fieldnum(SKS_BF_TmpLookupTable,Description));
            qbds = query.addDataSource(tableNum(SKS_BF_TmpLookupTable));
            queryBuildRange = qbds.addRange(fieldnum(SKS_BF_TmpLookupTable, Name));
            sysTableLookup.parmTmpBuffer(SKS_BF_TmpLookupTable::construct(element.getBankFabricModuleCrossreference(), SKS_BF_LookupTable::Communications, element.getSKG_BF_Direction()));
            sysTableLookup.performFormLookup();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>SKS_EB_CommParams</Name>
			<Table>SKS_EB_CommParams</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>CommID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ParamGroup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ParamOrder</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ParamType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RelocParamType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Value</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>SKS_EB_CommProcess</JoinSource>
			<LinkType>Active</LinkType>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>SKS_EB_CommProcess</Name>
			<Table>SKS_EB_CommProcess</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>APIFormatType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AutoPost</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankFabricCommunicationName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BatchJobId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BRPostImportScriptPath</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BRPreImportScriptPath</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CommID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CommTimeout</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CommType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CommUserProg</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreateSendCpny</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Description</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Direction</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FileComplete</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FileCompletionTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FileCreateType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FileType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Module</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RelocBankFabricLocation</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RelocBatchJobId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RelocClass</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RelocCompany</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RelocEFTFormatId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RelocFilePath</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RelocInboundFileGroupId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RelocLBFormatId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RestrictFormatComp</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SCF_FileCreateType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ServerSideComm</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SKS_DD_AutoPost</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SKS_DD_FileComplete</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SKS_DD_FileCompletionTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<DelayActive>No</DelayActive>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>SKS_EB_CommBRPreReadScriptParams</Name>
			<Table>SKS_EB_CommParams</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>CommID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ParamGroup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ParamOrder</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ParamType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RelocParamType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Value</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>SKS_EB_CommProcess</JoinSource>
			<LinkType>Active</LinkType>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>SKS_EB_CommBRPostReadScriptParams</Name>
			<Table>SKS_EB_CommParams</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>CommID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ParamGroup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ParamOrder</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ParamType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RelocParamType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Value</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>SKS_EB_CommProcess</JoinSource>
			<LinkType>Active</LinkType>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>SKS_EB_FileStorage</Name>
			<Table>SKS_EB_FileStorage</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>BankFabricClientID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankFabricDNSName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankFabricPin</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankfabricPinExchDatetime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankFabricResponseReason</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankFabricResponseStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankFabricScope</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankFabricSecret</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankFabricSecretName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankFabricSubscription</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankFabricTenant</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankFabricURL</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankIntegDefaultForNewModules</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FileHubLocation</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FileHubToken</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FileStorageType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SKS_EB_BankIntegOpt</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>StorageOption_APEFTFXDD</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>StorageOption_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>StorageOption_CCR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>StorageOption_IHB</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>StorageOption_LB</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>StorageOption_MandateAutomation</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>StorageOption_PP</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Trace</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@SKS194</Caption>
		<DataSource xmlns="">SKS_EB_CommProcess</DataSource>
		<Pattern xmlns="">SimpleListDetails-Grid</Pattern>
		<PatternVersion xmlns="">1.4</PatternVersion>
		<SetCompany xmlns="">No</SetCompany>
		<Style xmlns="">SimpleListDetails</Style>
		<Width xmlns="">1200</Width>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>ActionPane</Name>
				<ElementPosition>429496729</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<HeightMode>Auto</HeightMode>
				<Type>ActionPane</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>ButtonGroup</Name>
						<Type>ButtonGroup</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls />
					</AxFormControl>
				</Controls>
				<AlignChild>No</AlignChild>
				<AlignChildren>No</AlignChildren>
				<ArrangeMethod>Vertical</ArrangeMethod>
				<DataSource>SKS_EB_CommProcess</DataSource>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>GridContainer</Name>
				<AutoDeclaration>Yes</AutoDeclaration>
				<ElementPosition>858993458</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<HeightMode>SizeToAvailable</HeightMode>
				<Type>Group</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<Width>300</Width>
				<WidthMode>Manual</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl>
						<Name>QuickFilterControl</Name>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension>
							<Name>QuickFilterControl</Name>
							<ExtensionComponents />
							<ExtensionProperties>
								<AxFormControlExtensionProperty>
									<Name>targetControlName</Name>
									<Type>String</Type>
									<Value>Grid</Value>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>defaultColumnName</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>placeholderText</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
							</ExtensionProperties>
						</FormControlExtension>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGridControl">
						<Name>Grid</Name>
						<AllowEdit>No</AllowEdit>
						<ElementPosition>1431655764</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Grid</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>SKS_EB_CommProcess_CommID</Name>
								<ElementPosition>330382098</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataField>CommID</DataField>
								<DataSource>SKS_EB_CommProcess</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>SKS_EB_CommProcess_Description</Name>
								<ElementPosition>784657482</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataField>Description</DataField>
								<DataSource>SKS_EB_CommProcess</DataSource>
								<DisplayLength>15</DisplayLength>
								<DisplayLengthMode>Fixed</DisplayLengthMode>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormComboBoxControl">
								<Name>SKS_EB_CommProcess_Module</Name>
								<ElementPosition>1053092937</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>ComboBox</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataField>Module</DataField>
								<DataSource>SKS_EB_CommProcess</DataSource>
								<Items />
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormComboBoxControl">
								<Name>SKS_EB_CommProcess_Direction</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1321528392</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>ComboBox</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataField>Direction</DataField>
								<DataSource>SKS_EB_CommProcess</DataSource>
								<Items />
							</AxFormControl>
						</Controls>
						<AlternateRowShading>No</AlternateRowShading>
						<DataSource>SKS_EB_CommProcess</DataSource>
						<GridLinesStyle>Vertical</GridLinesStyle>
						<MultiSelect>No</MultiSelect>
						<ShowRowLabels>No</ShowRowLabels>
						<Style>Tabular</Style>
					</AxFormControl>
				</Controls>
				<RightMargin>0</RightMargin>
				<RightMarginMode>Fixed</RightMarginMode>
				<FrameType>None</FrameType>
				<Style>SidePanel</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>VSplitter</Name>
				<AutoDeclaration>Yes</AutoDeclaration>
				<ElementPosition>1288490187</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<HeightMode>Auto</HeightMode>
				<Type>Group</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>Auto</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls />
				<Style>SplitterVerticalContainer</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>DetailsHeader</Name>
				<ElementPosition>1073741822</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Pattern>FieldsFieldGroups</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>SKS_EB_CommProcess_EBCommID</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>715827882</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<DataField>CommID</DataField>
						<DataSource>SKS_EB_CommProcess</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>SKS_EB_CommProcess_EBDescription</Name>
						<ElementPosition>1073741823</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<DataField>Description</DataField>
						<DataSource>SKS_EB_CommProcess</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormComboBoxControl">
						<Name>SKS_EB_CommProcess_EBModule</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1252698793</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>ComboBox</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<DataField>Module</DataField>
						<DataSource>SKS_EB_CommProcess</DataSource>
						<DisplayLength>20</DisplayLength>
						<DisplayLengthMode>Fixed</DisplayLengthMode>
						<Items />
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormComboBoxControl">
						<Name>SKS_EB_CommProcess_EBDirection</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1431655764</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>ComboBox</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<DataField>Direction</DataField>
						<DataSource>SKS_EB_CommProcess</DataSource>
						<Items />
					</AxFormControl>
				</Controls>
				<ColumnsMode>Fill</ColumnsMode>
				<FrameType>None</FrameType>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormTabControl">
				<Name>DetailsTab</Name>
				<AlignControl>No</AlignControl>
				<ElementPosition>1610612733</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Type>Tab</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>OutboundCommTabPage</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1073741822</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Pattern>ToolbarFields</Pattern>
						<PatternVersion>1.1</PatternVersion>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormActionPaneControl">
								<Name>OutboundCommActionPane</Name>
								<Type>ActionPane</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormButtonGroupControl">
										<Name>OutboundCommButtonGroup</Name>
										<Type>ButtonGroup</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormMenuFunctionButtonControl">
												<Name>SKS_PP_ViewBatchOUTBOUND</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1288490187</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>MenuFunctionButton</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<MenuItemName>BatchJob</MenuItemName>
												<Text>@SKS2461</Text>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormButtonControl">
												<Name>SKS_PP_CreateBatchOUTBOUND</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1717986916</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<HelpText>@SKS2467</HelpText>
												<NeededPermission>Delete</NeededPermission>
												<Type>Button</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<SaveRecord>No</SaveRecord>
												<Text>@SKS2462</Text>
											</AxFormControl>
										</Controls>
									</AxFormControl>
								</Controls>
								<Style>Strip</Style>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>ContentGroup</Name>
								<Pattern>FieldsFieldGroups</Pattern>
								<PatternVersion>1.1</PatternVersion>
								<Type>Group</Type>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>LeftGroup</Name>
										<Type>Group</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormComboBoxControl">
												<Name>SKS_EB_CommProcess_PPFileCreateType</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1431655764</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>ComboBox</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<DataField>FileCreateType</DataField>
												<DataSource>SKS_EB_CommProcess</DataSource>
												<Items />
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormComboBoxControl">
												<Name>SKS_EB_CommProcess_SCF_FileCreateType</Name>
												<Type>ComboBox</Type>
												<FormControlExtension
													i:nil="true" />
												<DataField>SCF_FileCreateType</DataField>
												<DataSource>SKS_EB_CommProcess</DataSource>
												<Items />
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormReferenceGroupControl">
												<Name>ReferenceGroup</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>858993458</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>ReferenceGroup</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Controls />
												<DataSource>SKS_EB_CommProcess</DataSource>
												<ReferenceField>BatchJobId</ReferenceField>
												<ReplacementFieldGroup>SKS_Caption</ReplacementFieldGroup>
											</AxFormControl>
										</Controls>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>MiddleGroup</Name>
										<Type>Group</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>SKS_EB_CommProcess_PPCreateSendCpny</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>715827882</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<DataField>CreateSendCpny</DataField>
												<DataSource>SKS_EB_CommProcess</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormComboBoxControl">
												<Name>SKS_EB_CommProcess_PPFileComplete</Name>
												<ElementPosition>954437176</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>ComboBox</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<DataField>FileComplete</DataField>
												<DataSource>SKS_EB_CommProcess</DataSource>
												<Items />
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormIntegerControl">
												<Name>SKS_EB_CommProcess_FileCompletionTime</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>984263337</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>Integer</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<DataField>FileCompletionTime</DataField>
												<DataSource>SKS_EB_CommProcess</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormCheckBoxControl">
												<Name>SKS_EB_CommProcess_AutoPost</Name>
												<ElementPosition>1014089499</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>CheckBox</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<DataField>AutoPost</DataField>
												<DataSource>SKS_EB_CommProcess</DataSource>
											</AxFormControl>
										</Controls>
										<Caption>@SYS308848</Caption>
									</AxFormControl>
								</Controls>
								<ColumnsMode>Fill</ColumnsMode>
								<FrameType>None</FrameType>
							</AxFormControl>
						</Controls>
						<Caption>@SKS2447</Caption>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>InboundCommTabPage</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1610612734</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Pattern>ToolbarFields</Pattern>
						<PatternVersion>1.1</PatternVersion>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormActionPaneControl">
								<Name>InboundCommActionPane</Name>
								<Type>ActionPane</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormButtonGroupControl">
										<Name>InboundCommButtonGroup</Name>
										<Type>ButtonGroup</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormMenuFunctionButtonControl">
												<Name>SKS_PP_ViewBatchINBOUND</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1288490187</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>MenuFunctionButton</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<MenuItemName>BatchJob</MenuItemName>
												<Text>@SKS2461</Text>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormButtonControl">
												<Name>SKS_PP_CreateBatchINBOUND</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1717986916</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<HelpText>@SKS2467</HelpText>
												<NeededPermission>Delete</NeededPermission>
												<Type>Button</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<SaveRecord>No</SaveRecord>
												<Text>@SKS2462</Text>
											</AxFormControl>
										</Controls>
									</AxFormControl>
								</Controls>
								<Style>Strip</Style>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>Group2</Name>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Pattern>FieldsFieldGroups</Pattern>
								<PatternVersion>1.1</PatternVersion>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormReferenceGroupControl">
										<Name>InboundBatchJobReferenceGroup</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>858993458</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>ReferenceGroup</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<Controls />
										<DataSource>SKS_EB_CommProcess</DataSource>
										<ReferenceField>BatchJobId</ReferenceField>
										<ReplacementFieldGroup>SKS_Caption</ReplacementFieldGroup>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>SKS_EB_CommProcess_APIFormatType</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>ComboBox</Type>
										<Visible>No</Visible>
										<FormControlExtension
											i:nil="true" />
										<DataField>APIFormatType</DataField>
										<DataSource>SKS_EB_CommProcess</DataSource>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>SKS_EB_CommProcess_EDCreateSendCpny</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>String</Type>
										<Visible>No</Visible>
										<FormControlExtension
											i:nil="true" />
										<DataField>CreateSendCpny</DataField>
										<DataSource>SKS_EB_CommProcess</DataSource>
									</AxFormControl>
								</Controls>
								<ColumnsMode>Fill</ColumnsMode>
								<FrameType>None</FrameType>
							</AxFormControl>
						</Controls>
						<Caption>@SKS2709</Caption>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>InboundRelocationCommTabPage</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Pattern>ToolbarFields</Pattern>
						<PatternVersion>1.1</PatternVersion>
						<Type>TabPage</Type>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormActionPaneControl">
								<Name>InboundRelocationCommActionPane</Name>
								<Type>ActionPane</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormButtonGroupControl">
										<Name>InboundRelocationCommButtonGroup</Name>
										<Type>ButtonGroup</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormMenuFunctionButtonControl">
												<Name>SKS_PP_ViewBatchINBOUNDRelocation</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1288490187</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>MenuFunctionButton</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<MenuItemName>BatchJob</MenuItemName>
												<Text>@SKS2461</Text>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormButtonControl">
												<Name>SKS_PP_CreateBatchINBOUNDRelocation</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1717986916</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<HelpText>@SKS2467</HelpText>
												<NeededPermission>Delete</NeededPermission>
												<Type>Button</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<SaveRecord>No</SaveRecord>
												<Text>@SKS2462</Text>
											</AxFormControl>
										</Controls>
									</AxFormControl>
								</Controls>
								<Style>Strip</Style>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>InboundRelocGroup</Name>
								<Pattern>FieldsFieldGroups</Pattern>
								<PatternVersion>1.1</PatternVersion>
								<Type>Group</Type>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormReferenceGroupControl">
										<Name>InboundRelocate</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>858993458</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>ReferenceGroup</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<Controls />
										<DataSource>SKS_EB_CommProcess</DataSource>
										<ReferenceField>RelocBatchJobId</ReferenceField>
										<ReplacementFieldGroup>SKS_Caption</ReplacementFieldGroup>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>SKS_EB_CommProcess_RelocFilePath</Name>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>RelocFilePath</DataField>
										<DataSource>SKS_EB_CommProcess</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>SKS_EB_CommProcess_RelocBankFabricLocation</Name>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>RelocBankFabricLocation</DataField>
										<DataSource>SKS_EB_CommProcess</DataSource>
										<LookupOnly>Yes</LookupOnly>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>SKS_EB_CommProcess_RelocCompany</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>RelocCompany</DataField>
										<DataSource>SKS_EB_CommProcess</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>SKS_EB_CommProcess_RelocEFTFormatId</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>RelocEFTFormatId</DataField>
										<DataSource>SKS_EB_CommProcess</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>SKS_EB_CommProcess_RelocLBFormatId</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>RelocLBFormatId</DataField>
										<DataSource>SKS_EB_CommProcess</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>SKS_EB_CommProcess_RelocInboundFileGroupId</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>RelocInboundFileGroupId</DataField>
										<DataSource>SKS_EB_CommProcess</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>SKS_EB_CommProcess_RestrictFormatComp</Name>
										<Type>CheckBox</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>RestrictFormatComp</DataField>
										<DataSource>SKS_EB_CommProcess</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>SKS_EB_CommProcess_RelocClass</Name>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>RelocClass</DataField>
										<DataSource>SKS_EB_CommProcess</DataSource>
									</AxFormControl>
								</Controls>
								<ColumnsMode>Fill</ColumnsMode>
								<FrameType>None</FrameType>
							</AxFormControl>
						</Controls>
						<Caption>@SKS:SKGInboundRelocOptions</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>CommunicationsOptionsTabPage</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Pattern>ToolbarFields</Pattern>
						<PatternVersion>1.1</PatternVersion>
						<Type>TabPage</Type>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormActionPaneControl">
								<Name>CommunicatoinsOptionsActionPane</Name>
								<Type>ActionPane</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormButtonGroupControl">
										<Name>CommunicationsOptionsActionPainButtonGroup</Name>
										<Type>ButtonGroup</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormButtonControl">
												<Name>LaunchButton</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>Button</Type>
												<FormControlExtension
													i:nil="true" />
											</AxFormControl>
										</Controls>
									</AxFormControl>
								</Controls>
								<Style>Strip</Style>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>CommunicationsParametersGroup</Name>
								<Pattern>FieldsFieldGroups</Pattern>
								<PatternVersion>1.1</PatternVersion>
								<Type>Group</Type>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>SKS_EB_CommProcess_PPCommType</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1193046470</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>CommType</DataField>
										<DataSource>SKS_EB_CommProcess</DataSource>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormIntegerControl">
										<Name>SKS_EB_CommProcess_CommTimeout</Name>
										<ElementPosition>1550960411</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Integer</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>CommTimeout</DataField>
										<DataSource>SKS_EB_CommProcess</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>SKS_EB_CommProcess_PPCommUserProg</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>CommUserProg</DataField>
										<DataSource>SKS_EB_CommProcess</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>SKS_EB_CommProcessRelocFileType</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>FileType</DataField>
										<DataSource>SKS_EB_CommProcess</DataSource>
									</AxFormControl>
								</Controls>
								<ColumnsMode>Fill</ColumnsMode>
								<FrameType>None</FrameType>
							</AxFormControl>
						</Controls>
						<Caption>@SKS:SKGCommunicationsOptions</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>CommParmsTabPage</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Pattern>ToolbarList</Pattern>
						<PatternVersion>1.2</PatternVersion>
						<Type>TabPage</Type>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormActionPaneControl">
								<Name>ActionPane2</Name>
								<ElementPosition>1073741822</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>ActionPane</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormButtonGroupControl">
										<Name>ParamsRecordBasics</Name>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>ButtonGroup</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormCommandButtonControl">
												<Name>CopyOfNewButton</Name>
												<ElementPosition>1073741822</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>CommandButton</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<ButtonDisplay>TextWithImageLeft</ButtonDisplay>
												<Command>New</Command>
												<NormalImage>New</NormalImage>
												<Primary>Yes</Primary>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormCommandButtonControl">
												<Name>CopyOfDeleteButton</Name>
												<ElementPosition>1610612733</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>CommandButton</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<ButtonDisplay>TextWithImageLeft</ButtonDisplay>
												<Command>DeleteRecord</Command>
												<NormalImage>Delete</NormalImage>
												<Primary>Yes</Primary>
												<SaveRecord>No</SaveRecord>
												<Text>@SYS14425</Text>
											</AxFormControl>
										</Controls>
										<ArrangeMethod>Vertical</ArrangeMethod>
									</AxFormControl>
								</Controls>
								<AlignChild>No</AlignChild>
								<AlignChildren>No</AlignChildren>
								<ArrangeMethod>Vertical</ArrangeMethod>
								<DataSource>SKS_EB_CommParams</DataSource>
								<Style>Strip</Style>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGridControl">
								<Name>ParametersGrid</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1610612734</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Grid</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormIntegerControl">
										<Name>SKS_EB_CommParams_ParamOrder</Name>
										<ElementPosition>858993458</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Integer</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>ParamOrder</DataField>
										<DataSource>SKS_EB_CommParams</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>SKS_EB_CommParams_ParamType</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1288490187</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>ParamType</DataField>
										<DataSource>SKS_EB_CommParams</DataSource>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>SKS_EB_CommParams_RelocParamType</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1288490187</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>RelocParamType</DataField>
										<DataSource>SKS_EB_CommParams</DataSource>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>SKS_EB_CommParams_Value</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1717986916</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>Value</DataField>
										<DataSource>SKS_EB_CommParams</DataSource>
										<DisplayLength>20</DisplayLength>
										<DisplayLengthMode>Fixed</DisplayLengthMode>
									</AxFormControl>
								</Controls>
								<AlternateRowShading>No</AlternateRowShading>
								<DataSource>SKS_EB_CommParams</DataSource>
								<GridLinesStyle>Vertical</GridLinesStyle>
								<MultiSelect>No</MultiSelect>
								<ShowRowLabels>No</ShowRowLabels>
							</AxFormControl>
						</Controls>
						<Caption>@SKS:SKGOutboundParms</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>InboundBRPreReadScriptTabPage</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1073741822</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Pattern>FieldsFieldGroups</Pattern>
						<PatternVersion>1.1</PatternVersion>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>InboundBRPreReadScriptContentGroup</Name>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>SKS_EB_CommProcess_BRPreReadScriptCommUserProg</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>BRPreImportScriptPath</DataField>
										<DataSource>SKS_EB_CommProcess</DataSource>
									</AxFormControl>
								</Controls>
							</AxFormControl>
						</Controls>
						<ColumnsMode>Fill</ColumnsMode>
						<Caption>@SKS:SKGBRPreImportScriptTabCaption</Caption>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>InboundBRPreReadScriptParamsTabPage</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Pattern>ToolbarList</Pattern>
						<PatternVersion>1.2</PatternVersion>
						<Type>TabPage</Type>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormActionPaneControl">
								<Name>ActionPaneBRPreReadScript</Name>
								<ElementPosition>1073741822</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>ActionPane</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormButtonGroupControl">
										<Name>ParamsRecordBasicsBRPreReadScript</Name>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>ButtonGroup</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormCommandButtonControl">
												<Name>NewButtonParamsBRPreReadScript</Name>
												<ElementPosition>1073741822</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>CommandButton</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<ButtonDisplay>TextWithImageLeft</ButtonDisplay>
												<Command>New</Command>
												<NormalImage>New</NormalImage>
												<Primary>Yes</Primary>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormCommandButtonControl">
												<Name>DeleteButtonParamsBRPreReadScript</Name>
												<ElementPosition>1610612733</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>CommandButton</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<ButtonDisplay>TextWithImageLeft</ButtonDisplay>
												<Command>DeleteRecord</Command>
												<NormalImage>Delete</NormalImage>
												<Primary>Yes</Primary>
												<SaveRecord>No</SaveRecord>
												<Text>@SYS14425</Text>
											</AxFormControl>
										</Controls>
										<ArrangeMethod>Vertical</ArrangeMethod>
									</AxFormControl>
								</Controls>
								<AlignChild>No</AlignChild>
								<AlignChildren>No</AlignChildren>
								<ArrangeMethod>Vertical</ArrangeMethod>
								<DataSource>SKS_EB_CommBRPreReadScriptParams</DataSource>
								<Style>Strip</Style>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGridControl">
								<Name>ParametersGridBRPreReadScript</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1610612734</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Grid</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormIntegerControl">
										<Name>SKS_EB_CommParams_BRPreReadScriptParamOrder</Name>
										<ElementPosition>858993458</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Integer</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>ParamOrder</DataField>
										<DataSource>SKS_EB_CommBRPreReadScriptParams</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>SKS_EB_CommParams_BRPreReadScriptParamType</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1288490187</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>ParamType</DataField>
										<DataSource>SKS_EB_CommBRPreReadScriptParams</DataSource>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>SKS_EB_CommParams_BRPreReadScriptValue</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1717986916</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>Value</DataField>
										<DataSource>SKS_EB_CommBRPreReadScriptParams</DataSource>
										<DisplayLength>20</DisplayLength>
										<DisplayLengthMode>Fixed</DisplayLengthMode>
									</AxFormControl>
								</Controls>
								<AlternateRowShading>No</AlternateRowShading>
								<DataSource>SKS_EB_CommBRPreReadScriptParams</DataSource>
								<GridLinesStyle>Vertical</GridLinesStyle>
								<MultiSelect>No</MultiSelect>
								<ShowRowLabels>No</ShowRowLabels>
							</AxFormControl>
						</Controls>
						<Caption>@SKS:SKGInboundPreReadScriptParameters</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>InboundBRPostReadScriptTabPage</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1073741822</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Pattern>FieldsFieldGroups</Pattern>
						<PatternVersion>1.1</PatternVersion>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>InboundBRPostReadScriptContentGroup</Name>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>SKS_EB_CommProcess_BRPostReadScriptCommUserProg</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>BRPostImportScriptPath</DataField>
										<DataSource>SKS_EB_CommProcess</DataSource>
									</AxFormControl>
								</Controls>
							</AxFormControl>
						</Controls>
						<ColumnsMode>Fill</ColumnsMode>
						<Caption>@SKS:SKGBRPostImportScriptTabCaption</Caption>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>InboundBRPostReadScriptParamsTabPage</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Pattern>ToolbarList</Pattern>
						<PatternVersion>1.2</PatternVersion>
						<Type>TabPage</Type>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormActionPaneControl">
								<Name>ActionPaneBRPostReadScript</Name>
								<ElementPosition>1073741822</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>ActionPane</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormButtonGroupControl">
										<Name>ParamsRecordBasicsBRPostReadScript</Name>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>ButtonGroup</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormCommandButtonControl">
												<Name>NewButtonParamsBRPostReadScript</Name>
												<ElementPosition>1073741822</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>CommandButton</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<ButtonDisplay>TextWithImageLeft</ButtonDisplay>
												<Command>New</Command>
												<NormalImage>New</NormalImage>
												<Primary>Yes</Primary>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormCommandButtonControl">
												<Name>DeleteButtonParamsBRPostReadScript</Name>
												<ElementPosition>1610612733</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>CommandButton</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<ButtonDisplay>TextWithImageLeft</ButtonDisplay>
												<Command>DeleteRecord</Command>
												<NormalImage>Delete</NormalImage>
												<Primary>Yes</Primary>
												<SaveRecord>No</SaveRecord>
												<Text>@SYS14425</Text>
											</AxFormControl>
										</Controls>
										<ArrangeMethod>Vertical</ArrangeMethod>
									</AxFormControl>
								</Controls>
								<AlignChild>No</AlignChild>
								<AlignChildren>No</AlignChildren>
								<ArrangeMethod>Vertical</ArrangeMethod>
								<DataSource>SKS_EB_CommBRPostReadScriptParams</DataSource>
								<Style>Strip</Style>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGridControl">
								<Name>ParametersGridBRPostReadScript</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1610612734</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Grid</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormIntegerControl">
										<Name>SKS_EB_CommParams_BRPostReadScriptParamOrder</Name>
										<ElementPosition>858993458</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Integer</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>ParamOrder</DataField>
										<DataSource>SKS_EB_CommBRPostReadScriptParams</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>SKS_EB_CommParams_BRPostReadScriptParamType</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1288490187</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>ParamType</DataField>
										<DataSource>SKS_EB_CommBRPostReadScriptParams</DataSource>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>SKS_EB_CommParams_BRPostReadScriptValue</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1717986916</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>Value</DataField>
										<DataSource>SKS_EB_CommBRPostReadScriptParams</DataSource>
										<DisplayLength>20</DisplayLength>
										<DisplayLengthMode>Fixed</DisplayLengthMode>
									</AxFormControl>
								</Controls>
								<AlternateRowShading>No</AlternateRowShading>
								<DataSource>SKS_EB_CommBRPostReadScriptParams</DataSource>
								<GridLinesStyle>Vertical</GridLinesStyle>
								<MultiSelect>No</MultiSelect>
								<ShowRowLabels>No</ShowRowLabels>
							</AxFormControl>
						</Controls>
						<Caption>@SKS:SKGInboundPostReadScriptParameters</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>BankFabricCommunicationOptionsTabPage</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Pattern>FieldsFieldGroups</Pattern>
						<PatternVersion>1.1</PatternVersion>
						<Type>TabPage</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>BankFabricCommunicationOptionsGroup</Name>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>SKS_EB_CommProcess_BankFabricCommunicationsName</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>BankFabricCommunicationName</DataField>
										<DataSource>SKS_EB_CommProcess</DataSource>
									</AxFormControl>
								</Controls>
							</AxFormControl>
						</Controls>
						<ColumnsMode>Fill</ColumnsMode>
						<Caption>@SKS:SKGBankFabricCommuncationsOptions</Caption>
					</AxFormControl>
				</Controls>
				<AlignChild>No</AlignChild>
				<ArrangeMethod>Vertical</ArrangeMethod>
				<Style>FastTabs</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>