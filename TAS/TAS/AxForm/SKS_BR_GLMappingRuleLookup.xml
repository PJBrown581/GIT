<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>SKS_BR_GLMappingRuleLookup</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class SKS_BR_GLMappingRuleLookup extends FormRun
{

    SelectableDataArea currentLedgerCompany;
    RefRecId currentCOARecId;
    boolean isCalledFromCCReconciliation;// SKS_FDD_13903
}
]]></Source>
			</Method>
			<Method>
				<Name>checkProject</Name>
				<Source><![CDATA[
    public boolean checkProject(SelectableDataArea _offsetCompany, LedgerJournalACType _offsetAccountType)
    {
        boolean ret = true;
        ;

        // Project does not support intercompany
        if(_offsetAccountType == LedgerJournalACType::Project &&
            _offsetCompany &&
            strUpr(_offsetCompany) != strUpr(curext()) &&
            isConfigurationkeyEnabled(configurationKeyNum(LedgerAdvIntercompanyAccounting)))
        {
            error(strFmt("@SYS75337", "@SYS80304"));
            ret = false;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableDimension</Name>
				<Source><![CDATA[
    public void enableDimension()
    {
        if(SKS_BR_GLMappingRuleLookup.OffsetAccountType == LedgerJournalACType::Ledger
            && !isCalledFromCCReconciliation // SKS_FDD_13903
            && SKS_BR_GLMappingRuleLookup.SKS_IHBIntercoAccountType == LedgerJournalACType::Ledger) //IHB_3.3.18 SKS 9536
        {
            SKS_BR_GLMappingRuleDimension.enabled(false);
        }
        // SKS_FDD_13903 -->
        else if(SKS_BR_GLMappingRuleLookup.OffsetAccountType == LedgerJournalACType::Ledger && isCalledFromCCReconciliation)
        {
            SKS_BR_GLMappingRuleDimension.enabled(false);
        }
        // SKS_FDD_13903 <--
        else
        {
            SKS_BR_GLMappingRuleDimension.enabled(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableDisableLookupValue2Field</Name>
				<Source><![CDATA[
    public void enableDisableLookupValue2Field()
    {

        //LookupValue2 field is only enabled on the form if the Search Operator is "CONTAINS" AND the first Lookup Value field is populated
        if(SKS_BR_GLMappingRuleLookup.SearchOperator == SKS_EB_SearchOperator::Contains && strLen(SKS_BR_GLMappingRuleLookup.LookupValue) > 0)
        {
            SKS_BR_GLMappingRuleLookup_ds.object(fieldNum(SKS_BR_GLMappingRuleLookup,LookupValue2)).allowEdit(true);
        }
        else
        {
            SKS_BR_GLMappingRuleLookup_ds.object(fieldNum(SKS_BR_GLMappingRuleLookup,LookupValue2)).allowEdit(false);
            SKS_BR_GLMappingRuleLookup.LookupValue2 = '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableDisableCategoryIdField</Name>
				<Source><![CDATA[
    // SKS_18405
    public void enableDisableCategoryIdField()
    {
        if (SKS_BR_GLMappingRuleLookup.OffsetAccountType == LedgerJournalACType::Project)
        {
            SKS_BR_GLMappingRuleLookup_ds.object(fieldNum(SKS_BR_GLMappingRuleLookup, CategoryId)).allowEdit(true);
        }
        else
        {
            SKS_BR_GLMappingRuleLookup_ds.object(fieldNum(SKS_BR_GLMappingRuleLookup, CategoryId)).allowEdit(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableDisableMatchingRuleField</Name>
				<Source><![CDATA[
    // SKS_18405

    public void enableDisableMatchingRuleField()
    {
        SKS_PP_Setup setup = SKS_PP_Setup::find();

        if((!isCalledFromCCReconciliation && SKS_BR_GLMappingRuleLookup.GLMatchOrCreate == SKS_BR_GLMatchOrCreate::GLCreate)
            || (isCalledFromCCReconciliation && SKS_BR_GLMappingRuleLookup.CCR_GLMatchOrCreate == SKS_CCR_GLMatchOrCreate::GLCreate ))// SKS_FDD_13903
        {

            SKS_BR_GLMappingRuleLookup_ds.object(fieldNum(SKS_BR_GLMappingRuleLookup,MatchingRuleGroupId)).enabled(false);
            SKS_BR_GLMappingRuleLookup_ds.object(fieldNum(SKS_BR_GLMappingRuleLookup,OffsetCompany)).enabled(true);
            SKS_BR_GLMappingRuleLookup_ds.object(fieldNum(SKS_BR_GLMappingRuleLookup,OffsetAccountType)).enabled(true);
            SKS_BR_GLMappingRuleLookup_ds.object(fieldNum(SKS_BR_GLMappingRuleLookup,OffsetLedgerDimension)).enabled(true);
            SKS_BR_GLMappingRuleLookup_ds.object(fieldNum(SKS_BR_GLMappingRuleLookup,DDRRuleGroupId)).enabled(false);
            // For CCR IHB fields are not needed
            if(!isCalledFromCCReconciliation) // SKS_FDD_13903
            {
                //IHB_3.3.18 SKS 9536 start
                SKS_BR_GLMappingRuleLookup_ds.object(fieldNum(SKS_BR_GLMappingRuleLookup,SKS_IHBIntercoCompany)).enabled(setup.IHB_Active);
                SKS_BR_GLMappingRuleLookup_ds.object(fieldNum(SKS_BR_GLMappingRuleLookup,SKS_IHBIntercoAccountType)).enabled(setup.IHB_Active);
                SKS_BR_GLMappingRuleLookup_ds.object(fieldNum(SKS_BR_GLMappingRuleLookup,SKS_IHBIntercoLedgerDimension)).enabled(setup.IHB_Active);
                //IHB_3.3.18 SKS 9536 end
            }
        }
        else if(SKS_BR_GLMappingRuleLookup.GLMatchOrCreate == SKS_BR_GLMatchOrCreate::GLMatch
                || ( isCalledFromCCReconciliation && SKS_BR_GLMappingRuleLookup.CCR_GLMatchOrCreate == SKS_CCR_GLMatchOrCreate::GLMatch))// SKS_FDD_13903
        {
            SKS_BR_GLMappingRuleLookup_ds.object(fieldNum(SKS_BR_GLMappingRuleLookup,MatchingRuleGroupId)).enabled(true);
            SKS_BR_GLMappingRuleLookup_ds.object(fieldNum(SKS_BR_GLMappingRuleLookup,DDRRuleGroupId)).enabled(false);
            SKS_BR_GLMappingRuleLookup_ds.object(fieldNum(SKS_BR_GLMappingRuleLookup,OffsetCompany)).enabled(false);
            SKS_BR_GLMappingRuleLookup_ds.object(fieldNum(SKS_BR_GLMappingRuleLookup,OffsetAccountType)).enabled(false);
            SKS_BR_GLMappingRuleLookup_ds.object(fieldNum(SKS_BR_GLMappingRuleLookup,OffsetLedgerDimension)).enabled(false);
            //IHB_3.3.18 SKS 9536 start
            // For CCR IHB fields are not needed
            if(!isCalledFromCCReconciliation) // SKS_FDD_13903
            {
                SKS_BR_GLMappingRuleLookup_ds.object(fieldNum(SKS_BR_GLMappingRuleLookup,SKS_IHBIntercoCompany)).enabled(false);
                SKS_BR_GLMappingRuleLookup_ds.object(fieldNum(SKS_BR_GLMappingRuleLookup,SKS_IHBIntercoAccountType)).enabled(false);
                SKS_BR_GLMappingRuleLookup_ds.object(fieldNum(SKS_BR_GLMappingRuleLookup,SKS_IHBIntercoLedgerDimension)).enabled(false);
            }
            //IHB_3.3.18 SKS 9536 end

        }
        else if(SKS_BR_GLMappingRuleLookup.GLMatchOrCreate == SKS_BR_GLMatchOrCreate::GLCreateSweepAndMatchZBA)
        {

            SKS_BR_GLMappingRuleLookup_ds.object(fieldNum(SKS_BR_GLMappingRuleLookup,MatchingRuleGroupId)).enabled(true);
            SKS_BR_GLMappingRuleLookup_ds.object(fieldNum(SKS_BR_GLMappingRuleLookup,OffsetCompany)).enabled(true);
            SKS_BR_GLMappingRuleLookup_ds.object(fieldNum(SKS_BR_GLMappingRuleLookup,OffsetAccountType)).enabled(true);
            SKS_BR_GLMappingRuleLookup_ds.object(fieldNum(SKS_BR_GLMappingRuleLookup,OffsetLedgerDimension)).enabled(true);
            //IHB_3.3.18 SKS 9536 start
            SKS_BR_GLMappingRuleLookup_ds.object(fieldNum(SKS_BR_GLMappingRuleLookup,SKS_IHBIntercoCompany)).enabled(setup.IHB_Active);
            SKS_BR_GLMappingRuleLookup_ds.object(fieldNum(SKS_BR_GLMappingRuleLookup,SKS_IHBIntercoAccountType)).enabled(setup.IHB_Active);
            SKS_BR_GLMappingRuleLookup_ds.object(fieldNum(SKS_BR_GLMappingRuleLookup,SKS_IHBIntercoLedgerDimension)).enabled(setup.IHB_Active);
            //IHB_3.3.18 SKS 9536 end

        }
        else if(SKS_BR_GLMappingRuleLookup.GLMatchOrCreate == SKS_BR_GLMatchOrCreate::CustomerSettlement
             || SKS_BR_GLMappingRuleLookup.GLMatchOrCreate == SKS_BR_GLMatchOrCreate::Manual
             || SKS_BR_GLMappingRuleLookup.GLMatchOrCreate == SKS_BR_GLMatchOrCreate::DDReversal
             || ( isCalledFromCCReconciliation && SKS_BR_GLMappingRuleLookup.CCR_GLMatchOrCreate == SKS_CCR_GLMatchOrCreate::Manual ))// SKS_FDD_13903
        {

            SKS_BR_GLMappingRuleLookup_ds.object(fieldNum(SKS_BR_GLMappingRuleLookup,MatchingRuleGroupId)).enabled(false);
            SKS_BR_GLMappingRuleLookup_ds.object(fieldNum(SKS_BR_GLMappingRuleLookup,OffsetCompany)).enabled(false);
            SKS_BR_GLMappingRuleLookup_ds.object(fieldNum(SKS_BR_GLMappingRuleLookup,OffsetAccountType)).enabled(false);
            SKS_BR_GLMappingRuleLookup_ds.object(fieldNum(SKS_BR_GLMappingRuleLookup,OffsetLedgerDimension)).enabled(false);
            //IHB_3.3.18 SKS 9536 start
            // For CCR IHB fields are not needed
            if(!isCalledFromCCReconciliation) // SKS_FDD_13903
            {
                SKS_BR_GLMappingRuleLookup_ds.object(fieldNum(SKS_BR_GLMappingRuleLookup,SKS_IHBIntercoCompany)).enabled(false);
                SKS_BR_GLMappingRuleLookup_ds.object(fieldNum(SKS_BR_GLMappingRuleLookup,SKS_IHBIntercoAccountType)).enabled(false);
                SKS_BR_GLMappingRuleLookup_ds.object(fieldNum(SKS_BR_GLMappingRuleLookup,SKS_IHBIntercoLedgerDimension)).enabled(false);
            }
            //IHB_3.3.18 SKS 9536 end

            if(SKS_BR_GLMappingRuleLookup.GLMatchOrCreate == SKS_BR_GLMatchOrCreate::DDReversal)
            {
                SKS_BR_GLMappingRuleLookup_ds.object(fieldNum(SKS_BR_GLMappingRuleLookup,DDRRuleGroupId)).enabled(true);
            }
        }

        this.enableDimension();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        SKS_BR_GLMappingRuleGroup   sks_BR_GLMappingRuleGroup;//SKS_FDD_13903

        super();

        SKS_BR_GLMappingRuleLookup_OffsetLedgerDimension.parmDimensionAutocompleteFilter(new DimensionAutocompleteVendDefaultFilter(SKS_BR_GLMappingRuleLookup_DS, fieldStr(SKS_BR_GLMappingRuleLookup, OffsetLedgerDimension), fieldStr(SKS_BR_GLMappingRuleLookup, OffsetAccountType)));
        SKS_BR_GLMappingRuleLookup_OffsetLedgerDimension.parmPostingType(LedgerPostingType::LedgerJournal);
        SKS_BR_GLMappingRuleLookup_OffsetLedgerDimension.parmValidateBlockedForManualEntry(true);

        //IHB_3.3.18 SKS 9536 start
        SKS_BR_GLMappingRuleLookup_IntercoLedgerDimension.parmDimensionAutocompleteFilter(new DimensionAutocompleteVendDefaultFilter(SKS_BR_GLMappingRuleLookup_DS, fieldStr(SKS_BR_GLMappingRuleLookup, SKS_IHBIntercoLedgerDimension), fieldStr(SKS_BR_GLMappingRuleLookup, SKS_IHBIntercoAccountType)));
        SKS_BR_GLMappingRuleLookup_IntercoLedgerDimension.parmPostingType(LedgerPostingType::LedgerJournal);
        SKS_BR_GLMappingRuleLookup_IntercoLedgerDimension.parmValidateBlockedForManualEntry(true);
        //IHB_3.3.18 SKS 9536 end

        // SKS_FDD_13903 -->
        sks_BR_GLMappingRuleGroup = element.args().record();
        if(sks_BR_GLMappingRuleGroup.CCR_IsCCReconciliation == NoYes::Yes)
        {
            isCalledFromCCReconciliation = true;
            element.design().caption("@SKS:SKGCCRGJMappingRuleLookup");
            SKS_BR_GLMappingRuleLookup_GLMatchOrCreate.visible(false);
            element.disableIntercoFields();
            SKS_BR_GLMappingRuleLookupAdditional.visible(false);
        }
        else
        {
            SKS_BR_GLMappingRuleLookup_CCR_GLMatchOrCreate.visible(false);
        }
        // SKS_FDD_13903 <--
    }

]]></Source>
			</Method>
			<Method>
				<Name>disableIntercoFields</Name>
				<Source><![CDATA[
    // SKS_FDD_13903
    protected void disableIntercoFields()
    {
        SKS_BR_GLMappingRuleLookup_IntercoCompany.visible(false);
        SKS_BR_GLMappingRuleLookup_IntercoAccountType.visible(false);
        SKS_BR_GLMappingRuleLookup_IntercoLedgerDimension.visible(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableLookupAdditional</Name>
				<Source><![CDATA[
    private void enableLookupAdditional()
    {
        SKS_BR_GLMappingRuleLookupAdditional.enabled(SKS_BR_GLMappingRuleLookup.GLMatchOrCreate == SKS_BR_GLMatchOrCreate::GLCreate);
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>SKS_BR_GLMappingRuleLookup</Name>
				<Methods>
					<Method>
						<Name>validateWrite</Name>
						<Source><![CDATA[
        public boolean validateWrite()
        {
            boolean ret = true;

            if ((!isCalledFromCCReconciliation && SKS_BR_GLMappingRuleLookup.GLMatchOrCreate == SKS_BR_GLMatchOrCreate::GLCreate)
                || (isCalledFromCCReconciliation && SKS_BR_GLMappingRuleLookup.CCR_GLMatchOrCreate == SKS_CCR_GLMatchOrCreate::GLCreate ))// SKS_FDD_13903
            {
                //enforce field population by user of all fields that are part of GL Creation
                if(strLen(strLRTrim(SKS_BR_GLMappingRuleLookup.OffsetCompany)) == 0 && ret)
                {
                    error(strfmt("@SKS2468",
                    SKS_BR_GLMappingRuleLookup_ds.object(fieldNum(SKS_BR_GLMappingRuleLookup,OffsetCompany)).labelText()));

                    SKS_BR_GLMappingRuleLookup_OffsetCompany.setFocus();
                    ret = false;
                }
                if(SKS_BR_GLMappingRuleLookup.OffsetLedgerDimension == 0 && ret)
                {
                    error(strfmt("@SKS2468",
                    SKS_BR_GLMappingRuleLookup_ds.object(fieldNum(SKS_BR_GLMappingRuleLookup,OffsetLedgerDimension)).labelText()));
                    SKS_BR_GLMappingRuleLookup_OffsetLedgerDimension.setFocus();
                    ret = false;
                }

                //IHB_3.3.18 SKS 9536 & 11917 start
                if(!isCalledFromCCReconciliation && //SKS_FDD_13903 - IHB fields are not need for CCRec
                    (SKS_BR_GLMappingRuleLookup.SKS_IHBIntercoLedgerDimension == 0 || strLen(strLRTrim(SKS_BR_GLMappingRuleLookup.SKS_IHBIntercoCompany)) == 0 ) && ret)
                {
                    //SKS_Bug_10237 -->
                    boolean         errorCheck;
                    if(SKS_BR_GLMappingRuleLookup.OffsetAccountType == LedgerJournalACType::Bank)
                    {
                        changecompany(SKS_BR_GLMappingRuleLookup.OffsetCompany)
                        {
                            if(sKS_PP_Bank::findIHBBank(BankAccountTable::findByLedgerDimension(SKS_BR_GLMappingRuleLookup.OffsetLedgerDimension).AccountID).SKS_IHBLinkedinhousebankaccount)
                            {
                                errorCheck = true;
                            }
                        }
                    }
                    if(errorCheck)//SKS_Bug_10237 <--
                    {
                        if(SKS_BR_GLMappingRuleLookup.SKS_IHBIntercoLedgerDimension == 0)
                        {
                            error(strfmt("@SKS2468",
                            SKS_BR_GLMappingRuleLookup_ds.object(fieldNum(SKS_BR_GLMappingRuleLookup,SKS_IHBIntercoLedgerDimension)).labelText()));
                            SKS_BR_GLMappingRuleLookup_IntercoLedgerDimension.setFocus();
                        }
                        else // SKS_BR_GLMappingRuleLookup.SKS_IHBIntercoCompany is blank
                        {
                            error(strfmt("@SKS2468",
                            SKS_BR_GLMappingRuleLookup_ds.object(fieldNum(SKS_BR_GLMappingRuleLookup,SKS_IHBIntercoCompany)).labelText()));
                            SKS_BR_GLMappingRuleLookup_IntercoCompany.setFocus();
                        }
                        ret = false;
                    }

                }
                //IHB_3.3.18 SKS 9536 AND 11917 End
            }
            else if((SKS_BR_GLMappingRuleLookup.GLMatchOrCreate == SKS_BR_GLMatchOrCreate::GLMatch
                        || SKS_BR_GLMappingRuleLookup.CCR_GLMatchOrCreate == SKS_CCR_GLMatchOrCreate::GLMatch) && ret)//SKS_FDD_13903
            {
                //enforce field population by user of all fields that are part of Matching
                if(strLen(strLRTrim(SKS_BR_GLMappingRuleLookup.MatchingRuleGroupId)) == 0 && ret)
                {
                    error(strfmt("@SKS2468",
                    SKS_BR_GLMappingRuleLookup_ds.object(fieldNum(SKS_BR_GLMappingRuleLookup, MatchingRuleGroupId)).labelText()));
                    SKS_BR_GLMappingRuleLookup_GLMatchOrCreate.setFocus();
                    ret = false;
                }
            }
            else if(SKS_BR_GLMappingRuleLookup.GLMatchOrCreate == SKS_BR_GLMatchOrCreate::GLCreateSweepAndMatchZBA)
            {
                //enforce field population.  Only Offset Account Types of BANK are accepted.   Matching group must be populated.
                if(strLen(strLRTrim(SKS_BR_GLMappingRuleLookup.OffsetCompany)) == 0 && ret)
                {
                    error(strfmt("@SKS2468",
                    SKS_BR_GLMappingRuleLookup_ds.object(fieldNum(SKS_BR_GLMappingRuleLookup,OffsetCompany)).labelText()));

                    SKS_BR_GLMappingRuleLookup_OffsetCompany.setFocus();
                    ret = false;
                }
                if(SKS_BR_GLMappingRuleLookup.OffsetAccountType != LedgerJournalACType::Bank && ret)
                {
                    error(strFmt("@SKS3353",enum2str(SKS_BR_GLMatchorCreate::GLCreateSweepAndMatchZBA),
                            SKS_BR_GLMappingRuleLookup_ds.object(fieldNum(SKS_BR_GLMappingRuleLookup,OffsetAccountType)).labelText(),
                            enum2str(LedgerJournalACType::Bank)));
                    SKS_BR_GLMappingRuleLookup_OffsetAccountType.setFocus();
                    ret = false;
                }
                if(SKS_BR_GLMappingRuleLookup.OffsetLedgerDimension == 0 && ret)
                {
                    error(strfmt("@SKS2468",
                    SKS_BR_GLMappingRuleLookup_ds.object(fieldNum(SKS_BR_GLMappingRuleLookup,OffsetLedgerDimension)).labelText()));
                    SKS_BR_GLMappingRuleLookup_OffsetLedgerDimension.setFocus();
                    ret = false;
                }

                //IHB_3.3.18 SKS 9536 & 11917 start
                if((SKS_BR_GLMappingRuleLookup.SKS_IHBIntercoLedgerDimension == 0
                    || strLen(strLRTrim(SKS_BR_GLMappingRuleLookup.SKS_IHBIntercoCompany)) == 0
                    || SKS_BR_GLMappingRuleLookup.SKS_IHBIntercoAccountType != LedgerJournalACType::Bank) && ret)
                {
                    //SKS_Bug_10237 -->
                    boolean         errorCheck;
                    if(SKS_BR_GLMappingRuleLookup.OffsetAccountType == LedgerJournalACType::Bank)
                    {
                        changecompany(SKS_BR_GLMappingRuleLookup.OffsetCompany)
                        {
                            if(sKS_PP_Bank::findIHBBank(BankAccountTable::findByLedgerDimension(SKS_BR_GLMappingRuleLookup.OffsetLedgerDimension).AccountID).SKS_IHBLinkedinhousebankaccount)
                            {
                                errorCheck = true;
                            }
                        }
                    }
                    if(errorCheck)//SKS_Bug_10237 <--
                    {
                        if(strLen(strLRTrim(SKS_BR_GLMappingRuleLookup.SKS_IHBIntercoCompany)) == 0)
                        {
                            error(strfmt("@SKS2468", SKS_BR_GLMappingRuleLookup_ds.object(fieldNum(SKS_BR_GLMappingRuleLookup,SKS_IHBIntercoCompany)).labelText()));
                            SKS_BR_GLMappingRuleLookup_IntercoCompany.setFocus();

                        }
                        if(SKS_BR_GLMappingRuleLookup.SKS_IHBIntercoAccountType != LedgerJournalACType::Bank)
                        {
                            error(strFmt("@SKS3353",enum2str(SKS_BR_GLMatchorCreate::GLCreateSweepAndMatchZBA),
                            SKS_BR_GLMappingRuleLookup_ds.object(fieldNum(SKS_BR_GLMappingRuleLookup,SKS_IHBIntercoAccountType)).labelText(),
                            enum2str(LedgerJournalACType::Bank)));
                            SKS_BR_GLMappingRuleLookup_IntercoAccountType.setFocus();
                        }
                        if(SKS_BR_GLMappingRuleLookup.SKS_IHBIntercoLedgerDimension == 0)
                        {
                            error(strfmt("@SKS2468",SKS_BR_GLMappingRuleLookup_ds.object(fieldNum(SKS_BR_GLMappingRuleLookup,SKS_IHBIntercoLedgerDimension)).labelText()));
                            SKS_BR_GLMappingRuleLookup_IntercoLedgerDimension.setFocus();
                        }
                        ret = false;
                    }
                }

                //IHB_3.3.18 SKS 9536 AND 11917End

                //enforce field population by user of all fields that are part of Matching
                if(strLen(strLRTrim(SKS_BR_GLMappingRuleLookup.MatchingRuleGroupId)) == 0 && ret)
                {
                    error(strfmt("@SKS2468",
                    SKS_BR_GLMappingRuleLookup_ds.object(fieldNum(SKS_BR_GLMappingRuleLookup, MatchingRuleGroupId)).labelText()));
                    SKS_BR_GLMappingRuleLookup_GLMatchOrCreate.setFocus();
                    ret = false;
                }
            }
            else if(SKS_BR_GLMappingRuleLookup.GLMatchOrCreate == SKS_BR_GLMatchOrCreate::DDReversal && ret)//SKS_FDD_13903
            {
                if(strLen(strLRTrim(SKS_BR_GLMappingRuleLookup.DDRRuleGroupId)) == 0 && ret)
                {
                    error("@SKS:SKGBRDDRValidation");
                    SKS_BR_GLMappingRuleLookup_DDRRuleGroupId.setFocus();
                    ret = false;
                }
            }


            if(ret)
            {
                ret = super();
            }

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>delete</Name>
						<Source><![CDATA[
        public void delete()
        {
            super();

            SKS_BR_GLMappingRuleDimension.enabled(false);
            SKS_BR_GLMappingRuleLookupAdditional.enabled(false);
        }

]]></Source>
					</Method>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        public int active()
        {
            int ret;

            ret = super();
            element.enableDisableMatchingRuleField();
            element.enableDisableLookupValue2Field();
            // SKS_18405
            element.enableDisableCategoryIdField();
            // SKS_18405
            element.enableLookupAdditional();
            SKS_BR_GLMappingRuleLookup_OffsetLedgerDimension.parmDataAreaId(SKS_BR_GLMappingRuleLookup.OffsetCompany ? SKS_BR_GLMappingRuleLookup.OffsetCompany : curext());
            SKS_BR_GLMappingRuleLookup_IntercoLedgerDimension.parmDataAreaId(SKS_BR_GLMappingRuleLookup.SKS_IHBIntercoCompany ? SKS_BR_GLMappingRuleLookup.SKS_IHBIntercoCompany : curext()); //IHB_3.3.18 SKS 9536            
            
            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>create</Name>
						<Source><![CDATA[
        public void create(boolean _append = false)
        {
            super(_append);

            SKS_BR_GLMappingRuleLookup.OffsetCompany = curext();
            SKS_BR_GLMappingRuleLookup.SKS_IHBIntercoCompany = curext();
        }

]]></Source>
					</Method>
					<Method>
						<Name>setDefaults</Name>
						<Source><![CDATA[
        public void setDefaults()
        {
            if(!isCalledFromCCReconciliation)// SKS_FDD_13903
            {
                if(SKS_BR_GLMappingRuleLookup.GLMatchOrCreate == SKS_BR_GLMatchOrCreate::GLCreate)
                {
                    SKS_BR_GLMappingRuleLookup.MatchingRuleGroupId = '';
                    SKS_BR_GLMappingRuleLookup.DDRRuleGroupId = '';
                    SKS_BR_GLMappingRuleLookup.OffsetCompany = curext();
                    SKS_BR_GLMappingRuleLookup.SKS_IHBIntercoCompany = curext();
                    element.enableDimension();
                }
                else if(SKS_BR_GLMappingRuleLookup.GLMatchOrCreate == SKS_BR_GLMatchOrCreate::GLMatch)
                {
                    SKS_BR_GLMappingRuleLookup.OffsetCompany = '';
                    SKS_BR_GLMappingRuleLookup.DDRRuleGroupId = '';
                    SKS_BR_GLMappingRuleLookup.OffsetAccountType = LedgerJournalACType::ledger;
                    SKS_BR_GLMappingRuleLookup.OffsetLedgerDimension = 0;
                    SKS_BR_GLMappingRuleLookup.OffsetDefaultDimension = 0;

                    //IHB_3.3.18 SKS 9536 start
                    SKS_BR_GLMappingRuleLookup.SKS_IHBIntercoCompany = '';
                    SKS_BR_GLMappingRuleLookup.SKS_IHBIntercoAccountType = LedgerJournalACType::ledger;
                    SKS_BR_GLMappingRuleLookup.SKS_IHBIntercoLedgerDimension = 0;
                    SKS_BR_GLMappingRuleLookup.SKS_IHBIntercoDefaultDimension = 0;
                    //IHB_3.3.18 SKS 9536 end

                    SKS_BR_GLMappingRuleDimension.enabled(false);
                }
                else if(SKS_BR_GLMappingRuleLookup.GLMatchOrCreate == SKS_BR_GLMatchOrCreate::GLCreateSweepAndMatchZBA)
                {
                    if(SKS_BR_GLMappingRuleLookup.OffsetAccountType != LedgerJournalACType::Bank)
                    {
                        SKS_BR_GLMappingRuleLookup.OffsetAccountType = LedgerJournalACType::Bank;
                        SKS_BR_GLMappingRuleLookup.OffsetLedgerDimension = 0;
                        SKS_BR_GLMappingRuleLookup.OffsetDefaultDimension = 0;
                    }

                    //IHB_3.3.18 SKS 9536 start
                    if(SKS_BR_GLMappingRuleLookup.SKS_IHBIntercoAccountType != LedgerJournalACType::Bank)
                    {
                        SKS_BR_GLMappingRuleLookup.SKS_IHBIntercoAccountType = LedgerJournalACType::Bank;
                        SKS_BR_GLMappingRuleLookup.SKS_IHBIntercoLedgerDimension = 0;
                        SKS_BR_GLMappingRuleLookup.SKS_IHBIntercoDefaultDimension = 0;
                    }
                    //IHB_3.3.18 SKS 9536 end

                    SKS_BR_GLMappingRuleLookup.OffsetCompany = curext();
                    SKS_BR_GLMappingRuleLookup.SKS_IHBIntercoCompany = curext();
                    element.enableDimension();
                }
                else if(SKS_BR_GLMappingRuleLookup.GLMatchOrCreate == SKS_BR_GLMatchOrCreate::DDReversal)
                {
                    SKS_BR_GLMappingRuleLookup.MatchingRuleGroupId = '';
                }
            }
            // SKS_FDD_13903 -->
            else
            {
                if(SKS_BR_GLMappingRuleLookup.CCR_GLMatchOrCreate == SKS_CCR_GLMatchOrCreate::GLCreate)
                {
                    SKS_BR_GLMappingRuleLookup.MatchingRuleGroupId = '';
                    SKS_BR_GLMappingRuleLookup.DDRRuleGroupId = '';
                    SKS_BR_GLMappingRuleLookup.OffsetCompany = curext();
                    element.enableDimension();
                }
                else if(SKS_BR_GLMappingRuleLookup.GLMatchOrCreate == SKS_BR_GLMatchOrCreate::GLMatch)
                {
                    SKS_BR_GLMappingRuleLookup.OffsetCompany = '';
                    SKS_BR_GLMappingRuleLookup.OffsetAccountType = LedgerJournalACType::ledger;
                    SKS_BR_GLMappingRuleLookup.OffsetLedgerDimension = 0;
                    SKS_BR_GLMappingRuleLookup.OffsetDefaultDimension = 0;
                    SKS_BR_GLMappingRuleDimension.enabled(false);
                }
            }
            // SKS_FDD_13903 <--

        }

]]></Source>
					</Method>
					<Method>
						<Name>initValue</Name>
						<Source><![CDATA[
        public void initValue()
        {
            SKS_BR_GLMappingRuleLookup.CCR_IsCCReconciliation = isCalledFromCCReconciliation;// SKS_FDD_13903
            super();
        }

]]></Source>
					</Method>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        public void executeQuery()
        {
            super();

            SKS_BR_GLMappingRuleLookupAdditional.enabled(false);
        }

]]></Source>
					</Method>
				</Methods>
				<Fields>
					<Field>
						<DataField>CCR_GLMatchOrCreate</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            /// <summary>
            /// SKS_FDD_13903
            /// </summary>
            public void modified()
            {
                super();
                element.enableDisableMatchingRuleField();
                SKS_BR_GLMappingRuleLookup_DS.setDefaults();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>GLMatchOrCreate</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                element.enableDisableMatchingRuleField();
                element.enableLookupAdditional();
                SKS_BR_GLMappingRuleLookup_ds.setDefaults();

            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>LookupValue</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                SKS_BR_GLMappingRuleLookup.LookupValue = strLRTrim(SKS_BR_GLMappingRuleLookup.LookupValue);

                super();

                element.enableDisableLookupValue2Field();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>LookupValue2</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                SKS_BR_GLMappingRuleLookup.LookupValue = strLRTrim(SKS_BR_GLMappingRuleLookup.LookupValue);

                super();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>OffsetAccountType</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                SKS_BR_GLMappingRuleLookup.OffsetLedgerDimension = 0;
                SKS_BR_GLMappingRuleLookup.OffsetDefaultDimension = 0;
                
                // SKS_18405
                element.enableDisableCategoryIdField();
                SKS_BR_GLMappingRuleLookup.CategoryId = '';
                // SKS_18405
                element.enableDimension();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>OffsetCompany</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                SKS_BR_GLMappingRuleLookup.OffsetLedgerDimension = 0;
                SKS_BR_GLMappingRuleLookup.OffsetDefaultDimension = 0;

                SKS_BR_GLMappingRuleLookup_OffsetLedgerDimension.parmDataAreaId(SKS_BR_GLMappingRuleLookup.OffsetCompany);
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>OffsetLedgerDimension</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>SearchOperator</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                element.enableDisableLookupValue2Field();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>SKS_IHBIntercoAccountType</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            /// <summary>
            ///IHB_3.3.18 SKS 9536
            /// </summary>
            public void modified()
            {
                super();

                SKS_BR_GLMappingRuleLookup.SKS_IHBIntercoLedgerDimension = 0;
                SKS_BR_GLMappingRuleLookup.SKS_IHBIntercoDefaultDimension = 0;

                element.enableDimension();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>SKS_IHBIntercoCompany</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            /// <summary>
            ///IHB_3.3.18 SKS 9536
            /// </summary>
            public void modified()
            {
                super();

                SKS_BR_GLMappingRuleLookup.SKS_IHBIntercoLedgerDimension = 0;
                SKS_BR_GLMappingRuleLookup.SKS_IHBIntercoDefaultDimension = 0;

                SKS_BR_GLMappingRuleLookup_IntercoLedgerDimension.parmDataAreaId(SKS_BR_GLMappingRuleLookup.SKS_IHBIntercoCompany);
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>SKS_IHBIntercoLedgerDimension</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            /// <summary>
            ///IHB_3.3.18 SKS 9536
            /// </summary>
            public void modified()
            {
                super();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
				</Fields>
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>SKS_BR_GLMappingRuleDimension</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            FormRun formRun;
            MenuFunction menuFunction;
            Args args;


            if(SKS_BR_GLMappingRuleLookup.OffsetCompany == '')
            {
                error("@SKS2334");
            }
            else if(SKS_BR_GLMappingRuleLookup.OffsetLedgerDimension == 0)
            {
                error("@SKS2335");
            }

            else
            {
                // Launch the Dimension form modally
                menuFunction = new MenuFunction(SKS_BR_GLMappingRuleDimension.menuItemName(), SKS_BR_GLMappingRuleDimension.menuItemType());
                args = new Args();
                args.record(SKS_BR_GLMappingRuleLookup);
                formRun = menuFunction.create(args);
                formRun.run();
                formRun.wait(true);
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SKS_BR_GLMappingRuleLookup_OffsetCompany</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();
            if(ret)
            {
                ret = element.checkProject(this.text(), SKS_BR_GLMappingRuleLookup.OffsetAccountType);
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SKS_BR_GLMappingRuleLookup_OffsetAccountType</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();
            if(ret)
            {
                ret = element.checkProject(SKS_BR_GLMappingRuleLookup.OffsetCompany, SKS_BR_GLMappingRuleLookup.OffsetAccountType);
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SKS_BR_GLMappingRuleLookup_OffsetLedgerDimension</Name>
				<Type>SegmentedEntry</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            FormControl formControl = SKS_BR_GLMappingRuleLookup_OffsetLedgerDimension;

            switch(SKS_BR_GLMappingRuleLookup.OffsetAccountType)
            {
                case LedgerJournalACType::Bank:
                    BankAccountTable::lookupBankAccount(formControl,
                                                        SKS_BR_GLMappingRuleLookup.OffsetCompany);
                    break;

                case LedgerJournalACType::Cust:
                    CustTable::lookupCustomer(formControl,
                                                SKS_BR_GLMappingRuleLookup.OffsetCompany);
                    break;

                case LedgerJournalACType::FixedAssets:
                    AssetTable::lookupAccountNum(formControl,
                                                    SKS_BR_GLMappingRuleLookup.OffsetCompany);
                    break;

                case LedgerJournalACType::Project:
                    ProjTable::lookupProjId(formControl,
                                            SKS_BR_GLMappingRuleLookup);
                    break;

                case LedgerJournalACType::Vend:
                    VendTable::lookupVendor(formControl,
                                            SKS_BR_GLMappingRuleLookup.OffsetCompany);
                    break;

                default:
                    super();
                    break;
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>checkUseCustomLookup</Name>
						<Source><![CDATA[
        /// <summary>
        /// Method verifis the customer lookup is valid
        /// </summary>
        /// <param name = "_accountTypeEnumValue">Account Type</param>
        /// <param name = "_secondaryAccountTypeEnumValue">Secondary Account Type</param>
        /// <returns>True if the customer account is valid, false if not.</returns>
        public boolean checkUseCustomLookup(int _accountTypeEnumValue, int _secondaryAccountTypeEnumValue)
        {
            boolean ret;

            ret = super(_accountTypeEnumValue, _secondaryAccountTypeEnumValue);

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SKS_BR_GLMappingRuleLookup_MatchingRuleGroupId</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            Query                   query = new Query();
            QueryBuildDataSource    queryBuildDataSource;
            QueryBuildRange         queryBuildRange;
            str                     rangeVal = isCalledFromCCReconciliation == true ? enum2Str(NoYes::Yes) : enum2Str(NoYes::No);
    
            
            // Create an instance of SysTableLookup where 'this'
            // is the current form control.
            SysTableLookup sysTableLookup =SysTableLookup::newParameters(tableNum(SKS_BR_MatchingRulesMast), this);
            
            // Add fields to be shown in the lookup form.
            sysTableLookup.addLookupField(fieldNum(SKS_BR_MatchingRulesMast, RuleGroupId));
            sysTableLookup.addLookupField(fieldNum(SKS_BR_MatchingRulesMast, Description));
            sysTableLookup.addLookupField(fieldNum(SKS_BR_MatchingRulesMast, ParseRule));
    
            // Limit and arrange the data selection.
            queryBuildDataSource = query.addDataSource(tableNum(SKS_BR_MatchingRulesMast));
            queryBuildRange = queryBuildDataSource.addRange(fieldNum(SKS_BR_MatchingRulesMast, CCR_IsCCReconciliation));
            queryBuildRange.value(rangeVal);
            sysTableLookup.parmQuery(query);
    
            // Perform the lookup.
            sysTableLookup.performFormLookup();
           // super();
        }

]]></Source>
					</Method>
					<Method>
						<Name>jumpRef</Name>
						<Source><![CDATA[
        // SKS_FDD_13903   Begin
        public void jumpRef()
        {
            MenuFunction menuFunction;
            Args         args = new args();

            args.record(SKS_BR_GLMappingRuleLookup);

            args.caller(element);

            if(isCalledFromCCReconciliation)
            {
                menuFunction = new MenuFunction(menuitemDisplayStr(SKS_CCR_MatchingRules), MenuItemType::Display);
            }
            else
            {
                menuFunction = new MenuFunction(menuitemDisplayStr(SKS_BR_MatchingRules), MenuItemType::Display);
            }

            menuFunction.run(args);
        }

        //SKS_FDD_13903     End

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SKS_BR_GLMappingRuleLookup_IntercoCompany</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();
            if(ret)
            {
                ret = element.checkProject(this.text(), SKS_BR_GLMappingRuleLookup.SKS_IHBIntercoAccountType);
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SKS_BR_GLMappingRuleLookup_IntercoAccountType</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();
            if(ret)
            {
                ret = element.checkProject(SKS_BR_GLMappingRuleLookup.SKS_IHBIntercoCompany, SKS_BR_GLMappingRuleLookup.SKS_IHBIntercoAccountType);
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SKS_BR_GLMappingRuleLookup_IntercoLedgerDimension</Name>
				<Type>SegmentedEntry</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            FormControl formControl = SKS_BR_GLMappingRuleLookup_IntercoLedgerDimension;

            switch(SKS_BR_GLMappingRuleLookup.SKS_IHBIntercoAccountType)
            {
                case LedgerJournalACType::Bank:
                    BankAccountTable::lookupBankAccount(formControl,
                                                        SKS_BR_GLMappingRuleLookup.SKS_IHBIntercoCompany);
                    break;

                case LedgerJournalACType::Cust:
                    CustTable::lookupCustomer(formControl,
                                                SKS_BR_GLMappingRuleLookup.SKS_IHBIntercoCompany);
                    break;

                case LedgerJournalACType::FixedAssets:
                    AssetTable::lookupAccountNum(formControl,
                                                    SKS_BR_GLMappingRuleLookup.SKS_IHBIntercoCompany);
                    break;

                case LedgerJournalACType::Project:
                    ProjTable::lookupProjId(formControl,
                                            SKS_BR_GLMappingRuleLookup);
                    break;

                case LedgerJournalACType::Vend:
                    VendTable::lookupVendor(formControl,
                                            SKS_BR_GLMappingRuleLookup.SKS_IHBIntercoCompany);
                    break;

                default:
                    super();
                    break;
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>checkUseCustomLookup</Name>
						<Source><![CDATA[
        public boolean checkUseCustomLookup(int _accountTypeEnumValue, int _secondaryAccountTypeEnumValue)
        {
            boolean ret;

            ret = super(_accountTypeEnumValue, _secondaryAccountTypeEnumValue);

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>SKS_BR_GLMappingRuleLookup</Name>
			<Table>SKS_BR_GLMappingRuleLookup</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>CategoryId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CCR_GLMatchOrCreate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CCR_IsCCReconciliation</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DDRRuleGroupId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>GLMatchOrCreate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LookupValue</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LookupValue2</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LookupValue2Sql</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LookupValueSql</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MatchingRuleGroupId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OffsetAccountType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OffsetCompany</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OffsetDefaultDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OffsetLedgerDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RuleGroupId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SearchOperator</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SKS_IHBIntercoAccountType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SKS_IHBIntercoCompany</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SKS_IHBIntercoDefaultDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SKS_IHBIntercoLedgerDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@SKS2213</Caption>
		<DataSource xmlns="">SKS_BR_GLMappingRuleLookup</DataSource>
		<Pattern xmlns="">SimpleList</Pattern>
		<PatternVersion xmlns="">1.1</PatternVersion>
		<SetCompany xmlns="">No</SetCompany>
		<Style xmlns="">SimpleList</Style>
		<Width xmlns="">800</Width>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>ActionPane</Name>
				<ElementPosition>429496729</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Type>ActionPane</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>RecordBasics</Name>
						<ElementPosition>1431655764</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>ButtonGroup</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>SKS_BR_GLMappingRuleDimension</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1968526675</ElementPosition>
								<Enabled>No</Enabled>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>MenuFunctionButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<MenuItemName>SKS_BR_GLMappingRuleDimension</MenuItemName>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>SKS_BR_GLMappingRuleLookupAdditional</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>MenuFunctionButton</Type>
								<FormControlExtension
									i:nil="true" />
								<DataSource>SKS_BR_GLMappingRuleLookup</DataSource>
								<MenuItemName>SKS_BR_GLMappingRuleLookupAdditional</MenuItemName>
								<SaveRecord>No</SaveRecord>
							</AxFormControl>
						</Controls>
						<ArrangeMethod>Vertical</ArrangeMethod>
					</AxFormControl>
				</Controls>
				<AlignChild>No</AlignChild>
				<AlignChildren>No</AlignChildren>
				<ArrangeMethod>Vertical</ArrangeMethod>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>CustomFilterGroup</Name>
				<ElementPosition>1288490187</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Pattern>CustomAndQuickFilters</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl>
						<Name>QuickFilterControl</Name>
						<FormControlExtension>
							<Name>QuickFilterControl</Name>
							<ExtensionComponents />
							<ExtensionProperties>
								<AxFormControlExtensionProperty>
									<Name>targetControlName</Name>
									<Type>String</Type>
									<Value>Grid</Value>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>defaultColumnName</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>placeholderText</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
							</ExtensionProperties>
						</FormControlExtension>
					</AxFormControl>
				</Controls>
				<AlignChild>No</AlignChild>
				<ArrangeMethod>HorizontalLeft</ArrangeMethod>
				<FrameType>None</FrameType>
				<Style>CustomFilter</Style>
				<ViewEditMode>Edit</ViewEditMode>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGridControl">
				<Name>Grid</Name>
				<ElementPosition>1431655764</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Type>Grid</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormComboBoxControl">
						<Name>SKS_BR_GLMappingRuleLookup_SearchOperator</Name>
						<ElementPosition>715827882</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>ComboBox</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>SearchOperator</DataField>
						<DataSource>SKS_BR_GLMappingRuleLookup</DataSource>
						<Items />
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>SKS_BR_GLMappingRuleLookup_LookupValue</Name>
						<ElementPosition>1073741823</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>LookupValue</DataField>
						<DataSource>SKS_BR_GLMappingRuleLookup</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>SKS_BR_GLMappingRuleLookup_LookupValue2</Name>
						<ElementPosition>1096111444</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>LookupValue2</DataField>
						<DataSource>SKS_BR_GLMappingRuleLookup</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormComboBoxControl">
						<Name>SKS_BR_GLMappingRuleLookup_GLMatchOrCreate</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1252698793</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>ComboBox</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>GLMatchOrCreate</DataField>
						<DataSource>SKS_BR_GLMappingRuleLookup</DataSource>
						<Items />
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormComboBoxControl">
						<Name>SKS_BR_GLMappingRuleLookup_CCR_GLMatchOrCreate</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>ComboBox</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>CCR_GLMatchOrCreate</DataField>
						<DataSource>SKS_BR_GLMappingRuleLookup</DataSource>
						<Items />
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>SKS_BR_GLMappingRuleLookup_OffsetCompany</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1431655763</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>OffsetCompany</DataField>
						<DataSource>SKS_BR_GLMappingRuleLookup</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormComboBoxControl">
						<Name>SKS_BR_GLMappingRuleLookup_OffsetAccountType</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1610612733</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>ComboBox</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>OffsetAccountType</DataField>
						<DataSource>SKS_BR_GLMappingRuleLookup</DataSource>
						<Items />
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormSegmentedEntryControl">
						<Name>SKS_BR_GLMappingRuleLookup_OffsetLedgerDimension</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1789569703</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>SegmentedEntry</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension>
							<Name>SegmentedEntryControl</Name>
							<ExtensionComponents />
							<ExtensionProperties>
								<AxFormControlExtensionProperty>
									<Name>parmControllerClassName</Name>
									<Type>String</Type>
									<TypeName>str</TypeName>
									<Value>DimensionDynamicAccountController</Value>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>parmIsDefaultAccount</Name>
									<Type>Enum</Type>
									<TypeName>boolean</TypeName>
									<Value>False</Value>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>parmValidateBlockedForManualEntry</Name>
									<Type>Enum</Type>
									<TypeName>NoYes</TypeName>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>parmLockMainAccountSegment</Name>
									<Type>Enum</Type>
									<TypeName>NoYes</TypeName>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>parmPostingType</Name>
									<Type>Enum</Type>
									<TypeName>LedgerPostingType</TypeName>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>parmIncludeTotalAccounts</Name>
									<Type>Enum</Type>
									<TypeName>NoYes</TypeName>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>parmIncludeFinancialAccounts</Name>
									<Type>Enum</Type>
									<TypeName>NoYes</TypeName>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>parmAccountTypeEnumName</Name>
									<Type>String</Type>
									<Value>OffsetAccountType</Value>
								</AxFormControlExtensionProperty>
							</ExtensionProperties>
						</FormControlExtension>
						<DataSource>SKS_BR_GLMappingRuleLookup</DataSource>
						<ReferenceField>OffsetLedgerDimension</ReferenceField>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>SKS_BR_GLMappingRuleLookup_CategoryId</Name>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>CategoryId</DataField>
						<DataSource>SKS_BR_GLMappingRuleLookup</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>SKS_BR_GLMappingRuleLookup_MatchingRuleGroupId</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1968526673</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>MatchingRuleGroupId</DataField>
						<DataSource>SKS_BR_GLMappingRuleLookup</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>SKS_BR_GLMappingRuleLookup_DDRRuleGroupId</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>DDRRuleGroupId</DataField>
						<DataSource>SKS_BR_GLMappingRuleLookup</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>SKS_BR_GLMappingRuleLookup_IntercoCompany</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1431655763</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>SKS_IHBIntercoCompany</DataField>
						<DataSource>SKS_BR_GLMappingRuleLookup</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormComboBoxControl">
						<Name>SKS_BR_GLMappingRuleLookup_IntercoAccountType</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1610612733</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>ComboBox</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>SKS_IHBIntercoAccountType</DataField>
						<DataSource>SKS_BR_GLMappingRuleLookup</DataSource>
						<Items />
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormSegmentedEntryControl">
						<Name>SKS_BR_GLMappingRuleLookup_IntercoLedgerDimension</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1789569703</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>SegmentedEntry</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension>
							<Name>SegmentedEntryControl</Name>
							<ExtensionComponents />
							<ExtensionProperties>
								<AxFormControlExtensionProperty>
									<Name>parmControllerClassName</Name>
									<Type>String</Type>
									<TypeName>str</TypeName>
									<Value>DimensionDynamicAccountController</Value>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>parmIsDefaultAccount</Name>
									<Type>Enum</Type>
									<TypeName>boolean</TypeName>
									<Value>False</Value>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>parmValidateBlockedForManualEntry</Name>
									<Type>Enum</Type>
									<TypeName>NoYes</TypeName>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>parmLockMainAccountSegment</Name>
									<Type>Enum</Type>
									<TypeName>NoYes</TypeName>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>parmPostingType</Name>
									<Type>Enum</Type>
									<TypeName>LedgerPostingType</TypeName>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>parmIncludeTotalAccounts</Name>
									<Type>Enum</Type>
									<TypeName>NoYes</TypeName>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>parmIncludeFinancialAccounts</Name>
									<Type>Enum</Type>
									<TypeName>NoYes</TypeName>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>parmAccountTypeEnumName</Name>
									<Type>String</Type>
									<Value>SKS_IHBIntercoAccountType</Value>
								</AxFormControlExtensionProperty>
							</ExtensionProperties>
						</FormControlExtension>
						<DataSource>SKS_BR_GLMappingRuleLookup</DataSource>
						<ReferenceField>SKS_IHBIntercoLedgerDimension</ReferenceField>
					</AxFormControl>
				</Controls>
				<AlternateRowShading>No</AlternateRowShading>
				<DataSource>SKS_BR_GLMappingRuleLookup</DataSource>
				<MultiSelect>No</MultiSelect>
				<ShowRowLabels>No</ShowRowLabels>
				<Style>Tabular</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>