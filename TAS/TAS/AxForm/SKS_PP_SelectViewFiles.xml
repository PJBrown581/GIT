<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>SKS_PP_SelectViewFiles</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class SKS_PP_SelectViewFiles extends FormRun
{
    SKS_PP_FormatId SelectedFormat;
    BankAccountId SelectedAccount;
    ChequeStatus SelectedChequeStatus;
    SKS_EB_CommID   selectedCommID;
    TransDate       endDate;
                          
    [FormObservable]
    SelectableDataArea currentCompany;
    SKS_PP_File SKS_PP_File;
    Container companies;
    //Because we limit what you can see for fixed time files to those items that were in it to begin with, we need to know if this was a fixed time file to start with.
    boolean gDisplayOnlyTheRecordsForThisFile;
}
]]></Source>
			</Method>
			<Method>
				<Name>checkStartEndDates</Name>
				<Source><![CDATA[
    void checkStartEndDates( boolean isStartDate, str msgboxRange, str msgboxSelect) // Unused feature.  This was used for forced date ranges.
    {
        BankChequeTable tmpBankChequeTable;
        SKS_PP_FileNbr SKS_PP_FileNbr;
        boolean     alreadyInformedOnce;
        ;

        alreadyInformedOnce = false;

        if ( SKS_PP_File.ChequeCount > 0)
        {
            // Does the date fit in the range of the selected items?
            SKS_PP_FileNbr = SKS_PP_File.FileNbr;
            SKS_PP_Bank_ds.executeQuery();

            if ( isStartDate == true )
            {
                select crossCompany:companies tmpBankChequeTable
                        order by tmpBankChequeTable.TransDate asc
                        where tmpBankChequeTable.SKS_PP_Selected == true &&
                            (tmpBankChequeTable.SKS_PP_File_RecId == SKS_PP_File.RecId || tmpBankChequeTable.SKS_PP_File_RecId == 0);
                if ( tmpBankChequeTable)
                {
                    if (StartDate.dateValue() > tmpBankChequeTable.TransDate)
                    {
                        if ( strlen(msgboxSelect) > 0 )
                        {
                            box::info(msgboxSelect);
                        }
                        StartDate.dateValue(tmpBankChequeTable.TransDate);
                        alreadyInformedOnce = true;
                    }
                }

            }
            else
            {
                select crossCompany:companies tmpBankChequeTable
                        order by tmpBankChequeTable.TransDate desc
                        where tmpBankChequeTable.SKS_PP_Selected == true &&
                            (tmpBankChequeTable.SKS_PP_File_RecId == SKS_PP_File.RecId || tmpBankChequeTable.SKS_PP_File_RecId == 0);
                if ( tmpBankChequeTable)
                {
                    if (endDate < tmpBankChequeTable.TransDate)
                    {
                        box::info(msgboxSelect);
                        endDate = tmpBankChequeTable.TransDate;
                        alreadyInformedOnce = true;
                    }
                }
            }

        }
        if ( StartDate.dateValue() > endDate)
        {
            // Start date should be <= to End date
            if ( alreadyInformedOnce == false)
            {
                box::info(msgboxRange);
            }

            if ( isStartDate == true )
            {
                StartDate.dateValue(endDate);
            }
            else
            {
                endDate = StartDate.dateValue();
            }
        }

        SKS_PP_Bank_ds.executeQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>close</Name>
				<Source><![CDATA[
    public void close()
    {
        BankChequeTable locBankChequeTable, locUpdateBankChequeTable;

        //Clear the checkboxes for any of our records that might be selected.
        //These will get remarked when the file is opened next time
        ttsBegin;
        while select crossCompany:companies DataAreaId
        from locBankChequeTable
        group by locBankChequetable.dataAreaId
        where locBankChequeTable.SKS_PP_File_RecId == SKS_PP_File.RecId
        {
            locUpdateBankChequeTable = null;
            changeCompany(locBankChequetable.dataAreaId)
            {
                locUpdateBankChequeTable.skipDataMethods(true);
                update_recordSet locUpdateBankChequeTable
                    setting
                        SKS_PP_Selected = false
                    where
                        locUpdateBankChequeTable.SKS_PP_File_RecId == SKS_PP_File.Recid;
            }
        }
        ttsCommit;
        element.args().caller().refreshParent();
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        SKS_EB_CommProcess locSKS_EB_CommProcess;
        ;
        super();


        if (element.args().record() && element.args().record().TableId == tablenum(SKS_PP_File))
        {
            SKS_PP_File = element.args().record();
            if(strLen(SKS_PP_File.CommID) > 0)
            {
                select firstOnly FileCreateType from locSKS_EB_CommProcess where locSKS_EB_CommProcess.commid == SKS_PP_File.CommId;
                //if it is fixed time, the we only display the records.
                gDisplayOnlyTheRecordsForThisFile = locSKS_EB_CommProcess.FileCreateType == SKS_EB_FileCreate::FixedTime;
            }
            endDate = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());

            select * from SKS_PP_Setup;

            SKS_PP_Setup_PPAPCancel.value(SKS_PP_Setup.PPAPCancelled);
            SKS_PP_Setup_PPAPReject.value(SKS_PP_Setup.PPAPRejected);

            companies = SKS_EB_VirtualCompany::getPosPayCompanies();
            currentCompany = curext();
        }
        else
        {
            throw error("@SYS96590"); //Form cannot be called directly.
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        super();
        element.wait(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ValidCheckStatusCriteria</Name>
				<Source><![CDATA[
    boolean ValidCheckStatusCriteria( ChequeStatus CheckStatus)
    {
        boolean retval = false;

        if ( SKS_PP_FileFormat.VoidChkSeparate == false)
        {
            if (CheckStatus == ChequeStatus::Payment)
            {
                retval = true;
            }
            else
            {
                if (CheckStatus == ChequeStatus::Rejected && SKS_PP_Setup_PPAPReject.value() == NoYes::Yes)
                {
                    retval = true;
                }
                else
                {
                    if (CheckStatus == ChequeStatus::Cancelled && SKS_PP_Setup_PPAPCancel.value() == NoYes::Yes)
                    {
                        retval = true;
                    }
                }
            }
        }
        else if ( SelectedChequeStatus == ChequeStatus::Payment)
        {
            if (CheckStatus == ChequeStatus::Payment)
            {
                retval = true;
            }
        }
        else
        {
            if (CheckStatus == ChequeStatus::Rejected && SKS_PP_Setup_PPAPReject.value() == NoYes::Yes)
            {
                retval = true;
            }
            else
            {
                if (CheckStatus == ChequeStatus::Cancelled && SKS_PP_Setup_PPAPCancel.value() == NoYes::Yes)
                {
                    retval = true;
                }
            }
        }

        return retval;
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>SKS_PP_Bank</Name>
				<Methods>
					<Method>
						<Name>linkActive</Name>
						<Source><![CDATA[
        public void linkActive()
        {
            BankChequeTable tmpBankChequeTable;
            SKS_PP_Bank tmpSKS_PP_Bank;
            SKS_EB_CommProcess  sks_eb_commprocess;
            ;

            SelectedFormat = '';
            SelectedAccount = '';
            SelectedCommID = '';

            StartDate.dateValue(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()) - 60);

            select filecreatetype from SKS_EB_CommProcess where SKS_EB_CommProcess.CommID == sks_pp_File.CommID;


            if(SKS_PP_File.KeepDelete != SKS_PP_FileStatus::NotProcessed)
            {
                BankChequeTable_SKS_PP_Selected.allowEdit(false);
                ButtonGroup.visible(false);
                SKS_PP_Setup_PPAPCancel.visible(false);
                SKS_PP_Setup_PPAPReject.visible(false);
                ShowChecksAlreadyPP.visible(false);
                StartDate.visible(false);
            }
            else
            {
                BankChequeTable_SKS_PP_Selected.allowEdit(true);
                ButtonGroup.visible(true);
                SKS_PP_Setup_PPAPCancel.visible(true);
                SKS_PP_Setup_PPAPReject.visible(true);
                ShowChecksAlreadyPP.visible(true);
                StartDate.visible(true);
            }

            SelectedAccount = '';
            SelectedFormat = '';
            SelectedCommId = '';

            ttsbegin;

            while select forupdate crossCompany:companies tmpBankChequeTable
                    order by tmpBankChequeTable.dataAreaId
                    where tmpBankChequeTable.SKS_PP_File_RecId == SKS_PP_FilE.RecId
            {
                changeCompany(tmpBankChequeTable.dataAreaId)
                {

                    SelectedAccount = tmpBankChequeTable.AccountID;
                    SelectedChequeStatus = tmpBankChequeTable.ChequeStatus;
                    //upon loading a new file, we need to set the selected flags to get the check marks to show
                    if(!tmpBankChequeTable.SKS_PP_Selected)
                    {
                        tmpBankChequeTable.SKS_PP_Selected = True;
                        tmpBankChequeTable.update();
                    }
                }
            }

            ttscommit;
            super();

            SelectCount.value(SKS_PP_File.ChequeCount);
            if ( SKS_PP_File.ChequeCount > 0 )
            {
                ClearAll.enabled(true);
                SelectAll.enabled(true);
                changeCompany(SKS_PP_File.company())
                {
                    select PPFormatId,PPOutCommID  from tmpSKS_PP_Bank where tmpSKS_PP_Bank.BankAccountId == SelectedAccount;
                }
                SelectedFormat = tmpSKS_PP_Bank.PPFormatId;
                SelectedCommid = tmpSKS_PP_Bank.PPOutCommID;
                SKS_PP_Bank_ds.executeQuery();
            }

            //disable currency field
            BankChequeTable_ds.object(fieldNum(BankChequeTable,CurrencyCode)).allowEdit(false);




        }

]]></Source>
					</Method>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        public void executeQuery()
        {
            str queryExpression;
            str SKS_PP_File_RecIDName;
            str chequeStatusName;
            str transDateName;
            boolean orFlag;
            Counter conCount;
            QueryBuildRange qbrRange;
            SKS_EB_CommProcess locSKS_EB_CommProcess;
            str locBankChequeTableChequeStatusFieldName;
            str locSKS_PP_ExcludedMOPsIncludeVoidsFieldName;
            str locSKS_PP_ExcludedMOPsIncludeCancelledFieldName;

            select firstOnly CommID, FileCreateType from locSKS_EB_CommProcess where locSKS_EB_CommProcess.CommID == SKS_PP_Bank.PPOutCommID;
            this.query().dataSourceTable(tablenum(SKS_PP_Bank)).clearRanges();
            this.query().dataSourceTable(tablenum(BankChequeTable)).clearRanges();
            this.query().dataSourceTable(tableNum(SKS_PP_ExcludedMOPs)).clearRanges();

            for(conCount = 1; conCount <= conlen(companies);conCount++)
            {
                this.query().addCompanyRange(conpeek(companies, conCount));
            }

            chequeStatusName = tableid2name(tablenum(BankChequeTable)) + '.' + fieldid2name(tablenum(BankChequeTable), fieldnum(BankChequeTable, ChequeStatus));
            transDateName = tableid2name(tablenum(BankChequeTable)) + '.' + fieldid2name(tablenum(BankChequeTable), fieldnum(BankChequeTable, TransDate));
            SKS_PP_File_RecIDName = tableid2name(tablenum(BankChequeTable)) + '.' + fieldid2name(tablenum(BankChequeTable), fieldnum(BankChequeTable, SKS_PP_File_RecID));

            orFlag = false;

            if ( SKS_PP_File.ChequeCount > 0 )
            {
                if ( SKS_PP_FileFormat.MultiAcctAllowed == True)
                {
                    qbrRange = this.query().dataSourceTable(tablenum(SKS_PP_Bank)).addRange(fieldnum(SKS_PP_Bank, PPFormatId));
                    qbrRange.value(SelectedFormat);
                    qbrRange.status(RangeStatus::Hidden);
                }
                else
                {
                    qbrRange = this.query().dataSourceTable(tablenum(SKS_PP_Bank)).addRange(fieldnum(SKS_PP_Bank, BankAccountId));
                    qbrRange.value( SelectedAccount);
                    qbrRange.status(RangeStatus::Hidden);

                    //some customers have bank accounts with the same id in different companies.
                    //if they print checks out of those companies and positive pay isn't set up,
                    //this range prevents those checks from displaying
                    qbrRange = this.query().dataSourceTable(tablenum(SKS_PP_Bank)).addRange(fieldnum(SKS_PP_Bank, PPFormatId));
                    qbrRange.value(sysQuery::valueNotEmptyString());
                    qbrRange.status(RangeStatus::Hidden);
                }
            }
            else
            {
                qbrRange = this.query().dataSourceTable(tablenum(SKS_PP_Bank)).addRange(fieldnum(SKS_PP_Bank, PPFormatId));
                qbrRange.value(sysQuery::valueNotEmptyString());
                qbrRange.status(RangeStatus::Hidden);
            }



            if ( ShowChecksAlreadyPP.value() == NoYes::No)
            {

                if ( SKS_PP_File.KeepDelete == SKS_PP_FileStatus::Completed ||
                     SKS_PP_File.KeepDelete == SKS_PP_FileStatus::Kept ||
                     SKS_PP_File.KeepDelete == SKS_PP_FileStatus::FileCreated ||
                     SKS_PP_File.KeepDelete == SKS_PP_FileStatus::NotProcessed && gDisplayOnlyTheRecordsForThisFile)//this is for fixed time files.  Don't display any additional records.
                {
                    queryExpression = '((' + SKS_PP_File_RecIDName +  ' == ' + queryValue(int642str(SKS_PP_File.RecId)) + '))';
                }
                else
                {
                    queryExpression = '(' + SKS_PP_File_RecIDName +  ' == ' + queryValue(int642str(SKS_PP_File.RecId)) +
                                         ') || ( (' +
                                         SKS_PP_File_RecIDName + ' == 0) && (' +
                                         transDateName + ' >= ' + date2StrXpp(StartDate.dateValue()) + ') )';
                }
            }
            else
            {
                queryExpression = '(' + SKS_PP_File_RecIDName +  ' == ' + queryValue(int642str(SKS_PP_File.RecId)) +
                                     ') || ( (' +
                                     SKS_PP_File_RecIDName + ' != ' + queryValue(int642str(SKS_PP_File.RecId)) +  ') && (' +
                                     transDateName + ' >= ' + date2StrXpp(StartDate.dateValue()) + ') )';
            }
            qbrRange = this.query().dataSourceTable(tablenum(BankChequeTable)).addRange(fieldnum(BankChequeTable, SKS_PP_FileNbr));
            qbrRange.value( queryExpression);
            qbrRange.status(RangeStatus::Hidden);

            // Only restrict if not processed and not a fixed time with checks attached.  Fixed time does not allow adds once checks are attached to it.
            if(SKS_PP_File.KeepDelete == SKS_PP_FileStatus::NotProcessed && !(locSKS_EB_CommProcess.FileCreateType == SKS_EB_FileCreate::FixedTime && SKS_PP_File.ChequeCount > 0))
            {
                if ( strlen(SelectedAccount) != 0 && SKS_PP_FileFormat.VoidChkSeparate == True)
                {
                    if ( SelectedChequeStatus == ChequeStatus::Payment)
                    {
                        queryExpression = '((' + chequeStatusName +  ' == ' + QueryValue(enum2int(ChequeStatus::Payment)) + ')';
                    }
                    else
                    {
                        if ( SKS_PP_Setup_PPAPCancel.value() == NoYes::Yes)
                        {
                            queryExpression = '((' + chequeStatusName +  ' == ' + QueryValue(enum2int(ChequeStatus::Cancelled)) + ')';
                            orFlag = true;
                        }

                        if ( SKS_PP_Setup_PPAPReject.value() == NoYes::Yes)
                        {
                            if ( orFlag == true)
                            {
                                queryExpression += ' || (';
                            }
                            else
                            {
                                queryExpression = '((';
                                orFlag = true;
                            }
                            queryExpression += chequeStatusName +  ' == ' + QueryValue(enum2int(ChequeStatus::Rejected)) + ')';
                        }

                    }
                }
                else
                {
                    queryExpression = '((' + chequeStatusName +  ' == ' + QueryValue(enum2int(ChequeStatus::Payment)) + ')';

                    if ( SKS_PP_Setup_PPAPCancel.value() == NoYes::Yes)
                    {
                        queryExpression += ' || (' + chequeStatusName +  ' == ' + QueryValue(enum2int(ChequeStatus::Cancelled)) + ')';
                    }

                    if ( SKS_PP_Setup_PPAPReject.value() == NoYes::Yes)
                    {
                        queryExpression += ' || (' + chequeStatusName +  ' == ' + QueryValue(enum2int(ChequeStatus::Rejected)) + ')';
                    }
                }
            }
            queryExpression += ')';

            qbrRange = this.query().dataSourceTable(tablenum(BankChequeTable)).addRange(fieldnum(BankChequeTable, ChequeStatus));
            qbrRange.value( queryExpression);
            qbrRange.status(RangeStatus::Hidden);

            locBankChequeTableChequeStatusFieldName = tableid2name(tablenum(BankChequeTable)) + '.' + fieldid2name(tablenum(BankChequeTable), fieldnum(BankChequeTable, ChequeStatus));
            locSKS_PP_ExcludedMOPsIncludeVoidsFieldName = tableid2name(tablenum(SKS_PP_ExcludedMOPs)) + '.' + fieldid2name(tablenum(SKS_PP_ExcludedMOPs), fieldnum(SKS_PP_ExcludedMOPs, IncludeVoids));
            locSKS_PP_ExcludedMOPsIncludeCancelledFieldName = tableid2name(tablenum(SKS_PP_ExcludedMOPs)) + '.' + fieldid2name(tablenum(SKS_PP_ExcludedMOPs), fieldnum(SKS_PP_ExcludedMOPs, IncludeCancelled));
            queryExpression = ' ((( ' + locBankChequeTableChequeStatusFieldName + ' != ' +  queryValue(enum2int(ChequeStatus::Cancelled)) + ' ) '
                                + ' && ( ' + locBankChequeTableChequeStatusFieldName + ' != ' +  queryValue(enum2int(ChequeStatus::Rejected)) + ') ) '
                            + ' || '
                                + ' (( ' + locBankChequeTableChequeStatusFieldName + ' == ' +  queryValue(enum2int(ChequeStatus::Rejected)) + ' ) '
                                    + ' && ( ' + locSKS_PP_ExcludedMOPsIncludeVoidsFieldName + ' != ' + queryValue(enum2int(SKS_PP_IncludeVoids::Yes)) + ' )) ' // you have to flip this to neg if you want the voids included because the SKS_PP_ExcludedMOPs is a notExistsJoin
                            + ' || '
                                + ' ((' + locBankChequeTableChequeStatusFieldName + ' == ' +  queryValue(enum2int(ChequeStatus::Cancelled)) + ' ) '
                                    + ' && ( ' + locSKS_PP_ExcludedMOPsIncludeCancelledFieldName + ' != ' + queryValue(enum2int(SKS_PP_IncludeCancelled::Yes)) + ' )))';// you have to flip this to neg if you want the cancelled included because the SKS_PP_ExcludedMOPs is a notExistsJoin
            qbrRange = this.query().dataSourceTable(tablenum(SKS_PP_ExcludedMOPs)).addRange(fieldnum(SKS_PP_ExcludedMOPs, PaymMode));
            qbrRange.value( queryExpression);
            qbrRange.status(RangeStatus::Hidden);
            // ^^^ 14885 ^^^



            this.query().dataSourceTable(tablenum(BankChequeTable)).addSortField(fieldnum(BankChequeTable, ChequeNum),SortOrder::Descending);
            super();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>BankChequeTable</Name>
				<Methods>
					<Method>
						<Name>fileStatus</Name>
						<Source><![CDATA[
        // BP Deviation Documented
        display SKS_PP_FileStatus fileStatus(BankChequeTable _bankChequeTable)
        {
            SKS_PP_File sks_pp_fileStatus;
            ;
            if(_bankChequeTable.SKS_PP_FileNbr != '')
            {
                changeCompany(currentCompany)
                {
                    select KeepDelete from sks_pp_fileStatus where sks_pp_fileStatus.FileNbr == _bankChequeTable.SKS_PP_FileNbr;
                }
            }
            return sks_pp_fileStatus.KeepDelete;
        }

]]></Source>
					</Method>
				</Methods>
				<Fields>
					<Field>
						<DataField>SKS_PP_Selected</DataField>
						<Methods>
							<Method>
								<Name>validate</Name>
								<Source><![CDATA[
            /// <summary>
            /// Verifies the selected value.
            /// </summary>
            /// <returns>True if the value is valid</returns>
            public boolean validate()
            {
                boolean ret;

                ret = super();
                //If this cheque previously belonged to another file, warn the user and give them an option to abort the change.
                if (BankChequeTable.orig().SKS_PP_File_RecId != 0 && BankChequeTable.SKS_PP_Selected)
                {
                    if(Box::yesNo( "@SKS237", DialogButton::No, "@SKS155") == DialogButton::No)
                    {
                        ret = false;
                    }

                }

                return ret;
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
				</Fields>
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>SelectAll</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            BankChequeTable locBankChequeTable;
            SKS_PP_Bank locPPBank;
            SelectableDataArea locPrevCompany;
            boolean locVoidsFound = false, locPaymentsFound = false;
            BankAccountID locPrevAccountId;

            super();
            ttsbegin;
            locBankChequeTable = BankChequeTable_ds.getFirst(false); //priming read
            locPPBank = SKS_PP_Bank_ds.getFirst(false);

            while (locBankChequeTable)
            {
                if(locPPBank.PPFormatId != SelectedFormat)
                {
                    locBankChequeTable = BankChequeTable_ds.getNext();
                    locPPBank = SKS_PP_Bank_ds.getNext();
                    continue;
                }

                //if the record is not selected, select it.
                //  this is necessary because, if the records was previously selected, the DS will complain about
                //  trying to reselect it
                if(!locBankChequeTable.SKS_PP_Selected
                    &&  element.ValidCheckStatusCriteria(locBankChequeTable.ChequeStatus)
                    && (locBankChequeTable.SKS_PP_FileNbr == '' || locBankChequeTable.SKS_PP_File_RecId == SKS_PP_File.RecId))
                {
                    //watch for mulitAccounts going into the same file
                    if(!SKS_PP_FileFormat.MultiAcctAllowed)
                    {
                        //First time in, need to set these
                        if(locPrevAccountId == ''&& locPrevCompany == '')
                        {
                            locPrevAccountId = locBankChequeTable.AccountID;
                            locPrevCompany = locBankChequeTable.company();
                        }
                        else if(locPrevAccountId != locBankChequeTable.AccountID
                                    ||locPrevCompany != locBankChequeTable.company())
                        {
                            error(strFmt("@SKS3939",
                                        SKS_PP_File.FormatId));
                            ttsAbort;
                            return;
                        }
                    }

                    //watch for voids attempting to enter the same file as cheques
                    if(SKS_PP_FileFormat.VoidChkSeparate)
                        {
                        if(BankChequeTable.ChequeStatus == ChequeStatus::Payment)
                        {
                            locPaymentsFound = true;
                        }
                        else
                        {
                            locVoidsFound = true;
                        }
                        if(locPaymentsFound &&  locVoidsFound)
                        {
                            error(strFmt("@SKS3940",
                                        SKS_PP_FileFormat.FormatId));
                            ttsAbort;
                            return;
                        }
                    }
                    SKS_PP_File.ChequeCount += 1;
                    SKS_PP_File.ChequeTotal += locBankChequeTable.AmountCur;
                    locBankChequeTable.SKS_PP_File_RecId = SKS_PP_File.Recid;
                    locBankChequeTable.SKS_PP_FileNbr = SKS_PP_File.FileNbr;
                    locBankChequeTable.SKS_PP_Selected = true;
                    changeCompany(locBankChequeTable.company())
                    {
                        locBankChequeTable.update();
                    }

                }
                locBankChequeTable = BankChequeTable_ds.getNext();
                locPPBank = SKS_PP_Bank_ds.getNext();
            }
            SKS_PP_File.update();
            ttscommit;
            SKS_PP_Bank_ds.executeQuery();
            SelectCount.value(SKS_PP_File.ChequeCount);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ClearAll</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {

            BankChequeTable  locBankChequeTable, locUpdateBankChequeTable;

            super();
            ttsbegin;
            while select crosscompany dataareaid from locBankChequeTable
                    group by locBankChequeTable.dataAreaId
                    where locBankChequeTable.SKS_PP_File_RecId == SKS_PP_File.Recid
            {
                changeCompany(locBankChequeTable.dataAreaId)
                {
                    locUpdateBankChequeTable = null;
                    locUpdateBankChequeTable.skipDataMethods(true);
                    update_recordSet locUpdateBankChequeTable
                    setting
                        SKS_PP_File_RecId = 0,
                        SKS_PP_FileNbr = '',
                        SKS_PP_Selected = 0
                    where locUpdateBankChequeTable.SKS_PP_File_RecId == SKS_PP_File.RecId;
                }
            }
            SKS_PP_File.ChequeCount = 0;
            SKS_PP_File.ChequeTotal = 0;
            SelectedChequeStatus = ChequeStatus::Testprint;
            SKS_PP_File.FormatId = '';
            SKS_PP_File.CommID = '';
            SelectedAccount = '';
            SelectAll.enabled(false);
            ttscommit;

            SKS_PP_Bank_ds.executeQuery();
            SelectCount.value(SKS_PP_File.ChequeCount);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SKS_PP_Setup_PPAPCancel</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();

            // Execute Query.
            SKS_PP_Bank_ds.executeQuery();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SKS_PP_Setup_PPAPReject</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();

            // Execute Query.
            SKS_PP_Bank_ds.executeQuery();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ShowChecksAlreadyPP</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();

            // Execute Query.
            SKS_PP_Bank_ds.executeQuery();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>StartDate</Name>
				<Type>Date</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();

            SKS_PP_Bank_ds.executeQuery();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>BankChequeTable_SKS_PP_Selected</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            SKS_PP_FileDetail   locOrigSKS_PP_FileDetail,
                                locNewSKS_PP_FileDetail;
            SKS_PP_File locSKS_PP_File;
            boolean ret;

            ret = super();
            ttsBegin;
            //IF RECORD IS NOW SELECTED...
            if(this.value())
            {
                //IF THE RECORD WAS PREVIOUSLY A MEMBER OF A DIFFERENT FILE. AND THAT FILE IS "NOT PROCESSED"
                if (BankChequeTable.SKS_PP_File_RecId != 0
                    && BankChequeTable.SKS_PP_File_RecId != SKS_PP_File.Recid)
                {
                    //SELECT THE OLD FILE, REMOVE THE CHEQUE,
                    //THEN Remap the Cheque to the new file.

                    select forupdate crossCompany:companies locOrigSKS_PP_FileDetail
                        Where locOrigSKS_PP_FileDetail.ChkRefNbr == BankChequeTable.ChequeNum
                            && locOrigSKS_PP_FileDetail.ChkCpnyId == BankChequeTable.company()
                       join forUpdate locSKS_PP_File
                            where locSKS_PP_File.RecId == BankChequeTable.SKS_PP_File_Recid;
                    if(locOrigSKS_PP_FileDetail)
                    {
                        //the new file detail must be created in the context of the new file's company.
                        changeCompany(SKS_PP_File.company())
                        {
                            buf2Buf(locOrigSKS_PP_FileDetail, locNewSKS_PP_FileDetail);
                            locNewSKS_PP_FileDetail.filenbr = SKS_PP_File.FileNbr;
                            locNewSKS_PP_FileDetail.insert();
                        }
                        //the original file detail must be deleted in the context of the original company

                        changeCompany(locOrigSKS_PP_FileDetail.company())
                        {
                            //if it has gone to the bank, keep the original record.
                            //that way the audit.
                            if(SKS_PP_file.KeepDelete == SKS_PP_FileStatus::NotProcessed)
                            {
                                locOrigSKS_PP_FileDetail.delete();
                            }
                            //Do not need to CrossCompany, as the SKS_PP_File MUST exist in the same
                            // company as the SKS_PP_FileDetail record we just deleted
                            locSKS_PP_File.ChequeCount -= 1;
                            locSKS_PP_File.ChequeTotal -= BankChequeTable.AmountCur;
                            if(locSKS_PP_File.ChequeCount == 0)
                            {
                                locSKS_PP_File.FormatId = '';
                                locSKS_PP_File.CommID = '';
                                locSKS_PP_File.FileName = '';
                                locSKS_PP_File.FilePath = '';
                            }
                            locSKS_PP_File.update();
                        }
                    }
                }
                BankChequeTable.SKS_PP_File_RecId = SKS_PP_File.RecId;
                BankChequeTable.SKS_PP_FileNbr = SKS_PP_File.FileNbr;
                //if we have marked a record, and it is going to be the first in this file, set the account and format id
                if(SKS_PP_File.ChequeCount == 0)
                {
                    SelectedAccount = BankChequeTable.AccountID;
                    SelectedFormat = SKS_PP_Bank.PPFormatId;
                }
                SelectedChequeStatus = BankChequeTable.ChequeStatus;
                //incrementing the cheque counter MUSt follow the preceding IF statement
                SKS_PP_File.ChequeCount += 1;
                SKS_PP_File.ChequeTotal += BankChequeTable.AmountCur;
                if(strLen(SKS_PP_File.FormatId) == 0)
                {
                    SKS_PP_File.FormatId = SKS_PP_Bank.PPFormatId;
                    SKS_PP_File.CommID = SKS_PP_Bank.PPOutCommID;
                }
            }
            else//  This is the else for "if(this.value())"
            {
                BankChequeTable.SKS_PP_File_RecId = 0;
                BankChequeTable.SKS_PP_FileNbr = '';
                SKS_PP_File.ChequeCount -= 1;
                if ( SKS_PP_File.ChequeCount == 0)
                {
                    SelectedChequeStatus = ChequeStatus::Testprint;
                    SKS_PP_File.FormatId = '';
                    SKS_PP_File.CommID = '';
                    SelectedAccount = '';
                }
                SKS_PP_File.ChequeTotal -= BankChequeTable.AmountCur;
            }

            changeCompany(BankChequeTable.company())
            {
                BankChequeTable.update();
            }
            changeCompany(SKS_PP_File.company())
            {
                SKS_PP_File.update();
            }
            ttsCommit;

            if(SKS_PP_File.ChequeCount == 0)
            {
                SelectAll.enabled(false);
            }
            else
            {
                selectAll.enabled(true);
            }
            SelectCount.value(SKS_PP_File.ChequeCount);

            SKS_PP_Bank_ds.research(true);

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>SKS_PP_Bank</Name>
			<Table>SKS_PP_Bank</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AcctType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AlternateBankID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AltLBAcctLookup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ApplyDiscOfImportFile</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AutoPostOnImportOptionInvOverpay</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AutoPostOnImportOptionInvShortpay</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AutoPostOnImportOptionPayEqualsInvoice</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankAccountId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BRAutoReconcile</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BRBankHolidayGroupID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BRBatchJobId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BRCreateBankStatements</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BRCreateBankStatementsIfNoTrans</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BREmail</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BRFormatID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BRFromSetup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BRInCommID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BRNotifyMinusDays</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BRNotifyStatements</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BRNotifyUserId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BRPath</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultDimensionFromInvoice</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InvoiceSearchCrossComp</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LBArchive</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LBArchivePath</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LBDelete</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LBFormatId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LBFromSetup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LBJournalName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LBPath</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LBSuggCustGood</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MatchingRulesGroupIdCustSettle</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PP01</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PP02</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PP03</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PP04</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PPArchive</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PPArchivePath</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PPCommType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PPCommUserProg</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PPDelete</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PPFileName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PPFormatId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PPFromSetup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PPHeadTrailId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PPOutCommID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PPOutServerSideFileProc</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PPPath</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PPPath1</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>UseeBankRecBankStatementMonitorDefaults</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>UseeBankRecCustSettlementSetupDefaults</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<CrossCompanyAutoQuery>Yes</CrossCompanyAutoQuery>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>SKS_PP_FileFormat</Name>
			<Table>SKS_PP_FileFormat</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>BankPP01Descr</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankPP01Mask</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankPP02Descr</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankPP02Mask</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankPP03Descr</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankPP03Mask</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankPP04Descr</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankPP04Mask</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankTransitNoCD</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BlockFill</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Crlf</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Descr</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FormatId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LastEffDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LeadingSpace</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MultiAcctAllowed</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecordLen</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Selected</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TrailerRecord</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TrimRecord</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VoidChkSeparate</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>SKS_PP_Bank</JoinSource>
			<LinkType>OuterJoin</LinkType>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>SKS_PP_Setup</Name>
			<Table>SKS_PP_Setup</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>ApplyDiscOfImportFile</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AutoCR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AutoCRAutoRev</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AutoCRCreateCR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AutoPostOnImportOptionInvOverPay</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AutoPostOnImportOptionInvShortpay</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AutoPostOnImportOptionPayEqualsInvoice</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BRArchiveNbr</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BRAutomaticallyPostGL</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BRAutoReconcile</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BRBankHolidayGroupID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BRBatchJobId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BRCreateBankStatements</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BRCreateBankStatementsIfNoTrans</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BRDateTolerance</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BREdition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BREmail</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BRGLCreationCompany</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BRInCommID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BRJournalName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BRNotifyMinusDays</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BRNotifyStatements</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BRNotifyUserId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BRPath</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CCCustCrdrCrdARSync</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CCSalesOrderManageSync</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultDimensionFromInvoice</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EFTLicensedFormats</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FFTPM</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InvoiceSearchCrossComp</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>JournalName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LBAllowDuplicateChks</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LBAlwaysApplyDisc</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LBArchive</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LBArchiveNbr</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LBAutoCreateDepSlip</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LBAutoDefaultCust</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LBAutoIgnoreErr</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LBAutoPmtJrnl</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LBAutoServerSide</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LBCommType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LBCommUserProg</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LBDefaultFromCust</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LBDefaultFromJournal</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LBDelete</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LBDimensionInGrid</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LBErrorGridAllowMovePmt</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LBErrorShowChgdPmt</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LBFilePeriodsRet</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LBInboundCommID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LBLookupNumSeqMask</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LBMergeDataFile</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LBOnlyApplyGood</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LBPath</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LBPathArchive</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LBPmtPost</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LBRedSettleCRBal</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LBRedSettleInvBal</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LBSettlementMethod</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LBShowLookupFields</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LBSuggCustGood</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LBSumRefNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LBUseCheckDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LBUseInvoiceDimensions</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LBWriteOffId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LBWriteOffRuleCROverSettle</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MatchingRulesGroupId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MatchingRulesGroupIdCustSettle</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MethodOfPayment</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModBR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModCC</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModEPAY</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModLockbox</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModLockboxFormatID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModMultiCompany</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModPosPay</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModPosPayFormatID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MoveGoodPaymToBatch</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NoPartialSettle</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PayJrnlDeposit</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymMustBeZero</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PFileNameAddDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PPAP</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PPAPCancelled</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PPAPRejected</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PPArchive</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PPArchiveNbr</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PPAuditRpt</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PPCommType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PPCommUserProg</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PPDelete</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PPFileHideCompBatch</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PPFileName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PPFileNameAddFileNbr</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PPFileNameCanChange</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PPFileNameConnector</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PPFilePeriodsRet</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PPHeadTrailID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PPNextFileNbr</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PPOutCommID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PPOutServerSideFileProc</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PPPath</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PPPathArchive</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PPPR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PPPRVoid</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RegAPEFT</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RegAREFT</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RegAuthorizedUsers</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RegBR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RegCustomerID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RegFX</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RegLB</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RegPP</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RegUnlockKey</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RegVersion</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SepPaymByInv</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SetUpID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>BankChequeTable</Name>
			<Table>BankChequeTable</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AccountID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AmountCur</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankCurrency</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankCurrencyAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankNegInstRecipientName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ChequeNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ChequeStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CurrencyCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProcessedByPositivePay</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReasonRefRecID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecipientAccountNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecipientCompany</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecipientTransVoucher</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecipientType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RemittanceAddress</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReversalRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReversalTableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SKS_BR_ClearedDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SKS_PP_File_RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SKS_PP_FileNbr</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SKS_PP_LastFileNbr</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SKS_PP_Selected</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SKS_PP_SelectedFileNbr</DataField>
					<Enabled>No</Enabled>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SourceRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SourceTableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Voucher</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<CrossCompanyAutoQuery>Yes</CrossCompanyAutoQuery>
			<JoinSource>SKS_PP_Bank</JoinSource>
			<LinkType>InnerJoin</LinkType>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>SKS_PP_ExcludedMOPs</Name>
			<Table>SKS_PP_ExcludedMOPs</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>DataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IncludeCancelled</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IncludeVoids</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymMode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>BankChequeTable</JoinSource>
			<LinkType>NotExistJoin</LinkType>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@SKS222</Caption>
		<DataSource xmlns="">BankChequeTable</DataSource>
		<Pattern xmlns="">SimpleList</Pattern>
		<PatternVersion xmlns="">1.1</PatternVersion>
		<Style xmlns="">SimpleList</Style>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>ActionPane</Name>
				<ElementPosition>715827882</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Type>ActionPane</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>ButtonGroup</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1127428914</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>ButtonGroup</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>SelectAll</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1073741822</ElementPosition>
								<Enabled>No</Enabled>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<HelpText>@SKS732</HelpText>
								<NeededPermission>Update</NeededPermission>
								<Type>Button</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Text>@SKS209</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>ClearAll</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1610612733</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<HelpText>@SKS731</HelpText>
								<NeededPermission>Update</NeededPermission>
								<Type>Button</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Text>@SKS210</Text>
							</AxFormControl>
						</Controls>
						<ArrangeMethod>Vertical</ArrangeMethod>
					</AxFormControl>
				</Controls>
				<AlignChild>No</AlignChild>
				<AlignChildren>No</AlignChildren>
				<ArrangeMethod>Vertical</ArrangeMethod>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>Body</Name>
				<ElementPosition>1431655764</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Pattern>CustomAndQuickFilters</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl>
						<Name>QuickFilter</Name>
						<FormControlExtension>
							<Name>QuickFilterControl</Name>
							<ExtensionComponents />
							<ExtensionProperties>
								<AxFormControlExtensionProperty>
									<Name>targetControlName</Name>
									<Type>String</Type>
									<Value>Grid</Value>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>defaultColumnName</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>placeholderText</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
							</ExtensionProperties>
						</FormControlExtension>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCheckBoxControl">
						<Name>SKS_PP_Setup_PPAPCancel</Name>
						<AlignControl>No</AlignControl>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>858993458</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>CheckBox</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Label>@SYS1068</Label>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCheckBoxControl">
						<Name>SKS_PP_Setup_PPAPReject</Name>
						<AlignControl>No</AlignControl>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1288490187</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>CheckBox</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Label>@SYS26839</Label>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCheckBoxControl">
						<Name>ShowChecksAlreadyPP</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>858993458</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>CheckBox</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Label>@SKS227</Label>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormDateControl">
						<Name>StartDate</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1288490187</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Date</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<ExtendedDataType>StartDate</ExtendedDataType>
						<Label>@SKS216</Label>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormIntegerControl">
						<Name>SelectCount</Name>
						<AllowEdit>No</AllowEdit>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1073741822</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<LeftMode>RightEdge</LeftMode>
						<Type>Integer</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Label>@SKS211</Label>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalLeft</ArrangeMethod>
				<FrameType>None</FrameType>
				<Style>CustomFilter</Style>
				<ViewEditMode>Edit</ViewEditMode>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGridControl">
				<Name>Grid</Name>
				<ElementPosition>1476395006</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Type>Grid</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormCheckBoxControl">
						<Name>BankChequeTable_SKS_PP_Selected</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>330382098</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>CheckBox</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<BackgroundColor>WindowBackground</BackgroundColor>
						<DataField>SKS_PP_Selected</DataField>
						<DataSource>BankChequeTable</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>SKS_PP_Bank_PPFormatId</Name>
						<AllowEdit>No</AllowEdit>
						<ElementPosition>495573147</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>PPFormatId</DataField>
						<DataSource>SKS_PP_Bank</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>SKS_PP_Bank_PPOutCommID</Name>
						<AllowEdit>No</AllowEdit>
						<ElementPosition>536870909</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>PPOutCommID</DataField>
						<DataSource>SKS_PP_Bank</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>BankChequeTable_dataAreaId</Name>
						<ElementPosition>578168671</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>dataAreaId</DataField>
						<DataSource>BankChequeTable</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>SKS_PP_Bank_BankAccountId</Name>
						<AllowEdit>No</AllowEdit>
						<ElementPosition>660764196</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Visible>No</Visible>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>BankAccountId</DataField>
						<DataSource>SKS_PP_Bank</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>BankChequeTable_AccountID</Name>
						<AllowEdit>No</AllowEdit>
						<ElementPosition>825955245</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>AccountID</DataField>
						<DataSource>BankChequeTable</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>BankChequeTable_ChequeNum</Name>
						<AllowEdit>No</AllowEdit>
						<ElementPosition>991146294</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>ChequeNum</DataField>
						<DataSource>BankChequeTable</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormComboBoxControl">
						<Name>BankChequeTable_ChequeStatus</Name>
						<AllowEdit>No</AllowEdit>
						<ElementPosition>1156337343</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>ComboBox</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>ChequeStatus</DataField>
						<DataSource>BankChequeTable</DataSource>
						<Items />
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormDateControl">
						<Name>BankChequeTable_TransDate</Name>
						<AllowEdit>No</AllowEdit>
						<ElementPosition>1321528392</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>Date</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>TransDate</DataField>
						<DataSource>BankChequeTable</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormRealControl">
						<Name>BankChequeTable_AmountCur</Name>
						<AllowEdit>No</AllowEdit>
						<ElementPosition>1486719441</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>Real</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>AmountCur</DataField>
						<DataSource>BankChequeTable</DataSource>
						<NoOfDecimals>-1</NoOfDecimals>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>BankChequeTable_CurrencyCode</Name>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>CurrencyCode</DataField>
						<DataSource>BankChequeTable</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>BankChequeTable_Voucher</Name>
						<AllowEdit>No</AllowEdit>
						<ElementPosition>1651910490</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>Voucher</DataField>
						<DataSource>BankChequeTable</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>BankChequeTable_SKS_PP_FileNbr</Name>
						<AllowEdit>No</AllowEdit>
						<ElementPosition>1817101541</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>SKS_PP_FileNbr</DataField>
						<DataSource>BankChequeTable</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormComboBoxControl">
						<Name>SKS_PP_File1_KeepDelete</Name>
						<AllowEdit>No</AllowEdit>
						<ElementPosition>1982292592</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>ComboBox</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataMethod>fileStatus</DataMethod>
						<DataSource>BankChequeTable</DataSource>
						<Label>@SKS230</Label>
						<Items />
					</AxFormControl>
				</Controls>
				<AlternateRowShading>No</AlternateRowShading>
				<DataSource>SKS_PP_Bank</DataSource>
				<MultiSelect>No</MultiSelect>
				<ShowRowLabels>No</ShowRowLabels>
				<Style>Tabular</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>