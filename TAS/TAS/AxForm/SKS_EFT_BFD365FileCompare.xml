<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>SKS_EFT_BFD365FileCompare</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class SKS_EFT_BFD365FileCompare extends FormRun
{
    str mD365fileName, mBFLfileName, mfilePath;
    SKS_BF_BankIntType sks_BF_BankIntType;
    SKS_EB_FileStorage mSKS_EB_FileStorage;

}
]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    public void init()
    {
        SKS_EFTAP_File  sks_EFTAP_File;
        super();

        mSKS_EB_FileStorage = SKS_EB_FileStorage::find();
        sks_EFTAP_File = element.args().record();
        mBFLfileName = element.args().parm();

        mfilePath = sks_EFTAP_File.FilePath;
        mD365fileName = sks_EFTAP_File.FileName;

        sks_BF_BankIntType = sks_EFTAP_File.BFBankIntegration;

        if (sks_EFTAP_File.BFBankIntegration == SKS_BF_BankIntType::FileHubLocal)
        {
            D365FileName.text(mfilePath + @'\' + mD365fileName);
            bfFileName.text(mfilePath + @'\' + 'Cmp' + @'\' + mD365fileName);
        }
        else
        {
            D365FileName.text(mfilePath + @'\' + mD365fileName);
            bfFileName.text(strLRTrim(mfilePath) + 'Cmp' + @'\' + mBFLfileName);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>activate</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name = "_active"></param>
    public void activate(boolean _active)
    {
        super(_active);
        if (sks_BF_BankIntType == SKS_BF_BankIntType::FileHubLocal)
        {
            if (mSKS_EB_FileStorage.FileStorageType == SKS_EB_FileStorageType::Local)
            {
                this.localCompareD365BFLFiles();
            }
            else
            {
                this.filehubCompareD365BFLFiles();
            }
        }
        else
        {
            this.BFCompareD365BFLFiles();
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>localCompareD365BFLFiles</Name>
				<Source><![CDATA[
    public void localCompareD365BFLFiles()
    {
        str OrigFilePathName, CompFilePathName;
        str d365FileContent, bflFileContent, filecompareresult;
        int d365FileType, bflFileType;

        OrigFilePathName = mfilePath + @'\' + mD365fileName;
        CompFilePathName = mfilePath + @'\' + 'Cmp' + @'\' + mD365fileName;

        FormStringD365.text('');
        FormStringFB.text('');
        FormStringResult.text('');

        SKG_File.Models.SKGFileCompare comparefile = new SKG_File.Models.SKGFileCompare();

        d365FileType = comparefile.Getfiletype(OrigFilePathName,'');
        If (d365FileType == 0)
        {
            warning('D365 File is not found, please check file path and name.');
        }

        bflFileType = comparefile.Getfiletype(CompFilePathName,'');
        If (bflFileType == 0)
        {
            warning('BFL File is not found, please check file path and name.');
        }

        if (bflFileType != d365FileType &&  bflFileType != 0 && d365FileType != 0)
        {
            warning('D365 File type is not same as BFL File type.');
        }

        if (bflFileType != 0 && d365FileType != 0 && bflFileType == d365FileType)
        {
            d365FileContent = comparefile.Getfile(OrigFilePathName, d365FileType,'file');
            bflFileContent = comparefile.Getfile(CompFilePathName, bflFileType,'file');

            if (d365FileType == 1)
            {
                filecompareresult = comparefile.CompareXmlFiles(OrigFilePathName,CompFilePathName,'file');
            }
            else
            {
                filecompareresult = comparefile.CompareTxtFiles(OrigFilePathName,CompFilePathName,'file');
            }
            FormStringD365.text(d365FileContent);
            FormStringFB.text(bflFileContent);
            FormStringResult.text(filecompareresult);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>filehubCompareD365BFLFiles</Name>
				<Source><![CDATA[
    public void filehubCompareD365BFLFiles()
    {
        str OrigFilePathName, CompFilePathName;
        System.IO.StreamReader origSR, compSR;
        str d365FileContent, bflFileContent;
        str filecompareresult;
        int d365FileType, bflFileType;
        boolean fileExists;
        int linecnt;
        XmlDocument xmlDoc = new XmlDocument();
        
        SKS_EB_FileHub fileHub = SKS_EB_FileHub::construct(sks_BF_BankIntType);
        SKG_File.Models.SKGFileCompare comparefile = new SKG_File.Models.SKGFileCompare();

        OrigFilePathName = mfilePath + @'\' + mD365fileName;
        CompFilePathName = mfilePath + @'\' + 'Cmp' + @'\' + mD365fileName;

        //Original file
        fileHub.runFileInquire(origFilePathName);
        fileExists = fileHub.attrFileExists();
        if (fileExists)
        {
            fileHub.runFileLoad(origFilePathName);
            if (fileHub.errorHasException())
            {
                error(fileHub.errorException());
                return;
            }

            origSR = new System.IO.StreamReader(FileHub.streamGet(null, true));
            d365FileContent = origSR.ReadToEnd();
            try
            {
                xmlDoc = XmlDocument::newFromStream(FileHub.streamGet(null, true));
                d365FileType = 1; //comparefile.Getfiletype('',d365FileContent);
            }
            catch
            {
                d365FileType = 2;
            }
        }

        // compare file
        fileHub.runFileInquire(compFilePathName);
        fileExists = fileHub.attrFileExists();
        linecnt = 0;
        if (fileExists)
        {
            fileHub.runFileLoad(compFilePathName);
            if (fileHub.errorHasException())
            {
                error(fileHub.errorException());
                return;
            }

            compSR = new System.IO.StreamReader(FileHub.streamGet(null, true));
            bflFileContent = compSR.ReadToEnd();
            try
            {
                xmlDoc = XmlDocument::newFromStream(FileHub.streamGet(null, true));
                bflFileType = 1; //comparefile.Getfiletype('',d365FileContent);
            }
            catch
            {
                bflFileType = 2;
            }
        }

        If (d365FileType == 0)
        {
            warning('D365 File is not found, please check file path and name.');
        }
       
        If (bflFileType == 0)
        {
            warning('BFL File is not found, please check file path and name.');
        }

        if (bflFileType != d365FileType &&  bflFileType != 0 && d365FileType != 0)
        {
            warning('D365 File type is not same as BFL File type.');
        }

        
        if (bflFileType != 0 && d365FileType != 0 && bflFileType == d365FileType)
        {
            if (d365FileType == 1)
            {
                filecompareresult = comparefile.CompareXmlFiles(d365FileContent,bflFileContent,'stream');
            }
            else
            {
                filecompareresult = comparefile.CompareTxtFiles(d365FileContent,bflFileContent,'stream');
            }

            d365FileContent = comparefile.Getfile(d365FileContent, d365FileType,'stream');
            bflFileContent = comparefile.Getfile(bflFileContent, bflFileType,'stream');

            FormStringD365.text(d365FileContent);
            FormStringFB.text(bflFileContent);
            FormStringResult.text(filecompareresult);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>BFCompareD365BFLFiles</Name>
				<Source><![CDATA[
    public void BFCompareD365BFLFiles()
    {
        str origFilePathName, compFilePathName;
        System.IO.StreamReader origSR, compSR;
        str d365FileContent, bflFileContent; 
        str filecompareresult;
        int d365FileType, bflFileType;
        boolean fileExists;
        int linecnt;
        XmlDocument xmlDoc = new XmlDocument();
        
        SKS_EB_FileHub fileHub = SKS_EB_FileHub::construct(sks_BF_BankIntType);
        SKG_File.Models.SKGFileCompare comparefile = new SKG_File.Models.SKGFileCompare();
        
        origFilePathName = mfilePath + @'\' + mD365fileName;
        compFilePathName = strLRTrim(mfilePath) + 'Cmp' + @'\' + mBFLfileName;

        //Original file
        fileHub.runFileInquire(origFilePathName);
        fileExists = fileHub.attrFileExists();
        if (fileExists)
        {
            fileHub.runFileLoad(origFilePathName);
            if (fileHub.errorHasException())
            {
                error(fileHub.errorException());
                return;
            }
            origSR = new System.IO.StreamReader(FileHub.streamGet());
            d365FileContent = origSR.ReadToEnd();
            try
            {
                xmlDoc = XmlDocument::newFromStream(FileHub.streamGet());
                d365FileType = 1; //comparefile.Getfiletype('',d365FileContent);
            }
            catch
            {
                d365FileType = 2;
            }
        }

        // compare file
        fileHub.runFileInquire(compFilePathName);
        fileExists = fileHub.attrFileExists();
        linecnt = 0;
        if (fileExists)
        {
            fileHub.runFileLoad(compFilePathName);
            if (fileHub.errorHasException())
            {
                error(fileHub.errorException());
                return;
            }
            compSR = new System.IO.StreamReader(FileHub.streamGet());
            bflFileContent = compSR.ReadToEnd();
            try
            {
                xmlDoc = XmlDocument::newFromStream(FileHub.streamGet());
                bflFileType = 1; //comparefile.Getfiletype('',d365FileContent);
            }
            catch
            {
                bflFileType = 2;
            }
        }

        If (d365FileType == 0)
        {
            warning('D365 File is not found, please check file path and name.');
        }
       
        If (bflFileType == 0)
        {
            warning('BFL File is not found, please check file path and name.');
        }

        if (bflFileType != d365FileType &&  bflFileType != 0 && d365FileType != 0)
        {
            warning('D365 File type is not same as BFL File type.');
        }

        
        if (bflFileType != 0 && d365FileType != 0 && bflFileType == d365FileType)
        {
            if (d365FileType == 1)
            {
                filecompareresult = comparefile.CompareXmlFiles(d365FileContent,bflFileContent,'stream');
            }
            else
            {
                filecompareresult = comparefile.CompareTxtFiles(d365FileContent,bflFileContent,'stream');
            }

            d365FileContent = comparefile.Getfile(d365FileContent, d365FileType,'stream');
            bflFileContent = comparefile.Getfile(bflFileContent, bflFileType,'stream');

            FormStringD365.text(d365FileContent);
            FormStringFB.text(bflFileContent);
            FormStringResult.text(filecompareresult);
        }
        
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="" />
		<DataControls xmlns="">
			<Control>
				<Name>FormButtonControl1</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Compares files.
        /// </summary>
        public void clicked()
        {
            if (sks_BF_BankIntType == SKS_BF_BankIntType::FileHubLocal)
            {
                element.filehubCompareD365BFLFiles();
            }
            else
            {
                element.BFCompareD365BFLFiles();
            }
                        
            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources />
	<Design>
		<Caption xmlns="">@SKS:SKGD365BFLFileCompare</Caption>
		<Pattern xmlns="">Custom</Pattern>
		<ShowDeleteButton xmlns="">No</ShowDeleteButton>
		<ShowNewButton xmlns="">No</ShowNewButton>
		<ViewEditMode xmlns="">Edit</ViewEditMode>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>FormActionPaneControl1</Name>
				<Type>ActionPane</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>FormButtonGroupControl1</Name>
						<Type>ButtonGroup</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>FormButtonControl1</Name>
								<Type>Button</Type>
								<Visible>No</Visible>
								<FormControlExtension
									i:nil="true" />
								<Text>@SKS:SKGCompareFiles</Text>
							</AxFormControl>
						</Controls>
					</AxFormControl>
				</Controls>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>FormGroupControl1</Name>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>D365FileName</Name>
						<AllowEdit>No</AllowEdit>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>String</Type>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DisplayLength>500</DisplayLength>
						<DisplayLengthMode>Fixed</DisplayLengthMode>
						<Label>@SKS:SKGD365File</Label>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>BFFileName</Name>
						<AllowEdit>No</AllowEdit>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>String</Type>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Label>@SKS:SKGBFLFile</Label>
					</AxFormControl>
				</Controls>
				<Columns>2</Columns>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormTabControl">
				<Name>FormTabControl1</Name>
				<Type>Tab</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>FormTabPageControl1</Name>
						<Type>TabPage</Type>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>FormStringResult</Name>
								<AllowEdit>No</AllowEdit>
								<AutoDeclaration>Yes</AutoDeclaration>
								<HeightMode>SizeToAvailable</HeightMode>
								<Type>String</Type>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DisplayHeight>12</DisplayHeight>
								<DisplayHeightMode>Fixed</DisplayHeightMode>
								<MultiLine>Yes</MultiLine>
							</AxFormControl>
						</Controls>
						<Caption>@SKS:SKGFileDiff</Caption>
						<FastTabExpanded>Yes</FastTabExpanded>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>FormTabPagefiles</Name>
						<Type>TabPage</Type>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>FormStringD365</Name>
								<AllowEdit>No</AllowEdit>
								<AutoDeclaration>Yes</AutoDeclaration>
								<HeightMode>SizeToAvailable</HeightMode>
								<Type>String</Type>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DisplayHeight>35</DisplayHeight>
								<DisplayHeightMode>Fixed</DisplayHeightMode>
								<MultiLine>Yes</MultiLine>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>FormStringFB</Name>
								<AllowEdit>No</AllowEdit>
								<AutoDeclaration>Yes</AutoDeclaration>
								<HeightMode>SizeToAvailable</HeightMode>
								<Type>String</Type>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DisplayHeight>35</DisplayHeight>
								<DisplayHeightMode>Fixed</DisplayHeightMode>
								<MultiLine>Yes</MultiLine>
							</AxFormControl>
						</Controls>
						<Columns>2</Columns>
						<Caption>@SKS:SKGFileData</Caption>
						<FastTabExpanded>Yes</FastTabExpanded>
					</AxFormControl>
				</Controls>
				<Style>FastTabs</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>