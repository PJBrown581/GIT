<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>SKS_IHB_InhouseBankStatementGeneration</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class SKS_IHB_InhouseBankStatementGeneration extends FormRun
{
}
]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    public void init()
    {
        super();

        SKS_PP_Sys tmpSKS_PP_Sys = new SKS_PP_Sys();
        if ( !tmpSKS_PP_Sys.ValidateSetup(this.name()))
        {
            this.close();
        }

        SKS_IHB_InhouseBanks     inhouseBanks;
        inhouseBanks.checkForNewAccountAndLoad();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAnyRecordMarked</Name>
				<Source><![CDATA[
    public RecId isAnyRecordMarked()
    {
        SKS_IHB_InhouseBanks    inhousebanks;

        select firstonly RecId from inhousebanks
            where inhousebanks.Mark == NoYes::Yes;

        return inhousebanks.RecId;
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>SKS_IHB_InhouseBanks</Name>
				<Methods>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        /// <summary>
        ///
        /// </summary>
        /// <returns></returns>
        public int active()
        {
            SKS_IHB_InhouseBanks    inhouseBanks;
            int ret;
            
            GenerateInitialBal.enabled(true);
            GenerateStatement.enabled(false);
            this.disableIHB_Module();
            ret = super();
            
            inhouseBanks = SKS_IHB_InhouseBanks_ds.cursor();
            if(SKS_IHB_InhouseBanks::find(inhouseBanks.RecId).StatementNumber == strUpr("@SYS4007236"))
            {
                GenerateInitialBal.enabled(false);
                GenerateStatement.enabled(true);
            }
            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        /// <summary>
        /// filter only in house bank
        /// </summary>
        /// 10403
        public void executeQuery()
        {
            QueryBuildDataSource qbdsInHouseEBank; 
            QueryBuildDataSource qbdsPPBank;
                        
            qbdsInHouseEBank = this.query().dataSourceTable(tableNum(SKS_IHB_InhouseBanks));
            qbdsPPBank = qbdsInHouseEBank.addDataSource(tableNum(SKS_PP_Bank));
            qbdsPPBank.addLink(fieldNum(SKS_PP_Bank,BankAccountId),fieldNum(SKS_IHB_InhouseBanks,AccountId));
            qbdsPPBank.addRange(fieldNum(SKS_PP_Bank, SKS_IHBInhouseBank)).value(queryValue(NoYes::Yes));
           
            super();
        }

]]></Source>
					</Method>
					<Method>
						<Name>disableIHB_Module</Name>
						<Source><![CDATA[
        /// <summary>
        /// Enable or disable fields based on TAS parameters setup.
        /// </summary>
        // SKS_Bug_10538
        public void disableIHB_Module()
        {
            SKS_PP_Setup    sks_pp_Setup = SKS_PP_Setup::find();

            SKS_IHB_InhouseBanks_Mark.enabled(sks_pp_Setup.IHB_Active);
            SKS_IHB_InhouseBanks_AccountId.enabled(sks_pp_Setup.IHB_Active);
            SKS_IHB_InhouseBanks_Name.enabled(sks_pp_Setup.IHB_Active);
            StatementDate.enabled(sks_pp_Setup.IHB_Active);
            ActionPane.enabled(sks_pp_Setup.IHB_Active);
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>GenerateStatement</Name>
				<Type>CommandButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Generate statement logic
        /// </summary>
        public void clicked()
        {
            Args                                        args;
            Object                                      formRun;
            str                                         strdate;
            SKS_IHB_InhouseBankStatementProcessBatch    inhouseBatchprocess = new SKS_IHB_InhouseBankStatementProcessBatch();
            
            super();

            strdate = element.design(0).controlName(formControlStr(SKS_IHB_InhouseBankStatementGeneration ,Statementdate)).valueStr();
            if (strdate)
            {
                SKS_IHB_InhouseBankTransactionsErrorType::insertRecordWithTypeError(str2Date(strdate,321));//SKS_DevOps_16302
                if (SKS_IHB_InhouseBankTransactionsErrorType::isRecordExists())
                {
                    args = new Args();
                    args.name(formstr(SKS_IHB_InhouseBankTransactionErrorType));
                    formRun = classfactory.formRunClass(args);
                    formRun.init();
                    formRun.run();
                }
                else
                {
                    inhouseBatchprocess.createMultiThreadBatch(str2Date(strdate,321));//SKS_DevOps_16302
                } 
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>GenerateInitialBal</Name>
				<Type>CommandButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Generate initial balance
        /// </summary>
        public void clicked()
        {
            SKS_IHB_InhouseGenerateInitialBalance       InhouseGenerateInitialBal = new SKS_IHB_InhouseGenerateInitialBalance();
            SKS_IHB_InhouseBanks                        selectedLines;
            TransDate                                   statementdateLoc ;
            str                                         strdate;

            super();

            strdate = element.design(0).controlName(formControlStr(SKS_IHB_InhouseBankStatementGeneration ,Statementdate)).valueStr();
            if (strdate)
            {
                while select selectedLines
                    where selectedLines.Mark == NoYes::Yes
                {
                    statementdateLoc =  str2Date(strdate,321);//SKS_DevOps_16302
                    InhouseGenerateInitialBal.initalBalanceGenerate(selectedLines.AccountId, statementdateLoc);
                }
            }
            SKS_IHB_InhouseBanks_ds.refresh();
            SKS_IHB_InhouseBanks_ds.active();
            SKS_IHB_InhouseBanks_ds.reread(); // SKS_Bug_10431
            
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SelectAll</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        ///
        /// </summary>
        public void clicked()
        {
            TransDate               stmtdate;
            SKS_IHB_InhouseBanks    sks_ihb_inhousebankslocal;
            SKS_IHB_InhouseBankAccountsStatementDetails inhouseBankAccount;

            for(sks_ihb_inhousebankslocal = SKS_IHB_InhouseBanks_ds.getFirst(); sks_ihb_inhousebankslocal; sks_ihb_inhousebankslocal = sks_ihb_inhousebanks_ds.getnext())
            {
                if(sks_ihb_inhousebankslocal.mark == NoYes::No)
                {
                    stmtdate = SKS_IHB_InhouseBankAccountsStatementDetails::getNextOpenDate(sks_ihb_inhousebankslocal.AccountId);
            
                    if(stmtdate && sks_ihb_inhousebankslocal.Mark == NoYes::Yes)
                    {
                        select firstonly Statementdate from inhouseBankAccount order by Statementdate desc
                            where inhouseBankAccount.AccountId == sks_ihb_inhousebankslocal.AccountId;
                        if (StatementDate.dateValue() && inhouseBankAccount.StatementDate >= StatementDate.dateValue())
                        {
                            sks_ihb_inhousebankslocal.mark = NoYes::No;
                        }
                    }
                    else
                    {
                        sks_ihb_inhousebankslocal.mark = NoYes::Yes;
                    }
                    sks_ihb_inhousebankslocal.update();
                    sks_ihb_inhousebanks_ds.reread();
                    sks_ihb_inhousebanks_ds.refresh();
                }
            }
            sks_ihb_inhousebanks_ds.executeQuery();
            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>RemoveAll</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        ///
        /// </summary>
        public void clicked()
        {
            SKS_IHB_InhouseBanks    sks_ihb_inhousebankslocal;
            for(sks_ihb_inhousebankslocal = SKS_IHB_InhouseBanks_ds.getFirst(); sks_ihb_inhousebankslocal; sks_ihb_inhousebankslocal = sks_ihb_inhousebanks_ds.getnext())
            {
                if(sks_ihb_inhousebankslocal.mark == NoYes::Yes)
                {
                    sks_ihb_inhousebankslocal.mark = NoYes::No;
                    sks_ihb_inhousebankslocal.update();
                }
                sks_ihb_inhousebanks_ds.reread();
                sks_ihb_inhousebanks_ds.refresh();
            }
            sks_ihb_inhousebanks_ds.executeQuery();
            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>StatementDate</Name>
				<Type>Date</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        ///
        /// </summary>
        /// <returns></returns>
        public boolean modified()
        {
            boolean                     ret;
            //CR9812 -->
            container                   conHolidayBankAccount;
            SKS_IHB_InhouseBanks        locSKS_IHB_InhouseBanks;
            SKS_EB_BankHolidays         locSKS_EB_BankHolidays;
            SKS_EB_BankHolidayGroupID   locSKS_EB_BankHolidayGroupID;
            //CR9812 <--
            SKS_PP_Bank                 sKS_PP_BANK;//SKS_Bug_10288

            ret = super();
            if(StatementDate.dateValue() >=  DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()))
            {
                StatementDate.dateValue(datenull());
                error("@SKS:SKGTodayDate");
            }
            if (dayOfWk(StatementDate.dateValue()) == 6 || dayOfWk(StatementDate.dateValue()) == 7)
            {
                StatementDate.dateValue(datenull());
                error("@SKS:SKGWeekEndDate");
            }      
            // 10401 -->
            TransDate stmtdate = SKS_IHB_InhouseBankAccountsStatementDetails::getNextOpenDate(SKS_IHB_InhouseBanks.AccountId);
            if(stmtdate != dateNull() && StatementDate.dateValue() > stmtdate )
            {
                warning("@SKS:SKGIHBStmtDateSkipped");
            }
            // 10401 <--
            
            //CR9812 -->            
            conDel(conHolidayBankAccount, 1, conLen(conHolidayBankAccount));

            locSKS_IHB_InhouseBanks = SKS_IHB_InhouseBanks_ds.getFirst();

            while (locSKS_IHB_InhouseBanks)
            {
                if(locSKS_IHB_InhouseBanks.Mark == true)
                {
                    locSKS_EB_BankHolidayGroupID = SKS_PP_Bank::find(locSKS_IHB_InhouseBanks.AccountId).IHB_BankHolidayGroupId;
                    locSKS_EB_BankHolidays = SKS_EB_BankHolidays::find(locSKS_EB_BankHolidayGroupID, StatementDate.dateValue());
                    //SKS_Bug_10288 -->
                    select firstonly IHB_LastStatementDate, BankAccountId from sKS_PP_BANK
                        where sKS_PP_BANK.BankAccountId == locSKS_IHB_InhouseBanks.AccountId;

                    if (StatementDate.dateValue() && sKS_PP_BANK.IHB_LastStatementDate >= StatementDate.dateValue())
                    {
                        StatementDate.dateValue(datenull());
                        error(strFmt("@SKS:SKGStatementAlreadyGenerated",locSKS_IHB_InhouseBanks.AccountId));
                    }
                    //SKS_Bug_10288 <--
                    if(locSKS_EB_BankHolidays)
                    {
                        conHolidayBankAccount += locSKS_IHB_InhouseBanks.AccountId;
                    }
                }

                locSKS_IHB_InhouseBanks = SKS_IHB_InhouseBanks_ds.getNext();
            }
            
            if(conHolidayBankAccount)
            {
                StatementDate.dateValue(datenull());
                error(strFmt("@SKS:SKGStatementDateBankHolidayError", con2Str(conHolidayBankAccount)));
            }
            //CR9812 <--
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SKS_IHB_InhouseBanks_Mark</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        ///
        /// </summary>
        public void clicked()
        {
            TransDate                                   stmtdate, prevstmtdate;
            SKS_IHB_InhouseBanks                        inhouseBuffer;
            SKS_IHB_InhouseBanks                        inhouseBufferLoc;
            boolean                                     isOk;//SKS_Bug_10288
            SKS_PP_Bank                                 sKS_PP_BANK;//SKS_Bug_10288
            int                                         markedRecords = 0;//SKS_Bug_10288
            super();
            inhouseBuffer = SKS_IHB_InhouseBanks_ds.cursor();
            
            stmtdate = SKS_IHB_InhouseBankAccountsStatementDetails::getNextOpenDate(inhouseBuffer.AccountId);
            prevstmtdate = SKS_IHB_InhouseBankAccountsStatementDetails::getNextOpenDate(inhouseBuffer.AccountId);
            //SKS_Bug_10288 -->
            inhouseBufferLoc = SKS_IHB_InhouseBanks_ds.getFirst();
            while (inhouseBufferLoc)
            {
                if(inhouseBufferLoc.Mark == true)
                {
                    markedRecords++;

                    if(inhouseBufferLoc.StatementNumber == "")
                    {
                        prevstmtdate = SKS_IHB_InhouseBankAccountsStatementDetails::getNextOpenDate(inhouseBufferLoc.AccountId);
                    }
                }
                inhouseBufferLoc = SKS_IHB_InhouseBanks_ds.getNext();
            }
            if(markedRecords == 0)
            {
                StatementDate.dateValue(dateNull());
            }

            if(markedRecords == 2 && prevstmtdate == dateNull())
            {
                SKS_IHB_InhouseBanks.Mark = NoYes::No;
                error("@SKS:SKGStatementNotInitBalance");
            }

            if(markedRecords >= 2 && stmtdate == dateNull() && SKS_IHB_InhouseBanks.Mark)
            {
                SKS_IHB_InhouseBanks.Mark = NoYes::No;
                error("@SKS:SKGStatementGenerateInitBalance");
            }


            //SKS_Bug_10288 <--
            if(stmtdate && inhouseBuffer.Mark == NoYes::Yes)
            {
                //SKS_Bug_10288 -->
                select firstonly IHB_LastStatementDate, BankAccountId from sKS_PP_BANK
                    where sKS_PP_BANK.BankAccountId == inhouseBuffer.AccountId;
                if (StatementDate.dateValue() && sKS_PP_BANK.IHB_LastStatementDate >= StatementDate.dateValue())
                {
                    SKS_IHB_InhouseBanks.Mark = NoYes::No;
                    //SKS_Bug_10288<--
                    error("@SKS:SKGStatementGenerated");

                }
                if (StatementDate.dateValue() == dateNull() && stmtdate)//SKS_Bug_10288
                {
                    if(stmtdate >=  DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()))
                    {
                        StatementDate.dateValue(datenull());
                        error("@SKS:SKGTodayDate");
                        SKS_IHB_InhouseBanks.Mark = NoYes::No;
                    }
                    else
                    {
                        isOk = true;
                    }
                }
                else if (StatementDate.dateValue() && (stmtdate < StatementDate.dateValue()))
                {
                    warning("@SKS:SKGStatementDateSkip");
                }
                if (isOk)
                {
                    StatementDate.dateValue(stmtdate);
                }
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>SKS_IHB_InhouseBanks</Name>
			<Table>SKS_IHB_InhouseBanks</Table>
			<Fields>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>AccountId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Mark</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>Name</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>StatementNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AllowCreate>No</AllowCreate>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@SKS:SKGIHBStatementGeneration</Caption>
		<Pattern xmlns="">SimpleList</Pattern>
		<PatternVersion xmlns="">1.1</PatternVersion>
		<ShowDeleteButton xmlns="">No</ShowDeleteButton>
		<ShowNewButton xmlns="">No</ShowNewButton>
		<Style xmlns="">SimpleList</Style>
		<ViewEditMode xmlns="">Edit</ViewEditMode>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>ActionPane</Name>
				<AutoDeclaration>Yes</AutoDeclaration>
				<Type>ActionPane</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>ButtonGroup</Name>
						<Type>ButtonGroup</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormCommandButtonControl">
								<Name>GenerateStatement</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>CommandButton</Type>
								<FormControlExtension
									i:nil="true" />
								<Text>Generate statements</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormCommandButtonControl">
								<Name>GenerateInitialBal</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>CommandButton</Type>
								<FormControlExtension
									i:nil="true" />
								<Text>Generate initial balance</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>SelectAll</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<HelpText>@SYS302926</HelpText>
								<Type>Button</Type>
								<FormControlExtension
									i:nil="true" />
								<Text>@SYS28958</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>RemoveAll</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<HelpText>@SYS328874</HelpText>
								<Type>Button</Type>
								<FormControlExtension
									i:nil="true" />
								<Text>@SYS70471</Text>
							</AxFormControl>
						</Controls>
					</AxFormControl>
				</Controls>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>FormGroup</Name>
				<Pattern>CustomAndQuickFilters</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl>
						<Name>QuickFilter</Name>
						<FormControlExtension>
							<Name>QuickFilterControl</Name>
							<ExtensionComponents />
							<ExtensionProperties>
								<AxFormControlExtensionProperty>
									<Name>targetControlName</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>placeholderText</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>defaultColumnName</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
							</ExtensionProperties>
						</FormControlExtension>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormDateControl">
						<Name>StatementDate</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>Date</Type>
						<FormControlExtension
							i:nil="true" />
						<Label>@SKS3108</Label>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalLeft</ArrangeMethod>
				<FrameType>None</FrameType>
				<Style>CustomFilter</Style>
				<ViewEditMode>Edit</ViewEditMode>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGridControl">
				<Name>Grid</Name>
				<Type>Grid</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormCheckBoxControl">
						<Name>SKS_IHB_InhouseBanks_Mark</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>CheckBox</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>Mark</DataField>
						<DataSource>SKS_IHB_InhouseBanks</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>SKS_IHB_InhouseBanks_AccountId</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>AccountId</DataField>
						<DataSource>SKS_IHB_InhouseBanks</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>SKS_IHB_InhouseBanks_Name</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>Name</DataField>
						<DataSource>SKS_IHB_InhouseBanks</DataSource>
					</AxFormControl>
				</Controls>
				<MultiSelect>No</MultiSelect>
				<Style>Tabular</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>