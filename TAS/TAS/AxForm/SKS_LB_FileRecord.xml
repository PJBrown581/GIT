<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>SKS_LB_FileRecord</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class SKS_LB_FileRecord extends FormRun
{
    SKS_EB_FilePath fileName;   // Parameter - location and name of the file
    SKS_LB_JournalAR journalARRecord;
    SKS_LB_JournalARErrors journalARErrorsRecord;
    SKS_LB_ReadFileBAI2 BAI2Reader;
    SKS_LB_ReadFileEDI  EDIReader;
    SKS_LB_ReadFileSymcor   SymReader;
    SKS_LB_ReadFileWFRMF    wfrmfReader;
    SKS_LB_ReadFileWFARRMF  wfarrmfReader;
    SKS_LB_ReadFileCAMT54   CAMT54Reader;
    SKS_LB_ReadFileIR       IRReadFile;
    SKS_LB_FormatId fileFormatId;   // Parameter - used to get the format definition
    int fileRecord;    // Parameter - row number to display from the file
    int fileParentRecord;
    int headlinenum;
    Recordinsertlist RIL;

   // Holds format data for the file readers
    SKS_LB_FileType fileType;
    int fileHeaderRecords;
    boolean bai2open, IROpen, ediopen, symOpen, wfrmfOpen, CAMT54Open, CAMT54Finished, WFARRMFOpen;

}
]]></Source>
			</Method>
			<Method>
				<Name>displaydummyline</Name>
				<Source><![CDATA[
    Void displaydummyline()
    {
        SKS_TMP_LineTable.LineNumber = 0;
        SKS_TMP_LineTable.LineGroup1='1-10';
        SKS_TMP_LineTable.LineGroup2='11-20';
        SKS_TMP_LineTable.LineGroup3='21-30';
        SKS_TMP_LineTable.LineGroup4='31-40';
        SKS_TMP_LineTable.LineGroup5='41-50';
        SKS_TMP_LineTable.LineGroup6='51-60';
        SKS_TMP_LineTable.LineGroup7='61-70';
        SKS_TMP_LineTable.LineGroup8='71-80';
        SKS_TMP_LineTable.LineGroup9='81-90';
        SKS_TMP_LineTable.LineGroup10='91-100';
        SKS_TMP_LineTable.LineGroup11='101-110';
        SKS_TMP_LineTable.LineGroup12='111-120';
        SKS_TMP_LineTable.LineGroup13='121-130';
        SKS_TMP_LineTable.LineGroup14='131-140';
        SKS_TMP_LineTable.LineGroup15='141-150';
        SKS_TMP_LineTable.LineGroup16='151-160';
        SKS_TMP_LineTable.LineGroup17='161-170';
        SKS_TMP_LineTable.LineGroup18='171-180';
        SKS_TMP_LineTable.LineGroup19='181-190';
        SKS_TMP_LineTable.LineGroup20='191-200';
        RIL.add(SKS_Tmp_LineTable);
        SKS_TMP_LineTable.clear();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayFileData</Name>
				<Source><![CDATA[
    void displayFileData()
    {
        // This method expects the following class variables have been set by getParameters():
        //    SKS_EB_FilePath fileName;
        //    str 15 fileFormatId;
        //    int fileRecord;
    
        //Init variables used to build display text
        str rawDataLine = '';
    
        //LabelRecordInfo.text(strfmt("@SKS435", fileRecord));
    
        // Get the raw data from the file
        rawDataLine = this.readFile();
    
        DataLine1.text(rawDataLine);
       // DataLine1.text(substr(rawDataLine, 0, 100));
    
        // If length is < 100, make it blank
        /*if (strlen(rawDataLine) <= 100)
        {
            DataLine2.text("");
        }
        else
        {
            DataLine2.text(substr(rawDataLine, 101, 100));
        }*/
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayFileDataBAI2</Name>
				<Source><![CDATA[
    void displayFileDataBAI2()
    {
        // This method expects the following class variables have been set by getParameters():
        //    SKS_EB_FilePath fileName;
        //    str 15 fileFormatId;
        //    int fileRecord;
        TextBuffer tb = new TextBuffer();
        int fileLength;
        int counter;
        int dummycounter = 0;
        
        this.displaydummyline();
        tb.setText(this.readFile());
        counter = fileParentRecord;
        fileLength = tb.size();
        
        SKS_TMP_LineTable.LineNumber = counter;
        this.populateFileRecordGrid(tb);
        
        
        tb.setText(this.readFile());
        while(tb.subStr(1,1) == '4')
        {
            Counter++;
            dummycounter++;
            if(dummycounter == 9)
            {
                this.displaydummyline();
                dummycounter = 0;
            }
            SKS_TMP_LineTable.LineNumber = counter;
            this.populateFileRecordGrid(tb);

            tb.setText(this.readFile());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayFileDataWFARRMF</Name>
				<Source><![CDATA[
    void displayFileDataWFARRMF()
    {
        // This method expects the following class variables have been set by getParameters():
        //    SKS_EB_FilePath fileName;
        //    str 15 fileFormatId;
        //    int fileRecord;
        TextBuffer tb = new TextBuffer();
        int fileLength;
        int counter;
        int dummycounter = 0;
        int lineCount = 0;
        
        this.displaydummyline();
        tb.setText(this.readFile());
        counter = fileParentRecord;
        fileLength = tb.size();
        
        SKS_TMP_LineTable.LineNumber = counter;
        this.populateFileRecordGrid(tb);
        
        
        tb.setText(this.readFile());
        while(lineCount < (fileRecord - fileParentRecord))
        {
            lineCount++;
            Counter++;
            dummycounter++;
            if(dummycounter == 9)
            {
                this.displaydummyline();
                dummycounter = 0;
            }
            SKS_TMP_LineTable.LineNumber = counter;
            this.populateFileRecordGrid(tb);

            tb.setText(this.readFile());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>DisplayFileDataCAMT54</Name>
				<Source><![CDATA[
    void DisplayFileDataCAMT54(int fileparentrecordnum)
    {
        SKS_EB_BankIntegOptWithNoLicense bankIntOption = SKS_EB_FileStorage::find().StorageOption_LB;
        SKS_BF_BankIntType SKS_BF_BankIntType = SKS_BF_BankIntType::FileHubLocal;
        if(bankIntOption == SKS_EB_BankIntegOptWithNoLicense::BankFabricEnumValue)
        {
            SKS_BF_BankIntType = SKS_BF_BankIntType::BankFabric;
        }
        XmlDocument locXmlDocument;
        SKS_EB_FileHub locSKS_EB_FileHub = SKS_EB_FileHub::construct(SKS_BF_BankIntType);
        XmlNode locXMLNode;
        XmlNode locParentNode;
        XMLNode TmpNode;
        XmlNodeList xmlNodeList;
        XmlNodeList xmlChildNodeList;
        XmlNamedNodeMap nodeMap;
        int fileLength;
        str text;
        int i;
        int j;
        int NTRYCount = 1;
        TextBuffer tb;
        boolean markChildWrite;
        str currencyTxt;
    
        void EnterChildNode(XmlNode _xmlnode)
        {
    
            if(_xmlnode.HasChildNodes())
            {
                xmlChildNodeList = _xmlnode.childNodes();//Retrieves a list of the child nodes within the list
    
                locXMLNode = xmlChildNodeList.item(0);
                if(locXMLNode && locXMLNode.hasChildNodes())
                {
                    text = '<' + _XMLNode.nodeName() + '>';//Beginning tag for node
                    tb.setText(text);
                    fileLength = tb.size();
                    this.populateFileRecordGrid(tb);
                    //this.writeline(tb, fileLength);
                }
                else
                {
                    markChildWrite = true;
                }
    
    
                for(j = 0; J < xmlChildNodeList.length(); j++)//Spin through each of the child records in the list
                {
                    locXMLNode = xmlChildNodeList.item(j);//assign the newest record to the xmlnode
                    if(locXMLNode.hasChildNodes())
                    {
                        EnterChildNode(locXMLNode);
                        markChildWrite = false;
                    }
                    else
                    {
                        locParentNode = locXMLNode.parentNode();
                        if(strUpr(locParentNode.nodeName()) == 'Amt')
                        {
                            nodeMap = locParentNode.attributes();
                            tmpnode = nodeMap.getNamedItem('Ccy');
                            if(TmpNode)
                            {
                                currencyTxt = TmpNode.innerText();
                            }
                            //Creates filerecord form line
                            text = '<' + locParentNode.nodeName() + ' Ccy="' + currencyTxt + '">' + locXMLNode.innertext() + '<' + locParentNode.nodeName() + '/>';
                            tb.setText(text);
                            fileLength = tb.size();
                            this.populateFileRecordGrid(tb);
                            //this.writeline(tb, fileLength);
                        }
                        else
                        {
                            //Creates filerecord form line
                            text = '<' + locParentNode.nodeName() + '>' + locXMLNode.innertext() + '<' + locParentNode.nodeName() + '/>';
                            tb.setText(text);
                            fileLength = tb.size();
                            this.populateFileRecordGrid(tb);
                           // this.writeline(tb, fileLength);
                        }
    
                    }
                }
    
                if(markChildWrite == false)
                {
                    text = '<' + _XMLNode.nodeName() + '/>';//Ending tag for node
                    tb.setText(text);
                    fileLength = tb.size();
                    this.populateFileRecordGrid(tb);
                    //this.writeline(tb, fileLength);
                }
    
                if(_xmlnode.nextSibling() && _XMLNode.nodeName() != 'TXDtls')
                {
    
                    //Get sibling
                    locXMLNode = _xmlnode.nextSibling();
                    //has children
                    if(locXMLNode.hasChildNodes())
                    {
                        //enter child
                        EnterChildNode(locXMLNode);
                    }
                    else //no children
                    {
                        //enter sibling
                        if(locXMLNode.nextSibling())
                        {
                            EnterChildNode(locXMLNode.nextSibling());
                        }
                    }
                    //no sibling
                    //return to parent
                }
            }
            else
            {
                text = '<' + locXMLNode.nodeName() + '>' + locXMLNode.nodeTypeString() + '<' + locXMLNode.nodeName() + '/>';
                tb.setText(text);
                fileLength = tb.size();
                this.populateFileRecordGrid(tb);
                //this.writeline(tb, fileLength);
            }
        }
    
        tb = new TextBuffer();
        locXmlDocument = new XmlDocument();
        locSKS_EB_FileHub.runFileLoad(Filename);
        locXmlDocument.loadXml(locSKS_EB_FileHub.fileBody());
    
        //Retrieve a list of the 'TxDtls' tags in the XML
        xmlNodeList = locXmlDocument.GetElementsByTagName('TxDtls');
    
        for (i = 0; i < xmlNodeList.length(); i++)//Spin through the list of 'TxDtls' to find the current payment
        {
            if(NTRYCount == fileparentrecordnum)//This ensures we only start retrieving records for the current payment selected in the workbench
            {
                CAMT54Finished = false;//Initialize
                EnterChildNode(xmlNodeList.item(i));//Retrieve the first child of node of the current payment 'TxDtls' node
            }
            NTRYCount++;//the nodelist starts at length 0 but the fileparentrecords start at 1 so the ntry count must stay 1 ahead of the loop count
                        //to ensure we get the payment record
        }
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayFileDataEDI</Name>
				<Source><![CDATA[
    void displayFileDataEDI()
    {
        // This method expects the following class variables have been set by getParameters():
        //    SKS_EB_FilePath fileName;
        //    str 15 fileFormatId;
        //    int fileRecord;
        TextBuffer tb = new TextBuffer();
        int fileLength;
        int counter;
        int dummycounter = 0;
    
        this.displaydummyline();
        tb.setText(this.readFile());
        counter = fileParentRecord;
        fileLength = tb.size();
        
        SKS_TMP_LineTable.LineNumber = counter;
        this.populateFileRecordGrid(tb);       
        
        tb.setText(this.readFile());
        while((tb.subStr(1,2) != 'SE') && (tb.subStr(1,3) != 'BPR'))
        {
            Counter++;
            dummycounter++;
            if(dummycounter == 9)
            {
                this.displaydummyline();
                dummycounter = 0;
            }
            SKS_TMP_LineTable.LineNumber = counter;
            this.populateFileRecordGrid(tb);

            tb.setText(this.readFile());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayFileDataWFRMF</Name>
				<Source><![CDATA[
    void displayFileDataWFRMF()
    {
        // This method expects the following class variables have been set by getParameters():
        //    SKS_EB_FilePath fileName;
        //    str 15 fileFormatId;
        //    int fileRecord;
        TextBuffer tb = new TextBuffer();
        int fileLength;
        int counter;
        int dummycounter = 0;

        this.displaydummyline();
        tb.setText(this.readFile());
        counter = fileParentRecord;
        fileLength = tb.size();
        
        SKS_TMP_LineTable.LineNumber = counter;
        this.populateFileRecordGrid(tb); 
        
        tb.setText(this.readFile());
        while((tb.subStr(1,2) != 'PR') && (tb.subStr(1,2) != 'BH') && (tb.subStr(1,2) != 'BT') && (tb.subStr(1,3) != 'PTH'))
        {
            Counter++;
            dummycounter++;
            if(dummycounter == 9)
            {
                this.displaydummyline();
                dummycounter = 0;
            }
            SKS_TMP_LineTable.LineNumber = counter;
            this.populateFileRecordGrid(tb);

            tb.setText(this.readFile());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayFileDataIR</Name>
				<Source><![CDATA[
    void displayFileDataIR()
    {
        // This method expects the following class variables have been set by getParameters():
        //    SKS_EB_FilePath fileName;
        //    str 15 fileFormatId;
        //    int fileRecord;
        TextBuffer tb = new TextBuffer();
        int fileLength;
        int counter;
        int dummycounter = 0;
        
        this.displaydummyline();
        tb.setText(this.readFile());
        counter = fileParentRecord;
        fileLength = tb.size();
        
        SKS_TMP_LineTable.LineNumber = counter;
        this.populateFileRecordGrid(tb);
        
        
        tb.setText(this.readFile());
        while((tb.subStr(2,2) != 'TS') && (tb.subStr(2,2) != 'FH') && (tb.subStr(2,2) != 'FT'))
        {
            Counter++;
            dummycounter++;
            if(dummycounter == 9)
            {
                this.displaydummyline();
                dummycounter = 0;
            }
            SKS_TMP_LineTable.LineNumber = counter;
            this.populateFileRecordGrid(tb);

            tb.setText(this.readFile());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getParameters</Name>
				<Source><![CDATA[
    void getParameters()
    {
        // Populate the class variables below for use later:
        //    SKS_EB_FilePath fileName;
        //    str 15 fileFormatId;
        //    int fileRecord;
    
        SKS_LB_FileRecordParms fileRecordParms;
    
        if (!element.args() || (!element.args().record() && !element.args().parmObject()))
        {
            throw error("@SYS111577");  // Invalid argument
        }
    
        // parmObject takes precedence over a record if both are sent
        if (element.args().parmObject())
        {
            // Must be a parmObject - class SKS_LB_FileRecordParms
            fileRecordParms = element.args().parmObject();
            fileName = fileRecordParms.FileName();
            fileFormatId = fileRecordParms.FileFormatId();
            fileRecord = fileRecordParms.FileRecord();
            fileParentRecord = fileRecordParms.FileParentRecord();
        }
        else if (element.args().record())
        {
            // Recieved a record with parms
            switch (element.args().record().TableId)
            {
                case tablenum(SKS_LB_JournalAR):
                    journalARRecord = element.args().record();
                    curselline.value(journalARRecord.FileRecord);
                    fileName = journalARRecord.Filename;
                    fileFormatId = journalARRecord.FormatID;
    
                    if(journalARRecord.ParentRecid > 0)
                    {
                        fileRecord = journalARRecord.ParentRecid;
                    }
                    else
                    {
                        fileRecord = journalARRecord.FileRecord;
                    }
                    break;
                case tablenum(SKS_LB_JournalARErrors):
                    journalARErrorsRecord = element.args().record();
                    curselline.value(journalARRecord.FileRecord);
                    fileName = journalARErrorsRecord.Filename;
                    fileFormatId = journalARErrorsRecord.FormatID;
                    fileRecord = journalARErrorsRecord.FileRecord;
                    break;
                default :
                    // Unknown record type
                    throw error(strfmt("@SKS437", element.name(), tableId2Name(element.args().record().TableId)));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        super();
        bai2open = NoYes::No;
        symopen = NoYes::No;
        if (this.validParameters())
        {
            RIL = new Recordinsertlist(tableNum(SKS_TMP_LineTable), false, false, false, false, false, SKS_TMP_LineTable);

            // Get the data from the file and display
            if(fileType == SKS_LB_FileType::BAI2)
            {
                if(fileRecord == -1)
                {
                    FileRecord = fileParentRecord;
                }
    
                CurSelLine.value(fileRecord);
                this.displayFileDataBAI2();
                group0.visible(false);
                group1.visible(true);
                Grid.visible(true);
            }
            else if(fileType == SKS_LB_FileType::EDI820 || fileType ==  SKS_LB_FileType::EDI823)
            {
                if(fileRecord == -1)
                {
                    FileRecord = fileParentRecord;
                }
    
                CurSelLine.value(fileRecord);
                this.displayFileDataEDI();
                group0.visible(false);
                group1.visible(true);
                Grid.visible(true);
            }
            else if(fileType == SKS_LB_FileType::Symcor)
            {
                if(fileRecord == -1)
                {
                    FileRecord = fileParentRecord;
                }
    
                CurSelLine.value(fileRecord);
                this.displayFileDataBAI2();//Will work for symcor as well
                group0.visible(false);
                group1.visible(true);
                Grid.visible(true);
            }
            else if(fileType == SKS_LB_FileType::WFRMF)
            {
                if(fileRecord == -1)
                {
                    FileRecord = fileParentRecord;
                }
    
                CurSelLine.value(fileRecord);
                this.displayFileDataWFRMF();
                group0.visible(false);
                group1.visible(true);
                Grid.visible(true);
            }
            else if(fileType == SKS_LB_FileType::CAMT54V1 || fileType == SKS_LB_FileType::CAMT54V2)
            {
                if(fileRecord == -1)
                {
                    FileRecord = fileParentRecord;
                }
    
                this.DisplayFileDataCAMT54(fileParentRecord);
                group0.visible(false);
                group1.visible(true);
                Grid.visible(true);
            }
            else if(fileType == SKS_LB_FileType::WFARRemitFile)
            {
                CurSelLine.value(fileRecord);
                this.displayFileDataWFARRMF();
                group0.visible(false);
                group1.visible(true);
                Grid.visible(true);
            }
            else if(fileType == SKS_LB_FileType::IntReceive)
            {
                CurSelLine.value(fileRecord);
                this.displayFileDataIR();
                group0.visible(false);
                group1.visible(true);
                Grid.visible(true);
            }
            else
            {
                this.displayFileData();
                group0.visible(true);
                group1.visible(false);
                Grid.visible(false);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>readFile</Name>
				<Source><![CDATA[
    str readFile()
    {
        // Using the class variables, attempt to read the file using the given format and return the requested the raw data
    
        SKS_LB_ReadFileCSV CSVReader;
        SKS_LB_ReadFileFixed FixedReader;
    
        str returnString = '';
        int readResult = 1; // 0 = good to go; 1 = something went wrong
    
        switch (fileType)
        {
            case SKS_LB_FileType::CSV:
                CSVReader = new SKS_LB_ReadFileCSV();
                CSVReader.setFileName(fileName);
                CSVReader.setFormatId(fileFormatId);
                CSVReader.setOmitHeaderRecsNbr(fileHeaderRecords);
                CSVReader.openFile();
                readResult = CSVReader.Read_Line(fileRecord);
                returnString = CSVReader.Get_Current_Line();
                break;
            case SKS_LB_FileType::FixedField:
                FixedReader = new SKS_LB_ReadFileFixed();
                FixedReader.setFileName(fileName);
                FixedReader.setFormatId(fileFormatId);
                FixedReader.setOmitHeaderRecsNbr(fileHeaderRecords);
                FixedReader.openFile();
                readResult = FixedReader.Read_Line(fileRecord);
                returnString = FixedReader.Get_Current_Line();
                break;
            case SKS_LB_FileType::TabDelimited:
                CSVReader = new SKS_LB_ReadFileCSV();
                CSVReader.useTabDelimiter();
                CSVReader.setFileName(fileName);
                CSVReader.setFormatId(fileFormatId);
                CSVReader.setOmitHeaderRecsNbr(fileHeaderRecords);
                CSVReader.openFile();
                readResult = CSVReader.Read_Line(fileRecord);
                returnString = CSVReader.Get_Current_Line();
                break;
            case SKS_LB_FileType::EDI820:
            case SKS_LB_FileType::EDI823:
                if(ediopen)
                {
                    readResult = EDIReader.Read_next();
                    returnString = EDIReader.Get_Current_Line();
                }
                else
                {
                    EDIReader = new SKS_LB_ReadFileEDI();
                    EDIReader.setFileName(fileName);
                    EDIReader.setFormatId(fileFormatId);
                    EDIReader.openFile();
                    readResult = EDIReader.Read_Line(fileParentRecord);
                    returnString = EDIReader.Get_Current_Line();
                    ediopen = NoYes::Yes;
                }
                break;
    
            case SKS_LB_FileType::Symcor:
                if(symOpen)
                {
                    readResult = SymReader.Read_next();
                    returnString = SymReader.Get_Current_Line();
                }
                else
                {
                    SymReader = new SKS_LB_ReadFileSymcor();
                    SymReader.setFileName(fileName);
                    SymReader.setFormatId(fileFormatId);
                    SymReader.openFile();
                    readResult = SymReader.Read_Line(fileParentRecord);
                    returnString = SymReader.Get_Current_Line();
                    symOpen = NoYes::Yes;
                }
                break;
    
            case SKS_LB_FileType::WFRMF:
                if(wfrmfOpen)
                {
                    readResult = wfrmfReader.Read_next();
                    returnString = wfrmfReader.Get_Current_Line();
                }
                else
                {
                    wfrmfReader = new SKS_LB_ReadFileWFRMF();
                    wfrmfReader.setFileName(fileName);
                    wfrmfReader.setFormatId(fileFormatId);
                    wfrmfReader.openFile();
                    readResult = wfrmfReader.Read_Line(fileParentRecord);
                    returnString = wfrmfReader.Get_Current_Line();
                    wfrmfOpen = NoYes::Yes;
                }
                break;
    
            case SKS_LB_FileType::CAMT54V2:
            case SKS_LB_FileType::CAMT54V1:
                this.DisplayFileDataCAMT54(fileParentRecord);
                readresult = 0;
                break;
    
            case SKS_LB_FileType::WFARRemitFile:
                if(WFARRMFOpen)
                {
                    readResult = wfarrmfReader.Read_next();
                    returnString = wfarrmfReader.Get_Current_Line();
                }
                else
                {
                    wfarrmfReader = new SKS_LB_ReadFileWFARRMF();
                    wfarrmfReader.setFileName(fileName);
                    wfarrmfReader.setFormatId(fileFormatId);
                    wfarrmfReader.openFile();
                    readResult = wfarrmfReader.Read_Line(fileParentRecord);
                    returnString = wfarrmfReader.Get_Current_Line();
                    WFARRMFOpen = NoYes::Yes;
                }
                break;
            case SKS_LB_FileType::IntReceive:
                if(IROpen)
                {
                    readResult = IRReadFile.Read_next();
                    returnString = IRReadFile.Get_Current_Line();
                }
                else
                {
                    IRReadFile = new SKS_LB_ReadFileIR();
                    IRReadFile.setFileName(fileName);
                    IRReadFile.setFormatId(fileFormatId);
                    IRReadFile.setOmitHeaderRecsNbr(fileHeaderRecords);
                    IRReadFile.openFile();
                    readResult = IRReadFile.Read_Line(fileParentRecord);
                    returnString = IRReadFile.Get_Current_Line();
                    IROpen = NoYes::Yes;
                }
                break;
            default : // Make BAI the default.  Base BAI class can be used to get current BAI line
                if(Bai2open)
                {
                    readResult = BAI2Reader.Read_next();
                    returnString = BAI2Reader.Get_Current_Line();
                }
                else
                {
                    BAI2Reader = new SKS_LB_ReadFileBAI2();
                    BAI2Reader.setFileName(fileName);
                    BAI2Reader.setFormatId(fileFormatId);
                    BAI2Reader.setOmitHeaderRecsNbr(fileHeaderRecords);
                    BAI2Reader.openFile();
                    readResult = BAI2Reader.Read_Line(fileParentRecord);
                    returnString = BAI2Reader.Get_Current_Line();
                    bai2open = NoYes::Yes;
                }
        }
    
        if (readResult != 0)
        {
            // We were not able to get the data
            error(strfmt("@SKS438", int2str(fileRecord), fileName));
        }
    
        return returnString;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validParameters</Name>
				<Source><![CDATA[
    boolean validParameters()
    {
        // Read and Validate the parameters and populates the class variables below for use later:
        //    SKS_EB_FilePath fileName;
        //    str 15 fileFormatId;
        //    int fileRecord;
        //    SKS_LB_FileType fileType;
        //    int fileHeaderRecords;
    
        boolean returnValue = true;
        SKS_LB_FILEFORMAT FileFormat;
    
        // Get the parameters
        this.getParameters();
    
        // Validate the file name parameter
        SKS_EB_BankIntegOptWithNoLicense bankIntOption = SKS_EB_FileStorage::find().StorageOption_LB;
        SKS_BF_BankIntType SKS_BF_BankIntType = SKS_BF_BankIntType::FileHubLocal;
        if(bankIntOption == SKS_EB_BankIntegOptWithNoLicense::BankFabricEnumValue)
        {
            SKS_BF_BankIntType = SKS_BF_BankIntType::BankFabric;
        }

        SKS_EB_FileHub fileHub = SKS_EB_FileHub::construct(SKS_BF_BankIntType);
        fileHub.runFileInquire(fileName);
        if(!fileHub.attrFileExists())
        {
            info("@SKS480");
            returnValue = false;
        }
    
        // Validate the file format parameter - Open the table of file formats using the format id
        select firstOnly RecId, FileType, OmitHeaderRecs from FileFormat where FileFormat.FormatID == fileFormatId;
    
        // FileFormat record found
        if (FileFormat.RecId != 0)
        {
            // Go ahead and grab the data we need from the file format record
            fileType = FileFormat.FileType;
            fileHeaderRecords = FileFormat.OmitHeaderRecs;
        }
        else
        {
            error(strfmt("@SYS89925", fileFormatId));
            returnValue = false;
        }
    
        return returnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateFileRecordGrid</Name>
				<Source><![CDATA[
    void populateFileRecordGrid(TextBuffer tb)
    {
        int FileLength;
        int LineCounter = 1;
        int LinesNeeded;
        int extraSegment;
        int x = 1;
        int lineNum;
        ;

        lineNum = SKS_TMP_LineTable.linenumber;
        FileLength = tb.size();
        LinesNeeded = filelength div 200;
        extrasegment = FileLength mod 200;

        if(extrasegment > 0)
        {
            LinesNeeded++;
        }

        while(LinesNeeded >= LineCounter)
        {
            SKS_TMP_LineTable.LineGroup1=tb.subStr(x,10);
            x+=10;

            SKS_TMP_LineTable.LineGroup2=tb.subStr(x,10);
            x+=10;

            SKS_TMP_LineTable.LineGroup3=tb.subStr(x,10);
            x+=10;
            
            SKS_TMP_LineTable.LineGroup4=tb.subStr(x,10);
            x+=10;

            SKS_TMP_LineTable.LineGroup5=tb.subStr(x,10);
            x+=10;

            SKS_TMP_LineTable.LineGroup6=tb.subStr(x,10);
            x+=10;

            SKS_TMP_LineTable.LineGroup7=tb.subStr(x,10);
            x+=10;

            SKS_TMP_LineTable.LineGroup8=tb.subStr(x,10);
            x+=10;

            SKS_TMP_LineTable.LineGroup9=tb.subStr(x,10);
            x+=10;

            SKS_TMP_LineTable.LineGroup10=tb.subStr(x,10);
            x+=10;

            SKS_TMP_LineTable.LineGroup11=tb.subStr(x,10);
            x+=10;

            SKS_TMP_LineTable.LineGroup12=tb.subStr(x,10);
            x+=10;

            SKS_TMP_LineTable.LineGroup13=tb.subStr(x,10);
            x+=10;

            SKS_TMP_LineTable.LineGroup14=tb.subStr(x,10);
            x+=10;

            SKS_TMP_LineTable.LineGroup15=tb.subStr(x,10);
            x+=10;

            SKS_TMP_LineTable.LineGroup16=tb.subStr(x,10);
            x+=10;

            SKS_TMP_LineTable.LineGroup17=tb.subStr(x,10);
            x+=10;

            SKS_TMP_LineTable.LineGroup18=tb.subStr(x,10);
            x+=10;

            SKS_TMP_LineTable.LineGroup19=tb.subStr(x,10);
            x+=10;

            SKS_TMP_LineTable.LineGroup20=tb.subStr(x,10);
            x+=10;
            SKS_Tmp_LineTable.LineNumber = lineNum;
            RIL.add(SKS_Tmp_LineTable);
            SKS_TMP_LineTable.clear();
            LineCounter++;

        }
        RIL.insertDatabase();
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="" />
		<DataControls xmlns="" />
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>SKS_Tmp_LineTable</Name>
			<Table>SKS_TMP_LineTable</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LineGroup1</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LineGroup10</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LineGroup11</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LineGroup12</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LineGroup13</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LineGroup14</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LineGroup15</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LineGroup16</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LineGroup17</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LineGroup18</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LineGroup19</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LineGroup2</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LineGroup20</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LineGroup3</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LineGroup4</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LineGroup5</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LineGroup6</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LineGroup7</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LineGroup8</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LineGroup9</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LineNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<AllowUserSetup xmlns="">No</AllowUserSetup>
		<Caption xmlns="">@SKS445</Caption>
		<HideToolbar xmlns="">Yes</HideToolbar>
		<Pattern xmlns="">SimpleList</Pattern>
		<PatternVersion xmlns="">1.1</PatternVersion>
		<StatusBarStyle xmlns="">None</StatusBarStyle>
		<Style xmlns="">SimpleList</Style>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>ActionPane</Name>
				<Type>ActionPane</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>ButtonGroup</Name>
						<Type>ButtonGroup</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls />
					</AxFormControl>
				</Controls>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>Group1</Name>
				<AutoDeclaration>Yes</AutoDeclaration>
				<ElementPosition>212097150</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Pattern>CustomAndQuickFilters</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl>
						<Name>QuickFilterControl1</Name>
						<FormControlExtension>
							<Name>QuickFilterControl</Name>
							<ExtensionComponents />
							<ExtensionProperties>
								<AxFormControlExtensionProperty>
									<Name>targetControlName</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>defaultColumnName</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>placeholderText</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
							</ExtensionProperties>
						</FormControlExtension>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormIntegerControl">
						<Name>CurSelLine</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1431655764</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Integer</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Label>@SYS10562</Label>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalLeft</ArrangeMethod>
				<FrameType>None</FrameType>
				<Style>CustomFilter</Style>
				<ViewEditMode>Edit</ViewEditMode>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGridControl">
				<Name>Grid</Name>
				<AutoDeclaration>Yes</AutoDeclaration>
				<ElementPosition>424194300</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Type>Grid</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormIntegerControl">
						<Name>SKS__Tmp_LineTable_Linenumber</Name>
						<ElementPosition>477218588</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>Integer</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>LineNumber</DataField>
						<DataSource>SKS_Tmp_LineTable</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>SKS_Tmp_LineTable_LineGroup1</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>715827882</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<HelpText>@SKS2363</HelpText>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Width>407</Width>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Bold>Normal</Bold>
						<DataField>LineGroup1</DataField>
						<DataSource>SKS_Tmp_LineTable</DataSource>
						<Font>Courier New</Font>
						<FontSize>10</FontSize>
						<Label>....5....10...5....20...5....30...5....40...5....60...5....70...5....80...5....90...5....</Label>
						<LabelFont>Terminal</LabelFont>
						<LabelFontSize>9</LabelFontSize>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>SKS_Tmp_LineTable_LineGroup2</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>954437176</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<HelpText>@SKS2364</HelpText>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Width>407</Width>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>LineGroup2</DataField>
						<DataSource>SKS_Tmp_LineTable</DataSource>
						<Font>courier new</Font>
						<FontSize>10</FontSize>
						<Label>....5....10...5....20...5....30...5....40...5....60...5....70...5....80...5....90...5....</Label>
						<LabelFont>Terminal</LabelFont>
						<LabelFontSize>9</LabelFontSize>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>SKS_Tmp_LineTable_LineGroup3</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1193046470</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<HelpText>@SKS2365</HelpText>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Width>407</Width>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>LineGroup3</DataField>
						<DataSource>SKS_Tmp_LineTable</DataSource>
						<Font>courier new</Font>
						<FontSize>10</FontSize>
						<Label>....5....10...5....20...5....30...5....40...5....60...5....70...5....80...5....90...5....</Label>
						<LabelFont>Terminal</LabelFont>
						<LabelFontSize>9</LabelFontSize>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>SKS_Tmp_LineTable_LineGroup4</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1431655764</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<HelpText>@SKS2366</HelpText>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Width>375</Width>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>LineGroup4</DataField>
						<DataSource>SKS_Tmp_LineTable</DataSource>
						<Font>courier new</Font>
						<FontSize>10</FontSize>
						<Label>....5....10...5....20...5....30...5....40...5....60...5....70...5....80...5....90...5....</Label>
						<LabelFont>Terminal</LabelFont>
						<LabelFontSize>9</LabelFontSize>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>SKS_Tmp_LineTable_LineGroup5</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1670265058</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<HelpText>@SKS2367</HelpText>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Width>375</Width>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>LineGroup5</DataField>
						<DataSource>SKS_Tmp_LineTable</DataSource>
						<Font>courier new</Font>
						<FontSize>10</FontSize>
						<Label>....5....10...5....20...5....30...5....40...5....60...5....70...5....80...5....90...5....</Label>
						<LabelFont>Terminal</LabelFont>
						<LabelFontSize>9</LabelFontSize>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>SKS_Tmp_LineTable_LineGroup6</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1908874352</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<HelpText>@SKS2368</HelpText>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Width>375</Width>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>LineGroup6</DataField>
						<DataSource>SKS_Tmp_LineTable</DataSource>
						<Font>courier new</Font>
						<FontSize>10</FontSize>
						<Label>....5....10...5....20...5....30...5....40...5....60...5....70...5....80...5....90...5....</Label>
						<LabelFont>Terminal</LabelFont>
						<LabelFontSize>9</LabelFontSize>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>SKS_Tmp_LineTable_LineGroup7</Name>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>LineGroup7</DataField>
						<DataSource>SKS_Tmp_LineTable</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>SKS_Tmp_LineTable_LineGroup8</Name>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>LineGroup8</DataField>
						<DataSource>SKS_Tmp_LineTable</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>SKS_Tmp_LineTable_LineGroup9</Name>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>LineGroup9</DataField>
						<DataSource>SKS_Tmp_LineTable</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>SKS_Tmp_LineTable_LineGroup10</Name>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>LineGroup10</DataField>
						<DataSource>SKS_Tmp_LineTable</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>SKS_Tmp_LineTable_LineGroup11</Name>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>LineGroup11</DataField>
						<DataSource>SKS_Tmp_LineTable</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>SKS_Tmp_LineTable_LineGroup12</Name>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>LineGroup12</DataField>
						<DataSource>SKS_Tmp_LineTable</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>SKS_Tmp_LineTable_LineGroup13</Name>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>LineGroup13</DataField>
						<DataSource>SKS_Tmp_LineTable</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>SKS_Tmp_LineTable_LineGroup14</Name>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>LineGroup14</DataField>
						<DataSource>SKS_Tmp_LineTable</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>SKS_Tmp_LineTable_LineGroup15</Name>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>LineGroup15</DataField>
						<DataSource>SKS_Tmp_LineTable</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>SKS_Tmp_LineTable_LineGroup16</Name>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>LineGroup16</DataField>
						<DataSource>SKS_Tmp_LineTable</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>SKS_Tmp_LineTable_LineGroup17</Name>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>LineGroup17</DataField>
						<DataSource>SKS_Tmp_LineTable</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>SKS_Tmp_LineTable_LineGroup18</Name>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>LineGroup18</DataField>
						<DataSource>SKS_Tmp_LineTable</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>SKS_Tmp_LineTable_LineGroup19</Name>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>LineGroup19</DataField>
						<DataSource>SKS_Tmp_LineTable</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>SKS_Tmp_LineTable_LineGroup20</Name>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>LineGroup20</DataField>
						<DataSource>SKS_Tmp_LineTable</DataSource>
					</AxFormControl>
				</Controls>
				<DataSource>SKS_Tmp_LineTable</DataSource>
				<GridLinesStyle>Vertical</GridLinesStyle>
				<MultiSelect>No</MultiSelect>
				<ShowColLabels>No</ShowColLabels>
				<ShowRowLabels>No</ShowRowLabels>
				<Style>Tabular</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>Group0</Name>
				<AutoDeclaration>Yes</AutoDeclaration>
				<ElementPosition>729083953</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<HeightMode>Auto</HeightMode>
				<Pattern>FillText</Pattern>
				<PatternVersion>UX7 1.0</PatternVersion>
				<Skip>Yes</Skip>
				<Type>Group</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormStaticTextControl">
						<Name>DataLine1</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1227133512</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>SizeToAvailable</HeightMode>
						<Left>70</Left>
						<LeftMode>Manual</LeftMode>
						<Top>26</Top>
						<TopMode>Manual</TopMode>
						<Type>StaticText</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Bold>Normal</Bold>
						<Font>Courier New</Font>
						<FontSize>8</FontSize>
						<Text></Text>
					</AxFormControl>
				</Controls>
				<Caption>@SKS436</Caption>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>