<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>SKS_LB_FFDeductions</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class SKS_LB_FFDeductions extends FormRun
{
    SKS_LB_JournalAR jounralARLoc;

}
]]></Source>
			</Method>
			<Method>
				<Name>InitTransferRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// creates new record in SKS_LB_JournalAR
    /// </summary>
    public SKS_LB_JournalAR InitTransferRecord()
    {
        SKS_PP_Setup        TmpSKS_pp_setup;
        SKS_LB_Bank         TmpSKS_LB_Bank;
        DirPartyTable       DirPartyTable;
        DimensionDefault    custDim;
        CustTable           gCustTable;
        SKS_LB_JournalAR    journalAR;

        journalAR.JournalId = jounralARLoc.JournalId;
        journalAR.BatchNum = jounralARLoc.BatchNum; 
        journalAR.CustomerCompany = Company.valuestr();
        journalAR.CustAccount = CustAccount.valueStr();
        journalAR.Description = Notes.valueStr();
        journalAR.isDED = NoYes::Yes;
        journalAR.FFDedCat = DeductionCategory.valueStr();
        journalAR.PmtAmountCur = Amount.realValue();

        gCustTable = CustTable::find(journalAR.CustAccount);
        select firstonly lbdefaultfromcust, LBDefaultFromJournal, LBUseInvoiceDimensions from TmpSKS_pp_setup;
        select firstonly LBJournalName from TmpSKS_LB_Bank where TmpSKS_LB_Bank.bankaccountID == journalAR.bankacct && tmpSKS_LB_Bank.LBformatid == journalAR.formatid;
        
        if(TmpSKS_pp_setup.LBDefaultFromCust)   //call method that merges
        {
            custDim = gCustTable.DefaultDimension;
        }
        else
        {
            custDim = 0;
        }

        journalAR.DefaultDimension = SKS_LB_Process_IMPORTTEMP_Records::LBDimensionMerge(TmpSKS_pp_setup, 0 , custDim, TmpSKS_LB_Bank.LBJournalName, Company.valuestr());
        journalAR.Party = gCustTable.party;        
        journalAR.CustName = gCustTable.name();

        journalAR.LBSettlementMethod = SKS_LB_Depositor::find(Company.valueStr(), CustAccount.valueStr(), false).LBSettlementMethod;
        journalAR.CustTransOpenRecId = 0;
        journalAR.CustTransRecId = 0;
        journalAR.Invoice = '';
        journalAR.ActualSettleAmountCur = 0;
        //journalAR.IsTransferredToLedger = NoYes::No;
        journalAR.CustAccountSugg = '';
        journalAR.insert();
        return journalAR;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    public void init()
    {
        super();

        jounralARLoc = element.args().record() as  SKS_LB_JournalAR;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findDedLimit</Name>
				<Source><![CDATA[
    public AmountCur findDedLimit(SKS_LB_TPMDedCat _DedCat)
    {
        AmountCur           LimitAmount = 0;

        Dicttable           dictTable;
        Common              common;
        Common              common2;
        int                 FoxDedCatWOtableid;
        int                 FoxFndCatTableId;

        FoxDedCatWOtableid = tableName2Id('FoxMpyDeductionCategoryWriteoff'); 
        FoxFndCatTableId = tableName2Id('FoxFndCategory');

                    
        dictTable= new DictTable(FoxDedCatWOtableid);
        if (dictTable != null)
        {
            common = dictTable.makeRecord();
        }

            dictTable= new DictTable(FoxFndCatTableId);
        if (dictTable != null)
        {
            common2 = dictTable.makeRecord();
        }
        
        select firstOnly common
                join common2
                where common.(fieldName2id(FoxDedCatWOtableid, 'categorykey')) == common2.(fieldName2id(FoxFndCatTableId, 'recid'))
                            && common2.(fieldName2id(FoxFndCatTableId, 'code')) == _DedCat;
        // if a match is found
        if(common)
        {
            // find limit amount
            LimitAmount = abs(common.(fieldName2id(FoxDedCatWOtableid, 'WriteOffLimit')));
        }

        return LimitAmount;
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="" />
		<DataControls xmlns="">
			<Control>
				<Name>DeductionCategory</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        /// <summary>
        ///
        /// </summary>
        public void lookup()
        {
            Query query = new Query();
            QueryBuildDataSource queryBuildDataSource;
            QueryBuildRange queryBuildRange;
    
            SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(SKS_TPM_DeductionCategory), this);

            queryBuildDataSource = query.addDataSource(tableNum(SKS_TPM_DeductionCategory));
    
            sysTableLookup.addLookupField(fieldNum(SKS_TPM_DeductionCategory, SKS_LB_TPMDedCat));
    
            sysTableLookup.parmQuery(query);
    
            sysTableLookup.performFormLookup();
    
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>OK</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            boolean inputFlag = true;
            if(CustAccount.valueStr() == '')
            {
                Error("@SKS:CustAcctError");
                inputFlag = false;
            }
            if(Company.valueStr() == '')
            {
                Error("@SKS:CompanyError");
                inputFlag = false;
            }
            if(Amount.realValue() == 0)
            {
                Error("@SKS:AmountError");
                inputFlag = false;
            }           
            if(DeductionCategory.valueStr() == '')
            {
                Error("@SKS:FFDedError");
                inputFlag = false;
            }
            // check writeoff limit
            //boolean limitFlag = element.findDedLimit(DeductionCategory.valueStr() < Amount.realValue());
            if(element.findDedLimit(DeductionCategory.valueStr()) < Amount.realValue())
            {
                Error("@SKS:WriteOffLimitError");
                inputFlag = false;
            }            

            super();
    
            if(inputFlag)
            {
                SKS_LB_JournalAR journalAR = element.InitTransferRecord();
                element.closeOK();
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Cancel</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            super();

            element.closeCancel();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>SKS_LB_FFDeductionsTable</Name>
			<Table>SKS_LB_FFDeductionsTable</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>Amount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Company</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustAccount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DeductionCategory</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Notes</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@SKS:FFDedCreation</Caption>
		<Pattern xmlns="">Dialog</Pattern>
		<PatternVersion xmlns="">1.2</PatternVersion>
		<Style xmlns="">Dialog</Style>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>FormGroupControl1</Name>
				<HeightMode>SizeToAvailable</HeightMode>
				<Pattern>FieldsFieldGroups</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>Company</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<ExtendedDataType>SelectableDataArea</ExtendedDataType>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormRealControl">
						<Name>Amount</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>Real</Type>
						<FormControlExtension
							i:nil="true" />
						<ExtendedDataType>AmountCur</ExtendedDataType>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>Notes</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<ExtendedDataType>Notes</ExtendedDataType>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>CustAccount</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<ExtendedDataType>CustAccount</ExtendedDataType>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>DeductionCategory</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<ExtendedDataType>SKS_LB_TPMDedCat</ExtendedDataType>
					</AxFormControl>
				</Controls>
				<ColumnsMode>Fill</ColumnsMode>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonGroupControl">
				<Name>ButtonGroup</Name>
				<ElementPosition>1431655764</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<LeftMode>Center</LeftMode>
				<Type>ButtonGroup</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormButtonControl">
						<Name>OK</Name>
						<ElementPosition>1073741822</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<HelpText>@SKS717</HelpText>
						<Skip>Yes</Skip>
						<Type>Button</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Text>@SYS5473</Text>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormButtonControl">
						<Name>Cancel</Name>
						<ElementPosition>1610612733</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<HelpText>@SKS953</HelpText>
						<Skip>Yes</Skip>
						<Type>Button</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Text>@SYS50163</Text>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalRight</ArrangeMethod>
				<Style>DialogCommitContainer</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>