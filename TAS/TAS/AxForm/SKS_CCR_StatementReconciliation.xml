<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>SKS_CCR_StatementReconciliation</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class SKS_CCR_StatementReconciliation extends FormRun
{
    SKS_CCR_BankTransFormTable   transFormTable;
    guid                        nullGuid;
    FromDate                    fromDate;
    FromDate                    toDate;
    PmfTableLookupExtended      sysTableLookup;
    SKS_CCR_CreditCardStatement selectedRecord; // 7517
    BankAccountStatement        statement;
    Query                       query;
    QueryBuildDataSource        qbds;
    QueryBuildRange             queryRangeAccountStatementNum;
    QueryBuildRange             queryRangeAccountId;
    QueryBuildRange             queryRangeAccountStatementDate;
    QueryBuildRange             queryRangeReconcileDate;
    QueryBuildDataSource        qbdsBankTran;
    QueryBuildDataSource        qbdsBankAcctStatement;
    container                   bankRecCompanies;
    SKS_BR_eBankRecCustomerGroupView    eBankCustGroup; //SKS CR 9729
    boolean                     queryData = false;
    boolean                     blankData = false;
    str                         origBankAcctStatement = '';

}
]]></Source>
			</Method>
			<Method>
				<Name>bankAccountStatement</Name>
				<Source><![CDATA[
    BankAccountStatement bankAccountStatement()
    {
        return BankAccountStatement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadData</Name>
				<Source><![CDATA[
    public void loadData(boolean _queryData, boolean _blankData)
    {
        queryData = _queryData;
        blankData = _blankData;

        BankAccountStatement_ds.executeQuery();
        BankAccountStatement1_ds.executeQuery();
        BankAccountStatement1_ds.refresh();
        BankAccountStatement1_ds.reread();
        SKS_CCR_BankTran_ds.executeQuery();

        element.enableButtons();
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableButtons</Name>
				<Source><![CDATA[
    public void enableButtons()
    {
        boolean enabled;
        //real unreconciledAmountAmt = 0;// SKS_FDD_13903
        real    importUnmatchedAmountAmt = 0;
        int64   importUnmatchedCountCnt = 0;//SKS_Bug_8627
        real    unreconciledCurrencyBalance = 0;
        //real    unmatchedCurrencyBalance = 0;

        // SKS_FDD_13903 -->
        ///unreconciledAmountAmt = BankAccountStatement_ds.unreconciledAmount(BankAccountStatement1);
        unreconciledCurrencyBalance = BankAccountStatement_ds.ccr_unreconciledCurrencyBalance(BankAccountStatement1);
        // SKS_FDD_13903 <--
        importUnmatchedAmountAmt = BankAccountStatement_ds.importUnmatchedAmount(BankAccountStatement1);
        importUnmatchedCountCnt = BankAccountStatement_ds.importUnmatchedCount(BankAccountStatement1);//SKS_Bug_8627
        BtnDeleteStatement.enabled(BankAccountStatement1 != null && BankAccountStatement1.ReconcileDate == dateNull());

        if (SKS_CCR_Statement.valueStr() != ''
            && !SKS_CCR_BankTran.InUse)
        {
            enabled = true;
        }
        else
        {
            enabled = false;
        }

        if (SKS_CCR_Statement.valueStr() != ''
         && BankAccountStatement1.ReconcileDate == dateNull()
         && !SKS_CCR_BankTran.InUse)
        {
            enabled = true;
        }
        else
        {
            enabled = false;
        }
        ReconcileBtn.enabled(enabled && unreconciledCurrencyBalance == 0 && importUnmatchedAmountAmt == 0 && importUnmatchedCountCnt == 0);// SKS_FDD_13903
        btnMatchTrans.enabled(enabled);

        if (BankAccountStatement1.ReconcileDate == dateNull() && !SKS_CCR_BankTran.InUse && !SKS_CCR_BankTran_Voucher.valueStr()) //SKS_Bug_10290
        {
            enabled = true;
        }
        else
        {
            enabled = false;
        }

        //SKS_BR_BankTran bankTran = SKS_BR_BankTran;

        // SKS_FDD_13903 - Below code has been commented since Duplicate Match button is no more useful for CCR
       /* if(((SKS_BR_BankTran.ManualReconciliationID == emptyGuid()
               && SKS_BR_BankTran.LedgerJournalRecId == 0
               &&SKS_BR_BankTran.PaymentJournalNum == '')
            || SKS_BR_BankTran.TranAmount == 0)
            && SKS_BR_BankTran.MultipleMatches)
        {
                DuplicateMatch.enabled(true);
        }*/

        btnRemoveMatch.enabled(enabled);
        TransactionReconciliation.enabled(!SKS_CCR_BankTran.InUse);
        ReverseReconciliation.enabled(SKS_PP_Setup::find().CCR_AllowReverseReconciliation && BankAccountStatement1.ReconcileDate != dateNull()); //CR-9689
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableFieldsActive</Name>
				<Source><![CDATA[
    void enableFieldsActive()
    {
        BankAccountStatement    locAccountStatement;
        JournalBlockLevel       JournalBlockLevel;

        select firstOnly crossCompany SKS_CCR_SessionId from locAccountStatement;

        if (locAccountStatement.SKS_CCR_SessionId)
        {
            JournalBlockLevel = JournalBlockLevel::InUse;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        SKS_PP_Sys      SKS_PP_Sys;
        SKS_PP_500PPBas dd500PP;
        int             result;
        //SKS_BR_FileFormat   locSKS_BR_FileFormat;
        //SKS_PP_Bank         locSKS_PP_Bank;

        transFormTable = new SKS_CCR_BankTransFormTable(element);

        super();

        SKS_PP_Sys = new SKS_PP_Sys();
        if ( !SKS_PP_Sys.ValidateSetup(this.name()))
        {
            this.close();
        }
        else
        {
            dd500PP = new SKS_PP_500PPBas();
            result = dd500PP.IsRegistered('AB');
            if (result != 1)
            {
                box::warning("@SKS326");
                this.close();
            }
        }


        this.enableButtons();

        AllReconciled.selectionChange();//This line is required...
        AllReconciled.selection(enum2int(AllNotReconciled::NotReconciled));
        AllReconciled.selectionChange();

        transFormTable.parmCtrlMarkInUseBlock(SKS_CCR_BankTran_InUse);

        /* SKS_FDD_13903 - Commented the below code as Multicash formats are not available in CCR
        // vvv11980vvv
        //enable the Additional Info form, if there is a muilticash format in ANY company.
        //this form may, at some future time, contain additonal infor for other formats.
        select crosscompany RecId from locSKS_BR_FileFormat
            where locSKS_BR_FileFormat.FileType == SKS_BR_FileType::Multicash_COL
                || locSKS_BR_FileFormat.FileType == SKS_BR_FileType::MulticashCOLBAN
                || locSKS_BR_FileFormat.FileType == SKS_BR_FileType::MulticashCOLBOG
            exists join locSKS_PP_Bank
            where locSKS_PP_Bank.BRFormatID == locSKS_BR_FileFormat.FormatID;
        SKS_BR_ImportAdditionalInfo.visible(locSKS_BR_FileFormat.RecId > 0);
        // ^^^11980^^^*/
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableCustFields</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    public void enableCustFields()
    {
        if ( SKS_CCR_BankTran.GLMatchOrCreate == SKS_CCR_GLMatchOrCreate::Manual)
        {
            SKS_CCR_BankTran_ds.object(fieldNum(SKS_CCR_BankTran, CustCompany)).allowEdit(true);
            if(SKS_CCR_BankTran.CustCompany)
            {
                SKS_CCR_BankTran_ds.object(fieldNum(SKS_CCR_BankTran, CustAccount)).allowEdit(true);
            }
            else
            {
                SKS_CCR_BankTran_ds.object(fieldNum(SKS_CCR_BankTran, CustAccount)).allowEdit(false);
                SKS_CCR_BankTran.CustAccount = '';
                SKS_CCR_BankTran_ds.refresh();  //SKS CR 9729
            }
        }
        else
        {
            SKS_CCR_BankTran_ds.object(fieldNum(SKS_CCR_BankTran, CustAccount)).allowEdit(false);
            SKS_CCR_BankTran_ds.object(fieldNum(SKS_CCR_BankTran, CustCompany)).allowEdit(false);
        }
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>BankAccountStatement</Name>
				<Methods>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        public void executeQuery()
        {
            BankAccountStatement_ds.query().dataSourceTable(tableNum(BankAccountStatement)).clearRanges();
            BankAccountStatement_ds.query().dataSourceTable(tableNum(BankAccountStatement)).addRange(fieldNum(BankAccountStatement,AccountStatementNum)).value(statement.AccountStatementNum);
            BankAccountStatement_ds.query().dataSourceTable(tableNum(BankAccountStatement)).addRange(fieldNum(BankAccountStatement,AccountId)).value(statement.AccountId);
            BankAccountStatement_ds.query().dataSourceTable(tableNum(BankAccountStatement)).addRange(fieldNum(BankAccountStatement,AccountStatementDate)).value(queryValue(statement.AccountStatementDate));

            element.enableButtons();

            // Initially the form is loaded without data
            // The user will need to click Apply filter to load data
            // The queryData variable is set to true the first time Apply filter is clicked
            if(queryData)
            {
                super();
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        public int active()
        {
            int     ret;
            boolean canBeAutoUnlocked;

            if (bankaccountstatement.SKS_CCR_SessionId && ! isSessionActive(bankaccountstatement.SKS_CCR_SessionId,bankaccountstatement.SKS_CCR_SessionLoginDateTime))
            {
                canBeAutoUnlocked = true;
            }
            else
            {
                canBeAutoUnlocked = false;
            }

            if (canBeAutoUnlocked)
            {
                bankaccountstatement.selectForUpdate(true);
                bankaccountstatement.SKS_CCR_SessionId = 0;
                bankaccountstatement.SKS_CCR_SessionLoginDateTime = utcDateTimeNull();
                bankaccountstatement.update();
            }

            element.enableFieldsActive();
            ret = super();

            element.enableButtons();

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>importUnmatchedCount</Name>
						<Source><![CDATA[
        public display SKS_EB_Count importUnmatchedCount(BankAccountStatement _bankAccountStatement)
        {
            return SKS_CCR_BankAcctStmt::importUnmatchedCount(_bankAccountStatement);
        }

]]></Source>
					</Method>
					<Method>
						<Name>importCount</Name>
						<Source><![CDATA[
        public display SKS_EB_Count importCount(BankAccountStatement _bankAccountStatement)
        {
            SKS_CCR_BankTran lSKS_CCR_BankTran;

            select crossCompany count(RecId) from lSKS_CCR_BankTran
                where lSKS_CCR_BankTran.OriginalStatementRecId == _bankAccountStatement.RecId;

            return lSKS_CCR_BankTran.RecId;
        }

]]></Source>
					</Method>
					<Method>
						<Name>unreconciledAmount</Name>
						<Source><![CDATA[
        public display AmountCur unreconciledAmount(BankAccountStatement _bankAccountStatement)
        {
            DataAreaId statementCompany = BankAccountStatement_dataAreaId.text();
            if(statementCompany == '')
            {
                statementCompany = curExt();
            }

            changecompany(statementCompany)
            {
                return SKS_CCR_BankAcctStmt::unreconciledAmount(_bankAccountStatement);
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>inUseUserId</Name>
						<Source><![CDATA[
        //BP Deviation Documented
        display JournalBlockInUseUserId inUseUserId()
        {
            return BankAccountStatement.SKS_CCR_SessionId ? new xSession(BankAccountStatement.SKS_CCR_SessionId).userId() : '';
        }

]]></Source>
					</Method>
					<Method>
						<Name>inUseBlock</Name>
						<Source><![CDATA[
        //BP Deviation Documented
        edit JournalMarkInUseBlock inUseBlock(boolean _set, journalTableMap _JournalTable, JournalMarkInUseBlock _value)//JournalTableMap _journalTable, JournalMarkInUseBlock _value)
        {
            return bankaccountstatement.SKS_CCR_SessionId ? true : false;
        }

]]></Source>
					</Method>
					<Method>
						<Name>importUnmatchedAmount</Name>
						<Source><![CDATA[
        public display AmountMST importUnmatchedAmount(BankAccountStatement _bankAccountStatement)
        {
            return SKS_CCR_BankAcctStmt::importUnmatchedAmount(_bankAccountStatement);
        }

]]></Source>
					</Method>
					<Method>
						<Name>ccr_UnreconciledCurrencyBalance</Name>
						<Source><![CDATA[
        // SKS_FDD_13903
        public display AmountMST ccr_UnreconciledCurrencyBalance(BankAccountStatement _bankAccountStatement)
        {
            return SKS_CCR_BankAcctStmt::unReconciledCurrencyBalance(_bankAccountStatement);
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>SKS_CCR_BankTran</Name>
				<Methods>
					<Method>
						<Name>ccr_CurrencyCode</Name>
						<Source><![CDATA[
        /// <summary>
        /// Get currencyCode
        /// </summary>

        public display CurrencyCode ccr_CurrencyCode(SKS_CCR_BankTran _sks_CCR_BankTran)
        {
            BankAccountStatement    bankAccountStatementLoc;

            select firstonly CurrencyCode from bankAccountStatementLoc
                where bankAccountStatementLoc.RecId == _sks_CCR_BankTran.OriginalStatementRecId;

            return bankAccountStatementLoc.CurrencyCode;
        }

]]></Source>
					</Method>
					<Method>
						<Name>lockImage</Name>
						<Source><![CDATA[
        //BP Deviation Documented
        //SKS_BR_BlockInUse
        display Integer lockImage(SKS_CCR_BankTran _sKS_CCR_BankTran)
        {
            return SKS_CCR_BankTran.datasourceMethodLockImage(_sKS_CCR_BankTran);
        }

]]></Source>
					</Method>
					<Method>
						<Name>showMatchIndicatorIcon</Name>
						<Source><![CDATA[
        public display container showMatchIndicatorIcon(SKS_CCR_BankTran _table)
        {
            str                 icon;
            #ResAppl
        
            switch (_table.MatchIndicator)
            {
                case SKS_BR_MatchIndicator::Red :
                    icon = #RedSquare;
                    break;
        
                case SKS_BR_MatchIndicator::Green :
                    icon = #GreenSquare;
                    break;
        
                case SKS_BR_MatchIndicator::Blue :
                    icon = #BlueSquare;
                    break;
        
                case SKS_BR_MatchIndicator::Yellow :
                    icon = #YellowSquare;
                    break;
            }
        
            return ImageReference::constructForSymbol(icon).pack();
        }

]]></Source>
					</Method>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        public int active()
        {
            int ret;
        
            ret = super();
        
            if (SKS_CCR_BankTran.GLMatchOrCreate == SKS_CCR_GLMatchOrCreate::Manual)
            {
                SKS_CCR_BankTran_ds.object(fieldNum(SKS_CCR_BankTran, CustCompany)).allowEdit(true);
                if(SKS_CCR_BankTran.CustCompany)
                {
                    SKS_CCR_BankTran_ds.object(fieldNum(SKS_CCR_BankTran, CustAccount)).allowEdit(true);
                }
                else
                {
                    SKS_CCR_BankTran_ds.object(fieldNum(SKS_CCR_BankTran, CustAccount)).allowEdit(false);
                    SKS_CCR_BankTran.CustAccount = '';
                }
            }
            else
            {
                SKS_CCR_BankTran_ds.object(fieldNum(SKS_CCR_BankTran, CustAccount)).allowEdit(false);
                SKS_CCR_BankTran_ds.object(fieldNum(SKS_CCR_BankTran, CustCompany)).allowEdit(false);
            }
            //SKS_Bug_8692 <--
            // SKS_BR_BlockInUse -->
            SKS_CCR_BankTran_InUse.enabled(SKS_CCR_BankTran.InUse);
        
            element.enableButtons();
            //SKS_BR_BlockInUse <--
        
            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        public void executeQuery()
        {
            //SKS CR 9729 -->
            query = this.query() ;
            query.allowCrossCompany(true);
            query.clearCompanyRange();
            SKS_BR_MatchView locSKS_BR_MatchView;
            str locStrSKS_BR_MatchView = AllMatched.valueStr();
            AllNotReconciled locAllNotReconciled;
            str locStrAllNotReconciled = AllReconciled.valueStr();

            locSKS_BR_MatchView = str2Enum(locSKS_BR_MatchView, locStrSKS_BR_MatchView);
            locAllNotReconciled = str2Enum(locAllNotReconciled, locStrAllNotReconciled);
            if(!bankRecCompanies)
            {
                bankRecCompanies = SKS_EB_VirtualCompany::getCCRRecCompanies();
            }
        
            query.dataSourceTable(tableNum(SKS_CCR_BankTran)).clearRange(fieldNum(SKS_CCR_BankTran,AccountId));
            query.dataSourceTable(tableNum(SKS_CCR_BankTran)).clearRange(fieldNum(SKS_CCR_BankTran,OriginalStatementRecId));
            query.dataSourceTable(tableNum(SKS_CCR_BankTran)).clearRange(fieldNum(SKS_CCR_BankTran,Matched));
            //SKS CR 9729 <--
            qbdsBankAcctStatement.clearRanges();
            if(blankData)
            {
                query.dataSourceTable(tableNum(SKS_CCR_BankTran)).addRange(fieldNum(SKS_CCR_BankTran,OriginalStatementRecId)).value(queryValue(-1));
            }
            else if (SKS_CCR_Statement.valueStr() != '')
            {
                // statement buffer updated in SKS_BR_BankAcctStatement.modified() method
                qbdsBankAcctStatement.addRange(fieldNum(BankAccountStatement, AccountId)).value(queryValue(statement.AccountId));
                qbdsBankAcctStatement.addRange(fieldNum(BankAccountStatement, RecId)).value(queryValue(Statement.RecId));
                qbdsBankAcctStatement.addRange(fieldNum(BankAccountStatement, AccountStatementNum)).value(queryValue(Statement.AccountStatementNum));
                qbdsBankAcctStatement.addRange(fieldNum(BankAccountStatement, AccountStatementDate)).value(queryValue(statement.AccountStatementDate));
            }
            else
            {
                // 8702 CR -->
                if(BankAccountStatement_dataAreaId.valueStr() != '' || BankAccountStatement_AccountId.valueStr() != '' )
                {
                    if(BankAccountStatement_dataAreaId.valueStr() != '')
                    {
                        query.addCompanyRange(BankAccountStatement_dataAreaId.valueStr());
                    }
                    query.dataSourceTable(tableNum(SKS_CCR_BankTran)).addRange(fieldNum(SKS_CCR_BankTran,AccountId)).value(BankAccountStatement_AccountId.valueStr());
                    //SKS CR 9729
                  /*  if (eBankRecCustGroupId.valueStr() != '')
                    {
                        query.dataSourceTable(tableNum(SKS_BR_BankTran)).addRange(fieldNum(SKS_BR_BankTran, eBankRecCustGroupId)).value(eBankRecCustGroupId.valueStr());
                    } */
                    //SKS CR 9729
                }
                else
                {
                    for(int i = 1;i <= conLen(bankRecCompanies);i++)
                    {
                        query.addCompanyRange(conPeek(bankRecCompanies, i));
                    }
                }
                // 8702 CR <--
            }
        
            if(!blankData)
            {
               
                if(locSKS_BR_MatchView == SKS_BR_MatchView::All)
                {
                    query.dataSourceTable(tableNum(SKS_CCR_BankTran)).addSortField(fieldNum(SKS_CCR_BankTran,Matched),SortOrder::Ascending); // 8702 CR
                }
                else if(locSKS_BR_MatchView == SKS_BR_MatchView::Matched)
                {
                    query.dataSourceTable(tableNum(SKS_CCR_BankTran)).sortClear();
                    query.dataSourceTable(tableNum(SKS_CCR_BankTran)).addRange(fieldNum(SKS_CCR_BankTran, Matched)).value(queryValue(NoYes::Yes));
                }
                else if(locSKS_BR_MatchView == SKS_BR_MatchView::NotMatched)
                {
                    query.dataSourceTable(tableNum(SKS_CCR_BankTran)).sortClear();
                    query.dataSourceTable(tableNum(SKS_CCR_BankTran)).addRange(fieldNum(SKS_CCR_BankTran, Matched)).value(queryValue(NoYes::No));
                }
            }       
        
            if (locAllNotReconciled == AllNotReconciled::Reconciled)
            {
                qbdsBankAcctStatement.addRange(fieldNum(BankAccountStatement, ReconcileDate)).value('!'+queryValue(dateNull()));
            }
            else if (locAllNotReconciled == AllNotReconciled::NotReconciled)
            {
                qbdsBankAcctStatement.addRange(fieldNum(BankAccountStatement, ReconcileDate)).value(queryValue(dateNull()));
            }
        
            // Initially the form is loaded without data
            // The user will need to click Apply filter to load data
            // The queryData variable is set to true the first time Apply filter is clicked
            if(queryData)
            {
                super();    
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        /// <summary>
        /// Initialize query build ds /range variables
        /// </summary>
        public void init()
        {
            super();
        
            qbdsBankTran = this.query().dataSourceTable(tableNum(SKS_CCR_BankTran));
            qbdsBankTran.joinMode(JoinMode::InnerJoin);
            qbdsBankAcctStatement = qbdsBankTran.addDataSource(tableNum(BankAccountStatement));
            qbdsBankAcctStatement.addLink(fieldNum(SKS_CCR_BankTran, OriginalStatementRecId), fieldNum(BankAccountStatement, RecId));
        }

]]></Source>
					</Method>
					<Method>
						<Name>selectionChanged</Name>
						<Source><![CDATA[
        /// <summary>
        /// To enable or disable the reverse posting button.
        /// </summary>
        // CR-9541
        public void selectionChanged()
        {
            int                     markedRecord;
            BankAccountStatement    locBankAccountStatement;
            SKS_CCR_BankTran        sKS_CCR_BankTranLoc;
            MultiSelectionHelper    selectionHelper = MultiSelectionHelper::construct();
        
            super();
            selectionHelper.parmDataSource(SKS_CCR_BankTran_DS);
            sKS_CCR_BankTranLoc  = selectionHelper.getFirst();
            markedRecord        = SKS_CCR_BankTran_DS.recordsMarked().lastIndex();
            while (sKS_CCR_BankTranLoc)
            {
                select firstonly crosscompany RecId from locBankAccountStatement
                    where locBankAccountStatement.RecId         == sKS_CCR_BankTranLoc.OriginalStatementRecId &&
                        locBankAccountStatement.ReconcileDate   == dateNull() &&
                        locBankAccountStatement.DataAreaId      == sKS_CCR_BankTranLoc.DataAreaId;
        
                if(sKS_CCR_BankTranLoc.Voucher && sKS_CCR_BankTranLoc.Matched && locBankAccountStatement)
                {
                    RevPost.enabled(true);
                }
                else
                {
                    RevPost.enabled(false);
                    break;
                }
                sKS_CCR_BankTranLoc = selectionHelper.getNext();
            }
        
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>BankAccountStatement1</Name>
				<Methods>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        public int active()
        {
            int ret;

            ret = super();

            element.enableButtons();

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        public void executeQuery()
        {
            BankAccountStatement1_ds.query().dataSourceTable(tableNum(BankAccountStatement)).clearRanges();
            BankAccountStatement1_ds.query().clearCompanyRange();
            // 8702 CR -->
            if(statement)
            {
                BankAccountStatement1_ds.query().addCompanyRange(statement.DataAreaId);     //7582
                BankAccountStatement1_ds.query().dataSourceTable(tableNum(BankAccountStatement)).addRange(fieldNum(BankAccountStatement,AccountStatementNum)).value(SKS_CCR_Statement.valueStr());
            }
            else
            {
                BankAccountStatement1_ds.query().dataSourceTable(tableNum(BankAccountStatement)).addRange(fieldNum(BankAccountStatement,AccountStatementNum)).value(queryValue(''));
            }
            // 8702 CR <--
            BankAccountStatement1_ds.query().dataSourceTable(tableNum(BankAccountStatement)).addRange(fieldNum(BankAccountStatement,AccountId)).value(statement.AccountId);
            BankAccountStatement1_ds.query().dataSourceTable(tableNum(BankAccountStatement)).addRange(fieldNum(BankAccountStatement,AccountStatementDate)).value(queryValue(statement.AccountStatementDate));

            // Initially the form is loaded without data
            // The user will need to click Apply filter to load data
            // The queryData variable is set to true the first time Apply filter is clicked
            if(queryData)
            {
                super();
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>importUnmatchedCount</Name>
						<Source><![CDATA[
        public display SKS_EB_Count importUnmatchedCount(BankAccountStatement _bankAccountStatement)
        {
            return SKS_CCR_BankAcctStmt::importUnmatchedCount(_bankAccountStatement);
        }

]]></Source>
					</Method>
					<Method>
						<Name>importCount</Name>
						<Source><![CDATA[
        public display SKS_EB_Count importCount(BankAccountStatement _bankAccountStatement)
        {
            SKS_CCR_BankTran lSKS_CCR_BankTran;

            select crossCompany count(RecId) from lSKS_CCR_BankTran
                where lSKS_CCR_BankTran.OriginalStatementRecId == _bankAccountStatement.RecId;

            return lSKS_CCR_BankTran.RecId;
        }

]]></Source>
					</Method>
					<Method>
						<Name>unreconciledAmount</Name>
						<Source><![CDATA[
        public display AmountCur unreconciledAmount(BankAccountStatement _bankAccountStatement)
        {
            return SKS_CCR_BankAcctStmt::unreconciledAmount(_bankAccountStatement);
        }

]]></Source>
					</Method>
					<Method>
						<Name>importUnmatchedAmount</Name>
						<Source><![CDATA[
        public display AmountMST importUnmatchedAmount(BankAccountStatement _bankAccountStatement)
        {
            return SKS_CCR_BankAcctStmt::importUnmatchedAmount(_bankAccountStatement);
        }

]]></Source>
					</Method>
					<Method>
						<Name>ccr_UnreconciledCurrencyBalance</Name>
						<Source><![CDATA[
        // SKS_FDD_13903 -->
        public display AmountMST ccr_UnreconciledCurrencyBalance(BankAccountStatement _bankAccountStatement)
        {
            return SKS_CCR_BankAcctStmt::unReconciledCurrencyBalance(_bankAccountStatement);
        }
        // SKS_FDD_13903 <--

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>SKS_CCR_MatchAll</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        ///
        /// </summary>
        public void clicked()
        {
            SKS_CCR_BankAccountStatementFilter   statementFilter = new SKS_CCR_BankAccountStatementFilter();
            Args args = new Args();
            statementFilter.GetSetBankAccount(BankAccountStatement_AccountId.valueStr());
            statementFilter.GetSetCompany(BankAccountStatement_dataAreaId.valueStr());
            Args.parmObject(statementFilter);
            args.caller(element);
            //super(Args);
            this.menufunction().run(Args);
            SKS_CCR_Statement.modified();
            if(queryData && !blankData) // Only reload if prior data was loaded
            {
                element.loadData(true, false);
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SKS_CCR_ReconcileAll</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        ///
        /// </summary>
        public void clicked()
        {
            SKS_CCR_BankAccountStatementFilter   statementFilter = new SKS_CCR_BankAccountStatementFilter();
            Args args = new Args();
            statementFilter.GetSetBankAccount(BankAccountStatement_AccountId.valueStr());
            statementFilter.GetSetCompany(BankAccountStatement_dataAreaId.valueStr());
            Args.parmObject(statementFilter);
            //super(Args);
            this.menufunction().run(Args);
            SKS_CCR_Statement.modified();
            if(queryData && !blankData) // Only reload if prior data was loaded
            {
                element.loadData(true, false);
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>BtnDeleteStatement</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        ///
        /// </summary>
        public void clicked()
        {
            BankAccountStatement locBankAccountStatement;
            SKS_CCR_BankTran lSKS_CCR_BankTran;
            super();
            if(BankAccountStatement1)
            {
                if(BankAccountStatement1.ReconcileDate == dateNull())
                {
                    if (Box::yesNo("@SKS:SKGCCRStmntDeletion",DialogButton::Yes,element.design().caption()) == DialogButton::Yes)
                    {
                        changeCompany(BankAccountStatement1.company())
                        {
                            if(BankAccountStatement1.ReconcileDate != dateNull())
                            {
                                info(strFmt("@SKS:SKGBRNoDelReconciledStmt"
                                ,BankAccountStatement1.company(), BankAccountStatement1.AccountId, BankAccountStatement1.AccountStatementNum, BankAccountStatement1.AccountStatementDate));
                                return;
                            }
                            //Check to see if any of our statement's s imported transactions have been used on other statements that are reconciled
                            locBankAccountStatement = null;
                            lSKS_CCR_BankTran = null;
                            Select firstonly Accountid, AccountStatementDate, AccountStatementNum, DataAreaId, Recid from locBankAccountStatement
                                where locBankAccountStatement.ReconcileDate != dateNull()
                                join lSKS_CCR_BankTran
                                where lSKS_CCR_BankTran.AccountId == locBankAccountStatement.AccountId
                                    && lSKS_CCR_BankTran.AccountStatementNum == locBankAccountStatement.AccountStatementNum
                                    && lSKS_CCR_BankTran.AccountStatementDate == locBankAccountStatement.AccountStatementDate
                                    && lSKS_CCR_BankTran.OriginalStatementRecId == BankAccountStatement1.RecId;
                            if(locBankAccountStatement)
                            {
                                info(strFmt("@SKS:SKGCCRCantDeleteImportStmt"
                                ,locBankAccountStatement.company(), locBankAccountStatement.AccountId, locBankAccountStatement.AccountStatementNum, locBankAccountStatement.AccountStatementDate));
                                return;
                            }

                            ttsBegin;
                            while select AccountId, AccountStatementDate, AccountStatementNum, ManualReconciliationID from lSKS_CCR_BankTran
                                    group by lSKS_CCR_BankTran.AccountId, lSKS_CCR_BankTran.AccountStatementDate,
                                        lSKS_CCR_BankTran.AccountStatementNum,    lSKS_CCR_BankTran.ManualReconciliationID
                                    where lSKS_CCR_BankTran.AccountId == BankAccountStatement1.AccountId
                                        && lSKS_CCR_BankTran.AccountStatementDate == BankAccountStatement1.AccountStatementDate
                                        && lSKS_CCR_BankTran.AccountStatementNum == BankAccountStatement1.AccountStatementNum
                                        && lSKS_CCR_BankTran.ManualReconciliationID != emptyGuid()
                            {
                                SKS_CCR_Matching::removeGuidMatch(lSKS_CCR_BankTran.ManualReconciliationID);
                            }
                            while select AccountId, AccountStatementDate, AccountStatementNum, ManualReconciliationID from lSKS_CCR_BankTran
                                    group by lSKS_CCR_BankTran.AccountId, lSKS_CCR_BankTran.AccountStatementDate,
                                        lSKS_CCR_BankTran.AccountStatementNum,    lSKS_CCR_BankTran.ManualReconciliationID
                                    where lSKS_CCR_BankTran.OriginalStatementRecId == BankAccountStatement.RecId
                                        && lSKS_CCR_BankTran.ManualReconciliationID != emptyGuid()
                            {
                                SKS_CCR_Matching::removeGuidMatch(lSKS_CCR_BankTran.ManualReconciliationID);
                            }
                            ttscommit;
                            ttsbegin;
                            delete_from lSKS_CCR_BankTran
                                    where lSKS_CCR_BankTran.AccountId == BankAccountStatement1.AccountId
                                        && lSKS_CCR_BankTran.OriginalStatementRecId == BankAccountStatement.RecId;
                            ttscommit;

                        }
                        BankAccountStatement1.delete();
                        SKS_CCR_Statement.text('');
                        element.doRefresh();
                    }
                }

            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ApplyFilter</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        ///
        /// </summary>
        public void clicked()
        {
            super();

            element.loadData(true, false);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AllReconciled</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
            AllNotReconciled locAllNotReconciled;
            str locStrAllNotReconciled = AllReconciled.valueStr();

            locAllNotReconciled = str2Enum(locAllNotReconciled, locStrAllNotReconciled);

            ret = super();

            if (locAllNotReconciled == AllNotReconciled::Reconciled)
            {
                AllMatched.selection(enum2int(SKS_BR_MatchView::All));
            }
            else
            {
                AllMatched.selection(enum2int(SKS_BR_MatchView::NotMatched));
            }

            SKS_CCR_Statement.text('');

            SKS_CCR_Statement.modified(); //This sets fields and could result in the data being cleared.

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>BankAccountStatement_dataAreaId</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        /// Filter the imported transactions grid based on company
        /// </summary>
        /// <returns>Return true</returns>
        // 8702 CR
        public boolean modified()
        {
            boolean ret;

            ret = super();
            //9493 -->
            SKS_CCR_Statement.text('');
            BankAccountStatement_AccountId.text('');

            SKS_CCR_Statement.modified(); //This sets fields and could result in the data being cleared.
            // 9493 <--

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        /// <summary>
        /// Company lookup by hierarchies
        /// </summary>
        /// CR - 8702
        public void lookup()
        {
            QueryBuildDataSource    queryBuildDataSource;
            QueryBuildRange         queryBuildRange;
            Container               companyList = SKS_EB_VirtualCompany::getCCRRecCompanies();
            int                     i;
            str                     hierarchiesCompany;

            sysTableLookup     = PmfTableLookupExtended::newParameters(tablenum(DataArea),this);
            sysTableLookup.addLookupfield(fieldnum(DataArea,Id));
            sysTableLookup.addLookupfield(fieldnum(DataArea,Name));

            query = new Query();
            queryBuildDataSource = query.addDataSource(tablenum(DataArea));
            queryBuildRange = queryBuildDataSource.addRange(fieldNum(DataArea,id));
            for (i=1; i <= conLen(companyList); i++)
            {
                hierarchiesCompany += conPeek(companyList, i) + ',';
            }
            queryBuildRange.value(hierarchiesCompany);

            sysTableLookup.parmQuery(query);
            sysTableLookup.performFormLookup();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>BankAccountStatement_AccountId</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        /// <summary>
        /// Bank account lookup
        /// </summary>
        // 8702 CR
        public void lookup()
        {
            QueryBuildDataSource    queryBuildDataSource;
            Container               companyList = SKS_EB_VirtualCompany::getCCRRecCompanies();
            int                     i;

            sysTableLookup     = PmfTableLookupExtended::newParameters(tablenum(BankAccountTable),this);

            sysTableLookup.addLookupfield(fieldnum(BankAccountTable,AccountId));
            sysTableLookup.addLookupfield(fieldnum(BankAccountTable,Name));
            sysTableLookup.addLookupfield(fieldNum(BankAccountTable,DataAreaId));
            query = new Query();

            queryBuildDataSource = query.addDataSource(tablenum(BankAccountTable)).addDataSource(tableNum(SKS_PP_Bank));// SKS_FDD_13903
            // SKS_FDD_13903 -->
            // - TO make sure the we are shwoing only CCR bank into the lookup
            queryBuildDataSource.relations(true);
            queryBuildDataSource.addRange(fieldNum(SKS_PP_Bank, CCR_IsCCReconciliation)).value(enum2Str(NoYes::Yes));
            // SKS_FDD_13903 <--
            query.allowCrossCompany(true);
            query.clearCompanyRange();
            if(BankAccountStatement_dataAreaId.valueStr())
            {
                query.addCompanyRange(BankAccountStatement_dataAreaId.valueStr());
            }
            else
            {
                for (i=1; i <= conLen(companyList); i++)
                {
                    query.addCompanyRange(conPeek(companyList, i));
                }
            }
            sysTableLookup.parmQuery(query);
            sysTableLookup.performFormLookup();
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        /// Set the company field value
        /// </summary>
        /// <returns>Return true</returns>
        // 8702 CR
        public boolean modified()
        {
            boolean ret;

            ret = super();

            if(BankAccountStatement_AccountId.valueStr() != ''
                && sysTableLookup != null)
            {
                BankAccountStatement_dataAreaId.text(sysTableLookup.parmSelectionRecord().DataAreaId);
            }

            //9493 -->
            SKS_CCR_Statement.text('');
            SKS_CCR_Statement.modified();
            //9493 <--

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SKS_CCR_Statement</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            sysTableLookup = SKS_CCR_BankTran::lookupBankStatements(this, AllReconciled.valueStr(), BankAccountStatement_dataAreaId.valueStr(), BankAccountStatement_AccountId.valueStr()); // 8702 CR
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean     ret;

            ret = super();

            if (sysTableLookup && SKS_CCR_Statement.text() != '') //9493
            {
                selectedRecord = sysTableLookup.parmSelectionRecord();
                select crosscompany *  from statement
                   where statement.AccountStatementDate == selectedRecord.AccountStatementDate
                       && statement.AccountId == selectedRecord.AccountId
                       && statement.AccountStatementNum == selectedRecord.AccountStatementNum
                       && statement.dataAreaId == selectedRecord.id; // 7517
            }
            if (SKS_CCR_Statement.valueStr() == '')
            {
                select firstonly Statement where Statement.RecId == 0;
            }
            // 8702 CR -->
            if(Statement)
            {
                BankAccountStatement_AccountId.text(statement.AccountId);
                BankAccountStatement_dataAreaId.text(statement.dataAreaId);
            }
            // 8702 CR <--

            //set the From/To Date.
            if(SKS_CCR_BankAcctStmt::lastStmtDate(statement) < statement.AccountStatementDate)
            {
                fromDate = SKS_CCR_BankAcctStmt::lastStmtDate(statement) + 1;
            }
            else
            {
                fromDate = statement.AccountStatementDate;
            }

            toDate = bankAccountStatement.AccountStatementDate;

            if(origBankAcctStatement != SKS_CCR_Statement.valueStr()) // value changed
            {
                if(SKS_CCR_Statement.valueStr() == '')
                {
                    element.loadData(true, true);
                }
                else
                {
                    element.loadData(true, false);
                }
            }

            origBankAcctStatement = SKS_CCR_Statement.valueStr();
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ReconcileBtn</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        [SuppressBPWarningAttribute("BPCheckSelectForUpdateAbsent","Buffer statementloc is selected forUpdate and is passed to other methods where it is modified.")]
        void clicked()
        {
            BankAccountStatement    statementLoc;

            selectedRecord = sysTableLookup.parmSelectionRecord();

            select forupdate crosscompany *  from statementLoc
                where statementLoc.AccountStatementDate == selectedRecord.AccountStatementDate
                    && statementLoc.AccountId == selectedRecord.AccountId
                    && statementLoc.AccountStatementNum == selectedRecord.AccountStatementNum
                    && statementLoc.dataAreaId == selectedRecord.id; //7379 // 7517

            super();

            if (SKS_CCR_Statement.valueStr() != ''
                && str2num(importUnmatchedCount.valueStr()) == 0
                /*&& str2num(unreconciledAmount.valueStr()) == 0*/
                && BankAccountStatement1.ReconcileDate == dateNull())
            {
                changecompany(statementLoc.company())
                {
                    SKS_CCR_BankAcctStmt::reconcileStatementForAcct(statementLoc);
                    SKS_CCR_Statement.modified();
                }
            }
            else
            {
                info ("@SKS4405");
            }
            BankAccountStatement1_ds.research();
            element.enableButtons();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ReverseReconciliation</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// reverse reconciliation
        /// </summary>
        /// CR-9689
        public void clicked()
        {
            if (Box::yesNo("@SKS:SKSYesNoReversalConfirm", DialogButton::Yes))
            {
                BankAccountStatement    statementLoc;
                selectedRecord = sysTableLookup.parmSelectionRecord();

                select crosscompany *  from statementLoc
                    where statementLoc.AccountStatementDate == selectedRecord.AccountStatementDate
                        && statementLoc.AccountId == selectedRecord.AccountId
                        && statementLoc.AccountStatementNum == selectedRecord.AccountStatementNum
                        && statementLoc.dataAreaId == selectedRecord.id;

                Args args = new Args();
                args.record(statementLoc);
                SKS_CCR_ReverseReconcile::main(args);
                BankAccountStatement1_ds.research();
                BankAccountStatement_ds.research();
                element.enableButtons();
                SKS_CCR_Statement.modified();
            }
            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>TransactionReconciliation</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            Args                        args;
            FormRun                     formRun;
            SKS_BR_BankReconciliationTrans SKS_BR_BankReconciliationTrans;
            SKS_CCR_BankTran             bankTran;
            SKS_CCR_BankTran             selectedBankTran;
            BankAccountStatement        accountStatement;
            MultiSelectionHelper        helper ;


            helper = MultiSelectionHelper::construct();
            helper.parmDatasource(SKS_CCR_BankTran_ds);

            bankTran = helper.getFirst();

            while (bankTran.RecId != 0)
            {
                selectedBankTran = bankTran;
                bankTran = helper.getNext();
            }

            args = new args();
            changecompany(selectedBankTran.company()) //7484
            {
                select firstonly AccountId, AccountStatementDate, AccountStatementNum, CurrencyCode from accountStatement
                    where accountStatement.RecId == selectedBankTran.OriginalStatementRecId;
            }
            SKS_BR_BankReconciliationTrans = new SKS_BR_BankReconciliationTrans();
            SKS_BR_BankReconciliationTrans.parmTransGuid(selectedBankTran.ManualReconciliationID);//GUID refactor
            SKS_BR_BankReconciliationTrans.parmBankAccountStatementNum(accountStatement.AccountStatementNum);
            SKS_BR_BankReconciliationTrans.parmBankTransactionType(selectedBankTran.BankTranType);
            SKS_BR_BankReconciliationTrans.parmCompanyBankAccountId(selectedBankTran.AccountId);
            SKS_BR_BankReconciliationTrans.parmCustAccount(selectedBankTran.CustAccount);
            SKS_BR_BankReconciliationTrans.parmDataAreaId(selectedBankTran.dataAreaId);
            SKS_BR_BankReconciliationTrans.parmSelectableDataArea(selectedBankTran.CustCompany);
            SKS_BR_BankReconciliationTrans.parmSKS_BR_BankCustomerNum(selectedBankTran.BankCustomerNum);
            SKS_BR_BankReconciliationTrans.parmSKS_BR_BankNum(selectedBankTran.BankNum);
            SKS_BR_BankReconciliationTrans.parmImportTranType(selectedBankTran.FileTranType);
            SKS_BR_BankReconciliationTrans.parmTransDate(accountStatement.AccountStatementDate);
            SKS_BR_BankReconciliationTrans.parmRecId(selectedBankTran.RecId);
            SKS_BR_BankReconciliationTrans.parmFormDataSourceBankAcctStmt(BankAccountStatement1_ds);

            if (selectedBankTran.TransCurrency == accountStatement.CurrencyCode)
            {
                SKS_BR_BankReconciliationTrans.parmcurrency(accountStatement.CurrencyCode);
            }
            else
            {
                SKS_BR_BankReconciliationTrans.parmcurrency(selectedBankTran.TransCurrency);
            }
          
            SKS_BR_BankReconciliationTrans.parmBankAccountId(accountStatement.AccountId);
            SKS_BR_BankReconciliationTrans.parmMatched(selectedBankTran.Matched);
            //SKS CR 9729 ->
            // SKS_FDD_13903
            //SKS_BR_BankReconciliationTrans.parmeBankRecCustGroupId(eBankRecCustGroupId.valueStr());
            SKS_BR_BankReconciliationTrans.parmeStatementNumberFiltered(SKS_CCR_Statement.valueStr());
            SKS_BR_BankReconciliationTrans.parmformDatasource(SKS_CCR_BankTran_ds);
            int position = SKS_CCR_BankTran_ds.getPosition(); // 10255
            //SKS_BR_BankTran_ds.executeQuery(); //Bug 10527
            //SKS CR 9729 <--
            SKS_BR_GLProcessing_Transactionform::updateBankTranSettlement(selectedBankTran.ManualReconciliationID, selectedBankTran.AccountId);// 7446
            args.parmObject(SKS_BR_BankReconciliationTrans);
            args.name(formstr( SKS_CCR_StatementReconciliationTrans));
            formRun = classFactory.formRunClass(Args);
            formRun.init();
            formrun.run();
            formrun.wait();

            super();
            // 8764 CR -->
            SKS_CCR_BankTran_ds.research();
            BankAccountStatement1_ds.research();
            // 8764 CR <--
            SKS_CCR_BankTran_ds.setPosition(position);   //Bug 11465
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>btnMatchTrans</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        // code copied from form SKS_BR_BankTran;
        // Form SKS_BR_Unmatched also contains the same code but
        // it calls method SKS_BR_Matching.matchIntermediate(0) instead of matchTransactions method
        void clicked()
        {
            int     position; // 8613
            changecompany(BankAccountStatement1.company())
            {
                SKS_CCR_Matching matching = new SKS_CCR_Matching();

                if (BankAccountStatement1.RecId == 0 || SKS_CCR_Statement.valueStr() == '')
                    return;
                position = SKS_CCR_BankTran_ds.getPosition();// 8613

                super();

                matching.matchTransactions(BankAccountStatement1, fromDate, SKS_CCR_BankTran.FileDateTime, //fromDate.dateValue(), fileDateTime,
                SKS_CCR_BankTran.Filename, 0, SKS_CCR_BankTran.OriginalStatementRecId); //the importCount can be anything, it won't be used from here, ever.
            }
            SKS_CCR_BankTran_ds.research(true);
            SKS_CCR_Statement.modified();
            element.loadData(true, false); // Reload after matching
            SKS_CCR_BankTran_ds.setPosition(position);// 8613
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>btnRemoveMatch</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            int     position;// 8613

            if (!SKS_CCR_BankTran)
                return;

            position = SKS_CCR_BankTran_ds.getPosition();// 8613
            super();
            changecompany(SKS_CCR_BankTran.company())
            {
                SKS_CCR_Matching::breakMatchBankAccountTrans(SKS_CCR_BankTran.ManualReconciliationID);
                SKS_CCR_Matching::breakMatchSKS_CCR_BankTran(SKS_CCR_BankTran.ManualReconciliationID);
            }
            // 7511 -->
            BankAccountStatement_ds.research();
            BankAccountStatement1.reread();
            BankAccountStatement1_ds.research();
            // 7511 <--
            SKS_CCR_BankTran_ds.research(true);
            SKS_CCR_BankTran_ds.setPosition(position);// 8613
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>btnStatementReconcilationRules</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Method to open reconcilation rules form to avid self relation to tehe SKs_BR_BankTran table
        /// </summary>
        //9479
        void clicked()
        {
            Args            args;
            Formrun         formRun;

            changecompany(BankAccountStatement1.company() )
            {
                args = new Args();
                args.parm(int642Str(SKS_CCR_BankTran.RecId));
                args.name(formstr(SKS_BR_StatmentReconciliationRules));
                args.caller(this.formRun());
                args.callerFormControl(this);
                formRun = classFactory.formRunClass(args);
                formRun.run();
                formRun.wait(true);
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>RevPost</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Reverse the posted bank transactions.
        /// </summary>
        // CR-9541
        public void clicked()
        {
            SKS_CCR_BankTran         sKS_CCR_BankTranLoc;
            int                     cnt = 0;
            int                     markedRecord;
            LedgerJournalNameId     revJournalName;
            LedgerJournalName       ledgerJournalName;
            NumberSequenceTable     numberSequenceTable;
            Voucher                 nextRec;
            LedgerJournalTable      header;
            NumberSeq               numSeq;
            NumberSeqScope          locNumberSeqScope;
            SKS_PP_Setup            sKS_PP_Setup;
            boolean                 autoPost;
            int                     position;
            container               companies;
            int                     conComp;
            Map                     insertCompanydetails;
            SKS_CCR_BankTran         lSKS_CCR_BankTran;
            Voucher                 origBankVoucher;
            MapIterator             mi;
            sks_lb_journalarapplic	sks_lb_journalarapplic;
            insertCompanydetails = new Map(Types::String, Types::Record);

            MultiSelectionHelper    selectionHelper = MultiSelectionHelper::construct();
            selectionHelper.parmDataSource(SKS_CCR_BankTran_ds);
            sKS_CCR_BankTranLoc  = selectionHelper.getFirst();
            markedRecord        = SKS_CCR_BankTran_ds.recordsMarked().lastIndex();

            position = SKS_CCR_BankTran_ds.getPosition();

            if (Box::yesNo("@SKS:SKSYesNoReversalConfirm", DialogButton::Yes))
            {
                LedgerJournalTrans lLedgerJournalTrans;
                TransDate latestDate;

                while (sKS_CCR_BankTranLoc)
                {
                    changecompany(sKS_CCR_BankTranLoc.company())        //SKS_VSTS_14432
                    {
                        select firstonly TransDate from lLedgerJournalTrans
                        where lLedgerJournalTrans.JournalNum == sKS_CCR_BankTranLoc.PaymentJournalNum
                            && lLedgerJournalTrans.Voucher == sKS_CCR_BankTranLoc.Voucher;
                    }

                    if (lLedgerJournalTrans.TransDate > latestDate)
                    {
                        latestDate = lLedgerJournalTrans.TransDate;
                    }

                    sKS_CCR_BankTranLoc = selectionHelper.getNext();
                }

                TransDate reversalDate = SKS_PP_Sys::getReversalDate(latestDate);

                sKS_CCR_BankTranLoc  = selectionHelper.getFirst();

                while (sKS_CCR_BankTranLoc)
                {
                    cnt++;
                    if(SKS_CCR_Matching::ValidateReversal(sKS_CCR_BankTranLoc))
                    {
                        if(insertCompanydetails.exists(sKS_CCR_BankTranLoc.company()))
                        {
                            header = insertCompanydetails.lookup(sKS_CCR_BankTranLoc.company());
                        }
                        changecompany(sKS_CCR_BankTranLoc.company())
                        {
                            lSKS_CCR_BankTran = sKS_CCR_BankTranLoc;
                            sKS_PP_Setup = SKS_CCR_BankTran::findBankRevSetup();
                            revJournalName = sKS_PP_Setup.CCRBankRevJournalName;
                            ledgerJournalName = LedgerJournalName::find(revJournalName);
                            if(!revJournalName)
                            {
                                concomp = conFind(companies,sKS_CCR_BankTranLoc.company());
                                if(!conComp)
                                {
                                    companies = conins(companies, cnt, sKS_CCR_BankTranLoc.company());
                                }
                                break;
                            }
                            else
                            {
                                select firstonly NumberSequence, NumberSequenceScope from numberSequenceTable
                                        where numberSequenceTable.RecId == ledgerJournalName.NumberSequenceTable;
                                ttsbegin;
                                locNumberSeqScope = NumberSeqScope::find(numberSequenceTable.NumberSequenceScope);
                                numSeq = numberseq::newGetNumFromCode(numberSequenceTable.NumberSequence, locNumberSeqScope);
                                nextRec = numSeq.num();
                                ttscommit;

                                header = SKS_EFT_Reversal::ccrBankReversal(sKS_CCR_BankTranLoc , header, nextRec, revJournalName, reversalDate);

                                insertCompanydetails.insert(sKS_CCR_BankTranLoc.company(), header);
                                header = null;
                                origBankVoucher = sKS_CCR_BankTranLoc.Voucher;
                                SKS_CCR_Matching::breakExistingPrematch(sKS_CCR_BankTranLoc.RecId, SKS_BR_ClearPrematches::ClearSKS_BR_BankTran);
                                ttsbegin;
                                lSKS_CCR_BankTran.selectForUpdate(true);
                                lSKS_CCR_BankTran.reread();
                                lSKS_CCR_BankTran.OrigBankVoucher = origBankVoucher;
                                lSKS_CCR_BankTran.RevVoucher = nextRec;
                                lSKS_CCR_BankTran.update();
                                ttscommit;
                            }
                            delete_from sks_lb_journalarapplic where SKS_lb_journalarapplic.SKS_CCR_BankTran == sKS_CCR_BankTranLoc.RecId;
                        }
                        SKS_LB_JournalARApplic::updateRevCustVendOpenTrans(sKS_CCR_BankTranLoc.RecId);
                    }
                    sKS_CCR_BankTranLoc = selectionHelper.getNext();
                }
                if(markedRecord <=  cnt)
                {
                    mi = new MapIterator(insertCompanydetails);

                    while (mi.more())
                    {
                        header = mi.value();
                        changecompany(header.company())
                        {
                            sKS_PP_Setup   = SKS_CCR_BankTran::findBankRevSetup();
                            autoPost       = sKS_PP_Setup.CCRAutoPostReversalJournal;
                            SKS_EFT_Reversal::AutoPostJournal(autoPost, header);
                        }
                        mi.next();
                    }
                    BankAccountStatement_ds.research();
                    BankAccountStatement1_ds.research();
                    SKS_CCR_BankTran_ds.research(true);
                    SKS_CCR_BankTran_ds.setPosition(position);
                }
                for(int i= 1;i<=conLen(companies);i++)
                {
                    error(strFmt("@SKS:SKSErrorBankRevSetup",conPeek(companies,i)));
                }
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SKS_CCR_BankTran_CustCompany</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        /// To enable the customer account based on customer company
        /// </summary>
        /// <returns>Return true</returns>
        // SKS_Bug_8692
        public boolean modified()
        {
            boolean ret;

            ret = super();
            SKS_CCR_BankTran_ds.active();
            element.enableCustFields();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SKS_CCR_BankTran_CustAccount</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        /// <summary>
        /// filter based on the customer company.
        /// </summary>
        // SKS_Bug_8692
        public void lookup()
        {
            CustTable::lookupCustomer(SKS_CCR_BankTran_CustAccount, SKS_CCR_BankTran.CustCompany);
        }

]]></Source>
					</Method>
					<Method>
						<Name>jumpRef</Name>
						<Source><![CDATA[
        /// <summary>
        /// view details of the customer account based on company
        /// </summary>
        // SKS_Bug_8692
        public void jumpRef()
        {
            changecompany(SKS_CCR_BankTran.CustCompany) //9344
            {
                CustTable::jumpRefCustomer(SKS_CCR_BankTran.CustAccount, SKS_CCR_BankTran.CustCompany);
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SKS_CCR_BankTran_InUse</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        ///
        /// </summary>
        /// <returns></returns>
        public boolean modified()
        {
            boolean ret;

            ret = super();

            SKS_CCR_BankTran_ds.active();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>BankAccountStatement</Name>
			<Table>BankAccountStatement</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AccountId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>AccountStatementDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>AccountStatementNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>CurrencyCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>EndingBalance</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReconcileDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SKS_BR_BankHeaderRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>SKS_BR_ImportHitRate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SKS_BR_SessionId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SKS_BR_SessionLoginDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<CrossCompanyAutoQuery>Yes</CrossCompanyAutoQuery>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>SKS_CCR_BankTran</Name>
			<Table>SKS_CCR_BankTran</Table>
			<Fields>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>AccountId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>AccountStatementDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>AccountStatementNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>AuthorizationCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>BankCustomerNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>BankNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>BankTranIntermRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>BankTranRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>BankTranType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>BaseAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>BookNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>CardNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>CCRHeaderRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>CommissionAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>CreateGL</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>CreditCardType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustAccount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>CustCompany</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustomerRuleStep</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustRemitAnalysisRule</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>DataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>DefaultDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EbankRecMatchingRuleGroupId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>ExchangeAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>FileDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>Filename</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>FileTranType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>GLCreationCompany</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>GLMappingRuleGroupId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>GLMatchOrCreate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ImportedStatementDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>ImportedStatementNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>IntermMatch</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>IntermPaymentJournalNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InUse</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>InUseBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>IVAAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>JournalName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>LedgerJournalRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>LineNumInFile</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>ManualReconciliationID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>MatchConfidence</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>MatchDefaultRule</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>Matched</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>MatchedType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>MatchIndicator</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MatchingRuleGroupActionStep</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>MatchingRuleGroupId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>MatchStep</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>MultipleMatches</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OrigBankVoucher</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>OriginalStatementRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>ParsedValue</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>ParseRuleId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>PaymentJournalNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>PaymentMatch</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>PurchaseAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RemitenceSettlementActionStep</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>ReteivaAmountNeg</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>ReteivaAmountPos</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>RevVoucher</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>SessionId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>SessionLoginDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SettlementAction</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SettlementType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>TaxRetentionAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>TerminalCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>TranAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>TranCurrencyAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>TranDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>TranDescription</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TranDescriptionUser</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>TransactionFeesAmt</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>TransCurrency</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>TypeOfMovement</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>UniqueCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>UserBlockId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ValueDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>Voucher</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>VoucherReceiptNumber</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<CrossCompanyAutoQuery>Yes</CrossCompanyAutoQuery>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>BankAccountStatement1</Name>
			<Table>BankAccountStatement</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AccountId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AccountStatementDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AccountStatementNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CurrencyCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EndingBalance</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReconcileDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SKS_BR_BankHeaderRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SKS_BR_ImportHitRate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SKS_BR_SessionId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SKS_BR_SessionLoginDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<CrossCompanyAutoQuery>Yes</CrossCompanyAutoQuery>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>SKS_CCR_CreditCardStatement</Name>
			<Table>SKS_CCR_CreditCardStatement</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AccountId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AccountStatementDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AccountStatementNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankAccountStatementRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CurrencyCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EndingBalance</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>id</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>isVirtual</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>name</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReconcileDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SKS_CCR_BankHeaderRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SKS_CCR_ImportHitRate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SKS_CCR_SessionId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SKS_CCR_SessionLoginDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<CrossCompanyAutoQuery>Yes</CrossCompanyAutoQuery>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<MaxAccessRight>View</MaxAccessRight>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@SKS:SKGCCRProcessCCStmts</Caption>
		<Pattern xmlns="">Custom</Pattern>
		<ViewEditMode xmlns="">Edit</ViewEditMode>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>FormActionPaneControl1</Name>
				<Type>ActionPane</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>FormButtonGroupControl1</Name>
						<Type>ButtonGroup</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>SKS_CCR_MatchAll</Name>
								<Type>MenuFunctionButton</Type>
								<FormControlExtension
									i:nil="true" />
								<MenuItemName>SKS_CCR_MatchAll</MenuItemName>
								<MenuItemType>Action</MenuItemType>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>SKS_CCR_ReconcileAll</Name>
								<Type>MenuFunctionButton</Type>
								<FormControlExtension
									i:nil="true" />
								<MenuItemName>SKS_CCR_ReconcileAll</MenuItemName>
								<MenuItemType>Action</MenuItemType>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>BtnDeleteStatement</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<NeededPermission>Read</NeededPermission>
								<Type>Button</Type>
								<FormControlExtension
									i:nil="true" />
								<Text>Delete Statement</Text>
							</AxFormControl>
						</Controls>
					</AxFormControl>
				</Controls>
				<Caption>@SKS:SKSMatch</Caption>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormTabControl">
				<Name>Tab</Name>
				<AlignControl>No</AlignControl>
				<ElementPosition>1073741823</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Type>Tab</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>BankStatementFilter</Name>
						<ElementPosition>858993458</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormActionPaneControl">
								<Name>FilterActionPane</Name>
								<Type>ActionPane</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormButtonGroupControl">
										<Name>FilterButtonGroup</Name>
										<Type>ButtonGroup</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormButtonControl">
												<Name>ApplyFilter</Name>
												<Type>Button</Type>
												<FormControlExtension
													i:nil="true" />
												<Text>Apply filter</Text>
											</AxFormControl>
										</Controls>
									</AxFormControl>
								</Controls>
								<Style>Strip</Style>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>DefaultViewGroup</Name>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>AllReconciled</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1073741822</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<HelpText>@SYS50992</HelpText>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<EnumType>AllNotReconciled</EnumType>
										<Label>@SYS68025</Label>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>AllMatched</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>ComboBox</Type>
										<FormControlExtension
											i:nil="true" />
										<EnumType>SKS_BR_MatchView</EnumType>
										<Label>@SKS397</Label>
										<Items />
									</AxFormControl>
								</Controls>
								<Columns>2</Columns>
								<FrameType>None</FrameType>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>Group1</Name>
								<ElementPosition>1610612733</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>BankAccountStatement_dataAreaId</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>920350134</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<ExtendedDataType>SelectableDataArea</ExtendedDataType>
										<Label>@SYS342276</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>BankAccountStatement_AccountId</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1533916890</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Label>@SYS1517</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>SKS_CCR_Statement</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>613566756</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Label>@SYS342877</Label>
									</AxFormControl>
								</Controls>
								<Columns>4</Columns>
								<FrameType>None</FrameType>
							</AxFormControl>
						</Controls>
						<Caption>@SKS:SKGCCRStmtFilter</Caption>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>BankStatementBal</Name>
						<ElementPosition>1288490187</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormActionPaneControl">
								<Name>ActionPane1</Name>
								<ElementPosition>1073741822</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>ActionPane</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormActionPaneTabControl">
										<Name>ActionPaneTab1</Name>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>ActionPaneTab</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormButtonGroupControl">
												<Name>ButtonGroup</Name>
												<ElementPosition>1431655764</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>ButtonGroup</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormButtonControl">
														<Name>ReconcileBtn</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1288490187</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<HelpText>@SKS:SKSBRReconcileStmnt</HelpText>
														<Type>Button</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<NeedsRecord>Yes</NeedsRecord>
														<Text>@SKS6003</Text>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormButtonControl">
														<Name>ReverseReconciliation</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<Type>Button</Type>
														<FormControlExtension
															i:nil="true" />
														<Text>@SKS:SKGReverseReconcile</Text>
													</AxFormControl>
												</Controls>
												<ArrangeMethod>Vertical</ArrangeMethod>
											</AxFormControl>
										</Controls>
										<AlignChild>No</AlignChild>
										<AlignChildren>No</AlignChildren>
										<ArrangeMethod>Vertical</ArrangeMethod>
									</AxFormControl>
								</Controls>
								<AlignChild>No</AlignChild>
								<AlignChildren>No</AlignChildren>
								<ArrangeMethod>Vertical</ArrangeMethod>
								<Style>Strip</Style>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGridControl">
								<Name>Grid1</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1610612733</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Height>70</Height>
								<HeightMode>Manual</HeightMode>
								<Type>Grid</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>CCR_UnreconciledCurrencyBalance</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>954437176</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<CacheDataMethod>Yes</CacheDataMethod>
										<DataMethod>ccr_UnreconciledCurrencyBalance</DataMethod>
										<DataSource>BankAccountStatement1</DataSource>
										<Label>@SKS:SKGCCRUnreconciledCurBalance</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>CCR_UnmatchedCurrencyBalance</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>954437176</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<CacheDataMethod>Yes</CacheDataMethod>
										<DataMethod>importUnmatchedAmount</DataMethod>
										<DataSource>BankAccountStatement1</DataSource>
										<Label>@SKS:SKGCCRUnmatchedCurBalance</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>unreconciledAmount</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>954437176</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<CacheDataMethod>Yes</CacheDataMethod>
										<DataMethod>unreconciledAmount</DataMethod>
										<DataSource>BankAccountStatement1</DataSource>
										<Label>@SKS4402</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormInt64Control">
										<Name>importCount</Name>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<LeftMode>AutoRight</LeftMode>
										<Type>Int64</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<CacheDataMethod>Yes</CacheDataMethod>
										<DataMethod>importCount</DataMethod>
										<DataSource>BankAccountStatement1</DataSource>
										<Label>@SKS3022</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormInt64Control">
										<Name>importUnmatchedCount</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1670265058</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<LeftMode>AutoRight</LeftMode>
										<Type>Int64</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<CacheDataMethod>Yes</CacheDataMethod>
										<DataMethod>importUnmatchedCount</DataMethod>
										<DataSource>BankAccountStatement1</DataSource>
										<Label>@SKS4404</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>BankAccountStatement1_SKS_BR_ImportHitRate</Name>
										<ElementPosition>1908874352</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>SKS_CCR_ImportHitRate</DataField>
										<DataSource>BankAccountStatement1</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>BankAccountStatement1_AccountStatementDate</Name>
										<Type>Date</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>AccountStatementDate</DataField>
										<DataSource>BankAccountStatement1</DataSource>
										<Label>@SYS92339</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>BankAccountStatement1_ReconcileDate</Name>
										<Type>Date</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>ReconcileDate</DataField>
										<DataSource>BankAccountStatement1</DataSource>
									</AxFormControl>
								</Controls>
								<DataSource>BankAccountStatement1</DataSource>
							</AxFormControl>
						</Controls>
						<Caption>@SKS:SKGCCRStmtBalance</Caption>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>ImportedTrans</Name>
						<ElementPosition>1717986916</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormActionPaneControl">
								<Name>ActionPane</Name>
								<ElementPosition>1073741822</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>ActionPane</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormActionPaneTabControl">
										<Name>ActionPaneTab</Name>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>ActionPaneTab</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormButtonGroupControl">
												<Name>TransReconcile</Name>
												<ElementPosition>1840700268</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>ButtonGroup</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormButtonControl">
														<Name>TransactionReconciliation</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1431655764</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<HelpText>@SYS153564</HelpText>
														<Type>Button</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<NeedsRecord>Yes</NeedsRecord>
														<Text>@SKS4284</Text>
													</AxFormControl>
												</Controls>
												<ArrangeMethod>Vertical</ArrangeMethod>
												<Caption>@SKS4284</Caption>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormButtonGroupControl">
												<Name>MatchTrans</Name>
												<ElementPosition>613566756</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>ButtonGroup</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormButtonControl">
														<Name>btnMatchTrans</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1431655764</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<HelpText>@SKS614</HelpText>
														<NeededPermission>Update</NeededPermission>
														<Type>Button</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<NeedsRecord>Yes</NeedsRecord>
														<Text>@SKS523</Text>
													</AxFormControl>
												</Controls>
												<ArrangeMethod>Vertical</ArrangeMethod>
												<Caption>@SKS523</Caption>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormButtonGroupControl">
												<Name>RemoveMatch</Name>
												<ElementPosition>920350134</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>ButtonGroup</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormButtonControl">
														<Name>btnRemoveMatch</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1431655764</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<HelpText>@SKS615</HelpText>
														<NeededPermission>Update</NeededPermission>
														<Type>Button</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<NeedsRecord>Yes</NeedsRecord>
														<Text>@SKS306</Text>
													</AxFormControl>
												</Controls>
												<ArrangeMethod>Vertical</ArrangeMethod>
												<Caption>@SKS306</Caption>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormButtonGroupControl">
												<Name>Inquiries</Name>
												<ElementPosition>1533916890</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>ButtonGroup</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormMenuFunctionButtonControl">
														<Name>SKS_BR_StatmentReconciliationRules</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1431655764</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>MenuFunctionButton</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<Visible>No</Visible>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<DataSource>SKS_CCR_BankTran</DataSource>
														<MenuItemName>SKS_BR_StatmentReconciliationRules</MenuItemName>
														<NeedsRecord>Yes</NeedsRecord>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormButtonControl">
														<Name>btnStatementReconcilationRules</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<HeightMode>Auto</HeightMode>
														<HelpText>@SKS6196</HelpText>
														<NeededPermission>Update</NeededPermission>
														<Type>Button</Type>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<NeedsRecord>Yes</NeedsRecord>
														<Text>@SKS4271</Text>
													</AxFormControl>
												</Controls>
												<ArrangeMethod>Vertical</ArrangeMethod>
												<Caption>@SYS3850</Caption>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormButtonGroupControl">
												<Name>RevPostingGroup</Name>
												<HeightMode>Auto</HeightMode>
												<Type>ButtonGroup</Type>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormButtonControl">
														<Name>RevPost</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<HeightMode>Auto</HeightMode>
														<HelpText>@SKS:SKSButtonHelpTxtBankRevPost</HelpText>
														<NeededPermission>Read</NeededPermission>
														<Type>Button</Type>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<MultiSelect>Yes</MultiSelect>
														<NeedsRecord>Yes</NeedsRecord>
														<Text>@SKS:SKSButtonTxtBankRevPost</Text>
													</AxFormControl>
												</Controls>
												<ArrangeMethod>Vertical</ArrangeMethod>
												<Caption>@SKS:SKSButtonTxtBankRevPost</Caption>
											</AxFormControl>
										</Controls>
										<AlignChild>No</AlignChild>
										<AlignChildren>No</AlignChildren>
										<ArrangeMethod>Vertical</ArrangeMethod>
									</AxFormControl>
								</Controls>
								<AlignChild>No</AlignChild>
								<AlignChildren>No</AlignChildren>
								<ArrangeMethod>Vertical</ArrangeMethod>
								<Style>Strip</Style>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGridControl">
								<Name>Grid2</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1610612733</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>Grid</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormImageControl">
										<Name>BlockImage</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<HelpText>@SKS4246</HelpText>
										<Type>Image</Type>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>lockImage</DataMethod>
										<DataSource>SKS_CCR_BankTran</DataSource>
										<Label>@SYS10653</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>SKS_CCR_BankTran_IntermMatch</Name>
										<ElementPosition>195225786</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>CheckBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Visible>No</Visible>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<BackgroundColor>WindowBackground</BackgroundColor>
										<DataField>IntermMatch</DataField>
										<DataSource>SKS_CCR_BankTran</DataSource>
										<Label>@SKS397</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>SKS_CCR_BankTran_Matched</Name>
										<ElementPosition>292838679</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>CheckBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Visible>No</Visible>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<BackgroundColor>WindowBackground</BackgroundColor>
										<DataField>Matched</DataField>
										<DataSource>SKS_CCR_BankTran</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>SKS_CCR_BankTran_MatchIndicator</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>390451572</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>MatchIndicator</DataField>
										<DataSource>SKS_CCR_BankTran</DataSource>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormImageControl">
										<Name>MatchIndicator</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>488064465</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Height>15</Height>
										<HeightMode>Auto</HeightMode>
										<Type>Image</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Width>15</Width>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<BackgroundColorRGB>
											<Red>255</Red>
											<Green>255</Green>
											<Blue>255</Blue>
										</BackgroundColorRGB>
										<ColorScheme>RGB</ColorScheme>
										<DataMethod>showMatchIndicatorIcon</DataMethod>
										<DataSource>SKS_CCR_BankTran</DataSource>
										<ForegroundColorRGB>
											<Red>255</Red>
											<Green>255</Green>
											<Blue>255</Blue>
										</ForegroundColorRGB>
										<Label>@SKS6252</Label>
										<LabelForegroundColorRGB>
											<Red>255</Red>
											<Green>255</Green>
											<Blue>255</Blue>
										</LabelForegroundColorRGB>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>SKS_CCR_BankTran_GLMatchOrCreate</Name>
										<ElementPosition>585677358</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>GLMatchOrCreate</DataField>
										<DataSource>SKS_CCR_BankTran</DataSource>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormIntegerControl">
										<Name>SKS_CCR_BankTran_MatchConfidence</Name>
										<ElementPosition>683290251</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Integer</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>MatchConfidence</DataField>
										<DataSource>SKS_CCR_BankTran</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>SKS_CCR_BankTran_dataAreaId</Name>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>DataAreaId</DataField>
										<DataSource>SKS_CCR_BankTran</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>BankAccountStatement_AccountId1</Name>
										<ElementPosition>878516037</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>AccountId</DataField>
										<DataSource>SKS_CCR_BankTran</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>BankAccountStatement_CurrencyCode</Name>
										<ElementPosition>976128930</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<CacheDataMethod>Yes</CacheDataMethod>
										<DataMethod>ccr_CurrencyCode</DataMethod>
										<DataSource>SKS_CCR_BankTran</DataSource>
										<Label>@SKS:SKGCCRBankCurrency</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>SKS_CCR_BankTran_TranAmount</Name>
										<Type>Real</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>TranAmount</DataField>
										<DataSource>SKS_CCR_BankTran</DataSource>
										<Label>@SKS:SKGCCRBankCurAmount</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>SKS_CCR_BankTran_TransCurrency</Name>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>TransCurrency</DataField>
										<DataSource>SKS_CCR_BankTran</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>SKS_CCR_BankTran_TranCurrencyAmount</Name>
										<ElementPosition>1073741823</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>TranCurrencyAmount</DataField>
										<DataSource>SKS_CCR_BankTran</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>SKS_CCR_BankTran_ImportedStatementDate</Name>
										<ElementPosition>1171354716</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Date</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>ImportedStatementDate</DataField>
										<DataSource>SKS_CCR_BankTran</DataSource>
										<Label>@SYS92339</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>SKS_CCR_BankTran_ValueDate</Name>
										<Type>Date</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>ValueDate</DataField>
										<DataSource>SKS_CCR_BankTran</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>SKS_CCR_BankTran_ImportedStatementNum</Name>
										<ElementPosition>1268967609</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>ImportedStatementNum</DataField>
										<DataSource>SKS_CCR_BankTran</DataSource>
										<Label>@SYS333478</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>SKS_CCR_BankTran_Voucher</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1659419181</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>voucher</DataField>
										<DataSource>SKS_CCR_BankTran</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>SKS_CCR_BankTran_RevVoucher</Name>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<Visible>No</Visible>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>RevVoucher</DataField>
										<DataSource>SKS_CCR_BankTran</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>SKS_CCR_BankTran_CustCompany</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1757032074</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>CustCompany</DataField>
										<DataSource>SKS_CCR_BankTran</DataSource>
										<Label>@SYS313134</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>SKS_CCR_BankTran_CustAccount</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1854644967</ElementPosition>
										<EnableFormRef>No</EnableFormRef>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>CustAccount</DataField>
										<DataSource>SKS_CCR_BankTran</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>SKS_CCR_BankTran_BankNum</Name>
										<ElementPosition>1366580502</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>BankNum</DataField>
										<DataSource>SKS_CCR_BankTran</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>SKS_CCR_BankTran_BankCustomerNum</Name>
										<ElementPosition>1464193395</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>BankCustomerNum</DataField>
										<DataSource>SKS_CCR_BankTran</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>SKS_CCR_BankTran_FileTranType</Name>
										<ElementPosition>1561806288</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>FileTranType</DataField>
										<DataSource>SKS_CCR_BankTran</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>SKS_CCR_BankTran_TranDescription</Name>
										<ElementPosition>2049870753</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>TranDescription</DataField>
										<DataSource>SKS_CCR_BankTran</DataSource>
									</AxFormControl>
								</Controls>
								<DataSource>SKS_CCR_BankTran</DataSource>
							</AxFormControl>
						</Controls>
						<Caption>@SKS533</Caption>
						<DataSource>SKS_CCR_BankTran</DataSource>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>InUseBlock</Name>
						<ElementPosition>1932735281</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormCheckBoxControl">
								<Name>SKS_CCR_BankTran_InUse</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1073741822</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>CheckBox</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataField>InUse</DataField>
								<DataSource>SKS_CCR_BankTran</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>SKS_CCR_BankTran_InUseBy1</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1610612733</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataField>InUseBy</DataField>
								<DataSource>SKS_CCR_BankTran</DataSource>
							</AxFormControl>
						</Controls>
						<ColumnsMode>Fill</ColumnsMode>
						<Caption>@SYS50247</Caption>
						<DataSource>SKS_CCR_BankTran</DataSource>
						<FastTabExpanded>No</FastTabExpanded>
					</AxFormControl>
				</Controls>
				<AlignChild>No</AlignChild>
				<ArrangeMethod>Vertical</ArrangeMethod>
				<Style>FastTabs</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>