<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>SKS_LB_SettlementDetails</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class SKS_LB_SettlementDetails extends FormRun
{

    Str  LBJournalID;
    QueryBuildRange   DBRangeJournalAR,recid;
    SKS_LB_Journal    bSKS_LB_Journal;
    SKS_LB_JournalAR  mainFileAR;
    SKS_PP_Setup      localPP_Setup;
    CustParameters    mCustParameters;
    QueryBuilddatasource  DBJOURNALARAPPLIC,DBJOURNALAR, DbJournalAR1,DbJournalAR2;
    SKS_LB_54000Bas    mSKS_LB_54000Bas;    
    real AmountRemaining;
    real docbal;
    real remainbal;
    boolean validateCheckNum = true;
    LedgerDimensionDefaultAccountController generalLedgerOffsetDefaultAccountController;
}
]]></Source>
			</Method>
			<Method>
				<Name>calcRemainingValues</Name>
				<Source><![CDATA[
    void calcRemainingValues(AmountCur _invBalPmtCur)
    {
        RemainAmountInvCur.realValue(CustTransopen.AmountCur -
                (editSettleAmountInvCur.realValue()+editDiscountInvCur.realValue()));
        RemainAmountPmtCur.realValue(_invBalPmtCur -
                (SKS_LB_journalARApplic.SettleAmountCur+SKS_LB_JournalARApplic.DiscApplyAmount));
    }

]]></Source>
			</Method>
			<Method>
				<Name>CalculateMaxSettlement</Name>
				<Source><![CDATA[
    public amountcur CalculateMaxSettlement(SKS_LB_JournalARApplic  _sks_lb_journalararpplic)
    {
        CustTransOpen lcustTransOpen;
        CustTrans lcustTrans;
        container complist;
        ;

        complist += _sks_lb_journalararpplic.CustTransDataAreaId;
        select firstonly crosscompany:complist lcustTransOpen
                where lcustTransOpen.RecId == _sks_lb_journalararpplic.CustTransOpenRecId
            join CurrencyCode from lcustTrans
                where lcustTrans.RecId == lcustTransOpen.RefRecId;

        return mSKS_LB_54000Bas.convertCuryAmounts(lCustTransOpen, bSKS_LB_Journal.CurrencyCode, lcustTrans.CurrencyCode,
            bSKS_LB_Journal.ExchRate, SKS_LB_ConvertType::TrantoPaym, lCustTransOpen.AmountCur, mainfileAR.PaymDate);

    }

]]></Source>
			</Method>
			<Method>
				<Name>close</Name>
				<Source><![CDATA[
    public void close()
    {
        super();
        
        FormDataUtil::getFormDataSource(mainfileAR).reread();
        FormDataUtil::getFormDataSource(mainfileAR).refresh();

        element.refreshWorkbenchForm();
    }

]]></Source>
			</Method>
			<Method>
				<Name>DifferenceTotal</Name>
				<Source><![CDATA[
    private real DifferenceTotal()
    {
        return mainFileAR.PmtAmountCur - (this.WriteOffSumTotal() + this.TotalInvoicesum());
    }

]]></Source>
			</Method>
			<Method>
				<Name>EnableDisableApplyDiscount</Name>
				<Source><![CDATA[
    public void EnableDisableApplyDiscount()
    {
        if(SKS_LB_JournalARApplic.SettleAmountCur == 0)
        {
            SKS_LB_JournalARApplic_ApplyDiscount.allowEdit(false);
        }
        else
        {
            SKS_LB_JournalARApplic_ApplyDiscount.allowEdit(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>EnableDisableWriteOffs</Name>
				<Source><![CDATA[
    public void EnableDisableWriteOffs()
    {
        if(SKS_LB_JournalARApplic.WriteOff == NoYes::Yes)
        {
            if(SKS_LB_JournalARApplic.AutoCRAutoRev == NoYes::Yes)
            {
                SKS_LB_JournalARApplic_DS.object(fieldNum(SKS_LB_JournalARApplic, RevReasonCode)).allowEdit(true);
                if(SKS_LB_JournalARApplic.RevReasonCode != '')
                {
                    SKS_LB_JournalARApplic_ds.object(fieldNum(SKS_LB_JournalARApplic, AutoRevLedgerDimension)).allowedit(false);
                }
                else
                {
                    SKS_LB_JournalARApplic_ds.object(fieldNum(SKS_LB_JournalARApplic, AutoRevLedgerDimension)).allowedit(true);
                }
            }
            else
            {
                SKS_LB_JournalARApplic_DS.object(fieldNum(SKS_LB_JournalARApplic, RevReasonCode)).allowEdit(false);
                SKS_LB_JournalARApplic_ds.object(fieldNum(SKS_LB_JournalARApplic, AutoRevLedgerDimension)).allowedit(false);
            }

            SKS_LB_JournalARApplic_ds.object(fieldNum(SKS_LB_JournalARApplic, AutoCRAutoRev)).allowedit(true);

        }
        else
        {
            SKS_LB_JournalARApplic_ds.object(fieldNum(SKS_LB_JournalARApplic, AutoRevLedgerDimension)).allowedit(false);
            SKS_LB_JournalARApplic_DS.object(fieldNum(SKS_LB_JournalARApplic, RevReasonCode)).allowEdit(false);
            SKS_LB_JournalARApplic_ds.object(fieldNum(SKS_LB_JournalARApplic, AutoRevLedgerDimension)).allowedit(false);
            SKS_LB_JournalARApplic_DS.object(fieldNum(SKS_LB_JournalARApplic, AutoCRAutoRev)).allowEdit(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {

        Super();
        if (element.args().dataset() != tablenum(SKS_LB_JournalAR))
        {
            throw error("@SYS96590");
        }
        if(element.args().parm() == 'Restricted')
        {
            SKS_LB_JournalARApplic_ds.allowEdit(false);
            CustTransOpen_ds.allowEdit(false);
            CustTrans_ds.allowEdit(false);
            ButtonGroup.enabled(false);
        }
        mainFileAR = element.args().record();
        element.validateFileRecord();
        //imageListAppl_checkmark = new ImageListAppl_checkmark();
        //DisplayFullSettlement.imageList(imageListAppl_checkmark.imageList());
        Select
            LBAlwaysApplyDisc,
            LBLookupNumSeqMask,
            LBUseInvoiceDimensions,
            LBDefaultFromCust,
            AutoCR,
            LBRedSettleCRBal,
            LBRedSettleInvBal,
            LBWriteOffRuleCROverSettle,
            LBSumRefNum,
            LBstandardDed
        from localPP_Setup;

        mSKS_LB_54000Bas = SKS_LB_54000Bas::Construct();
        //generalLedgerOffsetDefaultAccountController = LedgerDimensionDefaultAccountController::construct(SKS_LB_JournalARApplic_DS, fieldStr(SKS_LB_JournalARApplic, AutoRevLedgerDimension));
        mCustParameters = CustParameters::find();
        element.PopulateTotals();
    }

]]></Source>
			</Method>
			<Method>
				<Name>MarkfullSettlement</Name>
				<Source><![CDATA[
    public void MarkfullSettlement()
    {
        CustTransOpen lcustTransOpen;
        CustParameters  CustParameters;
        CustTrans lcustTrans;
        container complist;
        ;

        complist += SKS_LB_JournalARApplic.CustTransDataAreaId;
        select firstonly crosscompany:complist lcustTransOpen
                where lcustTransOpen.RecId == SKS_LB_JournalARApplic.CustTransOpenRecId
            join CurrencyCode from lcustTrans
                where lcustTrans.RecId == lcustTransOpen.RefRecId;

        CustParameters = CustParameters::find();

        // SKS_19380_FlintfoxAresInvoiceApplicaiton
        //if(lcustTransOpen.AmountCur > 0)
        if(lcustTransOpen.sksGetRemainingAmount() > 0)
        // SKS_19380_FlintfoxAresInvoiceApplicaiton
        {
            If (mSKS_LB_54000Bas.convertCuryAmounts(lCustTransOpen, bSKS_LB_Journal.CurrencyCode, lCustTrans.CurrencyCode,
            // SKS_19380_FlintfoxAresInvoiceApplicaiton
            //bSKS_LB_Journal.ExchRate, SKS_LB_ConvertType::TrantoPaym, lCustTransOpen.AmountCur, mainfileAR.PaymDate)
            bSKS_LB_Journal.ExchRate, SKS_LB_ConvertType::TrantoPaym, lCustTransOpen.sksGetRemainingAmount(), mainfileAR.PaymDate)
            // SKS_19380_FlintfoxAresInvoiceApplicaiton
                -   (SKS_LB_journalARApplic.SettleAmountCur + SKS_LB_JournalARApplic.DiscApplyAmount) == 0
                ||
                mSKS_LB_54000Bas.convertCuryAmounts(lCustTransOpen, bSKS_LB_Journal.CurrencyCode, lCustTrans.CurrencyCode, bSKS_LB_Journal.ExchRate,
                // SKS_19380_FlintfoxAresInvoiceApplicaiton
                //SKS_LB_ConvertType::TrantoPaym, lCustTransOpen.AmountCur, mainfileAR.PaymDate)
                SKS_LB_ConvertType::TrantoPaym, lCustTransOpen.sksGetRemainingAmount(), mainfileAR.PaymDate)
                // SKS_19380_FlintfoxAresInvoiceApplicaiton
                -   (SKS_LB_journalARApplic.SettleAmountCur + SKS_LB_JournalARApplic.DiscApplyAmount) <= CustParameters.MaxMSTDiff)
            {
                SKS_LB_JournalARApplic.FullSettlement = NoYes::Yes;

                if(SKS_LB_JournalARApplic.DiscApplyAmount > 0)
                {
                    SKS_LB_JournalARApplic.ApplyDiscount = NoYes::Yes;
                }
            }
            else
            {
                SKS_LB_JournalARApplic.FullSettlement = NoYes::No;
                SKS_LB_JournalARApplic.ApplyDiscount = NoYes::No;
            }
        }
        else
        {
            If(mSKS_LB_54000Bas.convertCuryAmounts(lCustTransOpen, bSKS_LB_Journal.CurrencyCode, lCustTrans.CurrencyCode,
                // SKS_19380_FlintfoxAresInvoiceApplicaiton
                //bSKS_LB_Journal.ExchRate, SKS_LB_ConvertType::TrantoPaym, lCustTransOpen.AmountCur, mainfileAR.PaymDate)
                bSKS_LB_Journal.ExchRate, SKS_LB_ConvertType::TrantoPaym, lCustTransOpen.sksGetRemainingAmount(), mainfileAR.PaymDate)
                // SKS_19380_FlintfoxAresInvoiceApplicaiton
                -   (SKS_LB_journalARApplic.SettleAmountCur + SKS_LB_JournalARApplic.DiscApplyAmount) == 0
                ||
                mSKS_LB_54000Bas.convertCuryAmounts(lCustTransOpen, bSKS_LB_Journal.CurrencyCode, lCustTrans.CurrencyCode,
                // SKS_19380_FlintfoxAresInvoiceApplicaiton
                //bSKS_LB_Journal.ExchRate, SKS_LB_ConvertType::TrantoPaym, lCustTransOpen.AmountCur, mainfileAR.PaymDate)
                bSKS_LB_Journal.ExchRate, SKS_LB_ConvertType::TrantoPaym, lCustTransOpen.sksGetRemainingAmount(), mainfileAR.PaymDate)
                // SKS_19380_FlintfoxAresInvoiceApplicaiton
                -   (SKS_LB_journalARApplic.SettleAmountCur + SKS_LB_JournalARApplic.DiscApplyAmount) >= CustParameters.MaxMSTDiff)
            {
                SKS_LB_JournalARApplic.FullSettlement = NoYes::Yes;

                if(SKS_LB_JournalARApplic.DiscApplyAmount > 0)
                {
                    SKS_LB_JournalARApplic.ApplyDiscount = NoYes::Yes;
                }
            }
            else
            {
                SKS_LB_JournalARApplic.FullSettlement = NoYes::No;
                SKS_LB_JournalARApplic.ApplyDiscount = NoYes::No;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>PopulateTotals</Name>
				<Source><![CDATA[
    public void PopulateTotals()
    {
        AppliedAmt.realValue(this.TotalInvoiceSum());
        writeoffSum.realValue(this.WriteOffSumTotal());
        UnappliedAmt.realValue(this.DifferenceTotal());
        SettlementCount.value(this.SettlementCountTotal());
        AutoRevTotal.realvalue(this.reversalSum());
        AutoRevCount.value(this.ReversalCountTotal());
    }

]]></Source>
			</Method>
			<Method>
				<Name>RefreshSettlementGrid</Name>
				<Source><![CDATA[
    void RefreshSettlementGrid()
    {
        SKS_LB_JournalARApplic_ds.research(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshWorkbenchForm</Name>
				<Source><![CDATA[
    void refreshWorkbenchForm()
    {
        str formCaller;
        formCaller = element.args().caller().toString();
        if(strScan(formCaller,'SKS_LB_PaymentAppWorkbench',0,strLen(formCaller))>0)
        {
            element.args().caller().RefreshGoodPayments();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshWorkbenchErrorGrid</Name>
				<Source><![CDATA[
    void refreshWorkbenchErrorGrid()
    {
        str formCaller;
        formCaller = element.args().caller().toString();
        if(strScan(formCaller,'SKS_LB_PaymentAppWorkbench',0,strLen(formCaller))>0)
        {
            element.args().caller().refreshErrorPayments();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ReversalCountTotal</Name>
				<Source><![CDATA[
    private int ReversalCountTotal()
    {
        SKS_LB_JournalARApplic  JournalARApplic;

        select count (recid) from JournalARApplic 
            where JournalARApplic.sks_lb_journalarrecid == mainfilear.recid
                && JournalarApplic.sks_LB_JournalARRecid != 0
                && JournalARApplic.AutoCRAutoRev == NoYes::Yes  
                && JournalARApplic.SettleAmountCur != 0;

        return real2int(JournalARApplic.recid);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ReversalSum</Name>
				<Source><![CDATA[
    private real ReversalSum()
    {
        SKS_LB_JournalARApplic  JournalarApplic;

        select sum(settleamountCur) from JournalarApplic 
            where JournalARApplic.sks_lb_journalarrecid == mainfilear.recid
                && JournalarApplic.sks_LB_JournalARRecid != 0
                && JournalARApplic.AutoCRAutoRev == NoYes::Yes 
                && JournalARApplic.SettleAmountCur != 0;

        return JournalarApplic.SettleAmountCur * -1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>SettlementCountTotal</Name>
				<Source><![CDATA[
    private int SettlementCountTotal()
    {
        SKS_LB_JournalARApplic  JournalARApplic;

        select count (settleamountcur) from JournalARApplic 
            where JournalARApplic.sks_lb_journalarrecid == mainfilear.recid
                && JournalarApplic.sks_LB_JournalARRecid != 0
                && JournalARApplic.SettleAmountCur != 0;

        return real2int(JournalARApplic.settleamountcur);
    }

]]></Source>
			</Method>
			<Method>
				<Name>TotalInvoicesum</Name>
				<Source><![CDATA[
    private real TotalInvoicesum()
    {
        SKS_LB_JournalARApplic  JournalarApplic;

        select sum(settleamountCur), sum(DiscApplyAmount), maxOf(writeOff) from JournalarApplic 
            where JournalARApplic.sks_lb_journalarrecid == mainfilear.recid
                && JournalarApplic.sks_LB_JournalARRecid != 0
                && JournalARApplic.SettleAmountCur != 0 && JournalARApplic.WriteOff == NoYes::No;

        return JournalarApplic.SettleAmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ValidateDisc_SettlementAmounts</Name>
				<Source><![CDATA[
    public boolean ValidateDisc_SettlementAmounts()
    {
        SKS_LB_54000Bas SKS_LB_54000Bas = SKS_LB_54000Bas::Construct();
        AmountCur invCurySettleAmount= SKS_LB_54000Bas.GetCurySettlementTotal(custTransOpen,
                                                                            bSKS_LB_Journal.CurrencyCode,
                                                                            bSKS_LB_Journal.ExchRate,
                                                                            SKS_LB_JournalARApplic.SettleAmountCur,
                                                                            SKS_LB_JournalARApplic.DiscApplyAmount,
                                                                            mainfileAR.PaymDate);
        boolean ret = true;

        // SKS_19380_FlintfoxAresInvoiceApplicaiton
        //if ((custTransOpen.AmountCur > 0 && (invCurySettleAmount > custTransOpen.AmountCur)) ||
        //   (custTransOpen.AmountCur < 0 && (invCurySettleAmount < custTransOpen.AmountCur)))
        Amount remainingAmount = custTransOpen.sksGetRemainingAmount();
        if ((remainingAmount > 0 && (invCurySettleAmount > remainingAmount)) ||
           (remainingAmount < 0 && (invCurySettleAmount < remainingAmount)))
        // SKS_19380_FlintfoxAresInvoiceApplicaiton
        {
            ret = False;
            error("@SKS380");
        }
        else if((SKS_LB_JournalARApplic.DiscApplyAmount > 0 && SKS_LB_JournalARApplic.SettleAmountCur < 0)
                || (SKS_LB_JournalARApplic.DiscApplyAmount < 0 && SKS_LB_JournalARApplic.SettleAmountCur > 0))
        {
            ret = false;
            error("@SYS68141");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFileRecord</Name>
				<Source><![CDATA[
    public void validateFileRecord()
    {
        if(SKS_LB_JournalARApplic.FileRecord <= 0
            || !SKS_LB_JournalARApplic)
        {
            LockBoxButton.enabled(false);
        }
        else
        {
            LockBoxButton.enabled(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>WriteOffSumTotal</Name>
				<Source><![CDATA[
    private real WriteOffSumTotal()
    {
        SKS_LB_JournalARApplic  JournalarApplic;

        select sum(settleamountCur) from JournalarApplic 
            where JournalARApplic.sks_lb_journalarrecid == mainfilear.recid
            && JournalarApplic.sks_LB_JournalARRecid != 0
            && JournalARApplic.WriteOff == NoYes::yes 
            && JournalARApplic.SettleAmountCur != 0;

        return JournalarApplic.SettleAmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>FileFormatFieldValidation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates appropriate field mappings for external settlement
    /// </summary>
    private boolean FileFormatFieldValidation()
    {
        SKS_LB_FileFormatDet    rec_SKS_LB_FileFormatDet;
        SKS_LB_Depositor        lSKS_LB_Depositor;
        boolean ret = true;

        Select firstonly * from lSKS_LB_Depositor where lSKS_LB_Depositor.AccountNum == mainfileAR.CustAccount
                && lSKS_LB_Depositor.CustomerCompany == mainFileAR.CustomerCompany;
        //Make sure fileformat will work for external settlements.
        Select count(FieldStart) from rec_SKS_LB_FileFormatDet
                where rec_SKS_LB_FileFormatDet.FormatID == lSKS_LB_Depositor.LBExternalFormatId &&
                    (rec_SKS_LB_FileFormatDet.FieldType == SKS_LB_FieldType::InvNumber ||
                    rec_SKS_LB_FileFormatDet.FieldType == SKS_LB_FieldType::InvAmt);

        if (rec_SKS_LB_FileFormatDet.FieldStart != 2)
        {
            //Lockbox file formats used for settlements must have invoice number and invoice amount fields mapped
            throw error("@SKS910");
            //return false;
        }

        Select firstonly rec_SKS_LB_FileFormatDet
                where rec_SKS_LB_FileFormatDet.FormatID == lSKS_LB_Depositor.LBExternalFormatId &&
                rec_SKS_LB_FileFormatDet.FieldType == SKS_LB_FieldType::CheckNumber;
        if (!rec_SKS_LB_FileFormatDet)
        {
            //Lockbox file formats used for settlements should have a check number(it is not required, just recommended)
            if (Box::yesNo(strFmtLB("@SKS954"),DialogButton::Yes,"@SYS4946") == DialogButton::Yes)
            {
                validateCheckNum = false;
                ret = true;
            }
            else
            {
                ret = false;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExistingSettlement</Name>
				<Source><![CDATA[
    public boolean checkExistingSettlement(CustTransOpen _custTransOpen, RecID _recID, boolean _displayMessage)
    {
        CustPaymSettlementManager settlementManager;
        SKS_LB_54000Bas sks_LB_54000Bas;
        LedgerJournalTrans ledgerJournalTrans;
        str journalNum;
        boolean ret;
        ;
        changeCompany(_custTransOpen.dataAreaId)
        {
            sks_LB_54000Bas = SKS_LB_54000Bas::Construct();
            ledgerJournalTrans = sks_LB_54000Bas.CreateTempLedgerJournalTrans(_custTransOpen.DueDate, bSKS_LB_Journal.CurrencyCode, bSKS_LB_Journal.ExchRate, _custTransOpen.dataAreaId, _custTransOpen.AccountNum);

            settlementManager = CustPaymSettlementManager::construct(ledgerJournalTrans);
            // SKS_19380_FlintfoxAresInvoiceApplicaiton
            //ret = settlementManager.SKS_lbIsAlreadyMarked(_custTransOpen, _recID);
            ret = CustPaymSettlementManager::sks_isAlreadyMarked(_custTransOpen, _recID);
            // ret = settlementManager.SKS_lbIsAlreadyMarked(_custTransOpen, _recID);
        }

        // SKS_19380_FlintfoxAresInvoiceApplicaiton
        // If marked in customer payment - allow to settle
        if (ret &&
            _custTransOpen.sksGetRemainingAmount())
        {
            return false;
        }
        // SKS_19380_FlintfoxAresInvoiceApplicaiton

        if(ret && _displayMessage)
        {
            journalNum = settlementManager.SKS_getMarkedLB(_custTransOpen, _recID);

            if(journalNum != '')
            {
                info(strFmt("@SKS6630", journalNum));
            }
            else
            {
                info("@SKS895");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canClose</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <returns></returns>
    public boolean canClose()
    {
        boolean ret;
        SKS_LB_Importing    db_importing;
    
        ret = super();

        if(ret)
        {
            select firstonly db_importing where db_importing.ExternalJournalARRecord == mainFileAR.RecId;
            if(db_importing)
            {
                if(Box::okCancel("@SKS:SKSDeletePriorImport", DialogButton::Cancel) == DialogButton::Ok)
                {
                    ttsbegin;
                    delete_from db_importing where db_importing.ExternalJournalARRecord == mainFileAR.RecId;
                    ttscommit;
                }
                else
                {
                    ret = false;
                }
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>SKS_LB_JournalARApplic</Name>
				<Methods>
					<Method>
						<Name>create</Name>
						<Source><![CDATA[
        public void create(boolean _append = false)
        {
            super(_append);
            element.PopulateTotals();
        }

]]></Source>
					</Method>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        public void executeQuery()
        {
            QueryBuildRange qbr;
            qbr = this.query().dataSourceTable(tablenum(SKS_LB_JournalARApplic)).addRange(fieldNum(SKS_LB_JournalARApplic, SKS_LB_JournalARRecid));
            qbr.value('!0');
            qbr.status(RangeStatus::Hidden);

            QueryBuildDataSource    queryBuildDataSource;
            queryBuildDataSource = this.query().dataSourceTable(tablenum(CustTransOpen));
            queryBuildDataSource.addSortField(fieldNum(CustTransOpen, TransDate), SortOrder::Ascending);

            super();
        }

]]></Source>
					</Method>
					<Method>
						<Name>validateWrite</Name>
						<Source><![CDATA[
        public boolean validateWrite()
        {
            SKS_LB_WriteoffRules    SKS_LB_WriteoffRules;
            boolean ret;

            ret = super();

            if(ret && SKS_LB_Journalarapplic.WriteOff == NoYes::Yes)
            {
                if(SKS_LB_Journalarapplic.AutoCRAutoRev == NoYes::Yes)
                {
                    if(SKS_LB_Journalarapplic.AutoRevLedgerDimension == 0)
                    {
                        error("@SKS3515");
                        ret = false;
                    }
                }

                if(ret)
                {
                    if(SKS_LB_Journalarapplic.RevReasonCode == '')
                    {
                        select firstOnly reqreason from SKS_LB_WriteoffRules where SKS_LB_WriteoffRules.WriteoffId == SKS_LB_Journalarapplic.WriteOffId;

                        if(SKS_LB_WriteoffRules.ReqReason == NoYes::yes)
                        {
                            error(strFmt("@SKS3525", sks_lb_writeoffRules.WriteoffId));
                            ret = false;
                        }
                    }
                }
            }

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>DisplayFullSettlement</Name>
						<Source><![CDATA[
        //BP Deviation Documented
        Public display container DisplayFullSettlement(SKS_LB_journalARApplic _SKS_LB_journalARApplic)
        {

            ImageReference image;
            container imageContainer;
            CustTransOpen lcustTransOpen;
            CustTrans lcustTrans;
            container complist;
            ;

            complist += _SKS_LB_JournalARApplic.CustTransDataAreaId;
            select firstonly crosscompany:complist lcustTransOpen
                    where lcustTransOpen.RecId == _SKS_LB_JournalARApplic.CustTransOpenRecId
                join CurrencyCode from lcustTrans
                    where lcustTrans.RecId == lcustTransOpen.RefRecId;

            // SKS_19380_FlintfoxAresInvoiceApplicaiton
            /*
            If (mSKS_LB_54000Bas.convertCuryAmounts(lCustTransOpen, bSKS_LB_Journal.CurrencyCode, lCustTrans.CurrencyCode,
                // SKS_19380_FlintfoxAresInvoiceApplicaiton
                //bSKS_LB_Journal.ExchRate, SKS_LB_ConvertType::TrantoPaym, lCustTransOpen.AmountCur, mainfileAR.PaymDate)
                bSKS_LB_Journal.ExchRate, SKS_LB_ConvertType::TrantoPaym, lCustTransOpen.sksGetRemainingAmount(), mainfileAR.PaymDate)
                // SKS_19380_FlintfoxAresInvoiceApplicaiton
                -   (_SKS_LB_journalARApplic.SettleAmountCur + _SKS_LB_JournalARApplic.DiscApplyAmount) == 0)
            {
                image = ImageReference::constructForSymbol(ImageReferenceSymbol::FieldCorrect);
            }
            else if(_SKS_LB_journalARApplic.SettleAmountCur != 0)
            {
                image = ImageReference::constructForSymbol(ImageReferenceSymbol::Triangle);
            }
            else
            {
                image = ImageReference::constructForSymbol(''); //no symbol
            }
            */

            if (_SKS_LB_JournalARApplic.FullSettlement)
            {
                image = ImageReference::constructForSymbol(ImageReferenceSymbol::FieldCorrect);
            }
            else
            {
                image = ImageReference::constructForSymbol(ImageReferenceSymbol::Triangle);
            }
            // SKS_19380_FlintfoxAresInvoiceApplicaiton
            
            imageContainer = image.pack();

            return imageContainer;
        }

]]></Source>
					</Method>
					<Method>
						<Name>DisplayCalcAvailSettlement</Name>
						<Source><![CDATA[
        public display AmountCur DisplayCalcAvailSettlement(SKS_LB_JournalARApplic _sks_lb_journalarapplic)
        {
            return  this.DisplayInvoiceAmtPmtCur(_sks_lb_journalarapplic) - this.DisplayDiscountAvailableAmount(_sks_lb_journalarapplic);
        }

]]></Source>
					</Method>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init(boolean    reinit = false)
        {
            super();

            if(!reinit)
            {
                SKS_LB_JournalARApplic_ds.cacheAddMethod('DisplayDiscountAvailableAmount');
                SKS_LB_JournalARApplic_ds.cacheAddMethod('DisplayInvoiceAmtPmtCur');
                SKS_LB_JournalARApplic_ds.cacheAddMethod('DisplaySettlementCount');
                SKS_LB_JournalARApplic_ds.cacheAddMethod('DisplayWriteOffSum');
                SKS_LB_JournalARApplic_ds.cacheAddMethod('DisplayInvoiceSum');
                SKS_LB_JournalARApplic_ds.cacheAddMethod('DisplayReversalSum');
                SKS_LB_JournalARApplic_ds.cacheAddMethod('DisplayReversalCount');
                SKS_LB_JournalARApplic_ds.cacheAddMethod('DisplayCalcAvailSettlement');
                SKS_LB_JournalARApplic_ds.cacheAddMethod('DisplayDifference');
                SKS_LB_JournalARApplic_ds.cacheAddMethod('DisplayFullSettlement');
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>DisplayDiscountAvailableAmount</Name>
						<Source><![CDATA[
        public display AmountCur DisplayDiscountAvailableAmount(SKS_LB_JournalARApplic _SKS_LB_JournalARApplic)
        {
            return mSKS_LB_54000Bas.CalcDiscountAvailable(_SKS_LB_JournalARApplic, bSKS_LB_Journal.CurrencyCode,
                ExchangeRateHelper::getExchangeRate1_Static(Ledger::primaryLedger(CompanyInfo::findDataArea(mainfileAR.customercompany).RecId), bSKS_LB_Journal.CurrencyCode, mainfileAR.PaymDate),
                mainfileAR.PaymDate);
        }

]]></Source>
					</Method>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        public int active()
        {
            int ret;

            ret = super();

            element.validateFileRecord();
            element.EnableDisableWriteOffs();
            element.EnableDisableApplyDiscount();

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>DisplayInvoiceAmtPmtCur</Name>
						<Source><![CDATA[
        //BP Deviation Documented
        Public display AmountCur DisplayInvoiceAmtPmtCur(SKS_LB_JournalARApplic _SKS_LB_JournalARApplic)
        {
            return mSKS_LB_54000Bas.InvoiceBalance(_SKS_LB_JournalARApplic, bSKS_LB_Journal.CurrencyCode,
                ExchangeRateHelper::getExchangeRate1_Static(Ledger::primaryLedger(CompanyInfo::findDataArea(mainfileAR.customercompany).RecId), bSKS_LB_Journal.CurrencyCode, mainfileAR.PaymDate),
                mainFileAR.PaymDate);

            
        }

]]></Source>
					</Method>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        public void write()
        {
            SKS_LB_JournalARApplic  locJournalARApplic;
            CustTrans               locCustTrans;
            ;

            super();

            select sum(SettleAmountCur) from locJournalARApplic where mainFileAR.RecId == locJournalARApplic.SKS_LB_JournalARRecId;

            //Settle amount is how much of payment is used so does not include discount
            mainFileAR.ActualSettleAmountCur = locJournalARApplic.SettleAmountCur;

            if (locJournalARApplic.SettleAmountCur == 0)
            {
                mainFileAR.Invoice = '';
            }
            else
            {
                select
                    count(RecId),
                    maxOf(CustTransdataareaid),
                    maxOf(CustTransRecId)
                from locJournalARApplic
                where locJournalARApplic.sks_lb_journalarrecid == mainfilear.recid
                    && locJournalARApplic.SettleAmountCur != 0;

                if(locJournalARApplic.recid == 1)
                {
                    changeCompany(locJournalARApplic.CustTransDataAreaId)
                    {
                        select firstonly Invoice from locCustTrans where locCustTrans.recid == locJournalARApplic.custtransrecid;
                    }

                    mainfilear.invoice = locCustTrans.invoice;
                }
                else
                {
                    mainFileAR.Invoice = '*';
                }
            }

            mainfileAR.write();

            element.PopulateTotals();
        }

]]></Source>
					</Method>
					<Method>
						<Name>linkActive</Name>
						<Source><![CDATA[
        [SuppressBPWarningAttribute('BPCheckSelectForUpdateAbsent','Buffer bSKS_LB_Journal is global.  Thus it must be selected for update to allow for updates in other methods')]
        public void linkActive()
        {
            super();
            
            if (element.args().dataset() == tablenum(SKS_LB_JournalAR))
            {
                CustomerAcct.text(mainFileAR.CustAccount);
                CustomerName.text(mainFileAR.CustName);
                PaymentAmt.realValue(mainFileAR.PmtAmountCur);
                RefNbr.text(mainFileAR.ChkRefNbr);
                PaymNote.text(mainFileAR.PaymNote ? mainFileAR.PaymNote : SKS_LB_JournalARApplic.paymNote());
                element.EnableDisableWriteOffs();
                if (mainFileAR.LedgerJournalTransRecId > 0)
                {
                    //Disable the editable fields
                    DiscApplyAmount.enabled(False);
                    SettleAmountCur.enabled(False);
                    InvoiceSKS_LB_JournalARApplic_SettlementAmountCur.enabled(False);
                    PaymentSKS_LB_JournalARApplic_DiscApplyAmount.enabled(False);
                    editSettleAmountInvCur.enabled(False);
                    editDiscountInvCur.enabled(False);

                    //Make the CustTransOpen fields invisible
                    DisplayInvoiceAmtPmtCur.visible(False);
                    DueDate.visible(False);

                    //Disable buttons
                    btnLoadOpenTrans.enabled(False);
                    btnImport.enabled(False);
                    SKS_LB_JournalARApplic_FullSettlement.enabled(false);
                    SKS_LB_JournalARApplic_ApplyDiscount.enabled(false);
                    SKS_LB_JournalARApplic_AutoCRAutoRev.enabled(false);
                    SKS_LB_JournalARApplic_RevReasonCode.enabled(false);
                    //AutoRevLedgerDimension.enabled(false);
                    SKS_LB_WriteOffTmpSettlements.enabled(false);
                }
                else
                {
                    //Enable the editable fields
                    DiscApplyAmount.enabled(True);
                    SettleAmountCur.enabled(True);
                    InvoiceSKS_LB_JournalARApplic_SettlementAmountCur.enabled(True);
                    PaymentSKS_LB_JournalARApplic_DiscApplyAmount.enabled(True);
                    editSettleAmountInvCur.enabled(True);
                    editDiscountInvCur.enabled(True);

                    //Make the CustTransOpen fields visible
                    DisplayInvoiceAmtPmtCur.visible(True);
                    DueDate.visible(True);

                    btnLoadOpenTrans.enabled(True);
                    if(mainFileAR.LBSettlementMethod == SKS_LB_SettlementMethod::External && mainFileAR.ParentJournalARID == 0)
                    {
                        btnImport.enabled(True);
                    }
                    else
                    {
                        btnImport.enabled(False);
                    }
                    SKS_LB_JournalARApplic_FullSettlement.enabled(true);
                    SKS_LB_JournalARApplic_ApplyDiscount.enabled(true);
                    SKS_LB_JournalARApplic_AutoCRAutoRev.enabled(true);
                    SKS_LB_JournalARApplic_RevReasonCode.enabled(true);
                    //AutoRevLedgerDimension.enabled(true);
                    SKS_LB_WriteOffTmpSettlements.enabled(true);
                }

                select forupdate bSKS_LB_Journal
                where bSKS_LB_Journal.JournalID == mainfileAR.JournalId
                && bSKS_LB_Journal.BatchNum == mainFileAR.BatchNum;

                PmtGrid_LB_Journal_CurrencyCode.text(bSKS_LB_Journal.CurrencyCode);
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>MarkFullSettlement</Name>
						<Source><![CDATA[
        //BP Deviation Documented
        Public void MarkFullSettlement(SKS_LB_journalARApplic _SKS_LB_journalARApplic)
        {

            CustTransOpen lcustTransOpen;
            CustParameters  CustParameters;
            CustTrans lcustTrans;
            container complist;
            ;

            complist += SKS_LB_JournalARApplic.CustTransDataAreaId;
            select firstonly crosscompany:complist lcustTransOpen
                    where lcustTransOpen.RecId == SKS_LB_JournalARApplic.CustTransOpenRecId
                join CurrencyCode from lcustTrans
                    where lcustTrans.RecId == lcustTransOpen.RefRecId;

            CustParameters = CustParameters::find();

            If (mSKS_LB_54000Bas.convertCuryAmounts(lCustTransOpen, bSKS_LB_Journal.currencyCode, lCustTrans.CurrencyCode,
                bSKS_LB_Journal.ExchRate, SKS_LB_ConvertType::TrantoPaym, lCustTransOpen.AmountCur, mainfileAR.PaymDate)
                -   (SKS_LB_journalARApplic.SettleAmountCur + SKS_LB_JournalARApplic.DiscApplyAmount) == 0
                ||
                mSKS_LB_54000Bas.convertCuryAmounts(lCustTransOpen, bSKS_LB_Journal.CurrencyCode, lCustTrans.CurrencyCode,
                bSKS_LB_Journal.ExchRate, SKS_LB_ConvertType::TrantoPaym, lCustTransOpen.AmountCur, mainfileAR.PaymDate)
                -   (SKS_LB_journalARApplic.SettleAmountCur + SKS_LB_JournalARApplic.DiscApplyAmount) <= CustParameters.MaxMSTDiff)
            {
                SKS_LB_JournalARApplic.FullSettlement = NoYes::Yes;
                if(SKS_LB_JournalARApplic.DiscApplyAmount > 0)
                {
                    SKS_LB_JournalARApplic.ApplyDiscount = NoYes::Yes;
                }
            }
            else
            {
                SKS_LB_JournalARApplic.FullSettlement = NoYes::No;
                SKS_LB_JournalARApplic.ApplyDiscount = NoYes::No;
            }
        }

]]></Source>
					</Method>
				</Methods>
				<Fields>
					<Field>
						<DataField>ApplyDiscount</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                amountcur InvBal;
                amountcur DiscAmount;
                AmountCur DiffBal;
                super();

                if(SKS_LB_JournalARApplic.ApplyDiscount == NoYes::Yes)
                {
                    InvBal = mSKS_LB_54000Bas.InvoiceBalance(SKS_LB_JournalARApplic, bSKS_LB_Journal.CurrencyCode, bSKS_LB_Journal.ExchRate, mainFileAR.PaymDate);
                    DiscAmount = mSKS_LB_54000Bas.CalcDiscountAvailable(SKS_LB_JournalARApplic, bSKS_LB_Journal.CurrencyCode, bSKS_LB_Journal.ExchRate, mainfileAR.PaymDate);
                    SKS_LB_JournalARApplic.DiscApplyAmount = DiscAmount;
                    DiffBal = InvBal - DiscAmount;
                    if(SKS_LB_JournalARApplic.SettleAmountCur > DiffBal)
                    {
                        SKS_LB_JournalARApplic.SettleAmountCur = InvBal - DiscAmount;
                    }
                }
                else
                {
                    if(SKS_LB_JournalARApplic.FullSettlement == NoYes::Yes)
                    {
                        SKS_LB_JournalARApplic.SettleAmountCur = SKS_LB_Journalarapplic.SettleAmountCur + SKS_LB_JournalARApplic.DiscApplyAmount;
                    }

                    SKS_LB_JournalARApplic.DiscApplyAmount = 0;
                }

                element.PopulateTotals();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>AutoCRAutoRev</DataField>
						<Methods>
							<Method>
								<Name>validate</Name>
								<Source><![CDATA[
            public boolean validate()
            {
                SKS_LB_Setup_AutoCRParms  SKS_LB_Setup_AutoCRParms;
                boolean ret;

                ret = super();

                select firstonly SKS_LB_Setup_AutoCRParms where SKS_LB_Setup_AutoCRParms.AutoCRGenJrnlName != '' && SKS_LB_Setup_AutoCRParms.CustomerCompany == SKS_LB_Journalarapplic.CustTransDataAreaId;

                if(!SKS_LB_Setup_AutoCRParms)
                {
                    ret = false;
                    error("@SKS3514");
                }

                return ret;
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>AutoRevLedgerDimension</DataField>
						<Methods>
							<Method>
								<Name>resolveReference</Name>
								<Source><![CDATA[
            public Common resolveReference(FormReferenceControl _formReferenceControl)
            {
                return generalLedgerOffsetDefaultAccountController.resolveReference();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>DiscApplyAmount</DataField>
						<Methods>
							<Method>
								<Name>validate</Name>
								<Source><![CDATA[
            public boolean validate()
            {
                boolean ret;

                if(SKS_LB_JournalARApplic.FullSettlement == NoYes::Yes)
                {
                    SKS_LB_JournalARApplic.SettleAmountCur = SKS_LB_JournalARApplic_ds.DisplayInvoiceAmtPmtCur(SKS_LB_JournalARApplic) - SKS_LB_JournalARApplic.DiscApplyAmount;
                }

                ret = element.ValidateDisc_SettlementAmounts();

                return ret;
            }

]]></Source>
							</Method>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                element.MarkfullSettlement();
                SKS_LB_JournalARApplic_ds.write();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>FullSettlement</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                amountcur InvBal;
                amountcur DiscAmount;
                CustPaymSettlementManager settlementManager;
                SKS_LB_JournalAR    local_JournalAR;
                amountcur lApplyAmount;
                CustTable   l_tmpCust;
                CustTransOpen   lCustTransOpen;
                CustTrans       lCustTrans;
                SKS_LB_Process_IMPORTTEMP_Records   SKS_LB_Process_IMPORTTEMP_Records = new SKS_LB_Process_IMPORTTEMP_Records();

                super();
                changecompany(SKS_LB_JournalARApplic.CustTransDataAreaId)
                {
                    lCustTransOpen = CustTransOpen::find(SKS_LB_JournalARApplic.CustTransOpenRecId);
                    lCustTrans = CustTrans::find(lCustTransOpen.RefRecId);                   
                }
                settlementManager = SKS_LB_Process_ImportTemp_Records::constructSettlementManager(mainFileAR.PaymDate, bSKS_LB_Journal.CurrencyCode,
                        bSKS_LB_Journal.ExchRate, SKS_LB_JournalARApplic.CustTransDataAreaId, mainfileAR.CustAccount, bSKS_LB_Journal.BankAcct, bSKS_LB_Journal.FormatID);
                // SKS_19380_FlintfoxAresInvoiceApplicaiton
                //if(!settlementManager.SKS_lbIsAlreadyMarked(lCustTransOpen, SKS_LB_JournalARApplic.RecId))
                //if(lCustTransOpen.sksIsAmountFullyCovered(true, true, SKS_LB_JournalARApplic.RecId))
                //{
                // SKS_19380_FlintfoxAresInvoiceApplicaiton
                    if(SKS_LB_JournalARApplic.FullSettlement == NoYes::Yes)
                    {
                        InvBal = mSKS_LB_54000Bas.InvoiceBalance(SKS_LB_JournalARApplic, bSKS_LB_Journal.CurrencyCode, bSKS_LB_Journal.ExchRate, mainFileAR.PaymDate);
                        DiscAmount = mSKS_LB_54000Bas.CalcDiscountAvailable(SKS_LB_JournalARApplic, bSKS_LB_Journal.CurrencyCode, bSKS_LB_Journal.ExchRate, mainfileAR.PaymDate);
                                                
                        if((mainFileAR.Invoice == '' && mainFileAR.ActualSettleAmountCur != 0) || !SKS_LB_Bank::find(mainFileAR.BankAcct, mainFileAR.FormatID).SepPaymByInv || mainFileAR.Invoice == lCustTrans.Invoice)  
                        {
                            SKS_LB_JournalARApplic.SettleAmountCur = InvBal - DiscAmount;
                            SKS_LB_JournalARApplic.DiscApplyAmount = DiscAmount;
                            if(SKS_LB_JournalARApplic.DiscApplyAmount > 0)
                            {
                                SKS_LB_JournalARApplic.ApplyDiscount = NoYes::Yes;
                                SKS_LB_Journalarapplic_ApplyDiscount.AllowEdit(true);
                            }
                        }
                        else
                        {
                            lApplyAmount = InvBal - DiscAmount;
                            l_tmpCust = CustTable::findByCompany(lCustTransOpen.company(), lCustTransOpen.AccountNum);
                            Global::buf2Buf(mainfileAR, local_JournalAr);
                            if(lApplyAmount > 0 || mainFileAR.PmtAmountCur > 0)
                            {
                                if(mainfileAR.PmtAmountCur - lApplyAmount < 0)
                                {
                                    local_JournalAR.PmtAmountCur = 0;
                                }
                                else
                                {
                                    mainfileAR.PmtAmountCur -= lApplyAmount;
                                    local_JournalAR.PmtAmountCur = lApplyAmount;
                                }
                            }
                            else//Handle credit note settlements
                            {
                                if(mainFileAR.PmtAmountCur < 0)//negative payment amount
                                {
                                    if(mainFileAR.PmtAmountCur < lApplyAmount)
                                    {
                                        mainFileAR.PmtAmountCur -= lApplyAmount;
                                        local_JournalAR.PmtAmountCur = lApplyAmount;
                                    }
                                    else
                                    {
                                        local_JournalAR.PmtAmountCur = 0;
                                    }
                                }
                            }
                            mainFileAR.PmtWasSplit = NoYes::Yes;
                            local_JournalAR.CustomerCompany = lCustTransOpen.company();
                            local_JournalAR.Party = l_tmpCust.party;

                            local_JournalAR.CustName = DirPartyTable::findRec(l_tmpCust.party).Name;

                            local_JournalAr.ActualSettleAmountCur = lApplyAmount;

                            local_JournalAR.invoice = lCustTrans.Invoice;
                            local_JournalAr.CustAccount = lCustTransOpen.AccountNum;
                            local_JournalAR.ParentJournalARID = mainFileAr.RecId;
                            local_JournalAR.DefaultDimension = SKS_LB_Process_IMPORTTEMP_Records::LBDimensionMerge(localPP_Setup, lCustTrans.DefaultDimension, l_tmpCust.defaultdimension, SKS_LB_Bank::find(mainFileAR.BankAcct, mainFileAR.FormatID).LBJournalName, lCustTransOpen.company());
                            local_JournalAR.FileRecord = 0;
                            local_JournalAR.PmtWasSplit = NoYes::Yes;
                            local_JournalAR.insert();
                            // Payment was added for customer %1
                            Info(strfmt("@SKS959", lCustTransOpen.AccountNum));

                            SKS_LB_Process_IMPORTTEMP_Records.InsertJournalARApplic(DiscAmount, lApplyAmount, lCustTransOpen.RecId, lCustTransOpen.AmountCur, lCustTransOpen.RefRecId, lCustTransOpen.dataAreaId, local_JournalAR,
                                    lCustTrans.Invoice, SKS_LB_MatchType::InvoiceNumber);
                            element.args().caller().RefreshGoodPayments();
                            SKS_LB_JournalARApplic.FullSettlement = NoYes::No;
                            SKS_LB_JournalARApplic.SettleAmountCur = 0;
                            SKS_LB_JournalARApplic.DiscApplyAmount = 0;
                        }
                    }
                    else
                    {
                        SKS_LB_JournalARApplic.SettleAmountCur = 0;
                        SKS_LB_JournalARApplic.DiscApplyAmount = 0;
                        SKS_LB_JournalARApplic.ApplyDiscount = NoYes::No;
                        SKS_LB_Journalarapplic_ApplyDiscount.AllowEdit(false);
                    }

                    element.PopulateTotals();
                // SKS_19380_FlintfoxAresInvoiceApplicaiton
                /*
                }
                else
                {
                    error(strFmt("@SKS419", CustTrans::find(SKS_LB_JournalARApplic.CustTransRecId).Invoice));
                    SKS_LB_JournalARApplic.FullSettlement = NoYes::No;
                }
                */
                // SKS_19380_FlintfoxAresInvoiceApplicaiton
            }

]]></Source>
							</Method>
							<Method>
								<Name>validate</Name>
								<Source><![CDATA[
            /// <summary>
            ///Validates the full settlement field
            /// </summary>
            /// <returns>a boolean value </returns>
            public boolean validate()
            {
                CustPaymSettlementManager settlementManager;
                CustTransOpen               lCustTransOpen;
                str markedMessage;
                boolean ret;

                ret = super();

                // SKS_19380_FlintfoxAresInvoiceApplicaiton
                /*
                if(ret)
                {
                    changecompany(SKS_LB_JournalARApplic.CustTransDataAreaId)
                    {
                        lCustTransOpen = CustTransOpen::find(SKS_LB_JournalARApplic.CustTransOpenRecId);
                    }
                    settlementManager = SKS_LB_Process_ImportTemp_Records::constructSettlementManager(mainFileAR.PaymDate, bSKS_LB_Journal.CurrencyCode,
                    bSKS_LB_Journal.ExchRate, SKS_LB_JournalARApplic.CustTransDataAreaId, mainfileAR.CustAccount, bSKS_LB_Journal.BankAcct, bSKS_LB_Journal.FormatID);

                    // SKS_19380_FlintfoxAresInvoiceApplicaiton
                    //if(settlementManager.SKS_lbIsAlreadyMarked(lCustTransOpen, SKS_LB_JournalARApplic.RecId))
                    if (CustPaymSettlementManager::sks_isAlreadyMarked(lCustTransOpen, SKS_LB_JournalARApplic.RecId))
                    // SKS_19380_FlintfoxAresInvoiceApplicaiton
                    {
                        markedMessage = settlementManager.SKS_getMarkedLB(lCustTransOpen, SKS_LB_JournalARApplic.RecId);

                        if(markedMessage != '')
                        {
                            info(strFmt("@SKS:SKGInvoiceNotAvailForSettlement", CustTrans::find(SKS_LB_JournalARApplic.CustTransRecId).Invoice, markedMessage));
                        }
                        else
                        {
                            error(strFmt("@SKS419", CustTrans::find(SKS_LB_JournalARApplic.CustTransRecId).Invoice));
                        }

                        ret = false;
                    }
                }
                */
                // SKS_19380_FlintfoxAresInvoiceApplicaiton

                return ret;
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>RevReasonCode</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                SKS_LB_ReasonAccounts  sks_lb_reasonaccounts;

                super();

                if(SKS_LB_Journalarapplic.RevReasonCode == '')
                {
                    SKS_LB_Journalarapplic_ds.object(fieldNum(SKS_LB_Journalarapplic, AutoRevLedgerDimension)).allowEdit(true);
                    SKS_LB_Journalarapplic.AutoRevOffsetLedgerDimension = 0;
                    SKS_LB_Journalarapplic.AutoRevLedgerDimension = 0;
                }
                else
                {
                    select firstOnly OffsetLedgerDimension, ledgerdimension from sks_lb_reasonaccounts where sks_lb_reasonaccounts.ReasonCode == SKS_LB_Journalarapplic.RevReasonCode;
                    SKS_LB_Journalarapplic.AutoRevOffsetLedgerDimension = SKS_LB_ReasonAccounts.OffsetLedgerDimension;
                    SKS_LB_Journalarapplic.AutoRevLedgerDimension = SKS_LB_ReasonAccounts.LedgerDimension;
                    SKS_LB_Journalarapplic_ds.object(fieldNum(SKS_LB_Journalarapplic, AutoRevLedgerDimension)).allowEdit(false);
                    SKS_LB_Journalarapplic_ds.research();
                }
            }

]]></Source>
							</Method>
							<Method>
								<Name>validate</Name>
								<Source><![CDATA[
            public boolean validate()
            {
                SKS_LB_ReasonAccounts  sks_lb_reasonaccounts;
                boolean ret;

                ret = super();

                if(ret && SKS_LB_JournalARApplic.RevReasonCode != '')
                {
                    select firstOnly LedgerDimension, offsetLedgerdimension from sks_lb_reasonaccounts where sks_lb_reasonaccounts.ReasonCode == SKS_LB_JournalarApplic.revreasoncode;

                    if(sks_lb_reasonaccounts.LedgerDimension == 0)
                    {
                        error("@SKS3527");
                        ret = false;
                    }
                }
                return ret;
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>SettleAmountCur</DataField>
						<Methods>
							<Method>
								<Name>validate</Name>
								<Source><![CDATA[
            /// <summary>
            ///Validates the settlement amount field
            /// </summary>
            /// //<returns>
            /// a boolean value
            /// </returns>
            public boolean validate()
            {
                boolean ret = true;

                if(SKS_LB_JournalARApplic.SettleAmountCur != 0)
                {
                    if(SKS_LB_JournalARApplic.FullSettlement == NoYes::Yes)
                    {
                        if(SKS_LB_JournalARApplic.DiscApplyAmount +  SKS_LB_JournalARApplic.SettleAmountCur < SKS_LB_JournalARApplic_ds.DisplayInvoiceAmtPmtCur(SKS_LB_JournalARApplic))
                        {
                            SKS_LB_JournalARApplic.FullSettlement = NoYes::No;
                        }
                    }

                    ret = element.ValidateDisc_SettlementAmounts();

                    if (element.checkExistingSettlement(CustTransOpen, SKS_LB_JournalARApplic.RecId, True))
                    {
                        ret = false;
                    }
                }

                return ret;
            }

]]></Source>
							</Method>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            /// <summary>
            ///Handles modification of the settlement amount field
            /// </summary>
            public void modified()
            {
                CustTransOpen lCustTransOpen = CustTransOpen::find(SKS_LB_JournalARApplic.CustTransOpenRecId);
                CustTrans lCustTrans = CustTrans::find(lCustTransOpen.RefRecId);

                super();

                if(SKS_LB_JournalARApplic.SettleAmountCur < 0)
                {
                    SKS_LB_JournalARApplic_ds.object(fieldNum(SKS_LB_JournalARApplic, AutoCRAutoRev)).allowEdit(true);
                }
                else
                {
                    SKS_LB_JournalARApplic.AutoCRAutoRev = NoYes::No;
                    SKS_LB_JournalARApplic_ds.object(fieldNum(SKS_LB_JournalARApplic, AutoCRAutoRev)).allowEdit(false);
                    SKS_LB_JournalARApplic.ApplyDiscount = NoYes::No;
                }

                if(SKS_LB_JournalARApplic.SettleAmountCur != 0)
                {
                    if(mainFileAR.Invoice == '' || !SKS_LB_Bank::find(mainFileAR.BankAcct, mainFileAR.FormatID).SepPaymByInv || mainFileAR.Invoice == lCustTrans.Invoice)
                    {
                        if(SKS_LB_JournalARApplic.DiscApplyAmount > 0)
                        {
                            SKS_LB_JournalARApplic.ApplyDiscount = NoYes::Yes;
                            SKS_LB_Journalarapplic_ApplyDiscount.AllowEdit(true);
                        }
                    }
                    else
                    {
                        SKS_LB_JournalAR local_JournalAR;
                        amountcur lApplyAmount = SKS_LB_JournalARApplic.SettleAmountCur - SKS_LB_JournalARApplic.DiscApplyAmount;
                        CustTable l_tmpCust = CustTable::findByCompany(lCustTransOpen.company(), lCustTransOpen.AccountNum);
                        SKS_LB_Process_IMPORTTEMP_Records SKS_LB_Process_IMPORTTEMP_Records = new SKS_LB_Process_IMPORTTEMP_Records();

                        Global::buf2Buf(mainfileAR, local_JournalAr);
                        if(lApplyAmount > 0 || mainFileAR.PmtAmountCur > 0)
                        {
                            if(mainfileAR.PmtAmountCur - lApplyAmount < 0)
                            {
                                local_JournalAR.PmtAmountCur = 0;
                            }
                            else
                            {
                                mainfileAR.PmtAmountCur -= lApplyAmount;
                                local_JournalAR.PmtAmountCur = lApplyAmount;
                            }
                        }
                        else//Handle credit note settlements
                        {
                            if(mainFileAR.PmtAmountCur < 0)//negative payment amount
                            {
                                if(mainFileAR.PmtAmountCur < lApplyAmount)
                                {
                                    mainFileAR.PmtAmountCur -= lApplyAmount;
                                    local_JournalAR.PmtAmountCur = lApplyAmount;
                                }
                                else
                                {
                                    local_JournalAR.PmtAmountCur = 0;
                                }
                            }
                        }
                        mainFileAR.PmtWasSplit = NoYes::Yes;
                        local_JournalAR.CustomerCompany = lCustTransOpen.company();
                        local_JournalAR.Party = l_tmpCust.party;

                        local_JournalAR.CustName = DirPartyTable::findRec(l_tmpCust.party).Name;

                        local_JournalAr.ActualSettleAmountCur = lApplyAmount;

                        local_JournalAR.invoice = lCustTrans.Invoice;
                        local_JournalAr.CustAccount = lCustTransOpen.AccountNum;
                        local_JournalAR.ParentJournalARID = mainFileAr.RecId;
                        local_JournalAR.DefaultDimension = SKS_LB_Process_IMPORTTEMP_Records::LBDimensionMerge(localPP_Setup, lCustTrans.DefaultDimension, l_tmpCust.defaultdimension, SKS_LB_Bank::find(mainFileAR.BankAcct, mainFileAR.FormatID).LBJournalName, lCustTransOpen.company());
                        local_JournalAR.FileRecord = 0;
                        local_JournalAR.PmtWasSplit = NoYes::Yes;
                        local_JournalAR.insert();
                        // Payment was added for customer %1
                        Info(strfmt("@SKS959", lCustTransOpen.AccountNum));

                        SKS_LB_Process_IMPORTTEMP_Records.InsertJournalARApplic(SKS_LB_JournalARApplic.DiscApplyAmount, lApplyAmount, lCustTransOpen.RecId, lCustTransOpen.AmountCur, lCustTransOpen.RefRecId, lCustTransOpen.dataAreaId, local_JournalAR,
                                lCustTrans.Invoice, SKS_LB_MatchType::InvoiceNumber);
                        element.args().caller().RefreshGoodPayments();
                        SKS_LB_JournalARApplic.FullSettlement = NoYes::No;
                        SKS_LB_JournalARApplic.SettleAmountCur = 0;
                        SKS_LB_JournalARApplic.DiscApplyAmount = 0;
                    }
                }

                element.MarkfullSettlement();
                element.PopulateTotals();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
				</Fields>
			</DataSource>
			<DataSource>
				<Name>CustTransOpen</Name>
				<Methods>
					<Method>
						<Name>displayAmountAvailPaymCur</Name>
						<Source><![CDATA[
        [SysClientCacheDataMethodAttribute]
        public display AmountCur displayAmountAvailPaymCur()
        {
            AmountCur ReturnAmt;
            ReturnAmt = mSKS_LB_54000Bas.convertCuryAmounts(CustTransOpen, bSKS_LB_Journal.CurrencyCode, CustTrans.CurrencyCode,
                ExchangeRateHelper::getExchangeRate1_Static(Ledger::primaryLedger(CompanyInfo::findDataArea(mainfileAR.customercompany).RecId), bSKS_LB_Journal.CurrencyCode, mainfileAR.PaymDate),
                 SKS_LB_ConvertType::TrantoPaym, CustTransOpen.AmountCur,mainfileAR.PaymDate);
            element.calcRemainingValues(ReturnAmt);
            return ReturnAmt;

        }

]]></Source>
					</Method>
					<Method>
						<Name>editDiscountInvCur</Name>
						<Source><![CDATA[
        //BP Deviation Documented
        public edit AmountCur editDiscountInvCur(boolean _set, CustTransOpen _CustTransOpen, AmountCur _settleAmountCur)
        {
            AmountCur ReturnAmt;
            if (_set)
            {
                //manager.updateSettleAmount(_custTransOpen, _settleAmountCur);
                SKS_LB_JournalARApplic.DiscApplyAmount =
                    mSKS_LB_54000Bas.convertCuryAmounts(_CustTransOpen, bSKS_LB_Journal.CurrencyCode, CustTrans.CurrencyCode, ExchangeRateHelper::getExchangeRate1_Static(Ledger::primaryLedger(CompanyInfo::findDataArea(mainfileAR.customercompany).RecId), bSKS_LB_Journal.CurrencyCode, mainfileAR.PaymDate),
                    SKS_LB_ConvertType::TrantoPaym, _settleAmountCur,MainFileAR.PaymDate);
                SKS_LB_JournalARApplic.update();
            }

            ReturnAmt = mSKS_LB_54000Bas.convertCuryAmounts(_CustTransOpen, bSKS_LB_Journal.CurrencyCode, CustTrans.CurrencyCode, bSKS_LB_Journal.ExchRate, SKS_LB_ConvertType::PaymtoTran, SKS_LB_JournalARApplic.DiscApplyAmount,MainFileAR.PaymDate);
            return ReturnAmt;


        }

]]></Source>
					</Method>
					<Method>
						<Name>editSettleAmountInvCur</Name>
						<Source><![CDATA[
        //BP Deviation Documented
        public edit AmountCur editSettleAmountInvCur(boolean _set, CustTransOpen _CustTransOpen, AmountCur _settleAmountCur)
        {
            AmountCur ReturnAmt;
            if (_set)
            {
                //manager.updateSettleAmount(_custTransOpen, _settleAmountCur);
                SKS_LB_JournalARAPPLIC.SettleAmountCur =
                     mSKS_LB_54000Bas.convertCuryAmounts(_CustTransOpen, bSKS_LB_Journal.CurrencyCode, CustTrans.CurrencyCode, bSKS_LB_Journal.ExchRate, SKS_LB_ConvertType::TrantoPaym, _settleAmountCur,mainfileAR.PaymDate);
                changeCompany(mainFileAR.company())
                {
                    MainFileAR.update();
                }
            }

            ReturnAmt = mSKS_LB_54000Bas.convertCuryAmounts(_CustTransOpen, bSKS_LB_Journal.CurrencyCode, CustTrans.CurrencyCode,
                ExchangeRateHelper::getExchangeRate1_Static(Ledger::primaryLedger(CompanyInfo::findDataArea(mainfileAR.customercompany).RecId), bSKS_LB_Journal.CurrencyCode, mainfileAR.PaymDate),
                SKS_LB_ConvertType::PaymtoTran, SKS_LB_JournalARApplic.SettleAmountCur, mainFileAR.PaymDate);

            return ReturnAmt;
        }

]]></Source>
					</Method>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        public void write()
        {
            //Workbench is never trying to write this record but AX will return error on write/validate
            //if this Outer joined record is not present
            return ;
        }

]]></Source>
					</Method>
					<Method>
						<Name>validateWrite</Name>
						<Source><![CDATA[
        public boolean validateWrite()
        {
            //Workbench is never trying to write this record but AX will return error on write/validate
            //if this Outer joined record is not present
            return true;
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>CustTrans</Name>
				<Methods>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        public void write()
        {
            //Workbench is never trying to write this record but AX will return error on write/validate
            //if this Outer joined record is not present
            return ;
        }

]]></Source>
					</Method>
					<Method>
						<Name>validateWrite</Name>
						<Source><![CDATA[
        public boolean validateWrite()
        {
            //Workbench is never trying to write this record but AX will return error on write/validate
            //if this Outer joined record is not present
            return true;
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>btnLoadOpenTrans</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            SKS_LB_JournalARApplic  localARApplic;
            DialogButton diagBut;
            SKS_LB_Process_IMPORTTEMP_Records tmpImport;
            SKS_EB_FileRecord       l_fileRecordId;
            ;

            if (SKS_LB_JournalARApplic)
            {
                // This will load all open invoices for this customer. Remove existing settlement information first?
                diagBut = Box::yesNoCancel(
                    "@SKS962",
                    DialogButton::Yes,
                    "@SKS352");
            }
            else
            {
                diagBut = DialogButton::No;
            }

            ttsbegin;
            // Yes - deletes existing settlements, then does the reload of open transactions
            // No - leaves existing settlements and loads open transactions only if they are not existing for this payment
            // Cancel - do nothing
            switch (diagBut)
            {
                case DialogButton::Yes:
                    //  FileRecord is the record number in the original physical import file
                    // A value of "-1" is put in the SKS_LB_JournalAR record if that record represents multiple lines in the physical import file. In
                    // that case, the settlement records have the pointers to the actual record number within the physcial file. In that case, we need
                    // ot put something back in the FileRecord SKS_LB_JournalAR record if we are now going to delete all the settlement record, so just put the lowest
                    // record number from the settlements there
                    if (mainfileAr.FileRecord == -1)
                    {
                        select minof(FileRecord) from localARApplic where localARApplic.SKS_LB_JournalARRecId == mainfileAR.RecId;
                        mainfileAR.FileRecord = localARApplic.FileRecord;
                    }
                    // Remove any settlement records,  then also go thru "No" logic to reload the open trans
                    delete_from localARApplic where localARApplic.SKS_LB_JournalARRecId == mainfileAR.RecId;
                    mainfileAR.ActualSettleAmountCur = 0;
                    mainfileAR.DiscApplyAmt = 0;
                    mainFileAR.Invoice = '';

                case DialogButton::No:

                    //Copy mainfileAR.FileRecord value
                    l_fileRecordId = mainfileAR.FileRecord;

                    tmpImport = new SKS_LB_Process_IMPORTTEMP_Records();
                    container lSharedServiceCompanies = SKS_LB_54000Bas::LBFindSharedServiceCompanies(SKS_LB_Bank::find(bSKS_LB_Journal.BankAcct, bSKS_LB_Journal.FormatID));
                    SKS_LB_Process_IMPORTTEMP_Records::CreateNoSettlementApplicRecords(mainfileAr.RecId, mainfileAr.FileRecord, mainfileAr.LBInvoice, mainfileAR.CustAccount, mainfileAr.CustomerCompany, lSharedServiceCompanies);

                    // Reset SKS_LB_JournalAR fields
                    mainfileAR.FileRecord = l_fileRecordId;
                    mainfileAR.CustTransOpenRecId = 0;
                    mainfileAR.CustTransRecId = 0;
                    mainfileAR.write();
                    FormDataUtil::getFormDataSource(mainfileAR).reread();
                    FormDataUtil::getFormDataSource(mainfileAR).refresh();
                    SKS_LB_JournalARApplic_ds.research(true);
                    break;

                case DialogButton::Cancel:
                    break;
            }
            ttscommit;
            mainfileAR.write();
            element.PopulateTotals();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>btnImport</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            Filename                filename;
            str                     saveFileName = '';
            SKS_LB_Depositor localDepositor;
            SKS_LB_Importing    db_importing;
            boolean             reattemptPriorImport, importReady;          

            Select firstonly db_importing where db_importing.ExternalJournalARRecord == mainFileAR.RecId;
            if(db_importing)
            {
                if(Box::okCancel("@SKS:SKSReattemptExtSettle", DialogButton::Cancel) == DialogButton::Ok)
                {
                    reattemptPriorImport = true;
                    importReady = true;
                }
                else
                {
                    delete_from db_importing where db_importing.ExternalJournalARRecord == mainFileAR.RecId; 
                }
            }

            if(!importReady)
            {
                SKS_EB_BankIntegOptWithNoLicense bankIntOption = SKS_EB_FileStorage::find().StorageOption_LB;
                SKS_BF_BankIntType SKS_BF_BankIntType = SKS_BF_BankIntType::FileHubLocal;

                if(bankIntOption == SKS_EB_BankIntegOptWithNoLicense::BankFabricEnumValue)
                {
                    SKS_BF_BankIntType = SKS_BF_BankIntType::BankFabric;
                }

                SKS_EB_FileHub fileHub = SKS_EB_FileHub::construct(SKS_BF_BankIntType);

                super();

                select firstonly LBExternalPath
                    from localDepositor
                    where localDepositor.AccountNum == mainFileAR.CustAccount
                        &&  localDepositor.CustomerCompany == mainFileAR.CustomerCompany;

                SKS_FileUploadDialogForm fileUploadDialog = new SKS_FileUploadDialogForm();
                fileUploadDialog.parmFileDialogCaptionForForm("@SKS900");
                fileUploadDialog.parmFileTypesAccepted('');
                fileUploadDialog.parmStrategyClassName(classstr(FileUploadTemporaryStorageStrategy));
                FileUploadTemporaryStorageResult fileUploadResult = fileUploadDialog.getFileUploadResult();
                fileUploadDialog.finalize();

                if (fileUploadResult != null && fileUploadResult.getUploadStatus())
                {
                    if (!fileHub.runDirectoryExists(localDepositor.LBExternalPath))
                    {
                        error(strfmt("@SYS55831", localDepositor.LBExternalPath));
                        return;
                    }

                    // Get file from temp storage
                    filename = fileUploadResult.getDownloadUrl();
                    System.IO.Stream readStream = fileUploadResult.openResult();
                    System.IO.StreamReader reader = new System.IO.StreamReader(readStream);
                    str text = reader.ReadToEnd();
                
                    if(SKS_BF_BankIntType == SKS_BF_BankIntType::BankFabric)
                    {
                        SKS_EB_FilePath bankFabricExtLoc = '';
                                        
                        SKS_LB_Depositor sks_lb_depositor = SKS_LB_Depositor::find(mainFileAR.CustomerCompany, mainFileAR.CustAccount);
                        if(SKS_LB_Depositor)
                        {
                            bankFabricExtLoc = sks_lb_depositor.LBBankFabricExtLocation;
                        }
                        else
                        {
                            bankFabricExtLoc = SKS_PP_Setup::find().LBBankFabricExtLocation;
                        }
                                        
                        saveFileName =  System.IO.Path::Combine(bankFabricExtLoc,fileUploadResult.getFileName());
                    
                        fileHub.runAppendLine(text);
                    }
                    else
                    {
                        saveFileName = System.IO.Path::Combine(localDepositor.LBExternalPath, fileUploadResult.getFileName());
                    }
                                   
                    fileHub.runFileCreate(saveFileName,text);
                    info(strFmt("@SKS:SKGFileSave", saveFileName));
                
                    if(!element.FileFormatFieldValidation())
                    {
                        return;
                    }

                    importReady = true;
                }
            }// !importReady

            if(importReady)
            {
                boolean AllowUnequalAmts = true;
                if (Box::okCancel("@SKS:SKSLBContinueIfAmountMismatch", DialogButton::Cancel) != DialogButton::Ok)
                {
                    AllowUnequalAmts = false;
                }

                container ExternalParms;
                ExternalParms += saveFileName;//file name
                ExternalParms += mainFileAR;//SKS_LB_JournalAR
                ExternalParms += bSKS_LB_Journal;//SKS_LB_journal
                ExternalParms += localPP_Setup;//SKS_PP_Setup
                ExternalParms += validateCheckNum;//validatechecknumber
                ExternalParms += AllowUnequalAmts;//AllowUnequalAmts
                ExternalParms += false;//analyzeremit
                ExternalParms += false;//SKS_BR_NoteMemo
                ExternalParms += reattemptPriorImport;//Reimport

                try
                {
                    SysOperationSandbox::callStaticMethod(classNum(SKS_LB_ExternalSettlementProcess),
                        staticMethodStr(SKS_LB_ExternalSettlementProcess, ExternalSettlementProcess), ExternalParms,
                        'Importing external settlement file', 'External Settlement import completed','Operation Cancelled');
                }
                catch(Exception::Error)
                {
                    warning('Import failed');
                }

                SKS_LB_JournalARApplic_ds.research(true);
                mainFileAR.reread();//Reread as the value was most likely altered within the externalsettlementprocess method
                AppliedAmt.realValue(mainFileAR.ActualSettleAmountCur);
                UnappliedAmt.realvalue(mainfileAR.pmtamountcur - mainfileAR.actualsettleamountcur);
                element.refreshWorkbenchForm();
                element.PopulateTotals();
                element.refreshWorkbenchErrorGrid();

                FormDataUtil::getFormDataSource(mainfileAR).reread();
                FormDataUtil::getFormDataSource(mainfileAR).refresh();
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>LockBoxButton</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            Args args = new Args();
            FormRun formRun;
            SKS_LB_FileRecordParms filerecordparms = new SKS_LB_FileRecordParms();

            filerecordparms.FileFormatId(mainFileAR.FormatID);
            filerecordparms.FileName(mainFileAR.Filename);
            filerecordparms.FileRecord(SKS_LB_JournalARApplic.FileRecord);

            // Run Lockbox File Record screen.
            args.name(formstr(SKS_LB_FileRecord) );

            filerecordparms.FileParentRecord(mainFileAR.ParentRecid);
            filerecordparms.FileRecord(SKS_LB_JournalARApplic.FileRecord);

            args.parmObject(filerecordparms);

            formRun = classFactory.formRunClass(Args);
            formRun.init();
            formRun.run();
            formRun.wait(true); // Modal

            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SKS_LB_WriteOffTmpSettlements</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        ///Opens the write off sub-form
        /// </summary>
        public void clicked()
        {
            CustParameters  CustParameters;
            select firstonly AutoSettle from CustParameters;
            if(CustParameters.AutoSettle)
            {
                Info("@SKS:SKSNoWriteOffs");
                return;
            }

            if(!SKS_LB_JournalARApplic)
            {
                Args args = new Args();
                MenuFunction menuFunction = new MenuFunction(menuitemDisplayStr(SKS_LB_WriteOffTmpSettlements), MenuItemType::Display);
                args.parm(int642Str(mainFileAR.RecId));
                args.caller(element);
                menuFunction.run(args);
            }
            else
            {
                super();
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Notes</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            Args args;
            Formrun formRun;
            ;

            args = new Args();

            args.record(MainfileAR);

            args.name(formstr(SKS_LB_Notes));
            args.caller(this);
            formRun = classFactory.formRunClass( Args );

            formRun.run();
            formRun.wait(false);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SKS_LB_RemitAnalyze</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            Formrun formRun;
            SKS_LB_MatchingRules    SKS_LB_MatchingRules;
            SKS_LB_Bank             SKS_LB_Bank;
            SKS_BR_NoteMemo         RemitData;

            select firstonly * from SKS_LB_MatchingRules
                join sks_lb_bank where sks_lb_matchingRules.groupId == sks_lb_bank.matchingRulesGroupId
                    && sks_lb_bank.LBformatid == bSKS_LB_Journal.formatId
                    && sks_lb_bank.bankaccountId == bSKS_LB_Journal.bankAcct
                    && sks_lb_matchingRules.lookupType == sks_lb_matchType::UnstrData;

            if(SKS_LB_MatchingRules)
            {
                Args args = new Args();
                args.record(bSKS_LB_Journal);
                args.caller(Element);
                args.parm(mainFileAR.PaymNote);
                args.name(formstr(SKS_LB_RemitAnalyze) );
                formRun = classFactory.formRunClass( Args );
                formRun.run();
                formRun.wait(true);
                RemitData = args.parm();
                container ExternalParms;
                if(remitData != '')
                {
                    ExternalParms += '';
                    ExternalParms += mainFileAR;
                    ExternalParms += bSKS_LB_Journal;
                    ExternalParms += localPP_Setup;
                    ExternalParms += false;
                    ExternalParms += true;
                    ExternalParms += true;
                    ExternalParms += RemitData;
                    ttsbegin;
                    SysOperationSandbox::callStaticMethod(classNum(SKS_LB_ExternalSettlementProcess),
                    staticMethodStr(SKS_LB_ExternalSettlementProcess, ExternalSettlementProcess), ExternalParms,
                    'Importing external settlement file', 'External Settlement import completed','Operation Cancelled');
                    ttscommit;

                    SKS_LB_JournalARApplic_ds.research(true);
                    mainFileAR.reread();//Reread as the value was most likely altered within the externalsettlementprocess method
                    AppliedAmt.realValue(mainFileAR.ActualSettleAmountCur);
                    UnappliedAmt.realvalue(mainfileAR.pmtamountcur - mainfileAR.actualsettleamountcur);
                    element.refreshWorkbenchForm();
                    element.PopulateTotals();
                    element.refreshWorkbenchErrorGrid();

                    FormDataUtil::getFormDataSource(mainfileAR).reread();
                    FormDataUtil::getFormDataSource(mainfileAR).refresh();
                }
            }
            else
            {
                select firstonly * from SKS_LB_MatchingRules
                join sks_lb_bank where sks_lb_matchingRules.groupId == sks_lb_bank.matchingRulesGroupId
                    && sks_lb_bank.LBformatid == bSKS_LB_Journal.formatId
                    && sks_lb_bank.bankaccountId == bSKS_LB_Journal.bankAcct;
                error(strfmt("@SKS:SKGNoRemitRule", sks_lb_matchingRules.groupID));
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>OldestDueDate</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        ///Applies settlement amount to invoices by oldest due date
        /// </summary>
        public void clicked()
        {
            SKS_LB_Process_IMPORTTEMP_Records ProcessImportTemp = new SKS_LB_Process_IMPORTTEMP_Records();
            ProcessImportTemp.getsetTmpJournalAR(mainFileAR);
            super();
            if(element.DifferenceTotal() > 0)
            {
                ProcessImportTemp.GetSetApplyAmtRem(mainFileAR.PmtAmountCur);
                ProcessImportTemp.OldestDueDate_NoSettlement(mainFileAR.RecId, true,
                    bSKS_LB_Journal.CurrencyCode, bSKS_LB_Journal.ExchRate, bSKS_LB_Journal.JournalID,
                    mainFileAR.CustAccount, 0, 0, mainFileAR.PaymDate,
                    mainFileAR.ChkRefNbr, null,
                    SKS_LB_Bank::find(mainFileAR.BankAcct, mainFileAR.FormatID), false, true);

                element.PopulateTotals();
                SKS_LB_JournalARApplic_ds.reread();
                SKS_LB_JournalARApplic_ds.research(true);
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>CustomerAcct</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>jumpRef</Name>
						<Source><![CDATA[
        /// <summary>
        ///Supports view details on the customer account field
        /// </summary>
        public void jumpRef()
        {
            Application     app = new Application();

            super();

            app.setDefaultCompany(mainFileAR.CustomerCompany);

            changeCompany(mainFileAR.CustomerCompany)
            {                
                CustTable custTable = CustTable::find(mainFileAR.CustAccount);

                FormRun  formRun;
                // suppress infolog
                SysInfologLevel sysInfologLevel;
                
                sysInfologLevel = infolog.infologLevel();
                infolog.setInfoLogLevel(SysInfologLevel::None);
                
                Args args = new args(formstr(CustTable));
                args.record(custTable);

                formRun = classFactory.formRunClass(args);

                formRun.init();
                formRun.run();
                formRun.detach();

                // enable infolog
                infolog.setInfoLogLevel(sysInfologLevel);
               
                // refresh form
                formRun.dataSource().research();
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>SKS_LB_JournalARApplic</Name>
			<Table>SKS_LB_JournalARApplic</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AltInvLookupRef</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AltInvLookupType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ApplyDiscount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AutoCRAutoRev</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AutoCROffsetLedgerDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AutoRevLedgerDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AutoRevOffsetLedgerDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustTransDataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustTransOpenRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustTransRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DiscApplyAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FileRecord</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FullSettlement</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LBInvoice</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RevReasonCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SettleAmountCur</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SKS_LB_JournalARRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TrackingInvoices</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>WriteOff</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>WriteOffId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<CrossCompanyAutoQuery>Yes</CrossCompanyAutoQuery>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>CustTransOpen</Name>
			<Table>CustTransOpen</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AccountNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AmountCur</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AmountMST</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankDiscNoticeDeadline</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankLCExportLine</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CashDiscDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CashDiscountLedgerDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CollectionLetter</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CollectionLetterCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DueDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExchAdjUnrealized</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExchAdjUnrealizedReporting</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FineAmountPaymCur_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FineAmount_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FineCode_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InterestAmountPaymCur_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InterestAmount_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InterestCode_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LastInterestDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PossibleCashDisc</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RefRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReportingCurrencyAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SettledLinePercent_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SettledTotalAmount_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SettlementPriorityCashDiscDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SKS_EPY_SentToePay</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxWithholdAmountOrigin_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TCSAmount_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TDSAmount_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>UseCashDisc</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<CrossCompanyAutoQuery>Yes</CrossCompanyAutoQuery>
			<JoinSource>SKS_LB_JournalARApplic</JoinSource>
			<LinkType>OuterJoin</LinkType>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>CustTrans</Name>
			<Table>CustTrans</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AccountingEvent</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AccountNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AmountCur</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AmountMST</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Approved</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Approver</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankCentralBankPurposeCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankCentralBankPurposeText</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankLCExportLine</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankRemittanceFileId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BillOfExchangeID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BillOfExchangeSeqNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BillOfExchangeStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CancelledPayment</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CashDiscCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CashPayment</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Closed</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CollectionLetter</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CollectionLetterCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CompanyBankAccountId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ControlNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Correct</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdTransactionId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CurrencyCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustBillingClassification</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustExchAdjustmentRealized</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustExchAdjustmentUnrealized</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DeliveryMode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DirectDebitMandate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DocumentDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DocumentNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DueDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EUROTriangulation</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExchAdjustment</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExchAdjustmentReporting</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExchRate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExchRateSecond</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FixedExchRate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Interest</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Invoice</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InvoiceProject</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LastExchAdj</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LastExchAdjRate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LastExchAdjRateReporting</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LastExchAdjVoucher</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LastSettleAccountNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LastSettleCompany</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LastSettleDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LastSettleVoucher</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MCRPaymOrderID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedTransactionId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OffsetRecid</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OrderAccount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PackedExtensions</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymMethod</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymMode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymReference</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymSchedId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymSpec</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PostingProfile</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PostingProfileClose</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Prepayment</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReasonRefRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReportingCurrencyAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReportingCurrencyCrossRate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReportingExchAdjustmentRealized</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReportingExchAdjustmentUnrealized</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RetailCustTrans</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RetailStoreId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RetailTerminalId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RetailTransactionId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SettleAmountCur</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SettleAmountMST</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SettleAmountReporting</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Settlement</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxInvoiceSalesId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ThirdPartyBankAccountId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Txt</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Voucher</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<CrossCompanyAutoQuery>Yes</CrossCompanyAutoQuery>
			<JoinSource>SKS_LB_JournalARApplic</JoinSource>
			<LinkType>OuterJoin</LinkType>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@SYS4946</Caption>
		<DataSource xmlns="">SKS_LB_JournalARApplic</DataSource>
		<HeightMode xmlns="">Column</HeightMode>
		<Pattern xmlns="">Task</Pattern>
		<PatternVersion xmlns="">1.2</PatternVersion>
		<WidthMode xmlns="">Column</WidthMode>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>ActionPane</Name>
				<ElementPosition>1073741822</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<HeightMode>Auto</HeightMode>
				<Type>ActionPane</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>ButtonGroup</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1431655764</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>ButtonGroup</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>btnLoadOpenTrans</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>858993458</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<HelpText>@SKS899</HelpText>
								<Type>Button</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Text>@SKS898</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>btnImport</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1288490187</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<HelpText>@SKS901</HelpText>
								<Type>Button</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Text>@SKS900</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>LockBoxButton</Name>
								<AllowEdit>No</AllowEdit>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1717986916</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<HelpText>@SKS716</HelpText>
								<Type>Button</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Text>@SKS445</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>SKS_LB_WriteOffTmpSettlements</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1879048189</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>MenuFunctionButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<MenuItemName>SKS_LB_WriteOffTmpSettlements</MenuItemName>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>SKS_LB_SettlementRevOffsetDimension</Name>
								<ElementPosition>2040109463</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>MenuFunctionButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<MenuItemName>SKS_LB_SettlementRevOffsetDimension</MenuItemName>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>Notes</Name>
								<Type>Button</Type>
								<FormControlExtension
									i:nil="true" />
								<Text>@Payroll:Notes</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>SKS_LB_RemitAnalyze</Name>
								<Type>MenuFunctionButton</Type>
								<FormControlExtension
									i:nil="true" />
								<MenuItemName>SKS_LB_RemitAnalyze</MenuItemName>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>SKS_LB_Log</Name>
								<Type>MenuFunctionButton</Type>
								<FormControlExtension
									i:nil="true" />
								<DataSource>SKS_LB_JournalARApplic</DataSource>
								<MenuItemName>SKS_LB_Log</MenuItemName>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>OldestDueDate</Name>
								<Type>Button</Type>
								<FormControlExtension
									i:nil="true" />
								<Text>@SKS:SKGSettleOldestDue</Text>
							</AxFormControl>
						</Controls>
						<ArrangeMethod>Vertical</ArrangeMethod>
					</AxFormControl>
				</Controls>
				<AlignChild>No</AlignChild>
				<AlignChildren>No</AlignChildren>
				<ArrangeMethod>Vertical</ArrangeMethod>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>Group_</Name>
				<ElementPosition>715827882</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Pattern>CustomFilters</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>CustomerAcct</Name>
						<AllowEdit>No</AllowEdit>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>858993458</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<ExtendedDataType>CustAccount</ExtendedDataType>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>RefNbr</Name>
						<AllowEdit>No</AllowEdit>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1288490187</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<ExtendedDataType>BankChequeNum</ExtendedDataType>
						<Label>@SYS22514</Label>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>CustomerName</Name>
						<AllowEdit>No</AllowEdit>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1717986916</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<ExtendedDataType>CustName</ExtendedDataType>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormRealControl">
						<Name>PaymentAmt</Name>
						<AllowEdit>No</AllowEdit>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>858993458</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Real</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<ExtendedDataType>AmountCur</ExtendedDataType>
						<Label>@SYS1943</Label>
						<NoOfDecimals>-1</NoOfDecimals>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormRealControl">
						<Name>AppliedAmt</Name>
						<AllowEdit>No</AllowEdit>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1360072974</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Real</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<CacheDataMethod>Yes</CacheDataMethod>
						<Label>@SKS3494</Label>
						<NoOfDecimals>-1</NoOfDecimals>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormRealControl">
						<Name>WriteOffSum</Name>
						<AllowEdit>No</AllowEdit>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1485342853</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Real</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<CacheDataMethod>Yes</CacheDataMethod>
						<Label>@SKS3564</Label>
						<NoOfDecimals>-1</NoOfDecimals>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormRealControl">
						<Name>UnappliedAmt</Name>
						<AllowEdit>No</AllowEdit>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1610612732</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Real</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<CacheDataMethod>Yes</CacheDataMethod>
						<Label>@SYS40887</Label>
						<NoOfDecimals>-1</NoOfDecimals>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormIntegerControl">
						<Name>SettlementCount</Name>
						<AllowEdit>No</AllowEdit>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1783604471</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Integer</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<CacheDataMethod>Yes</CacheDataMethod>
						<Label>@SKS3492</Label>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormRealControl">
						<Name>AutoRevTotal</Name>
						<AllowEdit>No</AllowEdit>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1956596210</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Real</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<CacheDataMethod>Yes</CacheDataMethod>
						<Label>@SKS3521</Label>
						<NoOfDecimals>-1</NoOfDecimals>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormIntegerControl">
						<Name>AutoRevCount</Name>
						<AllowEdit>No</AllowEdit>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>2052039928</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Integer</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<CacheDataMethod>Yes</CacheDataMethod>
						<Label>@SKS3522</Label>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>PaymNote</Name>
						<AllowEdit>No</AllowEdit>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<ExtendedDataType>PaymNote</ExtendedDataType>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalLeft</ArrangeMethod>
				<FrameType>None</FrameType>
				<Style>CustomFilter</Style>
				<ViewEditMode>Edit</ViewEditMode>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormTabControl">
				<Name>InvoicesTab</Name>
				<AlignControl>No</AlignControl>
				<ElementPosition>1610612733</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Type>Tab</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>GoodOverview</Name>
						<ElementPosition>1073741822</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Pattern>ToolbarList</Pattern>
						<PatternVersion>1.2</PatternVersion>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>CustomFilterGroup</Name>
								<Pattern>CustomFilters</Pattern>
								<PatternVersion>1.1</PatternVersion>
								<Type>Group</Type>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl>
										<Name>QuickFilterControl</Name>
										<FormControlExtension>
											<Name>QuickFilterControl</Name>
											<ExtensionComponents />
											<ExtensionProperties>
												<AxFormControlExtensionProperty>
													<Name>targetControlName</Name>
													<Type>String</Type>
													<Value>Grid</Value>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>defaultColumnName</Name>
													<Type>String</Type>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>placeholderText</Name>
													<Type>String</Type>
												</AxFormControlExtensionProperty>
											</ExtensionProperties>
										</FormControlExtension>
									</AxFormControl>
								</Controls>
								<ArrangeMethod>HorizontalLeft</ArrangeMethod>
								<FrameType>None</FrameType>
								<Style>CustomFilter</Style>
								<ViewEditMode>Edit</ViewEditMode>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGridControl">
								<Name>Grid</Name>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Grid</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>SKS_LB_JournalARApplic_FullSettlement</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>159072862</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>CheckBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<BackgroundColor>WindowBackground</BackgroundColor>
										<DataField>FullSettlement</DataField>
										<DataSource>SKS_LB_JournalARApplic</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>SKS_LB_JournalARApplic_ApplyDiscount</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>238609293</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>CheckBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<BackgroundColor>WindowBackground</BackgroundColor>
										<DataField>ApplyDiscount</DataField>
										<DataSource>SKS_LB_JournalARApplic</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Voucher</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>286331152</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>Voucher</DataField>
										<DataSource>CustTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>AltInvLookupType</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>429496728</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>AltInvLookupType</DataField>
										<DataSource>SKS_LB_JournalARApplic</DataSource>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>AltInvLookupRef</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>572662304</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>AltInvLookupRef</DataField>
										<DataSource>SKS_LB_JournalARApplic</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Invoice</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>715827880</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>Invoice</DataField>
										<DataSource>CustTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>DisplayInvoiceAmtPmtCur</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>779457024</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>SizeToAvailable</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<CacheDataMethod>Yes</CacheDataMethod>
										<DataMethod>DisplayInvoiceAmtPmtCur</DataMethod>
										<DataSource>SKS_LB_JournalARApplic</DataSource>
										<Label>@SKS3512</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>SettlementAvailable</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>851039812</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<CacheDataMethod>Yes</CacheDataMethod>
										<DataMethod>DisplayCalcAvailSettlement</DataMethod>
										<DataSource>SKS_LB_JournalARApplic</DataSource>
										<Label>@SKS3491</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>DiscountAmtAvail</Name>
										<ElementPosition>922622600</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<CacheDataMethod>Yes</CacheDataMethod>
										<DataMethod>DisplayDiscountAvailableAmount</DataMethod>
										<DataSource>SKS_LB_JournalARApplic</DataSource>
										<Label>@SKS3490</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormImageControl">
										<Name>DisplayFullSettlement</Name>
										<AlignControl>No</AlignControl>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>994205388</ElementPosition>
										<Enabled>No</Enabled>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Skip>Yes</Skip>
										<Type>Image</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>DisplayFullSettlement</DataMethod>
										<DataSource>SKS_LB_JournalARApplic</DataSource>
										<Imagemode>SizeToFit</Imagemode>
										<Label>@SYS21685</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>SettleAmountCur</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1081695462</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>SettleAmountCur</DataField>
										<DataSource>SKS_LB_JournalARApplic</DataSource>
										<Label>@SKS3513</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>DiscApplyAmount</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1256675610</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>DiscApplyAmount</DataField>
										<DataSource>SKS_LB_JournalARApplic</DataSource>
										<Label>@SYS10946</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>CompanyID</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1431655760</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>CustTransDataAreaId</DataField>
										<DataSource>SKS_LB_JournalARApplic</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Currency</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1574821336</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>CurrencyCode</DataField>
										<DataSource>CustTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>TransDate</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1717986912</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Date</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>TransDate</DataField>
										<DataSource>CustTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>DueDate</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1861152488</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Date</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>DueDate</DataField>
										<DataSource>CustTransOpen</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>SKS_LB_JournalARApplic_AutoCR</Name>
										<ElementPosition>2004318064</ElementPosition>
										<Enabled>No</Enabled>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>CheckBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<BackgroundColor>WindowBackground</BackgroundColor>
										<DataField>WriteOff</DataField>
										<DataSource>SKS_LB_JournalARApplic</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>SKS_LB_JournalARApplic_AutoCRAutoRev</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>2040109459</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>CheckBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<BackgroundColor>WindowBackground</BackgroundColor>
										<DataField>AutoCRAutoRev</DataField>
										<DataSource>SKS_LB_JournalARApplic</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>SKS_LB_JournalARApplic_RevReasonCode</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>2075900854</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>RevReasonCode</DataField>
										<DataSource>SKS_LB_JournalARApplic</DataSource>
									</AxFormControl>
								</Controls>
								<AlternateRowShading>No</AlternateRowShading>
								<DataSource>SKS_LB_JournalARApplic</DataSource>
								<MultiSelect>No</MultiSelect>
								<ShowRowLabels>No</ShowRowLabels>
							</AxFormControl>
						</Controls>
						<Caption>@SYS34991</Caption>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>TabPage_Invoice</Name>
						<ElementPosition>1610612733</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Pattern>FieldsFieldGroups</Pattern>
						<PatternVersion>1.1</PatternVersion>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>PaymentCurrency</Name>
								<ElementPosition>1073741822</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>PmtGrid_LB_Journal_CurrencyCode</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>613566756</ElementPosition>
										<Enabled>No</Enabled>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<Label>@SYS66023</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>displayAmountAvailPaymCur</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>920350134</ElementPosition>
										<Enabled>No</Enabled>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>displayAmountAvailPaymCur</DataMethod>
										<DataSource>CustTransOpen</DataSource>
										<Label>@SYS114325</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>InvoiceSKS_LB_JournalARApplic_SettlementAmountCur</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1227133512</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>SettleAmountCur</DataField>
										<DataSource>SKS_LB_JournalARApplic</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>PaymentSKS_LB_JournalARApplic_DiscApplyAmount</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1533916890</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>DiscApplyAmount</DataField>
										<DataSource>SKS_LB_JournalARApplic</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>RemainAmountPmtCur</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1840700268</ElementPosition>
										<Enabled>No</Enabled>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<Label>@SYS78228</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
								</Controls>
								<Caption>@SYS66023</Caption>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>InvoiceCurrency</Name>
								<ElementPosition>1610612733</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>InvoiceCustTrans_CurrencyCode</Name>
										<ElementPosition>613566756</ElementPosition>
										<Enabled>No</Enabled>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>CurrencyCode</DataField>
										<DataSource>CustTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>InvoiceCustTransOpen_AmountCur</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>920350134</ElementPosition>
										<Enabled>No</Enabled>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>AmountCur</DataField>
										<DataSource>CustTransOpen</DataSource>
										<Label>@SYS114325</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>editSettleAmountInvCur</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1227133512</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>editSettleAmountInvCur</DataMethod>
										<DataSource>CustTransOpen</DataSource>
										<Label>@SYS114018</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>editDiscountInvCur</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1533916890</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>editDiscountInvCur</DataMethod>
										<DataSource>CustTransOpen</DataSource>
										<Label>@SYS11829</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>RemainAmountInvCur</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1840700268</ElementPosition>
										<Enabled>No</Enabled>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<Label>@SYS78228</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
								</Controls>
								<Caption>@SYS66021</Caption>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>CustTrans_InvoiceCompany</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>715827882</ElementPosition>
								<Enabled>No</Enabled>
								<FilterExpression>%1</FilterExpression>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataField>dataAreaId</DataField>
								<DataSource>CustTrans</DataSource>
								<Label>@SYS342276</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>CustTrans_Invoice</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1073741823</ElementPosition>
								<Enabled>No</Enabled>
								<FilterExpression>%1</FilterExpression>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataField>Invoice</DataField>
								<DataSource>CustTrans</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormDateControl">
								<Name>CustTransOpen_DueDate</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1431655764</ElementPosition>
								<Enabled>No</Enabled>
								<FilterExpression>%1</FilterExpression>
								<Type>Date</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataField>DueDate</DataField>
								<DataSource>CustTransOpen</DataSource>
							</AxFormControl>
						</Controls>
						<ColumnsMode>Fill</ColumnsMode>
						<Caption>@SYS14204</Caption>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
				</Controls>
				<AlignChild>No</AlignChild>
				<ArrangeMethod>Vertical</ArrangeMethod>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>