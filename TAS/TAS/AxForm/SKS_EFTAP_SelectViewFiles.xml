<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>SKS_EFTAP_SelectViewFiles</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class SKS_EFTAP_SelectViewFiles extends FormRun
{
    Str             SelectedPayMode;
    BankAccountId   SelectedAccount;
    boolean         multiSelectFlag;
    int             countSelected;
    SKS_EFT_FileNbr LastEFTFileNumber;
    Container       companies;
    SKS_EFTAP_File  gSKS_EFTAP_File;
    Object          gParentForm;
    SKS_EFT_FileFormatPaymSpec gSKS_EFT_FileFormatPaymSpec;
    QueryBuildDataSource    qbdFileFormats;// SKS_FDD_10590
    QueryBuildRange         qbrRageSupportsMultiComp;// SKS_FDD_10590

    str                     initialCompanyValue; //SKS_Bug_11897

}
]]></Source>
			</Method>
			<Method>
				<Name>canClose</Name>
				<Source><![CDATA[
    public boolean canClose()
    {
        SKS_EFT_FilePmtSelection lSKS_EFT_FilePmtSelection;
        boolean ret = true;

        select crosscompany count (PrimaryFormat) from lSKS_EFT_FilePmtSelection where lSKS_EFT_FilePmtSelection.FileRecId == gSKS_EFTAP_File.RecId;//SKS_FDD_10590

        if(lSKS_EFT_FilePmtSelection.PrimaryFormat > 0)
        {
            select crosscompany count (PrimaryFormat) from lSKS_EFT_FilePmtSelection where lSKS_EFT_FilePmtSelection.FileRecId == gSKS_EFTAP_File.Recid &&
                                                                              lSKS_EFT_FilePmtSelection.PrimaryFormat == NoYes::Yes; //FDD-10590
            if(lSKS_EFT_FilePmtSelection.PrimaryFormat == 0)
            {
                warning("@SKS2751");
                ret = false;
            }
        }

        if(ret)
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>close</Name>
				<Source><![CDATA[
    public void close()
    {
        SKS_EFTAP_File chklSKS_EFTAP_File;
        SKS_EFT_FilePmtSelection tsks_eft_filepmtselection;
        ;

        super();
        element.switchToInitialLegalEntity(initialCompanyValue); //SKS_Bug_11897
        Select firstonly selected from chklSKS_EFTAP_File where
          chklSKS_EFTAP_File.selected == True &&
          chklSKS_EFTAP_File.EFTFileType == gSKS_EFTAP_file.EFTFileType;

        If (countselected > 0 && gSKS_EFTAP_File.FileStatus != SKS_EFT_FileStatus::Completed &&  gSKS_EFTAP_file.FileStatus != SKS_EFT_FileStatus::CompletedNoEmail)
        {
            If(element.args().caller().validate_paths_filename(false))
            {
                if(gSKS_EFTAP_File.FXAProcessing == NoYes::Yes && gSKS_EFTAP_File.FileStatus != SKS_EFT_FileStatus::FXAllSettlementCenterComplete)
                {
                    gSKS_EFTAP_File.Selected = False;
                }
                else if(chklSKS_EFTAP_File.Selected != True)
                {
                    gSKS_EFTAP_File.Selected = True;
                }

                select firstOnly crosscompany  advemail from tsks_eft_filepmtselection where tsks_eft_filepmtselection.FileRecId == gSKS_EFTAP_file.RecId; //FDD11060 Nextaction
                if(tsks_eft_filepmtselection.AdvEmail == NoYes::Yes)
                {
                    gSKS_EFTAP_File.AdvEmail = NoYes::Yes;
                }

                element.args().caller().UpdateSelectCheckBox();
            }
        }
        else
        {
            element.args().caller().clearSelected();
        }

        element.args().caller().SubFormStatus(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSKS_EFT_FilePmtSelection</Name>
				<Source><![CDATA[
    public SKS_EFT_FilePmtSelection getSKS_EFT_FilePmtSelection()
    {
        return SKS_EFT_FilePmtSelection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSKS_EFT_Module</Name>
				<Source><![CDATA[
    public SKS_EFT_Module getSKS_EFT_Module()
    {
        return element.args().caller().getSKS_EFT_Module();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSKS_EFTAP_File</Name>
				<Source><![CDATA[
    public SKS_EFTAP_File getSKS_EFTAP_File()
    {
        return gSKS_EFTAP_File;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        ;
        super();
        initialCompanyValue = curExt();//SKS_Bug_11897
        if (element.args().record() && element.args().record().TableId == tablenum(SKS_EFTAP_File))
        {
            gSKS_EFTAP_File =  element.args().record();
            gParentForm = element.args().caller();
            element.args().caller().SubFormStatus(true);

            if(element.args().caller().getSKS_EFT_Module() == SKS_EFT_Module::AR)
            {
                this.design().caption("@SKS4145");
                TransferType.visible(false);
                SKS_EFT_FilePmtSelection_FXAllProcessing.visible(false);
                SKS_EFT_FilePmtSelection_EffectiveDate.visible(false);
            }
            else if(element.args().caller().getSKS_EFT_Module() == SKS_EFT_Module::BTB)
            {
                this.design().caption("@SKS:SelecetViewBankTransfer_Caption");
                ShowPaymentsAlreadyEFT.label("@SKS:ShowPaymentsAlreadyEFT_Label");
                SelectCount.label("@SKS:SelectCount_Label");
                SKS_EFT_ViewPaymentDetails.text("@SKS:SKS_EFT_ViewPaymentDetails_Label");
                SKS_EFT_FilePmtSelection_PaymMode.label("@SKS:SKS_EFT_FilePmtSelection_PaymMode_label");
                SKS_EFT_FilePmtSelection_FXAllProcessing.visible(false);
                SKS_EFT_FilePmtSelection_PaymSpec.label('Transfer specification');
                SKS_EFT_FilePmtSelection_PmtJournalNum.label("@SKS:SKS_EFT_FilePmtSelection_PmtJournalNum_Label");
                SKS_EFT_FilePmtSelection_PmtTotal.label("@SKS:SKS_EFT_FilePmtSelection_PmtTotal_Label");
                SKS_EFT_FilePmtSelection_PmtCount.label('Transfer detail count');
                TransferType.visible(true);
                SKS_EFT_FilePmtSelection_EffectiveDate.visible(false);

            }
            else if(element.args().caller().getSKS_EFT_Module() == SKS_EFT_Module::CNP)
            {
                this.design().caption('Select/view customer reimbursements');
                SKS_EFT_FilePmtSelection_FXAllProcessing.visible(false);
                SelectCount.label("@SKS:SelectCount_Label");
                SKS_EFT_FilePmtSelection_PmtJournalNum.label("@SKS:SKS_EFT_FilePmtSelection_PmtJournalNum_Label");
                SKS_EFT_FilePmtSelection_PmtTotal.label("@SKS:SKS_EFT_FilePmtSelection_PmtTotal_Label");
                SKS_EFT_FilePmtSelection_PmtCount.label('Journal detail count');
                SKS_EFT_FilePmtSelection_EffectiveDate.visible(true);
            }
            else
            {
                TransferType.visible(false);
            }

            if(gSKS_EFTAP_File.FileStatus == sks_eft_filestatus::Completed || gSKS_EFTAP_File.FileStatus == sks_eft_filestatus::CompletedNoEmail )
            {
                selectallbtn.enabled(false);
                SKS_EFT_FilePmtSelection_EffectiveDate.enabled(false);
            }
            else
            {
                selectallbtn.enabled(true);
                SKS_EFT_FilePmtSelection_EffectiveDate.enabled(true);
            }

        }
        else
        {
            throw error("@SYS96590"); //Form cannot be called directly.
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>PrimaryExists</Name>
				<Source><![CDATA[
    public boolean PrimaryExists()
    {
        SKS_EFT_FilePmtSelection lSKS_EFT_FilePmtSelection;

        select crosscompany count (PrimaryFormat) from lSKS_EFT_FilePmtSelection where lSKS_EFT_FilePmtSelection.FileRecId == gSKS_EFTAP_File.Recid && //SKS_FDD_10590
                                                                          lSKS_EFT_FilePmtSelection.PrimaryFormat == NoYes::Yes;
        if(lSKS_EFT_FilePmtSelection.PrimaryFormat != 0)
        {
            return true;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>syncEFTAP</Name>
				<Source><![CDATA[
    Public boolean syncEFTAP(boolean _selected, SKS_EFT_FilePmtSelection lSKS_EFT_FilePmtSelection)
    {
        boolean backout=false;
        vendPaymModeTable vendPaymModeTableFormat;
        custPaymModeTable custPaymModeTableFormat;
        SKS_EFTAP_File backoutSKS_EFTAP_File;
        SKS_EFT_Bank mSKS_EFT_Bank;
        SKS_EFTAR_Bank mSKS_EFTAR_Bank;
        SKS_EFTBTB_Bank mSKS_EFTBTB_Bank;
        SKS_EFTCNP_Bank mSKS_EFTCNP_Bank;
        SKS_EFT_FileFormat locSKS_EFT_FileFormat;
        SKS_EFT_FileDetail  lSKS_EFT_FileDetail;
        SKS_BTB_PaymModeTable bankPaymodeTableFormat;
        ;

        if(gSKS_EFTAP_File.EFTFileType == SKS_EFT_Module::AP || gSKS_EFTAP_File.EFTFileType == SKS_EFT_Module::CNP)
        {
            locSKS_EFT_FileFormat = gParentForm.getSKS_EFT_FileFormat();
            if(!locSKS_EFT_FileFormat)
            {
                select firstonly APIFileFormatType, SupportsMultipleEffectiveDates, EffectiveDateMethod from locSKS_EFT_FileFormat where locSKS_EFT_FileFormat.FormatId == lSKS_EFT_FilePmtSelection.FormatId;
            }
        }
        else if(gSKS_EFTAP_File.EFTFileType == SKS_EFT_Module::BTB)
        {
            locSKS_EFT_FileFormat = gParentForm.getSKS_EFT_FileFormat();
            if(!locSKS_EFT_FileFormat)
            {
                select firstonly EffectiveDateMethod from locSKS_EFT_FileFormat where locSKS_EFT_FileFormat.FormatId == lSKS_EFT_FilePmtSelection.FormatId;
            }
        }

        If (_selected)
        {
            if(gSKS_EFTAP_File.EFTFileType == SKS_EFT_Module::AP)
            {
                mSKS_EFT_Bank = sks_eft_bank::findByCompany(sks_eft_filepmtselection.company(), sks_eft_filepmtselection.PmtBankAccountId,SKS_EFT_FilePmtSelection.PaymMode);//FDD-10590
                
                //BankFabric
                gSKS_EFTAP_File.CommID = mSKS_EFT_Bank.APCommID;
                //gSKS_EFTAP_File.FilePath = mSKS_EFT_Bank.APFilePath;
                //gSKS_EFTAP_File.FilePath = (gSKS_EFTAP_File.BFBankIntegration == SKS_BF_BankIntType::FileHubLocal) ? mSKS_EFT_Bank.APFilePath : mSKS_EFT_Bank.APBankFabricFileLocation;
                if (gSKS_EFTAP_File.BFBankIntegration == SKS_BF_BankIntType::BankFabric)
                {
                    gSKS_EFTAP_File.APIFormatType = locSKS_EFT_FileFormat.APIFileFormatType;
                    if(gSKS_EFTAP_File.APIFormatType == SKS_EFT_APIFormatType::File)
                    {
                        gSKS_EFTAP_File.FilePath = mSKS_EFT_Bank.APBankFabricFileLocation;
                        if (gSKS_EFTAP_File.FilePath == '')
                        {
                            Error("@SKS:SKGBFBlankFileLocation");
                            return false;
                        }
                        if (mSKS_EFT_Bank.apControlFileFormatId != '' && mSKS_EFT_Bank.APBankFabricFileNames != '')
                        {
                            gSKS_EFTAP_File.ControlFileFormatId = mSKS_EFT_Bank.APControlFileFormatiD;
                            gSKS_EFTAP_File.BankFabricFileNameName = mSKS_EFT_Bank.APBankFabricFileNames;
                        }
                    }
                }
                else
                {
                    gSKS_EFTAP_File.FilePath = mSKS_EFT_Bank.APFilePath;
                    if (gSKS_EFTAP_File.FilePath == '')
                    {
                        Error("@SKS:SKGFileHubFilePath");
                        return false;
                    }
                    gSKS_EFTAP_File.FileName = SKS_EFT_Common::getFileName(gSKS_EFTAP_File.FileNbr, mSKS_EFT_Bank.APFileName, SKS_EFT_Module::AP);

                    if(mSKS_EFT_Bank.apControlFileFormatId != '' && mSKS_EFT_Bank.APControlFileName != '')
                    {
                        gSKS_EFTAP_File.ControlFileFormatId = mSKS_EFT_Bank.APControlFileFormatiD;
                        gSKS_EFTAP_File.ControlFileName = SKS_EFT_Common::getFileName(gSKS_EFTAP_File.FileNbr, mSKS_EFT_Bank.APControlFileName, SKS_EFT_Module::AP);
                    }
                }

                select firstonly SKS_EFT_FormatId from vendPaymModeTableFormat where vendPaymModeTableFormat.PaymMode == SKS_EFT_FilePmtSelection.PaymMode;
                //SKS_FDD_10590 -->
                if(!vendPaymModeTableFormat.SKS_EFT_FormatId)
                {
                    // if the above selection is not returns, pick format from create and send company
                    select firstonly SKS_EFT_FormatId from vendPaymModeTableFormat where vendPaymModeTableFormat.SKS_EFT_FormatId == SKS_EFT_FilePmtSelection.FormatId;
                }
                //SKS_FDD_10590 <--
                if ( gSKS_EFTAP_File.RecId != SKS_EFT_FilePmtSelection.FileRecId && SKS_EFT_FilePmtSelection.FileRecId > 0)
                {
                    ttsbegin;
                    select firstonly forupdate crosscompany backoutSKS_EFTAP_File where backoutSKS_EFTAP_File.RecId == sks_eft_filePmtSelection.FileRecId;
                    backoutSKS_EFTAP_File.PmtCount -= 1;
                    backoutSKS_EFTAP_File.PmtTotal -= lSKS_EFT_FilePmtSelection.PmtTotal;
                    If (backoutSKS_EFTAP_File.pmtCount  <= 0)
                    {
                        backoutSKS_EFTAP_File.pmtCount = 0;
                        backoutSKS_EFTAP_File.PmtTotal = 0;
                        backoutSKS_EFTAP_File.FileName = '';
                        backoutSKS_EFTAP_File.FilePath = '';
                        backoutSKS_EFTAP_File.FormatId = '';
                        backoutSKS_EFTAP_File.ControlFileFormatId = '';
                        backoutSKS_EFTAP_File.ControlFileName = '';
                        if(!SKS_EFTAP_File::multipleFormats(lSKS_EFT_FilePmtSelection, true))
                        {
                            backoutSKS_EFTAP_File.MultiFormat = false;
                        }
                    }
                    backout = True;
                    changecompany(backoutSKS_EFTAP_File.company()) //FDD-10590
                    {
                        backoutSKS_EFTAP_File.update();
                    }
                    ttscommit;
                }
                gSKS_EFTAP_file.PmtCount += 1;
                lSKS_EFT_FilePmtSelection.FileRecId = gSKS_EFTAP_file.RecId;
                gSKS_EFTAP_file.PmtTotal += lSKS_EFT_FilePmtSelection.PmtTotal;

                if(lSKS_EFT_FilePmtSelection.PrimaryFormat == NoYes::Yes)
                {
                    gSKS_EFTAP_file.FormatId = vendPaymModeTableFormat.SKS_EFT_FormatId;
                }

                if(SKS_EFTAP_File::multipleFormats(lSKS_EFT_FilePmtSelection))
                {
                    gSKS_EFTAP_file.MultiFormat = true;
                }
                //The validation of the Selection CONTROL will prevents mixing of
                //  FXALL and NON-FXALL
                if(lSKS_EFT_FilePmtSelection.FXAProcessing == NoYes::Yes || locSKS_EFT_FileFormat.EffectiveDateMethod == SKS_EFT_EffectiveDateMethod::PaymentJournalPostingDate)
                {
                    //if DESELECTING a record, we don't need to set the FXALL processing to YES, because it should already be YES.
                    //  but if the FIle is not set to FXALLProcessing, we need to set it to it now.
                    if(gSKS_EFTAP_File.FXAProcessing != lSKS_EFT_FilePmtSelection.FXAProcessing)
                    {
                        gSKS_EFTAP_file.FXAProcessing = lSKS_EFT_FilePmtSelection.FXAProcessing;
                        gSKS_EFTAP_File.EffectiveDate = dateNull();
                    }
                    else if(gSKS_EFTAP_File.EffectiveDate != dateNull())
                    {
                        gSKS_EFTAP_File.EffectiveDate = dateNull();
                    }
                }

                Countselected += 1;
            }
            else if(gSKS_EFTAP_File.EFTFileType == SKS_EFT_Module::CNP)
            {
                mSKS_EFTCNP_Bank = sks_eftCNP_bank::findByCompany(sks_eft_filepmtselection.company(), sks_eft_filepmtselection.PmtBankAccountId,SKS_EFT_FilePmtSelection.PaymMode);//FDD-10590
                gSKS_EFTAP_File.CommID = mSKS_EFTCNP_Bank.CNPCommID;
                if (gSKS_EFTAP_File.BFBankIntegration == SKS_BF_BankIntType::FileHubLocal)
                {
                    gSKS_EFTAP_File.FileName = SKS_EFT_Common::getFileName(gSKS_EFTAP_File.FileNbr, mSKS_EFTCNP_Bank.CNPFileName, SKS_EFT_Module::CNP);
                }
                if(mSKS_EFTCNP_Bank.CNPControlFileFormatId != '' && (mSKS_EFTCNP_Bank.CNPControlFileName != '' || mSKS_EFTCNP_Bank.CNPBankFabricFileNames != ''))
                {
                    gSKS_EFTAP_File.ControlFileFormatId = mSKS_EFTCNP_Bank.CNPControlFileFormatiD;
                    if (gSKS_EFTAP_File.BFBankIntegration == SKS_BF_BankIntType::FileHubLocal)
                    {
                        gSKS_EFTAP_File.ControlFileName = SKS_EFT_Common::getFileName(gSKS_EFTAP_File.FileNbr, mSKS_EFTCNP_Bank.CNPControlFileName, SKS_EFT_Module::CNP);
                    }
                    else
                    {
                        gSKS_EFTAP_File.BankFabricFileNameName = mSKS_EFTCNP_Bank.CNPBankFabricFileNames;
                    }
                }
                //gSKS_EFTAP_File.FilePath = mSKS_EFTCNP_Bank.CNPFilePath;
                gSKS_EFTAP_File.FilePath = (gSKS_EFTAP_File.BFBankIntegration == SKS_BF_BankIntType::FileHubLocal) ? mSKS_EFTCNP_Bank.CNPFilePath : mSKS_EFTCNP_Bank.CNPBankFabricFileLocation;
                select firstonly SKS_EFT_FormatId from vendPaymModeTableFormat where vendPaymModeTableFormat.PaymMode == SKS_EFT_FilePmtSelection.PaymMode;
                //SKS_FDD_10590 -->
                if(!vendPaymModeTableFormat.SKS_EFT_FormatId)
                {
                    // if the above selection is not returns, pick format from create and send company
                    select firstonly SKS_EFT_FormatId from vendPaymModeTableFormat where vendPaymModeTableFormat.SKS_EFT_FormatId == SKS_EFT_FilePmtSelection.FormatId;
                }
                //SKS_FDD_10590 <--
                if ( gSKS_EFTAP_File.RecId != SKS_EFT_FilePmtSelection.FileRecId && SKS_EFT_FilePmtSelection.FileRecId > 0)
                {
                    ttsbegin;
                    select firstonly forupdate crosscompany backoutSKS_EFTAP_File where backoutSKS_EFTAP_File.RecId == sks_eft_filePmtSelection.FileRecId;
                    backoutSKS_EFTAP_File.PmtCount -= 1;
                    backoutSKS_EFTAP_File.PmtTotal -= lSKS_EFT_FilePmtSelection.PmtTotal;
                    If (backoutSKS_EFTAP_File.pmtCount  <= 0)
                    {
                        backoutSKS_EFTAP_File.pmtCount = 0;
                        backoutSKS_EFTAP_File.PmtTotal = 0;
                        backoutSKS_EFTAP_File.FileName = '';
                        backoutSKS_EFTAP_File.FilePath = '';
                        backoutSKS_EFTAP_File.FormatId = '';
                        backoutSKS_EFTAP_File.ControlFileFormatId = '';
                        backoutSKS_EFTAP_File.ControlFileName = '';
                        if(!SKS_EFTAP_File::multipleFormats(lSKS_EFT_FilePmtSelection, true))
                        {
                            backoutSKS_EFTAP_File.MultiFormat = false;
                        }
                    }
                    backout = True;
                    changecompany(backoutSKS_EFTAP_File.company()) //FDD-10590
                    {
                        backoutSKS_EFTAP_File.update();
                    }
                    ttscommit;
                }
                gSKS_EFTAP_file.PmtCount += 1;
                lSKS_EFT_FilePmtSelection.FileRecId = gSKS_EFTAP_file.RecId;
                gSKS_EFTAP_file.PmtTotal += lSKS_EFT_FilePmtSelection.PmtTotal;

                if(lSKS_EFT_FilePmtSelection.PrimaryFormat == NoYes::Yes)
                {
                    gSKS_EFTAP_file.FormatId = vendPaymModeTableFormat.SKS_EFT_FormatId;
                }

                if(SKS_EFTAP_File::multipleFormats(lSKS_EFT_FilePmtSelection))
                {
                    gSKS_EFTAP_file.MultiFormat = true;
                }

                Countselected += 1;
            }
            else if(gSKS_EFTAP_File.EFTFileType == SKS_EFT_Module::BTB)
            {
                mSKS_EFTBTB_Bank = sks_eftBTB_bank::findByCompany(sks_eft_filepmtselection.company(), sks_eft_filepmtselection.PmtBankAccountId,SKS_EFT_FilePmtSelection.PaymMode);//FDD-10590
                gSKS_EFTAP_File.CommID = mSKS_EFTBTB_Bank.BTBCommID;

                if (gSKS_EFTAP_File.BFBankIntegration == SKS_BF_BankIntType::FileHubLocal)
                {
                    gSKS_EFTAP_File.FileName = SKS_EFT_Common::getFileName(gSKS_EFTAP_File.FileNbr, mSKS_EFTBTB_Bank.BBFileName, SKS_EFT_Module::BTB);
                }

                if(mSKS_EFTBTB_Bank.BBControlFileFormatId != '' && (mSKS_EFTBTB_Bank.BBControlFileName != '' || mSKS_EFTBTB_Bank.BTBBankFabricFileNames))
                {
                    gSKS_EFTAP_File.ControlFileFormatId = mSKS_EFTBTB_Bank.BBControlFileFormatiD;
                    if (gSKS_EFTAP_File.BFBankIntegration == SKS_BF_BankIntType::FileHubLocal)
                    {
                        gSKS_EFTAP_File.ControlFileName = SKS_EFT_Common::getFileName(gSKS_EFTAP_File.FileNbr, mSKS_EFTBTB_Bank.BBControlFileName, SKS_EFT_Module::BTB);
                    }
                    else
                    {
                        gSKS_EFTAP_File.BankFabricFileNameName = mSKS_EFTBTB_Bank.BTBBankFabricFileNames;
                    }
                    
                }
                gSKS_EFTAP_File.TransferDirection = SKS_BTB_PaymModeTable::find(SKS_EFT_FilePmtSelection.PaymMode).TransferType;
                gSKS_EFTAP_File.FilePath = (gSKS_EFTAP_File.BFBankIntegration == SKS_BF_BankIntType::FileHubLocal) ? mSKS_EFTBTB_Bank.BBFilePath : mSKS_EFTBTB_Bank.BTBBankFabricFileLocation;
                //gSKS_EFTAP_File.FilePath = mSKS_EFTBTB_Bank.BBFilePath;
                select firstonly FormatId from bankPaymodeTableFormat where bankPaymodeTableFormat.PaymMode == SKS_EFT_FilePmtSelection.PaymMode;
                //SKS_FDD_10590 -->
                if(!bankPaymodeTableFormat.FormatId)
                {
                    // if the above selection is not returns, pick format from create and send company
                    select firstonly FormatId from bankPaymodeTableFormat where bankPaymodeTableFormat.FormatId == SKS_EFT_FilePmtSelection.FormatId;
                }
                //SKS_FDD_10590 <--
                if ( gSKS_EFTAP_File.RecId != SKS_EFT_FilePmtSelection.FileRecId && SKS_EFT_FilePmtSelection.FileRecId > 0)
                {
                    ttsbegin;
                    select firstonly forupdate crosscompany backoutSKS_EFTAP_File where backoutSKS_EFTAP_File.RecId == sks_eft_filePmtSelection.FileRecId;
                    backoutSKS_EFTAP_File.PmtCount -= 1;
                    backoutSKS_EFTAP_File.PmtTotal -= lSKS_EFT_FilePmtSelection.PmtTotal;
                    If (backoutSKS_EFTAP_File.pmtCount  <= 0)
                    {
                        backoutSKS_EFTAP_File.pmtCount = 0;
                        backoutSKS_EFTAP_File.PmtTotal = 0;
                        backoutSKS_EFTAP_File.FileName = '';
                        backoutSKS_EFTAP_File.FilePath = '';
                        backoutSKS_EFTAP_File.FormatId = '';
                        backoutSKS_EFTAP_File.ControlFileFormatId = '';
                        backoutSKS_EFTAP_File.ControlFileName = '';
                        if(!SKS_EFTAP_File::multipleFormats(lSKS_EFT_FilePmtSelection, true))
                        {
                            backoutSKS_EFTAP_File.MultiFormat = false;
                        }
                    }
                    backout = True;
                    changecompany(backoutSKS_EFTAP_File.company()) //FDD-10590
                    {
                        backoutSKS_EFTAP_File.update();
                    }
                    ttscommit;
                }
                gSKS_EFTAP_file.PmtCount += 1;
                lSKS_EFT_FilePmtSelection.FileRecId = gSKS_EFTAP_file.RecId;
                gSKS_EFTAP_file.PmtTotal += lSKS_EFT_FilePmtSelection.PmtTotal;

                if(lSKS_EFT_FilePmtSelection.PrimaryFormat == NoYes::Yes)
                {
                    gSKS_EFTAP_file.FormatId = bankPaymodeTableFormat.FormatId;
                }

                if(SKS_EFTAP_File::multipleFormats(lSKS_EFT_FilePmtSelection))
                {
                    gSKS_EFTAP_file.MultiFormat = true;
                }
                //The validation of the Selection CONTROL will prevents mixing of
                //  FXALL and NON-FXALL
                if(lSKS_EFT_FilePmtSelection.FXAProcessing == NoYes::Yes || locSKS_EFT_FileFormat.EffectiveDateMethod != SKS_EFT_EffectiveDateMethod::FormatOffset)
                {
                    //if DESELECTING a record, we don't need to set the FXALL processing to YES, because it should already be YES.
                    //  but if the FIle is not set to FXALLProcessing, we need to set it to it now.
                    if(gSKS_EFTAP_File.FXAProcessing != lSKS_EFT_FilePmtSelection.FXAProcessing)
                    {
                        gSKS_EFTAP_file.FXAProcessing = lSKS_EFT_FilePmtSelection.FXAProcessing;
                        gSKS_EFTAP_File.EffectiveDate = dateNull();
                    }
                    else if(gSKS_EFTAP_File.EffectiveDate != dateNull())
                    {
                        gSKS_EFTAP_File.EffectiveDate = dateNull();
                    }
                }



                Countselected += 1;
            }
            else if(gSKS_EFTAP_File.EFTFileType == SKS_EFT_Module::AR)
            {
                mSKS_EFTAR_Bank = sks_eftar_bank::findbycompany(sks_eft_filepmtselection.company(), sks_eft_filepmtselection.PmtBankAccountId,SKS_EFT_FilePmtSelection.PaymMode);//FDD-10590

                //BankFabric
                //gSKS_EFTAP_File.FileName = mSKS_EFTAR_Bank.ARFileName;
                //gSKS_EFTAP_File.CommID = mSKS_EFTAR_Bank.ARCommID;
                gSKS_EFTAP_File.FileName = (gSKS_EFTAP_File.BFBankIntegration == SKS_BF_BankIntType::FileHubLocal) ? mSKS_EFTAR_Bank.ARFileName : '';
                gSKS_EFTAP_File.CommID = (gSKS_EFTAP_File.BFBankIntegration == SKS_BF_BankIntType::FileHubLocal) ? mSKS_EFTAR_Bank.ARCommID : mSKS_EFTAR_Bank.ARCommID;
                //BankFabric
                //gSKS_EFTAP_File.FilePath = mSKS_EFTAR_Bank.ARFilePath;
                gSKS_EFTAP_File.FilePath = (gSKS_EFTAP_File.BFBankIntegration == SKS_BF_BankIntType::FileHubLocal) ? mSKS_EFTAR_Bank.ARFilePath : mSKS_EFTAR_Bank.ARBankFabricFileLocation;

                if (gSKS_EFTAP_File.FilePath == '')
                {
                    if (gSKS_EFTAP_File.BFBankIntegration == SKS_BF_BankIntType::FileHubLocal)
                    {
                        Error("@SKS:SKGFileHubFilePath");
                    }
                    else
                    {
                        Error("@SKS:SKGBFBlankFileLocation");
                    }
                    return false;
                }

                if(mSKS_EFTAR_Bank.ARControlFileFormatId != '' && (mSKS_EFTAR_Bank.ARControlFileName != '' || mSKS_EFTAR_Bank.ARBankFabricFileNames != ''))
                {
                    gSKS_EFTAP_File.ControlFileFormatId = mSKS_EFTAR_Bank.ARControlFileFormatiD;
                    if (gSKS_EFTAP_File.BFBankIntegration == SKS_BF_BankIntType::FileHubLocal)
                    {
                        gSKS_EFTAP_File.ControlFileName = SKS_EFT_Common::getFileName(gSKS_EFTAP_File.FileNbr, mSKS_EFTAR_Bank.ARControlFileName, SKS_EFT_Module::AR);
                    }
                    else
                    {
                        gSKS_EFTAP_File.BankFabricFileNameName = mSKS_EFTAR_Bank.ARBankFabricFileNames;
                    }
                }
                
                //BankFabric
                if (gSKS_EFTAP_File.BFBankIntegration == SKS_BF_BankIntType::FileHubLocal)
                {
                    gSKS_EFTAP_File.FileName = SKS_EFT_Common::getFileName(gSKS_EFTAP_File.FileNbr, gSKS_EFTAP_File.FileName, SKS_EFT_Module::AR);
                }

                select firstonly SKS_EFT_FormatId from custPaymModeTableFormat where custPaymModeTableFormat.PaymMode == SKS_EFT_FilePmtSelection.PaymMode;
                //SKS_FDD_10590 -->
                if(!custPaymModeTableFormat.SKS_EFT_FormatId)
                {
                    // if the above selection is not returns, pick format from create and send company
                    select firstonly SKS_EFT_FormatId from custPaymModeTableFormat where custPaymModeTableFormat.SKS_EFT_FormatId == SKS_EFT_FilePmtSelection.FormatId;
                }
                // SKS_FDD_10590 <--

                if ( gSKS_EFTAP_File.RecId != lSKS_EFT_FilePmtSelection.FileRecId && lSKS_EFT_FilePmtSelection.FileRecId > 0)
                {
                    ttsbegin;
                    select firstonly forupdate crosscompany backoutSKS_EFTAP_File where backoutSKS_EFTAP_File.RecId == sks_eft_filePmtSelection.FileRecId;
                    backoutSKS_EFTAP_File.PmtCount -= 1;
                    backoutSKS_EFTAP_File.PmtTotal -= lSKS_EFT_FilePmtSelection.PmtTotal;
                    If (backoutSKS_EFTAP_File.pmtCount  <= 0)
                    {
                        backoutSKS_EFTAP_File.pmtCount = 0;
                        backoutSKS_EFTAP_File.PmtTotal = 0;
                        backoutSKS_EFTAP_File.FileName = '';
                        backoutSKS_EFTAP_File.FilePath = '';
                        backoutSKS_EFTAP_File.FormatId = '';
                        backoutSKS_EFTAP_File.ControlFileFormatId = '';
                        backoutSKS_EFTAP_File.ControlFileName = '';
                        if(!SKS_EFTAP_File::multipleFormats(lSKS_EFT_FilePmtSelection, true))
                        {
                            backoutSKS_EFTAP_File.MultiFormat = false;
                        }
                    }
                    backout = True;
                    changecompany(backoutSKS_EFTAP_File.company()) //FDD-10590
                    {
                        backoutSKS_EFTAP_File.update();
                    }
                    ttscommit;
                }
                gSKS_EFTAP_file.PmtCount += 1;
                lSKS_EFT_FilePmtSelection.FileRecId = gSKS_EFTAP_file.RecId;
                gSKS_EFTAP_file.PmtTotal += lSKS_EFT_FilePmtSelection.PmtTotal;
                if(lSKS_EFT_FilePmtSelection.PrimaryFormat == NoYes::Yes)
                {
                    gSKS_EFTAP_file.FormatId = custPaymModeTableFormat.SKS_EFT_FormatId;
                }
                if(SKS_EFTAP_File::multipleFormats(lSKS_EFT_FilePmtSelection))
                {
                    gSKS_EFTAP_file.MultiFormat = true;
                }
                Countselected += 1;

            }   //end AR
        }
        else
        {
            //SKS_VSTS_11433 --->
            select firstonly lSKS_EFT_FileDetail where lSKS_EFT_FileDetail.FileRecId == SKS_EFT_FilePmtSelection.FileRecId &&
                    lSKS_EFT_FileDetail.PaymentJournalNum == SKS_EFT_FilePmtSelection.PmtJournalNum &&
                    lSKS_EFT_FileDetail.BankAccountId == SKS_EFT_FilePmtSelection.PmtBankAccountId &&
                    (lSKS_EFT_FileDetail.RecordSummary == SKS_EFT_RecordSummary::Payment || lSKS_EFT_FileDetail.RecordSummary == SKS_EFT_RecordSummary::Invoice);

            if(lSKS_EFT_FileDetail)
            {
                if (Box::yesNo("@SKS:SKGDeselectPaymentJournal", DialogButton::Yes, '') == DialogButton::No)
                {
                    _selected = true;

                    SKS_EFT_FilePmtSelection.PrimaryFormat = NoYes::Yes;
                }
                else
                {
                    ttsbegin;
                    delete_from lSKS_EFT_FileDetail where lSKS_EFT_FileDetail.FileRecId == SKS_EFT_FilePmtSelection.FileRecId &&
                        lSKS_EFT_FileDetail.PaymentJournalNum == SKS_EFT_FilePmtSelection.PmtJournalNum &&
                        lSKS_EFT_FileDetail.BankAccountId == SKS_EFT_FilePmtSelection.PmtBankAccountId &&
                        (lSKS_EFT_FileDetail.RecordSummary == SKS_EFT_RecordSummary::Payment || lSKS_EFT_FileDetail.RecordSummary == SKS_EFT_RecordSummary::Invoice);
                    ttscommit;

                    SKS_EFT_Processing::createFileHistory(SKS_EFT_ActionHistory::PaymentRemoved, gSKS_EFTAP_file.RecId, '', '', SKS_EFT_FilePmtSelection.PmtJournalNum, gSKS_EFTAP_file.FileStatus);

                    if(!SKS_EFTAP_File::multipleFormats(SKS_EFT_FilePmtSelection, true))
                    {
                        gSKS_EFTAP_file.MultiFormat = false;
                    }

                    SKS_EFT_FilePmtSelection.FileRecId = 0;
                    gSKS_EFTAP_file.PmtCount -= 1;
                    gSKS_EFTAP_file.PmtTotal -= SKS_EFT_FilePmtSelection.PmtTotal;
                    Countselected -= 1;
                    If (Countselected <= 0)
                    {
                        gSKS_EFTAP_file.FormatId = '';
                        gSKS_EFTAP_file.APIFormatType = SKS_EFT_APIFormatType::File;
                        gSKS_EFTAP_file.Selected = 0;
                        Countselected = 0;
                        gSKS_EFTAP_file.FormatId = '';
                        gSKS_EFTAP_File.ControlFileFormatId = '';
                        gSKS_EFTAP_File.ControlFileName = '';
                        //if there are no records selected, then the file cannot be FXALL.
                        gSKS_EFTAP_file.FXAProcessing = NoYes::No;
                    }
                }
            }
            else
            {
                //SKS_VSTS_11433 <---

                if(!SKS_EFTAP_File::multipleFormats(SKS_EFT_FilePmtSelection, true))
                {
                    gSKS_EFTAP_file.MultiFormat = false;
                }
                SKS_EFT_FilePmtSelection.FileRecId = 0;
                gSKS_EFTAP_file.PmtCount -= 1;
                gSKS_EFTAP_file.PmtTotal -= SKS_EFT_FilePmtSelection.PmtTotal;
                Countselected -= 1;
                If (Countselected <= 0)
                {
                    gSKS_EFTAP_file.FormatId = '';
                    gSKS_EFTAP_file.APIFormatType = SKS_EFT_APIFormatType::File;
                    gSKS_EFTAP_file.Selected = 0;
                    Countselected = 0;
                    gSKS_EFTAP_file.FormatId = '';
                    gSKS_EFTAP_File.ControlFileFormatId = '';
                    gSKS_EFTAP_File.ControlFileName = '';
                    //if there are no records selected, then the file cannot be FXALL.
                    gSKS_EFTAP_file.FXAProcessing = NoYes::No;
                }
            }
        }

        SelectCount.value(Countselected);

        //FDD_10383--->
        SKS_EFT_FilePmtSelection locSKS_EFT_FilePmtSelection;
        LedgerJournalTrans locLedgerJournalTrans;

        select firstonly PaymSpec from locLedgerJournalTrans where locLedgerJournalTrans.SKS_EFT_APPmtSelectionRecId == lSKS_EFT_FilePmtSelection.RecId;

        //FDD_10383<---

        if(gSKS_EFTAP_File.EFTFileType == SKS_EFT_Module::AP)
        {
            if(gSKS_EFTAP_File.EffectiveDate != dateNull() && locSKS_EFT_FileFormat && (!locSKS_EFT_FileFormat.SupportsMultipleEffectiveDates || (locSKS_EFT_FileFormat.SupportsMultipleEffectiveDates && (locSKS_EFT_FileFormat.EffectiveDateMethod == SKS_EFT_EffectiveDateMethod::FormatOffset || locSKS_EFT_FileFormat.EffectiveDateMethod == SKS_EFT_EffectiveDateMethod::PaymSpecOffset))))
            {
                gSKS_EFTAP_File.setOffsetDate(vendPaymModeTableFormat.SKS_EFT_FormatId, mSKS_EFT_Bank.BankHolidayGroupId, lSKS_EFT_FilePmtSelection.PmtDate, gSKS_EFTAP_File.EFTFileType, locLedgerJournalTrans.PaymSpec);
            }
        }
        else if(gSKS_EFTAP_File.EFTFileType == SKS_EFT_Module::BTB)
        {
            if(gSKS_EFTAP_File.EffectiveDate != dateNull() && locSKS_EFT_FileFormat && (!locSKS_EFT_FileFormat.SupportsMultipleEffectiveDates || (locSKS_EFT_FileFormat.SupportsMultipleEffectiveDates && locSKS_EFT_FileFormat.EffectiveDateMethod == SKS_EFT_EffectiveDateMethod::FormatOffset)))
            {
                gSKS_EFTAP_File.setOffsetDate(bankPaymodeTableFormat.FormatId, mSKS_EFTBTB_Bank.BankHolidayGroupId, lSKS_EFT_FilePmtSelection.PmtDate, gSKS_EFTAP_File.EFTFileType);
            }
        }
        else
        {
            gSKS_EFTAP_File.setOffsetDate(custPaymModeTableFormat.SKS_EFT_FormatId, mSKS_EFTAR_Bank.BankHolidayGroupId, lSKS_EFT_FilePmtSelection.PmtDate, gSKS_EFTAP_File.EFTFileType);
        }

        gSKS_EFTAP_file.OriginalPmtTotal = gSKS_EFTAP_File.PmtTotal;
        // SKS_FDD_10590 -->
        changecompany(gSKS_EFTAP_file.company())//FDD-10590
        {
            gSKS_EFTAP_file.update(SKS_EFT_FilePmtSelection);   // SKS_EFT_FilePmtSelection is required to update only this specific selected record's payment transdate
        }


        If (backout)
        {
            FormDataUtil::getFormDataSource(gsks_eftap_file).research(True);
        }
        else
        {
            FormDataUtil::getFormDataSource(GSKS_EFTAP_file).reread();
            FormDataUtil::getFormDataSource(GSKS_EFTAP_file).refresh();
        }
        if(gSKS_EFTAP_File.EFTFileType == SKS_EFT_Module::AP || gSKS_EFTAP_File.EFTFileType == SKS_EFT_Module::CNP)
        {
            gParentForm.enableEffectiveDate(gSKS_EFTAP_File.FXAProcessing == NoYes::No
                                                && locSKS_EFT_FileFormat.EffectiveDateMethod == SKS_EFT_EffectiveDateMethod::FormatOffset);
        }
        else if(gSKS_EFTAP_File.EFTFileType == SKS_EFT_Module::BTB)
        {
            gParentForm.enableEffectiveDate(gSKS_EFTAP_File.FXAProcessing == NoYes::No
                                                && locSKS_EFT_FileFormat.EffectiveDateMethod == SKS_EFT_EffectiveDateMethod::FormatOffset);
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePrimary</Name>
				<Source><![CDATA[
    public boolean validatePrimary()
    {
        if(SKS_EFT_FilePmtSelection.PrimaryFormat == NoYes::Yes && element.PrimaryExists())
        {
            warning("@SKS2752");
            return false;
        }
        if(!SKS_EFT_FilePmtSelection.FileRecId)
        {
            warning("@SKS2753");
            return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>switchToInitialLegalEntity</Name>
				<Source><![CDATA[
    //SKS_Bug_11897
    /// <summary>
    /// Switches execution to the specified legal entity.
    /// </summary>
    /// <param name = "_initialCompanyValue">The legal entity to switch to.</param>
    /// <returns>A boolean value indicating whether the switch was successful.</returns>
    public boolean switchToInitialLegalEntity(SelectableDataArea _initialCompanyValue)
    {
        boolean couldSwitchOK = false;
        if (xDataArea::exist(_initialCompanyValue))
        {
            SysInfologLevel currLevel = infolog.infologLevel();
            infolog.setInfoLogLevel(SysInfologLevel::None);
            //currentCompany = _selectableDataArea;
            couldSwitchOK  = appl.setDefaultCompany(_initialCompanyValue, false);
            infolog.setInfoLogLevel(currLevel);
        }
        return couldSwitchOK;
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>SKS_EFT_FilePmtSelection</Name>
				<Methods>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        /// <summary>
        ///
        /// </summary>
        public void init()
        {
            QueryBuildDataSource qbdSource1;// SKS_FDD_10590

            super();
            select SKS_PP_Setup;
            SKS_EFT_FilePmtSelection_ds.cacheAddMethod('LedgerCurrencyCode');
            // SKS_FDD_10590 -->
            qbdSource1 = this.query().dataSourceTable(tablenum(SKS_EFT_FilePmtSelection));
            qbdFileFormats = qbdSource1.addDataSource(tablenum(SKS_EFT_FileFormat));
            qbdFileFormats.joinMode(JoinMode::InnerJoin);
            qbdFileFormats.addLink(FieldNum(SKS_EFT_FilePmtSelection, FormatId), FieldNum(SKS_EFT_FileFormat, FormatId));
            // SKS_FDD_10590 <--
        }

]]></Source>
					</Method>
					<Method>
						<Name>LedgerCurrencyCode</Name>
						<Source><![CDATA[
        Display CurrencyCode LedgerCurrencyCode(SKS_EFT_FilePmtSelection _SKS_EFT_FilePmtSelection)
        {
            return Ledger::accountingCurrency();
        }

]]></Source>
					</Method>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        public int active()
        {
            int ret;

            ret = super();
            element.switchToInitialLegalEntity(initialCompanyValue);//SKS_Bug_11897
            SKS_EFT_ViewPaymentDetails.enabled(True);
            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>editPaymentSelected</Name>
						<Source><![CDATA[
        // BP Deviation Documented
        public edit Boolean editPaymentSelected(boolean _set, SKS_EFT_FilePmtSelection _sks_EFT_FilePmtSelection, boolean _selected)
        {
            ;
            return (_sks_EFT_FilePmtSelection.FileRecId == gSKS_EFTAP_File.RecId);
        }

]]></Source>
					</Method>
					<Method>
						<Name>linkActive</Name>
						<Source><![CDATA[
        public void linkActive()
        {
            CountSelected = gsks_eftap_file.PmtCount;
            SelectCount.value(CountSelected);
            super();
        }

]]></Source>
					</Method>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        public void executeQuery()
        {
            QueryBuildRange qbrRange;
            QueryBuildDataSource qbdSource1;
            QueryBuildDataSource journalTable;
            RefRecId Parent_RecId;
            FormCheckBoxControl showAllPayments;
            //SKS_FDD_10590 -->
            container companiesCon;
            int i;
            //SKS_FDD_10590 <--
            ;

            Parent_RecId = 0;
            if(gSKS_EFTAP_File.FileStatus == sks_eft_filestatus::Completed 
                || gSKS_EFTAP_File.FileStatus == sks_eft_filestatus::CompletedNoEmail
                || gSKS_EFTAP_File.FileStatus == sks_eft_filestatus::CompletedEmailPending )
            {
                ShowPaymentsAlreadyEFT.enabled(False);
                SKS_EFT_Selected.allowEdit(false);
            }
            else
            {
                ShowPaymentsAlreadyEFT.enabled(True);
                SKS_EFT_Selected.allowEdit(True);
            }

            this.query().dataSourceTable(tablenum(SKS_EFT_FilePmtSelection)).clearRanges();

            qbdSource1 = this.query().dataSourceTable(tablenum(SKS_EFT_FilePmtSelection));
            qbrRange = qbdSource1.addRange(fieldnum(SKS_EFT_FilePmtSelection, RecId));
            qbrRange = qbdSource1.addRange(fieldNum(SKS_EFT_FilePmtSelection, Module));            
            
            qbrRange.value(queryValue(gSKS_EFTAP_file.EFTFileType));
            qbrRange.status(RangeStatus::Hidden);

            showAllPayments = ShowPaymentsAlreadyEFT;
        
            if(this.query().dataSourceTable(tablenum(LedgerJournalTable)))
            {
                journalTable =this.query().dataSourceTable(tablenum(LedgerJournalTable));
            }
            else
            {
                journalTable = qbdSource1.addDataSource(tableNum(LedgerJournalTable));
            }
            journalTable.relations(true);

            QueryBuildRange qbr1 = journalTable.addRange(fieldNum(LedgerJournalTable, Posted));
            qbr1.value(queryValue(enum2Str(NoYes::No)));            
            qbr1.status(RangeStatus::Hidden);
            this.query().dataSourceTable(tablenum(LedgerJournalTable)).enabled(false);

            //SKS_FDD_10590 -->
            If(SKS_PP_Setup.modMCFAPDD && SKS_PP_Setup.RegMCFAPDD)
            {
                if(gSKS_EFTAP_File.EFTFileType == SKS_EFT_Module::AP || gSKS_EFTAP_File.EFTFileType == SKS_EFT_Module::CNP)
                {
                    companiesCon = SKS_EB_VirtualCompany::getEFT_APMultiCompanies();
                    if(companiesCon)
                    {
                        this.query().allowCrossCompany(true);
                        for(i = 1; i<= conLen(companiesCon); i++)
                        {
                            this.query().addCompanyRange(conPeek(companiesCon, i));
                        }
                    }

                }
                else if(gSKS_EFTAP_File.EFTFileType == SKS_EFT_Module::AR)
                {
                    companiesCon = SKS_EB_VirtualCompany::getDDMultiCompanies();
                    if(companiesCon)
                    {
                        this.query().allowCrossCompany(true);
                        for(i = 1; i<= conLen(companiesCon); i++)
                        {
                            this.query().addCompanyRange(conPeek(companiesCon, i));
                        }
                    }
                }
            }
            //SKS_FDD_10590 <--

            If (gSKS_EFTAP_File.RecId != 0)
            {
                If (gSKS_EFTAP_File.FileStatus != SKS_EFT_FileStatus::Completed
                    && gSKS_EFTAP_File.FileStatus != SKS_EFT_FileStatus::CompletedNoEmail)
                {   /*Do not show all payments */
                    If ( showAllPayments.value() == NoYes::No)
                    {
                        If (gSKS_EFTAP_File.JournalOption == SKS_EFT_FileJournalOption::JournalsOnly
                            || gSKS_EFTAP_File.JournalOption == SKS_EFT_FileJournalOption::JournalsPreNotes
                            || gSKS_EFTAP_File.JournalOption == SKS_EFT_FileJournalOption::PreNotesOnly )
                        {
                            qbrRange.value(StrFmt('((%1.%2 == %3) || (%1.%2 == %4) && (%1.%5 == %6))',
                            TableStr(SKS_EFT_FilePmtSelection),
                            fieldStr(SKS_EFT_FilePmtSelection, FileRecId),
                            queryValue(gSKS_EFTAP_File.RecId),
                            queryValue(Parent_RecId),
                            fieldStr(SKS_EFT_FilePmtSelection, Module),
                            queryValue(enum2int(gSKS_EFTAP_File.EFTFileType))));

                            if (gSKS_EFTAP_File.FileStatus != SKS_EFT_FileStatus::CompletedEmailPending)
                            {
                                this.query().dataSourceTable(tablenum(LedgerJournalTable)).enabled(true);
                            }
                        }
                    }
                }
                else
                {
                    If ( showAllPayments.value() == NoYes::No)
                    {
                        qbrRange.value(StrFmt('((%1.%2 == %3) && (%1.%4 == %5))',
                        TableStr(SKS_EFT_FilePmtSelection),
                        fieldStr(SKS_EFT_FilePmtSelection, FileRecId),
                        queryValue(gSKS_EFTAP_File.RecId),
                        fieldStr(SKS_EFT_FilePmtSelection, Module),
                        queryValue(enum2int(gSKS_EFTAP_File.EFTFileType))));
                    }
                }
            }
            else
            {
                qbrRange.value(StrFmt('((%1.%2 == %3) && (%1.%4 == %5))',
                TableStr(SKS_EFT_FilePmtSelection),
                fieldStr(SKS_EFT_FilePmtSelection, RecId),
                queryValue(0),
                fieldStr(SKS_EFT_FilePmtSelection, Module),
                queryValue(enum2int(gSKS_EFTAP_File.EFTFileType))));
            }

            this.query().dataSourceTable(tablenum(SKS_EFT_FilePmtSelection)).addSortField(fieldnum(SKS_EFT_FilePmtSelection, DataAreaId), SortOrder::Descending);
            super();


        }

]]></Source>
					</Method>
					<Method>
						<Name>ValidateSelected</Name>
						<Source><![CDATA[
        /// <summary>
        ///
        /// </summary>
        public boolean ValidateSelected(SKS_EFT_FilePmtSelection _SKS_EFT_FilePmtSelection, boolean _Value)
        {
            SKS_EFT_Processing sks_eft_Processing;
            SKS_EFTAP_File mSKS_EFTAP_File;
            SKS_EFT_FilePmtSelection locSKS_EFT_FilePmtSelection;
            str result;
            ;

            sks_eft_Processing = new SKS_EFT_Processing();

            if(_Value)
            {
                if(gSKS_EFTAP_File.EFTFileType == SKS_EFT_Module::AP)
                {
                    result = sks_eft_Processing.CheckUserSelectionAP(gSKS_EFTAP_File.RecId, _SKS_EFT_FilePmtSelection.RecId);
                }
                else if(gSKS_EFTAP_File.EFTFileType == SKS_EFT_Module::CNP)
                {
                    result = sks_eft_Processing.CheckUserSelectionCNP(gSKS_EFTAP_File.RecId, _SKS_EFT_FilePmtSelection.RecId);
                }
                else if(gSKS_EFTAP_File.EFTFileType == SKS_EFT_Module::BTB)
                {                    
                    if(!this.validateTransferType())
                    {
                        return false;
                    }

                    result = sks_eft_Processing.CheckUserSelectionBTB(gSKS_EFTAP_File.RecId, _SKS_EFT_FilePmtSelection.RecId);
                }
                else
                {
                    result = sks_eft_Processing.CheckUserSelectionAR(gSKS_EFTAP_File.RecId, _SKS_EFT_FilePmtSelection.RecId);
                }
                If (result != '')
                {
                    error(result);
                    return false;
                }
                //Do not allow mixing of FXAll Records and non FXAll records
                Select firstOnly crosscompany recid from locSKS_EFT_FilePmtSelection where locSKS_EFT_FilePmtSelection.FileRecId == gSKS_EFTAP_File.RecId //SKS_FDD_10590
                    && locSKS_EFT_FilePmtSelection.FXAProcessing != _SKS_EFT_FilePmtSelection.FXAProcessing;
                if(locSKS_EFT_FilePmtSelection.recid)
                {
                    error(strFmt("@SKS3689"));
                    return false;
                }
                // SKS_FDD_10590 -->
                if(SKS_EFT_FilePmtSelection.DataAreaId != gSKS_EFTAP_File.DataAreaId && SKS_EFT_FilePmtSelection.FXAProcessing == NoYes ::Yes)
                {
                    error (strfmt("@SKS:SKGFxDontSupMultiComp"));
                    return false;
                }
                if(SKS_EFT_FilePmtSelection.DataAreaId != gSKS_EFTAP_File.DataAreaId &&
                  SKS_EFT_FileFormat::findByCompany(SKS_EFT_FilePmtSelection.DataAreaId, SKS_EFT_FilePmtSelection.FormatId).SupportsMultiCompany == NoYes::No)
                {
                    error (strfmt("@SKS:SKGSupportMultiInFile", SKS_EFT_FilePmtSelection.DataAreaId, SKS_EFT_FilePmtSelection.FormatId ));
                    return false;
                }
                // SKS_FDD_10590 <--


                if(_SKS_EFT_FilePmtSelection.FileRecId != 0)
                {
                    if(gSKS_EFTAP_File.EFTFileType == SKS_EFT_Module::AP || gSKS_EFTAP_File.EFTFileType == SKS_EFT_Module::CNP)
                    {
                        select firstonly Filestatus from mSKS_EFTAP_file where msks_EFTAP_file.RecId == _SKS_EFT_FilePmtSelection.FileRecId;
                        if(gSKS_EFTAP_file.RecId != _SKS_EFT_FilePmtSelection.FileRecId && msks_eftap_file.Filestatus == sks_eft_filestatus::Completed ||
                            msks_eftap_file.Filestatus == sks_eft_filestatus::CompletedNoEmail &&
                            Box::yesNo("@SKS1782", DialogButton::No, "@SKS1441") == DialogButton::No)
                        {
                            return false;
                        }

                        if(gSKS_EFTAP_file.RecId != _SKS_EFT_FilePmtSelection.FileRecId && msks_eftap_file.Filestatus == sks_eft_filestatus::NotProcessed
                            || msks_eftap_file.Filestatus == sks_eft_filestatus::FileCreated ||  msks_eftap_file.Filestatus == sks_eft_filestatus::Transmitted
                            && Box::yesNo("@SKS1464", DialogButton::No, "@SKS1441") == DialogButton::No)
                        {
                            return false;
                        }
                    }
                    else if(gSKS_EFTAP_File.EFTFileType == SKS_EFT_Module::BTB)
                    {
                        select firstonly Filestatus from mSKS_EFTAP_file where msks_EFTAP_file.RecId == _SKS_EFT_FilePmtSelection.FileRecId;
                        if(gSKS_EFTAP_file.RecId != _SKS_EFT_FilePmtSelection.FileRecId && msks_eftap_file.Filestatus == sks_eft_filestatus::Completed ||
                            msks_eftap_file.Filestatus == sks_eft_filestatus::CompletedNoEmail &&
                            Box::yesNo("@SKS:SKGBTBFileCreatedSuccess", DialogButton::No, "@SKS:SKGBTBSendFile") == DialogButton::No)
                        {
                            return false;
                        }

                        if(gSKS_EFTAP_file.RecId != _SKS_EFT_FilePmtSelection.FileRecId && msks_eftap_file.Filestatus == sks_eft_filestatus::NotProcessed
                            || msks_eftap_file.Filestatus == sks_eft_filestatus::FileCreated ||  msks_eftap_file.Filestatus == sks_eft_filestatus::Transmitted
                            && Box::yesNo("@SKS:SKSBTBWarningbtbFileSent", DialogButton::No, "@SKS:SKGBTBSendFile") == DialogButton::No)
                        {
                            return false;
                        }
                    }
                    else
                    {
                        select firstonly Filestatus from mSKS_EFTAP_file where msks_EFTAP_file.RecId == _SKS_EFT_FilePmtSelection.FileRecId;
                        if(gSKS_EFTAP_file.RecId != _SKS_EFT_FilePmtSelection.FileRecId && msks_eftap_file.Filestatus == sks_eft_filestatus::Completed ||
                            msks_eftap_file.Filestatus == sks_eft_filestatus::CompletedNoEmail &&
                            Box::yesNo("@SKS1782", DialogButton::No, "@SKS1851") == DialogButton::No)
                        {
                            return false;
                        }

                        if(gSKS_EFTAP_file.RecId != _SKS_EFT_FilePmtSelection.FileRecId && msks_eftap_file.Filestatus == sks_eft_filestatus::NotProcessed
                            || msks_eftap_file.Filestatus == sks_eft_filestatus::FileCreated ||  msks_eftap_file.Filestatus == sks_eft_filestatus::Transmitted
                            && Box::yesNo("@SKS1464", DialogButton::No, "@SKS1851") == DialogButton::No)
                        {
                            return false;
                        }
                    }
                }
            }
            return true;
        }

]]></Source>
					</Method>
					<Method>
						<Name>transferType</Name>
						<Source><![CDATA[
        /// <summary>
        ///
        /// </summary>
        public display SKS_BTB_TransferType transferType(SKS_EFT_FilePmtSelection _filePmtSelection)
        {
            SKS_EFT_FilePmtSelection lFilePmtSelection;

            select firstonly lFilePmtSelection where lFilePmtSelection.RecId == _filePmtSelection.RecId;

            return (SKS_BTB_PaymModeTable::find(lFilePmtSelection.PaymMode).TransferType);
        }

]]></Source>
					</Method>
					<Method>
						<Name>validateTransferType</Name>
						<Source><![CDATA[
        /// <summary>
        ///
        /// </summary>
        public boolean validateTransferType()
        {
            if(gSKS_EFTAP_file.PmtCount > 0 && gSKS_EFTAP_file.TransferDirection != (SKS_BTB_PaymModeTable::find(SKS_EFT_FilePmtSelection.PaymMode).TransferType))
            {
                checkFailed('Transfer types transfer in and transfer out can not be selected');
                return false;
            }

            return true;
        }

]]></Source>
					</Method>
				</Methods>
				<Fields>
					<Field>
						<DataField>PrimaryFormat</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                vendPaymModeTable vendPaymModeTableFormat;
                custPaymModeTable custPaymModeTableFormat;
                SKS_BTB_PaymModeTable bankPaymModeTableFormat;
                ;

                super();

                if(SKS_EFT_FilePmtSelection.PrimaryFormat)
                {
                    if(gSKS_EFTAP_File.EFTFileType == SKS_EFT_Module::AP || gSKS_EFTAP_File.EFTFileType == SKS_EFT_Module::CNP)
                    {
                        select firstonly SKS_EFT_FormatId from vendPaymModeTableFormat where vendPaymModeTableFormat.PaymMode == SKS_EFT_FilePmtSelection.PaymMode;
                        if(SKS_EFT_FilePmtSelection.PrimaryFormat == NoYes::Yes)
                        {
                            gSKS_EFTAP_file.FormatId = vendPaymModeTableFormat.SKS_EFT_FormatId;
                        }
                    }
                    else if(gSKS_EFTAP_File.EFTFileType == SKS_EFT_Module::BTB)
                    {
                        select firstonly FormatId from bankPaymModeTableFormat where bankPaymModeTableFormat.PaymMode == SKS_EFT_FilePmtSelection.PaymMode;
                        if(SKS_EFT_FilePmtSelection.PrimaryFormat == NoYes::Yes)
                        {
                            gSKS_EFTAP_file.FormatId = bankPaymModeTableFormat.FormatId;
                        }
                    }
                    else if(gSKS_EFTAP_File.EFTFileType == SKS_EFT_Module::AR)
                    {
                        select firstonly SKS_EFT_FormatId from custPaymModeTableFormat where custPaymModeTableFormat.PaymMode == SKS_EFT_FilePmtSelection.PaymMode;
                        if(SKS_EFT_FilePmtSelection.PrimaryFormat == NoYes::Yes)
                        {
                            gSKS_EFTAP_file.FormatId = custPaymModeTableFormat.SKS_EFT_FormatId;
                        }
                    }

                }
                else
                {
                    gSKS_EFTAP_file.FormatId = '';
                }
                SKS_EFT_FilePmtSelection_ds.write();
                gSKS_EFTAP_file.update();
                FormDataUtil::getFormDataSource(gSKS_EFTAP_file).reread();
                FormDataUtil::getFormDataSource(gSKS_EFTAP_file).refresh();
            }

]]></Source>
							</Method>
							<Method>
								<Name>validate</Name>
								<Source><![CDATA[
            public boolean validate()
            {
                boolean ret = false;

                if(element.validatePrimary())
                {
                    ret = super();
                }
                return ret;
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
				</Fields>
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>SKS_EFT_ViewPaymentDetails</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        ///SKS_bug_11897
        ///To open the Payment journal in the correct company
        /// </summary>
        public void clicked()
        {
            changecompany(SKS_EFT_FilePmtSelection.DataAreaId)
            {
                Args args = new Args();
                Args.parm(initialCompanyValue);
                args.record(SKS_EFT_FilePmtSelection);
                args.caller(element);
                FormRun formRun = new MenuFunction(menuitemDisplayStr(SKS_EFT_ViewPaymentDetails), MenuItemType::Display).create(args);
                formRun.run();
                formRun.wait();
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SelectAllBtn</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        ///
        /// </summary>
        public void clicked()
        {
            SKS_EFT_FilePmtSelection    lSKS_EFT_FilePmtSelection;
            super();
            lSKS_EFT_FilePmtSelection = SKS_EFT_FilePmtSelection_ds.getfirst();
            While(lSKS_EFT_FilePmtSelection)
            {
                if(lSKS_EFT_FilePmtSelection.FileRecid == 0)
                {
                    if(SKS_EFT_FilePmtSelection_ds.validateSelected(lSKS_EFT_FilePmtSelection, true))
                    {
                        if(element.PrimaryExists() && lSKS_EFT_FilePmtSelection.PrimaryFormat == NoYes::Yes)
                        {
                            lSKS_EFT_FilePmtSelection.PrimaryFormat = NoYes::No;
                        }
                        else if(!element.PrimaryExists())
                        {
                            lSKS_EFT_FilePmtSelection.PrimaryFormat = NoYes::Yes;
                        }
                        element.syncEFTAP(true, lSKS_EFT_FilePmtSelection);
                        lSKS_EFT_FilePmtSelection.write();
                    }
                }
                lSKS_EFT_FilePmtSelection = SKS_EFT_FilePmtSelection_ds.getNext();
            }
            SKS_EFT_FilePmtSelection_ds.research();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ShowPaymentsAlreadyEFT</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
            ;

            ret = super();

            // Execute Query.
            SKS_EFT_FilePmtSelection_ds.executeQuery();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SKS_EFT_Selected</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            if(!this.value() && SKS_EFT_FilePmtSelection.PrimaryFormat == NoYes::Yes ||
               (element.PrimaryExists() && this.value() && SKS_EFT_FilePmtSelection.PrimaryFormat == NoYes::Yes))
            {
                SKS_EFT_FilePmtSelection.PrimaryFormat = NoYes::No;
            }
            else if(!element.PrimaryExists() && this.value())
            {
                SKS_EFT_FilePmtSelection.PrimaryFormat = NoYes::Yes;
            }

            if (element.syncEFTAP(this.value(), SKS_EFT_FilePmtSelection) == false)
            {
                return false;
            }

            ret = Super();
            // SKS_FDD_10590 -->
            if(SKS_EFT_FilePmtSelection.DataAreaId != curExt())
            {
                // If PmtSelection is created in other than currentt company, update PmtSelection values in the company where its created
                changecompany(SKS_EFT_FilePmtSelection.company())
                {
                    SKS_EFT_FilePmtSelection_ds.write();
                }
            }
            else
            {
                SKS_EFT_FilePmtSelection_ds.write();
            }
            // SKS_FDD_10590 -->
            return Ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;
            ret = SKS_EFT_FilePmtSelection_ds.validateSelected(SKS_EFT_FilePmtSelection, this.value());
            if(ret)
            {
                ret = Super();
            }
            return Ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SKS_EFT_FilePmtSelection_PmtJournalNum</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>jumpRef</Name>
						<Source><![CDATA[
        /// <summary>
        /// JumpRef method for JournalNumber.
        /// </summary>
        public void jumpRef()
        {
            LedgerJournalTable  ledgerJournalTable;
            LedgerJournalType   ledgerJournalType;
            //SKS_Bug_11858_And_11870 -->
            FormRun             formRun;
            // BugId: 7300
            //MenuFunction menuFunction = new MenuFunction(menuitemDisplayStr(LedgerJournalTable), MenuItemType::Display);
            Args         args;
            //SKS_Bug_11858_And_11870 <--

            select firstonly crosscompany ledgerJournalTable //SKS_FDD_10590
                where ledgerJournalTable.JournalNum == SKS_EFT_FilePmtSelection.PmtJournalNum &&
                ledgerJournalTable.DataAreaId == SKS_EFT_FilePmtSelection.Company; //SKS_Bug_11858_And_11870

            if(element.getSKS_EFT_Module() == SKS_EFT_Module::BTB)
            {
                args = new Args();
                args.record(LedgerJournalTable::find(ledgerJournalTable.JournalNum));
                new MenuFunction(menuitemDisplayStr(SKS_BTB_BankTransferJournal), MenuItemType::Display).run(args);
            }
            else if(element.getSKS_EFT_Module() == SKS_EFT_Module::CNP)
            {
                args = new Args();
                args.record(LedgerJournalTable::find(ledgerJournalTable.JournalNum));
                new MenuFunction(menuitemDisplayStr(SKS_CNP_CustReimbursementJour), MenuItemType::Display).run(args);
            }
            else
            {
                changecompany(ledgerJournalTable.DataAreaId)//SKS_Bug_11858_And_11870
                {
                    args = new Args();

                    LedgerJournalTable ledgerJournalTableLoc = null;
                    ledgerJournalTableLoc = ledgerJournalTable;//SKS_Bug_11858_And_11870
                    if (element.getSKS_EFT_Module() == SKS_EFT_Module::AR || element.getSKS_EFT_Module() == SKS_EFT_Module::CNP)
                    {
                        ledgerJournalType = LedgerJournalType::CustPayment;
                    }
                    else if (element.getSKS_EFT_Module() == SKS_EFT_Module::BTB)
                    {
                        ledgerJournalType = LedgerJournalType::Daily;
                    }
                    else
                    {
                        ledgerJournalType = LedgerJournalType::Payment;
                    }
                    args.record(LedgerJournalTable::find(ledgerJournalTableLoc.JournalNum));//SKS_Bug_11858_And_11870
                    args.parmEnum(enum2int(ledgerJournalType));
                    args.parmEnumType(enumNum(LedgerJournalType));
                    args.lookupRecord(ledgerJournalTableLoc);
                    //SKS_Bug_11858_And_11870 -->
                    formRun = new MenuFunction(menuitemDisplayStr(LedgerJournalTable), MenuItemType::Display).create(args);
                    formRun.run();
                    formRun.wait();
                    //SKS_Bug_11858_And_11870 <--
                }
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>SKS_EFT_FilePmtSelection</Name>
			<Table>SKS_EFT_FilePmtSelection</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AdvEmail</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Company</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EffectiveDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FileRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FormatGroup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FormatId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>FXAProcessing</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Module</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymMode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymSpec</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymSpecByDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymSpecSameDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymSpecSeparateFile</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PmtBankAccountId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PmtCount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PmtDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PmtJournalNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PmtTotal</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PrimaryFormat</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Selected</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AllowDelete>No</AllowDelete>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>SKS_PP_Setup</Name>
			<Table>SKS_PP_Setup</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AccountType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ApplyDiscOfImportFile</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AutoCR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AutoCRAutoRev</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AutoCRCreateCR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AutoPostOnImportOptionInvOverPay</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AutoPostOnImportOptionInvShortpay</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AutoPostOnImportOptionPayEqualsInvoice</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AutoSubmitWF</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BaseHelpURL</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BRAllowReverseReconciliation</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BRArchiveNbr</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BRAutomaticallyPostGL</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BRAutoPostInvoiceNotFound</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BRAutoPostReversalJournal</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BRAutoReconcile</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BRBankHolidayGroupID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BRBankRevJournalName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BRBatchJobId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BRCreateBankStatements</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BRCreateBankStatementsIfNoTrans</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BRCustomerSearchAcrossCompany</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BRCustRemitAnalysisRuleGroup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BRDateTolerance</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BREdition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BREmail</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BRGLCreationCompany</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BRInCommID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BRInvoiceNotFound</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BRJournalName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BRNotifyMinusDays</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BRNotifyStatements</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BRNotifyUserId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BRPath</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BRReverseReconcilJournalName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CCAllowAmountChangeForSvcOrder</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CCAllowCCProcFromProjInvProposal</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CCAllowCCProcFromSvcOrder</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CCAllowDefaultCardToBeSet</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CCAllowRefundNoOrigTrans</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CCAllowVoidOfCaptureTrans</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CCAuthCodeValue</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CCAuthToCaptureAmtDiffAction</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CCAutoPreAuthOnSalesOrderConf</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CCCustCrdrCrdARSync</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CCCustCreditCardPaymSync</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CCDefaultSendEmailReceipt</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CCDisableStdSalesOrderPreAuth</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CCDisableStdSOPackSlipPreAuth</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CCDisableStdSOPickListPreAuth</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CCDisallowPaymEntryFormFromSalesOrder</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CCFailSOConfWhenPreAuthDeclines</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CCFailWHSWaveWhenPreAuthDeclines</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CCOneClickPaymReversalAutoPost</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CCOneClickPaymReversalPaymMode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CCPaymentEntryLevel</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CCPreAuthorization</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CCPreAuthorizationLevel</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CCProcessAutoPreAuthLevel</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CCProjSvcOrderPaymMode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CCReceiptEmailTemplate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CCRemoveCCFromSOForCCPaymVoid</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CCSalesInvoiceCaptureErrorOpt</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CCSalesOrderManageSync</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CCWalletDisallowCreate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CCWalletDisallowEdit</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CCWalletDisallowRemove</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustPaymentsDescription</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultDimensionFromInvoice</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EFTLicensedFormats</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FFTPM</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HelpAccessKey</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IHB_Active</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IHB_AppropriationfeeID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IHB_AppropriationFeeLedgerAccount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IHB_AttachFileName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IHB_AttachTemplate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IHB_BankHolidayGroupID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IHB_CalculationFrequencyEndMonth</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IHB_CalculationFrequencyStartMonth</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IHB_CommId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IHB_CreateFile</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IHB_FilePath</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IHB_FileType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IHB_Format</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IHB_GLJournalName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IHB_InhouseBankTransactionTypeMappingId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IHB_InterCoMOP</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IHB_InterestCalcFreq</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IHB_InterestCalcMethod</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IHB_InterestDaysCalcMethod</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IHB_InterestExpenseBankTransType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IHB_InterestExpenseLedgerDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IHB_InterestFilePath</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IHB_InterestIncomeBankTransType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IHB_InterestIncomeLedgerDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IHB_InterestMarkupId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IHB_InterestRateFormat</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IHB_InterestRepaymentNonCompounded</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IHB_OD_AttachTemplate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IHB_OD_FileName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IHB_OD_FileType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IHB_OD_ReplyToEmail</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IHB_OD_ReplyToName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IHB_OD_SendEmail</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IHB_OD_TemplateLanguage</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IHB_OverdraftInterestID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IHB_OverdraftInterestLedgerAccount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IHB_ReplyToEmail</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IHB_ReplyToName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IHB_SendEmail</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IHB_TemplateLanguage</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IHBArchiveNbr</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InvoiceSearchCrossComp</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>JournalName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LBAllowDuplicateChks</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LBAlwaysApplyDisc</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LBArchive</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LBArchiveNbr</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LBAutoCreateDepSlip</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LBAutoDefaultCust</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LBAutoIgnoreErr</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LBAutoPmtJrnl</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LBAutoServerSide</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LBCommType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LBCommUserProg</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LBDefaultFromCust</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LBDefaultFromJournal</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LBDelete</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LBDimensionInGrid</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LBErrorGridAllowMovePmt</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LBErrorShowChgdPmt</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LBFilePeriodsRet</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LBInboundCommID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LBLookupNumSeqMask</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LBMergeDataFile</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LBOnlyApplyGood</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LBPath</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LBPathArchive</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LBPmtPost</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LBRedSettleCRBal</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LBRedSettleInvBal</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LBSettlementMethod</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LBShowLookupFields</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LBSuggCustGood</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LBSumRefNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LBUseCheckDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LBUseInvoiceDimensions</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LBWOUseInvDim</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LBWriteOffId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LBWriteOffRuleCROverSettle</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MatchingRulesGroupId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MatchingRulesGroupIdCustSettle</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MethodOfPayment</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModBR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModCC</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModEPAY</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModLockbox</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModLockboxFormatID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modMCFAPDD</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModMultiCompany</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModPayLink</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModPFA</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModPosPay</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModPosPayFormatID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MoveGoodPaymToBatch</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NoPartialSettle</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PayJrnlDeposit</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymMustBeZero</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PFileNameAddDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PPAP</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PPAPCancelled</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PPAPRejected</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PPArchive</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PPArchiveNbr</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PPAuditRpt</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PPCommType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PPCommUserProg</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PPDelete</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PPFileHideCompBatch</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PPFileName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PPFileNameAddFileNbr</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PPFileNameCanChange</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PPFileNameConnector</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PPFilePeriodsRet</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PPHeadTrailID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PPNextFileNbr</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PPOutCommID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PPOutServerSideFileProc</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PPPath</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PPPathArchive</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PPPR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PPPRVoid</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RegAPEFT</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RegAREFT</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RegAuthorizedUsers</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RegBR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RegCustomerID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RegFX</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RegInhouseBank</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RegLB</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RegMandateAutomation</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RegMCFAPDD</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RegPaymFactoryAutomation</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RegPP</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RegUnlockKey</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RegVersion</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SepPaymByInv</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SetUpID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VendPaymentsDescription</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@SKS1460</Caption>
		<DataSource xmlns="">SKS_EFT_FilePmtSelection</DataSource>
		<Pattern xmlns="">SimpleList</Pattern>
		<PatternVersion xmlns="">1.1</PatternVersion>
		<Style xmlns="">SimpleList</Style>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>ActionPane</Name>
				<ElementPosition>715827882</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Type>ActionPane</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>ButtonGroup1</Name>
						<ElementPosition>1449551461</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>ButtonGroup</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>SKS_EFT_ViewPaymentDetails</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1431655764</ElementPosition>
								<Enabled>No</Enabled>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<HelpText>@SKS1466</HelpText>
								<Type>MenuFunctionButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataSource>SKS_EFT_FilePmtSelection</DataSource>
								<FormViewOption>Details</FormViewOption>
								<MenuItemName>SKS_EFT_ViewPaymentDetails</MenuItemName>
								<Text>@SKS1467</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>SelectAllBtn</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>Button</Type>
								<FormControlExtension
									i:nil="true" />
								<Text>@PerfCheck:SelectAll</Text>
							</AxFormControl>
						</Controls>
						<ArrangeMethod>Vertical</ArrangeMethod>
					</AxFormControl>
				</Controls>
				<AlignChild>No</AlignChild>
				<AlignChildren>No</AlignChildren>
				<ArrangeMethod>Vertical</ArrangeMethod>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>Body</Name>
				<ElementPosition>1431655764</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Pattern>CustomAndQuickFilters</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl>
						<Name>QuickFilterControl</Name>
						<FormControlExtension>
							<Name>QuickFilterControl</Name>
							<ExtensionComponents />
							<ExtensionProperties>
								<AxFormControlExtensionProperty>
									<Name>targetControlName</Name>
									<Type>String</Type>
									<Value>Grid</Value>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>defaultColumnName</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>placeholderText</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
							</ExtensionProperties>
						</FormControlExtension>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>FilterGrp</Name>
						<ElementPosition>1073741822</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormCheckBoxControl">
								<Name>ShowPaymentsAlreadyEFT</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1073741822</ElementPosition>
								<Enabled>No</Enabled>
								<FilterExpression>%1</FilterExpression>
								<Type>CheckBox</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Label>@SKS1461</Label>
								<Style>Toggle</Style>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormIntegerControl">
								<Name>SelectCount</Name>
								<AllowEdit>No</AllowEdit>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1610612733</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<LeftMode>RightEdge</LeftMode>
								<Type>Integer</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Label>@SKS1462</Label>
							</AxFormControl>
						</Controls>
						<Columns>2</Columns>
						<FramePosition>Inside</FramePosition>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalLeft</ArrangeMethod>
				<FrameType>None</FrameType>
				<Style>CustomFilter</Style>
				<ViewEditMode>Edit</ViewEditMode>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGridControl">
				<Name>Grid</Name>
				<ElementPosition>1610612734</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Type>Grid</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormCheckBoxControl">
						<Name>SKS_EFT_Selected</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>429496728</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>CheckBox</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<BackgroundColor>WindowBackground</BackgroundColor>
						<DataMethod>editPaymentSelected</DataMethod>
						<DataSource>SKS_EFT_FilePmtSelection</DataSource>
						<Label>@SYS5965</Label>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>SKS_EFT_FilePmtSelection_Company</Name>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>Company</DataField>
						<DataSource>SKS_EFT_FilePmtSelection</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormDateControl">
						<Name>SKS_EFT_FilePmtSelection_EffectiveDate</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>Date</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>EffectiveDate</DataField>
						<DataSource>SKS_EFT_FilePmtSelection</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>SKS_EFT_FilePmtSelection_PaymMode</Name>
						<AllowEdit>No</AllowEdit>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>644245092</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>PaymMode</DataField>
						<DataSource>SKS_EFT_FilePmtSelection</DataSource>
						<Label>@SYS21698</Label>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormComboBoxControl">
						<Name>TransferType</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>ComboBox</Type>
						<Visible>No</Visible>
						<FormControlExtension
							i:nil="true" />
						<DataMethod>transferType</DataMethod>
						<DataSource>SKS_EFT_FilePmtSelection</DataSource>
						<Items />
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormIntegerControl">
						<Name>SKS_EFT_FilePmtSelection_PmtCount</Name>
						<AllowEdit>No</AllowEdit>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>858993456</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>Integer</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>PmtCount</DataField>
						<DataSource>SKS_EFT_FilePmtSelection</DataSource>
						<Label>@SKS1465</Label>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>SKS_EFT_FilePmtSelection_PmtJournalNum</Name>
						<AllowEdit>No</AllowEdit>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1073741820</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>PmtJournalNum</DataField>
						<DataSource>SKS_EFT_FilePmtSelection</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormRealControl">
						<Name>SKS_EFT_FilePmtSelection_PmtTotal</Name>
						<AllowEdit>No</AllowEdit>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1288490184</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>Real</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>PmtTotal</DataField>
						<DataSource>SKS_EFT_FilePmtSelection</DataSource>
						<Label>@SYS75096</Label>
						<NoOfDecimals>-1</NoOfDecimals>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>LedgerCurrency</Name>
						<ElementPosition>1395864366</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataMethod>LedgerCurrencyCode</DataMethod>
						<DataSource>SKS_EFT_FilePmtSelection</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>SKS_EFTAP_File_FileNbr</Name>
						<AllowEdit>No</AllowEdit>
						<ElementPosition>1503238548</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<HelpText>@SKS:SKGAPIFileNbrHelpText</HelpText>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataMethod>ApFileNbr</DataMethod>
						<DataSource>SKS_EFT_FilePmtSelection</DataSource>
						<Label>@SKS:SKGAPIOutBoundId</Label>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCheckBoxControl">
						<Name>SKS_EFT_FilePmtSelection_FXAllProcessing</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1556925639</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>CheckBox</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<BackgroundColor>WindowBackground</BackgroundColor>
						<DataField>FXAProcessing</DataField>
						<DataSource>SKS_EFT_FilePmtSelection</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>SKS_EFT_FilePmtSelection_FormatGroup</Name>
						<ElementPosition>1610612730</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>FormatGroup</DataField>
						<DataSource>SKS_EFT_FilePmtSelection</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>SKS_EFT_FilePmtSelection_FormatId</Name>
						<ElementPosition>1646404124</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>FormatId</DataField>
						<DataSource>SKS_EFT_FilePmtSelection</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCheckBoxControl">
						<Name>SKS_EFT_FilePmtSelection_Primary</Name>
						<ElementPosition>1682195518</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>CheckBox</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<BackgroundColor>WindowBackground</BackgroundColor>
						<DataField>PrimaryFormat</DataField>
						<DataSource>SKS_EFT_FilePmtSelection</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>SKS_EFT_FilePmtSelection_PaymSpec</Name>
						<AllowEdit>No</AllowEdit>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1717986912</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>PaymSpec</DataField>
						<DataSource>SKS_EFT_FilePmtSelection</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormDateControl">
						<Name>SKS_EFT_FilePmtSelection_PmtDate</Name>
						<AllowEdit>No</AllowEdit>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1932735276</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>Date</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>PmtDate</DataField>
						<DataSource>SKS_EFT_FilePmtSelection</DataSource>
					</AxFormControl>
				</Controls>
				<AlternateRowShading>No</AlternateRowShading>
				<DataSource>SKS_EFT_FilePmtSelection</DataSource>
				<ShowRowLabels>No</ShowRowLabels>
				<Style>Tabular</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>