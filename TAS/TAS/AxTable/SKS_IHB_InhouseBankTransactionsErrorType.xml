<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_IHB_InhouseBankTransactionsErrorType</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class SKS_IHB_InhouseBankTransactionsErrorType extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>insertRecordWithTypeError</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the records with bank trans type as empty.
    /// </summary>
    public static void insertRecordWithTypeError(
        TransDate   _statementdate)
    {
        Args                                        args;
        Object                                      formRun;
        SKS_IHB_InhouseBankTransactionsErrorType    inhouseBankTrnsError;
        BankAccountTrans                            bankAccountTrans;
        RecordInsertList                            recordInsertList;
        SKS_IHB_InhouseBanks                        inhouseBanks;
        SKS_IHB_InhouseBankAccountsStatementDetails inhousebankAccountStatementPrev;
        SKS_IHB_InhouseBankStatementProcessBatch    inhouseBatchprocess = new SKS_IHB_InhouseBankStatementProcessBatch();
        
        recordInsertList        = new RecordInsertList(tableNum(SKS_IHB_InhouseBankTransactionsErrorType), true, true, true, false, true, InhouseBankTrnsError);
        
        delete_from inhouseBankTrnsError
            where inhouseBankTrnsError.CreatedBy == curUserId();
        

        while select AccountId from inhouseBanks
            where inhouseBanks.Mark == NoYes::Yes
        {
            inhousebankAccountStatementPrev =SKS_IHB_InhouseBankAccountsStatementDetails::findByAccAndStatementDatePrev(inhouseBanks.AccountId, _statementdate);
            while select bankAccountTrans
                where bankAccountTrans.AccountId == inhouseBanks.AccountId
                    && (bankAccountTrans.TransDate <= _statementdate
                    && bankAccountTrans.TransDate > inhousebankAccountStatementPrev.StatementDate)
                    && bankAccountTrans.BankTransType == ''
            {
                inhouseBankTrnsError.AccountId      = bankAccountTrans.AccountId;
                inhouseBankTrnsError.TransDate      = bankAccountTrans.TransDate;
                inhouseBankTrnsError.BankTransType  = bankAccountTrans.BankTransType;
                inhouseBankTrnsError.PaymReference  = bankAccountTrans.PaymReference;
                inhouseBankTrnsError.BankDepositNum = bankAccountTrans.DepositNum;
                inhouseBankTrnsError.ChequeNumber   = bankAccountTrans.ChequeNum;
                inhouseBankTrnsError.Currency       = bankAccountTrans.CurrencyCode;
                inhouseBankTrnsError.AmountCur      = bankAccountTrans.AmountCur;
                inhouseBankTrnsError.AmountMST      = bankAccountTrans.AmountMST;
                inhouseBankTrnsError.Voucher        = bankAccountTrans.Voucher;
                recordInsertList.add(InhouseBankTrnsError);
            }
        }
        recordInsertList.insertDatabase();

        /*if (SKS_IHB_InhouseBankTransactionsErrorType::isRecordExists())
        {
            args = new Args();
            args.name(formstr(SKS_IHB_InhouseBankTransactionErrorType));
            formRun = classfactory.formRunClass(args);
            formRun.init();
            formRun.run();
        }
        else
        {
            inhouseBatchprocess.createMultiThreadBatch(_statementdate);
        }*/
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRecordExists</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if any record is marked.
    /// </summary>
    public static boolean isRecordExists()
    {
        SKS_IHB_InhouseBankTransactionsErrorType    inhouseBankTransError;
        boolean                                     recordExists = NoYes::No;

        select firstonly AccountId from inhouseBankTransError;
        if(inhouseBankTransError.AccountId != '')
        {
            recordExists = NoYes::Yes;
        }
        return recordExists;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the bank trans type as user input.
    /// </summary>
    public void update()
    {
        SKS_IHB_InhouseBankTransactionsErrorType    inhouseBankTransError;
        BankAccountTrans                            bankAccountTrans;

        super();
        
        while select AccountId, Voucher, TransDate, BankTransType from inhouseBankTransError
            where inhouseBankTransError.BankTransType != ''
        {
            update_recordset bankAccountTrans
                setting BankTransType = inhouseBankTransError.BankTransType
            where  bankAccountTrans.AccountId == inhouseBankTransError.AccountId
                    && bankAccountTrans.Voucher == inhouseBankTransError.Voucher
                    && bankAccountTrans.TransDate == inhouseBankTransError.TransDate;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@SKS:SKSInhouseTransactionError</DeveloperDocumentation>
	<Label>@SKS:SKGIHBErrorType</Label>
	<TableGroup>TransactionLine</TableGroup>
	<TitleField1>AccountId</TitleField1>
	<TitleField2>TransDate</TitleField2>
	<CreatedBy>Yes</CreatedBy>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Currency</Name>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AccountId</Name>
			<ExtendedDataType>CompanyBankAccountId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>TransDate</Name>
			<ExtendedDataType>TransDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Voucher</Name>
			<ExtendedDataType>Voucher</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BankTransType</Name>
			<ExtendedDataType>BankTransactionType</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PaymReference</Name>
			<ExtendedDataType>PaymReference</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BankDepositNum</Name>
			<ExtendedDataType>BankDepositNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ChequeNumber</Name>
			<ExtendedDataType>BankChequeNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AmountCur</Name>
			<ExtendedDataType>AmountCur</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AmountMST</Name>
			<ExtendedDataType>AmountMST</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Reconciled</Name>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes />
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>