<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_IHB_InhouseBankAccountsStatementDetails</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class SKS_IHB_InhouseBankAccountsStatementDetails extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findByRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds records based on recid.
    /// </summary>
    public static SKS_IHB_InhouseBankAccountsStatementDetails findByRecId(RecId   _recId) 
    {
        SKS_IHB_InhouseBankAccountsStatementDetails     inhouseBankAccount;

        select firstonly inhouseBankAccount
            where inhouseBankAccount.RecId == _recId;

        return inhouseBankAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByAccAndStatementDatePrev</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds records based on accountId and statement date.
    /// </summary>
    /// <param name = "_accountId"></param>
    /// <param name = "_statementDate"></param>
    /// <returns></returns>
    public static SKS_IHB_InhouseBankAccountsStatementDetails findByAccAndStatementDatePrev(
        CompanyBankAccountId    _accountId,
        TransDate               _statementDate)
    {
        SKS_IHB_InhouseBankAccountsStatementDetails     inhouseBankAccount;

        select firstonly inhouseBankAccount order by Statementdate desc
            where inhouseBankAccount.AccountId == _accountId
            && inhouseBankAccount.Statementdate < _statementDate ;

        return inhouseBankAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByAccLastStatementDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds latest records based on accountId.
    /// </summary>
    /// <param name = "_accountId"></param>
    /// <param name = "_statementDate"></param>
    /// <returns></returns>
    public static SKS_IHB_InhouseBankAccountsStatementDetails findByAccLastStatementDate(
        CompanyBankAccountId    _accountId)
    {
        SKS_IHB_InhouseBankAccountsStatementDetails     inhouseBankAccount;

        select firstonly inhouseBankAccount order by RecId desc
            where inhouseBankAccount.AccountId == _accountId;

        return inhouseBankAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByAccAndStatementDatePrevAndOn</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds records based on accountId and statement date.
    /// </summary>
    /// <param name = "_accountId"></param>
    /// <param name = "_statementDate"></param>
    /// <returns></returns>
    public static SKS_IHB_InhouseBankAccountsStatementDetails findByAccAndStatementDatePrevAndOn(
        CompanyBankAccountId    _accountId,
        TransDate               _statementDate)
    {
        SKS_IHB_InhouseBankAccountsStatementDetails     inhouseBankAccount;

        select firstonly inhouseBankAccount order by RecId desc
            where inhouseBankAccount.AccountId == _accountId
            && inhouseBankAccount.Statementdate <= _statementDate ;

        return inhouseBankAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNextOpenDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the next open date.
    /// </summary>
    public static transdate getNextOpenDate(CompanyBankAccountId    _accountId)
    {
        SKS_IHB_InhouseBankAccountsStatementDetails inhouseBankAccount;
        TransDate                                   nextOpenDate;

        select firstonly Statementdate from inhouseBankAccount order by Statementdate desc
            where inhouseBankAccount.AccountId == _accountId;
        if(inhouseBankAccount)
        {
            nextOpenDate = SKS_IHB_InhouseBankAccountsStatementDetails::nextDateCalc(inhouseBankAccount.StatementDate, 
																					 SKS_PP_Bank::find(_accountId).IHB_BankHolidayGroupId /*CR9812*/);
        }

        return nextOpenDate;

    }

]]></Source>
			</Method>
			<Method>
				<Name>nextDateCalc</Name>
				<Source><![CDATA[
    /// <summary>
    /// calculates the next open date.
    /// </summary>
    /// <param name = "_opendate"></param>
    /// <returns></returns>
    public static TransDate  nextDateCalc(TransDate					_opendate,
                                          SKS_EB_BankHolidayGroupID _bankHolidayGroupId /*CR9812*/)
    {
        TransDate  nextOpenDateLoc;
        SKS_EB_BankHolidays     locSKS_EB_BankHolidays; //CR9812
        
        nextOpenDateLoc = _opendate + 1;

        locSKS_EB_BankHolidays = SKS_EB_BankHolidays::find(_bankHolidayGroupId, nextOpenDateLoc); //CR9812

        if (dayOfWk(nextOpenDateLoc) == 6 || dayOfWk(nextOpenDateLoc) == 7 || locSKS_EB_BankHolidays /*CR9812*/)
        {
            nextOpenDateLoc = SKS_IHB_InhouseBankAccountsStatementDetails::nextDateCalc(nextOpenDateLoc, _bankHolidayGroupId);
        }
        return nextOpenDateLoc;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@SKS:SKSBankAccStatmentDet</DeveloperDocumentation>
	<Label>@SKS:SKGIHBAccountStatementDtls</Label>
	<TableGroup>TransactionLine</TableGroup>
	<TitleField1>AccountId</TitleField1>
	<TitleField2>Name</TitleField2>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>StatementDetails</Name>
			<Label>@SKS:SKGStatementDetails</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccountId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StatementNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StatementDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EndingBalance</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AccountId</Name>
			<ExtendedDataType>CompanyBankAccountId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<ExtendedDataType>Name</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>StatementNumber</Name>
			<ExtendedDataType>BankAccountStatementNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>StatementDate</Name>
			<ExtendedDataType>SKS_IHB_TranDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>EndingBalance</Name>
			<ExtendedDataType>AmountCur</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>AccountIdIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>AccountId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>StatementNumber</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>