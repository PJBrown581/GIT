<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFTAP_File</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class SKS_EFTAP_File extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>Alerts</Name>
				<Source><![CDATA[
        [SysClientCacheDataMethodAttribute]
    display SKS_EFT_Alert Alerts(SKS_EFTAP_File t)
    {
        date Date1;
        int  days;
        ;
        //should we do alert
        if(t.FileStatus == SKS_EFT_FileStatus::AdvEmailFailed || t.FileStatus == SKS_EFT_FileStatus::AdvEmailNotSent ||
        t.FileStatus == SKS_EFT_FileStatus::AdvEmailSent || t.FileStatus == SKS_EFT_FileStatus::FileCreated)
        {
            // Determine date
            if(t.TransmitDate == mkDate(1,1,1900))
            {
                Date1 = t.EffectiveDate;
            }
            else
            {
                Date1 = t.TransmitDate;
            }

            days = intvNo(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()), Date1, IntvScale::YearMonthDay);
            if (days == 0)
            {
                return "@SKS1998";
            }
            else if(days < 0 && days >= -5) //advance File status
            {
                return strFmt("@SKS2000", -days);
            }
            else if(days > 0)
            {
                return strFmt("@SKS1999", days);
            }
            return '';
        }
        else
        {
            return '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    public void create(SKS_EFT_Module _module = SKS_EFT_Module::AP,
                       boolean _newPrenotesEnabled = false,
                       boolean _newPrenotesOn = false,
                       SKS_EFT_FileFormat _SKS_EFT_FileForamt = null)
    {
        SKS_EFT_FileNbr  NextFileNbr;
        SKS_EB_FileStorage sks_eb_filestorage;      //BankFabric
        ;

        select firstonly sks_eb_filestorage;    //BankFabric
        this.BFBankIntegration = (sks_eb_filestorage.StorageOption_APEFTFXDD == SKS_EB_BankIntegOptWithNoLicense::FileHubLocalEnumValue) ? SKS_BF_BankIntType::FileHubLocal : SKS_BF_BankIntType::BankFabric;

        if(_module == SKS_EFT_Module::AP)
        {
            this.EFTFileType = SKS_EFT_Module::AP;
            if(!_SKS_EFT_FileForamt || _SKS_EFT_FileForamt.EffectiveDateMethod == SKS_EFT_EffectiveDateMethod::FormatOffset)
            {
                this.EffectiveDate = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());
            }
            else
            {
                this.EffectiveDate = dateNull();
            }
        }
        else if(_module == SKS_EFT_Module::CNP)
        {
            this.EFTFileType = SKS_EFT_Module::CNP;
            if(!_SKS_EFT_FileForamt || _SKS_EFT_FileForamt.EffectiveDateMethod == SKS_EFT_EffectiveDateMethod::FormatOffset)
            {
                this.EffectiveDate = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());
            }
            else
            {
                this.EffectiveDate = dateNull();
            }
        }
        else if(_module == SKS_EFT_Module::BTB)
        {
            this.EFTFileType = SKS_EFT_Module::BTB;
            this.EffectiveDate = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());
        }
        else
        {
            this.EFTFileType = SKS_EFT_Module::AR;
            this.EffectiveDate = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());
        }
        
        ttsbegin;
        if(_module == SKS_EFT_Module::AP)
        {
            NextFileNbr = NumberSeq::newGetNum(SKS_PP_Setup::numRefAPEFTPlusNextJournalNumber()).num();
        }
        else if(_module == SKS_EFT_Module::BTB)
        {
            NextFileNbr = NumberSeq::newGetNum(SKS_PP_Setup::numRefBTBNextJournalNumber()).num();
        }
        else if(_module == SKS_EFT_Module::CNP)
        {
            NextFileNbr = NumberSeq::newGetNum(SKS_PP_Setup::numRefCNPNextJournalNumber()).num();
        }
        else
        {
            NextFileNbr = NumberSeq::newGetNum(SKS_PP_Setup::numRefAREFTPlusNextJournalNumber()).num();
        }
        ttscommit;

        this.FileNbr = NextFileNbr;

        If (_newPrenotesEnabled)
        {
            If (_newPrenotesOn)
            {
                this.JournalOption = SKS_EFT_FileJournalOption::PreNotesOnly;
            }
            else
            {
                this.JournalOption = SKS_EFT_FileJournalOption::JournalsPreNotes;
            }
        }
        else
        {
            this.JournalOption = SKS_EFT_FileJournalOption::JournalsOnly;
        }

        if(this.isAPPaymentPostingDateUpdateRequired())
        {
            this.updateRelatedLedgerJournalTransDate();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getApprovedCount</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute]
    public display SKS_EB_Count getApprovedCount()
    {
        return this.getPaymentLineStatusCount(CustVendPaymStatus::Confirmed);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymentCount</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute]
    public display SKS_EB_Count getPaymentCount()
    {
        SKS_EFT_FileDetail lSKS_EFT_FileDetail;

        select count(RecId) from lSKS_EFT_FileDetail
            where lSKS_EFT_FileDetail.FileRecId == this.RecId &&
                ((lSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments && !this.FXAProcessing) ||
                (lSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::FXAllVendor && this.FXAProcessing)) &&
                lSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary;

        return lSKS_EFT_FileDetail.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymentLineStatusCount</Name>
				<Source><![CDATA[
    public SKS_EB_Count getPaymentLineStatusCount(CustVendPaymStatus _CustVendPaymStatus)
    {
        SKS_EFT_FileDetail lSKS_EFT_FileDetail;
        LedgerJournalTrans lLedgerJournalTrans;
        int                 approvedcount = 0; //SKS_FDD_10590

        if(!SKS_PP_Setup::find().modMCFAPDD)
        {
            select count(RecId) from lSKS_EFT_FileDetail
                where lSKS_EFT_FileDetail.FileRecId == this.RecId &&
                    ((lSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments && !this.FXAProcessing) ||
                    (lSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::FXAllVendor && this.FXAProcessing)) &&
                    lSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary
            join RecId, PaymentStatus from lLedgerJournalTrans
                where lLedgerJournalTrans.RecId == lSKS_EFT_FileDetail.PaymentLineRecId &&
                    lLedgerJournalTrans.PaymentStatus == _CustVendPaymStatus;

            return lSKS_EFT_FileDetail.RecId;
        }
        else
        {
        //SKS_FDD_10590 -->
            while select PaymentCompany, PaymentLineRecId from lSKS_EFT_FileDetail
                where lSKS_EFT_FileDetail.FileRecId == this.RecId &&
                    ((lSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments && !this.FXAProcessing) ||
                    (lSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::FXAllVendor && this.FXAProcessing)) &&
                    lSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary
            {
                changecompany(lSKS_EFT_FileDetail.PaymentCompany ? lSKS_EFT_FileDetail.PaymentCompany : lSKS_EFT_FileDetail.DataAreaId)
                {
                    lLedgerJournalTrans = null;

                    select firstonly RecId, PaymentStatus from lLedgerJournalTrans where
                        lLedgerJournalTrans.RecId == lSKS_EFT_FileDetail.PaymentLineRecId &&
                        lLedgerJournalTrans.PaymentStatus == _CustVendPaymStatus;
                    if(lLedgerJournalTrans.RecId)
                    {
                        approvedcount ++;
                    }
                }
            }

            return approvedcount;
        }
        //SKS_FDD_10590 <--
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRejectedCount</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute]
    public display SKS_EB_Count getRejectedCount()
    {
        SKS_EFT_FileDetail lSKS_EFT_FileDetail;

        select count(RecId) from lSKS_EFT_FileDetail
            where lSKS_EFT_FileDetail.FileRecId == this.RecId &&
                ((lSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments && !this.FXAProcessing) ||
                (lSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::FXAllVendor && this.FXAProcessing)) &&
                lSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary &&
                lSKS_EFT_FileDetail.PaymentRejected == NoYes::Yes;

        return lSKS_EFT_FileDetail.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasLedgerJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Indicates whether there is at least one LedgerJournalTrans record linked to this record
    /// </summary>
    /// <returns>
    ///     True if there is at least one LedgerjournalTrans record
    /// </returns>
    /// <remarks>
    ///     Indicates whether there is at least one LedgerJournalTrans record linked to this record. Only either posted or not posted journal is checked
    /// </remarks>
    /// <param name="_posted">
    ///     Check posted or not posted LedgerJournal
    /// </param>
    public boolean hasLedgerJournalTrans(NoYes  _posted)
    {
        LedgerJournalTrans          ledgerJournalTrans;
        LedgerJournalTable          ledgerJournalTable;
        SKS_EFT_FilePmtSelection    sks_eft_FilePmtSelection;
        TransDate                   fileEffectiveDate = this.EffectiveDate;//SKS_FDD_10590

        ;
        //SKS_FDD_10590 -->
        select firstonly crosscompany PmtJournalNum, RecId, Company from sks_eft_FilePmtSelection where sks_eft_FilePmtSelection.FileRecId == this.RecId;

        if(sks_eft_FilePmtSelection.RecId)
        {
            changecompany(sks_eft_FilePmtSelection.Company ? sks_eft_FilePmtSelection.Company : sks_eft_FilePmtSelection.DataAreaId)
            {
                ledgerJournalTrans = null;
                LedgerJournalTable = null;

                select firstOnly RecId from ledgerJournalTrans where
                    ledgerJournalTrans.SKS_EFT_APPmtSelectionRecId == sks_eft_FilePmtSelection.RecId &&
                    ledgerJournalTrans.TransDate != fileEffectiveDate
                exists join ledgerJournalTable where ledgerJournalTrans.JournalNum == ledgerJournalTable.JournalNum &&
                    ledgerJournalTable.JournalNum == sks_eft_FilePmtSelection.PmtJournalNum &&
                    ledgerJournalTable.Posted == _posted;
            }
        }
        //SKS_FDD_10590 -->
        return ledgerJournalTrans.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAPPaymentPostingDateUpdateRequired</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Indicates whether the update of linked payment journal lines is required.
    /// </summary>
    /// <returns>
    ///     True if there is at least one payment line in non-posted journal linked to the SKS_EFTAP_File record
    /// </returns>
    /// <remarks>
    ///     The update of linked payment lines is only required if the effective date is different to payment line transdate and if the payment journal is not yet posted.
    ///     The parameter in AP EFT + Setup defines whether the function is on or off
    /// </remarks>
    public boolean isAPPaymentPostingDateUpdateRequired()
    {
        boolean                     ret;

        if (!SKS_EFT_Setup::find().APUpdatePaymPostingDate)
        {
            return ret;
        }

        // Is there any unposted LedgerJournalTrans
        ret = this.hasLedgerJournalTrans(NoYes::No);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setOffsetDate</Name>
				<Source><![CDATA[
    public void setOffsetDate(SKS_EFT_FormatId _SKS_EFT_FormatId,
                              SKS_EB_BankHolidayGroupId _SKS_EB_BankHolidayGroupId,
                              SKS_EB_Date _FilePmtSelectionDate = dateNull(),
                              SKS_EFT_Module _SKS_EFT_Module = SKS_EFT_Module::AP,
                              PaymSpec _paymSpec = "")
    {
        SKS_EFT_FileFormat lSKS_EFT_FileFormat;
        SKS_EFT_Setup locsks_eft_setup;
        SKS_EFT_FileFormatPaymSpec lSKS_EFT_FileFormatPaymSpec;



        if(_SKS_EFT_Module == SKS_EFT_Module::AP)
        {
            select firstonly EffectiveDateOffset, EffectiveDateMethod, SupportsMultipleEffectiveDates from lSKS_EFT_FileFormat where lSKS_EFT_FileFormat.FormatId == _SKS_EFT_FormatId;
            select firstonly EffectiveDateOffset from lSKS_EFT_FileFormatPaymSpec where lSKS_EFT_FileFormatPaymSpec.FormatId == _SKS_EFT_FormatId && lSKS_EFT_FileFormatPaymSpec.PaymSpec == _paymSpec;
        }
        else if(_SKS_EFT_Module == SKS_EFT_Module::BTB)
        {
            select firstonly BTBDateOffset, BTBPayDateIsEffDate  from lSKS_EFT_FileFormat where lSKS_EFT_FileFormat.FormatId == _SKS_EFT_FormatId;
            //select EffectiveDateOffset, EffectiveDateMethod from lSKS_EFT_FileFormat where lSKS_EFT_FileFormat.FormatId == _SKS_EFT_FormatId;
        }
        else if(_SKS_EFT_Module == SKS_EFT_Module::CNP)
        {
            select firstonly EffectiveDateOffset, EffectiveDateMethod,SupportsMultipleEffectiveDates from lSKS_EFT_FileFormat where lSKS_EFT_FileFormat.FormatId == _SKS_EFT_FormatId;
            select firstonly EffectiveDateOffset from lSKS_EFT_FileFormatPaymSpec where lSKS_EFT_FileFormatPaymSpec.FormatId == _SKS_EFT_FormatId && lSKS_EFT_FileFormatPaymSpec.PaymSpec == _paymSpec;
        }
        else
        {
            select firstonly ARDateOffset, PayDateIsEffDate, DaysPriorToEffectiveDate, EffectiveDateOffsetPaymSpec  from lSKS_EFT_FileFormat where lSKS_EFT_FileFormat.FormatId == _SKS_EFT_FormatId;

            select firstonly AutoSendFileOnEffectiveDate from locsks_eft_setup;

            select firstonly AREffectiveDateOffset from lSKS_EFT_FileFormatPaymSpec where lSKS_EFT_FileFormatPaymSpec.FormatId == _SKS_EFT_FormatId && lSKS_EFT_FileFormatPaymSpec.PaymSpec == _paymSpec;
        }

        if(_SKS_EFT_Module == SKS_EFT_Module::AR)
        {
            if(this.PmtCount == 1)
            {
                if(lSKS_EFT_FileFormat.PayDateIsEffDate == NoYes::Yes)
                {
                    if(_FilePmtSelectionDate)
                    {
                        this.EffectiveDate = _FilePmtSelectionDate;
                    }
                    else
                    {
                        if(this.EffectiveDate == dateNull())
                        {
                            this.EffectiveDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
                        }
                    }

                    if(locsks_eft_setup.AutoSendFileOnEffectiveDate == NoYes::Yes)
                    {
                        this.TransmitDate = SKS_EFT_Processing::GetOffsetDate(-lSKS_EFT_FileFormat.DaysPriorToEffectiveDate, this.EffectiveDate, _SKS_EB_BankHolidayGroupId);
                    }
                    else
                    {
                        this.TransmitDate = SKS_EFT_Processing::GetOffsetDate(-lSKS_EFT_FileFormat.ARDateOffset, this.EffectiveDate, _SKS_EB_BankHolidayGroupId);
                    }
                }
                else if(lSKS_EFT_FileFormat.EffectiveDateOffsetPaymSpec == NoYes::Yes)
                {
                    this.EffectiveDate = SKS_EFT_Processing::GetOffsetDate(lSKS_EFT_FileFormatPaymSpec.AREffectiveDateOffset, this.EffectiveDate, _SKS_EB_BankHolidayGroupId);

                    if(locsks_eft_setup.AutoSendFileOnEffectiveDate == NoYes::Yes)
                    {
                        this.TransmitDate = SKS_EFT_Processing::GetOffsetDate(-lSKS_EFT_FileFormat.DaysPriorToEffectiveDate, this.EffectiveDate, _SKS_EB_BankHolidayGroupId);
                    }
                    else
                    {
                        this.TransmitDate = SKS_EFT_Processing::GetOffsetDate(-lSKS_EFT_FileFormatPaymSpec.AREffectiveDateOffset, this.EffectiveDate, _SKS_EB_BankHolidayGroupId);
                    }
                }
                else
                {
                    this.EffectiveDate = SKS_EFT_Processing::GetOffsetDate(lSKS_EFT_FileFormat.ARDateOffset, this.EffectiveDate, _SKS_EB_BankHolidayGroupId);
                }
            }
            else if(this.PmtCount == 0)
            {
                if(this.EffectiveDate == dateNull())
                {
                    this.EffectiveDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
                }
                this.TransmitDate = dateNull();
            }
        }
        else if(_SKS_EFT_Module == SKS_EFT_Module::BTB)
        {
            if(this.PmtCount == 1)
            {
                if(lSKS_EFT_FileFormat.BTBPayDateIsEffDate == NoYes::Yes)
                {
                    if(_FilePmtSelectionDate)
                    {
                        this.EffectiveDate = _FilePmtSelectionDate;
                    }
                    else
                    {
                        if(this.EffectiveDate == dateNull())
                        {
                            this.EffectiveDate = today();
                        }
                    }
                    //this.TransmitDate = SKS_EFT_Processing::GetOffsetDate(-lSKS_EFT_FileFormat.BTBDateOffset, this.EffectiveDate, _SKS_EB_BankHolidayGroupId);
                }
                else
                {
                    this.EffectiveDate = SKS_EFT_Processing::GetOffsetDate(lSKS_EFT_FileFormat.BTBDateOffset, this.EffectiveDate, _SKS_EB_BankHolidayGroupId);
                }
            }
            else if(this.PmtCount == 0)
            {
                if(this.EffectiveDate == dateNull())
                {
                    this.EffectiveDate = today();
                }
                //this.TransmitDate = dateNull();
            }
        }
        else
        {
            if(this.PmtCount == 1)
            {
                if(lSKS_EFT_FileFormat.EffectiveDateMethod == SKS_EFT_EffectiveDateMethod::FormatOffset)
                {
                    if(_FilePmtSelectionDate)
                    {
                        this.EffectiveDate = SKS_EFT_Processing::GetOffsetDate(lSKS_EFT_FileFormat.EffectiveDateOffset, _FilePmtSelectionDate, _SKS_EB_BankHolidayGroupId);
                    }
                    else
                    {
                        this.EffectiveDate = SKS_EFT_Processing::GetOffsetDate(lSKS_EFT_FileFormat.EffectiveDateOffset, DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()), _SKS_EB_BankHolidayGroupId);
                    }
                }
                else if(lSKS_EFT_FileFormat.EffectiveDateMethod == SKS_EFT_EffectiveDateMethod::PaymSpecOffset)
                {
                    if(lSKS_EFT_FileFormat.SupportsMultipleEffectiveDates == NoYes::No)
                    {
                        this.EffectiveDate = SKS_EFT_Processing::GetOffsetDate(lSKS_EFT_FileFormatPaymSpec.EffectiveDateOffset, DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()), _SKS_EB_BankHolidayGroupId);
                    }
                    else
                    {
                        this.EffectiveDate = dateNull();
                    }
                }
            }
            else if(this.PmtCount == 0)
            {
                if(lSKS_EFT_FileFormat.EffectiveDateMethod == SKS_EFT_EffectiveDateMethod::FormatOffset)
                {
                    this.EffectiveDate = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());
                }
                else
                {
                    this.EffectiveDate = dateNull();
                }
            }
        }

        if (this.isAPPaymentPostingDateUpdateRequired() && this.EffectiveDate != dateNull())
        {
            this.updateRelatedLedgerJournalTransDate();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sks_eft_FilePmtSelection</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Return all sks_eft_FilePmtSelection records linked to the current record
    /// </summary>
    /// <returns>
    ///     Recordset of linked SKS_EFT_FilePmtSelection records
    /// </returns>
    /// <param name="_forUpdate">
    ///     Indicates whether records to be selected for update
    /// </param>
    public SKS_EFT_FilePmtSelection sks_eft_FilePmtSelection(boolean _forUpdate = false)
    {
        SKS_EFT_FilePmtSelection    sks_eft_FilePmtSelection = null;// SKS_FDD_10590

        sks_eft_FilePmtSelection.selectForUpdate(_forUpdate);

        select crosscompany sks_EFT_FilePmtSelection // SKS_FDD_10590
            where sks_EFT_FilePmtSelection.FileRecId == this.RecId  && sks_EFT_FilePmtSelection.FileRecId != 0;

        return sks_eft_FilePmtSelection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update(SKS_EFT_FilePmtSelection _sks_eft_FilePmtSelection = null)
    {
        SKS_EFT_InboundFile lSKS_EFT_InboundFile;

        ttsBegin;
        if (this.orig().FileStatus != this.FileStatus )
        {
            if (this.FileStatus == SKS_EFT_FileStatus::Completed ||
                this.FileStatus == SKS_EFT_FileStatus::CompletedNoEmail)
            {
                lSKS_EFT_InboundFile.skipDataMethods(true);
                update_recordSet lSKS_EFT_InboundFile setting OutboundComplete = NoYes::Yes
                    where lSKS_EFT_InboundFile.OutboundFileRecId == this.RecId &&
                        lSKS_EFT_InboundFile.OutboundComplete != NoYes::Yes;
            }
        }
        // sks_eft_FilePmtSelection buffer is requred for the case when the selection of payments is done in the form. As the update of sks_eft_FilePmtSelection happens after SKS_EFTAP_File update, the buffer is requred here
        if (_sks_eft_FilePmtSelection != null || (this.orig().EffectiveDate != this.EffectiveDate && this.isAPPaymentPostingDateUpdateRequired()))
        {
            this.updateRelatedLedgerJournalTransDate(_sks_eft_FilePmtSelection);
        }

        super();
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRelatedLedgerJournalTransDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Run the update of the related payment lines transdate
    /// </summary>
    /// <remarks>
    ///     Run update of all related payment lines where the transaction date is different to effective date
    /// </remarks>
    /// <param name="_sks_eft_FilePmtSelection">A specific buffer to update payments for (used when selecting / deselecting the payments in Senad later scenario)</param>
    public void updateRelatedLedgerJournalTransDate(SKS_EFT_FilePmtSelection _sks_eft_FilePmtSelection = null)
    {
        SKS_EFT_FilePmtSelection    sks_eft_FilePmtSelection;

        if ((!SKS_EFT_Setup::find().APUpdatePaymPostingDate) || (this.EffectiveDate == dateNull()) )
        {
            return;
        }

        setPrefix("@SKS3785");
        ttsBegin;
        if (_sks_eft_FilePmtSelection)
        {
            changecompany(_sks_eft_FilePmtSelection.Company ? _sks_eft_FilePmtSelection.Company : _sks_eft_FilePmtSelection.DataAreaId) //SKS_FDD_10590
            {
                _sks_eft_FilePmtSelection.updateOpenLedgerJournalTransDate(this.EffectiveDate);
            }
        }
        else
        {
            sks_eft_FilePmtSelection = this.sks_eft_FilePmtSelection();

            while (sks_eft_FilePmtSelection)
            {
                changecompany(sks_eft_FilePmtSelection.Company ? sks_eft_FilePmtSelection.Company : sks_eft_FilePmtSelection.DataAreaId)//SKS_FDD_10590
                {
                    sks_eft_FilePmtSelection.updateOpenLedgerJournalTransDate(this.EffectiveDate);
                }
                next sks_eft_FilePmtSelection;
            }
        }
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldValue</Name>
				<Source><![CDATA[
    public boolean validateFieldValue(FieldName _fieldName, int _arrayIndex = 1)
    {
        boolean ret;

        ret = super(_fieldName, _arrayIndex);

        if (ret
            && this.RecId
            && _fieldName == fieldStr(SKS_EFTAP_File, EffectiveDate)
            && this.orig().EffectiveDate != this.EffectiveDate
            && this.hasLedgerJournalTrans(NoYes::Yes))
        {
            ret = checkFailed("@SKS3786");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static SKS_EFTAP_File find(SKS_EFT_FileNbr _fileNbr,
                                     SKS_EFT_Module     _module,
                                     boolean            _forUpdate = false)
    {
        SKS_EFTAP_File sks_eftap_file;

        if (_fileNbr)
        {
            if (_forUpdate)
            {
                sks_eftap_file.selectForUpdate(_forUpdate);
            }

            select sks_eftap_file
                where sks_eftap_file.FileNbr == _fileNbr &&
                      sks_eftap_file.EFTFileType == _module;
        }

        return sks_eftap_file;
    }

]]></Source>
			</Method>
			<Method>
				<Name>multipleFormats</Name>
				<Source><![CDATA[
    public static server boolean multipleFormats(SKS_EFT_FilePmtSelection _SKS_EFT_FilePmtSelection, boolean _remove = false)
    {
        boolean ret = false;
        SKS_EFT_FilePmtSelection lSKS_EFT_FilePmtSelection;
        int                 counter;

        if(!_remove)
        {
            //If you are checking an unchecked line, select from Payments where FileRecId = the current FileRecId and FormatId is different from the current FormatId.
            //If a different format id is found, then return true
            select count (FileRecId) from lSKS_EFT_FilePmtSelection where lSKS_EFT_FilePmtSelection.FileRecId == _SKS_EFT_FilePmtSelection.FileRecId
                                                                       && lSKS_EFT_FilePmtSelection.FormatId != _SKS_EFT_FilePmtSelection.FormatId;

            if(lSKS_EFT_FilePmtSelection.FileRecId > 0 )
            {
                ret = true;
            }

        }
        else
        {
            //If you are unchecking a checked line, Group all selected records, excluding the current record, by format id and spin through the first 10 groups,
            //where the FileRecId = the current FileRecId and if you find more then one group, then return true for multiple formats.
            While select firstOnly10 FormatId from lSKS_EFT_FilePmtSelection group by FormatId
                                                                                where lSKS_EFT_FilePmtSelection.FileRecId == _SKS_EFT_FilePmtSelection.FileRecId
                                                                                   && lSKS_EFT_FilePmtSelection.RecId != _SKS_EFT_FilePmtSelection.RecId
            {
                counter++;
                if(counter > 1 )
                {
                    ret = true;
                    break;
                }
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    public void delete()
    {
        ttsbegin;
        super();

        SKS_EFT_FileDetail lSKS_EFT_FileDetail;
        lSKS_EFT_FileDetail.skipEvents(true);

        delete_from lSKS_EFT_FileDetail
            where lSKS_EFT_FileDetail.FileRecId == this.RecId;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    public void insert()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPositiveAmount</Name>
				<Source><![CDATA[
    real getPositiveAmount(real _amount)
    {
        real amount;

        amount = _amount;

        if(amount < 0)
        {
            amount = amount * -1;
        }
    
        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPmtTotal</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute]
    public display AmountMST getPmtTotal()
    {
        SKS_EFTAP_File locSKS_EFTAP_File;

        select firstonly PmtTotal,EFTFileType from locSKS_EFTAP_File where locSKS_EFTAP_File.RecId == this.RecId;

        if(locSKS_EFTAP_File.EFTFileType == SKS_EFT_Module::CNP)
        {
            return this.getPositiveAmount(locSKS_EFTAP_File.PmtTotal);
        }
        else
        {
            return locSKS_EFTAP_File.PmtTotal;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOriginalPmtTotal</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute]
    public display AmountMST getOriginalPmtTotal()
    {
        SKS_EFTAP_File locSKS_EFTAP_File;

        select firstonly OriginalPmtTotal,EFTFileType from locSKS_EFTAP_File where locSKS_EFTAP_File.RecId == this.RecId;

        if(locSKS_EFTAP_File.EFTFileType == SKS_EFT_Module::CNP)
        {
            return this.getPositiveAmount(locSKS_EFTAP_File.OriginalPmtTotal);
        }
        else
        {
            return locSKS_EFTAP_File.OriginalPmtTotal;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>SKS_PositivePay</ConfigurationKey>
	<DeveloperDocumentation>@SKS1650</DeveloperDocumentation>
	<FormRef>SKS_EFTAP_CreateSendFiles</FormRef>
	<Label>@SKS1223</Label>
	<TableGroup>TransactionHeader</TableGroup>
	<TitleField1>FileNbr</TitleField1>
	<TitleField2>FileStatus</TitleField2>
	<ClusteredIndex>FileNbrIdx</ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<PrimaryIndex>FileNbrIdx</PrimaryIndex>
	<ReplacementKey>FileNbrIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FileNbr</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransmitDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FileStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PmtCount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PmtTotal</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FormatId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FileNbr</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EFTFileType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>FileInfo</Name>
			<Label>@SYS26552</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FileName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FilePath</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransmitDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InboundStatusChange</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InboundStatusesRecId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>FormatKeys</Name>
			<Label>@SKS2734</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InOutKeyFormat1</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InOutKeyFormat2</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InOutKeyFormat3</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>FXAllOverview</Name>
			<Label>@SKS3604</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FXAProcessing</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>FXAllTab</Name>
			<Label>@SKS3604</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FXATradeSent</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FXAAllTradeAcksReceived</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FXASettlementConfReceived</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FXAPaymentInstructionsSent</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FileNbr</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CommID</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>OutboundLink</Name>
			<Label>@SKS2737</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FileNbr</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Processing</Name>
			<Label>@SYS8577</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Selected</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ControlFileName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ControlFileFormatId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Status</Name>
			<Label>@SYS80127</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FileStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ComputerName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PmtCount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PmtTotal</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OriginalPmtTotal</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransmitDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FormatId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EffectiveDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>JournalOption</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PreNoteOnlyBankAccountId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PreNotesOnlyPaymMode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Ret_NbrGoodRecs</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AdvEmailDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AdvEmail</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EFTFileType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MultiFormat</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>APIFormatType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ResponseType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Response</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SKG_BackendFields</Name>
			<Label>@SKS:SKGSystemFields</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>MALBankAccountId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FormatGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MALPaymMode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AdvEmail</Name>
			<HelpText>@SKS1899</HelpText>
			<Label>@SKS1844</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>AdvEmailDate</Name>
			<ExtendedDataType>SKS_EB_Date</ExtendedDataType>
			<HelpText>@SKS1968</HelpText>
			<Label>@SKS1967</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CommID</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>SKS_EB_CommID</ExtendedDataType>
			<StringSize>20</StringSize>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ComputerName</Name>
			<ConfigurationKey>SKS_PositivePay</ConfigurationKey>
			<ExtendedDataType>ComputerName</ExtendedDataType>
			<StringSize>30</StringSize>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ControlFileFormatId</Name>
			<ExtendedDataType>SKS_EFT_FormatId</ExtendedDataType>
			<Label>@SKS3240</Label>
			<StringSize>30</StringSize>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ControlFileName</Name>
			<ExtendedDataType>SKS_EB_FileName</ExtendedDataType>
			<Label>@SKS3242</Label>
			<StringSize>80</StringSize>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>EffectiveDate</Name>
			<ExtendedDataType>SKS_EB_Date</ExtendedDataType>
			<HelpText>@SKS1225</HelpText>
			<Label>@SYS8280</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>EFTFileType</Name>
			<AllowEdit>No</AllowEdit>
			<EnumType>SKS_EFT_Module</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FileName</Name>
			<ExtendedDataType>SKS_EB_FileName</ExtendedDataType>
			<StringSize>80</StringSize>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FileNbr</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>SKS_EFT_FileNbr</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<StringSize>20</StringSize>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FilePath</Name>
			<ExtendedDataType>SKS_EB_FilePath</ExtendedDataType>
			<StringSize>259</StringSize>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>FileStatus</Name>
			<Label>@SKS2766</Label>
			<EnumType>SKS_EFT_FileStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FormatId</Name>
			<ExtendedDataType>SKS_EFT_FormatId</ExtendedDataType>
			<StringSize>30</StringSize>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>FXAAllTradeAcksReceived</Name>
			<ExtendedDataType>DateTimeSent</ExtendedDataType>
			<HelpText>@SKS3646</HelpText>
			<Label>@SKS3645</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>FXAPaymentInstructionsSent</Name>
			<ExtendedDataType>DateTimeSent</ExtendedDataType>
			<HelpText>@SKS3648</HelpText>
			<Label>@SKS3647</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>FXAProcessing</Name>
			<HelpText>@SKS3649</HelpText>
			<Label>@SKS3604</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>FXASettlementConfReceived</Name>
			<ExtendedDataType>DateTimeSent</ExtendedDataType>
			<HelpText>@SKS3651</HelpText>
			<Label>@SKS3650</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>FXATradeSent</Name>
			<ExtendedDataType>DateTimeSent</ExtendedDataType>
			<HelpText>@SKS3653</HelpText>
			<Label>@SKS3652</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>InboundStatusChange</Name>
			<ExtendedDataType>UTCTimestamp</ExtendedDataType>
			<HelpText>@SKS2848</HelpText>
			<Label>@SKS2847</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>InboundStatusesRecId</Name>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InOutKeyFormat1</Name>
			<ExtendedDataType>SKS_EFT_InOutKey</ExtendedDataType>
			<StringSize>50</StringSize>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InOutKeyFormat2</Name>
			<ExtendedDataType>SKS_EFT_InOutKey</ExtendedDataType>
			<StringSize>50</StringSize>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InOutKeyFormat3</Name>
			<ExtendedDataType>SKS_EFT_InOutKey</ExtendedDataType>
			<StringSize>50</StringSize>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>JournalOption</Name>
			<EnumType>SKS_EFT_FileJournalOption</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>MALBankAccountId</Name>
			<ExtendedDataType>CompanyBankAccountId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>MALPaymMode</Name>
			<ExtendedDataType>PaymMode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>MultiFormat</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ConfigurationKey>SKS_PositivePay</ConfigurationKey>
			<HelpText>@SKS635</HelpText>
			<Label>@SKS2748</Label>
			<EnumType>boolean</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>OriginalPmtTotal</Name>
			<ConfigurationKey>SKS_PositivePay</ConfigurationKey>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<HelpText>@SKS2837</HelpText>
			<Label>@SKS2836</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>PmtCount</Name>
			<ExtendedDataType>SKS_EFT_PaymentCount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PmtTotal</Name>
			<ConfigurationKey>SKS_PositivePay</ConfigurationKey>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<HelpText>@SKS1224</HelpText>
			<Label>@SKS2838</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PreNoteOnlyBankAccountId</Name>
			<ConfigurationKey>SKS_PositivePay</ConfigurationKey>
			<ExtendedDataType>CompanyBankAccountId</ExtendedDataType>
			<HelpText>@SKS1227</HelpText>
			<Label>@SKS1226</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PreNotesOnlyPaymMode</Name>
			<ConfigurationKey>SKS_PositivePay</ConfigurationKey>
			<ExtendedDataType>PaymMode</ExtendedDataType>
			<HelpText>@SKS1229</HelpText>
			<Label>@SKS1228</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>Ret_NbrGoodRecs</Name>
			<ExtendedDataType>SKS_EB_NbrGoodRecs</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Selected</Name>
			<ConfigurationKey>SKS_PositivePay</ConfigurationKey>
			<HelpText>@SKS635</HelpText>
			<Label>@SYS24159</Label>
			<EnumType>boolean</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>TransmitDate</Name>
			<ExtendedDataType>SKS_EB_Date</ExtendedDataType>
			<HelpText>@SKS2610</HelpText>
			<Label>@SKS2482</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>TransmitDateTime</Name>
			<ExtendedDataType>UTCTimestamp</ExtendedDataType>
			<HelpText>@SKS2825</HelpText>
			<Label>@SKS2824</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FormatGroup</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>SKS_EFT_FormatGroup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>BFBankIntegration</Name>
			<Label>@SKS:SKGBankIntegration</Label>
			<EnumType>SKS_BF_BankIntType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BankFabricFileNameName</Name>
			<ExtendedDataType>SKS_BF_FileLocation</ExtendedDataType>
			<Label>@SKS:SKGBFFileNames</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TransferDirection</Name>
			<Label>@SKS:SKGBTBTransferType</Label>
			<EnumType>SKS_BTB_TransferType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>LogFileExist</Name>
			<Label>@SYS88403</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ErrFileExist</Name>
			<Label>@SKS2473</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>LogErrFilesChecked</Name>
			<Label>@SKS:SKGEFTLogErrFileChecked</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FormatGroupVersion</Name>
			<ExtendedDataType>SKS_EB_Version</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>FormatGroupCodeSource</Name>
			<EnumType>SKS_EB_CodeSource</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FormatGroupDataContractVersion</Name>
			<ExtendedDataType>SKS_EFT_DataContractVersion</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>APIFormatType</Name>
			<AllowEdit>No</AllowEdit>
			<Label>@SKS:SKGFormatType</Label>
			<EnumType>SKS_EFT_APIFormatType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ResponseType</Name>
			<AllowEdit>No</AllowEdit>
			<EnumType>SKS_EFT_APIResponseType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Response</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>Description255</ExtendedDataType>
			<Label>@SKS:SKGBFResponse</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>FileNbrIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<ConfigurationKey>SKS_PositivePay</ConfigurationKey>
			<Fields>
				<AxTableIndexField>
					<DataField>FileNbr</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>EFTFileType</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>RecIdIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>RecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>FormatKeysIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>InOutKeyFormat1</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InOutKeyFormat2</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InOutKeyFormat3</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BankAccountTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>BankAccountTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PreNoteOnlyBankAccountId</Name>
					<SourceEDT>CompanyBankAccountId</SourceEDT>
					<Field>PreNoteOnlyBankAccountId</Field>
					<RelatedField>AccountID</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BankAccountTableVend</Name>
			<Cardinality>OneMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>BankAccountTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>MalAcctIdParent</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>MALBankAccountId</Name>
					<SourceEDT>CompanyBankAccountId</SourceEDT>
					<Field>MALBankAccountId</Field>
					<RelatedField>AccountID</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SKS_EB_CommProcess</Name>
			<Cardinality>ZeroOne</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>SKS_EB_CommProcess</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CommID</Name>
					<Field>CommID</Field>
					<RelatedField>CommID</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CommIDIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SKS_EFT_FileData</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SKS_EFT_FileData</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RecId</Name>
					<SourceEDT>RefRecId</SourceEDT>
					<Field>RecId</Field>
					<RelatedField>RefRecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>RecType</Name>
					<RelatedField>RecType</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SKS_EFT_InboundStatuses</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>SKS_EFT_InboundStatuses</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InboundStatusesRecId</Name>
					<Field>InboundStatusesRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SKS_EFTAP_File</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SKS_EFTAP_File</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Link</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FileNbr</Name>
					<Field>FileNbr</Field>
					<RelatedField>FileNbr</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>EFTFileType</Name>
					<Field>EFTFileType</Field>
					<RelatedField>EFTFileType</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>