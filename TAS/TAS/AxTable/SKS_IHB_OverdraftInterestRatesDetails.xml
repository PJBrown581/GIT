<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_IHB_OverdraftInterestRatesDetails</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class SKS_IHB_OverdraftInterestRatesDetails extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        SKS_IHB_CalculatedInterest      calculatedInterest;
        SKS_IHB_OverdraftInterestRates  overdraftInterestRate =  SKS_IHB_OverdraftInterestRates::find(this.OverdraftInterestID);
        TransDate                       validFrom, validTo;
        container                       entityContainer;//SKS_Bug_12268

        validFrom = this.ValidFrom;
        validTo   = SKS_IHB_OverdraftInterestRatesDetails::validTo(overdraftInterestRate.OverdraftInterestID, this.ValidFrom);
        
        ttsbegin;     
        //SKS_Bug_12268 -->
        entityContainer = this.getCalculatedInterestEntity(overdraftInterestRate.OverdraftInterestID, validFrom, validTo);

        if(conLen(entityContainer) >= 1)
        {
            this.makeRecalculate(entityContainer, overdraftInterestRate.OverdraftInterestID, validFrom, validTo);
        }
        /*update_recordset calculatedInterest
                setting Recalculate = NoYes::Yes
        where calculatedInterest.OverdraftInterestID == overdraftInterestRate.OverdraftInterestID 
            && calculatedInterest.ValueDate >= validFrom
            && calculatedInterest.ValueDate <= validTo;*/
        ttscommit;        
        //SKS_Bug_12268 <--
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validTo</Name>
				<Source><![CDATA[
    /// <summary>
    /// To find the Valid to which is nothing but the Valid from date for the next record
    /// </summary>
    public static FromDate validTo(SKS_IHB_OverdraftInterestID _overdraftInterestId, FromDate   _validFrom)
    {
        SKS_IHB_OverdraftInterestRates        overdraftInterestRate = SKS_IHB_OverdraftInterestRates::findByOverdraftInterestID(_overdraftInterestId);
        SKS_IHB_OverdraftInterestRatesDetails overdraftInterestRateDetail;

        // Next valid from is nothing but valid to
        select overdraftInterestRateDetail
            order by ValidFrom
            where overdraftInterestRateDetail.OverdraftInterestID == overdraftInterestRate.RecId
            && overdraftInterestRateDetail.ValidFrom > _validFrom;

        if (overdraftInterestRateDetail.RecId == 0)
        {
            return maxDate();
        }
        else
        {
            return maxDate();       //SKS_Bug_21012
            //return overdraftInterestRateDetail.ValidFrom - 1;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        SKS_IHB_CalculatedInterest      calculatedInterest;
        SKS_IHB_OverdraftInterestRates   overdraftInterestRate =  SKS_IHB_OverdraftInterestRates::find(this.OverdraftInterestID);
        TransDate                       validFrom, validTo;
        container                       entityContainer;//SKS_Bug_12268

        super();

        validFrom = this.ValidFrom;
        validTo   = SKS_IHB_OverdraftInterestRatesDetails::validTo(overdraftInterestRate.OverdraftInterestID, this.ValidFrom);
        
        ttsbegin;
        //SKS_Bug_12268 -->
        entityContainer = this.getCalculatedInterestEntity(overdraftInterestRate.OverdraftInterestID, validFrom, validTo);
        if(conLen(entityContainer) >= 1)
        {
            this.makeRecalculate(entityContainer, overdraftInterestRate.OverdraftInterestID, validFrom, validTo);
        }
        /*update_recordset calculatedInterest
                setting Recalculate = NoYes::Yes
        where calculatedInterest.OverdraftInterestID == overdraftInterestRate.OverdraftInterestID 
            && calculatedInterest.ValueDate >= validFrom
            && calculatedInterest.ValueDate <= validTo;*/
        //SKS_Bug_12268 <--
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        SKS_IHB_CalculatedInterest  calculatedInterest;
        SKS_IHB_OverdraftInterestRates   overdraftInterestRate =  SKS_IHB_OverdraftInterestRates::find(this.OverdraftInterestID);
        TransDate                   validFrom, validTo;
        container                   entityContainer;//SKS_Bug_12268

        validFrom = this.ValidFrom;
        validTo   = SKS_IHB_OverdraftInterestRatesDetails::validTo(overdraftInterestRate.OverdraftInterestID, this.ValidFrom);
        
        if(SKS_IHB_CalculatedInterest::findByOverdraft(overdraftInterestRate.OverdraftInterestID, this.ValidFrom).RecId)
        {
            throw error(strFmt("@SKS:SKGRateDelete"));
        }

        ttsbegin;
        //SKS_Bug_12268 -->
        entityContainer = this.getCalculatedInterestEntity(overdraftInterestRate.OverdraftInterestID, validFrom, validTo);
        if(conLen(entityContainer) >= 1)
        {
            this.makeRecalculate(entityContainer, overdraftInterestRate.OverdraftInterestID, validFrom, validTo);
        }            
        /*update_recordset calculatedInterest
                setting Recalculate = NoYes::Yes
        where calculatedInterest.OverdraftInterestID == overdraftInterestRate.OverdraftInterestID 
            && calculatedInterest.ValueDate >= validFrom
            && calculatedInterest.ValueDate <= validTo;*/   
        //SKS_Bug_12268 <--
        ttscommit;
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCalculatedInterestEntity</Name>
				<Source><![CDATA[
    //SKS_Bug_12268 -->
    /// <summary>
    ///
    /// </summary>
    protected container getCalculatedInterestEntity(SKS_IHB_OverDraftInterestID _overDraftinterestId, TransDate _validFrom, TransDate _validTo)
    {
        SKS_IHB_CalculatedInterest  calculatedInterestLoc;
        container                   entityCon;

        while select crosscompany DataAreaId from calculatedInterestLoc
            group by DataAreaId
                where calculatedInterestLoc.OverdraftInterestID == _overDraftinterestId
                && calculatedInterestLoc.ValueDate >= _validFrom
                && calculatedInterestLoc.ValueDate <= _validTo
        {
            entityCon += calculatedInterestLoc.DataAreaId;
        }
        return entityCon;
    }

]]></Source>
			</Method>
			<Method>
				<Name>makeRecalculate</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    protected void makeRecalculate(container _entityContainer,
                                   SKS_IHB_OverDraftInterestID _overDraftinterestId,
                                   TransDate _validFrom, TransDate _validTo)
    {
        SKS_IHB_CalculatedInterest  calculatedInterest;
        SKS_PP_Bank sKS_PP_Bank;

        for (int i = 1; i<= conLen(_entityContainer); i++)
        {
            changecompany(conPeek(_entityContainer, i))
            {
                //SKS_Bug_21012--->
                while select sKS_PP_Bank
                    where sKS_PP_Bank.SKS_IHBInhouseBank      == NoYes::Yes
                        && sKS_PP_Bank.IHB_PayOffCalculated   == NoYes::No //FDD-11448 --->
                        && sKS_PP_Bank.IHB_OverdraftInterestID     != ''
                {
                    calculatedInterest = null;

                    _validFrom = this.getPerdiodStartDates(sKS_PP_Bank, this.ValidFrom);
                    //SKS_Bug_21012---->
                    update_recordset calculatedInterest
                        setting Recalculate = NoYes::Yes
                        where calculatedInterest.OverdraftInterestID == _overDraftinterestId
                            && calculatedInterest.ValueDate >= _validFrom
                            && calculatedInterest.ValueDate <= _validTo
                            && calculatedInterest.BankAccountID == sKS_PP_Bank.BankAccountId;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPerdiodStartDates</Name>
				<Source><![CDATA[
    //SKS_Bug_12268 <--

    /// <summary>
    /// Return Period start date
    /// </summary>
    /// <param name = "_sKS_PP_Bank">SKS_PP_Bank</param>
    /// <param name = "_transDate">TransDate</param>
    /// <returns></returns>
    public date getPerdiodStartDates(SKS_PP_Bank _sKS_PP_Bank, TransDate _transDate)
    {
        if (_sKS_PP_Bank.IHB_InterestCalcFreq == SKS_IHB_InterestCalcFreq::Month)
        {
            return dateStartMth(_transDate);
        }
        else
        {
            if (_sKS_PP_Bank.IHB_CalculationFrequencyStartMonth>_sKS_PP_Bank.IHB_CalculationFrequencyEndMonth)
            {
                if (mthOfYr(_transDate)>=_sKS_PP_Bank.IHB_CalculationFrequencyStartMonth)
                {
                    return dateStartMth(mkDate(dayOfMth(_transDate), _sKS_PP_Bank.IHB_CalculationFrequencyStartMonth, year(_transDate)));
                }
                else
                {
                    return dateStartMth(mkDate(dayOfMth(_transDate), _sKS_PP_Bank.IHB_CalculationFrequencyStartMonth, year(_transDate)-1));
                }
            }
            else
            {
                return dateStartMth(mkDate(dayOfMth(_transDate), _sKS_PP_Bank.IHB_CalculationFrequencyStartMonth, year(_transDate)));
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@SKS:SKGIHBOverdraftDetailsDevDoc</DeveloperDocumentation>
	<Label>@SKS:SKGIHBOverdraftDetails</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>OverdraftInterestID</TitleField1>
	<TitleField2>ValidFrom</TitleField2>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS50012</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ValidFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OverdraftInterestID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OverdraftInterest</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ValidFrom</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>FromDate</ExtendedDataType>
			<Label>@SYS124336</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>OverdraftInterestID</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>OverdraftInterest</Name>
			<ExtendedDataType>SKS_IHB_InterestRate</ExtendedDataType>
			<Label>@SKS:SKGIHBOverdraftInterest</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>OverdraftInterestIDIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>OverdraftInterestID</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ValidFrom</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>SKS_IHB_OverdraftInterestRates</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SKS_IHB_OverdraftInterestRates</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SKS_IHB_OverdraftInterestRate</Name>
					<Field>OverdraftInterestID</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>