<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_LB_JournalARApplic</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class SKS_LB_JournalARApplic extends common
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accountName</Name>
				<Source><![CDATA[
    //BP Deviation Documented
    [SysClientCacheDataMethodAttribute(true)]     //TAS_CAR
    display LedgerJournalAccountName accountName()
    {
        if (this.LedgerDimension)
        {
            if (!this.CustTransDataAreaId)
            {
                return this.accountNameFind(this.AccountType, this.LedgerDimension, curext());
            }
            else
            {
                return this.accountNameFind(this.AccountType, this.LedgerDimension, this.CustTransDataAreaId);
            }
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountNameFind</Name>
				<Source><![CDATA[
    public LedgerJournalAccountName accountNameFind(
        LedgerJournalACType     _accountType,
        DimensionDynamicAccount _dimensionDynamicAccount,
        SelectableDataArea      _company)
    {
        MainAccount mainAccount;
        if (xDataArea::exist(_company))
        {
            changecompany(_company)
            {
                switch(_accountType)
                {
                    case LedgerJournalACType::Ledger :
                        mainAccount =   MainAccount::find(LedgerDimensionFacade::getMainAccountRecIdFromLedgerDimension(_dimensionDynamicAccount));
                        return mainAccount.localizedName();
                    case LedgerJournalACType::Cust :
                        LedgerDimensionFacade::getDisplayValueForLedgerDimension(_dimensionDynamicAccount);
                        return CustTable::find(LedgerDimensionFacade::getDisplayValueForLedgerDimension(_dimensionDynamicAccount)).name();
                    case LedgerJournalACType::Vend :
                        return VendTable::find(LedgerDimensionFacade::getDisplayValueForLedgerDimension(_dimensionDynamicAccount)).name();
                    case LedgerJournalACType::Bank :
                        return BankAccountTable::find(LedgerDimensionFacade::getDisplayValueForLedgerDimension(_dimensionDynamicAccount)).Name;
                    case LedgerJournalACType::Project :
                        return ProjTable::find(LedgerDimensionFacade::getDisplayValueForLedgerDimension(_dimensionDynamicAccount)).Name;
                    case LedgerJournalACType::FixedAssets :
                        return AssetTable::find(LedgerDimensionFacade::getDisplayValueForLedgerDimension(_dimensionDynamicAccount)).Name;
                    case LedgerJournalACType::Employee_RU :
                        return EmployeeTable_RU::findByEmployeeId(LedgerDimensionFacade::getDisplayValueForLedgerDimension(_dimensionDynamicAccount)).employeeName();
                    case LedgerJournalACType::RDeferrals :
                        return RDeferralsTable::find(LedgerDimensionFacade::getDisplayValueForLedgerDimension(_dimensionDynamicAccount)).Name;
                    case LedgerJournalACType::RCash :
                        return RCashTable::find(LedgerDimensionFacade::getDisplayValueForLedgerDimension(_dimensionDynamicAccount)).Name;
                }
            }
        }
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>InvoiceCurToTransCur</Name>
				<Source><![CDATA[
    public Amount InvoiceCurToTransCur(Amount _transAmount)
    {
        SKS_BR_BankTran         sksBankTran = this.findSKS_BR_BankTran();
        BankAccountTable        bankAccountTable;
        CurrencyExchangeHelper  transExchRateHelper;
        Amount                  amountCur;
        Amount                  bankTransAmount;
        Ledger                  ledger;
        // CR-9480 -->
        CurrencyCode            custVendCurrencyCode;
        if(this.AccountType == LedgerJournalACType::Cust)
        {
            custVendCurrencyCode = this.findRecId().CurrencyCode;
        }
        else
        {
            custVendCurrencyCode = this.findVendTransRecId().CurrencyCode;
        }
        // CR-9480 <--

        changecompany(sksBankTran.company())
        {
            select firstonly CurrencyCode, DataAreaId from bankAccountTable
                where bankAccountTable.AccountID == sksBankTran.AccountId;
        }

        changecompany(this.CustTransDataAreaId)
        {
            if(bankAccountTable.CurrencyCode != custVendCurrencyCode) // CR-9480
            {
                transExchRateHelper = CurrencyExchangeHelper::construct();
                ledger = Ledger::find(Ledger::primaryLedger(CompanyInfo::findDataArea(bankAccountTable.DataAreaId).RecId));

                transExchRateHelper.parmLedgerRecId(ledger.RecId);
                transExchRateHelper.parmExchangeDate(sksBankTran.getGLPostingDate()); //stmt date //CR-7653
                bankTransAmount = CurrencyExchangeHelper::amount(transExchRateHelper.calculateCurrencyToCurrency(custVendCurrencyCode, ledger.AccountingCurrency, _transAmount, true)); // CR-9480
                amountCur = CurrencyExchangeHelper::amount(transExchRateHelper.calculateCurrencyToCurrency(ledger.AccountingCurrency, bankAccountTable.CurrencyCode, bankTransAmount, true));
            }
            else
            {
                amountCur = _transAmount;
            }
        }

        return amountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayDiscountAvail</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]       //TAS_AX7
    public display AmountCur displayDiscountAvail()
    {
        AmountCur           invoiceBalance;
        CustTrans           custTrans = this.findRecId();
        SKS_LB_54000Bas     lSKS_LB_54000Bas = SKS_LB_54000Bas::Construct();
        DiscAmount          cashDiscAmount; // CR-9480

        //SKG 9410 JU
        invoiceBalance = this.displayInvoiceBalance();

        if (invoiceBalance != 0)
        {
            changecompany(this.CustTransDataAreaId)
            {
                // 7455 -->
                // CR-9480 -->
                if(this.AccountType == LedgerJournalACType::Vend)
                {
                    cashDiscAmount = this.displayDiscountInTransCurrency();
                    
                }
                else
                {
                    // CR-9480 <--
                    cashDiscAmount = lSKS_LB_54000Bas.CalcDiscountAvailable(this, CustTrans.CurrencyCode, ExchangeRateHelper::getExchangeRate1_Static(Ledger::primaryLedger(CompanyInfo::find().RecID), CustTrans.currencycode, DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())), this.findSKS_BR_BankTran().getGLPostingDate());
                    // CR-9480 -->
                }
                return this.InvoiceCurToTransCur(cashDiscAmount);
                // CR-9480 <--
            }
        }
        else
        {
            return 0;
        }
        //SKG 9410 JU
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayDiscountAvailPercent</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]               //TAS_AX7
    public display AmountCur displayDiscountAvailPercent()
    {
        AmountCur invoiceBalance;

        invoiceBalance = this.displayInvoiceBalance();
        if (invoiceBalance!=0)
        {
            return decRound((this.displayDiscountAvail()/invoiceBalance*100),1);
        }
        else
        {
            return 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayInvoiceAmount</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]               //TAS_AX7
    public display AmountCur displayInvoiceAmount()
    {
        // CR-9480 -->
        if(this.AccountType == LedgerJournalACType::Cust)
        {
            // CR-9480 <--
            return this.InvoiceCurToTransCur(this.findRecId().AmountCur);
            // CR-9480 -->
        }
        else
        {
            return this.InvoiceCurToTransCur(this.findVendTransRecId().AmountCur);
        }
        // CR-9480 <--
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayInvoiceBalance</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]               //TAS_AX7
    public display AmountCur displayInvoiceBalance()
    {
        // CR-9480 -->
        if(this.AccountType == LedgerJournalACType::Cust)
        {
            // CR-9480 -->
            return (this.InvoiceCurToTransCur(this.findRecId().AmountCur) - this.InvoiceCurToTransCur(this.findRecId().SettleAmountCur));
            // CR-9480 -->
        }
        else
        {
            return (this.InvoiceCurToTransCur(this.findVendTransRecId().AmountCur) - this.InvoiceCurToTransCur(this.findVendTransRecId().SettleAmountCur));
        }
        // CR-9480 <--
    }

]]></Source>
			</Method>
			<Method>
				<Name>displaySettlementAvail</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    public display AmountCur displaySettlementAvail()
    {
        if(this.displayInvoiceBalance())
        {
            // CR-9480 -->
            if(this.AccountType == LedgerJournalACType::Vend)
            {
                return (this.InvoiceCurToTransCur(this.findVendTransOpenRecId().AmountCur - this.displayDiscountInTransCurrency()));
            }
            else
            {
                // SKS_19380_FlintfoxAresInvoiceApplicaiton
                //return (this.InvoiceCurToTransCur(this.findCTORecId().AmountCur - this.displayDiscountAvail()));
                return (this.InvoiceCurToTransCur(this.findCTORecId().sksGetRemainingAmount() - this.displayDiscountAvail()));
                // SKS_19380_FlintfoxAresInvoiceApplicaiton
            }
            // CR-9480 <--
        }
        else
        {
            return 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    public CustTrans findRecId()
    {
        CustTrans   custTrans;

        changecompany(this.CustTransDataAreaId)
        {
            select custTrans
                where custTrans.RecId == this.CustTransRecId;
        }

        return custTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCTORecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the custtransOpen records
    /// </summary>
    /// <returns>custtransOpen record</returns>
    public CustTransOpen findCTORecId()
    {
        CustTransOpen   CustTransOpen;

        changecompany(this.CustTransDataAreaId)
        {
            select CustTransOpen
                where CustTransOpen.RecId == this.CustTransOpenRecId;
        }

        return CustTransOpen;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findSKS_BR_BankTran</Name>
				<Source><![CDATA[
    public SKS_BR_BankTran findSKS_BR_BankTran()
    {
        SKS_BR_BankTran     sks_br_banktran;

        select crosscompany sks_br_banktran
            where sks_br_banktran.RecId == this.SKS_BR_BankTran;

        return sks_br_banktran;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        custTrans       custTrans;
        custTransOpen   custTransOpen;
        // CR-9480 -->
        VendTrans       vendTrans;
        VendTransOpen   vendTransOpen;
        // CR-9480 <--
        SKS_PP_Bank      sKS_PP_Bank; // SKS_10238 CR

        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(SKS_LB_JournalARApplic,Invoice) :
                if(this.Invoice != '')
                {
                    changecompany(this.CustTransDataAreaId)
                    {
                        // CR-9480 -->
                        if(this.AccountType == LedgerJournalACType::Cust)
                        {
                            // CR-9480 <--
                            select firstonly TransDate, DueDate, RecId,DataAreaId from  custTrans
                                where custTrans.invoice == this.Invoice
                                join AccountNum,RefRecId,RecId from custTransOpen
                                    where custTransOpen.RefRecId == custTrans.RecId;
                            // CR-9480 -->
                        }
                        else
                        {
                            select firstonly TransDate, DueDate, RecId,DataAreaId from  vendTrans
                                where vendTrans.invoice == this.Invoice
                                join AccountNum,RefRecId,RecId from vendTransOpen
                                    where vendTransOpen.RefRecId == vendTrans.RecId;
                        }
                        // CR-9480 <--
                    }
                    this.Description = '';//Sks_bug_7535
                }
                this.TransactionAmount   = 0;
                // CR-9480 -->
                if(custTrans.RecId)
                {
                    // CR-9480 <--
                    this.InvoiceDate         = custTrans.TransDate;
                    this.InvoiceDueDate      = custTrans.DueDate;
                    this.CustTransOpenRecId  = custTransOpen.RecId;
                    this.CustTransRecId      = custTrans.RecId;
                    // CR-9480 -->
                }
                else
                {
                    this.InvoiceDate         = vendTrans.TransDate;
                    this.InvoiceDueDate      = vendTrans.DueDate;
                    this.VendTransOpenRecId  = vendTransOpen.RecId;
                    this.VendTransRecId      = vendTrans.RecId;
                }
                // CR-9480 <--
                this.DiscApplyAmount     = 0;
                this.DiscountTakenPercent = 0;
                this.Status = SKS_BR_Status::None;
                break;

            case fieldNum(SKS_LB_JournalARApplic,TransactionAmount):
                if(this.Invoice == '') //9479
                {
                    if (this.AccountType == LedgerJournalACType::Cust && (this.TransactionAmount + this.DiscApplyAmount) == (this.InvoiceCurToTransCur(this.findRecId().AmountCur) - this.InvoiceCurToTransCur(this.findRecId().SettleAmountCur)) // CR-9480
                            || (this.TransactionAmount + this.DiscApplyAmount) == this.displayInvoiceBalance())
                    {
                        this.Status = SKS_BR_Status::Full;
                    }
                    //TFS 7335 -->
                    // CR-9480 -->
                    else if (this.AccountType == LedgerJournalACType::Vend && (this.TransactionAmount + this.DiscApplyAmount) == (this.InvoiceCurToTransCur(this.findVendTransRecId().AmountCur) - this.InvoiceCurToTransCur(this.findVendTransRecId().SettleAmountCur))
                            || (this.TransactionAmount + this.DiscApplyAmount) == this.displayInvoiceBalance())
                    {
                        this.Status = SKS_BR_Status::Full;
                    }
                    // CR-9480 <--
                    else if (this.TransactionAmount  == 0)
                    {
                        this.Status = SKS_BR_Status::None;
                    }
                    //TFS 7335 <--
                    else
                    {
                        this.Status = SKS_BR_Status::Partial;
                    }
                }
                else
                {
                    this.Status = SKS_BR_Status::None; // 9479
                }
                break;
            // 7334 -->
            case fieldNum(SKS_LB_JournalARApplic, DiscApplyAmount) :
                if(this.DiscApplyAmount == 0)
                {
                    this.TransactionAmount =  this.displayInvoiceBalance();
                }
                else
                {
                    this.TransactionAmount = this.displayInvoiceBalance() - this.DiscApplyAmount;
                }
                if(this.displayInvoiceBalance() != 0)
                {
                    this.DiscountTakenPercent =  decRound((this.DiscApplyAmount * 100 )/ this.displayInvoiceBalance(),1);
                }
                this.write();
                this.modifiedField(fieldNum(SKS_LB_JournalARApplic, TransactionAmount));
                break;
            case fieldNum(SKS_LB_JournalARApplic, DiscountTakenPercent) :
                this.DiscApplyAmount = decRound((this.displayInvoiceBalance()/ 100) * this.DiscountTakenPercent,2);
                if(this.DiscApplyAmount == 0)
                {
                    this.TransactionAmount = this.displayInvoiceBalance();
                }
                else
                {
                    this.TransactionAmount = decRound(this.displayInvoiceBalance(),2) - this.DiscApplyAmount;
                }
                this.write();
                this.modifiedField(fieldNum(SKS_LB_JournalARApplic, TransactionAmount));
                break;
            // 7334 <--

            case fieldNum(SKS_LB_JournalARApplic,FullSettlement):

                if (this.FullSettlement == NoYes::Yes)
                {
                    this.TransactionAmount = this.displaySettlementAvail(); // 7429
                    this.DiscApplyAmount   = this.displayDiscountAvail();// 7429
                    if(this.displayInvoiceBalance() != 0)
                    {
                        this.DiscountTakenPercent =  decRound((this.DiscApplyAmount * 100 )/ this.displayInvoiceBalance(),1);
                    }
                    this.Status = SKS_BR_Status::Full; //TFS 7335
                }
                //TFS 7335 -->
                else
                {
                    this.TransactionAmount = 0; // 7429
                    this.DiscApplyAmount   = 0; // 7429
                    this.DiscountTakenPercent = 0; // 7363
                    this.Status = SKS_BR_Status::None;
                }
                //TFS 7335 <--
                break;
            case fieldNum(SKS_LB_JournalARApplic,custtransdataareaid):
                if (this.SKS_BR_BankTran != 0)
                {
                    this.LedgerDimension   = 0;
                    this.Invoice           = '';
                    this.CustTransRecId    = 0;
                    this.TransactionAmount = 0;
                    this.AccountType       = LedgerJournalACType::Cust;
                    this.TaxGroup = '';// CR-8793
                    this.TaxItemGroup = '';// CR-8793
                    this.VendTransRecId    = 0; // CR-9480
                }                
                break;

            case fieldNum(SKS_LB_JournalARApplic,AccountType):
                if (this.SKS_BR_BankTran != 0)
                {
                    this.LedgerDimension   = 0;
                    this.Invoice           = '';
                    this.CustTransRecId    = 0;
                    this.TransactionAmount = 0;
                    this.DefaultDimension = 0;
                    this.TaxGroup = ''; // CR-8793
                    this.TaxItemGroup = '';// CR-8793
                    this.VendTransRecId    = 0; // CR-9480
                }
                break;

            case fieldNum(SKS_LB_JournalARApplic,LedgerDimension):
                this.write();
                this.CustTransRecId    = 0;
                this.TransactionAmount = 0;
                this.DefaultDimension = 0;
                this.TaxGroup = '';// CR-8793
                this.TaxItemGroup = '';// CR-8793
                this.VendTransRecId    = 0; // CR-9480
                // SKS_10238 CR -->
                if(this.AccountType == ledgerJournalACType::Bank &&
                    this.LedgerDimension)
                {
                    sKS_PP_Bank = SKS_PP_Bank::findIHBBank(LedgerDynamicAccountHelper::getAccountNumberFromDynamicAccount(this.LedgerDimension), this.CustTransDataAreaId);
                    if(sKS_PP_Bank)
                    {
                        this.IHBIntercoCompany = sKS_PP_Bank.SKS_IHBLinkedinhousebankcompany;
                    }
                }
                else
                {
                    this.IHBIntercoCompany = '';
                }
                this.IHBIntercoLedgerDimension = 0;

                // SKS_10238 CR <--
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymNote</Name>
				<Source><![CDATA[
    public display PaymNote paymNote()
    {
        return this.sks_LB_JournalAR().PaymNote;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sks_LB_JournalAR</Name>
				<Source><![CDATA[
    public SKS_LB_JournalAR sks_LB_JournalAR(boolean _forUpdate = false)
    {
        SKS_LB_JournalAR    sks_lb_JournalAR;

        sks_lb_JournalAR.selectForUpdate(_forUpdate);

        select firstOnly sks_lb_JournalAR
            where sks_lb_JournalAR.RecId    == this.SKS_LB_JournalARRecId;

        return sks_lb_JournalAR;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;
        AmountCur locSettlementAvail;

        ret = super(_fieldIdToCheck);
        switch (_fieldIdToCheck)
        {
            case fieldNum(SKS_LB_JournalARApplic, TransactionAmount) :
                if(this.TransactionAmount != 0)
                {
                    /*if (this.AlreadyMarked == NoYes::Yes)
                    {
                        ret = ret && checkFailed("@SKS4393");
                    }*/
                    // CR-9480 -->
                    if(this.AccountType == LedgerJournalACType::Cust)
                    {
                        // CR-9480 <--
                        CustTransOpen   custTransOpen = this.findCTORecId();
                        
                        locSettlementAvail = this.InvoiceCurToTransCur(this.findRecId().AmountCur)-this.InvoiceCurToTransCur(custTransOpen.sksGetRemainingAmount(true))-this.DiscApplyAmount;
                        // CR-9480 -->
                    }
                    else
                    {
                        locSettlementAvail = this.InvoiceCurToTransCur(this.findVendTransRecId().AmountCur)-this.InvoiceCurToTransCur(this.findVendTransRecId().SettleAmountCur)-this.DiscApplyAmount;
                    }
                    // CR-9480 <--
                    if (ret && (locSettlementAvail > 0 && this.TransactionAmount > locSettlementAvail))
                    {
                        ret = checkFailed("@SKS6005");
                    }
                    // 7466
                    else if(ret && (locSettlementAvail < 0 && (abs(this.TransactionAmount) > abs(locSettlementAvail))) ||(locSettlementAvail < 0 && this.TransactionAmount > 0))
                    {
                        ret = checkFailed("@SKS6005");
                    }
                    // 7466
                }
                break;
            // SKS_10238 CR -->
            case fieldNum(SKS_LB_JournalARApplic, IHBIntercoLedgerDimension):
                if(this.IHBIntercoAccountType == LedgerJournalACType::Bank)
                {
                    if(SKS_PP_Bank::findIHBBank(LedgerDynamicAccountHelper::getAccountNumberFromDynamicAccount(this.IHBIntercoLedgerDimension), this.IHBIntercoCompany))
                    {
                        ret = checkFailed("@SKS:SKGIHBIntercoBankVal");
                    }
                }
                break;
            // SKS_10238 CR <--
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAccountDefaultDimension</Name>
				<Source><![CDATA[
    public static DimensionDefault getAccountDefaultDimension(
        LedgerJournalAC     _accountNum,
        CompanyId           _accountCompany,
        LedgerJournalACType _accountType)

    {
        DimensionDefault defaultDimension;

        if (_accountNum == '')
        {
            return defaultDimension;
        }

        changecompany(_accountCompany)
        {
            switch (_accountType)
            {
                case LedgerJournalACType::Bank :
                    defaultDimension = BankAccountTable::find(_accountNum).DefaultDimension;
                    break;

                case LedgerJournalACType::Cust :
                    defaultDimension = CustTable::find(_accountNum).DefaultDimension;
                    break;

                case LedgerJournalACType::Vend :
                    defaultDimension = VendTable::find(_accountNum).DefaultDimension;
                    break;

                case LedgerJournalACType::Project :
                    defaultDimension = ProjTable::find(_accountNum).DefaultDimension;
                    break;
            }
        }

        return defaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupInvoiceId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a lookup form for the invoice items related to customer.
    /// </summary>
    /// <param name="_lookupCtrl">
    /// The form control receiving the value of the lookup.
    /// </param>
    /// <param name="_SKS_LB_JournalARApplic">
    /// The current _SKS_LB_JournalARApplic record.
    /// </param>
    /// <returns>
    /// The lookup object used.
    /// </returns>
    public static client PmfTableLookupExtended lookupInvoiceId(FormStringControl _lookupCtrl, SKS_LB_JournalARApplic _SKS_LB_JournalARApplic)
    {
        Query                               query;
        QueryBuildDataSource                qbds;
        DimensionAttributeValueCombination  davc;
        PmfTableLookupExtended              tableLookup;

        changeCompany(_SKS_LB_JournalARApplic.CustTransDataAreaId)
        {
            // SKS_Bug_9627 -->
            tableLookup     = PmfTableLookupExtended::newParameters(tablenum(SKS_LB_CustOpenTransInvoices),_lookupCtrl,false);
            select firstonly displayvalue from davc
                where davc.RecId == _SKS_LB_JournalARApplic.LedgerDimension;

            query = new Query();
            qbds = query.addDataSource(tableNum(SKS_LB_CustOpenTransInvoices));

            qbds.addRange(fieldNum(SKS_LB_CustOpenTransInvoices, CustAccount)).value(queryValue(davc.DisplayValue));
            tableLookup.addLookupfield(fieldnum(SKS_LB_CustOpenTransInvoices,Invoice),true);
            tableLookup.addLookupfield(fieldnum(SKS_LB_CustOpenTransInvoices,CustAccount));
            tableLookup.addLookupfield(fieldnum(SKS_LB_CustOpenTransInvoices,CustName));
            tableLookup.addLookupfield(fieldnum(SKS_LB_CustOpenTransInvoices,DueDate));
            tableLookup.addLookupfield(fieldnum(SKS_LB_CustOpenTransInvoices,AmountCur));
            tableLookup.addLookupfield(fieldnum(SKS_LB_CustOpenTransInvoices,DiscAmount));
            tableLookup.addLookupfield(fieldnum(SKS_LB_CustOpenTransInvoices,CurrencyCode));
            tableLookup.addLookupfield(fieldnum(SKS_LB_CustOpenTransInvoices,InvoiceCompany));
            tableLookup.parmQuery(query);
            tableLookup.parmUseLookupValue(true);
            tableLookup.performFormLookup();
            // SKS_Bug_9627 <--

            return tableLookup;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// 7363
    /// </summary>
    /// <param name="_recId">
    /// RecId object parameter.
    /// </param>
    /// <returns>
    /// SKS_LB_JournalARApplic type object.
    /// </returns>
    static public SKS_LB_JournalARApplic find(RefRecId _recId)
    {
        SKS_LB_JournalARApplic  journalARApplic;

        select journalARApplic where journalARApplic.RecId == _recId;

        return journalARApplic;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustDefaultDimension</Name>
				<Source><![CDATA[
    // Get customer account default dimension
    // 7572
    public static DimensionDefault getCustDefaultDimension(SKS_LB_JournalARApplic _sks_LB_JournalARApplic)
    {
        DimensionDefault  defaultDimensionInvoice;
        DimensionDefault  defaultDimensionAccount; // 7626
        DimensionDefault  defaultDimensionRet;
        SKS_PP_Setup      locSKS_PP_Setup;
        LedgerJournalName locLedgerJournalName;
        SKS_PP_Bank       locSKS_PP_Bank;
        BankAccountTable  bankaccountTableLoc; //8655
        SKS_BR_BankTran   sks_BR_BankTran = _sks_LB_JournalARApplic.findSKS_BR_BankTran();

        changecompany(sks_BR_BankTran.company())
        {
            select firstonly BRJournalName, DefaultDimensionFromInvoice from locSKS_PP_Setup;

            locSKS_PP_Bank = SKS_PP_Bank::find(_sks_LB_JournalARApplic.findSKS_BR_BankTran().AccountId);

            changeCompany(sks_br_banktran.GLCreationCompany)
            {
                select firstonly defaultdimension from locLedgerJournalName
                        where locLedgerJournalName.JournalName == locSKS_PP_Setup.BRJournalName;
            }

            if(_sks_LB_JournalARApplic.AccountType == LedgerJournalACType::Cust)
            {
                if(locSKS_PP_Bank.DefaultDimensionFromInvoice && _sks_LB_JournalARApplic.Invoice)
                {
                    defaultDimensionInvoice  = _sks_LB_JournalARApplic.findRecId().DefaultDimension;

                    changecompany(_sks_LB_JournalARApplic.CustTransDataAreaId)
                    {
                        defaultDimensionAccount = CustTable::findByLedgerDimension(_sks_LB_JournalARApplic.LedgerDimension).DefaultDimension;
                    }

                    // merging invoice and cutomer attributes
                    defaultDimensionRet = LedgerDimensionDefaultFacade::serviceMergeDefaultDimensions(defaultDimensionInvoice, defaultDimensionAccount);

                    // merging journal attributes
                    defaultDimensionRet = LedgerDimensionDefaultFacade::serviceMergeDefaultDimensions(defaultDimensionRet, locLedgerJournalName.DefaultDimension);
                }
                else
                {
                    changecompany(_sks_LB_JournalARApplic.CustTransDataAreaId)
                    {
                        defaultDimensionAccount = CustTable::findByLedgerDimension(_sks_LB_JournalARApplic.LedgerDimension).DefaultDimension;
                    }

                    defaultDimensionRet = LedgerDimensionDefaultFacade::serviceMergeDefaultDimensions(defaultDimensionAccount, locLedgerJournalName.DefaultDimension);
                }
            }
            else if(_sks_LB_JournalARApplic.AccountType == LedgerJournalACType::Vend) // 7626 -- >
            {
                defaultDimensionInvoice  = _sks_LB_JournalARApplic.findVendTransRecId().DefaultDimension; // 9849

                changecompany(_sks_LB_JournalARApplic.CustTransDataAreaId)
                {
                    defaultDimensionAccount = VendTable::findByLedgerDimension(_sks_LB_JournalARApplic.LedgerDimension).DefaultDimension;
                }
                // 9849 -->
                // merging invoice and cutomer attributes
                defaultDimensionRet = LedgerDimensionDefaultFacade::serviceMergeDefaultDimensions(defaultDimensionInvoice, defaultDimensionAccount);

                // merging journal attributes
                defaultDimensionRet = LedgerDimensionDefaultFacade::serviceMergeDefaultDimensions(defaultDimensionRet, locLedgerJournalName.DefaultDimension);
                // 9849 <--
            }
           // 7626 <--
            else if(_sks_LB_JournalARApplic.AccountType == LedgerJournalACType::Bank) // 8655 -- >
            {
                changecompany(_sks_LB_JournalARApplic.CustTransDataAreaId)
                {
                    bankaccountTableLoc = BankAccountTable::find(LedgerDimensionFacade::getDisplayValueForLedgerDimension(_sks_LB_JournalARApplic.LedgerDimension));
                }

                defaultDimensionRet = LedgerDimensionDefaultFacade::serviceMergeDefaultDimensions(bankaccountTableLoc.DefaultDimension, locLedgerJournalName.DefaultDimension);
            }
            //8655 <--
        }

        return defaultDimensionRet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultBankAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get default dimesnion of the bank
    /// </summary>
    /// <param name="_sks_BR_BankTran">
    /// The bank transaction record
    /// </param>
    /// <returns>
    /// returns bank default dimension
    /// </returns>
    /// 8655
    public static DimensionDefault getDefaultBankAccount(SKS_BR_BankTran _sks_BR_BankTran)
    {
        SKS_PP_Setup                    locSKS_PP_Setup;
        LedgerJournalName               locLedgerJournalName;
        BankAccountTable                bankaccountTableLoc;

        changecompany(_sks_BR_BankTran.company())
        {
            select firstonly DefaultDimension from bankaccountTableLoc
                where bankaccountTableLoc.AccountID == _sks_BR_BankTran.AccountId;

            select firstonly BRJournalName from locSKS_PP_Setup;
        }
        changeCompany(_sks_BR_BankTran.GLCreationCompany)
        {
            select firstonly defaultdimension from locLedgerJournalName
                where locLedgerJournalName.JournalName == locSKS_PP_Setup.BRjournalName;
        }

        return LedgerDimensionDefaultFacade::serviceMergeDefaultDimensions(bankaccountTableLoc.DefaultDimension, locLedgerJournalName.DefaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>customerBankTransUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the bank trans recocilation based on journal line.
    /// </summary>
    /// <param name = "_sKS_LB_JournalARApplic">journalarapplic record</param>
    public static void customerBankTransUpdate(SKS_LB_JournalARApplic _sKS_LB_JournalARApplic)
    {
        SKS_BR_BankTran           sKS_BR_BankTran;
        SKS_LB_JournalARApplic    sKS_LB_JournalARApplic;
        SKS_LB_JournalARApplic    sKS_LB_JournalARApplic2;
        DimensionDynamicAccount   ledgerdimension;

        ttsbegin;

        select firstonly crosscompany GLCreationCompany,GLMatchOrCreate,CustAccount,RecId,CustCompany
            from sKS_BR_BankTran where sKS_BR_BankTran.RecId == _sKS_LB_JournalARApplic.SKS_BR_BankTran;

        if(sKS_BR_BankTran.GLCreationCompany &&
        (sKS_BR_BankTran.GLMatchOrCreate  == SKS_BR_GLMatchOrCreate::CustomerSettlement ||
        sKS_BR_BankTran.GLMatchOrCreate   == SKS_BR_GLMatchOrCreate::Manual))
        {
            changecompany(sKS_BR_BankTran.company())
            {
                SKS_BR_BankTran           sKS_BR_BankTranUpdate;

                if(sKS_BR_BankTran.RecId)
                {
                    if(sKS_BR_BankTran.CustAccount && sKS_BR_BankTran.CustCompany)
                    {
                        changeCompany(sKS_BR_BankTran.CustCompany) //SKS 9344
                        {
                            ledgerdimension = LedgerDynamicAccountHelper::getDynamicAccountFromAccountNumber(sKS_BR_BankTran.CustAccount, LedgerJournalACType::Cust);
                        }
                    }

                    select firstonly RecId from sKS_LB_JournalARApplic
                        where sKS_LB_JournalARApplic.LedgerDimension   == ledgerdimension &&
                            sKS_LB_JournalARApplic.CustTransDataAreaId == sKS_BR_BankTran.CustCompany &&
                            sKS_LB_JournalARApplic.SKS_BR_BankTran     == _sKS_LB_JournalARApplic.SKS_BR_BankTran &&
                            sKS_LB_JournalARApplic.AccountType         == LedgerJournalACType::Cust;
                    if(!sKS_LB_JournalARApplic.RecId)
                    {
                        while select RecId,LedgerDimension,CustTransDataAreaId,SKS_BR_BankTran
                            from sKS_LB_JournalARApplic
                                order by RecId asc
                                    where sKS_LB_JournalARApplic.SKS_BR_BankTran == _sKS_LB_JournalARApplic.SKS_BR_BankTran &&
                                        sKS_LB_JournalARApplic.AccountType       == LedgerJournalACType::Cust
                        {
                            select firstonly forupdate CustCompany,CustAccount,RecId, TranAmount 
                                from sKS_BR_BankTranUpdate
                                    where sKS_BR_BankTranUpdate.RecId     == sKS_LB_JournalARApplic.SKS_BR_BankTran &&
                                        sKS_BR_BankTranUpdate.CustAccount ==  LedgerDynamicAccountHelper::getAccountNumberFromDynamicAccount(sKS_LB_JournalARApplic.LedgerDimension);
                            if(sKS_BR_BankTranUpdate.RecId)
                            {
                                sKS_BR_BankTranUpdate.CustAccount = sKS_BR_BankTranUpdate.CustAccount;
                                sKS_BR_BankTranUpdate.CustCompany = sKS_LB_JournalARApplic.CustTransDataAreaId;
                                break;
                            }
                            else
                            {
                                select firstonly LedgerDimension,CustTransDataAreaId,RecId,SKS_BR_BankTran from sKS_LB_JournalARApplic2
                                    order by RecId asc
                                        where sKS_LB_JournalARApplic2.SKS_BR_BankTran == _sKS_LB_JournalARApplic.SKS_BR_BankTran &&
                                            sKS_LB_JournalARApplic2.AccountType       == LedgerJournalACType::Cust;
                                if(sKS_LB_JournalARApplic2.RecId)
                                {
                                    select firstonly forupdate CustCompany,CustAccount,RecId, TranAmount
                                        from sKS_BR_BankTranUpdate where sKS_BR_BankTranUpdate.RecId == sKS_LB_JournalARApplic2.SKS_BR_BankTran;
                                    if(sKS_BR_BankTranUpdate.RecId)
                                    {
                                        sKS_BR_BankTranUpdate.CustAccount = LedgerDynamicAccountHelper::getAccountNumberFromDynamicAccount(sKS_LB_JournalARApplic2.LedgerDimension);
                                        sKS_BR_BankTranUpdate.CustCompany = sKS_LB_JournalARApplic2.CustTransDataAreaId;
                                        //SKS 9344
                                        sKS_BR_BankTranUpdate.eBankRecCustGroupId = CustTable::findByCompany(sKS_BR_BankTranUpdate.CustCompany, sKS_BR_BankTranUpdate.CustAccount).SKS_BR_eBankRecCustGroupId;
                                        //SKS 9344
                                    }
                                }
                            }
                        }
                        sKS_BR_BankTranUpdate.update();
                    }
                }
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIsAlreadyMarked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find the invoice which is already marked.
    /// </summary>
    /// <param name = "_sKS_BR_BankTranRecId">bank tran recid</param>
    public static void checkIsAlreadyMarked(RefRecId _sKS_BR_BankTranRecId)
    {
        SKS_LB_JournalARApplic    sKS_LB_JournalARApplic;

        select firstonly crosscompany RecId from sKS_LB_JournalARApplic
            where sKS_LB_JournalARApplic.SKS_BR_BankTran  == _sKS_BR_BankTranRecId
                && (sKS_LB_JournalARApplic.AccountType     == LedgerJournalACType::Vend
                || sKS_LB_JournalARApplic.AccountType     == LedgerJournalACType::Cust) // CR-9480
                && sKS_LB_JournalARApplic.AlreadyMarked   == NoYes::Yes;
        if(sKS_LB_JournalARApplic.RecId)
        {
            info("@SKS6256");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showCalculatedTaxValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///  To display calculated VAT taxamount.
    /// </summary>
    /// <returns>amount </returns>
    public display TaxAmountJournal showCalculatedTaxValue()
    {
        BankAccountTable        bankAccountTable;
        SKS_BR_BankTran         sks_BR_BankTran = this.findSKS_BR_BankTran();
        SKS_CCR_BankTran        sks_CCR_BankTran = this.findSKS_CCR_BankTran();     //SKS_VSTS_14400
        LedgerJournalName       ledgerJournalName;

        if(sks_BR_BankTran)     //SKS_VSTS_14400
        {
            changecompany(sks_BR_BankTran.company())
            {
                select firstonly CurrencyCode,DataAreaId from bankaccounttable
                        where bankaccounttable.AccountID == sks_BR_BankTran.AccountId;
            }
            changecompany(sks_BR_BankTran.GLCreationCompany)
            {
                ledgerJournalName = LedgerJournalName::find(sks_BR_BankTran.JournalName);
            }

            changecompany(this.CustTransDataAreaId)
            {
                if(ledgerJournalName.LedgerJournalInclTax)
                {
                    return this.TransactionAmount - (Tax::baseAmountExclTax(this.TaxGroup, this.TaxItemGroup, sks_BR_BankTran.getGLPostingDate(),bankAccountTable.CurrencyCode , this.TransactionAmount, TaxModuleType::Sales));
                }
                else
                {
                    return Tax::calcTaxAmount(this.TaxGroup, this.TaxItemGroup, sks_BR_BankTran.getGLPostingDate(),bankAccountTable.CurrencyCode , this.TransactionAmount, TaxModuleType::Sales);
                }
            }
        }
        else            //SKS_VSTS_14400--->
        {
            changecompany(sks_CCR_BankTran.company())
            {
                select firstonly CurrencyCode,DataAreaId from bankaccounttable
                        where bankaccounttable.AccountID == sks_CCR_BankTran.AccountId;
            }
            changecompany(sks_CCR_BankTran.GLCreationCompany)
            {
                ledgerJournalName = LedgerJournalName::find(sks_CCR_BankTran.JournalName);
            }

            changecompany(this.CustTransDataAreaId)
            {
                if(ledgerJournalName.LedgerJournalInclTax)
                {
                    return this.TransactionAmount - (Tax::baseAmountExclTax(this.TaxGroup, this.TaxItemGroup, sks_CCR_BankTran.getGLPostingDate(),bankAccountTable.CurrencyCode , this.TransactionAmount, TaxModuleType::Sales));
                }
                else
                {
                    return Tax::calcTaxAmount(this.TaxGroup, this.TaxItemGroup, sks_CCR_BankTran.getGLPostingDate(),bankAccountTable.CurrencyCode , this.TransactionAmount, TaxModuleType::Sales);
                }
            }
        }//SKS_VSTS_14400<---
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupVendorInvoiceId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a lookup form for the invoice items related to vendor.
    /// </summary>
    /// <param name="_lookupCtrl">
    /// The form control receiving the value of the lookup.
    /// </param>
    /// <param name="_SKS_LB_JournalARApplic">
    /// The current _SKS_LB_JournalARApplic record.
    /// </param>
    /// <returns>
    /// The lookup object used.
    /// </returns>
    // CR-9480
    public static client PmfTableLookupExtended lookupVendorInvoiceId(FormStringControl _lookupCtrl, SKS_LB_JournalARApplic _SKS_LB_JournalARApplic)
    {
        Query                               query;
        QueryBuildDataSource                qbds;
        DimensionAttributeValueCombination  davc;
        PmfTableLookupExtended              tableLookup;

        changeCompany(_SKS_LB_JournalARApplic.CustTransDataAreaId)
        {
            tableLookup     = PmfTableLookupExtended::newParameters(tablenum(SKS_LB_VendOpenInvoices),_lookupCtrl,false);
            select firstonly displayvalue from davc
                where davc.RecId == _SKS_LB_JournalARApplic.LedgerDimension;

            query = new Query();
            qbds = query.addDataSource(tableNum(SKS_LB_VendOpenInvoices));

            qbds.addRange(fieldNum(SKS_LB_VendOpenInvoices, VendAccount)).value(queryValue(davc.DisplayValue));
            tableLookup.addLookupfield(fieldnum(SKS_LB_VendOpenInvoices,Invoice),true);
            tableLookup.addLookupfield(fieldnum(SKS_LB_VendOpenInvoices,VendAccount));
            tableLookup.addLookupfield(fieldnum(SKS_LB_VendOpenInvoices,VendName));
            tableLookup.addLookupfield(fieldnum(SKS_LB_VendOpenInvoices,DueDate));
            tableLookup.addLookupfield(fieldnum(SKS_LB_VendOpenInvoices,AmountCur));
            tableLookup.addLookupfield(fieldnum(SKS_LB_VendOpenInvoices,DiscAmount));
            tableLookup.addLookupfield(fieldnum(SKS_LB_VendOpenInvoices,CurrencyCode));
            tableLookup.addLookupfield(fieldnum(SKS_LB_VendOpenInvoices,InvoiceCompany));
            tableLookup.parmQuery(query);
            tableLookup.parmUseLookupValue(true);
            tableLookup.performFormLookup();

            return tableLookup;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findVendTransRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return the <c>VendTrans</c> record.
    /// </summary>
    /// <returns>vendtran record</returns>
    public VendTrans findVendTransRecId()
    {
        VendTrans   vendTrans;
        changecompany(this.CustTransDataAreaId)
        {
            select vendTrans
                where vendTrans.RecId == this.VendTransRecId;
        }
        return vendTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findVendTransOpenRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fidns vendTransOpen record
    /// </summary>
    /// <returns>VendTransOpen record</returns>
    public VendTransOpen findVendTransOpenRecId()
    {
        VendTransOpen   VendTransOpen;
        changecompany(this.CustTransDataAreaId)
        {
            select VendTransOpen
                where VendTransOpen.RecId == this.VendTransOpenRecId;
        }
        return VendTransOpen;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFromVendInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find the <c>VendTrans</c> table based on invoice id and vendaccount.
    /// </summary>
    /// <param name = "_invoiceId">invoice id</param>
    /// <param name = "_vendAccount">vendor account</param>
    /// <param name = "_forUpdate">update flag</param>
    /// <returns> vend trans record</returns>
    public static VendTrans findFromVendInvoice(
        InvoiceId _invoiceId,
        VendAccount _vendAccount = '',
        boolean _forUpdate = false)
    {
        VendTrans vendTrans;

        vendTrans.selectForUpdate(_forUpdate);

        if (_vendAccount)
        {
            select firstonly vendTrans
                where vendTrans.Invoice == _invoiceId
                    && vendTrans.AccountNum == _vendAccount;
        }
        else
        {
            select firstonly vendTrans
                where vendTrans.Invoice == _invoiceId;
        }

        return vendTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>MarkedApplicSearchVend</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find the vendor invoice already marked in bank statements.
    /// </summary>
    /// <param name = "_CtoRecID">cust trans open recid</param>
    /// <returns>journal ar applic record</returns>
    public static SKS_LB_JournalARApplic MarkedApplicSearchVend(RefRecId _CtoRecID)
    {
        SKS_LB_JournalARApplic  lJournalARApplic;
        SKS_BR_BankTran         lSKS_BR_BankTran;
        container               virtualCompanyCompanies;

        virtualCompanyCompanies = CustVendOpenTransManager::findSharedServiceCompanies(curext());

        select firstOnly crosscompany:virtualCompanyCompanies lJournalarapplic
            where lJournalarapplic.VendTransOpenRecId == _CtoRecID
                && lJournalarapplic.TransactionAmount != 0
        join RecId from lSKS_BR_BankTran
            where lSKS_BR_BankTran.recid == lJournalarapplic.SKS_BR_BankTran
                && lSKS_BR_BankTran.LedgerJournalRecID == 0;

        return lJournalARApplic;

    }

]]></Source>
			</Method>
			<Method>
				<Name>displayDiscountInTransCurrency</Name>
				<Source><![CDATA[
    // CR-9480
    [SysClientCacheDataMethodAttribute(true)]       //TAS_AX7
    public display AmountCur displayDiscountInTransCurrency()
    {
        AmountCur           invoiceBalance;
        DiscAmount          cashDiscAmount;
        VendTrans           vendTrans = this.findVendTransRecId();
        VendTransOpen       vendTransOpen;

        invoiceBalance = this.displayInvoiceBalance();

        if (invoiceBalance != 0)
        {
            changecompany(this.CustTransDataAreaId)
            {
                if(this.AccountType == LedgerJournalACType::Vend)
                {
                    select firstonly AccountNum, RefRecId, TableId, RecId, UseCashDisc from vendTransOpen
                        where vendTransOpen.RefRecId == vendTrans.RecId;
                    if(vendTransOpen.UseCashDisc != UseCashDisc::Never)
                    {
                        if(vendTransOpen.UseCashDisc == UseCashDisc::Always)
                        {
                            cashDiscAmount = VendTransCashDisc::findRef(vendTransOpen.TableId, vendTransOpen.RecId).CashDiscAmount;
                        }
                        else
                        {
                            cashDiscAmount = VendTransCashDisc::findCashDisc(vendTransOpen.TableId, vendTransOpen.RecId, this.findSKS_BR_BankTran().getGLPostingDate(),  VendPaymModeTable::discGraceDays(vendTrans.PaymMode)).CashDiscAmount;
                        }
                    }
                }
            }
            return cashDiscAmount;
        }
        else
        {
            return 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRevCustVendOpenTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the customer or vendor open transactions after reversing.
    /// </summary>
    /// <param name = "_sks_BR_BankTran">The <c>SKS_BR_BankTran</c> buffer.</param>
    // CR-9541
    public static void updateRevCustVendOpenTrans(RefRecId _sks_BR_BankTran)
    {
        SKS_LB_JournalARApplic  sKS_LB_JournalARApplic;

        while select forupdate CustTransOpenRecId, CustTransRecId, VendTransOpenRecId, VendTransRecId, CustTransDataAreaId
            from sKS_LB_JournalARApplic
                where sKS_LB_JournalARApplic.SKS_BR_BankTran == _sks_BR_BankTran
        {
            ttsbegin;
            if(sKS_LB_JournalARApplic.CustTransRecId && sKS_LB_JournalARApplic.CustTransDataAreaId)
            {
                changecompany(sKS_LB_JournalARApplic.CustTransDataAreaId)
                {
                    sKS_LB_JournalARApplic.CustTransOpenRecId = CustTransOpen::findRefId(sKS_LB_JournalARApplic.CustTransRecId).RecId;
                }
            }
            else if(sKS_LB_JournalARApplic.VendTransRecId && sKS_LB_JournalARApplic.CustTransDataAreaId)
            {
                changecompany(sKS_LB_JournalARApplic.CustTransDataAreaId)
                {
                    sKS_LB_JournalARApplic.VendTransOpenRecId = VendTransOpen::findRefId(sKS_LB_JournalARApplic.VendTransRecId).RecId;
                }
            }
            sKS_LB_JournalARApplic.update();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate the interco account if bank is IHB bank.
    /// </summary>
    /// <returns>Return true.</returns>
    // SKS_10238 CR
    public boolean validateWrite()
    {
        boolean         ret;
        SKS_PP_Bank     sKS_PP_Bank;

        ret = super();

        if(this.AccountType == LedgerJournalACType::Bank
            && this.CustTransDataAreaId)
        {
            sKS_PP_Bank = SKS_PP_Bank::findIHBBank(LedgerDynamicAccountHelper::getAccountNumberFromDynamicAccount(this.LedgerDimension), this.CustTransDataAreaId);
            if(sKS_PP_Bank)
            {
                if(!this.IHBIntercoCompany || this.IHBIntercoLedgerDimension == 0)
                {
                    //ret = warning("@SKS:SKGIHBIntercoAccountVal");
                    ret = error("@SKS:SKGIHBDetails"); //FDD-11448 //DevOps-17285
                }
                else
                {
                    if(this.IHBIntercoCompany != sKS_PP_Bank.SKS_IHBLinkedinhousebankcompany)
                    {
                        ret = error("@SKS:SKGIHBIntercoCompVal"); //DevOps-17285
                    }
                }
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// inserts the record
    /// </summary>
    public void insert()
    {
        if((this.SKS_BR_BankTran != 0 || this.SKS_CCR_BankTran != 0) && this.BRGJPostingDate == dateNull())
        {
            if(this.SKS_BR_BankTran != 0)
            {
                this.BRGJPostingDate = this.findSKS_BR_BankTran().getGLPostingDate();
            }
            else
            {
                this.BRGJPostingDate = this.findSKS_CCR_BankTran().getGLPostingDate();
            }
        }
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>findSKS_CCR_BankTran</Name>
				<Source><![CDATA[
    /// <summary>
    /// finds credit card rec bank tran recod
    /// </summary>
    /// <returns>ccr bank tran record</returns>
    public SKS_CCR_BankTran findSKS_CCR_BankTran()
    {
        SKS_CCR_BankTran     sks_ccr_banktran;

        select crosscompany sks_ccr_banktran
            where sks_ccr_banktran.RecId == this.SKS_CCR_BankTran;

        return sks_ccr_banktran;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultBankAccount_CCR</Name>
				<Source><![CDATA[
    //SKS_FDD_13903     End

    /// <summary>
    /// Get default dimesnion of the bank
    /// </summary>
    /// <param name="_sks_CCR_BankTran">
    /// The bank transaction record
    /// </param>
    /// <returns>
    /// returns bank default dimension
    /// </returns>
    //SKS_FDD_13903     Begin
    public static DimensionDefault getDefaultBankAccount_CCR(SKS_CCR_BankTran _sks_CCR_BankTran)
    {
        SKS_PP_Setup                    locSKS_PP_Setup;
        LedgerJournalName               locLedgerJournalName;
        BankAccountTable                bankaccountTableLoc;

        changecompany(_sks_CCR_BankTran.company())
        {
            select firstonly DefaultDimension from bankaccountTableLoc
                where bankaccountTableLoc.AccountID == _sks_CCR_BankTran.AccountId;

            select firstonly CCRJournalName from locSKS_PP_Setup;
        }
        changeCompany(_sks_CCR_BankTran.GLCreationCompany)
        {
            select firstonly defaultdimension from locLedgerJournalName
                where locLedgerJournalName.JournalName == locSKS_PP_Setup.CCRJournalName;
        }

        return LedgerDimensionDefaultFacade::serviceMergeDefaultDimensions(bankaccountTableLoc.DefaultDimension, locLedgerJournalName.DefaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTaxCode</Name>
				<Source><![CDATA[
    //SKS_FDD_13903     End

    /// <summary>This method validates the TaxCode</summary>
    /// <param name="_sks_LB_JournalARApplic">_sks_LB_JournalARApplic</param>
    /// <returns>Returns if is a valid TaxCode</returns>
    //<Issue21228>
    public static boolean validateTaxCode(SKS_LB_JournalARApplic _sks_LB_JournalARApplic)
    {
        TaxLedgerAccountGroup taxLedgerAccountGroup;
        TaxTable taxTable;
        DimensionAttributeValueCombination dimCombTax, dimCombJournal;

        select firstonly taxTable
            where taxTable.TaxCode == _sks_LB_JournalARApplic.TaxCode
        join taxLedgerAccountGroup
            where taxLedgerAccountGroup.TaxAccountGroup == taxTable.TaxAccountGroup
        join dimCombTax
            where dimCombTax.RecId == taxLedgerAccountGroup.TaxReportLedgerDimension
                //<Issue22140>
                || dimCombTax.RecId == taxLedgerAccountGroup.TaxOutgoingLedgerDimension
                || dimCombTax.RecId == taxLedgerAccountGroup.TaxOffsetUseTaxLedgerDimension
                || dimCombTax.RecId == taxLedgerAccountGroup.CashDiscountIncomingLedgerDimension
                || dimCombTax.RecId == taxLedgerAccountGroup.CashDiscountOutgoingLedgerDimension
                //</Issue22140>
        join dimCombJournal
            where dimCombJournal.MainAccount == dimCombTax.MainAccount
                && dimCombJournal.RecId == _sks_LB_JournalARApplic.LedgerDimension;

        return taxTable.RecId;
    }
    //</Issue21228>

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>SKS_PositivePay</ConfigurationKey>
	<DeveloperDocumentation>@SKS840</DeveloperDocumentation>
	<Label>@SKS389</Label>
	<TableGroup>TransactionLine</TableGroup>
	<TitleField1>Invoice</TitleField1>
	<TitleField2>Description</TitleField2>
	<ClusteredIndex>PmtRecIdIdx</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<PrimaryIndex>RecId</PrimaryIndex>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SKS_LB_JournalARRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustTransDataAreaId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustTransRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustTransOpenRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SettleAmountCur</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DiscApplyAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Amount</Name>
			<Label>@SYS62867</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SettleAmountCur</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DiscApplyAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoCredit</Name>
			<Label>@SKS1819</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WriteOff</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LBInvoice</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Journal</Name>
			<Label>@SKS4324</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LedgerDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SKS_BR_BankTran</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DefaultDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Invoice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceDueDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AlreadyMarked</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransactionAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DefaultBankDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Reference</Name>
			<Label>@SYS15217</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TrackingInvoices</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustTransRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustTransDataAreaId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustTransOpenRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SKS_LB_JournalARRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FileRecord</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AltInvLookupRef</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AltInvLookupType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FullSettlement</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendTransOpenRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendTransRecId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Settlement</Name>
			<Label>@SYS10163</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ApplyDiscount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AutoCRAutoRev</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AutoCROffsetLedgerDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AutoRevLedgerDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AutoRevOffsetLedgerDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RevReasonCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WriteOffId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Misc</Name>
			<Label>@SKS4224</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DiscountTakenPercent</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>VATTax</Name>
			<Label>@SYS5878</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxItemGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>showCalculatedTaxValue</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>IHBIntercoAccount</Name>
			<Label>@SKS:SKGIntercoAc</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>IHBIntercoCompany</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IHBIntercoAccountType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IHBIntercoLedgerDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IHB_InterestRepayment</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CCR_Journal</Name>
			<Label>@SKS4324</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LedgerDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SKS_CCR_BankTran</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DefaultDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Invoice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceDueDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AlreadyMarked</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransactionAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DefaultBankDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>BankRec</Name>
			<Label>@SKS3218</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BankRecPrepayment</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BankRecCustPostingProfile</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BRGJPostingDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AccountType</Name>
			<EnumType>LedgerJournalACType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AlreadyMarked</Name>
			<HelpText>@SKS4394</HelpText>
			<Label>@SKS4261</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AltInvLookupRef</Name>
			<AllowEdit>No</AllowEdit>
			<ConfigurationKey>SKS_PositivePay</ConfigurationKey>
			<ExtendedDataType>InvoiceId</ExtendedDataType>
			<HelpText>@SKS2399</HelpText>
			<Label>@SKS2398</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AltInvLookupType</Name>
			<AllowEdit>No</AllowEdit>
			<HelpText>@SKS2400</HelpText>
			<Label>@SKS1714</Label>
			<EnumType>SKS_LB_MatchType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ApplyDiscount</Name>
			<HelpText>@SKS3547</HelpText>
			<Label>@SYS130730</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AutoCRAutoRev</Name>
			<HelpText>@SKS1826</HelpText>
			<Label>@SKS1820</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>AutoCROffsetLedgerDimension</Name>
			<ExtendedDataType>LedgerDimensionDefaultAccount</ExtendedDataType>
			<HelpText>@SKS2152</HelpText>
			<Label>@SKS3545</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>AutoRevLedgerDimension</Name>
			<ExtendedDataType>LedgerDimensionDefaultAccount</ExtendedDataType>
			<HelpText>@SKS2153</HelpText>
			<Label>@SKS2285</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>AutoRevOffsetLedgerDimension</Name>
			<ExtendedDataType>LedgerDimensionDefaultAccount</ExtendedDataType>
			<HelpText>@SKS2152</HelpText>
			<Label>@SKS3545</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustTransDataAreaId</Name>
			<ConfigurationKey>SKS_PositivePay</ConfigurationKey>
			<ExtendedDataType>CompanyId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CustTransOpenRecId</Name>
			<ConfigurationKey>SKS_PositivePay</ConfigurationKey>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CustTransRecId</Name>
			<ConfigurationKey>SKS_PositivePay</ConfigurationKey>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DefaultDimension</Name>
			<ExtendedDataType>DimensionDefault</ExtendedDataType>
			<Label>@SKS4332</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>DiscApplyAmount</Name>
			<ConfigurationKey>SKS_PositivePay</ConfigurationKey>
			<ExtendedDataType>DiscAmount</ExtendedDataType>
			<Label>@SYS11829</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>FileRecord</Name>
			<ExtendedDataType>SKS_EB_FileRecord</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>FullSettlement</Name>
			<HelpText>@SKS3487</HelpText>
			<Label>@SYS75399</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Invoice</Name>
			<ExtendedDataType>InvoiceId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>InvoiceDate</Name>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@SKS4333</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>InvoiceDueDate</Name>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@SKS4334</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LBInvoice</Name>
			<ConfigurationKey>SKS_PositivePay</ConfigurationKey>
			<ExtendedDataType>InvoiceId</ExtendedDataType>
			<Label>@SKS937</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LedgerDimension</Name>
			<ExtendedDataType>DimensionDynamicAccount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RevReasonCode</Name>
			<ExtendedDataType>ReasonCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SettleAmountCur</Name>
			<ConfigurationKey>SKS_PositivePay</ConfigurationKey>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@SYS11660</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SKS_BR_BankTran</Name>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SKS4302</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SKS_LB_JournalARRecId</Name>
			<ConfigurationKey>SKS_PositivePay</ConfigurationKey>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Status</Name>
			<EnumType>SKS_BR_Status</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TrackingInvoices</Name>
			<ExtendedDataType>SKS_LB_eSettlementInvoices</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TransactionAmount</Name>
			<ConfigurationKey>SKS_PositivePay</ConfigurationKey>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@SKS4313</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>WriteOff</Name>
			<HelpText>@SKS1825</HelpText>
			<Label>@SYS99195</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WriteOffId</Name>
			<ExtendedDataType>SKS_LB_WriteOffId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>DiscountTakenPercent</Name>
			<ExtendedDataType>AmountCur</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DefaultBankDimension</Name>
			<ExtendedDataType>DimensionDefault</ExtendedDataType>
			<Label>@SKS4332</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxGroup</Name>
			<ExtendedDataType>TaxGroupJournal</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxItemGroup</Name>
			<ExtendedDataType>TaxGroupJournal</ExtendedDataType>
			<Label>@SYS21932</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>VendTransOpenRecId</Name>
			<ConfigurationKey>SKS_PositivePay</ConfigurationKey>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>VendTransRecId</Name>
			<ConfigurationKey>SKS_PositivePay</ConfigurationKey>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>IHBIntercoCompany</Name>
			<ConfigurationKey>LedgerAdvIntercompanyAccounting</ConfigurationKey>
			<ExtendedDataType>SelectableDataArea</ExtendedDataType>
			<HelpText>@SKS:SKGHTIntercoCompanyAc</HelpText>
			<Label>@SKS:SKGIHBIntercoComp</Label>
			<StringSize>4</StringSize>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IHBIntercoAccountType</Name>
			<HelpText>@SYS27735</HelpText>
			<Label>@SKS:SKGIntercoAcType</Label>
			<EnumType>LedgerJournalACType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>IHBIntercoLedgerDimension</Name>
			<ExtendedDataType>DimensionDynamicAccount</ExtendedDataType>
			<Label>@SKS:SKGIntercoAc</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IHB_InterestRepayment</Name>
			<HelpText>@SKS:SKGIntRepayHT</HelpText>
			<Label>@SKS:SKGIntRepay</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>BankRecPrepayment</Name>
			<Label>@SYS308563</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BankRecCustPostingProfile</Name>
			<ExtendedDataType>CustPostingProfile</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>BRGJPostingDate</Name>
			<ExtendedDataType>TransDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SKS_CCR_BankTran</Name>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SKS4302</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxCode</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>PmtRecIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>CustTransOpenRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>SKS_LB_JournalARRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>DiscountSettlementIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>SKS_LB_JournalARRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>SettleAmountCur</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>DiscApplyAmount</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>InvoiceIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>LedgerDimension</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Invoice</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>SettleAmtIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>SettleAmountCur</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>SKS_LB_JournalARRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Partition</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>CTOSettleAmtIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>SettleAmountCur</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CustTransOpenRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Partition</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>SKS_LB_JournalARRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ARRecIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>SKS_LB_JournalARRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Partition</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>AutoRevIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>SKS_LB_JournalARRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>AutoCRAutoRev</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>BankTranInvAcctTypeIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>SKS_BR_BankTran</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Invoice</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>AccountType</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>CCRTranInvAcctTypeIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>SKS_CCR_BankTran</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Invoice</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>AccountType</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AutoCROffsetLedgerDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>AutoCROffsetLedgerDimension</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>AutoCROffsetLedgerDimensionApplic</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AutoCROffsetLedgerDimension</Name>
					<Field>AutoCROffsetLedgerDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>AutoRevLedgerDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>AutoRevLedgerDimension</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>DimensionAttributeValueCombination</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AutoRevLedgerDimension</Name>
					<Field>AutoRevLedgerDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AutoRevOffsetLedgerDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>AutoRevOffsetLedgerDimension</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>DimensionAttributeValueCombination</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AutoRevOffsetLedgerDimension</Name>
					<Field>AutoRevOffsetLedgerDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustTrans</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustTransDataAreaId</Name>
					<Field>CustTransDataAreaId</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustTransRecId</Name>
					<Field>CustTransRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustTransOpen</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustTransOpen</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustTransDataAreaId</Name>
					<Field>CustTransDataAreaId</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustTransOpenRecId</Name>
					<Field>CustTransOpenRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DataArea</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>DataArea</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustTransDataAreaId</Name>
					<SourceEDT>CompanyId</SourceEDT>
					<Field>CustTransDataAreaId</Field>
					<RelatedField>id</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>isVirtual</Name>
					<SourceEDT>CompanyId</SourceEDT>
					<RelatedField>isVirtual</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>Id</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>DefaultDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueSet</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>SKS_BR_DefaultDimension</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>SKS_LB_journalARApplic</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultDimension</Name>
					<Field>DefaultDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DimensionAttributeValueCombination</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LedgerDimension</Name>
					<Field>LedgerDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>RevReasonCode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ReasonTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RevReasonCode</Name>
					<SourceEDT>ReasonCode</SourceEDT>
					<Field>RevReasonCode</Field>
					<RelatedField>Reason</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SKS_BR_BankTran</Name>
			<Cardinality>ZeroOne</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>SKS_BR_BankTran</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SKS_BR_BankTran</Name>
					<Field>SKS_BR_BankTran</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SKS_LB_JournalAR</Name>
			<Cardinality>ZeroOne</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>SKS_LB_JournalAR</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SKS_LB_JournalARRecId</Name>
					<Field>SKS_LB_JournalARRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DefaultBankDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>DimensionAttributeValueSet</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>SKS_BR_DefaultBankDimension</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>SKS_LB_journalARApplic</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultBankDimension</Name>
					<Field>DefaultBankDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TaxItemGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS125972</EntityRelationshipRole>
			<RelatedTable>TaxItemGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TaxItemGroup</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>LedgerJournalTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustTransDataAreaId</Name>
					<Field>CustTransDataAreaId</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxItemGroup</Name>
					<Field>TaxItemGroup</Field>
					<RelatedField>TaxItemGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TaxGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123571</EntityRelationshipRole>
			<RelatedTable>TaxGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TaxGroup</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>LedgerJournalTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustTransDataAreaId</Name>
					<Field>CustTransDataAreaId</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxGroup</Name>
					<Field>TaxGroup</Field>
					<RelatedField>TaxGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendTrans</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustTransDataAreaId</Name>
					<Field>CustTransDataAreaId</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendTransRecId</Name>
					<Field>VendTransRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendTransOpen</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendTransOpen</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustTransDataAreaId</Name>
					<Field>CustTransDataAreaId</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendTransOpenRecId</Name>
					<Field>VendTransOpenRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>DataArea_IntercoCompany</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>DataArea</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>IHBIntercoCompany</Name>
					<Field>IHBIntercoCompany</Field>
					<RelatedField>id</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>isVirtual</Name>
					<RelatedField>isVirtual</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>IHBIntercoLedgerDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>IntercoLedgerDimension</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>IntercoDimension</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>IHBIntercoLedgerDimension</Name>
					<Field>IHBIntercoLedgerDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SKS_CCR_BankTran</Name>
			<Cardinality>ZeroOne</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>SKS_CCR_BankTran</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SKS_CCR_BankTran</Name>
					<Field>SKS_CCR_BankTran</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>BankRecCustPostingProfile</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>CustLedger</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BankRecCustPostingProfile</Name>
					<Field>BankRecCustPostingProfile</Field>
					<RelatedField>PostingProfile</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>