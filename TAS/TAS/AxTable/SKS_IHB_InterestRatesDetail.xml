<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_IHB_InterestRatesDetail</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class SKS_IHB_InterestRatesDetail extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validTo</Name>
				<Source><![CDATA[
    /// <summary>
    /// To find the Valid to which is nothing but the Valid from date for the next record
    /// </summary>
    public static FromDate validTo(SKS_IHB_InterestRateId _interestRateId, FromDate   _validFrom)
    {
        SKS_IHB_InterestRates       interestRates;
        SKS_IHB_InterestRatesDetail interestRatesDetail;

        // Next valid from is nothing but valid to
        select firstonly interestRatesDetail
            join interestRates
            order by interestRatesDetail.ValidFrom
            where interestRatesDetail.InterestId == interestRates.RecId
                && interestRatesDetail.ValidFrom > _validFrom
                && interestRates.InterestRateId == _interestRateId;

        if (interestRatesDetail.RecId == 0)
        {
            return maxDate();
        }
        else
        {
            return maxDate();       //SKS_Bug_21012
            //return interestRatesDetail.ValidFrom-1;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    public void update()
    {
        SKS_IHB_InterestRates       interestRates =  SKS_IHB_InterestRates::find(this.InterestId);        
        TransDate                   validFrom, validTo;
        container                   entityContainer;//SKS_Bug_12268

        validFrom = this.ValidFrom;
        validTo   = SKS_IHB_InterestRatesDetail::validTo(interestRates.InterestRateId, this.ValidFrom);

        ttsbegin;
        //SKS_Bug_12268 -->
        entityContainer = this.getCalculatedInterestEntity(interestRates.InterestRateId, validFrom, validTo);
        if(conlen(entityContainer) >= 1)
        {
            this.makeRecalculate(entityContainer, interestRates.InterestRateId, validFrom, validTo);
        }
        /*update_recordset calculatedInterest
            setting Recalculate = NoYes::Yes
            where calculatedInterest.InterestRateId == interestRates.InterestRateId
               && calculatedInterest.ValueDate >= validFrom
               && calculatedInterest.ValueDate <= validTo;*/
        //SKS_Bug_12268 <--
        ttscommit;
        
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        SKS_IHB_InterestRates       interestRates =  SKS_IHB_InterestRates::find(this.InterestId);        
        TransDate                   validFrom, validTo;
        container                   entityContainer;//SKS_Bug_12268

        super();

        validFrom = this.ValidFrom;
        validTo   = SKS_IHB_InterestRatesDetail::validTo(interestRates.InterestRateId, this.ValidFrom);

        ttsbegin;
        //SKS_Bug_12268 -->
        entityContainer = this.getCalculatedInterestEntity(interestRates.InterestRateId, validFrom, validTo);
        if(conlen(entityContainer) >= 1)
        {
            this.makeRecalculate(entityContainer, interestRates.InterestRateId, validFrom, validTo);
        }
        /*update_recordset calculatedInterest
            setting Recalculate = NoYes::Yes
            where calculatedInterest.InterestRateId == interestRates.InterestRateId
               && calculatedInterest.ValueDate >= validFrom
               && calculatedInterest.ValueDate <= validTo;*/
        //SKS_Bug_12268 <--
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        SKS_IHB_InterestRates       interestRates =  SKS_IHB_InterestRates::find(this.InterestId);        
        TransDate                   validFrom, validTo;
        container                   entityContainer;//SKS_Bug_12268

        validFrom = this.ValidFrom;
        validTo   = SKS_IHB_InterestRatesDetail::validTo(interestRates.InterestRateId, this.ValidFrom);

        if(SKS_IHB_CalculatedInterest::findByInterestRate(interestRates.InterestRateId, this.ValidFrom).RecId)
        {
            throw error(strFmt("@SKS:SKGRateDelete"));
        }

        ttsbegin;
        //SKS_Bug_12268 -->
        entityContainer = this.getCalculatedInterestEntity(interestRates.InterestRateId, validFrom, validTo);
        if(conlen(entityContainer) >= 1)
        {
            this.makeRecalculate(entityContainer, interestRates.InterestRateId, validFrom, validTo);
        }
        /*update_recordset calculatedInterest
            setting Recalculate = NoYes::Yes
            where calculatedInterest.InterestRateId == interestRates.InterestRateId
               && calculatedInterest.ValueDate >= validFrom
               && calculatedInterest.ValueDate <= validTo;*/
        //SKS_Bug_12268 <--
        ttscommit;
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCalculatedInterestEntity</Name>
				<Source><![CDATA[
    //SKS_Bug_12268 -->
    protected container getCalculatedInterestEntity(SKS_IHB_InterestRateId _interestId, TransDate _validFrom, TransDate _validTo)
    {
        SKS_IHB_CalculatedInterest  calculatedInterestLoc;
        container                   entityCon;

        while select crosscompany DataAreaId from calculatedInterestLoc
            group by DataAreaId
                where calculatedInterestLoc.InterestRateId == _interestId
                && calculatedInterestLoc.ValueDate >= _validFrom
                && calculatedInterestLoc.ValueDate <= _validTo
        {
            entityCon += calculatedInterestLoc.DataAreaId;
        }
        return entityCon;
    }

]]></Source>
			</Method>
			<Method>
				<Name>makeRecalculate</Name>
				<Source><![CDATA[
    protected void makeRecalculate(container _entityContainer,
                                   SKS_IHB_InterestRateId _interestId,
                                   TransDate _validFrom, TransDate _validTo)
    {
        SKS_IHB_CalculatedInterest  calculatedInterest;
        SKS_PP_Bank sKS_PP_Bank;

        for (int i = 1; i<= conLen(_entityContainer); i++)
        {
            changecompany(conPeek(_entityContainer, i))
            {
                //SKS_Bug_21012--->
                while select sKS_PP_Bank
                    where sKS_PP_Bank.SKS_IHBInhouseBank      == NoYes::Yes
                        && sKS_PP_Bank.IHB_PayOffCalculated   == NoYes::No
                        && sKS_PP_Bank.IHB_InterestRateId     != ''
                {
                    calculatedInterest = null;

                    _validFrom = this.getPerdiodStartDates(sKS_PP_Bank, this.ValidFrom);
                    //SKS_Bug_21012<----
                    update_recordset calculatedInterest
                        setting Recalculate = NoYes::Yes
                        where calculatedInterest.InterestRateId == _interestId
                            && calculatedInterest.ValueDate >= _validFrom
                            && calculatedInterest.ValueDate <= _validTo
                            && calculatedInterest.BankAccountID == sKS_PP_Bank.BankAccountId;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPerdiodStartDates</Name>
				<Source><![CDATA[
    //SKS_Bug_12268 -->
    
   
    /// <summary>
    /// Return Period start date
    /// </summary>
    /// <param name = "_sKS_PP_Bank">SKS_PP_Bank</param>
    /// <param name = "_transDate">TransDate</param>
    /// <returns></returns>
    public date getPerdiodStartDates(SKS_PP_Bank _sKS_PP_Bank, TransDate _transDate)
    {
        if (_sKS_PP_Bank.IHB_InterestCalcFreq == SKS_IHB_InterestCalcFreq::Month)
        {
            return dateStartMth(_transDate);
        }
        else
        {
            if (_sKS_PP_Bank.IHB_CalculationFrequencyStartMonth>_sKS_PP_Bank.IHB_CalculationFrequencyEndMonth)
            {
                if (mthOfYr(_transDate)>=_sKS_PP_Bank.IHB_CalculationFrequencyStartMonth)
                {
                    return dateStartMth(mkDate(dayOfMth(_transDate), _sKS_PP_Bank.IHB_CalculationFrequencyStartMonth, year(_transDate)));
                }
                else
                {
                    return dateStartMth(mkDate(dayOfMth(_transDate), _sKS_PP_Bank.IHB_CalculationFrequencyStartMonth, year(_transDate)-1));
                }
            }
            else
            {
                return dateStartMth(mkDate(dayOfMth(_transDate), _sKS_PP_Bank.IHB_CalculationFrequencyStartMonth, year(_transDate)));
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@SKS:SKGIHBIntRatesDetailTableDevDoc</DeveloperDocumentation>
	<Label>@SKS:SKGIHBIntRatesDetail</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>InterestId</TitleField1>
	<TitleField2>ValidFrom</TitleField2>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>InterestId</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SKS:SKGIHBInterestId</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>InterestRate</Name>
			<ExtendedDataType>SKS_IHB_InterestRate</ExtendedDataType>
			<Label>@SKS:SKSIHBInteresRate</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ValidFrom</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>FromDate</ExtendedDataType>
			<Label>@SYS124336</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>InterestIdValidFromIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>InterestId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ValidFrom</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>SKS_IHB_InterestRates</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SKS_IHB_InterestRates</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InterestId</Name>
					<Field>InterestId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>