<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_DD_CustTransMandApplied</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class SKS_DD_CustTransMandApplied extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds table SKS_DD_CustTransMandApplied record based on _CustAccount and _transDate
    /// </summary>
    /// <param name="_custAccount">
    /// customer account.
    /// </param>
    /// <param name="_transDate">
    /// transaction date.
    /// </param>
    /// <param name="_company">
    /// customer company.
    /// </param>
    /// <param name="_forupdate">
    /// forupdate true or false.
    /// </param>
    /// <returns>
    /// SKS_DD_CustTransMandApplied type object.
    /// </returns>
    public static SKS_DD_CustTransMandApplied find(CustAccount    _custAccount,
                                                    TransDate      _transDate,
                                                    DataAreaID     _company,//7324
                                                    boolean         _forupdate = false)
    {
        SKS_DD_CustTransMandApplied    custTransMandApplied;

        if (_forupdate)
            custTransMandApplied.selectForUpdate(_forupdate);

        changecompany(_company) //7324
        {
            select custTransMandApplied
                where custTransMandApplied.CustAccount   == _custAccount
                     && custTransMandApplied.PaymentDate == _transDate;
        }

        return custTransMandApplied;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteCustTransMandApplied_JournalNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// deletes customer transactions
    /// </summary>
    /// <param name="_journalId">
    /// Journal id.
    /// </param>
    /// <param name="_company">
    /// Customer company.
    /// </param>
    // Sks_Bug_7416
    public static void deleteCustTransMandApplied_JournalNum(LedgerJournalId  _journalId, DataAreaId    _company = curExt())
    {
        SKS_DD_CustTransMandApplied     custTransMandApplied;
        CustTransOpen                   custTransOpen;
        SpecTrans                       specTrans;
        LedgerJournalTrans              ledgerJournalTrans;
    
        ttsBegin;
        if (_journalId != '')
            custTransMandApplied.selectForUpdate(true);      
        while select crosscompany ledgerJournalTrans
            where ledgerJournalTrans.JournalNum == _journalId 
            && ledgerJournalTrans.AccountType == LedgerJournalACType::Cust // Sks_Bug_7416
        {
            SKS_DD_CustTransMandApplied::deleteCustTransMandApplied(ledgerJournalTrans);
        }    
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteCustTransMandApplied</Name>
				<Source><![CDATA[
    /// <summary>
    /// deletescustomer transactions
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    /// LedgerJournalTrans object.
    /// </param>
    // Sks_Bug_7416
    public static void deleteCustTransMandApplied(LedgerJournalTrans    _ledgerJournalTrans)
    {
        SpecTrans                       specTrans;
        CustTransOpen                   custTransOpen;
        SpecTrans                       specTransLoc;
        CustAccount                     custAccount;
        AmountCur                       specBalance;

        while select crosscompany specTrans
            group by RefCompany
            where specTrans.SpecTableId == tableNum(ledgerJournalTrans)
                && specTrans.SpecRecId  == _ledgerJournalTrans.RecId
                && specTrans.SpecCompany == _ledgerJournalTrans.dataareaid
            join custTransOpen
                where custTransOpen.TableId == specTrans.RefTableId
                    && custTransOpen.RecId  == specTrans.RefRecId 
                    && custTransOpen.dataareaid == specTrans.RefCompany
        {
            select  crosscompany sum(Balance01), count(RecId) from specTransLoc
                        where specTransLoc.SpecTableId == tableNum(ledgerJournalTrans)
                            && specTransLoc.SpecRecId  == _ledgerJournalTrans.RecId
                            && specTransLoc.RefCompany == specTrans.RefCompany
                            join  TableId,RecId from custTransOpen
                            where custTransOpen.TableId == specTransLoc.RefTableId
                                && custTransOpen.RecId  == specTransLoc.RefRecId;
            if(specTransLoc.Balance01 > 0 && _ledgerJournalTrans.AmountCurCredit > 0)
            {
                if(_ledgerJournalTrans.AmountCurCredit <= specTransLoc.Balance01)
                {
                    specBalance = _ledgerJournalTrans.AmountCurCredit;
                }
                else
                {
                    specBalance = specTransLoc.Balance01;
                }
            }
            //SKS_Bug_8704 -->
            if(specTrans.RefCompany)
            {
                //SKS_Bug_8704 <--
                changecompany(specTrans.RefCompany)
                {
                    SKS_DD_CustTransMandApplied     custTransMandApplied;
                    ttsbegin;
                    custTransMandApplied.clear();
                    custAccount = LedgerDynamicAccountHelper::getAccountNumberFromDynamicAccount(_ledgerJournalTrans.parmLedgerDimension());
                    custTransMandApplied = SKS_DD_CustTransMandApplied::find(custAccount, _ledgerJournalTrans.TransDate, specTrans.RefCompany, true);
                    if (custTransMandApplied.RecId)
                    {
                        custTransMandApplied.AppliedMandateLimit -= specBalance;
                        if (custTransMandApplied.AppliedMandateLimit > 0)
                        {
                            custTransMandApplied.update();
                        }
                        else
                        {
                            custTransMandApplied.delete();
                        }
                    }
                    custTransMandApplied.reread();
                    ttscommit;
                }
                //SKS_Bug_8704 <--
            }
            //SKS_Bug_8704 <--
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@SKS4223</DeveloperDocumentation>
	<Label>@SKS4222</Label>
	<TableGroup>TransactionLine</TableGroup>
	<TitleField1>JournalNum</TitleField1>
	<TitleField2>AppliedMandateLimit</TitleField2>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AppliedMandateLimit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymentDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>General</Name>
			<Label>@SYS2952</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>JournalNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Misc</Name>
			<Label>@SKS4224</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AppliedMandateLimit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymentDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AppliedMandateLimit</Name>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Label>@SKS4225</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustAccount</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>CustAccount</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>PaymentDate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@SYS114292</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>JournalNum</Name>
			<ExtendedDataType>LedgerJournalId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>company</Name>
			<ExtendedDataType>DataAreaId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes />
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LedgerJournalTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>LedgerJournalTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>JournalNum</Name>
					<Field>JournalNum</Field>
					<RelatedField>JournalNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>