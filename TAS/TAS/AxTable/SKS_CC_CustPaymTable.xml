<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_CC_CustPaymTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class SKS_CC_CustPaymTable extends common
{



}
]]></Declaration>
		<Methods>
			<Method>
				<Name>editCreditCard</Name>
				<Source><![CDATA[
    client server edit CreditCardNumber editCreditCard(boolean _set, CreditCardNumber _creditCardNumber)
    {
        RecId recId = str2int64(strRTrim(strLTrim(_creditCardNumber)));
        CreditCardNumber creditCardNumber;
        CreditCardCust creditCardCust;

        if (_set)
        {
            if (recId)
            {
                creditCardCust = CreditCardCust::find(recId);
                if (creditCardCust.RecId && this.CustAccount == creditCardCust.CustAccount)
                {
                    this.CreditCardCustRefId = creditCardCust.RecId;
                    creditCardNumber = CreditCardCust::find(this.CreditCardCustRefId).CardNumber;
                    this.CreditCardTypeName = creditCardCust.CreditCardTypeName;
                }
                else
                {
                    this.CreditCardCustRefId = 0;
                    this.CreditCardTypeName = '';
                }
            }
            else
            {
                this.CreditCardCustRefId = 0;
                this.CreditCardTypeName = '';
            }

            this.validateField(fieldNum(SKS_CC_CustPaymTable, CreditCardCustRefId));

            return creditCardNumber;
        }

        // Double check to make sure the record hasn't been deleted
        if (this.CreditCardCustRefId && CreditCardCust::exist(this.CreditCardCustRefId))
        {
            creditCardNumber = CreditCardCust::find(this.CreditCardCustRefId).CardNumber;
        }
        else
        {
            this.CreditCardCustRefId = 0;
            this.CreditCardTypeName = '';
        }

        return creditCardNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUnpostedAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the difference between the total amount and
    ///     the posted amount.  Due to changes in the total amount after
    ///     posting, the unposted amount can be larger than the total amount.
    /// </summary>
    /// <returns>
    ///     The payment amount that has not been posted, in the payment
    ///     currency.
    /// </returns>
    public display AmountCur getUnpostedAmount()
    {
        return this.CreditCardTransAmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(SKS_CC_CustPaymTable, CreditCardCustRefId) :
                if (this.CreditCardCustRefId)
                {
                    this.CreditCardTypeName = CreditCardCust::find(this.CreditCardCustRefId).CreditCardTypeName;
                }
                else
                {
                    this.CreditCardTypeName = '';
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByRecID</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds a record by RecID.
    /// </summary>
    /// <param name="_recId">
    ///     The record ID used to search for a <c>SKS_CC_CustPaymTable</c> record.
    /// </param>
    /// <param name="_forUpdate">
    ///     A <c>boolean</c> used to determine whether or not a record should be selected for update; optional.
    /// </param>
    /// <returns>
    ///     The <c>SKS_CC_CustPaymTable</c> record found.
    /// </returns>
    public static SKS_CC_CustPaymTable findByRecID(RecId _recId, boolean _forUpdate = false)
    {
        SKS_CC_CustPaymTable creditCardCustPaymTable;

        if (_recId)
        {
            creditCardCustPaymTable.selectForUpdate(_forUpdate);

            select firstonly creditCardCustPaymTable
            where creditCardCustPaymTable.RecId == _recId;
        }
        return creditCardCustPaymTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByRefRecIDRefTableID</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds a record by RefRecId and RefTableId.
    /// </summary>
    /// <param name="_refRecId">
    ///     The reference record ID used to search for the applicable <c>SKS_CC_CustPaymTable</c> record.
    /// </param>
    /// <param name="_refTableId">
    ///     The reference table ID used to search for the applicable <c>SKS_CC_CustPaymTable</c> record.
    /// </param>
    /// <param name="_forUpdate">
    ///     <c>Boolean</c> used to determine whether or not the applicable <c>SKS_CC_CustPaymTable</c> record
    ///         should be selected for update; optional.
    /// </param>
    /// <returns>
    ///     The <c>SKS_CC_CustPaymTable</c> record found.
    /// </returns>
    public static SKS_CC_CustPaymTable findByRefRecIDRefTableID(RecId _refRecId, TableId _refTableId, boolean _forUpdate = false)
    {
        SKS_CC_CustPaymTable creditCardCustPaymTable;

        if (_refRecId && _refTableId)
        {
            creditCardCustPaymTable.selectForUpdate(_forUpdate);

            select creditCardCustPaymTable
            where creditCardCustPaymTable.RefTableId == _refTableId
               && creditCardCustPaymTable.RefRecId   == _refRecId;
        }
        return creditCardCustPaymTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCreditCardAmountCharged</Name>
				<Source><![CDATA[
    public static AmountCur getCreditCardAmountCharged(RefTableId _refTableId, RefRecId _refRecId)
    {
        SKS_CC_CustPaymTable        custPaymTable;
        AmountCur                   retAmount;

        if (!_refTableId || !_refRecId)
        {
            return 0;
        }

        select sum(CreditCardTransAmountCur) from custPaymTable
        where custPaymTable.RefTableId == _refTableId
           && custPaymTable.RefRecId == _refRecId
           && (custPaymTable.CreditCardTransStatus == CreditCardProcessorStatus::Approved ||
               custPaymTable.CreditCardTransStatus == CreditCardProcessorStatus::Settled)
           && custPaymTable.ApprovalVoid == NoYes::No
           && custPaymTable.ApprovalExpired == NoYes::No;

        retAmount = custPaymTable.CreditCardTransAmountCur;

        return retAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCreditCardAmountFromSource</Name>
				<Source><![CDATA[
    public static AmountCur getCreditCardAmountFromSource(RefTableId _refTableId, RefRecId _refRecId)
    {
        SKS_CC_CustPaymTable        custPaymTable;
        AmountCur                   retAmount, amtToCharge;

        if (!_refTableId || !_refRecId)
        {
            return 0;
        }

        select sum(CreditCardTransAmountCur) from custPaymTable
        where custPaymTable.RefTableId == _refTableId
           && custPaymTable.RefRecId == _refRecId
           && (custPaymTable.CreditCardTransStatus == CreditCardProcessorStatus::Approved ||
               custPaymTable.CreditCardTransStatus == CreditCardProcessorStatus::Settled ||
               custPaymTable.CreditCardTransStatus == CreditCardProcessorStatus::NA)
           && custPaymTable.ApprovalVoid == NoYes::No
           && custPaymTable.ApprovalExpired == NoYes::No;

        amtToCharge = SKS_CC_CustPaymTable::getCreditCardAmountToCharge(_refTableId, _refRecId);
        retAmount = amtToCharge - custPaymTable.CreditCardTransAmountCur;

        if (retAmount > 0 && custPaymTable.CreditCardTransAmountCur < 0)
        {
            retAmount = 0;
        }

        if (retAmount < 0 && custPaymTable.CreditCardTransAmountCur > 0)
        {
            retAmount = 0;
        }

        return retAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCreditCardAmountPendingToCharge</Name>
				<Source><![CDATA[
    public static AmountCur getCreditCardAmountPendingToCharge(RefTableId _refTableId, RefRecId _refRecId)
    {
        SKS_CC_CustPaymTable        custPaymTable;
        AmountCur                   retAmount;

        if (!_refTableId || !_refRecId)
        {
            return 0;
        }

        select sum(CreditCardTransAmountCur) from custPaymTable
        where custPaymTable.RefTableId == _refTableId
           && custPaymTable.RefRecId == _refRecId
           && custPaymTable.CreditCardTransStatus == CreditCardProcessorStatus::NA
           && custPaymTable.ApprovalVoid == NoYes::No
           && custPaymTable.ApprovalExpired == NoYes::No;

        retAmount = custPaymTable.CreditCardTransAmountCur;

        return retAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCreditCardAmountRemainFromSource</Name>
				<Source><![CDATA[
    public static AmountCur getCreditCardAmountRemainFromSource(RefTableId _refTableId, RefRecId _refRecId)
    {
        SKS_CC_CustPaymTable        custPaymTable;
        AmountCur                   retAmount, amtToCharge;

        if (!_refTableId || !_refRecId)
        {
            return 0;
        }

        select sum(CreditCardTransAmountCur) from custPaymTable
        where custPaymTable.RefTableId == _refTableId
           && custPaymTable.RefRecId == _refRecId
           && (custPaymTable.CreditCardTransStatus == CreditCardProcessorStatus::Approved ||
               custPaymTable.CreditCardTransStatus == CreditCardProcessorStatus::Settled)
           && custPaymTable.ApprovalVoid == NoYes::No
           && custPaymTable.ApprovalExpired == NoYes::No;

        amtToCharge = SKS_CC_CustPaymTable::getCreditCardAmountToCharge(_refTableId, _refRecId);
        retAmount = amtToCharge - custPaymTable.CreditCardTransAmountCur;

        if (retAmount > 0 && custPaymTable.CreditCardTransAmountCur < 0)
        {
            retAmount = 0;
        }

        if (retAmount < 0 && custPaymTable.CreditCardTransAmountCur > 0)
        {
            retAmount = 0;
        }

        return retAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCreditCardAmountToCharge</Name>
				<Source><![CDATA[
    public static AmountCur getCreditCardAmountToCharge(RefTableId _refTableId, RefRecId _refRecId)
    {
        LedgerJournalTrans          ledgerJournalTrans;
        SalesTable                  salesTable;
        SalesLine                   salesLine;
        SMAServiceOrderTable        serviceOrderTable;
        SMAServiceOrderLine         serviceOrderLine;
        ProjProposalJour            projProposalJour;
        ProjLineProperty            projLineProperty;
        SalesTotals                 salesTotals;
        AmountCur                   retAmount;

        if (!_refTableId || !_refRecId)
        {
            return 0;
        }

        switch (_refTableId)
        {
            case tableNum(LedgerJournalTrans):
                select firstonly1 AmountCurCredit, AmountCurDebit, RecId from ledgerJournalTrans
                    where ledgerJournalTrans.RecId == _refRecId;

                if (ledgerJournalTrans.RecId)
                {
                    if (ledgerJournalTrans.AmountCurCredit)
                    {
                        retAmount = ledgerJournalTrans.AmountCurCredit;
                    }
                    else
                    {
                        retAmount = ledgerJournalTrans.AmountCurDebit * -1;
                    }
                }
                break;
            case tableNum(SMAServiceOrderTable):
                while select ProjSalesPrice, Qty, ProjCurrencyCode from serviceOrderLine
                    where serviceOrderLine.ServiceOrderStatus == SMAServiceOrderStatus::Created
                exists join serviceOrderTable
                    where serviceOrderTable.ServiceOrderId == serviceOrderLine.ServiceOrderId
                       && serviceOrderTable.RecId          == _refRecId
                exists join projLineProperty
                    where projLineProperty.LinePropertyId == serviceOrderLine.ProjLinePropertyId
                       && projLineProperty.ToBeInvoiced   == NoYes::Yes
                {
                    retAmount +=  CurrencyExchangeHelper::amount(serviceOrderLine.Qty * serviceOrderLine.ProjSalesPrice, serviceOrderLine.ProjCurrencyCode);
                }

                serviceOrderTable = null;
                serviceOrderTable = SMAServiceOrderTable::sKS_CC_FindRecId(_refRecId);

                while select LineAmount from salesLine
                where salesLine.ServiceOrderId == serviceOrderTable.ServiceOrderId
                   && salesLine.ProjId == serviceOrderTable.ProjId
                   && salesLine.SalesType == SalesType::ItemReq
                   && salesLine.SalesStatus == SalesStatus::Backorder
                {
                    retAmount += salesLine.LineAmount;
                }
                break;
            case tableNum(ProjProposalJour):
                projProposalJour = ProjProposalJour::findRecid(_refRecId);
                retAmount = projProposalJour.InvoiceAmount;
                break;
            case tableNum(SalesTable):
                select firstonly1 salesTable
                    where salesTable.RecId == _refRecId;

                salesTotals = SalesTotals::construct(salesTable, SalesUpdate::All);
                salesTotals.calc();
                retAmount = salesTotals.totalAmount();
                break;
        }

        return retAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasApprovedCreditCardPayments</Name>
				<Source><![CDATA[
    public static boolean hasApprovedCreditCardPayments(RefTableId _refTableId, RefRecId _refRecId)
    {
        SKS_CC_CustPaymTable        sKS_CC_CustPaymTable;
        boolean                     ret = false;

        select firstonly RecId from sKS_CC_CustPaymTable
            where sKS_CC_CustPaymTable.RefTableId == _refTableId
                && sKS_CC_CustPaymTable.RefRecId == _refRecId
                && (sKS_CC_CustPaymTable.CreditCardTransType == SKS_CC_CreditCardTransType::Capture ||
                    sKS_CC_CustPaymTable.CreditCardTransType == SKS_CC_CreditCardTransType::Refund)
                && (sKS_CC_CustPaymTable.CreditCardTransStatus == CreditCardProcessorStatus::Approved ||
                    sKS_CC_CustPaymTable.CreditCardTransStatus == CreditCardProcessorStatus::Settled)
                && sKS_CC_CustPaymTable.ApprovalVoid == NoYes::No
                && sKS_CC_CustPaymTable.ApprovalExpired == NoYes::No;

        if (sKS_CC_CustPaymTable.RecId)
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>IsCreditCardPaymMode</Name>
				<Source><![CDATA[
    public static boolean IsCreditCardPaymMode(CustPaymMode _custPaymMode)
    {
        boolean ret;
        CustPaymModeTable custPaymModeTableCheck;

        if (_custPaymMode)
        {
            custPaymModeTableCheck = CustPaymModeTable::find(_custPaymMode);
            if (custPaymModeTableCheck.PaymentType == CustPaymentType::CreditCard &&
            custPaymModeTableCheck.PaymStatus == CustVendPaymStatus::Confirmed)
            {
                ret = true;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupOrigCaptureAuthTrans</Name>
				<Source><![CDATA[
    public static void lookupOrigCaptureAuthTrans(FormStringControl _ctrl,
                                              RefRecid          _creditCardCustRefId,
                                              CurrencyCode      _currencyCode)
    {
        SysTableLookup          sysTableLookup = SysTableLookup::newParameters(tableNum(CreditCardAuthTrans), _ctrl);
        Query                   query = new Query();
        QueryBuildDataSource    queryBuildDataSource, qbdsCreditCardCust;
        QueryBuildRange         queryBuildRange, qbrApprovalType, qbrProcessorStatus;
        QueryBuildRange         qbrApprovalVoidStatus, qbrCurrencyCode;

        sysTableLookup.addLookupfield(fieldNum(CreditCardAuthTrans, Authorization));
        sysTableLookup.addLookupfield(fieldNum(CreditCardAuthTrans, ApprovedDateTime));
        sysTableLookup.addLookupfield(fieldNum(CreditCardAuthTrans, CreditCardTypeName));
        sysTableLookup.addLookupfield(fieldNum(CreditCardAuthTrans, CreditCardNumber));
        sysTableLookup.addLookupfield(fieldNum(CreditCardAuthTrans, ApprovalAmountCur));
        sysTableLookup.addLookupfield(fieldNum(CreditCardAuthTrans, ApprovalType));


        queryBuildDataSource = query.addDataSource(tableNum(CreditCardAuthTrans));
        qbdsCreditCardCust = queryBuildDataSource.addDataSource(tableNum(CreditCardCust));
        qbdsCreditCardCust.addLink(fieldNum(CreditCardAuthTrans, UniqueCardId),
                               fieldNum(CreditCardCust, UniqueCardId));

        qbdsCreditCardCust.joinMode(JoinMode::ExistsJoin);

        if (_creditCardCustRefId)
        {
            queryBuildRange = qbdsCreditCardCust.addRange(fieldNum(CreditCardCust, RecId));
            queryBuildRange.value(queryValue(_creditCardCustRefId));
        }

        qbrApprovalType = queryBuildDataSource.addRange(fieldNum(CreditCardAuthTrans, ApprovalType));
        qbrApprovalType.value(strFmt('%1, %2', enum2Str(CreditCardOperation::AuthorizeAndCapture),
                                 enum2Str(CreditCardOperation::CaptureAfterAuthorize)));

        qbrProcessorStatus = queryBuildDataSource.addRange(fieldNum(CreditCardAuthTrans, ProcessorStatus));
        qbrProcessorStatus.value(enum2Value(CreditCardProcessorStatus::Approved));

        qbrApprovalVoidStatus = queryBuildDataSource.addRange(fieldNum(CreditCardAuthTrans, ApprovalVoid));
        qbrApprovalVoidStatus.value(enum2Value(NoYes::No));

        if (_currencyCode)
        {
            qbrCurrencyCode = queryBuildDataSource.addRange(fieldNum(CreditCardAuthTrans, CurrencyCode));
            qbrCurrencyCode.value(_currencyCode);
        }

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>cancelPreAuthorization</Name>
				<Source><![CDATA[
    public static server boolean cancelPreAuthorization(Common _common)
    {
        CreditCardAuthTrans     creditCardAuthTrans2Cancel;
        SKS_CC_CustPaymTable    sKS_CC_CustPaymTable2Cancel;
        boolean ok;

        if (!_common.RecId)
        {
            return true;
        }

        sKS_CC_CustPaymTable2Cancel = SKS_CC_CustPaymTable::findCCPaymWithApprovedAuthorization(_common.TableId, _common.RecId);
        if (!sKS_CC_CustPaymTable2Cancel)
        {
            return true;
        }

        creditCardAuthTrans2Cancel = CreditCardAuthTrans::sKS_CC_FindValidPreApproval(sKS_CC_CustPaymTable2Cancel.RecId);
        if (!creditCardAuthTrans2Cancel)
        {
            return true;
        }

        if (Box::okCancel("@SYS116762", DialogButton::Cancel)== DialogButton::Ok)
        {
            ok = SKS_CC_CreditCardProcess::sKS_CC_doVoidAuth(creditCardAuthTrans2Cancel);
            if (ok)
            {
                info(strFmt("@SKS6430", creditCardAuthTrans2Cancel.Authorization));
            }            
        }
        else
        {
            return false;
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete_CC_CustPaymTable</Name>
				<Source><![CDATA[
    public server static void delete_CC_CustPaymTable(
        RefTableId _refTableId,
        RefRecId _refRecId,
        SKS_CC_CreditCardTransType _transType,
        CreditCardProcessorStatus _processorStatus,
        boolean _isDeleteAll = false)
    {
        SKS_CC_CustPaymTable    custPaymTable;

        if (_refTableId && _refRecId)
        {
            if (_isDeleteAll)
            {
                delete_from custPaymTable
                    where custPaymTable.RefTableId == _refTableId
                       && custPaymTable.RefRecId == _refRecId;
            }
            else
            {
                delete_from custPaymTable
                    where custPaymTable.RefTableId == _refTableId
                       && custPaymTable.RefRecId == _refRecId
                       && custPaymTable.CreditCardTransType == _transType
                       && custPaymTable.CreditCardTransStatus == _processorStatus;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findApprovedCreditCardPayments</Name>
				<Source><![CDATA[
    public static SKS_CC_CustPaymTable findApprovedCreditCardPayments(RefTableId _refTableId, RefRecId _refRecId)
    {
        SKS_CC_CustPaymTable        sKS_CC_CustPaymTable;

        select sKS_CC_CustPaymTable
            where sKS_CC_CustPaymTable.RefTableId == _refTableId
                && sKS_CC_CustPaymTable.RefRecId == _refRecId
                && (sKS_CC_CustPaymTable.CreditCardTransType == SKS_CC_CreditCardTransType::Capture ||
                    sKS_CC_CustPaymTable.CreditCardTransType == SKS_CC_CreditCardTransType::Refund)
                && (sKS_CC_CustPaymTable.CreditCardTransStatus == CreditCardProcessorStatus::Approved ||
                    sKS_CC_CustPaymTable.CreditCardTransStatus == CreditCardProcessorStatus::Settled)
                && sKS_CC_CustPaymTable.ApprovalVoid == NoYes::No
                && sKS_CC_CustPaymTable.ApprovalExpired == NoYes::No;

        return sKS_CC_CustPaymTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCCPaymWithApprovedAuthorization</Name>
				<Source><![CDATA[
    public static SKS_CC_CustPaymTable findCCPaymWithApprovedAuthorization(RefTableId _refTableId, RefRecId _refRecId)
    {
        SKS_CC_CustPaymTable    sKS_CC_CustPaymTable;

        void findPreAuthorization()
        {
            select sKS_CC_CustPaymTable
            where sKS_CC_CustPaymTable.RefTableId == _refTableId
                && sKS_CC_CustPaymTable.RefRecId == _refRecId
                && sKS_CC_CustPaymTable.CreditCardTransType == SKS_CC_CreditCardTransType::Authorization
                && sKS_CC_CustPaymTable.CreditCardTransStatus == CreditCardProcessorStatus::Approved
                && sKS_CC_CustPaymTable.ApprovalVoid == NoYes::No
                && sKS_CC_CustPaymTable.ApprovalExpired == NoYes::No;
        }

        // First determine if an approved pre-authorization exists
        findPreAuthorization();

        if (sKS_CC_CustPaymTable.RecId)
        {
            sKS_CC_CustPaymTable::findValidPreApprovalForCCPaym(sKS_CC_CustPaymTable.RecId);

            // Search for an approved pre-authorization again
            // since it may have been expired on the previous method call.
            findPreAuthorization();
        }

        return sKS_CC_CustPaymTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPendingAuthorization</Name>
				<Source><![CDATA[
    public static SKS_CC_CustPaymTable findPendingAuthorization(RefTableId _refTableId, RefRecId _refRecId)
    {
        SKS_CC_CustPaymTable        sKS_CC_CustPaymTable;

        select firstonly sKS_CC_CustPaymTable
        where sKS_CC_CustPaymTable.RefTableId == _refTableId
            && sKS_CC_CustPaymTable.RefRecId == _refRecId
            && sKS_CC_CustPaymTable.CreditCardTransType == SKS_CC_CreditCardTransType::Authorization
            && sKS_CC_CustPaymTable.CreditCardTransStatus == CreditCardProcessorStatus::NA
            && sKS_CC_CustPaymTable.ApprovalVoid == NoYes::No
            && sKS_CC_CustPaymTable.ApprovalExpired == NoYes::No;

        return SKS_CC_CustPaymTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPendingOrApprovedPayment</Name>
				<Source><![CDATA[
    public static SKS_CC_CustPaymTable findPendingOrApprovedPayment(RefTableId _refTableId, RefRecId _refRecId)
    {
        SKS_CC_CustPaymTable    sKS_CC_CustPaymTable;

        select firstonly sKS_CC_CustPaymTable
        where sKS_CC_CustPaymTable.RefTableId == _refTableId
            && sKS_CC_CustPaymTable.RefRecId == _refRecId
            && (sKS_CC_CustPaymTable.CreditCardTransType == SKS_CC_CreditCardTransType::Capture ||
                sKS_CC_CustPaymTable.CreditCardTransType == SKS_CC_CreditCardTransType::Refund)
            && (sKS_CC_CustPaymTable.CreditCardTransStatus == CreditCardProcessorStatus::NA ||
                sKS_CC_CustPaymTable.CreditCardTransStatus == CreditCardProcessorStatus::Approved)
            && sKS_CC_CustPaymTable.ApprovalVoid == NoYes::No
            && sKS_CC_CustPaymTable.ApprovalExpired == NoYes::No;

        return sKS_CC_CustPaymTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPendingPayment</Name>
				<Source><![CDATA[
    public static SKS_CC_CustPaymTable findPendingPayment(RefTableId _refTableId, RefRecId _refRecId)
    {
        SKS_CC_CustPaymTable    sKS_CC_CustPaymTable;

        select firstonly sKS_CC_CustPaymTable
        where sKS_CC_CustPaymTable.RefTableId == _refTableId
            && sKS_CC_CustPaymTable.RefRecId == _refRecId
            && (sKS_CC_CustPaymTable.CreditCardTransType == SKS_CC_CreditCardTransType::Capture ||
                sKS_CC_CustPaymTable.CreditCardTransType == SKS_CC_CreditCardTransType::Refund)
            && sKS_CC_CustPaymTable.CreditCardTransStatus == CreditCardProcessorStatus::NA
            && sKS_CC_CustPaymTable.ApprovalVoid == NoYes::No
            && sKS_CC_CustPaymTable.ApprovalExpired == NoYes::No;

        return sKS_CC_CustPaymTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findValidPreApprovalForCCPaym</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>CreditCardAuthTrans</c> table.
    /// </summary>
    /// /// <param name="_SKS_CC_CustPaymTableRefRecId">
    /// The SKS_CC_CustPaymTable record ID of the record to find.
    /// </param>
    /// <returns>
    /// A record in the <c>CreditCardAuthTrans</c> table; otherwise, an empty record.
    /// </returns>
    public static CreditCardAuthTrans findValidPreApprovalForCCPaym(RefRecId _SKS_CC_CustPaymTableRefRecId)
    {
        CreditCardAuthTrans creditCardAuthTrans;

        SKS_CC_CustPaymTable::updateExpiredApproval(_SKS_CC_CustPaymTableRefRecId);

        select firstonly creditCardAuthTrans
        where creditCardAuthTrans.SKS_CC_CustPaymTable == _SKS_CC_CustPaymTableRefRecId &&
            creditCardAuthTrans.ApprovalType == CreditCardOperation::Authorize &&
            !creditCardAuthTrans.ApprovalVoid &&
            !creditCardAuthTrans.ApprovalExpired &&
            creditCardAuthTrans.ProcessorStatus == CreditCardProcessorStatus::Approved;

        return creditCardAuthTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getServiceOrderFromProposal</Name>
				<Source><![CDATA[
    public static SMAServiceOrderTable getServiceOrderFromProposal(ProjProposalJour _projProposalJour)
    {
        SMAServiceOrderTable        serviceOrderTable;
        SMAServiceOrderLine         serviceOrderLine;
        SalesLine                   salesLine;
        ProjProposalCost            projProposalCost;
        ProjProposalEmpl            projProposalEmpl;
        ProjProposalItem            projProposalItem;
        ProjProposalRevenue         projProposalRevenue;
        ProjProposalOnAcc           projProposalOnAcc;
        SMAServiceOrderId           serviceOrderId;

        if (!_projProposalJour)
        {
            return null;
        }

        if (!SKS_PP_Setup::isCreditCardServiceOrderEnabled())
        {
            return null;
        }

        // If proposal is a credit note then service order may not be used for the invoice proposal.
        if (_projProposalJour.InvoiceAmount < 0)
        {
            return null;
        }

        // On-Account
        // If On-Account transactions exist then service order may not be used for the invoice proposal.
        select firstonly ProposalId from ProjProposalOnAcc
        where projProposalOnAcc.ProposalId == _projProposalJour.ProposalId;

        if (ProjProposalOnAcc.ProposalId)
        {
            return null;
        }

        // Expenses
        // If non-service order lines exist then service order may not be used for the invoice proposal.
        select firstonly TransId from projProposalCost
        where projProposalCost.ProposalId == _projProposalJour.ProposalId
    notexists join serviceOrderLine
        where serviceOrderLine.ProjTransId == projProposalCost.TransId
           && serviceOrderLine.TransactionType == SMATransactionType::Expense;

        if (projProposalCost.TransId)
        {
            return null;
        }

        while select serviceOrderId from serviceOrderLine
        group by serviceOrderId
    exists join projProposalCost
        where serviceOrderLine.TransactionType == SMATransactionType::Expense
           && projProposalCost.TransId == serviceOrderLine.ProjTransId
           && projProposalCost.ProposalId == _projProposalJour.ProposalId
        {
            if (!serviceOrderId)
            {
                serviceOrderId = serviceOrderLine.ServiceOrderId;
            }
            else
            {
                if (serviceOrderId != serviceOrderLine.ServiceOrderId)
                {
                    return null;
                }
            }
        }

        // Hours
        // If non-service order lines exist then service order may not be used for the invoice proposal.
        select firstonly TransId from projProposalEmpl
        where projProposalEmpl.ProposalId == _projProposalJour.ProposalId
    notexists join serviceOrderLine
        where serviceOrderLine.ProjTransId == projProposalEmpl.TransId
           && serviceOrderLine.TransactionType == SMATransactionType::Hour;

        if (projProposalEmpl.TransId)
        {
            return null;
        }

        while select serviceOrderId from serviceOrderLine
        group by serviceOrderId
    exists join projProposalEmpl
        where serviceOrderLine.TransactionType == SMATransactionType::Hour
           && projProposalEmpl.TransId == serviceOrderLine.ProjTransId
           && projProposalEmpl.ProposalId == _projProposalJour.ProposalId
        {
            if (!serviceOrderId)
            {
                serviceOrderId = serviceOrderLine.ServiceOrderId;
            }
            else
            {
                if (serviceOrderId != serviceOrderLine.ServiceOrderId)
                {
                    return null;
                }
            }
        }

        // Items
        // If non-service order lines exist then service order may not be used for the invoice proposal.
        select firstonly ProjTransId from projProposalItem
        where projProposalItem.ProposalId == _projProposalJour.ProposalId
    notexists join serviceOrderLine
        where serviceOrderLine.ProjTransId == projProposalItem.ProjTransId
           && serviceOrderLine.TransactionType == SMATransactionType::Item;

        if (projProposalItem.ProjTransId)
        {
            // Check item requirements
            select firstonly ProjTransId from projProposalItem
            where projProposalItem.ProposalId == _projProposalJour.ProposalId
        exists join salesLine
            where salesLine.ProjTransId == projProposalItem.ProjTransId
               && salesLine.ServiceOrderId == '';

            if (projProposalItem.ProjTransId)
            {
                return null;
            }
        }

        while select serviceOrderId from serviceOrderLine
        group by serviceOrderId
    exists join projProposalItem
        where serviceOrderLine.TransactionType == SMATransactionType::Item
           && projProposalItem.ProjTransId == serviceOrderLine.ProjTransId
           && projProposalItem.ProposalId == _projProposalJour.ProposalId
        {
            if (!serviceOrderId)
            {
                serviceOrderId = serviceOrderLine.ServiceOrderId;
            }
            else
            {
                if (serviceOrderId != serviceOrderLine.ServiceOrderId)
                {
                    return null;
                }
            }
        }

        // Item requirements
        while select serviceOrderId from salesLine
        group by serviceOrderId
    exists join projProposalItem
        where salesLine.ServiceOrderId
           && salesLine.SalesType == SalesType::ItemReq
           && projProposalItem.ProjTransId == salesLine.ProjTransId
           && projProposalItem.ProposalId == _projProposalJour.ProposalId
        {
            if (!serviceOrderId)
            {
                serviceOrderId = salesLine.ServiceOrderId;
            }
            else
            {
                if (serviceOrderId != salesLine.ServiceOrderId)
                {
                    return null;
                }
            }
        }

        // Fees
        // If non-service order lines exist then service order may not be used for the invoice proposal.
        select firstonly TransId from projProposalRevenue
        where projProposalRevenue.ProposalId == _projProposalJour.ProposalId
    notexists join serviceOrderLine
        where serviceOrderLine.ProjTransId == projProposalRevenue.TransId
           && serviceOrderLine.TransactionType == SMATransactionType::Fee;

        if (projProposalRevenue.TransId)
        {
            return null;
        }

        while select serviceOrderId from serviceOrderLine
        group by serviceOrderId
    exists join projProposalRevenue
        where serviceOrderLine.TransactionType == SMATransactionType::Fee
           && projProposalRevenue.TransId == serviceOrderLine.ProjTransId
           && projProposalRevenue.ProposalId == _projProposalJour.ProposalId
        {
            if (!serviceOrderId)
            {
                serviceOrderId = serviceOrderLine.ServiceOrderId;
            }
            else
            {
                if (serviceOrderId != serviceOrderLine.ServiceOrderId)
                {
                    return null;
                }
            }
        }

        // If only one service order was found then use it for the invoice proposal.
        if (serviceOrderId)
        {
            serviceOrderTable = SMAServiceOrderTable::find(serviceOrderId);
        }

        return serviceOrderTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateExpiredApproval</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the credit card approval expiration for the specified SKS_CC_CustPaymTable record.
    /// </summary>
    /// <param name="_SKS_CC_CustPaymTableRefRecId">
    /// The SKS_CC_CustPaymTable record ID of the record to find.
    /// </param>
    public static void updateExpiredApproval(RefRecId _SKS_CC_CustPaymTableRefRecId)
    {
        UserConnection connection = new UserConnection();
        CreditCardAuthTrans authTrans;
        CreditCardPreapprovalLastNoOfDays days = CustParameters::find().CreditCardPreapprovalLastNoOfDays;

        SKS_CC_CustPaymTable sKS_CC_CustPaymTable;
        if (!_SKS_CC_CustPaymTableRefRecId)
        {
            return;
        }

        authTrans.setConnection(connection);
        sKS_CC_CustPaymTable.setConnection(connection);

        connection.ttsbegin();

        while select forupdate authTrans
        where authTrans.SKS_CC_CustPaymTable == _SKS_CC_CustPaymTableRefRecId &&
            authTrans.ApprovalType == CreditCardOperation::Authorize &&
            !authTrans.ApprovalVoid &&
            !authTrans.ApprovalExpired &&
            authTrans.ProcessorStatus == CreditCardProcessorStatus::Approved
        {
            if ((DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()) - DateTimeUtil::date(authTrans.ApprovedDateTime)) > days)
            {
                authTrans.ApprovalExpired = true;
                authTrans.update();

                if (authTrans.SKS_CC_CustPaymTable)
                {
                    while select forupdate sKS_CC_CustPaymTable
                    where sKS_CC_CustPaymTable.RecId == authTrans.SKS_CC_CustPaymTable
                       && (sKS_CC_CustPaymTable.CreditCardTransType == SKS_CC_CreditCardTransType::Authorization ||
                           sKS_CC_CustPaymTable.CreditCardTransTypeOrig == SKS_CC_CreditCardTransType::Authorization)
                       && sKS_CC_CustPaymTable.CreditCardTransStatus == CreditCardProcessorStatus::Approved
                       && sKS_CC_CustPaymTable.ApprovalExpired == NoYes::No
                    {
                        sKS_CC_CustPaymTable.ApprovalExpired = NoYes::Yes;
                        sKS_CC_CustPaymTable.update();
                    }
                }
            }
        }

        connection.ttscommit();
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasApprovedAuthorization</Name>
				<Source><![CDATA[
    public static boolean hasApprovedAuthorization(RefTableId _refTableId, RefRecId _refRecId)
    {
        SKS_CC_CustPaymTable        sKS_CC_CustPaymTable;
        boolean                     ret = false;

        void findPreAuthorization()
        {
            select firstonly RecId, CreditCardTransStatus from sKS_CC_CustPaymTable
            where sKS_CC_CustPaymTable.RefTableId == _refTableId
                && sKS_CC_CustPaymTable.RefRecId == _refRecId
                && sKS_CC_CustPaymTable.CreditCardTransType == SKS_CC_CreditCardTransType::Authorization
                && sKS_CC_CustPaymTable.CreditCardTransStatus == CreditCardProcessorStatus::Approved
                && sKS_CC_CustPaymTable.ApprovalVoid == NoYes::No
                && sKS_CC_CustPaymTable.ApprovalExpired == NoYes::No;
        }

        // First determine if an approved pre-authorization exists
        findPreAuthorization();

        if (sKS_CC_CustPaymTable.RecId)
        {
            // If an approved pre-authorization is found then check to see if it needs to be expired.
            sKS_CC_CustPaymTable::findValidPreApprovalForCCPaym(sKS_CC_CustPaymTable.RecId);

            // Search for an approved pre-authorization again
            // since it may have been expired on the previous method call.
            findPreAuthorization();
            if (sKS_CC_CustPaymTable.RecId)
            {
                ret = true;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasPendingAuthorization</Name>
				<Source><![CDATA[
    public static boolean hasPendingAuthorization(RefTableId _refTableId, RefRecId _refRecId)
    {
        SKS_CC_CustPaymTable        sKS_CC_CustPaymTable;
        boolean                     ret = false;

        select firstonly RecId, CreditCardTransStatus from sKS_CC_CustPaymTable
        where sKS_CC_CustPaymTable.RefTableId == _refTableId
            && sKS_CC_CustPaymTable.RefRecId == _refRecId
            && sKS_CC_CustPaymTable.CreditCardTransType == SKS_CC_CreditCardTransType::Authorization
            && sKS_CC_CustPaymTable.CreditCardTransStatus == CreditCardProcessorStatus::NA
            && sKS_CC_CustPaymTable.ApprovalVoid == NoYes::No
            && sKS_CC_CustPaymTable.ApprovalExpired == NoYes::No;

        if (sKS_CC_CustPaymTable.RecId)
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasPendingOrApprovedAuthorization</Name>
				<Source><![CDATA[
    public static boolean hasPendingOrApprovedAuthorization(RefTableId _refTableId, RefRecId _refRecId)
    {
        SKS_CC_CustPaymTable        sKS_CC_CustPaymTable;
        boolean                     ret = false;

        void findPreAuthorization()
        {
            select firstonly RecId, CreditCardTransStatus from sKS_CC_CustPaymTable
            where sKS_CC_CustPaymTable.RefTableId == _refTableId
                && sKS_CC_CustPaymTable.RefRecId == _refRecId
                && sKS_CC_CustPaymTable.CreditCardTransType == SKS_CC_CreditCardTransType::Authorization
                && (sKS_CC_CustPaymTable.CreditCardTransStatus == CreditCardProcessorStatus::NA ||
                    sKS_CC_CustPaymTable.CreditCardTransStatus == CreditCardProcessorStatus::Approved)
                && sKS_CC_CustPaymTable.ApprovalVoid == NoYes::No
                && sKS_CC_CustPaymTable.ApprovalExpired == NoYes::No;
        }

        // First determine if a pending or approved pre-authorization exists
        findPreAuthorization();

        if (sKS_CC_CustPaymTable.RecId)
        {
            // If an approved pre-authorization is found then check to see if it needs to be expired.
            if (sKS_CC_CustPaymTable.CreditCardTransStatus == CreditCardProcessorStatus::Approved)
            {
                sKS_CC_CustPaymTable::findValidPreApprovalForCCPaym(sKS_CC_CustPaymTable.RecId);

                // Search for a pending or approved pre-authorization again
                // since it may have been expired on the previous method call.
                findPreAuthorization();
                if (sKS_CC_CustPaymTable.RecId)
                {
                    ret = true;
                }
            }
            else
            {
                ret = true;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasPendingOrApprovedPayment</Name>
				<Source><![CDATA[
    public static boolean hasPendingOrApprovedPayment(RefTableId _refTableId, RefRecId _refRecId)
    {
        SKS_CC_CustPaymTable        sKS_CC_CustPaymTable;
        boolean                     ret = false;

        select firstonly RecId from sKS_CC_CustPaymTable
        where sKS_CC_CustPaymTable.RefTableId == _refTableId
            && sKS_CC_CustPaymTable.RefRecId == _refRecId
            && (sKS_CC_CustPaymTable.CreditCardTransType == SKS_CC_CreditCardTransType::Capture ||
                sKS_CC_CustPaymTable.CreditCardTransType == SKS_CC_CreditCardTransType::Refund)
            && (sKS_CC_CustPaymTable.CreditCardTransStatus == CreditCardProcessorStatus::NA ||
                sKS_CC_CustPaymTable.CreditCardTransStatus == CreditCardProcessorStatus::Approved ||
                sKS_CC_CustPaymTable.CreditCardTransStatus == CreditCardProcessorStatus::Settled)
            && sKS_CC_CustPaymTable.ApprovalVoid == NoYes::No
            && sKS_CC_CustPaymTable.ApprovalExpired == NoYes::No;

        if (sKS_CC_CustPaymTable.RecId)
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasCreditCardPaymentRecord</Name>
				<Source><![CDATA[
    public static boolean hasCreditCardPaymentRecord(RefTableId _refTableId, RefRecId _refRecId)
    {
        SKS_CC_CustPaymTable        sKS_CC_CustPaymTable;
        boolean                     ret = false;

        select firstonly1 RecId from sKS_CC_CustPaymTable
        where sKS_CC_CustPaymTable.RefTableId == _refTableId
            && sKS_CC_CustPaymTable.RefRecId == _refRecId;

        if (sKS_CC_CustPaymTable.RecId)
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasPendingPayment</Name>
				<Source><![CDATA[
    public static boolean hasPendingPayment(RefTableId _refTableId, RefRecId _refRecId)
    {
        SKS_CC_CustPaymTable        sKS_CC_CustPaymTable;
        boolean                     ret = false;

        select firstonly RecId from sKS_CC_CustPaymTable
        where sKS_CC_CustPaymTable.RefTableId == _refTableId
            && sKS_CC_CustPaymTable.RefRecId == _refRecId
            && (sKS_CC_CustPaymTable.CreditCardTransType == SKS_CC_CreditCardTransType::Capture ||
                sKS_CC_CustPaymTable.CreditCardTransType == SKS_CC_CreditCardTransType::Refund)
            && sKS_CC_CustPaymTable.CreditCardTransStatus == CreditCardProcessorStatus::NA
            && sKS_CC_CustPaymTable.ApprovalVoid == NoYes::No
            && sKS_CC_CustPaymTable.ApprovalExpired == NoYes::No;

        if (sKS_CC_CustPaymTable.RecId)
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>IsCreditCardPaymentTerms</Name>
				<Source><![CDATA[
    public static boolean IsCreditCardPaymentTerms(CustPaymTermId _custPaymTermId)
    {
        boolean ret;
        PaymTerm paymTerm;

        if (_custPaymTermId)
        {
            paymTerm = PaymTerm::find(_custPaymTermId);
            if (paymTerm.CreditCardPaymentType == CreditCardPaymentType::CreditCard)
            {
                ret = true;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPaymTermFromServiceOrder</Name>
				<Source><![CDATA[
    public static void setPaymTermFromServiceOrder(ProjProposalJour _projProposalJour)
    {
        SMAServiceOrderTable    serviceOrderTable;

        serviceOrderTable = SKS_CC_CustPaymTable::getServiceOrderFromProposal(_projProposalJour);

        if (serviceOrderTable)
        {
            _projProposalJour.SKS_CC_ServiceOrderId = serviceOrderTable.ServiceOrderId;

            if (serviceOrderTable.SKS_CC_Payment)
            {
                _projProposalJour.Payment = serviceOrderTable.SKS_CC_Payment;
            }
        }
        else
        {
            if (_projProposalJour.SKS_CC_ServiceOrderId)
            {
                _projProposalJour.SKS_CC_ServiceOrderId = '';
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>voidServiceOrderAuthorization</Name>
				<Source><![CDATA[
    public static void voidServiceOrderAuthorization(Set _serviceOrdersToVoidSet)
    {
        SMAServiceOrderTable    serviceOrderTable;
        SKS_CC_CustPaymTable    sKS_CC_CustPaymTable;
        CreditCardAuthTrans     creditCardAuthTrans;
        SetEnumerator           setEnumeratorServiceOrderToVoid;
        SMAServiceOrderId       curServiceOrderId;
        boolean                 voidOK;

        if (!_serviceOrdersToVoidSet)
        {
            return;
        }

        if (_serviceOrdersToVoidSet.empty())
        {
            return;
        }

        setEnumeratorServiceOrderToVoid = _serviceOrdersToVoidSet.getEnumerator();
        while (setEnumeratorServiceOrderToVoid.moveNext())
        {
            curServiceOrderId = setEnumeratorServiceOrderToVoid.current();
            serviceOrderTable = SMAServiceOrderTable::find(curServiceOrderId);

            sKS_CC_CustPaymTable = SKS_CC_CustPaymTable::findCCPaymWithApprovedAuthorization(serviceOrderTable.TableId, serviceOrderTable.RecId);
            if (!sKS_CC_CustPaymTable)
            {
                continue;
            }

            creditCardAuthTrans = creditCardAuthTrans::sKS_CC_FindValidPreApproval(sKS_CC_CustPaymTable.RecId);
            if (!creditCardAuthTrans)
            {
                continue;
            }

            try
            {
                voidOK = SKS_CC_CreditCardProcess::sKS_CC_doVoidAuth(creditCardAuthTrans);
                if (voidOK)
                {
                    info(strFmt("@SKS6430", creditCardAuthTrans.Authorization));
                }
                else
                {
                    error(strFmt("@SKS6436", creditCardAuthTrans.Authorization));
                    continue;
                }
            }
            catch (Exception::Error)
            {
                ttsAbort;
                error(strFmt("@SKS6696", creditCardAuthTrans.Authorization, curServiceOrderId));
                continue;
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@SKS6418</DeveloperDocumentation>
	<FormRef>SKS_CC_CustPaymTable</FormRef>
	<Label>@SKS6407</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>CreditCardTransOrigin</TitleField1>
	<TitleField2>RefOriginId</TitleField2>
	<ClusteredIndex>RefIdIdx</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CreditCardTransType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CreditCardTransStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CreditCardCustRefId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CreditCardTypeName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CreditCardTransAmountCur</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CreditCardCurrency</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrigAuthorizationForRefund</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CreditCardTransOrigin</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RefTableId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RefRecId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS36443</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RefTableId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RefRecid</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Reference</Name>
			<Label>@SYS112248</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CreditCardTransOrigin</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RefOriginId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>OriginalTransInfo</Name>
			<Label>@SKS6326</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CreditCardTransTypeOrig</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CreditCardTransStatusOrig</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ApprovedDateTimeOrig</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AuthorizationCodeOrig</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ApprovalCodeOrig</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CreditCardTransAmountCurOrig</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS110924</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CustAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CreditCardTransType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CreditCardCustRefId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CreditCardTypeName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CreditCardTransAmountCur</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CreditCardCurrency</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CreditCardTransStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CreditCardTransOrigin</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrigAuthorizationForRefund</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AuthorizationCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ApprovalCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ApprovedDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ApprovalVoid</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsPaymentReversal</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ApprovalExpired</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CreditCardTransType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<HelpText>@SKS6328</HelpText>
			<EnumType>SKS_CC_CreditCardTransType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CreditCardTransStatus</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<Label>@SYS16396</Label>
			<EnumType>CreditCardProcessorStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ApprovalCode</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>CreditCardAuthorization</ExtendedDataType>
			<HelpText>@SKS6440</HelpText>
			<Label>@SKS6429</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ApprovalExpired</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<HelpText>@SYS116913</HelpText>
			<Label>@SYS107504</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ApprovalVoid</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<HelpText>@SYS116929</HelpText>
			<Label>@SYS6127</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>ApprovedDateTime</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>ApprovedDateTime</ExtendedDataType>
			<Label>@SKS6324</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>ApprovedDateTimeOrig</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>ApprovedDateTime</ExtendedDataType>
			<Label>@SKS6316</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AuthorizationCode</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>CreditCardAuthorization</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AuthorizationCodeOrig</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>CreditCardAuthorization</ExtendedDataType>
			<Label>@SKS6325</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CreditCardCurrency</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>CustCurrencyCode</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CreditCardCustRefId</Name>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<HelpText>@SKS6317</HelpText>
			<Label>@SYS126889</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CreditCardTransAmountCur</Name>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@SYS6928</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CreditCardTransOrigin</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<HelpText>@SKS6329</HelpText>
			<EnumType>SKS_CC_CreditCardTransOrigin</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CreditCardTransStatusOrig</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<Label>@SKS6321</Label>
			<EnumType>CreditCardProcessorStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CreditCardTransTypeOrig</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<HelpText>@SKS6327</HelpText>
			<Label>@SKS6322</Label>
			<EnumType>SKS_CC_CreditCardTransType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CreditCardTypeName</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>CreditCardTypeName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustAccount</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>CustAccount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsPaymentReversal</Name>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<HelpText>@SKS6551</HelpText>
			<Label>@SKS6550</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OrigAuthorizationForRefund</Name>
			<ExtendedDataType>CreditCardAuthorization</ExtendedDataType>
			<Label>@SKS6320</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RefOriginId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>Num</ExtendedDataType>
			<Label>@SKS6323</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RefRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SKS6319</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>RefTableId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>RefTableId</ExtendedDataType>
			<Label>@SKS6318</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ApprovalCodeOrig</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>CreditCardAuthorization</ExtendedDataType>
			<Label>@SKS6728</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CreditCardTransAmountCurOrig</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@SYS81979</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>RefIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>RefTableId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RefRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TransTypeIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>CreditCardTransType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CreditCardTransStatus</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ApprovalVoid</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ApprovalExpired</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RefTableId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RefRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RecId</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TransOriginIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>CreditCardTransOrigin</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RefTableId</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RefRecId</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RecId</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TransStatusIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>CreditCardTransStatus</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ApprovalVoid</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ApprovalExpired</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RefTableId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RefRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CreditCardTransAmountCur</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RecId</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>CustAccountIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>CustAccount</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RefTableId</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RefRecId</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RecId</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>CreditCardRefTableRefIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>CreditCardCustRefId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CreditCardTransStatus</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RefTableId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RefRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>AuthorizationCodeIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ApprovalCode</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RefTableId</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RefRecId</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RecId</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ApprovalCodeIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ApprovalCode</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RefTableId</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RefRecId</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RecId</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>PaymReversalIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>IsPaymentReversal</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CreditCardTransType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CreditCardTransStatus</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ApprovalVoid</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RefTableId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RefRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>CreditCard</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CreditCardCust</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CreditCardCustRefId</Name>
					<Field>CreditCardCustRefId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CreditCardCurrency</Name>
					<Field>CreditCardCurrency</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustAccount</Name>
					<Field>CustAccount</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>LedgerJournalTrans</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LedgerJournalTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefRecId</Name>
					<Field>RefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefTableId</Name>
					<Field>RefTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProjProposalJour</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjProposalJour</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefTableId</Name>
					<Field>RefTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefRecId</Name>
					<Field>RefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SMAServiceOrderTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SMAServiceOrderTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefTableId</Name>
					<Field>RefTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefRecId</Name>
					<Field>RefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>