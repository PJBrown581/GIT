<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PIPInventFlexSamplingPlanLineEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PIPInventFlexSamplingPlanLineEntity extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>determineIsLastLevel</Name>
				<Source><![CDATA[
    private static str determineIsLastLevel()
    {
        SysDictTable dictPlanTable = new SysDictTable(tableNum(PIPInventFlexSamplingPlanTable));
        
        // SELECT CASE WHEN T1.LEVEL_ = (SELECT LASTLEVEL FROM PIPINVENTFLEXSAMPLINGPLANTABLE WHERE PIPINVENTFLEXSAMPLINGPLANTABLE.FLEXIBLESAMPLINGPLANID = T1.FLEXIBLESAMPLINGPLANID AND PIPINVENTFLEXSAMPLINGPLANTABLE.DATAAREAID = T1.DATAAREAID AND PIPINVENTFLEXSAMPLINGPLANTABLE.PARTITION = T1.PARTITION) THEN 1 ELSE 0 END
        return strFmt('SELECT CASE WHEN %1 = (SELECT %2 FROM %3 WHERE %3.%4 = %5 AND %3.%6 = %7 AND %3.%8 = %9) THEN 1 ELSE 0 END',
            SysComputedColumn::returnField(tableStr(PIPInventFlexSamplingPlanLineEntity), dataEntityDataSourceStr(PIPInventFlexSamplingPlanLineEntity, PIPInventFlexSamplingPlanLines), fieldStr(PIPInventFlexSamplingPlanLines, Level)),
            dictPlanTable.fieldName(fieldNum(PIPInventFlexSamplingPlanTable, LastLevel), DbBackend::Sql),
            dictPlanTable.name(DbBackend::Sql),
            dictPlanTable.fieldName(fieldNum(PIPInventFlexSamplingPlanTable, FlexibleSamplingPlanId), DbBackend::Sql),
            SysComputedColumn::returnField(tableStr(PIPInventFlexSamplingPlanLineEntity), dataEntityDataSourceStr(PIPInventFlexSamplingPlanLineEntity, PIPInventFlexSamplingPlanLines), fieldStr(PIPInventFlexSamplingPlanLines, FlexibleSamplingPlanId)),
            dictPlanTable.fieldName(fieldNum(PIPInventFlexSamplingPlanTable, DataAreaId), DbBackend::Sql),
            SysComputedColumn::returnField(tableStr(PIPInventFlexSamplingPlanLineEntity), dataEntityDataSourceStr(PIPInventFlexSamplingPlanLineEntity, PIPInventFlexSamplingPlanLines), fieldStr(PIPInventFlexSamplingPlanLines, DataAreaId)),
            dictPlanTable.fieldName(fieldNum(PIPInventFlexSamplingPlanTable, Partition), DbBackend::Sql),
            SysComputedColumn::returnField(tableStr(PIPInventFlexSamplingPlanLineEntity), dataEntityDataSourceStr(PIPInventFlexSamplingPlanLineEntity, PIPInventFlexSamplingPlanLines), fieldStr(PIPInventFlexSamplingPlanLines, Partition)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertEntityDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Inserts the entity data source record into the target table.
    /// </summary>
    /// <param name = "_entityCtx">The entity runtime context.</param>
    /// <param name = "_dataSourceCtx">The data source context for the data source being updated.</param>
    /// <returns>true if the insert succeeded; otherwise, false.</returns>
    public boolean insertEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        boolean ret;
        
        ret = super(_entityCtx, _dataSourceCtx);
        
        if (ret && _dataSourceCtx.name() == dataEntityDataSourceStr(PIPInventFlexSamplingPlanLineEntity, PIPInventFlexSamplingPlanLines) && this.IsLastLevel)
        {
            this.updatePlanTableLastLevel(_dataSourceCtx.getBuffer());
        }
        
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateEntityDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Updates the entity data source record into the target table.
    /// </summary>
    /// <param name = "_entityCtx">The entity runtime context.</param>
    /// <param name = "_dataSourceCtx">The data source context for the data source being updated.</param>
    /// <returns>true if the update succeeded; otherwise, false.</returns>
    public boolean updateEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        boolean ret;
        
        ret = super(_entityCtx, _dataSourceCtx);
        
        if (ret && _dataSourceCtx.name() == dataEntityDataSourceStr(PIPInventFlexSamplingPlanLineEntity, PIPInventFlexSamplingPlanLines) && this.IsLastLevel)
        {
            this.updatePlanTableLastLevel(_dataSourceCtx.getBuffer());
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePlanTableLastLevel</Name>
				<Source><![CDATA[
    private void updatePlanTableLastLevel(PIPInventFlexSamplingPlanLines _planLine)
    {
        PIPInventFlexSamplingPlanTable planTable = _planLine.flexibleSamplingPlan(true);
        planTable.LastLevel = _planLine.Level;
        planTable.update();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PIPInventFlexSampling</ConfigurationKey>
	<FormRef>PIPInventFlexSamplingPlan</FormRef>
	<Label>@PIP99</Label>
	<Tags>Flexible sampling plan</Tags>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>PIPInventFlexSamplingPlanLineStaging</DataManagementStagingTable>
	<IsPublic>Yes</IsPublic>
	<Modules>ISV</Modules>
	<PrimaryCompanyContext>DataAreaId</PrimaryCompanyContext>
	<PrimaryKey>EntityKey</PrimaryKey>
	<PublicCollectionName>PIPInventFlexSamplingPlanLines</PublicCollectionName>
	<PublicEntityName>PIPInventFlexSamplingPlanLine</PublicEntityName>
	<SupportsSetBasedSqlOperations>Yes</SupportsSetBasedSqlOperations>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Consecutive</Name>
			<DataField>Consecutive</DataField>
			<DataSource>PIPInventFlexSamplingPlanLines</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>FailActionCode</Name>
			<DataField>FailActionCode</DataField>
			<DataSource>PIPInventFlexSamplingPlanLines</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>FailActionLevel</Name>
			<DataField>FailActionLevel</DataField>
			<DataSource>PIPInventFlexSamplingPlanLines</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>NumberOfFails</Name>
			<DataField>Fails</DataField>
			<DataSource>PIPInventFlexSamplingPlanLines</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>FlexibleSamplingPlanCode</Name>
			<DataField>FlexibleSamplingPlanId</DataField>
			<DataSource>PIPInventFlexSamplingPlanLines</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ItemSampling</Name>
			<DataField>ItemSamplingId</DataField>
			<DataSource>PIPInventFlexSamplingPlanLines</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Level</Name>
			<DataField>Level</DataField>
			<DataSource>PIPInventFlexSamplingPlanLines</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PassActionLevel</Name>
			<DataField>PassActionLevel</DataField>
			<DataSource>PIPInventFlexSamplingPlanLines</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Rounds</Name>
			<DataField>Rounds</DataField>
			<DataSource>PIPInventFlexSamplingPlanLines</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Skip</Name>
			<DataField>Skip</DataField>
			<DataSource>PIPInventFlexSamplingPlanLines</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TestGroup</Name>
			<DataField>TestGroupId</DataField>
			<DataSource>PIPInventFlexSamplingPlanLines</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TestFrequency</Name>
			<DataField>TestPerSampleGroup</DataField>
			<DataSource>PIPInventFlexSamplingPlanLines</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>OutOfFrequency</Name>
			<DataField>TestSampleGroupSize</DataField>
			<DataSource>PIPInventFlexSamplingPlanLines</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TimeSpanDays</Name>
			<DataField>TimeSpanDays</DataField>
			<DataSource>PIPInventFlexSamplingPlanLines</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldEnum">
			<Name>IsLastLevel</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<HelpText>@PIP371</HelpText>
			<Label>@PIP158</Label>
			<ComputedFieldMethod>determineIsLastLevel</ComputedFieldMethod>
			<EnumType>NoYes</EnumType>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>FlexibleSamplingPlanCode</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>Level</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>PIPInventFlexSamplingPlanLines</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>PIPInventFlexSamplingPlanLines</Table>
				<DataSources />
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>