<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PIPFlexInventTestAssociationTableForm_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(formStr(InventTestAssociationTable))]
public final class PIPFlexInventTestAssociationTableForm_Extension
{
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>PIPFlexibleSampling_OnModified</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormDataFieldEventHandler(formDataFieldStr(InventTestAssociationTable, InventTestAssociationTable, PIPFlexibleSampling), FormDataFieldEventType::Modified)]
    public void PIPFlexibleSampling_OnModified(FormDataObject sender, FormDataFieldEventArgs e)
    {
        #PIPFlexibleSampling
            
        this.initRecord();

        // MSBUG: Added due to compiler issues in Update5/6
        InventTestAssociationTable inventTestAssociationTable = InventTestAssociationTable_ds.cursor();
            
        if (!inventTestAssociationTable.PIPFlexibleSampling)
        {
            inventTestAssociationTable.PIPFlexibleSamplingPlanId = '';
        }
        else
        {
            inventTestAssociationTable.AcceptableQualityLevel = #AcceptableQualityLevel;
            inventTestAssociationTable.TestGroupId = '';
            inventTestAssociationTable.ItemSamplingId = '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>PIPFlexibleSamplingPlanId_OnValidating</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormDataFieldEventHandler(formDataFieldStr(InventTestAssociationTable, InventTestAssociationTable, PIPFlexibleSamplingPlanId), FormDataFieldEventType::Validating)]
    public void PIPFlexibleSamplingPlanId_OnValidating(FormDataObject sender, FormDataFieldEventArgs e)
    {
        if (!PIPInventFlexSamplingPlanTable::findByPlanId(inventTestAssociationTable.PIPFlexibleSamplingPlanId).LastLevel)
        {
            checkFailed(strFmt("@PIP188", inventTestAssociationTable.PIPFlexibleSamplingPlanId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>InventTestAssociationTable_PIPFlexibleSamplingPlanId_OnLookup</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormControlEventHandler(formControlStr(InventTestAssociationTable, InventTestAssociationTable_PIPFlexibleSamplingPlanId), FormControlEventType::Lookup)]
    public void InventTestAssociationTable_PIPFlexibleSamplingPlanId_OnLookup(FormControl sender, FormControlEventArgs e)
    {
        Query                   query = new Query();
        QueryBuildDataSource    queryBuildDataSource;
            
        SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(PIPInventFlexSamplingPlanTable), sender);
            
        sysTableLookup.addLookupField(fieldNum(PIPInventFlexSamplingPlanTable, FlexibleSamplingPlanId));
            
        queryBuildDataSource = query.addDataSource(tableNum(PIPInventFlexSamplingPlanTable));
            
        queryBuildDataSource.addRange(fieldNum(PIPInventFlexSamplingPlanTable, Approved)).value(queryValue(NoYes::Yes));
            
        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();

        FormControlCancelableSuperEventArgs ce = e as FormControlCancelableSuperEventArgs;
        ce.CancelSuperCall();
    }

]]></Source>
			</Method>
			<Method>
				<Name>InventTestAssociationTable_Post_initRecord</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="args"></param>
    [PostHandlerFor(formStr(InventTestAssociationTable), formMethodStr(InventTestAssociationTable, initRecord))]
    public static void InventTestAssociationTable_Post_initRecord(XppPrePostArgs args)
    {
        FormRun formRun = args.getThis();
        FormDataSource InventTestAssociationTable_ds = FormRun.dataSource(formDataSourceStr(InventTestAssociationTable,InventTestAssociationTable)) as FormDataSource;
        InventTestAssociationTable inventTestAssociationTable = InventTestAssociationTable_ds.cursor() as InventTestAssociationTable;

        boolean canEditGroupAndSampling = inventTestAssociationTable.pipCanEditGroupAndSmplingSpecification();

        InventTestAssociationTable_ds.object(fieldNum(InventTestAssociationTable, PIPFlexibleSamplingPlanId)).enabled(inventTestAssociationTable.PIPFlexibleSampling);
        InventTestAssociationTable_ds.object(fieldNum(InventTestAssociationTable, PIPFlexibleSamplingPlanId)).mandatory(inventTestAssociationTable.PIPFlexibleSampling);
        InventTestAssociationTable_ds.object(fieldNum(InventTestAssociationTable, TestGroupId)).enabled(canEditGroupAndSampling);
        InventTestAssociationTable_ds.object(fieldNum(InventTestAssociationTable, TestGroupId)).mandatory(canEditGroupAndSampling);
        InventTestAssociationTable_ds.object(fieldNum(InventTestAssociationTable, ItemSamplingId)).enabled(canEditGroupAndSampling);
        InventTestAssociationTable_ds.object(fieldNum(InventTestAssociationTable, ItemSamplingId)).mandatory(canEditGroupAndSampling);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>