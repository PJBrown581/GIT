<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PIPInventFlexSamplingActivityCreate</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>PIPInventFlexSamplingActivityCreate</c> class handles the creation of quality orders when
///     the flexible sampling functionality is being used and creates activities and activity details
///     corresponding to the quality orders for tracking purposes.
/// </summary>
class PIPInventFlexSamplingActivityCreate
{
    PIPInventFlexSamplingCurrentState       state;
    PIPInventFlexSamplingActivityTable      activityTable;
    InventTestAssociationTable              inventTestAssociationTable;
    PIPInventFlexSamplingPlanLines          nextPlanLine;
    PIPInventFlexSamplingPlanLines          currentPlanLine;
    PIPInventFlexSamplingActivityDetails    newActivityDetail;

    int                                     registrationCount;
    int                                     testCountForMultipleOrders;

    Set                                     roundsToTestForMultipleGroups;
    container                               roundsToTest;
    container                               roundsToTestMultipleSets;

    boolean                                 nonInvent;
    boolean                                 achievedPassCriteria;
    boolean                                 hitFailCriteria;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildCurrentState</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Builds the current state of the <c>PIPInventFlexSamplingCurrentState</c> class.
    /// </summary>
    public void buildCurrentState()
    {
        state = PIPInventFlexSamplingCurrentState::newFromTable(activityTable);
    
        currentPlanLine = state.currentPlanLine();
        nextPlanLine    = state.nextPlanLine();
    
        if (!currentPlanLine)
        {
            currentPlanLine.data(nextPlanLine);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkNeedToTest</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether a quality order needs to be generated based on the skipping logic.
    /// </summary>
    /// <returns>
    ///     true if quality order should be generated; otherwise, false.
    /// </returns>
    public boolean checkNeedToTest()
    {
        int     counter = 1;
        boolean shouldTest;
    
        roundsToTest = PIPFlexSamplingActivitySkipTracking::roundsToTest(activityTable.RecId);
    
        if (newActivityDetail.RoundTrackingNumber == 1 || !roundsToTest)
        {
            roundsToTest = PIPFlexSamplingActivitySkipTracking::setRoundsToTest(
                    activityTable.RecId,
                    currentPlanLine.TestPerSampleGroup,
                    currentPlanLine.TestSampleGroupSize);
    
            newActivityDetail.RoundsToSkip = roundsToTest;
        }
    
        while (conPeek(roundsToTest, counter))
        {
            if (conPeek(roundsToTest, counter) == newActivityDetail.RoundTrackingNumber)
            {
                shouldTest = true;
                break;
            }
            counter++;
        }
    
        return shouldTest;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createActivitiesForMultipleOrders</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates activity details when there are multiple quality orders that need to be
    ///     generated and the current sampling plan line involves skipping.
    /// </summary>
    /// <remarks>
    ///     At this stage only activity details are geneareted and marked as skipped/non-skipped
    ///     so that when the quality order is generated, these activity details can be updated
    ///     accordingly.
    /// </remarks>
    public void createActivitiesForMultipleOrders()
    {
        int i;
    
        roundsToTestForMultipleGroups = new Set (Types::Integer);
    
        ttsBegin;
    
        for (i = 0; i < registrationCount; i++)
        {
            state.update();
            currentPlanLine = state.currentPlanLine();
            nextPlanLine = state.nextPlanLine();
    
            this.initActivityDetail();
    
            if (this.checkNeedToTest())
            {
                newActivityDetail.Skip = NoYes::No;
                newActivityDetail.insert();
                testCountForMultipleOrders++;
    
                roundsToTestForMultipleGroups.add(i);
            }
            else
            {
                newActivityDetail.Skip = NoYes::Yes;
                newActivityDetail.insert();
            }
        }
    
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createActivityDetailNonSkip</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates a record in the <c>PIPInventFlexSamplingActivityDetails</c> table corresponding to a quality order.
    /// </summary>
    /// <param name="_inventQualityOrderTable">
    ///     The <c>InventQualityOrderTable</c> record to be used as reference.
    /// </param>
    public void createActivityDetailNonSkip(InventQualityOrderTable _inventQualityOrderTable)
    {
        activityTable = PIPInventFlexSamplingActivityTable::findOrCreateActivity(
            _inventQualityOrderTable.PIPFlexibleSamplingPlanId,
            _inventQualityOrderTable.ReferenceType,
            _inventQualityOrderTable.AccountRelation,
            _inventQualityOrderTable.ItemId,
            _inventQualityOrderTable.WrkCtrId);
    
        ttsBegin;
    
        newActivityDetail.Skip          = false;
        newActivityDetail.QualityOrder  = _inventQualityOrderTable.QualityOrderId;
        newActivityDetail.insert();
    
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createActivityDetailSkip</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates a record in the <c>PIPInventFlexSamplingActivityDetails</c> table from a skipped quality order generation.
    /// </summary>
    public void createActivityDetailSkip()
    {
        ttsBegin;
    
        newActivityDetail.Skip                = NoYes::Yes;
        newActivityDetail.TestPerSampleGroup  = currentPlanLine.TestPerSampleGroup;
        newActivityDetail.TestSampleGroupSize = currentPlanLine.TestSampleGroupSize;
    
        newActivityDetail.insert();
    
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initActivityDetail</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes values for a <c>PIPInventFLexSamplingActivityDetail</c> record
    ///     based on the current state of the flexible sampling activity.
    /// </summary>
    public void initActivityDetail()
    {
        PIPInventFlexSamplingActivityDetails    lastActivityCreated = state.lastActivityDetailCreated();
    
        if (!lastActivityCreated)
        {
            newActivityDetail.PlanActivityNumber  = 1;
            newActivityDetail.RoundTrackingNumber = 1;
        }
        else if (lastActivityCreated.Level != nextPlanLine.Level
            || lastActivityCreated.RoundTrackingNumber == nextPlanLine.TestSampleGroupSize
            || lastActivityCreated.FailActionLevel)
        {
            newActivityDetail.RoundTrackingNumber = 1;
            newActivityDetail.PlanActivityNumber  = lastActivityCreated.PlanActivityNumber + 1;
        }
        else
        {
            newActivityDetail.RoundTrackingNumber = lastActivityCreated.RoundTrackingNumber + 1;
            newActivityDetail.PlanActivityNumber  = lastActivityCreated.PlanActivityNumber + 1;
        }
    
        if (currentPlanLine.Skip)
        {
            newActivityDetail.TestPerSampleGroup  = currentPlanLine.TestPerSampleGroup;
            newActivityDetail.TestSampleGroupSize = currentPlanLine.TestSampleGroupSize;
        }
    
        newActivityDetail.InventFlexSamplingActivityRecId   = activityTable.RecId;
        newActivityDetail.Level                             = currentPlanLine.Level;
        newActivityDetail.InventItemSamplingId              = currentPlanLine.ItemSamplingId;
        newActivityDetail.InventTestGroupId                 = currentPlanLine.TestGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmActivityTable</Name>
				<Source><![CDATA[
    public PIPInventFlexSamplingActivityTable parmActivityTable(PIPInventFlexSamplingActivityTable _activityTable = activityTable)
    {
        activityTable = _activityTable;
    
        return activityTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNonInvent</Name>
				<Source><![CDATA[
    public boolean parmNonInvent(boolean _nonInvent = nonInvent)
    {
        nonInvent = _nonInvent;
    
        return nonInvent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRegistrationCount</Name>
				<Source><![CDATA[
    public int parmRegistrationCount(int _registrationCount = registrationCount)
    {
        registrationCount = _registrationCount;
    
        return registrationCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>roundsToTestForMultipleGroups</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns a set containing the sequential order according to which quality orders need to be generated.
    /// </summary>
    /// <returns>
    ///     A set containing integer values.
    /// </returns>
    public Set roundsToTestForMultipleGroups()
    {
        return roundsToTestForMultipleGroups;
    }

]]></Source>
			</Method>
			<Method>
				<Name>state</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the current state of a flexible sampling activity.
    /// </summary>
    /// <returns>
    ///     An instance of the class <c>PIPInventFlexSamplingCurrentState</c>.
    /// </returns>
    public PIPInventFlexSamplingCurrentState state()
    {
        if (!state)
        {
            state = PIPInventFlexSamplingCurrentState::newFromTable(activityTable);
        }
        return state;
    }

]]></Source>
			</Method>
			<Method>
				<Name>testCountForMultipleOrders</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the total number of quality orders that need to be generated from the skipping logic.
    /// </summary>
    /// <returns>
    ///     An integer representing the number of quality orders.
    /// </returns>
    public int testCountForMultipleOrders()
    {
        return testCountForMultipleOrders;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateActivitiesForMultipleOrders</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Updates activity details created previously with quality orders
    ///     for only those records that were marked as non-skipped.
    /// </summary>
    /// <param name="_qualityOrderId">
    ///     The quality order id of the quality order being referenced.
    /// </param>
    public void updateActivitiesForMultipleOrders(InventQualityOrderId _qualityOrderId)
    {
        PIPInventFlexSamplingActivityDetails activityDetails;
    
        PIPInventFlexSamplingActivityDetails firstActivity = this.state().firstActivityDetail();
    
        ttsBegin;
    
        select forUpdate firstOnly activityDetails
            order by PlanActivityNumber asc
            where activityDetails.InventFlexSamplingActivityRecId == activityTable.RecId
                && activityDetails.createdDateTime                >= firstActivity.createdDateTime
                && activityDetails.Skip                           == NoYes::No
                && activityDetails.QualityOrder                   == "";
    
        if (activityDetails)
        {
            activityDetails.QualityOrder = _qualityOrderId;
            activityDetails.update();
        }        
    
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static PIPInventFlexSamplingActivityCreate construct()
    {
        return new PIPInventFlexSamplingActivityCreate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromActivityTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>PIPInventFlexSamplingActivityCreate</c> class.
    /// </summary>
    /// <param name="_inventFlexSamplingActivityTable">
    ///    The record of the <c>PIPInventFlexSamplingActivityTable</c> table for the flexible sampling activity.
    /// </param>
    /// <returns>
    ///    A new instance of the <c>PIPInventFlexSamplingActivityCreate</c> class.
    /// </returns>
    public static PIPInventFlexSamplingActivityCreate newFromActivityTable(PIPInventFlexSamplingActivityTable _inventFlexSamplingActivityTable)
    {
        PIPInventFlexSamplingActivityCreate    inventFlexSamplingActivityCreate = PIPInventFlexSamplingActivityCreate::construct();
    
        inventFlexSamplingActivityCreate.parmActivityTable(_inventFlexSamplingActivityTable);
    
        return inventFlexSamplingActivityCreate;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>