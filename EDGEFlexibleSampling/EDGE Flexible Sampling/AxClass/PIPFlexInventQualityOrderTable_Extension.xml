<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PIPFlexInventQualityOrderTable_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(tableStr(InventQualityOrderTable))]
public final class PIPFlexInventQualityOrderTable_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findInventItemSampleByAssociation</Name>
				<Source><![CDATA[
    protected InventItemSampling findInventItemSampleByAssociation(InventTestAssociationTable  _inventTestAssociationTable)
    {
        InventItemSampling inventItemSampling = next findInventItemSampleByAssociation(_inventTestAssociationTable);

        if (_inventTestAssociationTable.PIPFlexibleSamplingPlanId)
        {
            inventItemSampling = InventItemSampling::find(this.ItemSamplingId);
        }

        return inventItemSampling;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pipExistByPlanId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the specified record in the <c>InventQualityOrderTable</c> table exists.
    /// </summary>
    /// <param name="_flexibleSamplingPlanId">
    ///    The flexible sampling plan ID of the record to check.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean pipExistByPlanId(PIPFlexibleSamplingPlanId  _flexibleSamplingPlanId)
    {
        return _flexibleSamplingPlanId &&
            (select firstonly  inventQualityOrderTable
                where inventQualityOrderTable.PIPFlexibleSamplingPlanId == _flexibleSamplingPlanId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pipExistForItemSampling</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if a record in the <c>InventQualityOrderTable</c> table exists for a given
    ///    item sampling.
    /// </summary>
    /// <param name="_inventItemSamplingId">
    ///    The item sampling id to search for.
    /// </param>
    /// <returns>
    ///    true if the record exists; otherwise, false.
    /// </returns>
    public static boolean pipExistForItemSampling(InventItemSamplingId _inventItemSamplingId)
    {
        return _inventItemSamplingId &&
            (select InventQualityOrderTable
                where InventQualityOrderTable.ItemSamplingId == _inventItemSamplingId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQueryOpenQualityOrderForAssociation</Name>
				<Source><![CDATA[
    protected static Query buildQueryOpenQualityOrderForAssociation(
        InventTestAssociationTable  _associationTable,
        InventRefId                 _inventRefId,
        InventTransId               _inventTransId,
        ItemId                      _itemId,
        InventTestReferenceType     _referenceType,
        RouteOprId                  _routeOprId,
        OprNum                      _oprNum,
        boolean                     _forUpdate)
    {
        Query query = next buildQueryOpenQualityOrderForAssociation(_associationTable, _inventRefId, _inventTransId, _itemId, _referenceType, _routeOprId, _oprNum, _forUpdate);

        if (_associationTable.PIPFlexibleSamplingPlanId)
        {
            QueryBuildDataSource qbdsOrderTable = query.dataSourceTable(tableNum(InventQualityOrderTable));
            
            QueryBuildRange testGroupIdRange = SysQuery::findOrCreateRange(qbdsOrderTable, fieldNum(InventQualityOrderTable, TestGroupId));
            testGroupIdRange.value(queryValue(_associationTable.PIPFlexibleSamplingPlanId));
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQueryLastClosedQualityOrderForAssociation</Name>
				<Source><![CDATA[
    protected static Query buildQueryLastClosedQualityOrderForAssociation(
        InventTestAssociationTable  _associationTable,
        InventRefId                 _inventRefId,
        InventTransId               _inventTransId,
        ItemId                      _itemId,
        InventTestReferenceType     _referenceType,
        RouteOprId                  _routeOprId,
        OprNum                      _oprNum)
    {
        Query query = next buildQueryLastClosedQualityOrderForAssociation(_associationTable, _inventRefId, _inventTransId, _itemId, _referenceType, _routeOprId, _oprNum);

        if (_associationTable.PIPFlexibleSamplingPlanId)
        {
            QueryBuildDataSource qbdsOrderTable = query.dataSourceTable(tableNum(InventQualityOrderTable));
            
            QueryBuildRange testGroupIdRange = SysQuery::findOrCreateRange(qbdsOrderTable, fieldNum(InventQualityOrderTable, TestGroupId));
            testGroupIdRange.value(queryValue(_associationTable.PIPFlexibleSamplingPlanId));
        }

        return query;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>