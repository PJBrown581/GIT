<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PIPInventFlexSamplingQualityReopen</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>PIPInventFlexSamplingQualityReopen</c> class updates the relevant flexible sampling activity
///     and its activity details from the reopening of a quality order.
/// </summary>
class PIPInventFlexSamplingQualityReopen
{
    PIPInventFlexSamplingCurrentState       currentState;

    PIPInventFlexSamplingActivityTable      activityTable;
    InventQualityOrderTable                 inventQualityOrderTable;
    PIPInventFlexSamplingPlanLines          currentPlanLine;
    PIPInventFlexSamplingActivityDetails    activityDetailFromQualityOrder;
    PIPInventFlexSamplingActivityDetails    firstActivityInSampleGroup;

    InventQualityOrderId                    qualityOrderId;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>clearFieldValues</Name>
				<Source><![CDATA[
    private void clearFieldValues()
    {
        activityDetailFromQualityOrder.OrderStatus          = InventTestOrderStatus::Open;
        activityDetailFromQualityOrder.ValidatedByWorker    = 0;
        activityDetailFromQualityOrder.ValidatedDateTime    = utcDateTimeNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQualityOrderId</Name>
				<Source><![CDATA[
    public InventQualityOrderId parmQualityOrderId(InventQualityOrderId _qualityOrderId = qualityOrderId)
    {
        qualityOrderId = _qualityOrderId;
    
        return qualityOrderId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateActivities</Name>
				<Source><![CDATA[
    public void updateActivities()
    {
        #PIPFlexibleSampling
    
        inventQualityOrderTable = InventQualityOrderTable::find(qualityOrderId);
    
        select forUpdate firstOnly activityDetailFromQualityOrder
            where activityDetailFromQualityOrder.QualityOrder == qualityOrderId;
    
        if (!activityDetailFromQualityOrder)
        {
            return;
        }
    
        activityTable   = activityDetailFromQualityOrder.inventFlexSamplingActivityTable();
    
        currentState    = PIPInventFlexSamplingCurrentState::newFromTable(activityTable);
    
        currentPlanLine = currentState.currentPlanLine();
    
        ttsBegin;
    
        this.clearFieldValues();
    
        if (currentState.firstActivityDetail() && activityDetailFromQualityOrder.createdDateTime >= currentState.firstActivityDetail().createdDateTime)
        {
            this.updateFromPlanLine();
        }
        else
        {
            activityDetailFromQualityOrder.Reference = "@PIP393";
            activityDetailFromQualityOrder.update();
        }
    
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFromPlanLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Updates activity details based on the flexible sampling plan line
    ///     being used in the current level.
    /// </summary>
    private void updateFromPlanLine()
    {
        PIPRound clearedRoundNumber;
    
        if (currentPlanLine.Skip)
        {
            firstActivityInSampleGroup = PIPInventFlexSamplingActivityDetails::firstActivityInSampleGroup(activityDetailFromQualityOrder, true);
    
            clearedRoundNumber = firstActivityInSampleGroup.RoundNumber;
    
            firstActivityInSampleGroup.RoundNumber = 0;
            firstActivityInSampleGroup.update();
        }
        else
        {
            clearedRoundNumber = activityDetailFromQualityOrder.RoundNumber;
            activityDetailFromQualityOrder.RoundNumber = 0;
        }
    
        activityDetailFromQualityOrder.update();
    
        if (clearedRoundNumber)
        {
            this.updateRoundNumbers(clearedRoundNumber);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRoundNumbers</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Updates round number values on all activity details that have a round number
    ///     greater than the given round number.
    /// </summary>
    /// <param name="_clearedRoundNumber">
    ///     The round number to be used as reference.
    /// </param>
    private void updateRoundNumbers(PIPRound _clearedRoundNumber)
    {
        PIPInventFlexSamplingActivityDetails    activityDetails;
        int                                     timeDiff;
    
        update_recordset activityDetails
            setting
                RoundNumber = activityDetails.RoundNumber - 1
            where activityDetails.RoundNumber
                && activityDetails.PlanActivityNumber               >= currentState.firstActivityDetail().PlanActivityNumber
                && activityDetails.RoundNumber                      >= _clearedRoundNumber
                && activityDetails.InventFlexSamplingActivityRecId  == activityTable.RecId;
    
        if (currentPlanLine.TimeSpanDays)
        {
            timeDiff = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()) - DateTimeUtil::date(currentState.firstActivityValidationDateTime());
    
            if (timeDiff >= currentPlanLine.TimeSpanDays)
            {
                activityTable.updateRoundsTimeExpired(currentPlanLine.TimeSpanDays);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static PIPInventFlexSamplingQualityReopen construct()
    {
        return new PIPInventFlexSamplingQualityReopen();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromQualityOrder</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes a new instance of the <c>PIPInventFlexSamplingActivityCreate</c> class.
    /// </summary>
    /// <param name="_inventQualityOrderId">
    ///     The quality order id of the quality order being reopened.
    /// </param>
    /// <returns>
    ///     A new instance of the <c>PIPInventFlexSamplingActivityCreate</c> class.
    /// </returns>
    public static PIPInventFlexSamplingQualityReopen newFromQualityOrder(InventQualityOrderId _inventQualityOrderId)
    {
        PIPInventFlexSamplingQualityReopen inventFlexSamplingQualityReopen = PIPInventFlexSamplingQualityReopen::construct();
    
        inventFlexSamplingQualityReopen.parmQualityOrderId(_inventQualityOrderId);
    
        return inventFlexSamplingQualityReopen;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>