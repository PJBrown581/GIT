<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PIPInventFlexSamplingPlanCopier</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>PIPInventFlexSamplingPlanCopier</c> class provides the logic to copy one
///    inventory flexible sampling plan into another flexible sampling plan.
/// </summary>
class PIPInventFlexSamplingPlanCopier extends RunBase
{
    PIPInventFlexSamplingPlanTable  destinationPlan;
    PIPFlexibleSamplingPlanId       sourcePlanId;
    boolean                         overwrite;

    DialogField                     planIdField;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        Dialog  dialog = super();
    
        dialog.caption("@PIP380");
    
        dialog.addText("@PIP381");
    
        planIdField = dialog.addField(extendedTypeStr(PIPFlexibleSamplingPlanId));
    
        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;
    
        ret = super();
    
        if (ret)
        {
            sourcePlanId = planIdField.value();
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDestinationPlan</Name>
				<Source><![CDATA[
    public PIPInventFlexSamplingPlanTable parmDestinationPlan(PIPInventFlexSamplingPlanTable _destinationPlan = destinationPlan)
    {
        destinationPlan = _destinationPlan;
    
        return destinationPlan;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOverwrite</Name>
				<Source><![CDATA[
    public boolean parmOverwrite(boolean _overwrite = overwrite)
    {
        overwrite = _overwrite;
    
        return overwrite;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourcePlanId</Name>
				<Source><![CDATA[
    public PIPFlexibleSamplingPlanId parmSourcePlanId(PIPFlexibleSamplingPlanId _sourcePlanId = sourcePlanId)
    {
        sourcePlanId = _sourcePlanId;
    
        return sourcePlanId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        PIPInventFlexSamplingPlanTable  sourcePlanTable;
        PIPInventFlexSamplingPlanLines  sourcePlanLine;
        PIPInventFlexSamplingPlanLines  destPlanLines;

        #PIPFlexibleSampling
    
        if (!this.validate())
        {
            return;
        }
    
        ttsBegin;
    
        sourcePlanTable = PIPInventFlexSamplingPlanTable::findByPlanId(sourcePlanId);
    
        if (overwrite)
        {
            destPlanLines.skipDataMethods(true);

            delete_from destPlanLines
                where destPlanLines.FlexibleSamplingPlanId == destinationPlan.FlexibleSamplingPlanId;

            destPlanLines.skipDataMethods(false);
        }
    
        RecordInsertList lineInserter = new RecordInsertList(tableNum(PIPInventFlexSamplingPlanLines));
        while select sourcePlanLine
            where sourcePlanLine.FlexibleSamplingPlanId == sourcePlanId
        {
            destPlanLines.clear();
            destPlanLines.data(sourcePlanLine);
    
            destPlanLines.FlexibleSamplingPlanId = destinationPlan.FlexibleSamplingPlanId;
            if (destPlanLines.Rounds == #UnlimitedRounds)
            {
                destPlanLines.Rounds = 0;
            }
            lineInserter.add(destPlanLines);
        }
        lineInserter.insertDatabase();
    
        if (sourcePlanTable.SecurityRole)
        {
            destinationPlan.selectForUpdate(true);
            destinationPlan.SecurityRole = sourcePlanTable.SecurityRole;
            destinationPlan.LastLevel = sourcePlanTable.LastLevel;
            destinationPlan.update();
        }
    
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that the required parameters have been set.
    /// </summary>
    /// <param name="calledFrom">
    ///    The object that called this class; optional.
    /// </param>
    /// <returns>
    ///    true if the requires parameters have been set; otherwise, false.
    /// </returns>
    public boolean validate(Object calledFrom = null)
    {
        boolean ret = true;
    
        if (!PIPInventFlexSamplingPlanTable::existPlan(sourcePlanId))
        {
            ret = checkFailed(strFmt("@PIP399", sourcePlanId));
        }
    
        if (ret && !destinationPlan.FlexibleSamplingPlanId && !destinationPlan.Description)
        {
            ret = checkFailed("@PIP138");
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PIPInventFlexSamplingPlanCopier construct()
    {
        return new PIPInventFlexSamplingPlanCopier();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        PIPInventFlexSamplingPlanCopier copier = PIPInventFlexSamplingPlanCopier::construct();
    
        if (_args.dataset() != tableNum(PIPInventFlexSamplingPlanTable))
        {
            throw error(error::missingRecord(tableStr(PIPInventFlexSamplingPlanTable)));
        }
    
        copier.parmDestinationPlan(_args.record());
    
        if (PIPInventFlexSamplingPlanTable::existPlan(copier.parmDestinationPlan().FlexibleSamplingPlanId)
            && PIPInventFlexSamplingPlanLines::getFirstPlanLine(copier.parmDestinationPlan().FlexibleSamplingPlanId))
        {
            if (Box::yesNo("@PIP382", DialogButton::Yes) != DialogButton::Yes)
            {
                return;
            }
    
            copier.parmOverwrite(true);
        }
    
        if (copier.prompt())
        {
            copier.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>