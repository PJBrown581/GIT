<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PIPInventFlexSamplingCurrentState</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///   The <c>PIPInventFlexSamplingCurrentState</c> class represents the current state for the
///   activity on inventory flexible sample.
/// </summary>
public class PIPInventFlexSamplingCurrentState
{
    PIPInventFlexSamplingActivityTable      inventFlexSamplingActivityTable;
    PIPInventFlexSamplingActivityDetails    firstActivityDetail;
    PIPInventFlexSamplingActivityDetails    lastActivityDetailCreated;
    PIPInventFlexSamplingPlanLines          currentPlanLine;
    PIPInventFlexSamplingPlanLines          nextPlanLine;

    int                                     testsPassed;
    int                                     testsFailed;
    int                                     qualityOrdersCreated;
    int                                     qualityOrdersSkipped;
    PIPRound                                largestRoundNumber;

    PIPValidatedDateTime                    firstActivityValidationDateTime;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>currentPlanLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a record from the <c>PIPInventFlexSamplingPlanLine</c> table that is being used by the current level on the activity.
    /// </summary>
    /// <returns>
    ///    A record of the <c>PIPInventFlexSamplingPlanLine</c> table.
    /// </returns>
    public PIPInventFlexSamplingPlanLines currentPlanLine()
    {
        return currentPlanLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>firstActivityDetail</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the first record of the <c>PIPInventFlexSamplingActivityDetails</c> table for the activity.
    /// </summary>
    /// <returns>
    ///    The first record of the <c>PIPInventFlexSamplingActivityDetails</c> table for the activity.
    /// </returns>
    public PIPInventFlexSamplingActivityDetails firstActivityDetail()
    {
        return firstActivityDetail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>firstActivityValidationDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the first found activity validation date and time for the activity.
    /// </summary>
    /// <returns>
    ///    The first activity validateion date and time for the activity.
    /// </returns>
    public PIPValidatedDateTime firstActivityValidationDateTime()
    {
        return firstActivityValidationDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    private void init()
    {
        qualityOrdersCreated = 0;
        testsPassed          = 0;
        testsFailed          = 0;
        testsPassed          = 0;
        largestRoundNumber   = 0;
    
        firstActivityValidationDateTime = DateTimeUtil::utcNow();
    }

]]></Source>
			</Method>
			<Method>
				<Name>largestRoundNumber</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the largest round number used on the activity.
    /// </summary>
    /// <returns>
    ///    The largest round number used on the activity.
    /// </returns>
    public PIPRound largestRoundNumber()
    {
        return largestRoundNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastActivityDetail</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the last detail activity for the sampling activity.
    /// </summary>
    /// <returns>
    ///    The last validated detail activity for the sampling activity or, if none have been validated yet, then the
    ///    last detail activity that was created.
    /// </returns>
    public PIPInventFlexSamplingActivityDetails lastActivityDetail()
    {
        PIPInventFlexSamplingActivityDetails    activityDetails;
    
        select firstOnly activityDetails
            order by ValidatedDateTime desc
            where activityDetails.InventFlexSamplingActivityRecId == inventFlexSamplingActivityTable.RecId
                && activityDetails.CreatedDateTime                >= firstActivityDetail.CreatedDateTime;
    
        if (activityDetails.ValidatedDateTime)
        {
            return activityDetails;
        }
        else
        {
            return lastActivityDetailCreated;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastActivityDetailCreated</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the last record of the <c>PIPInventFlexSamplingActivityDetails</c> table that was created for the activity.
    /// </summary>
    /// <returns>
    ///    The last record of the <c>PIPInventFlexSamplingActivityDetails</c> table created for the activity.
    /// </returns>
    public PIPInventFlexSamplingActivityDetails lastActivityDetailCreated()
    {
        return lastActivityDetailCreated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshLastActivityDetailCreated</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Refreshes the last activity detail record created from the database.
    /// </summary>
    public void refreshLastActivityDetailCreated()
    {
        lastActivityDetailCreated = inventFlexSamplingActivityTable.lastDetailCreated();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextPlanLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a record from the <c>PIPInventFlexSamplingPlanLine</c> table which will be used for subsequent activity details.
    /// </summary>
    /// <returns>
    ///    A record of the <c>PIPInventFlexSamplingPlanLine</c> table.
    /// </returns>
    public PIPInventFlexSamplingPlanLines nextPlanLine()
    {
        if (lastActivityDetailCreated.FailActionLevel)
        {
            nextPlanLine = currentPlanLine.nextLineForFailAction();
        }
        else if (lastActivityDetailCreated.PassActionLevel)
        {
            nextPlanLine = currentPlanLine.nextLineForPassAction();
        }
        else if (!lastActivityDetailCreated)
        {
            nextPlanLine = PIPInventFlexSamplingPlanLines::getFirstPlanLine(inventFlexSamplingActivityTable.FlexibleSamplingPlanId);
        }
        else
        {
            nextPlanLine = currentPlanLine;
        }
    
        return nextPlanLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFlexSamplingActivityTable</Name>
				<Source><![CDATA[
    public PIPInventFlexSamplingActivityTable parmFlexSamplingActivityTable(PIPInventFlexSamplingActivityTable _inventFlexSamplingActivityTable = inventFlexSamplingActivityTable)
    {
        inventFlexSamplingActivityTable = _inventFlexSamplingActivityTable;
    
        return inventFlexSamplingActivityTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qualityOrdersCreated</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the number of quality orders that have been created and assigned to detail entries for this activity.
    /// </summary>
    /// <returns>
    ///    The number of quality orders that were created and assigned to this sampling activity.
    /// </returns>
    public int qualityOrdersCreated()
    {
        return qualityOrdersCreated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qualityOrdersSkipped</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the number of quality orders that were assigned to the sampling activity but didn't need testing.
    /// </summary>
    /// <returns>
    ///    The number of quality orders skipped.
    /// </returns>
    public int qualityOrdersSkipped()
    {
        return qualityOrdersSkipped;
    }

]]></Source>
			</Method>
			<Method>
				<Name>testsFailed</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the number of tests that have failed in this activity.
    /// </summary>
    /// <returns>
    ///    The number of tests that have failed.
    /// </returns>
    public int testsFailed()
    {
        return testsFailed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>testsPassed</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the number of tests that have passed in this activity.
    /// </summary>
    /// <returns>
    ///    The number of tests that have passed.
    /// </returns>
    public int testsPassed()
    {
        return testsPassed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the activity state to match the current state in the database.
    /// </summary>
    public void update()
    {
        PIPInventFlexSamplingActivityDetails    activityDetails;
        date                                    newFirstDate;
        date                                    validatedDay;
    
        this.init();
    
        lastActivityDetailCreated = inventFlexSamplingActivityTable.lastDetailCreated();
    
        if (lastActivityDetailCreated.FailActionLevel)
        {
            currentPlanLine = PIPInventFlexSamplingPlanLines::findByPlanLevel(inventFlexSamplingActivityTable.FlexibleSamplingPlanId, lastActivityDetailCreated.FailActionLevel);
        }
        else if (lastActivityDetailCreated.PassActionLevel)
        {
            currentPlanLine = PIPInventFlexSamplingPlanLines::findByPlanLevel(inventFlexSamplingActivityTable.FlexibleSamplingPlanId, lastActivityDetailCreated.PassActionLevel);
        }
        else
        {
            currentPlanLine = PIPInventFlexSamplingPlanLines::findByPlanLevel(inventFlexSamplingActivityTable.FlexibleSamplingPlanId, lastActivityDetailCreated.Level);

            if (!currentPlanLine)
            {
                currentPlanLine = PIPInventFlexSamplingPlanLines::getFirstPlanLine(inventFlexSamplingActivityTable.FlexibleSamplingPlanId);
            }
        }
    
        while select activityDetails
            order by PlanActivityNumber desc
            where activityDetails.InventFlexSamplingActivityRecId == inventFlexSamplingActivityTable.RecId
        {
            // exclude from calculations if level changes or if activity failed back to same level
            if (activityDetails.Level != currentPlanLine.Level || activityDetails.FailActionLevel)
            {
                break;
            }
            // exclude from calculation if earlier than current time span
            if (currentPlanLine.TimeSpanDays)
            {
                newFirstDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()) - currentPlanLine.TimeSpanDays;
                validatedDay = DateTimeUtil::date(activityDetails.ValidatedDateTime);
    
                if (validatedDay <= newFirstDate && activityDetails.OrderStatus == InventTestOrderStatus::Pass)
                {
                    testsPassed--;
                }
            }
    
            if (activityDetails.QualityOrder)
            {
                qualityOrdersCreated++;
    
                if (activityDetails.OrderStatus == InventTestOrderStatus::Pass)
                {
                    testsPassed++;
                }
                else if (activityDetails.OrderStatus == InventTestOrderStatus::Fail)
                {
                    testsFailed++;
                }
            }
            else
            {
                qualityOrdersSkipped++;
            }
    
            largestRoundNumber = max(largestRoundNumber, activityDetails.RoundNumber);
    
            if (activityDetails.ValidatedDateTime)
            {
                firstActivityValidationDateTime = min(firstActivityValidationDateTime, activityDetails.ValidatedDateTime);
            }
    
            firstActivityDetail.data(activityDetails);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static PIPInventFlexSamplingCurrentState construct()
    {
        return new PIPInventFlexSamplingCurrentState();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new <c>PIPInventFlexSamplingCurrentState</c> representing the current state of a given
    ///    flexible sampling activity.
    /// </summary>
    /// <param name="_flexSamplingActivityTable">
    ///    The record of the <c>PIPInventFlexSamplingActivityTable</c> table for the flexible sampling activity.
    /// </param>
    /// <returns>
    ///    A new <c>PIPInventFlexSamplingCurrentState</c> representing the current state of <paramref name="_flexSamplingActivityTable"/>.
    /// </returns>
    public static PIPInventFlexSamplingCurrentState newFromTable(PIPInventFlexSamplingActivityTable _flexSamplingActivityTable)
    {
        PIPInventFlexSamplingCurrentState state = PIPInventFlexSamplingCurrentState::construct();
    
        state.parmFlexSamplingActivityTable(_flexSamplingActivityTable);
        state.update();
    
        return state;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>