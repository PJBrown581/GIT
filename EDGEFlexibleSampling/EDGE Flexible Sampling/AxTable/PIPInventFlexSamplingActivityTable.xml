<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PIPInventFlexSamplingActivityTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PIPInventFlexSamplingActivityTable extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkExpireAVL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks for and updates approved vendor list expiration to the system date if the sample activity is
    /// related to a purchase order and item where there is an approved vendor list.
    /// </summary>
    /// <returns>
    /// The vendor account if approved vendor list was expired.
    /// </returns>
    public PdsApprovedVendor checkExpireAVL()
    {
        InventTable             inventTable;
        PdsApprovedVendorList   pdsApprovedVendorList;
        boolean                 isExpireAVL = false;
    
        if (isConfigurationKeyEnabled(configurationkeynum(PdsAVL))
            && this.ReferenceType == InventTestReferenceType::Purch)
        {
            select forUpdate pdsApprovedVendorList
                where pdsApprovedVendorList.ItemId             == this.ItemId
                    && pdsApprovedVendorList.PdsApprovedVendor == this.AccountRelation
                exists join inventTable
                    where inventTable.ItemId                   == this.ItemId
                        && inventTable.PdsVendorCheckItem      != PdsVendorCheckItem::NoCheck;
    
            if (pdsApprovedVendorList.RecId)
            {
                ttsBegin;
                pdsApprovedVendorList.validTimeStateUpdateMode(ValidTimeStateUpdate::Correction);
                pdsApprovedVendorList.ValidTo = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
                pdsApprovedVendorList.update();
    
                isExpireAVL = true;
                ttsCommit;
            }
        }
    
        if (isExpireAVL)
        {
            return pdsApprovedVendorList.PdsApprovedVendor;
        }
        else
        {
            return "";
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentLevel</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the current level for this flexible sampling activity header.
    /// </summary>
    /// <returns>
    ///    The current level for this flexible sampling activity header.
    /// </returns>
    [SysClientCacheDataMethodAttribute]
    public display Level currentLevel()
    {
        PIPInventFlexSamplingActivityDetails inventFlexSamplingActivityDetails = this.getCurrentActivity();
    
        if (inventFlexSamplingActivityDetails.FailActionLevel)
        {
            return inventFlexSamplingActivityDetails.FailActionLevel;
        }
        else if (inventFlexSamplingActivityDetails.PassActionLevel)
        {
            return inventFlexSamplingActivityDetails.PassActionLevel;
        }
        else
        {
            return inventFlexSamplingActivityDetails.Level;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentState</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the current state for this sampling activity.
    /// </summary>
    /// <returns>
    ///   A instance of the <c>PIPInventFlexSamplingCurrentState</c> class containing the current state for this sampling acitivity.
    /// </returns>
    public PIPInventFlexSamplingCurrentState currentState()
    {
        return PIPInventFlexSamplingCurrentState::newFromTable(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteActivties</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deletes the actvity details for this activity.
    /// </summary>
    /// <param name="_deleteAll">
    ///    Determines if all activity details should be deleted; if not, just deletes details through the current level.
    /// </param>
    public void deleteActivties(boolean _deleteAll = true)
    {
        PIPInventFlexSamplingActivityDetails    activityDetails;
        PIPLevel                                currentLevel;
    
        ttsBegin;
    
        if (_deleteAll)
        {
            delete_from activityDetails
                where activityDetails.InventFlexSamplingActivityRecId == this.RecId;
        }
        else
        {
            currentLevel = this.getCurrentActivity().Level;
    
            // Only delete activities in the current level which are for the latest plan activity number. Do not delete earlier activities for the same level if we have returned to that level for some reason.
            while select forUpdate activityDetails
                order by PlanActivityNumber desc
                where activityDetails.InventFlexSamplingActivityRecId == this.RecId
            {
                if (activityDetails.Level != currentLevel)
                {
                    break;
                }

                activityDetails.delete();
            }
        }
    
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>firstActivityOnCurrentSkipRound</Name>
				<Source><![CDATA[
    public PIPInventFlexSamplingActivityDetails firstActivityOnCurrentSkipRound()
    {
        PIPInventFlexSamplingActivityDetails   inventFlexSamplingActivityDetails;
    
        select firstOnly inventFlexSamplingActivityDetails
            order by PlanActivityNumber desc
            where inventFlexSamplingActivityDetails.InventFlexSamplingActivityRecId == this.RecId
                && inventFlexSamplingActivityDetails.RoundTrackingNumber            == 1;
    
        return inventFlexSamplingActivityDetails;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrentActivity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the current activity details for the sampling activity.
    /// </summary>
    /// <returns>
    ///    The record of the <c>PIPInventFlexSamplingActivityDetails</c> table that is current for this sampling activity.
    /// </returns>
    public PIPInventFlexSamplingActivityDetails getCurrentActivity()
    {
        PIPInventFlexSamplingActivityDetails inventFlexSamplingActivityDetails;
    
        select firstOnly inventFlexSamplingActivityDetails
            order by PlanActivityNumber desc
            where inventFlexSamplingActivityDetails.InventFlexSamplingActivityRecId == this.RecId;
    
        return inventFlexSamplingActivityDetails;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOverallStatistics</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Computes the statistics from all related <c>PIPInventFlexSamplingActivityDetails</c> records.
    /// </summary>
    /// <returns>
    ///    A container with the total rounds passed, rounds failed, quality orders created and
    ///    quality orders skipped, each of which are integer values.
    /// </returns>
    public container getOverallStatistics()
    {
        PIPInventFlexSamplingActivityDetails  inventFlexActivityDetails;
    
        int totalRoundsPassed, totalRoundsFailed, totalQualityOrderCreated, totalQualityOrderSkipped;
    
        while select QualityOrder, OrderStatus, Skip from inventFlexActivityDetails
            where inventFlexActivityDetails.InventFlexSamplingActivityRecId == this.RecId
        {
            if (inventFlexActivityDetails.QualityOrder)
            {
                totalQualityOrderCreated++;
    
                if (inventFlexActivityDetails.OrderStatus == InventTestOrderStatus::Pass)
                {
                    totalRoundsPassed++;
                }
                else if(inventFlexActivityDetails.OrderStatus == InventTestOrderStatus::Fail)
                {
                    totalRoundsFailed++;
                }
            }
            else if (inventFlexActivityDetails.Skip)
            {
                totalQualityOrderSkipped++;
            }
        }
    
        return [totalRoundsPassed, totalRoundsFailed, totalQualityOrderCreated, totalQualityOrderSkipped];
    }

]]></Source>
			</Method>
			<Method>
				<Name>isConsecutiveFailure</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a value indicating if there is a consectivity failure in this activity for a given planning line.
    /// </summary>
    /// <param name="_planLine">
    ///    The planning that is current for the sampling plan.
    /// </param>
    /// <returns>
    ///    true if there is a current consective failure for the given planning line; otherwise, false.
    /// </returns>
    public boolean isConsecutiveFailure(PIPInventFlexSamplingPlanLines _planLine)
    {
        PIPInventFlexSamplingActivityDetails    activityDetails;
        PIPInventFlexSamplingActivityDetails    activityDetailsTmp;
    
        int                                     counter;
        PIPValidatedDateTime                    lastValidatedDateTimeWithFail;
    
        if (!_planLine.Fails)
        {
            return false;
        }
    
        // BP Deviation Documented
        activityDetailsTmp.setTmp();
        activityDetailsTmp.recordLevelSecurity(true);
    
        while select activityDetails
            order by PlanActivityNumber desc
            where activityDetails.InventFlexSamplingActivityRecId == this.RecId
                && activityDetails.QualityOrder                   != ""
        {
            if (activityDetails.Level != _planLine.Level || activityDetails.FailActionLevel)
            {
                break;
            }
    
            activityDetailsTmp.data(activityDetails);
            activityDetailsTmp.doInsert();
    
            if (activityDetails.OrderStatus == InventTestOrderStatus::Fail)
            {
                lastValidatedDateTimeWithFail = max(lastValidatedDateTimeWithFail, activityDetails.ValidatedDateTime);
            }
        }
    
        while select OrderStatus from activityDetailsTmp
            order by ValidatedDateTime desc
            where activityDetailsTmp.ValidatedDateTime <= lastValidatedDateTimeWithFail
        {
            if (activityDetailsTmp.OrderStatus == InventTestOrderStatus::Pass)
            {
                break;
            }
    
            counter++;
    
            if (counter == _planLine.Fails)
            {
                return true;
            }
        }
    
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastDetailCreated</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the last activity detail created.
    /// </summary>
    /// <returns>
    ///    The record in the <c>PIPInventFlexSamplingActivityDetails</c> that was last created for this activity.
    /// </returns>
    public PIPInventFlexSamplingActivityDetails lastDetailCreated()
    {
        PIPInventFlexSamplingActivityDetails    activityDetails;
        PIPPlanActivityNumber                   lastActivityNumber;
    
        select maxOf(PlanActivityNumber) from activityDetails
            where activityDetails.InventFlexSamplingActivityRecId == this.RecId;
    
        lastActivityNumber = activityDetails.PlanActivityNumber;
    
        select firstOnly activityDetails
            where activityDetails.InventFlexSamplingActivityRecId == this.RecId
                && activityDetails.PlanActivityNumber             == lastActivityNumber;
    
        return activityDetails;
    }

]]></Source>
			</Method>
			<Method>
				<Name>planLineForCurrentLevel</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the sampling plan line for the current level.
    /// </summary>
    /// <returns>
    ///    The record of the <c>PIPInventFlexSamplingPlanLines</c> for the current level.
    /// </returns>
    public PIPInventFlexSamplingPlanLines planLineForCurrentLevel()
    {
        PIPInventFlexSamplingPlanLines inventFlexSamplingPlanLines;
    
        select firstOnly inventFlexSamplingPlanLines
            where inventFlexSamplingPlanLines.Level                   == this.currentLevel()
                && inventFlexSamplingPlanLines.FlexibleSamplingPlanId == this.FlexibleSamplingPlanId;
    
        return inventFlexSamplingPlanLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRoundsTimeExpired</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the round number for the related records in the <c>PIPInventFlexSamplingActivityDetails</c>
    ///    table based on whether they fall within the time-span our outside of it.
    /// </summary>
    /// <param name="_timeSpanDays">
    ///    The time-span in days associated with the flexible sampling plan level being used.
    /// </param>
    public void updateRoundsTimeExpired(PIPTimeSpanDays _timeSpanDays)
    {
        PIPInventFlexSamplingActivityDetails    inventFlexSamplingActivityDetails;
    
        PIPLevel                                currentLevel;
        int                                     testsOutOfRange;
        date                                    newFirstDate;
        date                                    validatedDay;
    
        newFirstDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()) - _timeSpanDays;
    
        currentLevel = this.currentLevel();
    
        while select inventFlexSamplingActivityDetails
            order by PlanActivityNumber desc
            where inventFlexSamplingActivityDetails.InventFlexSamplingActivityRecId == this.RecId
        {
            if (inventFlexSamplingActivityDetails.Level != currentLevel
                || (inventFlexSamplingActivityDetails.FailActionLevel
                    && inventFlexSamplingActivityDetails.FailActionLevel == inventFlexSamplingActivityDetails.Level))
            {
                break;
            }
    
            validatedDay = DateTimeUtil::date(inventFlexSamplingActivityDetails.ValidatedDateTime);
    
            if (inventFlexSamplingActivityDetails.QualityOrder
                && validatedDay <= newFirstDate
                && inventFlexSamplingActivityDetails.OrderStatus == InventTestOrderStatus::Pass
                && inventFlexSamplingActivityDetails.RoundNumber)
            {
                testsOutOfRange++;
            }
        }
    
        ttsBegin;
    
        while select forUpdate inventFlexSamplingActivityDetails
            order by PlanActivityNumber desc
            where inventFlexSamplingActivityDetails.InventFlexSamplingActivityRecId == this.RecId
        {
            if (inventFlexSamplingActivityDetails.Level != currentLevel
                || (inventFlexSamplingActivityDetails.FailActionLevel
                    && inventFlexSamplingActivityDetails.FailActionLevel == inventFlexSamplingActivityDetails.Level))
            {
                break;
            }
    
            validatedDay = DateTimeUtil::date(inventFlexSamplingActivityDetails.ValidatedDateTime);
    
            // if earlier than new first date, remove round number, else decrease by the number of tests out of range.
            if (inventFlexSamplingActivityDetails.QualityOrder && inventFlexSamplingActivityDetails.RoundNumber && validatedDay <= newFirstDate)
            {
                inventFlexSamplingActivityDetails.RoundNumber = 0;
                inventFlexSamplingActivityDetails.Reference   = "@PIP207";
            }
            else if (validatedDay > newFirstDate && inventFlexSamplingActivityDetails.RoundNumber)
            {
                inventFlexSamplingActivityDetails.RoundNumber = inventFlexSamplingActivityDetails.RoundNumber - testsOutOfRange;
            }
    
            inventFlexSamplingActivityDetails.update();
        }
    
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates a new <c>PIPInventFlexSamplingActivityTable</c> record from parameters.
    /// </summary>
    /// <param name="_flexibleSamplingPlanId">
    ///     An <c>PIPFlexibleSamplingPlanId</c> value.
    /// </param>
    /// <param name="_referenceType">
    ///     An <c>InventTestReferenceType</c> value.
    /// </param>
    /// <param name="_accountRelation">
    ///     An <c>InventTestAccountRelation</c> value.
    /// </param>
    /// <param name="_itemId">
    ///     An <c>ItemId</c> value.
    /// </param>
    /// <param name="_wrkCtrId">
    ///     An <c>WrkCtrIdBase</c> value.
    /// </param>
    /// <returns>
    ///     A <c>PIPInventFlexSamplingActivityTable</c> record.
    /// </returns>
    public static PIPInventFlexSamplingActivityTable create(
        PIPFlexibleSamplingPlanId     _flexibleSamplingPlanId,
        InventTestReferenceType       _referenceType,
        InventTestAccountRelation     _accountRelation,
        ItemIdInventoried             _itemId,
        WrkCtrIdBase                  _wrkCtrId)
    {
        PIPInventFlexSamplingActivityTable  inventFlexSamplingActivityTable;
    
        ttsBegin;
    
        inventFlexSamplingActivityTable.FlexibleSamplingPlanId  = _flexibleSamplingPlanId;
        inventFlexSamplingActivityTable.AccountRelation         = _accountRelation;
        inventFlexSamplingActivityTable.ReferenceType           = _referenceType;
        inventFlexSamplingActivityTable.ItemId                  = _itemId;
        inventFlexSamplingActivityTable.WrkCtrRelation          = _wrkCtrId;
    
        inventFlexSamplingActivityTable.insert();
    
        ttsCommit;
    
        return inventFlexSamplingActivityTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a value indicating if a record in the <c>PIPInventFlexSamplingActivityTable</c> table exists for the given surrogate key value.
    /// </summary>
    /// <param name="_activityRecId">
    /// The surrogate record id for the activity sampling table record.
    /// </param>
    /// <returns>
    /// true if the record exists; otherwise, false.
    /// </returns>
    public static boolean exist(PIPInventFlexSamplingActivityTableRecId _activityRecId)
    {
        return _activityRecId
            && (select PIPInventFlexSamplingActivityTable
                where PIPInventFlexSamplingActivityTable.RecId == _activityRecId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existActivity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a value indicating if a record in the <c>PIPInventFlexSamplingActivityTable</c> exists for
    ///    a given quality order.
    /// </summary>
    /// <param name="_inventQualityOrderTable">
    ///    A record of the <c>InventQualityOrderTable</c> table.
    /// </param>
    /// <returns>
    ///    true if a matching record exists; otherwise, false.
    /// </returns>
    public static boolean existActivity(InventQualityOrderTable _inventQualityOrderTable)
    {
        return (select PIPInventFlexSamplingActivityTable
                    where PIPInventFlexSamplingActivityTable.FlexibleSamplingPlanId == _inventQualityOrderTable.PIPFlexibleSamplingPlanId
                        && PIPInventFlexSamplingActivityTable.ReferenceType         == _inventQualityOrderTable.ReferenceType
                        && PIPInventFlexSamplingActivityTable.AccountRelation       == _inventQualityOrderTable.AccountRelation
                        && PIPInventFlexSamplingActivityTable.ItemId                == _inventQualityOrderTable.ItemId
               ).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existByPlanId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a value indicating if a record in the <c>PIPInventFlexSamplingActivityTableRecId</c> table exists for the given flexible sampling plan Id.
    /// </summary>
    /// <param name="_flexibleSamplingPlanId">
    /// The surrogate record id for the activity sampling table record.
    /// </param>
    /// <returns>
    /// true if the record exists; otherwise, false.
    /// </returns>
    public static boolean existByPlanId(PIPFlexibleSamplingPlanId _flexibleSamplingPlanId)
    {
        return _flexibleSamplingPlanId
            && (select PIPInventFlexSamplingActivityTable
                where PIPInventFlexSamplingActivityTable.FlexibleSamplingPlanId == _flexibleSamplingPlanId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the record in the <c>PIPInventFlexSamplingActivityTableRecId</c> table using the surrogate key.
    /// </summary>
    /// <param name="_activityRecId">
    ///    The surrogate key value to find.
    /// </param>
    /// <param name="_forUpdate">
    ///    Deterimines if the record should be read for update; optional.
    /// </param>
    /// <returns>
    ///    The record found in the <c>PIPInventFlexSamplingActivityTableRecId</c> table or an empty buffer if no such record was found.
    /// </returns>
    public static PIPInventFlexSamplingActivityTable find(PIPInventFlexSamplingActivityTableRecId _activityRecId, boolean _forUpdate = false)
    {
        PIPInventFlexSamplingActivityTable inventFlexSamplingActivityTable;
    
        if (_activityRecId)
        {
            select firstOnly inventFlexSamplingActivityTable
                where inventFlexSamplingActivityTable.RecId == _activityRecId;
        }
    
        return inventFlexSamplingActivityTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByPlan</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the record in the <c>PIPInventFlexSamplingActivityTable</c> table for a given plan.
    /// </summary>
    /// <param name="_flexibleSamplingPlanId">
    ///    The flexible sampling plan id.
    /// </param>
    /// <param name="_forUpdate">
    ///    Deterimines if the record should be read for update; optional.
    /// </param>
    /// <returns>
    ///    The record found in the <c>PIPInventFlexSamplingActivityTable</c> table or an empty buffer if no such record was found.
    /// </returns>
    public static PIPInventFlexSamplingActivityTable findByPlan(PIPFlexibleSamplingPlanId _flexibleSamplingPlanId, boolean _forUpdate = false)
    {
        PIPInventFlexSamplingActivityTable inventFlexSamplingActivityTable;
    
        select firstOnly inventFlexSamplingActivityTable
            where inventFlexSamplingActivityTable.FlexibleSamplingPlanID == _flexibleSamplingPlanId;
    
        return inventFlexSamplingActivityTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateActivity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds a matching <c>PIPInventFlexSamplingActivityTable</c> record based on parameters or
    ///    creates one if no match is found.
    /// </summary>
    /// <param name="_flexibleSamplingPlanId">
    ///    An <c>PIPFlexibleSamplingPlanId</c> value.
    /// </param>
    /// <param name="_referenceType">
    ///    An <c>InventTestReferenceType</c> value.
    /// </param>
    /// <param name="_accountRelation">
    ///    An <c>InventTestAccountRelation</c> value.
    /// </param>
    /// <param name="_itemId">
    ///    An <c>ItemId</c> value.
    /// </param>
    /// <param name="_wrkCtrId">
    ///    An <c>WrkCtrIdBase</c> value.
    /// </param>
    /// <returns>
    ///    The <c>PIPInventFlexSamplingActivityTable</c> record found or that was created.
    /// </returns>
    public static PIPInventFlexSamplingActivityTable findOrCreateActivity(
        PIPFlexibleSamplingPlanId     _flexibleSamplingPlanId,
        InventTestReferenceType       _referenceType,
        InventTestAccountRelation     _accountRelation,
        ItemIdInventoried             _itemId,
        WrkCtrIdBase                  _wrkCtrId = '')
    {
        PIPInventFlexSamplingActivityTable inventFlexSamplingActivityTable;
    
        select firstOnly inventFlexSamplingActivityTable
            where inventFlexSamplingActivityTable.FlexibleSamplingPlanId == _flexibleSamplingPlanId
                && inventFlexSamplingActivityTable.ReferenceType         == _referenceType
                && inventFlexSamplingActivityTable.AccountRelation       == _accountRelation
                && inventFlexSamplingActivityTable.ItemId                == _itemId
                && inventFlexSamplingActivityTable.WrkCtrRelation        == _wrkCtrId;
    
        if (!inventFlexSamplingActivityTable)
        {
            inventFlexSamplingActivityTable = PIPInventFlexSamplingActivityTable::create(_flexibleSamplingPlanId, _referenceType, _accountRelation, _itemId, _wrkCtrId);
        }
    
        return inventFlexSamplingActivityTable;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PIPInventFlexSampling</ConfigurationKey>
	<DeveloperDocumentation>@PIP116</DeveloperDocumentation>
	<Label>@PIP117</Label>
	<TitleField1>FlexibleSamplingPlanId</TitleField1>
	<TitleField2>ReferenceType</TitleField2>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FlexibleSamplingPlanId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReferenceType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountRelation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FlexibleSamplingPlanId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReferenceType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountRelation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>References</Name>
			<Label>@PIP112</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FlexibleSamplingPlanId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReferenceType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountRelation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WrkCtrRelation</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AccountRelation</Name>
			<ExtendedDataType>InventTestAccountRelation</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<StringSize>20</StringSize>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FlexibleSamplingPlanId</Name>
			<ExtendedDataType>PIPFlexibleSamplingPlanId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<ExtendedDataType>ItemIdInventoried</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<StringSize>20</StringSize>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ReferenceType</Name>
			<Mandatory>Yes</Mandatory>
			<EnumType>InventTestReferenceType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WrkCtrRelation</Name>
			<ExtendedDataType>WrkCtrIdBase</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>PIPInventFlexSamplingActivityTableIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>AccountRelation</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>FlexibleSamplingPlanId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ReferenceType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>WrkCtrRelation</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>CustTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PIPInventFlexSamplingActivityTable_CustTable</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>ReferenceType</Name>
					<Field>ReferenceType</Field>
					<ValueStr>InventTestReferenceType::Sales</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AccountRelation</Name>
					<Field>AccountRelation</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventFlexSamplingPlanTable</Name>
			<Cardinality>OneMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>PIPInventFlexSamplingPlanTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FlexibleSamplingPlanId</Name>
					<Field>FlexibleSamplingPlanId</Field>
					<RelatedField>FlexibleSamplingPlanId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>FlexibleSamplingPlanIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTable</Name>
			<Cardinality>OneMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<SourceEDT>ItemIdInventoried</SourceEDT>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<EntityRelationshipRole>@SYS123524</EntityRelationshipRole>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PIPInventFlexSamplingActivityTable_VendTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>ReferenceType</Name>
					<Field>ReferenceType</Field>
					<ValueStr>InventTestReferenceType::Purch</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AccountRelation</Name>
					<Field>AccountRelation</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>WrkCtrTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS124047</EntityRelationshipRole>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>WrkCtrTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>Resource</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PIPInventFlexSamplingActivityTable</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WrkCtrRelation</Name>
					<SourceEDT>WrkCtrIdBase</SourceEDT>
					<Field>WrkCtrRelation</Field>
					<RelatedField>WrkCtrId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>