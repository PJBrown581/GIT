<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PIPInventFlexSamplingPlanLines</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PIPInventFlexSamplingPlanLines extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        PIPInventFlexSamplingPlanTable  inventFlexSamplingPlanTable;
    
        ttsBegin;
    
        super();
    
        inventFlexSamplingPlanTable = this.flexibleSamplingPlan(true);
    
        if (inventFlexSamplingPlanTable.LastLevel == this.Level)
        {
            inventFlexSamplingPlanTable.LastLevel = 0;
            inventFlexSamplingPlanTable.update();
        }
    
        this.onPlanLineChanged();
    
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>flexibleSamplingPlan</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the <c>PIPInventFlexSamplingPlanTable</c> record from the current <c>PIPInventFlexSamplingPlanLines</c> record.
    /// </summary>
    /// <param name="_forUpdate">
    ///    Determines if the record should be locked for updating; optional.
    /// </param>
    /// <returns>
    ///    The <c>PIPInventFlexSamplingPlanTable</c> record.
    /// </returns>
    public PIPInventFlexSamplingPlanTable flexibleSamplingPlan(boolean _forUpdate = false)
    {
        return PIPInventFlexSamplingPlanTable::findByPlanId(this.FlexibleSamplingPlanId, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        #PIPFlexibleSampling
    
        if (!this.Level)
        {
            this.Level = PIPInventFlexSamplingPlanLines::getLastLevel(this.FlexibleSamplingPlanId) + #LevelIncrement;
        }
    
        ttsBegin;
    
        super();
    
        this.onPlanLineChanged();
    
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);
    
        switch(_fieldId)
        {
            case fieldNum(PIPInventFlexSamplingPlanLines, Skip):
                if (this.Skip)
                {
                    this.TimeSpanDays        = 0;
                }
                else
                {
                    this.TestPerSampleGroup  = 0;
                    this.TestSampleGroupSize = 0;
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextLineForFailAction</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the next flexible sampling planning line for a failure action.
    /// </summary>
    /// <returns>
    ///    The next record of the <c>PIPInventFlexSamplingPlanLines</c> for a failure action.
    /// </returns>
    public PIPInventFlexSamplingPlanLines nextLineForFailAction()
    {
        return PIPInventFlexSamplingPlanLines::findByPlanLevel(this.FlexibleSamplingPlanId, this.FailActionLevel);
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextLineForPassAction</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the next flexible sampling planning line for a pass action.
    /// </summary>
    /// <returns>
    ///    The next record of the <c>PIPInventFlexSamplingPlanLines</c> for a pass action.
    /// </returns>
    public PIPInventFlexSamplingPlanLines nextLineForPassAction()
    {
        return PIPInventFlexSamplingPlanLines::findByPlanLevel(this.FlexibleSamplingPlanId, this.PassActionLevel);
    }

]]></Source>
			</Method>
			<Method>
				<Name>onPlanLineChanged</Name>
				<Source><![CDATA[
    private void onPlanLineChanged()
    {
        FormDataSource  formDataSource;
        Object          formDataSourceObject;
    
        if (this.flexibleSamplingPlan().onPlanChanged())
        {
            // Must refresh the calling form data sources since the plan had to be unapproved
            formDataSource = FormDataUtil::getFormDataSource(this);
            if (formDataSource && formDataSourceHasMethod(formDataSource, 'onPlanChanged'))
            {
                formDataSourceObject = formDataSource;
                formDataSourceObject.onPlanChanged();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>roundsDisplay</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the number of rounds on the level for display purposes only.
    /// </summary>
    /// <returns>
    ///    The number of rounds on the level suitible for display purposes only.
    /// </returns>
    [SysClientCacheDataMethodAttribute]
    public display PIPRoundsDisplay roundsDisplay()
    {
        #PIPFlexibleSampling
    
        if (this.Rounds == #UnlimitedRounds)
        {
            return "@SYS163";
        }
        else
        {
            return int2str(this.Rounds);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>roundsEdit</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Edits and displays the rounds value.
    /// </summary>
    /// <param name="_set">
    ///    Determines if the value is to be set.
    /// </param>
    /// <param name="_roundValue">
    ///    The string value to assign to the round; only used if <paramref name="_set"/> is true.
    /// </param>
    /// <returns>
    ///    The string value of rounds suitable for displays purposes only.
    /// </returns>
    public edit PIPRoundsDisplay roundsEdit(boolean _set, String30 _roundValue)
    {
        PIPRounds   origRounds;
    
        #PIPFlexibleSampling
    
        if (_set)
        {
            origRounds = this.Rounds;
            this.Rounds = str2int(_roundValue);
            if (!this.validateField(fieldNum(PIPInventFlexSamplingPlanLines, Rounds)))
            {
                this.Rounds = origRounds;
            }
        }
    
        if (this.Rounds == #UnlimitedRounds)
        {
            return "@SYS163";
        }
        else if (this.Rounds == 0)
        {
            return "";
        }
        else
        {
            return int2str(this.Rounds);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>testSampleGroup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the test sample group 'out of' sample group size display.
    /// </summary>
    /// <returns>
    ///    A string showing the number of tests per sample group out of the test sample group size.
    /// </returns>
    [SysClientCacheDataMethodAttribute]
    public display PIPTestSampleGroupDisplay testSampleGroup()
    {
        if (this.Skip)
        {
            return strFmt("@PIP400", this.TestPerSampleGroup, this.TestSampleGroupSize);
        }
        else
        {
            return "";
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        ttsBegin;
    
        super();
    
        this.onPlanLineChanged();
    
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;
    
        #PIPFlexibleSampling
        #define.MaxNum3Digits(999)
    
        ret = super(_fieldIdToCheck);
    
        if (ret)
        {
            switch (_fieldIdToCheck)
            {
                case fieldNum(PIPInventFlexSamplingPlanLines, Rounds):
                    if (this.flexibleSamplingPlan().LastLevel == this.Level)
                    {
                        ret = checkFailed("@PIP186");
                    }
                    if (ret && this.Rounds > #UnlimitedRounds)
                    {
                        ret = checkFailed(strFmt("@PIP152", fieldPName(PIPInventFlexSamplingPlanLines, Rounds)));
                    }
                    break;
    
                case fieldNum(PIPInventFlexSamplingPlanLines, TestPerSampleGroup):
                case fieldNum(PIPInventFlexSamplingPlanLines, TestSampleGroupSize):
                case fieldNum(PIPInventFlexSamplingPlanLines, TimeSpanDays):
                case fieldNum(PIPInventFlexSamplingPlanLines, Fails):
                    if (this.(_fieldIdToCheck) >= #MaxNum3Digits)
                    {
                        ret = checkFailed(strFmt("@PIP152", fieldId2pname(tableNum(PIPInventFlexSamplingPlanLines), _fieldIdToCheck)));
                    }
                    break;
    
                case fieldNum(PIPInventFlexSamplingPlanLines, FailActionLevel):
                    if (this.Level != this.FailActionLevel && !PIPInventFlexSamplingPlanLines::findByPlanLevel(this.FlexibleSamplingPlanId, this.FailActionLevel))
                    {
                        ret = checkFailed("@PIP156");
                    }
                    break;
    
                case fieldNum(PIPInventFlexSamplingPlanLines, FailActionCode):
                    if ((this.FailActionCode == PIPFailActionCode::Alert || this.FailActionCode == PIPFailActionCode::Expire)
                        && !this.flexibleSamplingPlan().SecurityRole)
                    {
                        ret = checkFailed("@PIP189");
                    }
                    break;
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;
    
        ret = super();
    
        if (ret)
        {
            if (!this.Rounds)
            {
                ret = checkFailed(strFmt("@SYS84753", fieldPName(PIPInventFlexSamplingPlanLines, Rounds))) && ret;
            }
    
            if (this.Skip && !this.TestPerSampleGroup)
            {
                ret = checkFailed(strFmt("@SYS84753", fieldPName(PIPInventFlexSamplingPlanLines, TestPerSampleGroup))) && ret;
            }
    
            if (this.Skip && !this.TestSampleGroupSize)
            {
                ret = checkFailed(strFmt("@SYS84753", fieldPName(PIPInventFlexSamplingPlanLines, TestSampleGroupSize))) && ret;
            }
        }
    
        if (ret && this.TestSampleGroupSize <= this.TestPerSampleGroup && this.TestSampleGroupSize != 0)
        {
            ret = checkFailed("@PIP151");
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existByPlanLevel</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines if the specified record in the <c>PIPInventFlexSamplingPlanLines</c> table exists.
    /// </summary>
    /// <param name="_pipFlexibleSamplingPlanId">
    ///     The flexible sampling plan ID to check for.
    /// </param>
    /// <param name="_level">
    ///     The level for the Flexible sampling plan to check for.
    /// </param>
    /// <returns>
    ///     True if the specified record exists; otherwise, false.
    /// </returns>
    static boolean existByPlanLevel(PIPFlexibleSamplingPlanID _pipFlexibleSamplingPlanId, PIPLevel _level)
    {
        if (_pipFlexibleSamplingPlanId && _level)
        {
            return (select PIPInventFlexSamplingPlanLines
                        where PIPInventFlexSamplingPlanLines.FlexibleSamplingPlanId == _pipFlexibleSamplingPlanId
                            && PIPInventFlexSamplingPlanLines.Level == _level).RecId != 0;
        }
    
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByPlanLevel</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the <c>PIPInventFlexSamplingPlanLines</c> record based on
    ///     the Flexible sampling plan and level number.
    /// </summary>
    /// <param name="_pipFlexibleSamplingPlanId">
    ///     The <c>PIPFlexibleSamplingPlanID</c> for the Felxible sampling plan.
    /// </param>
    /// <param name="_level">
    ///     The <c>Level</c> number for the Flexible sampling plan.
    /// </param>
    /// <param name="_forUpdate">
    ///     A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///     The <c>PIPInventFlexSamplingPlanLines</c> record.
    /// </returns>
    public static PIPInventFlexSamplingPlanLines findByPlanLevel(
        PIPFlexibleSamplingPlanID   _pipFlexibleSamplingPlanId,
        PIPLevel                    _level,
        boolean                     _forUpdate = false)
    {
        PIPInventFlexSamplingPlanLines       pipInventFLexSamplingLines;
    
        pipInventFLexSamplingLines.selectForUpdate(_forUpdate);
    
        if (_pipFlexibleSamplingPlanId && _level)
        {
            select firstOnly pipInventFLexSamplingLines
                where pipInventFLexSamplingLines.FlexibleSamplingPlanID == _pipFlexibleSamplingPlanId
                    && pipInventFLexSamplingLines.Level == _level;
        }
    
        return pipInventFLexSamplingLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFirstPlanLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the first level record on the flexible sampling plan.
    /// </summary>
    /// <param name="_pipFlexSamplingPlanId">
    ///     The flexible sampling plan ID to check for.
    /// </param>
    /// <returns>
    ///     A record from the <c>PIPInventFlexSamplingPlanLines</c> table.
    /// </returns>
    public static PIPInventFlexSamplingPlanLines getFirstPlanLine(PIPFlexibleSamplingPlanId _pipFlexSamplingPlanId)
    {
        PIPInventFlexSamplingPlanLines  inventFlexSamplingPlanLines;
    
        select firstOnly inventFlexSamplingPlanLines
            order by Level
            where inventFlexSamplingPlanLines.FlexibleSamplingPlanId == _pipFlexSamplingPlanId;
    
        return inventFlexSamplingPlanLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLastLevel</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the value of the last level on the flexible sampling plan.
    /// </summary>
    /// <param name="_pipFlexSamplingPlanId">
    ///     The flexible sampling plan ID to check from.
    /// </param>
    /// <returns>
    ///     The value of the last level.
    /// </returns>
    public static PIPLevel getLastLevel(PIPFlexibleSamplingPlanId _pipFlexSamplingPlanId)
    {
        return (select maxOf(Level) from PIPInventFlexSamplingPlanLines
                    where PIPInventFlexSamplingPlanLines.FlexibleSamplingPlanID == _pipFlexSamplingPlanId).Level;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PIPInventFlexSampling</ConfigurationKey>
	<DeveloperDocumentation>@PIP114</DeveloperDocumentation>
	<Label>@PIP99</Label>
	<TitleField1>FlexibleSamplingPlanId</TitleField1>
	<TitleField2>Level</TitleField2>
	<ClusteredIndex>InventFlexSamplingLineIdx</ClusteredIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FlexibleSamplingPlanId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Level</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemSamplingId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TestGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Rounds</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Skip</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Fails</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PlanLines</Name>
			<Label>@PIP113</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Rounds</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Level</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TimeSpanDays</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Fails</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PassActionLevel</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FailActionLevel</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>References</Name>
			<Label>@PIP112</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FlexibleSamplingPlanId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TestGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemSamplingId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SkipFrequency</Name>
			<Label>@PIP105</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Skip</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TestPerSampleGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TestSampleGroupSize</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TestFail</Name>
			<Label>@PIP106</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Fails</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FailActionCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FailActionLevel</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Consecutive</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Consecutive</Name>
			<ExtendedDataType>PIPConsecutive</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>FailActionCode</Name>
			<EnumType>PIPFailActionCode</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>FailActionLevel</Name>
			<ExtendedDataType>PIPFailActionLevel</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>Fails</Name>
			<ExtendedDataType>PIPFails</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FlexibleSamplingPlanId</Name>
			<ExtendedDataType>PIPFlexibleSamplingPlanId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemSamplingId</Name>
			<ExtendedDataType>InventItemSamplingId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>Level</Name>
			<ExtendedDataType>PIPLevel</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>PassActionLevel</Name>
			<ExtendedDataType>PIPPassActionLevel</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>Rounds</Name>
			<ExtendedDataType>PIPRounds</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Skip</Name>
			<ExtendedDataType>PIPSkip</ExtendedDataType>
			<HelpText>@PIP109</HelpText>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TestGroupId</Name>
			<ExtendedDataType>InventTestGroupId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>TestPerSampleGroup</Name>
			<ExtendedDataType>PIPTestPerSampleGroup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>TestSampleGroupSize</Name>
			<ExtendedDataType>PIPTestSampleGroupSize</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>TimeSpanDays</Name>
			<ExtendedDataType>PIPTimeSpanDays</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>InventFlexSamplingLineIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>FlexibleSamplingPlanId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Level</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>InventTestGroupIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>TestGroupId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>InventItemSamplingIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ItemSamplingId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventFlexSamplingPlanTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>PIPInventFlexSamplingPlanTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FlexibleSamplingPlanId</Name>
					<Field>FlexibleSamplingPlanId</Field>
					<RelatedField>FlexibleSamplingPlanId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>FlexibleSamplingPlanIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventItemSampling</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>InventItemSampling</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemSamplingId</Name>
					<SourceEDT>InventItemSamplingId</SourceEDT>
					<Field>ItemSamplingId</Field>
					<RelatedField>InventItemSamplingId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventItemSamplingIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTestGoup</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>InventTestGroup</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TestGroupId</Name>
					<SourceEDT>InventTestGroupId</SourceEDT>
					<Field>TestGroupId</Field>
					<RelatedField>TestGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>