<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PIPFlexSamplingActivitySkipTracking</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PIPFlexSamplingActivitySkipTracking extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a value indicating if a record in the <c>PIPFlexSamplingActivitySkipTracking</c> table exists for the given surrogate key value.
    /// </summary>
    /// <param name="_activityRecId">
    /// The surrogate record id for the activity sampling table record.
    /// </param>
    /// <returns>
    /// true if the record exists; otherwise, false.
    /// </returns>
    public static boolean exist(PIPInventFlexSamplingActivityTableRecId _activityRecId)
    {
        return _activityRecId
            && (select PIPFlexSamplingActivitySkipTracking
                    where PIPFlexSamplingActivitySkipTracking.FlexibleSamplingActivity == _activityRecId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds the specified record in the <c>PIPFlexSamplingActivitySkipTracking</c> table.
    /// </summary>
    /// <param name="_activityRecId">
    ///     The surrogate key value to find.
    /// </param>
    /// <param name="_update">
    ///     A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///     A record in the <c>PIPFlexSamplingActivitySkipTracking</c> table; otherwise, an empty record.
    /// </returns>
    public static PIPFlexSamplingActivitySkipTracking find(PIPInventFlexSamplingActivityTableRecId _activityRecId, boolean _update = false)
    {
        PIPFlexSamplingActivitySkipTracking pipInventFlexSamplingActivitySkipTracking;
    
        pipInventFlexSamplingActivitySkipTracking.selectForUpdate(_update);
    
        select firstonly pipInventFlexSamplingActivitySkipTracking
            where pipInventFlexSamplingActivitySkipTracking.FlexibleSamplingActivity == _activityRecId;
    
        return pipInventFlexSamplingActivitySkipTracking;
    }

]]></Source>
			</Method>
			<Method>
				<Name>roundsToTest</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the rounds to be tested in a sample group.
    /// </summary>
    /// <param name="_activityRecId">
    ///     The surrogate key value to find.
    /// </param>
    /// <returns>
    ///     A container with a list of integers, each representing a test count.
    /// </returns>
    public static container roundsToTest(PIPInventFlexSamplingActivityTableRecId _activityRecId)
    {
        PIPFlexSamplingActivitySkipTracking     flexSamplingActivityTracking;
    
        select firstOnly RoundsToSkip
            from flexSamplingActivityTracking
            where flexSamplingActivityTracking.FlexibleSamplingActivity == _activityRecId;
    
        return flexSamplingActivityTracking.RoundsToSkip;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRoundsToTest</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates/creates a record in the <c>PIPFlexSamplingActivitySkipTracking</c> table
    /// with the set of rounds to be tested.
    /// </summary>
    /// <param name="_activityRecId">
    /// The surrogate record id for the activity sampling table record.
    /// </param>
    /// <param name="_testPerSampleGroup">
    /// The number of tests per sample group.
    /// </param>
    /// <param name="_testSampleGroupSize">
    /// The test sample group size.
    /// </param>
    /// <returns>
    /// A container with a list of integers, each representing a test count.
    /// </returns>
    public static container setRoundsToTest(
        PIPInventFlexSamplingActivityTableRecId _activityRecId,
        PIPTestPerSampleGroup                   _testPerSampleGroup,
        PIPTestSampleGroupSize                  _testSampleGroupSize)
    {
        PIPFlexSamplingActivitySkipTracking flexSamplingActivityTracking;
        container                           roundsToTest;
        int                                 counter;
        int                                 random;
        Set                                 rounds = new Set (Types::Integer);
    
        for (counter = 0; counter < _testPerSampleGroup; counter++)
        {
            do
            {
                random = xGlobal::randomPositiveInt32() mod _testSampleGroupSize + 1;
            }
            while (rounds.in(random));
    
            roundsToTest += random;
            rounds.add(random);
        }
    
        flexSamplingActivityTracking = PIPFlexSamplingActivitySkipTracking::find(_activityRecId, true);
    
        ttsBegin;
    
        flexSamplingActivityTracking.RoundsToSkip = roundsToTest;
    
        if (flexSamplingActivityTracking)
        {
            flexSamplingActivityTracking.update();
        }
        else
        {
            flexSamplingActivityTracking.FlexibleSamplingActivity = _activityRecId;
            flexSamplingActivityTracking.insert();
        }
    
        ttsCommit;
    
        return roundsToTest;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PIPInventFlexSampling</ConfigurationKey>
	<DeveloperDocumentation>@PIP195</DeveloperDocumentation>
	<Label>@PIP194</Label>
	<TitleField1>FlexibleSamplingActivity</TitleField1>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FlexibleSamplingActivity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RoundsToSkip</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Skip</Name>
			<Label>@PIP194</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FlexibleSamplingActivity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RoundsToSkip</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>FlexibleSamplingActivity</Name>
			<ExtendedDataType>PIPInventFlexSamplingActivityTableRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>RoundsToSkip</Name>
			<ExtendedDataType>PIPRoundsToSkip</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>PIPInventFlexSamplingActivityTableIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>FlexibleSamplingActivity</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PIPInventFlexSamplingActivityTable</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>PIPInventFlexSamplingActivityTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FlexibleSamplingActivity</Name>
					<Field>FlexibleSamplingActivity</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>