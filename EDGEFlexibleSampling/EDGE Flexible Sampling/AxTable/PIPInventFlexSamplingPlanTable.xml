<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PIPInventFlexSamplingPlanTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PIPInventFlexSamplingPlanTable extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkApprovalAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a value indicating if this flexible sampling plan may be approved.
    /// </summary>
    /// <returns>
    ///    true if this flexible sampling plan may be approved; otherwise, false.
    /// </returns>
    public boolean checkApprovalAllowed()
    {
        PIPInventFlexSamplingPlanLines  inventFlexSamplingPlanLines;
        boolean                         approve = true;
    
        if (!this.LastLevel)
        {
            error("@PIP345");
            approve = false;
        }
    
        if (approve)
        {
            while select Level, PassActionLevel, FailActionLevel from inventFlexSamplingPlanLines
                where inventFlexSamplingPlanLines.FlexibleSamplingPlanId == this.FlexibleSamplingPlanId
            {
                if (!inventFlexSamplingPlanLines.FailActionLevel)
                {
                    error(strFmt("@PIP343", inventFlexSamplingPlanLines.Level));
                    approve = false;
                    break;
                }
                if (!inventFlexSamplingPlanLines.PassActionLevel)
                {
                    error(strFmt("@PIP344", inventFlexSamplingPlanLines.Level));
                    approve = false;
                    break;
                }
                if(!PIPInventFlexSamplingPlanLines::existByPlanLevel(this.FlexibleSamplingPlanId, inventFlexSamplingPlanLines.PassActionLevel))
                {
                    error(strFmt("@PIP341", inventFlexSamplingPlanLines.Level));
                    approve = false;
                    break;
                }
                if (!PIPInventFlexSamplingPlanLines::existByPlanLevel(this.FlexibleSamplingPlanId, inventFlexSamplingPlanLines.FailActionLevel))
                {
                    error(strFmt("@PIP342", inventFlexSamplingPlanLines.Level));
                    approve = false;
                    break;
                }
                if (this.LastLevel == inventFlexSamplingPlanLines.Level && inventFlexSamplingPlanLines.PassActionLevel != inventFlexSamplingPlanLines.Level)
                {
                    error("@PIP346");
                    approve = false;
                    break;
                }
            }
        }
    
        return approve;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onPlanChanged</Name>
				<Source><![CDATA[
    public boolean onPlanChanged(boolean _inUpdate = false)
    {
        PIPInventFlexSamplingActivityTable  inventFlexSamplingActivityTable;
        boolean                             ret = false;
    
        if (this.orig().Approved && this.Approved)
        {
            select firstOnly RecId from inventFlexSamplingActivityTable
                where inventFlexSamplingActivityTable.FlexibleSamplingPlanId == this.FlexibleSamplingPlanId;
    
            if (inventFlexSamplingActivityTable.RecId)
            {
                warning("@PIP187");
            }
            else
            {
                warning("@PIP361");
            }
    
            if (_inUpdate)
            {
                this.Approved = false;
            }
            else
            {
                ttsBegin;
    
                this.selectForUpdate(true);
                this.Approved = false;
                this.update();
    
                ttsCommit;
            }
    
            ret = true;
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>roleEdit</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Edits the notification security role.
    /// </summary>
    /// <param name="_set">
    ///    Determines if the security role is to be set.
    /// </param>
    /// <param name="_name">
    ///    The name of the security role to assign; used only if <paramref name="_set"/> is true.
    /// </param>
    /// <returns>
    ///    The security role name to display.
    /// </returns>
    public edit SecurityRoleAotName roleEdit(boolean _set, Name _name)
    {
        SecurityRole        securityRole;
        SecurityRoleAotName origRoleName;
    
        if (_set)
        {
            select firstOnly AotName, Name from securityRole
                where securityRole.Name == _name;
    
            origRoleName = this.SecurityRole;
            this.SecurityRole = securityRole.AotName;
    
            if (!this.validateField(fieldNum(PIPInventFlexSamplingPlanTable, securityRole)))
            {
                this.SecurityRole = origRoleName;
            }
        }
        else
        {
            select firstOnly Name from securityRole
                where securityRole.AotName == this.SecurityRole;
        }
    
        return securityRole.Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        PIPInventFlexSamplingPlanTable  pipInventFlexSamplingPlanTable_orig;
    
        pipInventFlexSamplingPlanTable_orig = this.orig();
    
        ttsBegin;
    
        if (this.LastLevel != pipInventFlexSamplingPlanTable_orig.LastLevel
            || this.SecurityRole != pipInventFlexSamplingPlanTable_orig.SecurityRole)
        {
            this.onPlanChanged(true);
        }

        super();
    
        if (this.Approved != pipInventFlexSamplingPlanTable_orig.Approved)
        {
            this.updateHistory();
        }
    
        if (this.LastLevel != pipInventFlexSamplingPlanTable_orig.LastLevel)
        {
            this.updateOnLastLevelChanged(pipInventFlexSamplingPlanTable_orig.LastLevel);
        }
    
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateHistory</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Updates the <c>PIPHistoryFlexibleSamplingPlan</c> table if the plan is approved/unapproved.
    /// </summary>
    private void updateHistory()
    {
        PIPHistoryFlexibleSamplingPlan  historyFlexibleSamplingPlan;
    
        historyFlexibleSamplingPlan.FlexibleSamplingPlanId  = this.FlexibleSamplingPlanId;
        historyFlexibleSamplingPlan.Description             = this.Description;
        historyFlexibleSamplingPlan.Approved                = this.Approved;
        historyFlexibleSamplingPlan.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateOnLastLevelChanged</Name>
				<Source><![CDATA[
    private void updateOnLastLevelChanged(PIPLastLevel _previousLastLevel)
    {
        PIPInventFlexSamplingPlanLines  inventFlexSamplingPlanLines;
        PIPInventFlexSamplingPlanLines  inventFlexSamplingPlanLinesLastLevel;
    
        #PIPFlexibleSampling
    
        inventFlexSamplingPlanLines = PIPInventFlexSamplingPlanLines::findByPlanLevel(this.FlexibleSamplingPlanId, this.LastLevel, true);
    
        if (!inventFlexSamplingPlanLines && this.LastLevel)
        {
            throw error("@PIP182");
        }
    
        if (inventFlexSamplingPlanLines)
        {
            inventFlexSamplingPlanLines.Rounds          = #UnlimitedRounds;
            inventFlexSamplingPlanLines.PassActionLevel = inventFlexSamplingPlanLines.Level;
            inventFlexSamplingPlanLines.update();
        }
    
        if (_previousLastLevel)
        {
            inventFlexSamplingPlanLinesLastLevel = PIPInventFlexSamplingPlanLines::findByPlanLevel(this.FlexibleSamplingPlanId, _previousLastLevel, true);
    
            if (inventFlexSamplingPlanLinesLastLevel)
            {
                inventFlexSamplingPlanLinesLastLevel.Rounds = 0;
                inventFlexSamplingPlanLinesLastLevel.update();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        InventTestAssociationTable          inventTestAssociationTable;
        boolean                             ret;
    
        ret = super();
    
        select inventTestAssociationTable
            where inventTestAssociationTable.PIPFlexibleSamplingPlanId == this.FlexibleSamplingPlanId;
    
        if (PIPInventFlexSamplingActivityTable::existByPlanId(this.FlexibleSamplingPlanId)
                || InventQualityOrderTable::pipExistByPlanId(this.FlexibleSamplingPlanId))
        {
            ret = ret && checkFailed("@PIP162");
        }
    
        if (InventTestAssociationTable::pipExistByPlanId(this.FlexibleSamplingPlanId))
        {
            if (Box::okCancel("@PIP192", DialogButton::Cancel) == DialogButton::Ok)
            {
                ttsBegin;
                inventTestAssociationTable.skipDataMethods(true);

                update_recordset inventTestAssociationTable
                    setting
                        PIPFlexibleSampling         = false,
                        PIPFlexibleSamplingPlanId   = ''
                    where inventTestAssociationTable.PIPFlexibleSamplingPlanId == this.FlexibleSamplingPlanId;
                ttsCommit;
            }
            else
            {
                ret = false;
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldId)
    {
        PIPInventFlexSamplingPlanLines  inventFlexSamplingPlanLines;
        PIPInventFlexSamplingPlanLines  inventFlexSamplingPlanLinesLastLevel;
        boolean                         ret = true;

        #PIPFlexibleSampling
    
        ret = super(_fieldId);
    
        if (ret)
        {
            switch(_fieldId)
            {
                case fieldNum(PIPInventFlexSamplingPlanTable, SecurityRole):
                    if (!this.SecurityRole)
                    {
                        select firstOnly RecId from inventFlexSamplingPlanLines
                            where inventFlexSamplingPlanLines.FlexibleSamplingPlanId == this.FlexibleSamplingPlanId
                                && (inventFlexSamplingPlanLines.FailActionCode       == PIPFailActionCode::Alert
                                    || inventFlexSamplingPlanLines.FailActionCode    == PIPFailActionCode::Expire);
    
                        if (inventFlexSamplingPlanLines.RecId)
                        {
                            ret = checkFailed("@PIP144");
                        }
                    }
                    break;
    
                case fieldNum(PIPInventFlexSamplingPlanTable, LastLevel):
                    inventFlexSamplingPlanLines = PIPInventFlexSamplingPlanLines::findByPlanLevel(this.FlexibleSamplingPlanId, this.LastLevel);
    
                    if (!inventFlexSamplingPlanLines && this.LastLevel)
                    {
                        ret = checkFailed("@PIP182");
                    }
                    else
                    {
                        inventFlexSamplingPlanLinesLastLevel = PIPInventFlexSamplingPlanLines::findByPlanLevel(this.FlexibleSamplingPlanId, this.orig().LastLevel);
    
                        if (inventFlexSamplingPlanLines.Rounds && inventFlexSamplingPlanLines.Rounds != #UnlimitedRounds)
                        {
                            ret = Box::okCancel(strFmt("@PIP184", this.LastLevel), DialogButton::Cancel, "@PIP185") == DialogButton::Ok;
                        }
                    }
                    break;
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existPlan</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines if the specified record in the <c>PIPInventFlexSamplingPlanTable</c> table exists.
    /// </summary>
    /// <param name="_flexibleSamplingPlanId">
    ///     The flexible sampling plan Id of the record to find.
    /// </param>
    /// <returns>
    ///     True if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean existPlan(PIPFlexibleSamplingPlanId  _flexibleSamplingPlanId)
    {
        return (select PIPInventFlexSamplingPlanTable
                     where PIPInventFlexSamplingPlanTable.FlexibleSamplingPlanId == _flexibleSamplingPlanId).RecId !=0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByPlanId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds the specified record in the <c>PIPInventFlexSamplingPlanTable</c> table.
    /// </summary>
    /// <param name="_flexibleSamplingPlanId">
    ///     The flexible sampling plan Id of the record to check.
    /// </param>
    /// <param name="_forUpdate">
    ///     A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///     A record in the <c>PIPHistoryFlexibleSamplingPlan</c> table.
    /// </returns>
    public static PIPInventFlexSamplingPlanTable findByPlanId(PIPFlexibleSamplingPlanId _flexibleSamplingPlanId, boolean _forUpdate = false)
    {
        PIPInventFlexSamplingPlanTable     pipInventFlexSamplingPlanTable;
    
        pipInventFlexSamplingPlanTable.selectForUpdate(_forUpdate);
    
        select firstOnly pipInventFlexSamplingPlanTable
            where pipInventFlexSamplingPlanTable.FlexibleSamplingPlanId == _flexibleSamplingPlanId;
    
        return pipInventFlexSamplingPlanTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <returns></returns>
    public boolean validateWrite()
    {
        boolean ret;
    
        ret = super();

        if (ret && this.Approved && !this.orig().Approved && this.LastLevel)
        {
            PIPInventFlexSamplingPlanLines planLines;

            select firstonly Level from planLines
                where planLines.FlexibleSamplingPlanId  == this.FlexibleSamplingPlanId
                    && planLines.Level                  != this.LastLevel
                    && planLines.Rounds                 == 0;

            if (planLines.Level)
            {
                ret = checkFailed(strFmt("Rounds must be set for plan level %1", planLines.Level));
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PIPInventFlexSampling</ConfigurationKey>
	<DeveloperDocumentation>@PIP97</DeveloperDocumentation>
	<FormRef>PIPInventFlexSamplingPlan</FormRef>
	<Label>@PIP96</Label>
	<TitleField1>FlexibleSamplingPlanId</TitleField1>
	<TitleField2>Description</TitleField2>
	<ClusteredIndex>FlexibleSamplingPlanIdx</ClusteredIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FlexibleSamplingPlanId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LastLevel</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FlexibleSamplingPlanId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LastLevel</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FlexibleSamplingPlanId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Alert</Name>
			<Label>@PIP85</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SecurityRole</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Other</Name>
			<Label>@SYS1284</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Approved</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Approved</Name>
			<ExtendedDataType>PIPApproved</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<ExtendedDataType>Description</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<StringSize>60</StringSize>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FlexibleSamplingPlanId</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>PIPFlexibleSamplingPlanId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>LastLevel</Name>
			<ExtendedDataType>PIPLastLevel</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SecurityRole</Name>
			<ExtendedDataType>SecurityRoleAotName</ExtendedDataType>
			<Label>@PIP90</Label>
			<StringSize>40</StringSize>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>SecurityRoleIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>SecurityRole</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>FlexibleSamplingPlanIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>FlexibleSamplingPlanId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SecurityRole</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>SecurityRole</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SecurityRole</Name>
					<Field>SecurityRole</Field>
					<RelatedField>AotName</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AotNameIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>