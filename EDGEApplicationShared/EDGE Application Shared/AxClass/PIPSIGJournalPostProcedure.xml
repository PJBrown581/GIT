<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PIPSIGJournalPostProcedure</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>PIPSIGJournalPostProcedure</c> class is an abstract base class for the built-in journal posting based signature providers.
/// </summary>
abstract class PIPSIGJournalPostProcedure extends PIPSIGProcedureProviderBase
{
    JournalTableMap                 journalTable;
    PIPSIGJournalSigningProvider    journalSigningProvider;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>captureDelayedSignature</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Captures a signature that was initiated prior to posting for the specified journal.
    /// </summary>
    /// <param name="_journalTable">
    ///     The journal header to be signed for.
    /// </param>
    /// <param name="_journalLines">
    ///     A <c>PIPRecordSigningList</c> object containing the journal lines to sign; optional.
    /// </param>
    /// <exception cref="Exception::Error">
    ///     The specified journal header does not match the journal header that was used when initiating the signature process prior to posting.
    /// </exception>
    public void captureDelayedSignature(JournalTableMap _journalTable, PIPRecordSigningList _journalLines = null)
    {
        container       fields;
        ListEnumerator  listEnumerator;
        SIGBaseDocument doc;

        Common          journalLine;
        container       lineFields;

        List            docListToSign;

        if (journalTable.TableId != _journalTable.TableId || journalTable.RecId != _journalTable.RecId)
        {
            throw error("@PIP423");
        }

        // The internal buffer 'journalTable' may be stale. Assign it a fresh buffer.
        journalTable = _journalTable;

        fields          = SIGBaseDocument::buildFieldList(DatabaseLogType::Update, journalTable, journalTable.orig());
        listEnumerator  = docList.getEnumerator();

        docListToSign   = new List(Types::Class);

        while (listEnumerator.moveNext())
        {
            doc = listEnumerator.current();
            if (doc.getRefTableId() == journalTable.TableId && doc.getRefRecId() == journalTable.RecId)
            {
                doc.initFieldList(DatabaseLogType::Update, fields, journalTable.TableId, journalTable.RecId);
                doc.setSigneeId(signeeId);
                docListToSign.addEnd(doc);
            }

            if (doc.getRefTableId() == _journalLines.tableId())
            {
                journalLine = _journalLines.bufferForRecId(doc.getRefRecId());
                if (journalLine)
                {
                    lineFields = SIGBaseDocument::buildFieldList(DatabaseLogType::Update, journalLine, journalLine.orig());
                    doc.initFieldList(DatabaseLogType::Update, lineFields, journalLine.TableId, journalLine.RecId);
                    doc.setSigneeId(signeeId);
                    docListToSign.addEnd(doc);
                }
            }
        }

        docList = docListToSign;

        signed = journalSigningProvider.signDataList(docList, journalSigningProvider.getValidCertificate(signeeId));
        if (signed)
        {
            SIGBaseDocument::addListToCache(docList);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getClassId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the class ID of the derived class that actually performs the signature procedure.
    /// </summary>
    /// <returns>
    ///     The class ID of the concrete class that actually performs the signature procedure.
    /// </returns>
    protected ClassId getClassId()
    {
        return classIdGet(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSigningProvider</Name>
				<Source><![CDATA[
    protected SIGSigningProvider getSigningProvider()
    {
        if (!journalSigningProvider)
        {
            journalSigningProvider = super();
        }
    
        return journalSigningProvider;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournalTable</Name>
				<Source><![CDATA[
    protected JournalTableMap parmJournalTable(JournalTableMap _journalTable = null)
    {
        if (!prmisDefault(_journalTable))
        {
            journalTable = _journalTable;
    
            docList = new List(Types::Class);

            if (this.signatureRequired())
            {
                docList.addEnd(SIGBaseDocument::newDatabaseLog(DatabaseLogType::Update, journalTable));
            }
        }
    
        return journalTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>preferredProviderId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the class ID of the preferred signature provider.
    /// </summary>
    /// <returns>
    ///     The class ID of the preferred signature provider.
    /// </returns>
    /// <remarks>
    ///     Allows classes derived from this class to specify a different signature provider by overriding this method.
    /// </remarks>
    protected ClassId preferredProviderId()
    {
        return classNum(PIPSIGJournalSigningProvider);
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectLinesForSignature</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a record signing list of the line records for the journal in this procedure.
    /// </summary>
    /// <returns>
    ///    A record signing list containing the line records for the journal. The records in this
    ///    list should have been modified such that updating them will create the audit log necessary
    ///    to save the e-signature for the line.
    /// </returns>
    public abstract PIPRecordSigningList selectLinesForSignature()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>signatureRequired</Name>
				<Source><![CDATA[
    public boolean signatureRequired()
    {
        return SIGProcedureProvider::pipIsActivated(this.getClassId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateJournalTableFields</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the fields in the given record in the <c>JournalTableMap</c> map to trigger a signature.
    /// </summary>
    /// <param name="_journalTable">
    ///    The record in the <c>JournalTableMap</c> to update.
    /// </param>
    /// <exception cref="Exception::Error">
    ///    If the record is not the same one that was given as a parameter to this object.
    /// </exception>
    public void updateJournalTableFields(JournalTableMap _journalTable)
    {
        if (journalTable.TableId != _journalTable.TableId || journalTable.RecId != _journalTable.RecId)
        {
            throw error("@PIP423");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pipIsDelaySigned</Name>
				<Source><![CDATA[
    public boolean pipIsDelaySigned()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>