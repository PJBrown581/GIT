<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PIPInventTable_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>PIPInventTable_Extension</c> class provides event handlers and extensions for the <c>InventTable</c> table.
/// </summary>
public static class PIPInventTable_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>pipToUnit</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Converts a quantity from a given unit to either the item inventory unit or a specified unit.
    /// </summary>
    /// <param name="_this">
    ///    The record for the <cref name="InventTable"/> table.
    /// </param>
    /// <param name="_qty">
    ///    The quantity to convert.
    /// </param>
    /// <param name="_fromUnit">
    ///    The unit for the quantity to convert from.
    /// </param>
    /// <param name="_toUnit">
    ///    The unit to convert to; optional. If not specified, this defaults to the item's inventory unit.
    /// </param>
    /// <returns>
    ///    The quantity converted to either the item inventory unit or unit <paramref name="_toUnit"/>.
    /// </returns>
    public static Qty pipToUnit(InventTable _this, Qty _qty, UnitOfMeasureSymbol _fromUnit, UnitOfMeasureSymbol _toUnit = "")
    {
        UnitOfMeasureSymbol     inventUnitId = _this.inventUnitId();
        UnitOfMeasureSymbol     toUnit       = _toUnit ? _toUnit : inventUnitId;
        Qty                     qty          = _qty;
        UnitOfMeasureRecId      inventUnitOfMeasure;
    
        if (_fromUnit != toUnit)
        {
            inventUnitOfMeasure = UnitOfMeasure::unitOfMeasureIdBySymbol(inventUnitId);
    
            qty = UnitOfMeasureConverter::convert(
                    qty,
                    UnitOfMeasure::unitOfMeasureIdBySymbol(_fromUnit),
                    inventUnitOfMeasure,
                    NoYes::Yes,
                    _this.Product);
    
            if (toUnit != inventUnitId)
            {
                qty = UnitOfMeasureConverter::convert(
                        qty,
                        inventUnitOfMeasure,
                        UnitOfMeasure::unitOfMeasureIdBySymbol(toUnit),
                        NoYes::Yes,
                        _this.Product);
            }
        }
    
        return qty;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>