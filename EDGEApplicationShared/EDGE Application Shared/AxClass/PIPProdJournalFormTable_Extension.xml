<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PIPProdJournalFormTable_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(ProdJournalFormTable))]
public final class PIPProdJournalFormTable_Extension
{
    private FormControl signatureReviewButton;
    private PIPJournalFormTableSub pipJournalFormTableSub;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmPIPSignatureReviewButton</Name>
				<Source><![CDATA[
    public FormControl parmPIPSignatureReviewButton(FormControl _signatureReviewButton = signatureReviewButton)
    {
        signatureReviewButton = _signatureReviewButton;
    
        return signatureReviewButton;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pipEnableButtonsActive</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disable buttons when the active data source changes.
    /// </summary>
    private void pipEnableButtonsActive()
    {
        ProdJournalTable prodJournalTable = this.journalTable() as ProdJournalTable;
        if (signatureReviewButton && signatureReviewButton.visible())
        {
            signatureReviewButton.enabled(prodJournalTable.pipIsRecordSigned());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pipOnInit</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Executes logic on form initialization.
    /// </summary>
    private void pipOnInit()
    {
        if (signatureReviewButton)
        {
            signatureReviewButton.visible(PIPSIGProdJournalPostProcedure::anyProdJournalPostProceduresEnabled());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pipEnableButtonsActivePost</Name>
				<Source><![CDATA[
    [PostHandlerFor(classStr(ProdJournalFormTable), methodStr(ProdJournalFormTable, enableButtonsActive))]
    /// <summary>
    ///    Executes additional logic in the post-method event for the <see cref="enableButtonsActive method"/> on this class.
    /// </summary>
    /// <param name="_args">
    ///    The standard pre-/post- arguments for a static method event handler.
    /// </param>
    public static void pipEnableButtonsActivePost(XppPrePostArgs _args)
    {
        ProdJournalFormTable prodJournalFormTable = _args.getThis();
    
        prodJournalFormTable.pipEnableButtonsActive();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pipFormInitPostPost</Name>
				<Source><![CDATA[
    [PostHandlerFor(classStr(ProdJournalFormTable), methodStr(ProdJournalFormTable, formInitPost))]
    /// <summary>
    ///    Executes additional logic in the post-method event for the <see cref="formInitPost method"/> on this class.
    /// </summary>
    /// <param name="_args">
    ///    The standard pre-/post- arguments for a static method event handler.
    /// </param>
    public static void pipFormInitPostPost(XppPrePostArgs _args)
    {
        ProdJournalFormTable prodJournalFormTable = _args.getThis();
    
        prodJournalFormTable.pipOnInit();
    }

]]></Source>
			</Method>
			<Method>
				<Name>standardJournalNameId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the standard journal name to use when creating a new journal on the form.
    /// </summary>
    /// <param name="_journalTypeId">
    ///    The integer Id of the inventory journal type; optional.
    /// </param>
    /// <returns>
    ///    The standard journal name to use when creating a new journal.
    /// </returns>
    protected JournalNameId standardJournalNameId(Integer _journalTypeId)    
    {
        JournalNameId journalNameId = next standardJournalNameId(_journalTypeId);

        if (!pipJournalFormTableSub)
        {
            pipJournalFormTableSub = PIPPluginFactory::RelatedInstance(classStr(PIPJournalFormTableSub), this) as PIPJournalFormTableSub;
            pipJournalFormTableSub.parmJournalFormTable(this);
        }

        return pipJournalFormTableSub.standardJournalNameId(_journalTypeId, journalNameId);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>