<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PIPNumberSequenceHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
public static class PIPNumberSequenceHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>generateNumberSequenceScopeTypeSQL</Name>
				<Source><![CDATA[
    public static str generateNumberSequenceScopeTypeSQL(str _entityName, str _scopeTable)
    {
        str _dataArea = SysComputedColumn::returnField(_entityName,_scopeTable,fieldstr(NumberSequenceScope,DataArea));
        str _fiscalCalenderPeriod = SysComputedColumn::returnField(_entityName,_scopeTable,fieldstr(NumberSequenceScope,FiscalCalendarPeriod));
        str _legalEntity = SysComputedColumn::returnField(_entityName,_scopeTable,fieldstr(NumberSequenceScope, LegalEntity));
        str _operatingUnit = SysComputedColumn::returnField(_entityName,_scopeTable,fieldstr(NumberSequenceScope,OperatingUnit));
        str _operatingUnitType = SysComputedColumn::returnField(_entityName,_scopeTable,fieldstr(NumberSequenceScope,OperatingUnitType));

        //CASE
        //    WHEN T2.DATAAREA <> '' AND T2.FISCALCALENDARPERIOD <> 0 THEN 1
        //    WHEN T2.DATAAREA <> '' THEN 0
        //    WHEN T2.LEGALENTITY <> 0 AND T2.FISCALCALENDARPERIOD <> 0 THEN 3
        //    WHEN T2.LEGALENTITY <> 0 THEN 2
        //    WHEN T2.OPERATINGUNIT <> 0 THEN 4
        //    WHEN T2.OPERATINGUNITTYPE <> 0 THEN 5
        //    ELSE '' END
        // 0,1 ,2 ... is the NumberSequenceType Enum values
        str testStr =
            ' CASE ' +
            ' WHEN ' + _dataArea + " <> '' AND " + _fiscalCalenderPeriod + " <> 0 THEN " + int2Str(enum2int(NumberSequenceType::DataAreaFiscalCalender)) +
            ' WHEN ' + _dataArea + " <> '' THEN " + int2Str(enum2int(NumberSequenceType::DataArea)) +
            ' WHEN ' + _legalEntity + " <> 0 AND " + _fiscalCalenderPeriod + " <> 0 THEN " + int2Str(enum2int(NumberSequenceType::LegalEntityFiscalCalender)) +
            ' WHEN ' + _legalEntity + " <> 0 THEN " + int2Str(enum2int(NumberSequenceType::LegalEntity)) +
            ' WHEN ' + _operatingUnit + " <> 0 THEN " + int2Str(enum2int(NumberSequenceType::OperatingUnit)) +
            ' WHEN ' + _operatingUnitType + " <> 0 THEN " + int2Str(enum2int(NumberSequenceType::OperatingUnitType)) +
            " ELSE '' " +
            ' END ';
        return testStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateNumberSequenceScopeValuesSQL</Name>
				<Source><![CDATA[
    public static str generateNumberSequenceScopeValuesSQL(str _entityName, str _scopeTable)
    {
        //CASE
        //WHEN T2.DATAAREA <> '' AND T2.FISCALCALENDARPERIOD <> 0 THEN T2.DATAAREA + '-' + (SELECT CALENDAR + '-' + FISCALYEAR + '-' + NAME FROM FiscalPERIODENTITY WHERE RECID = T2.FISCALCALENDARPERIOD)
        //WHEN T2.DATAAREA <> '' THEN T2.DATAAREA
        //WHEN T2.LEGALENTITY <> 0 AND T2.FISCALCALENDARPERIOD <> 0 THEN (SELECT DATAAREA FROM DIRPARTYTABLE WHERE INSTANCERELATIONTYPE IN (SELECT ID FROM TABLEIDTABLE WHERE NAME = 'COMPANYINFO') AND RECID = T2.LEGALENTITY) + '-' + (SELECT CALENDAR + '-' + FISCALYEAR + '-' + NAME FROM FiscalPERIODENTITY T3 WHERE T3.RECID = T2.FISCALCALENDARPERIOD)
        //WHEN T2.LEGALENTITY <> 0 THEN (SELECT DATAAREA FROM DIRPARTYTABLE WHERE INSTANCERELATIONTYPE IN (SELECT ID FROM TABLEIDTABLE WHERE NAME = 'COMPANYINFO') AND RECID = T2.LEGALENTITY)
        //WHEN T2.OPERATINGUNIT <> 0 THEN (SELECT NAME + '-' + OMOPERATINGUNITNUMBER + '-' + CONVERT(NVARCHAR, OMOPERATINGUNITTYPE) FROM DIRPARTYTABLE WHERE INSTANCERELATIONTYPE IN (SELECT ID FROM TABLEIDTABLE WHERE NAME = 'OMOPERATINGUNIT') AND RECID = T2.OPERATINGUNIT)
        //WHEN T2.OPERATINGUNITTYPE <> 0 THEN CONVERT(nvarchar,T2.OPERATINGUNITTYPE)
        //ELSE '' END

        str _dataArea = SysComputedColumn::returnField(_entityName,_scopeTable,fieldstr(NumberSequenceScope,DataArea));
        str _fiscalCalenderPeriod = SysComputedColumn::returnField(_entityName,_scopeTable,fieldstr(NumberSequenceScope,FiscalCalendarPeriod));
        str _legalEntity = SysComputedColumn::returnField(_entityName,_scopeTable,fieldstr(NumberSequenceScope, LegalEntity));
        str _operatingUnit = SysComputedColumn::returnField(_entityName,_scopeTable,fieldstr(NumberSequenceScope,OperatingUnit));
        str _operatingUnitType = SysComputedColumn::returnField(_entityName,_scopeTable,fieldstr(NumberSequenceScope,OperatingUnitType));

        str separator = "'-'";

        str operatingUnitTypeCase = ' CASE ' +  _operatingUnitType;
        MapEnumerator operatingUnitTypes = OMOperatingUnitEntityHelper::getOperatingUnitTypeStrMap().getEnumerator();

        while (operatingUnitTypes.moveNext())
        {
            // The OperatingUnitTypeStrMap contains the operating unit type entity value string to enum value mapping.
            // Add each set to the case statement, such as WHEN 1 THEN 'Department';
            operatingUnitTypeCase += "  WHEN " + int2Str(enum2int(operatingUnitTypes.currentValue())) + " THEN '" + operatingUnitTypes.currentKey() + "' ";
        }

        operatingUnitTypeCase += " ELSE '' ";
        operatingUnitTypeCase += ' END ';
        
        str testStr =
        ' CASE ' +
        ' WHEN ' + _dataArea + " <> '' AND " + _fiscalCalenderPeriod + " <> 0 THEN " + _dataArea + " + " + separator + " + " +
                ' (SELECT CALENDAR + ' + separator + ' + FISCALYEAR + ' + separator + ' + PERIODNAME FROM ' + tableStr(FISCALPERIODENTITY) + ' WHERE RECID = ' + _fiscalCalenderPeriod + ')' +
        ' WHEN ' + _dataArea + "<> '' THEN " + _dataArea +
        ' WHEN ' + _legalEntity + ' <> 0 AND ' + _fiscalCalenderPeriod +
                " <> 0 THEN (SELECT DATAAREA FROM DIRPARTYTABLE WHERE INSTANCERELATIONTYPE IN (SELECT ID FROM TABLEIDTABLE WHERE NAME = 'COMPANYINFO') AND RECID = " + _legalEntity + ') ' +
                " + " + separator + " + " + "(SELECT CALENDAR + " + separator + ' + FISCALYEAR + ' + separator + ' + PERIODNAME FROM ' + tableStr(FISCALPERIODENTITY) + ' T3 WHERE T3.RECID = ' + _fiscalCalenderPeriod + ')' +
        ' WHEN ' + _legalEntity + " <> 0 THEN (SELECT DATAAREA FROM DIRPARTYTABLE WHERE INSTANCERELATIONTYPE IN (SELECT ID FROM TABLEIDTABLE WHERE NAME = 'COMPANYINFO') AND RECID = " + _legalEntity + ')' +
        ' WHEN ' + _operatingUnit + " <> 0 THEN (SELECT NAME + " + separator + " + OMOPERATINGUNITNUMBER + " + separator +
                " + CONVERT(NVARCHAR, OMOPERATINGUNITTYPE) FROM DIRPARTYTABLE WHERE INSTANCERELATIONTYPE IN (SELECT ID FROM TABLEIDTABLE WHERE NAME = 'OMOPERATINGUNIT') AND RECID = " + _operatingUnit + ')' +
        ' WHEN ' + _operatingUnitType + ' <> 0 THEN ' +
        operatingUnitTypeCase +
        " ELSE '' " +
        ' END ';

        return testStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateScope</Name>
				<Source><![CDATA[
    public static NumberSequenceScope findOrCreateScope(NumberSequenceType _scopeType, str _scopeValue)
    {
        NumberSequenceScope scopeKey = PIPNumberSequenceHelper::buildScopeKey(_scopeType, _scopeValue);
        NumberSequenceScope scope;

        select firstonly scope
            where scope.DataArea == scopeKey.DataArea
                && scope.FiscalCalendarPeriod == scopeKey.FiscalCalendarPeriod
                && scope.LegalEntity == scopeKey.LegalEntity
                && scope.OperatingUnit == scopeKey.OperatingUnit
                && scope.OperatingUnitType == scopeKey.OperatingUnitType;

        if (!scope)
        {
            scope = scopeKey;
        }

        return scope;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildScopeKey</Name>
				<Source><![CDATA[
    private static NumberSequenceScope buildScopeKey(NumberSequenceType _scopeType, str _scopeValue)
    {
        str seperator = '-';
        NumberSequenceScope numberSequenceScope;

        if(_scopeType == NumberSequenceType::DataArea)
        {
            numberSequenceScope.DataArea = _scopeValue;
        }
        else if(_scopeType == NumberSequenceType::DataAreaFiscalCalender)
        {
            FiscalPeriodEntity _ledgerEntity;
            str calenderID, Name, yearName;
            int previosPosition = 1;
            int currentPosition = strFind(_scopeValue, seperator, previosPosition, strLen(_scopeValue));
            numberSequenceScope.DataArea = subStr(_scopeValue, previosPosition, currentPosition-1);

            previosPosition = currentPosition + 1;
            currentPosition = strFind(_scopeValue, seperator, previosPosition, strLen(_scopeValue));
            calenderID = subStr(_scopeValue, previosPosition, currentPosition-previosPosition);

            previosPosition = currentPosition + 1;
            currentPosition = strFind(_scopeValue, seperator, previosPosition, strLen(_scopeValue));
            yearName = subStr(_scopeValue, previosPosition, currentPosition-previosPosition);

            previosPosition = currentPosition + 1;
            Name = subStr(_scopeValue, previosPosition, strLen(_scopeValue)+1-previosPosition);

            select firstonly recid from _ledgerEntity where _ledgerEntity.Calendar == calenderID && _ledgerEntity.FiscalYear == yearName && _ledgerEntity.PERIODNAME == Name;
            numberSequenceScope.FiscalCalendarPeriod = _ledgerEntity.RecId;

            if (!numberSequenceScope.FiscalCalendarPeriod)
            {
                throw error(strFmt("@SourceDocumentation:NumberSequenceTableEntityMissingFiscalCalendar", _scopeValue));
            }
        }
        else if(_scopeType == NumberSequenceType::LegalEntity)
        {
            CompanyInfo _company;
            select firstonly RecId from _company where _company.DataArea == _scopeValue;
            numberSequenceScope.LegalEntity = _company.RecId;

            if (!numberSequenceScope.LegalEntity)
            {
                throw error(strFmt("@SourceDocumentation:NumberSequenceTableEntityMissingLegalEntity", _scopeValue));
            }
        }
        else if(_scopeType == NumberSequenceType::LegalEntityFiscalCalender)
        {
            CompanyInfo _company;
            FiscalPeriodEntity _ledgerEntity;
            str calenderID, Name, yearName, dataArea;
            int previosPosition = 1;
            int currentPosition = strFind(_scopeValue, seperator, previosPosition, strLen(_scopeValue));
            dataArea = subStr(_scopeValue, previosPosition, currentPosition-1);

            previosPosition = currentPosition + 1;
            currentPosition = strFind(_scopeValue, seperator, previosPosition, strLen(_scopeValue));
            calenderID = subStr(_scopeValue, previosPosition, currentPosition-previosPosition);

            previosPosition = currentPosition + 1;
            currentPosition = strFind(_scopeValue, seperator, previosPosition, strLen(_scopeValue));
            yearName = subStr(_scopeValue, previosPosition, currentPosition-previosPosition);

            previosPosition = currentPosition + 1;
            Name = subStr(_scopeValue, previosPosition, strLen(_scopeValue)+1-previosPosition);

            select firstonly RecId from _company where _company.DataArea == dataArea;
            numberSequenceScope.LegalEntity = _company.RecId;

            if (!numberSequenceScope.LegalEntity)
            {
                throw error(strFmt("@SourceDocumentation:NumberSequenceTableEntityMissingLegalEntity", _scopeValue));
            }

            select firstonly recid from _ledgerEntity where _ledgerEntity.CALENDAR == calenderID && _ledgerEntity.FiscalYear == yearName && _ledgerEntity.PERIODNAME == Name;
            numberSequenceScope.FiscalCalendarPeriod = _ledgerEntity.RecId;

            if (!numberSequenceScope.FiscalCalendarPeriod)
            {
                throw error(strFmt("@SourceDocumentation:NumberSequenceTableEntityMissingFiscalCalendar", _scopeValue));
            }
        }
        else if(_scopeType == NumberSequenceType::OperatingUnit)
        {
            OMOperatingUnit _operatingUnit;
            str name, unitNumber, unitType;
            int previosPosition = 1;
            int currentPosition = strFind(_scopeValue, seperator, previosPosition, strLen(_scopeValue));
            name = subStr(_scopeValue, previosPosition, currentPosition-1);

            previosPosition = currentPosition + 1;
            currentPosition = strFind(_scopeValue, seperator, previosPosition, strLen(_scopeValue));
            unitNumber = subStr(_scopeValue, previosPosition, currentPosition-previosPosition);

            previosPosition = currentPosition + 1;
            unitType = subStr(_scopeValue, previosPosition, strLen(_scopeValue)+1-previosPosition);

            select firstonly RecId from _operatingUnit where _operatingUnit.Name == name && _operatingUnit.OMOperatingUnitNumber == unitNumber && _operatingUnit.OMOperatingUnitType == str2Int(unitType);
            numberSequenceScope.OperatingUnit = _operatingUnit.RecId;

            if (!numberSequenceScope.OperatingUnit)
            {
                throw error(strFmt("@SourceDocumentation:NumberSequenceTableEntityMissingOperatingUnit", _scopeValue));
            }
        }
        else if(_scopeType == NumberSequenceType::OperatingUnitType)
        {
            OMOperatingUnitType operatingUnitType = OMOperatingUnitEntityHelper::getOperatingUnitTypeForTypeStr(_scopeValue);

            if (operatingUnitType == OMOperatingUnitType::None)
            {
                throw error(strFmt("@SourceDocumentation:NumberSequenceTableEntityInvalidOperatingUnitType", _scopeValue));
            }
            else
            {
                numberSequenceScope.OperatingUnitType = operatingUnitType;
            }
        }

        return numberSequenceScope;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
