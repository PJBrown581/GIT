<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PIPInventTestGroupCopier</Name>
	<SourceCode>
		<Declaration><![CDATA[
class PIPInventTestGroupCopier extends RunBase
{
    InventTestGroup     destinationGroup;
    InventTestGroupId   sourceGroupId;
    boolean             overwrite;

    DialogField         groupIdField;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        Dialog  dialog = super();
    
        dialog.caption("@PIP:CopyFromGroup");
    
        dialog.addText("@PIP:SelectTestGroupToCopy");
    
        groupIdField = dialog.addField(extendedTypeStr(InventTestGroupId));
    
        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;
    
        ret = super();
    
        if (ret)
        {
            sourceGroupId = groupIdField.value();
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDestinationGroup</Name>
				<Source><![CDATA[
    public InventTestGroup parmDestinationGroup(InventTestGroup _destinationGroup = destinationGroup)
    {
        destinationGroup = _destinationGroup;
    
        return destinationGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOverwrite</Name>
				<Source><![CDATA[
    public boolean parmOverwrite(boolean _overwrite = overwrite)
    {
        overwrite = _overwrite;
    
        return overwrite;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceGroupId</Name>
				<Source><![CDATA[
    public InventTestGroupId parmSourceGroupId(InventTestGroupId _sourceGroupId = sourceGroupId)
    {
        sourceGroupId = _sourceGroupId;
    
        return sourceGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        InventTestGroup  sourceGroup;
        InventTestGroupMember  sourceGroupMember;
        InventTestGroupMember  destGroupMember;
    
        if (!this.validate())
        {
            return;
        }
    
        ttsBegin;
    
        sourceGroup = InventTestGroup::find(sourceGroupId);
    
        if (overwrite)
        {
            destGroupMember.skipDataMethods(true);

            delete_from destGroupMember
                where destGroupMember.TestGroupId == destinationGroup.TestGroupId;

            destGroupMember.skipDataMethods(false);
        }
        
        destinationGroup.selectForUpdate(true);
        destinationGroup.ItemSamplingId = sourceGroup.ItemSamplingId;
        destinationGroup.TestDestructive = sourceGroup.TestDestructive;
        destinationGroup.PdsFailedQualityDispositionCode = sourceGroup.PdsFailedQualityDispositionCode;
        destinationGroup.PdsPassQualityDispositionCode = sourceGroup.PdsPassQualityDispositionCode;
        destinationGroup.UpdateInventStatus = sourceGroup.UpdateInventStatus;
        destinationGroup.FailedInventStatusId = sourceGroup.FailedInventStatusId;
        destinationGroup.PassedInventStatusId = sourceGroup.PassedInventStatusId;
        destinationGroup.update();

        while select sourceGroupMember
            where sourceGroupMember.TestGroupId == sourceGroupId
        {
            destGroupMember.clear();
            destGroupMember.data(sourceGroupMember);
    
            destGroupMember.TestGroupId = destinationGroup.TestGroupId;
            destGroupMember.insert();
            this.additionalCopies(sourceGroupMember, destGroupMember);
        }
    
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>additionalCopies</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies additional table records when a test group is copied when extended.
    /// </summary>
    /// <param name = "_souceGroupMember">The source test group member for the copy.</param>
    /// <param name = "_destGroupMember">The destination test group member for the copy.</param>
    /// <remarks>The base implementation does nothing.</remarks>
    protected void additionalCopies(InventTestGroupMember _souceGroupMember, InventTestGroupMember _destGroupMember)
    {

    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that the required parameters have been set.
    /// </summary>
    /// <param name="calledFrom">
    ///    The object that called this class; optional.
    /// </param>
    /// <returns>
    ///    true if the requires parameters have been set; otherwise, false.
    /// </returns>
    public boolean validate(Object calledFrom = null)
    {
        boolean ret = true;
    
        if (!InventTestGroup::exist(sourceGroupId))
        {
            ret = checkFailed(strFmt("@PIP:InvalidTestGroupId", sourceGroupId));
        }
    
        if (ret && !destinationGroup.TestGroupId && !destinationGroup.Description)
        {
            ret = checkFailed("@PIP:TestGroupMustHaveIdDescrip");
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PIPInventTestGroupCopier construct()
    {
        return new PIPInventTestGroupCopier();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        PIPInventTestGroupCopier copier = PIPInventTestGroupCopier::construct();
    
        if (_args.dataset() != tableNum(InventTestGroup))
        {
            throw error(error::missingRecord(tableStr(InventTestGroup)));
        }
    
        copier.parmdestinationGroup(_args.record());
    
        if (InventTestGroup::exist(copier.parmdestinationGroup().TestGroupId)
            && InventTestGroup::groupHasMembers(copier.parmdestinationGroup().TestGroupId))
        {
            if (Box::yesNo("@PIP:TestGroupOverwrite", DialogButton::Yes) != DialogButton::Yes)
            {
                return;
            }
    
            copier.parmOverwrite(true);
        }
    
        if (copier.prompt())
        {
            copier.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>