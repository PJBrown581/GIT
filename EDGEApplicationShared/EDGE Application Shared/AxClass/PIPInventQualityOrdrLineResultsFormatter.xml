<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PIPInventQualityOrdrLineResultsFormatter</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.Globalization;

public class PIPInventQualityOrdrLineResultsFormatter
{
    private CultureInfo cultureInfoCached; // Use cultureInfo() to access
    private int decimalPrecision;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>realToValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts a real number to test result string value using preferred locale of the user.
    /// </summary>
    /// <param name = "_value">Real number to convert.</param>
    /// <returns>Test result string encoded with preferred locale of the user.</returns>
    public PIPInventQualityOrderLineResultString realToValue(real _value)
    {
        new InteropPermission(InteropKind::ClrInterop).assert();

        // Set decimal precision according to table settings
        NumberFormatInfo tmpNumberFormat = this.numberFormat().clone();
        tmpNumberFormat.NumberDecimalDigits = decimalPrecision;

        System.Decimal decimal = _value;

        return decimal.ToString('f', tmpNumberFormat);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDecimalPrecision</Name>
				<Source><![CDATA[
    public int parmDecimalPrecision(int _decimalPrecision = decimalPrecision)
    {
        decimalPrecision = _decimalPrecision;

        return decimalPrecision;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resultRealDecimals</Name>
				<Source><![CDATA[
    private static int resultRealDecimals()
    {
        return new SysDictType(extendedTypeName2Id(extendedTypeStr(InventQualityOrderLineResultReal))).noOfDecimals();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValidReal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the test result string value represents a valid real number
    /// according to the preferred locale of the user.
    /// </summary>
    /// <param name = "_attributeValue">Test result string value to validate.</param>
    /// <returns>true if the test result string value is valid; otherwise, false.</returns>
    public boolean isValidReal(PIPInventQualityOrderLineResultString _stringValue)
    {
        container ret = this.tryParseRealAttribute(_stringValue);

        return conPeek(ret, 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>toReal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts a test result string encoded in preferred locale of the user
    /// into a real number.
    /// </summary>
    /// <param name = "_attributeValue">Test result string value to convert.</param>
    /// <returns>Test result string value converted to a real number.</returns>
    /// <exception>Exception is thrown if the test result string value doesn't represent a real number.</exception>
    public real toReal(PIPInventQualityOrderLineResultString _stringValue)
    {
        boolean valid;
        real result;

        [valid, result] = this.tryParseRealAttribute(_stringValue);
        if (!valid)
        {
            throw error(strfmt("@PRO2249", _stringValue));
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tryParseRealAttribute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Tries to parse a test result string value encoded with the preferred locale of the user
    /// to a real number.
    /// </summary>
    /// <param name = "_attributeValue">Test result string  value to parse.</param>
    /// <returns>Container in the form [valid, value]. valid is set to true if the conversion was successful or false otherwise.</returns>
    private container tryParseRealAttribute(PIPInventQualityOrderLineResultString _stringValue)
    {
        new InteropPermission(InteropKind::ClrInterop).assert();

        const NumberStyles realNumberStyles =
            NumberStyles::AllowDecimalPoint
            | NumberStyles::AllowExponent
            | NumberStyles::AllowLeadingSign
            | NumberStyles::AllowLeadingWhite
            | NumberStyles::AllowThousands
            | NumberStyles::AllowTrailingWhite;

        System.Decimal decimal;
        boolean valid = System.Decimal::TryParse(
                            _stringValue,
                            realNumberStyles,
                            this.numberFormat(),
                            byref decimal);

        return [valid, decimal];
    }

]]></Source>
			</Method>
			<Method>
				<Name>cultureInfo</Name>
				<Source><![CDATA[
    private CultureInfo cultureInfo()
    {
        if (cultureInfoCached == null)
        {
            str locale = this.currentUserPreferredLocale();

            new InteropPermission(InteropKind::ClrInterop).assert();
            // We need to use a two parameter version because the wrong overload is chosen
            // when only one parameter is supplied
            cultureInfoCached = CultureInfo::GetCultureInfo(locale, locale);
        }

        return cultureInfoCached;
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberFormat</Name>
				<Source><![CDATA[
    private NumberFormatInfo numberFormat()
    {
        return this.cultureInfo().get_NumberFormat();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        decimalPrecision = PIPInventQualityOrdrLineResultsFormatter::resultRealDecimals();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PIPInventQualityOrdrLineResultsFormatter construct()
    {
        return new PIPInventQualityOrdrLineResultsFormatter();
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentUserPreferredLocale</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the preferred locale for the current user.
    /// </summary>
    /// <returns>Preferred locale for the current user.</returns>
    private PreferredLocale currentUserPreferredLocale()
    {
        UserInfo userInfo;

        select Language, PreferredLocale from userInfo
            where userInfo.Id == curUserId();

        return userInfo.PreferredLocale != ''   ?
                userInfo.PreferredLocale        :
                userInfo.Language;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>