<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PIPSIGProdJournalPostProcedure</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>PIPSIGProdJournalPostProcedure</c> class is an abstract base class for the built-in production
///    journal posting based signature providers.
/// </summary>
abstract class PIPSIGProdJournalPostProcedure extends PIPSIGJournalPostProcedure
{
    #define.CacheKey('prodPostProcEnabled')
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getAuditFieldList</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets a list of signature controlled fields for this procedure.
    /// </summary>
    /// <returns>
    ///     The list of signature controlled fields required for this procedure.
    /// </returns>
    public container getAuditFieldList()
    {
        return [
                [DatabaseLogType::Update, tablenum(ProdJournalTable), fieldNum(ProdJournalTable, PIPActivateSignature)]
               ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProdJournal</Name>
				<Source><![CDATA[
    public ProdJournalTable parmProdJournal(ProdJournalTable _prodJournalTable = null)
    {
        return prmisDefault(_prodJournalTable) ? this.parmJournalTable() : this.parmJournalTable(_prodJournalTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pipOnActivationChanged</Name>
				<Source><![CDATA[
    public void pipOnActivationChanged()
    {
        super();
    
        appl.globalCache().remove(classStr(PIPSIGProdJournalPostProcedure), #CacheKey);
        infolog.globalCache().remove(classStr(PIPSIGProdJournalPostProcedure), #CacheKey);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupAllowed</Name>
				<Source><![CDATA[
    public boolean setupAllowed()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateJournalTableFields</Name>
				<Source><![CDATA[
    public void updateJournalTableFields(JournalTableMap _journalTable)
    {
        ProdJournalTable prodJournalTable = _journalTable;
    
        super(_journalTable);
    
        prodJournalTable.PIPActivateSignature = !prodJournalTable.PIPActivateSignature;
    }

]]></Source>
			</Method>
			<Method>
				<Name>anyProdJournalPostProceduresEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines if any production journal posting based signature providers are enabled.
    /// </summary>
    /// <returns>
    ///     true if any production journal posting based signature providers are enabled; otherwise, false.
    /// </returns>
    public static boolean anyProdJournalPostProceduresEnabled()
    {
        DictClass                       baseClass;
        ListEnumerator                  derivative;
        PIPSIGProdJournalPostProcedure  prodJournalPostProcedure;
        boolean                         enabled;
        SysGlobalCache                  cache = infolog.globalCache();
    
        if (!isConfigurationKeyEnabled(configurationKeyNum(SIG)))
        {
            return false;
        }
    
        if (cache.isSet(classStr(PIPSIGProdJournalPostProcedure), #CacheKey))
        {
            enabled = cache.get(classStr(PIPSIGProdJournalPostProcedure), #CacheKey);
        }
        else
        {
            baseClass = new DictClass(classNum(PIPSIGProdJournalPostProcedure));
            derivative = baseClass.extendedBy().getEnumerator();
            while (!enabled && derivative.moveNext())
            {
                prodJournalPostProcedure    = new DictClass(derivative.current()).makeObject();
                enabled                     = prodJournalPostProcedure.signatureRequired();
            }
    
            cache.set(classStr(PIPSIGProdJournalPostProcedure), #CacheKey, enabled);
        }
    
        return enabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>OnDetermineSubJournalType</Name>
				<Source><![CDATA[
    static delegate void OnDetermineSubJournalType(ProdJournalTable _prodJournalTable, EventHandlerResult _result) { }

]]></Source>
			</Method>
			<Method>
				<Name>newProdJournal</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates a new instance of the <c>PIPSIGProdJournalPostProcedure</c> class given a production journal buffer.
    /// </summary>
    /// <param name="_prodJournalTable">
    ///     A populated production journal buffer.
    /// </param>
    /// <returns>
    ///     A new instance of the <c>PIPSIGProdJournalPostProcedure</c> class or a derived class as appropriate.
    /// </returns>
    public static PIPSIGProdJournalPostProcedure newProdJournal(ProdJournalTable _prodJournalTable)
    {
        PIPSIGProdJournalPostProcedure prodJournalPostProcedure;

        EventHandlerResult subTypeResult = new EventHandlerResult();
        PIPSIGProdJournalPostProcedure::OnDetermineSubJournalType(_prodJournalTable, subTypeResult);
    
        prodJournalPostProcedure = SysExtensionAppClassFactory::getClassFromSysAttribute(classStr(PIPSIGProdJournalPostProcedure),
                                    new PIPSigProdJournalPostProcedureAttribute(_prodJournalTable.JournalType, subTypeResult.hasResult() ? subTypeResult.result() : ''));
    
        if (!prodJournalPostProcedure)
        {
            prodJournalPostProcedure = PIPSIGProdNoneJournalPostProcedure::construct();
        }
    
        prodJournalPostProcedure.parmProdJournal(_prodJournalTable);
    
        return prodJournalPostProcedure;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>