<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PIPJournalCheckPost_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(JournalCheckPost))]
public final class PIPJournalCheckPost_Extension
{
    private PIPSIGJournalPostProcedure journalPostProcedure;
    private PIPJournalCheckPostSub journalPostSub;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
        journalPostSub = PIPPluginFactory::RelatedInstance(classStr(PIPJournalCheckPostSub), this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPIPJournalPostProcedure</Name>
				<Source><![CDATA[
    public PIPSIGJournalPostProcedure parmPIPJournalPostProcedure(PIPSIGJournalPostProcedure _journalPostProcedure = journalPostProcedure)
    {
        journalPostProcedure = _journalPostProcedure;
    
        return journalPostProcedure;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateJournalTablePosted</Name>
				<Source><![CDATA[
    protected void updateJournalTablePosted(JournalTableMap _journalTable)
    {
        // Copied updates from the base method which we really want in the signed document; the date/time may differ by 1 second depending on timing
        _journalTable.Posted             = NoYes::Yes;
        _journalTable.PostedDateTime     = DateTimeUtil::getSystemDateTime();
        _journalTable.PostedUserId       = curUserId();

        this.journalTablePosted(_journalTable);

        next updateJournalTablePosted(_journalTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalTablePosted</Name>
				<Source><![CDATA[
    private void journalTablePosted(JournalTableMap _journalTable)
    {
        if (isConfigurationKeyEnabled(configurationKeyNum(SIG) && journalPostSub.needsSignature()))
        {
            if (journalPostProcedure)
            {
                journalPostProcedure.updateJournalTableFields(_journalTable);
    
                PIPRecordSigningList journalLines = journalPostProcedure.selectLinesForSignature();
    
                journalPostProcedure.captureDelayedSignature(_journalTable, journalLines);
    
                journalLines.update();
            }
            else
            {
                // We must still check if a signature is required for this journal, if so, update signature triggering field(s) to ensure there is an audit error
                PIPSIGJournalPostProcedure localPostProcedure = journalPostSub.pipPostingProcedure(_journalTable);
    
                if (localPostProcedure && localPostProcedure.signatureRequired())
                {
                    localPostProcedure.updateJournalTableFields(_journalTable);
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>