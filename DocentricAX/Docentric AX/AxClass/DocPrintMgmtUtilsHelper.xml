<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocPrintMgmtUtilsHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Helper class used for Print management utilities.
/// </summary>
public class DocPrintMgmtUtilsHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getNodeInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the node-specific information (transaction record, node-specific ID, menu item
    /// that opens the related transaction record, etc.) based on the given reference TableId and RecId.
    /// </summary>
    /// <param name = "_refTableId">RefTableId reference TableId. It matches the values from the PrintMgmtNodeType enum.</param>
    /// <param name = "_refRecId">RefRecId reference RecId in the referenced TableId.</param>
    /// <param name = "_dataAreaId">Data area Id</param>
    /// <returns>DocPrintMgmtNodeInfo object that contains the node-specific information.</returns>
    public static DocPrintMgmtNodeInfo getNodeInfo(RefTableId _refTableId, RefRecId _refRecId, DataAreaId _dataAreaId)
    {
        DocPrintMgmtNodeInfo nodeInfo = new DocPrintMgmtNodeInfo();
        nodeInfo.parmIsValid(true);  

        if (!_refTableId || !_refRecId)
        {
            nodeInfo.parmIsValid(false);
            return nodeInfo;
        }
              
        str nodeSpecificId;
        Common referencedRecord;
        str menuItemName;
        PrintMgmtReportFormatCountryRegionId countryRegionId;
           
        changecompany(_dataAreaId)
        {
            switch (_refTableId)
            {
                /*
                * ---------------------------------------------------------------------
                * Account nodes
                * ---------------------------------------------------------------------
                */
                case tableNum(CustTable):
                    CustTable custTable = CustTable::findRecId(_refRecId);
                    referencedRecord = custTable;
                    nodeSpecificId = custTable.AccountNum;
                    menuItemName = menuItemDisplayStr(CustTable);
                    countryRegionId = custTable.postalAddress().CountryRegionId;
                    break;
                    
                case tableNum(VendTable):
                    VendTable vendTable = VendTable::findRecId(_refRecId);
                    referencedRecord = vendTable;
                    nodeSpecificId = vendTable.AccountNum;
                    menuItemName = menuItemDisplayStr(VendTable);
                    countryRegionId = vendTable.postalAddress().CountryRegionId;
                    break;
                
                /*
                * ---------------------------------------------------------------------
                * Transaction nodes
                * ---------------------------------------------------------------------
                */
                case tableNum(SalesTable):
                    SalesTable salesTable = SalesTable::findRecId(_refRecId);
                    referencedRecord = salesTable;
                    nodeSpecificId = salesTable.SalesId;
                    menuItemName = menuItemDisplayStr(SalesTable);
                    countryRegionId = salesTable.getCountryRegionIdByDocumentStatus();
                    break;

                case tableNum(SalesQuotationTable):
                    SalesQuotationTable salesQuotationTable = SalesQuotationTable::findRec(_refRecId);
                    referencedRecord = salesQuotationTable;
                    nodeSpecificId = salesQuotationTable.QuotationId;
                    menuItemName = menuItemDisplayStr(SalesQuotationTable);
                    countryRegionId = LogisticsPostalAddress::findRecId(salesQuotationTable.DeliveryPostalAddress).CountryRegionId;                    
                    break;

                case tableNum(CustInvoiceTable):
                    CustInvoiceTable custInvoiceTable = CustInvoiceTable::findRecId(_refRecId);
                    referencedRecord = custInvoiceTable;
                    nodeSpecificId = custInvoiceTable.InvoiceId != '' ? custInvoiceTable.InvoiceId : custInvoiceTable.InvoiceAccount;
                    menuItemName = menuItemDisplayStr(CustFreeInvoice);
                    countryRegionId = LogisticsPostalAddress::findRecId(custInvoiceTable.PostalAddress).CountryRegionId;
                    break;
                    
                case tableNum(SalesAgreementHeader):
                    SalesAgreementHeader salesAgreementHeader = SalesAgreementHeader::find(_refRecId);
                    referencedRecord = salesAgreementHeader;
                    nodeSpecificId = salesAgreementHeader.CustAccount;
                    menuItemName = menuItemDisplayStr(SalesAgreement);
                    break;
                    
                case tableNum(PurchTable):
                    PurchTable purchTable = PurchTable::findRecId(_refRecId);
                    referencedRecord = purchTable;
                    nodeSpecificId = purchTable.PurchId;
                    menuItemName = menuItemDisplayStr(PurchTable);
                    countryRegionId = LogisticsPostalAddress::findRecId(purchTable.DeliveryPostalAddress).CountryRegionId;
                    break;
                    
                case tableNum(PurchRFQTable):
                    PurchRFQTable purchRFQTable = PurchRFQTable::findRecId(_refRecId);
                    referencedRecord = purchRFQTable;
                    nodeSpecificId = purchRFQTable.RFQId;
                    menuItemName = menuItemDisplayStr(PurchRFQCaseTable);
                    countryRegionId = LogisticsPostalAddress::findRecId(purchRFQTable.DeliveryPostalAddress).CountryRegionId;
                    break;
                    
                case tableNum(PurchRFQVendLink):
                    PurchRFQVendLink purchRFQVendLink;
                    select firstonly purchRFQVendLink where purchRFQVendLink.RecId == _refRecId;
                    referencedRecord = purchRFQVendLink;
                    nodeSpecificId = purchRFQVendLink.RFQCaseId;
                    menuItemName = menuItemDisplayStr(PurchRFQCaseTable);
                    break;
                    
                case tableNum(PurchAgreementHeader):
                    PurchAgreementHeader purchAgreementHeader = PurchAgreementHeader::find(_refRecId);
                    referencedRecord = purchAgreementHeader;
                    nodeSpecificId = purchAgreementHeader.VendAccount;
                    menuItemName = menuItemDisplayStr(PurchAgreement);
                    break;
                    
                case tableNum(ProjInvoiceTable):
                    ProjInvoiceTable projInvoiceTable;
                    select firstonly projInvoiceTable where projInvoiceTable.RecId == _refRecId;
                    referencedRecord = projInvoiceTable;
                    nodeSpecificId = projInvoiceTable.ProjInvoiceProjId;
                    menuItemName = menuItemDisplayStr(ProjInvoiceTable);
                    break;
                    
                case tableNum(ProjProposalJour):
                    ProjProposalJour projProposalJour = ProjProposalJour::findRecid(_refRecId);
                    referencedRecord = projProposalJour;
                    nodeSpecificId = projProposalJour.ProposalId;
                    menuItemName = menuItemDisplayStr(ProjInvoiceProposalDetail);
                    break;

                case tableNum(ProjTable):
                    ProjTable projTable = ProjTable::findRecId(_refRecId);
                    referencedRecord = projTable;
                    nodeSpecificId = projTable.ProjId;
                    menuItemName = menuItemDisplayStr(ProjTable);
                    break;
                    
                case tableNum(InventTransferTable):
                    InventTransferTable inventTransferTable;
                    select firstonly inventTransferTable where inventTransferTable.RecId == _refRecId;
                    referencedRecord = inventTransferTable;
                    // menuItemName?
                    nodeSpecificId = inventTransferTable.TransferId;
                    break;
                    
                case tableNum(InventTable):
                    InventTable inventTable = InventTable::findRecId(_refRecId);
                    referencedRecord = inventTable;
                    // menuItemName?
                    nodeSpecificId = inventTable.ItemId;
                    break;
                    
                case tableNum(BankAccountTable):
                    BankAccountTable bankAccountTable;
                    select firstonly bankAccountTable where bankAccountTable.RecId == _refRecId;
                    referencedRecord = bankAccountTable;
                    // menuItemName?
                    nodeSpecificId = bankAccountTable.AccountID;
                    break;

                default:
                    // Skipped:
                    //   - module-level node types: Sales, Purch, Ledger, Bank,
                    //     SalesAdvanceInvoice, PurchaseAdvanceInvoice, WHS, TMS
                    //   - few transaction-level node types: Ledger, ProjectQuotation,
                    //     Bank, SalesAdvanceInvoice, PurchaseAdvanceInvoice
                    nodeInfo.parmIsValid(false);
                    nodeSpecificId = strFmt('%1 (%2)',
                                                    tableId2Name(_refTableId),
                                                    _refRecId);
            }
        }
        
        nodeInfo.parmNodeSpecificId(nodeSpecificId);
        nodeInfo.parmReferencedRecord(referencedRecord);
        nodeInfo.parmMenuItemName(menuItemName);
        nodeInfo.parmCountryRegionId(countryRegionId);

        return nodeInfo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpackPrintDestinationSettings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populate the print destination related fields of the given DocPrintMgmtUtilsTmp record,
    /// based on the:
    ///   (a) SRSPrintDestinationSettings object, if provided as parameter, or 
    ///   (b) PrintJobSettings field in the DocPrintMgmtUtilsTmp record.
    /// </summary>
    /// <param name = "_tmpTable">DocPrintMgmtUtilsTmp record on which the print destination
    /// related fields should be populated.</param>
    /// <param name = "_pds">SRSPrintDestinationSettings (optional) object with print destination settings.
    /// If null, the PrintJobSettings field (container) on the given DocPrintMgmtUtilsTmp record will be
    /// unpacked and used for populating the print destination related fields.</param>
    public static void unpackPrintDestinationSettings(DocPrintMgmtUtilsTmp _tmpTable, SRSPrintDestinationSettings _pds = null)
    { 
        SRSPrintDestinationSettings pds;
       
                
       // *********************************************************************************
       // COMMON AND CONTROL FIELDS
       // *********************************************************************************        

        if (_pds == null)
        {
            // If unpacked settings object is not provided, unpack the settings (container) 
            // from the record and use them.
            pds = new SRSPrintDestinationSettings();
            pds.unpack(_tmpTable.PrintJobSettings);
            _tmpTable.RecordStatus = DocPrintMgmtUtilsRecordStatus::Clean;
        }
        else
        {
            // If unpacked settings object is provided, use it and also pack it into the container
            // and store that container in the record.
            pds = _pds;
            _tmpTable.PrintJobSettings = pds.pack();
            _tmpTable.RecordStatus = DocPrintMgmtUtilsRecordStatus::Dirty;
        }

        // When we unpack the given packed settings, the packed and unpacked settings become synchronized.
        _tmpTable.UnpackedSyncStatus = DocPrintMgmtUtilsUnpackedSyncStatus::Synced;
        
                
        // *********************************************************************************
        // PRINT DESTINATION
        // *********************************************************************************
        
        _tmpTable.PrintMediumType = pds.printMediumType(); // selected print destination
                
        // -------------------------------------------
        // Options
        // -------------------------------------------
        _tmpTable.DestSSRSSaveInPrintArchive = pds.parmPrintToArchive();
        _tmpTable.DestDocSaveInPrintArchive = pds.parmSrsPrintReportSettings_DC().parmSaveToArchive();
        _tmpTable.DestDocSaveToArchiveNote = pds.parmSrsPrintReportSettings_DC().parmSaveToArchiveNote();
        _tmpTable.DestDocSaveToArchiveDocuType = pds.parmSrsPrintReportSettings_DC().parmSaveToArchiveDocuTypeId();
        _tmpTable.DestDocPdfAConformanceLevel = pds.parmSrsPrintReportSettings_DC().parmPdfAConformanceLevel();
        _tmpTable.DestDocPreviewBeforePrint = pds.parmSrsPrintReportSettings_DC().parmPreviewBeforePrint();
                
        // -------------------------------------------
        // Template
        // -------------------------------------------
        _tmpTable.DestDocTemplateId = pds.parmSrsPrintReportSettings_DC().parmTemplateId();
        if (!_tmpTable.DestDocTemplateId)
        {
            _tmpTable.DestDocTemplateId = DocConstant::DefaultTemplatePlaceholder;
        }
                
        // -------------------------------------------
        // Docentric printer
        // -------------------------------------------
        DocPrintDestSettingsPrinter docPrinterSettings = pds.parmPrinterPrintDestSettings_DC();
                                              
        _tmpTable.DestDocPrinterName = docPrinterSettings.parmSelectedPrinterName();
        _tmpTable.DestDocPrinterOrientation = docPrinterSettings.parmOrientation();
        _tmpTable.DestDocPrinterDuplexPrinting = docPrinterSettings.parmDuplexPrinting();
        _tmpTable.DestDocPrinterCollated = docPrinterSettings.parmCollated();
        _tmpTable.DestDocPrinterNumberOfCopies = docPrinterSettings.parmNumberOfCopies();
        _tmpTable.DestDocPrinterPrintFromPage = docPrinterSettings.parmPrintFromPage();
        _tmpTable.DestDocPrinterPrintToPage = docPrinterSettings.parmPrintToPage();
        _tmpTable.DestDocPrinterPrintAllPages = docPrinterSettings.parmPrintAllPages();
        _tmpTable.DestDocPrinterPrintAsPdf = docPrinterSettings.parmPrintAsPdf();
        _tmpTable.DestDocPrinterPrintAsPdfFilename = docPrinterSettings.parmPrintAsPdfFilename();
                
        // -------------------------------------------
        // Docentric file
        // -------------------------------------------
        DocPrintDestSettingsFile docFileSettings = pds.parmFilePrintDestSettings_DC();
                        
        _tmpTable.DestDocFileName = docFileSettings.parmOutputFilename();
        _tmpTable.DestDocFileFormat = docFileSettings.parmOutputFileFormat();
        _tmpTable.DestDocFileFormatSrs = docFileSettings.parmOutputFileFormatSrs();
        _tmpTable.DestDocFileDownloadOutputFile = docFileSettings.parmSendOutputFileToUser();

        _tmpTable.DestDocFileUseDocIdInFilename = docFileSettings.parmUseDocIdInFilename();
        _tmpTable.DestDocFileUseTimestampAsSuffix = docFileSettings.parmUseTimestampAsSuffix();
        _tmpTable.DestDocFileUseGuidAsSuffix = docFileSettings.parmUseGuidAsSuffix();

        _tmpTable.DestDocFileSaveToAzureBlob = docFileSettings.parmSaveToAzureBlobStorage();
        _tmpTable.DestDocFileAzureBlobStorageAccountId = docFileSettings.parmAzureBsAccountId();
        _tmpTable.DestDocFileAzureBlobContainer = docFileSettings.parmAzureBsContainerName();
        _tmpTable.DestDocFileAzureBlobPath = docFileSettings.parmAzureBsBlobPath();
        _tmpTable.DestDocFileAzureBlobOverrideFileIfExists = docFileSettings.parmAzureBsOverrideFileIfExists();

        _tmpTable.DestDocFileSaveToAzureFiles = docFileSettings.parmSaveToAzureFiles();
        _tmpTable.DestDocFileAzureFilesAccountId = docFileSettings.parmAzureFilesAccountId();
        _tmpTable.DestDocFileAzureFilesFileShare = docFileSettings.parmAzureFilesFileShareName();
        _tmpTable.DestDocFileAzureFilesFolderPath = docFileSettings.parmAzureFilesDirectoryPath();
        _tmpTable.DestDocFileAzureFilesOverrideFileIfExists = docFileSettings.parmAzureFilesOverrideFileIfExists();
        _tmpTable.DestDocFileAzureFilesCreateNonExistingFolders = docFileSettings.parmAzureFilesCreateNonExistingFolders();

        _tmpTable.DestDocFileSaveToSharePoint = docFileSettings.parmSaveToSharePoint();
        _tmpTable.DestDocFileSharePointSiteUrl = docFileSettings.parmSharePointSiteUrl();
        _tmpTable.DestDocFileSharePointFolderPath = docFileSettings.parmSharePointFolderPath();
        _tmpTable.DestDocFileSharePointOverrideFileIfExists = docFileSettings.parmSharePointOverrideFileIfExists();
        _tmpTable.DestDocFileSharePointCreateNonExistingFolders = docFileSettings.parmSharePointCreateNonExistingFolders();

        _tmpTable.DestDocFileSaveToAttachments = docFileSettings.parmSaveToAttachments();
        _tmpTable.DestDocFileAttachmentDocumentType = docFileSettings.parmSaveToAttachmentsDocuTypeId();
        _tmpTable.DestDocFileSaveToAttachmentsRecordType = docFileSettings.parmSaveToAttachmentsRecordType();
        _tmpTable.DestDocFileSaveToAttachmentsOverridingMode = docFileSettings.parmSaveToAttachmentsOverridingMode();
        _tmpTable.DestDocFileSaveToAttachmentsDocumentRestriction = docFileSettings.parmSaveToAttachmentsDocumentRestriction();
        _tmpTable.DestDocFileSaveToAttachmentsCategoryId = docFileSettings.parmSaveToAttachmentsCategory();
        _tmpTable.DestDocFileSaveToAttachmentsTags = docFileSettings.parmSaveToAttachmentsTags();
        _tmpTable.DestDocFileSaveToAttachmentsLanguage = docFileSettings.parmSaveToAttachmentsLanguageMode();
        _tmpTable.DestDocFileSaveToAttachmentsActiveFrom = docFileSettings.parmSaveToAttachmentsActiveFrom();
        _tmpTable.DestDocFileSaveToAttachmentsActiveTo = docFileSettings.parmSaveToAttachmentsActiveTo();

        _tmpTable.DestDocFileSaveToFileSystem = docFileSettings.parmSaveToFileSystem();
        _tmpTable.DestDocFileSystemSharedFolder = docFileSettings.parmFileSystemFilePath();
        _tmpTable.DestDocFileSaveToFileSystemOverrideFileIfExists = docFileSettings.parmFileSystemOverrideFileIfExists();
                
        // -------------------------------------------
        // Docentric email
        // -------------------------------------------
        DocPrintDestSettingsEmail docEmailSettings = pds.parmEmailPrintDestSettings_DC();
                        
        _tmpTable.DestDocEmailTo = docEmailSettings.parmEmailTo();
        _tmpTable.DestDocEmailSubject = docEmailSettings.parmEmailSubject();
        _tmpTable.DestDocEmailOpenEmailBeforeSending = docEmailSettings.parmOpenEmailBeforeSending();
                        
        _tmpTable.DestDocEmailAttachmentName = docEmailSettings.parmEmailAttachmentName();
        _tmpTable.DestDocEmailAttachmentFileFormat = docEmailSettings.parmEmailAttachmentFileFormat();
        _tmpTable.DestDocEmailAttachmentFileFormatSrs = docEmailSettings.parmEmailAttachmentFileFormatSrs();

        _tmpTable.DestDocEmailCc = docEmailSettings.parmEmailCc();
        _tmpTable.DestDocEmailBcc = docEmailSettings.parmEmailBcc();
        _tmpTable.DestDocEmailFrom = docEmailSettings.parmEmailFrom();

        _tmpTable.DestDocEmailUseEmailTemplate = docEmailSettings.parmUseEmailTemplate();
        _tmpTable.DestDocEmailTemplateId = docEmailSettings.parmEmailTemplateId();
        _tmpTable.DestDocEmailBody = docEmailSettings.parmEmailBody();
                
        // -------------------------------------------
        // SSRS printer
        // -------------------------------------------
        _tmpTable.DestSSRSPrinterName = pds.printerName();        
        _tmpTable.DestSSRSPrinterOrientation = pds.orientation();
        _tmpTable.DestSSRSPrinterDuplexPrinting = pds.printOnBothSides();
        _tmpTable.DestSSRSPrinterCollated = pds.collate();
        _tmpTable.DestSSRSPrinterNumberOfCopies = pds.numberOfCopies();
        _tmpTable.DestSSRSPrinterPrintAllPages = pds.printAllPages();
        _tmpTable.DestSSRSPrinterPrintFromPage = pds.fromPage();
        _tmpTable.DestSSRSPrinterPrintToPage = pds.toPage();
                
        // -------------------------------------------
        // SSRS file
        // -------------------------------------------
        _tmpTable.DestSSRSFileFormat = pds.fileFormat();
        _tmpTable.DestSSRSFileName = pds.fileName();
                
        // -------------------------------------------
        // SSRS email
        // -------------------------------------------
        _tmpTable.DestSSRSEmailTo = pds.emailTo();
        _tmpTable.DestSSRSEmailCc = pds.emailCc();
        _tmpTable.DestSSRSEmailSubject = pds.emailSubject();
        _tmpTable.DestSSRSEmailAttachmentFileFormat = pds.emailAttachmentFileFormat();

                
        // -------------------------------------------
        // Destination description
        // -------------------------------------------
        _tmpTable.PrintDestinationDescription = DocSrsReportRunUtil::getPrintDestDescription(pds);

    }

]]></Source>
			</Method>
			<Method>
				<Name>packAndSavePrintDestinationSettings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Pack the print destination related fields of the given DocPrintMgmtUtilsTmp record
    /// and save the packed value into the PrintJobSettings field.
    /// </summary>
    /// <param name = "_tmpTable">DocPrintMgmtUtilsTmp record on which the print destination
    /// related fields should be packed.</param>
    public static void packAndSavePrintDestinationSettings(DocPrintMgmtUtilsTmp _tmpTable)
    {
        SRSPrintDestinationSettings pds = DocPrintMgmtUtilsHelper::getPackedPrintDestinationSettings(_tmpTable);        

        _tmpTable.PrintJobSettings = pds.pack();
        _tmpTable.UnpackedSyncStatus = DocPrintMgmtUtilsUnpackedSyncStatus::Synced;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPackedPrintDestinationSettings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Pack the print destination related fields of the given DocPrintMgmtUtilsTmp record
    /// and return the packed value as a SRSPrintDestinationSettings object.
    /// </summary>
    /// <param name = "_tmpTable">DocPrintMgmtUtilsTmp record on which the print destination
    /// related fields should be packed.</param>
    /// <returns>SRSPrintDestinationSettings object with packed settings.</returns>
    public static SRSPrintDestinationSettings getPackedPrintDestinationSettings(DocPrintMgmtUtilsTmp _tmpTable)
    {
        SRSPrintDestinationSettings pds = new SRSPrintDestinationSettings();

        pds.printMediumType(_tmpTable.PrintMediumType);
        
        // -------------------------------------------
        // Options
        // -------------------------------------------
        pds.parmPrintToArchive(_tmpTable.DestSSRSSaveInPrintArchive);
        pds.parmSrsPrintReportSettings_DC().parmSaveToArchive(_tmpTable.DestDocSaveInPrintArchive);
        pds.parmSrsPrintReportSettings_DC().parmSaveToArchiveNote(_tmpTable.DestDocSaveToArchiveNote);
        pds.parmSrsPrintReportSettings_DC().parmSaveToArchiveDocuTypeId(_tmpTable.DestDocSaveToArchiveDocuType);
        pds.parmSrsPrintReportSettings_DC().parmPdfAConformanceLevel(_tmpTable.DestDocPdfAConformanceLevel);
        pds.parmSrsPrintReportSettings_DC().parmPreviewBeforePrint(_tmpTable.DestDocPreviewBeforePrint);
        
        // -------------------------------------------
        // Template
        // -------------------------------------------
        pds.parmSrsPrintReportSettings_DC().parmTemplateId(_tmpTable.DestDocTemplateId == DocConstant::DefaultTemplatePlaceholder ? '' : _tmpTable.DestDocTemplateId);
                
        // -------------------------------------------
        // Docentric printer
        // -------------------------------------------
        DocPrintDestSettingsPrinter docPrinterSettings = new DocPrintDestSettingsPrinter();

        docPrinterSettings.parmSelectedPrinterName(_tmpTable.DestDocPrinterName);
        docPrinterSettings.parmOrientation(_tmpTable.DestDocPrinterOrientation);
        docPrinterSettings.parmDuplexPrinting(_tmpTable.DestDocPrinterDuplexPrinting);
        docPrinterSettings.parmCollated(_tmpTable.DestDocPrinterCollated);
        docPrinterSettings.parmNumberOfCopies(_tmpTable.DestDocPrinterNumberOfCopies);
        docPrinterSettings.parmPrintFromPage(_tmpTable.DestDocPrinterPrintFromPage);
        docPrinterSettings.parmPrintToPage(_tmpTable.DestDocPrinterPrintToPage);
        docPrinterSettings.parmPrintAllPages(_tmpTable.DestDocPrinterPrintAllPages);
        docPrinterSettings.parmPrintAsPdf(_tmpTable.DestDocPrinterPrintAsPdf);
        docPrinterSettings.parmPrintAsPdfFilename(_tmpTable.DestDocPrinterPrintAsPdfFilename);

        pds.parmPrinterPrintDestSettings_DC(docPrinterSettings);
                
        // -------------------------------------------
        // Docentric file
        // -------------------------------------------
        DocPrintDestSettingsFile docFileSettings = new DocPrintDestSettingsFile();
                        
        docFileSettings.parmOutputFilename(_tmpTable.DestDocFileName);
        docFileSettings.parmOutputFileFormat(_tmpTable.DestDocFileFormat);
        docFileSettings.parmOutputFileFormatSrs(_tmpTable.DestDocFileFormatSrs);
        docFileSettings.parmUseSsrsBuiltInDesign(_tmpTable.DestDocTemplateId == DocConstant::BuiltInSsrsDesignPlaceholder);
        docFileSettings.parmSendOutputFileToUser(_tmpTable.DestDocFileDownloadOutputFile);

        docFileSettings.parmUseDocIdInFilename(_tmpTable.DestDocFileUseDocIdInFilename);
        docFileSettings.parmUseTimestampAsSuffix(_tmpTable.DestDocFileUseTimestampAsSuffix);
        docFileSettings.parmUseGuidAsSuffix(_tmpTable.DestDocFileUseGuidAsSuffix);

        docFileSettings.parmSaveToAzureBlobStorage(_tmpTable.DestDocFileSaveToAzureBlob);
        docFileSettings.parmAzureBsAccountId(_tmpTable.DestDocFileAzureBlobStorageAccountId);
        docFileSettings.parmAzureBsContainerName(_tmpTable.DestDocFileAzureBlobContainer);
        docFileSettings.parmAzureBsBlobPath(_tmpTable.DestDocFileAzureBlobPath);
        docFileSettings.parmAzureBsOverrideFileIfExists(_tmpTable.DestDocFileAzureBlobOverrideFileIfExists);        

        docFileSettings.parmSaveToAzureFiles(_tmpTable.DestDocFileSaveToAzureFiles);
        docFileSettings.parmAzureFilesAccountId(_tmpTable.DestDocFileAzureFilesAccountId);
        docFileSettings.parmAzureFilesFileShareName(_tmpTable.DestDocFileAzureFilesFileShare);
        docFileSettings.parmAzureFilesDirectoryPath(_tmpTable.DestDocFileAzureFilesFolderPath);
        docFileSettings.parmAzureFilesOverrideFileIfExists(_tmpTable.DestDocFileAzureFilesOverrideFileIfExists);
        docFileSettings.parmAzureFilesCreateNonExistingFolders(_tmpTable.DestDocFileAzureFilesCreateNonExistingFolders);

        docFileSettings.parmSaveToSharePoint(_tmpTable.DestDocFileSaveToSharePoint);
        docFileSettings.parmSharePointSiteUrl(_tmpTable.DestDocFileSharePointSiteUrl);
        docFileSettings.parmSharePointFolderPath(_tmpTable.DestDocFileSharePointFolderPath);
        docFileSettings.parmSharePointOverrideFileIfExists(_tmpTable.DestDocFileSharePointOverrideFileIfExists);
        docFileSettings.parmSharePointCreateNonExistingFolders(_tmpTable.DestDocFileSharePointCreateNonExistingFolders);

        docFileSettings.parmSaveToAttachments(_tmpTable.DestDocFileSaveToAttachments);
        docFileSettings.parmSaveToAttachmentsDocuTypeId(_tmpTable.DestDocFileAttachmentDocumentType);
        docFileSettings.parmSaveToAttachmentsRecordType(_tmpTable.DestDocFileSaveToAttachmentsRecordType);
        docFileSettings.parmSaveToAttachmentsOverridingMode(_tmpTable.DestDocFileSaveToAttachmentsOverridingMode);
        docFileSettings.parmSaveToAttachmentsDocumentRestriction(_tmpTable.DestDocFileSaveToAttachmentsDocumentRestriction);
        docFileSettings.parmSaveToAttachmentsCategory(_tmpTable.DestDocFileSaveToAttachmentsCategoryId);
        docFileSettings.parmSaveToAttachmentsTags(_tmpTable.DestDocFileSaveToAttachmentsTags);
        docFileSettings.parmSaveToAttachmentsLanguageMode(_tmpTable.DestDocFileSaveToAttachmentsLanguage);
        docFileSettings.parmSaveToAttachmentsActiveFrom(_tmpTable.DestDocFileSaveToAttachmentsActiveFrom);
        docFileSettings.parmSaveToAttachmentsActiveTo(_tmpTable.DestDocFileSaveToAttachmentsActiveTo);

        docFileSettings.parmSaveToFileSystem(_tmpTable.DestDocFileSaveToFileSystem);
        docFileSettings.parmFileSystemFilePath(_tmpTable.DestDocFileSystemSharedFolder);
        docFileSettings.parmFileSystemOverrideFileIfExists(_tmpTable.DestDocFileSaveToFileSystemOverrideFileIfExists);
                
        pds.parmFilePrintDestSettings_DC(docFileSettings);
                
        // -------------------------------------------
        // Docentric email
        // -------------------------------------------
        DocPrintDestSettingsEmail docEmailSettings = new DocPrintDestSettingsEmail();
                
        docEmailSettings.parmEmailTo(_tmpTable.DestDocEmailTo);
        docEmailSettings.parmEmailSubject(_tmpTable.DestDocEmailSubject);
        docEmailSettings.parmOpenEmailBeforeSending(_tmpTable.DestDocEmailOpenEmailBeforeSending);
                
        docEmailSettings.parmEmailAttachmentName(_tmpTable.DestDocEmailAttachmentName);
        docEmailSettings.parmEmailAttachmentFileFormat(_tmpTable.DestDocEmailAttachmentFileFormat);
        docEmailSettings.parmEmailAttachmentFileFormatSrs(_tmpTable.DestDocEmailAttachmentFileFormatSrs);
        docEmailSettings.parmEmailAttachmentUseSsrsBuiltInDesign(_tmpTable.DestDocTemplateId == DocConstant::BuiltInSsrsDesignPlaceholder);

        docEmailSettings.parmEmailCc(_tmpTable.DestDocEmailCc);
        docEmailSettings.parmEmailBcc(_tmpTable.DestDocEmailBcc);
        docEmailSettings.parmEmailFrom(_tmpTable.DestDocEmailFrom);

        docEmailSettings.parmUseEmailTemplate(_tmpTable.DestDocEmailUseEmailTemplate);
        docEmailSettings.parmEmailTemplateId(_tmpTable.DestDocEmailTemplateId);
        docEmailSettings.parmEmailBody(_tmpTable.DestDocEmailBody);

        pds.parmEmailPrintDestSettings_DC(docEmailSettings);
                
        // -------------------------------------------
        // SSRS printer
        // -------------------------------------------
        pds.printerName(_tmpTable.DestSSRSPrinterName);
        pds.orientation(_tmpTable.DestSSRSPrinterOrientation);
        pds.printOnBothSides(_tmpTable.DestSSRSPrinterDuplexPrinting);
        pds.collate(_tmpTable.DestSSRSPrinterCollated);
        pds.numberOfCopies(_tmpTable.DestSSRSPrinterNumberOfCopies);
        pds.printAllPages(_tmpTable.DestSSRSPrinterPrintAllPages);
        pds.fromPage(_tmpTable.DestSSRSPrinterPrintFromPage);
        pds.toPage(_tmpTable.DestSSRSPrinterPrintToPage);
                
        // -------------------------------------------
        // SSRS file
        // -------------------------------------------
        pds.fileFormat(_tmpTable.DestSSRSFileFormat);
        pds.fileName(_tmpTable.DestSSRSFileName);
                
        // -------------------------------------------
        // SSRS email
        // -------------------------------------------
        pds.emailTo(_tmpTable.DestSSRSEmailTo);
        pds.emailCc(_tmpTable.DestSSRSEmailCc);
        pds.emailSubject(_tmpTable.DestSSRSEmailSubject);
        pds.emailAttachmentFileFormat(_tmpTable.DestSSRSEmailAttachmentFileFormat);
        

        return pds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateUtilsRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Wrapper for performing the validation of one DocPrintMgmtUtilsTmp record, provided by its RecId
    /// and the DocPrintMgmtUtilsTmp temporary table.
    /// </summary>
    /// <param name = "_utilsRecId">RecId of the DocPrintMgmtUtilsTmp record to be validated.</param>
    /// <param name = "_tmpTable">DocPrintMgmtUtilsTmp temporary table in which the give RecId should
    /// be validated</param>
    /// <returns>boolean: true if record is valid, false otherwise.</returns>
    public static boolean validateUtilsRecord(RecId _utilsRecId, DocPrintMgmtUtilsTmp _tmpTable)
    {
        DocPrintMgmtUtilsTmp currentRecord = DocPrintMgmtUtilsTmp::find(_utilsRecId, _tmpTable, true);
        boolean isValid = currentRecord.validate();

        return isValid;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>