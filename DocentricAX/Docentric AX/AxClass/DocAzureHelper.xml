<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocAzureHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Helper class for dealing with Azure.
/// </summary>
public class DocAzureHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getStorageAccountConnectionString</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the connection string for the given Azure storage account ID.
    /// If Azure storage account ID is not provided, the internal Azure storage is used.
    /// In this case the null connection string is returned.
    /// </summary>
    /// <param name = "_azureStorageId">Azure storage account id</param>
    /// <param name = "_showErrorMsg">Should error be shown</param>
    /// <param name = "_throwError">Should error be thrown if occurs</param>
    /// <returns>
    /// Returns:
    ///     - connection string, if Azure storage account ID is provided
    ///     - null, if Azure storage account ID is NOT provided (internal Azure storage is used)
    ///     - empty string in case of error
    /// </returns>
    public static System.String getStorageAccountConnectionString(
        str _azureStorageId = '',
        boolean _showErrorMsg = true,
        boolean _throwError = true)
    {
        System.String connectionString = null;

        if (_azureStorageId)
        {
            connectionString = DocAzureStorageAccount::getConnectionStringByAccountId(_azureStorageId);
            if (!connectionString)
            {
                if (_showErrorMsg)
                {
                    DocGlobalHelper::handleError(strFmt("@DocentricAX3:AzureStorageAccountConnectionStringError", _azureStorageId), true, funcName(), _throwError);
                }
            }
        }

        return connectionString;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStorageAccountInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets storage account information for error messages.
    /// </summary>
    /// <param name = "_azureStorageId">Azure storage account id</param>
    /// <returns>Storage account info</returns>
    public static str getStorageAccountInfo(str _azureStorageId = '')
    {
        return _azureStorageId == '' ? '' : (' ' + strFmt("@DocentricAX3:AzureStorageAccountGetStorageAccountInfo", _azureStorageId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStorageAccountInfoExt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets storage account information for error messages with the instructions to check connection string.
    /// </summary>
    /// <param name = "_azureStorageId">Azure storage account id</param>
    /// <returns>Storage account info</returns>
    public static str getStorageAccountInfoExt(str _azureStorageId = '')
    {
        str azureStorageAccountInfoExtMsg = DocAzureHelper::getStorageAccountInfo(_azureStorageId);
        if (_azureStorageId && azureStorageAccountInfoExtMsg)
        {
            azureStorageAccountInfoExtMsg = azureStorageAccountInfoExtMsg + '. ' + strFmt("@DocentricAX3:CheckAzureStorageConnectionStringAdvice", _azureStorageId);
        }
        return azureStorageAccountInfoExtMsg;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>