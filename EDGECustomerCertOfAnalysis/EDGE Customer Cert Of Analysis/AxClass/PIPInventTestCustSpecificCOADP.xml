<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PIPInventTestCustSpecificCOADP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>PIPInventTestCustSpecificCOADP</c> class provides data for the <c>PIPInventTestCustSpecificCOAReport</c>
///     report.
/// </summary>
[
    SRSReportQueryAttribute(queryStr(InventTestCertOfAnalysis))
]
public class PIPInventTestCustSpecificCOADP extends SRSReportDataProviderBase
{
    PIPInventTestCertOfAnalysisCustReq      inventTestCOACustReq;
    PIPInventTestCustSpecificCOATmp         inventTestCertOfAnalysisTmp;
    InventTestCertOfAnalysisTable           inventTestCertOfAnalysisTable;
    InventTestCertOfAnalysisLine            inventTestCertOfAnalysisLine;
    InventQualityOrderLine                  inventQualityOrderLine;
    InventTestCertOfAnalysisLineResults     inventTestCertOfAnalysisLineResults;
    CustTable                               custTable;
    InventBatch                             inventBatch;
    DocuRef                                 docuRef;

    Bitmap                                  saveCompanyLogo;

    //Macros
    #define.EmptyString('')
    #define.Zero(0.0)
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getInventTestCertOfAnalysisTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fetches the data from the temporary <c>InventTestCertOfAnalysisTmp</c> table.
    /// </summary>
    /// <returns>
    ///    The data from the temporary table.
    /// </returns>
    [
        SRSReportDataSetAttribute('InventTestCertOfAnalysisTmp')
    ]
    public PIPInventTestCustSpecificCOATmp getInventTestCertOfAnalysisTmp()
    {
        select * from inventTestCertOfAnalysisTmp;
        return inventTestCertOfAnalysisTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDocuRefIntoTempTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Inserts a specified <c>DocuRef</c> table buffer into a temporary table.
    /// </summary>
    /// <param name="_tableId">
    ///     The ID of the table.
    /// </param>
    protected void insertDocuRefIntoTempTable(int _tableId)
    {
        //Page Header data
        inventTestCertOfAnalysisTmp.InventCertificateOfAnalysisId       =   inventTestCertOfAnalysisTable.InventCertificateOfAnalysisId;
        inventTestCertOfAnalysisTmp.QualityOrderId                      =   inventTestCertOfAnalysisTable.QualityOrderId;
        inventTestCertOfAnalysisTmp.ItemId                              =   inventTestCertOfAnalysisTable.ItemId;
    
        inventTestCertOfAnalysisTmp.TypeId                              =   docuRef.TypeId;
        inventTestCertOfAnalysisTmp.Name                                =   docuRef.Name;
        inventTestCertOfAnalysisTmp.Notes                               =   docuRef.Notes;
    
        switch (_tableId)
        {
            case tableNum(InventTestCertOfAnalysisTable):
                inventTestCertOfAnalysisTmp.DocuRefCertOfAnalysis       =   NoYes::Yes;
                inventTestCertOfAnalysisTmp.DocuRefCertOfAnalysisLine   =   NoYes::No;
                inventTestCertOfAnalysisTmp.DocuRefCertOfAnalysisResult =   NoYes::No;
                break;
            case tableNum(InventTestCertOfAnalysisLine):
                inventTestCertOfAnalysisTmp.DocuRefCertOfAnalysis       =   NoYes::No;
                inventTestCertOfAnalysisTmp.DocuRefCertOfAnalysisLine   =   NoYes::Yes;
                inventTestCertOfAnalysisTmp.DocuRefCertOfAnalysisResult =   NoYes::No;
                break;
            case tableNum(InventTestCertOfAnalysisLineResults):
                inventTestCertOfAnalysisTmp.DocuRefCertOfAnalysis       =   NoYes::No;
                inventTestCertOfAnalysisTmp.DocuRefCertOfAnalysisLine   =   NoYes::No;
                inventTestCertOfAnalysisTmp.DocuRefCertOfAnalysisResult =   NoYes::Yes;
                break;
        }
    
        inventTestCertOfAnalysisTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoTempTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Inserts specified records into a temporary table.
    /// </summary>
    /// <param name="_tableId">
    ///     The serial ID of the table.
    /// </param>
    private void insertIntoTempTable(int _tableId)
    {
        InventQualityOrderTable         inventQualityOrderTable;
        PdsBatchAttribByItemCustomer    pdsBatchAttribByItemCustomer;
        InventDim                       inventDim;
        CompanyInfo                     companyInfo;
        PdsBatchAttribId                pdsBatchAttribId;
        ExternalItemId                  externalItemId;
        boolean                         replacePassResults;
        boolean                         replaceFailResults;
    
        inventTestCertOfAnalysisTmp.clear();
    
        // company logo
        if (!saveCompanyLogo)
        {
            companyInfo                                                     =   CompanyInfo::find();
            saveCompanyLogo                                                 =   CompanyImage::findByRecord(companyInfo).Image;
        }

        inventTestCertOfAnalysisTmp.CompanyLogo                             =   saveCompanyLogo;
    
        //Page Header Id
        inventTestCertOfAnalysisTmp.InventCertificateOfAnalysisId           =   inventTestCertOfAnalysisTable.InventCertificateOfAnalysisId;
        inventTestCertOfAnalysisTmp.QualityOrderId                          =   inventTestCertOfAnalysisTable.QualityOrderId;
        inventTestCertOfAnalysisTmp.SalesId                                 =   inventTestCertOfAnalysisTable.PIPSalesId;
        inventTestCertOfAnalysisTmp.PackingSlipDate                         =   inventTestCertOfAnalysisTable.PIPPackingSlipDate;
    
        // Customer-specific information
        if (inventTestCertOfAnalysisTable.PIPCustAccount)
        {
            custTable                                                       =   CustTable::find(inventTestCertOfAnalysisTable.PIPCustAccount);
            inventQualityOrderTable                                         =   InventQualityOrderTable::find(inventTestCertOfAnalysisTable.QualityOrderId);
            inventDim                                                       =   InventDim::find(inventTestCertOfAnalysisTable.InventDimId);
    
            inventBatch                                                     =   InventBatch::find(inventDim.inventBatchId, inventTestCertOfAnalysisTable.ItemId);
    
            inventTestCertOfAnalysisTmp.CustAccount                         =   custTable.AccountNum;
            inventTestCertOfAnalysisTmp.CustName                            =   custTable.name();
            inventTestCertOfAnalysisTmp.CustSpecificContactPersonName       =   custTable.editContactPersonName(false, #EmptyString);
            inventTestCertOfAnalysisTmp.CustSpecificPhone                   =   custTable.phone();
            inventTestCertOfAnalysisTmp.CustSpecificTeleFax                 =   custTable.telefax();
            inventTestCertOfAnalysisTmp.CustSpecificEmail                   =   custTable.email();
    
            externalItemId                                                  =   CustVendExternalItem::find(ModuleInventPurchSalesVendCustGroup::Cust,
                                                                                    inventTestCertOfAnalysisTable.ItemId,
                                                                                    inventTestCertOfAnalysisTable.InventDimId,
                                                                                    custTable.AccountNum).ExternalItemId;
            if (!externalItemId)
            {
                inventTestCertOfAnalysisTmp.CustSpecificExternalItemId      =   CustVendExternalItem::find(ModuleInventPurchSalesVendCustGroup::Cust,
                                                                                    inventTestCertOfAnalysisTable.ItemId,
                                                                                    InventDim::inventDimIdBlank(),
                                                                                    custTable.AccountNum).ExternalItemId;
            }
    
            if (inventBatch)
            {
                if (InventParameters::find().PIPIncludeBatchExpiryDateOnCOA)
                {
                    inventTestCertOfAnalysisTmp.CustSpecificBatchExpDate    =   inventBatch.expDate;
                }
                if (InventParameters::find().PIPIncludeBestBeforeDateOnCOA)
                {
                    inventTestCertOfAnalysisTmp.CustSpecificBestBeforeDate  =   inventBatch.PdsBestBeforeDate;
                }
            }
    
            // dimensions
            if (inventDim)
            {
                inventTestCertOfAnalysisTmp.InventDimConfigId               =   inventDim.configId;
                inventTestCertOfAnalysisTmp.InventDimInventBatchId          =   inventDim.inventBatchId;
                inventTestCertOfAnalysisTmp.InventDimInventColorId          =   inventDim.InventColorId;
                inventTestCertOfAnalysisTmp.InventDimInventSerialId         =   inventDim.inventSerialId;
                inventTestCertOfAnalysisTmp.InventDimInventSizeId           =   inventDim.InventSizeId;
                inventTestCertOfAnalysisTmp.InventDimInventStyleId          =   inventDim.InventStyleId;
                inventTestCertOfAnalysisTmp.InventDimVersionId              =   inventDim.InventVersionId;
                inventTestCertOfAnalysisTmp.InventDimension1                =   inventDim.InventDimension1;
                inventTestCertOfAnalysisTmp.InventDimension2                =   inventDim.InventDimension2;
                inventTestCertOfAnalysisTmp.InventDimension3                =   inventDim.InventDimension3;
                inventTestCertOfAnalysisTmp.InventDimension4                =   inventDim.InventDimension4;
                inventTestCertOfAnalysisTmp.InventDimension5                =   inventDim.InventDimension5;
                inventTestCertOfAnalysisTmp.InventDimension6                =   inventDim.InventDimension6;
                inventTestCertOfAnalysisTmp.InventDimension7                =   inventDim.InventDimension7;
                inventTestCertOfAnalysisTmp.InventDimension8                =   inventDim.InventDimension8;
                inventTestCertOfAnalysisTmp.InventDimension9                =   inventDim.InventDimension9;
                inventTestCertOfAnalysisTmp.InventDimension10               =   inventDim.InventDimension10;
            }
        }
    
        //Page Header Account
        if (inventTestCertOfAnalysisTable.AccountRelation)
        {
            inventTestCertOfAnalysisTmp.AccountRelation                     =   inventTestCertOfAnalysisTable.AccountRelation;
            inventTestCertOfAnalysisTmp.CustVendName                        =   inventTestCertOfAnalysisTable.custVendName();
            inventTestCertOfAnalysisTmp.ContactPersonName                   =   inventTestCertOfAnalysisTable.editContactPersonName(false,#EmptyString);
            inventTestCertOfAnalysisTmp.CustVendPhone                       =   inventTestCertOfAnalysisTable.custVendPhone();
            inventTestCertOfAnalysisTmp.CustVendTeleFax                     =   inventTestCertOfAnalysisTable.custVendTeleFax();
            inventTestCertOfAnalysisTmp.CustVendEmail                       =   inventTestCertOfAnalysisTable.custVendEmail();
        }
    
        //Page Header Item
        inventTestCertOfAnalysisTmp.ItemId                                  =   inventTestCertOfAnalysisTable.ItemId;
        inventTestCertOfAnalysisTmp.ItemName                                =   inventTestCertOfAnalysisTable.itemName();
    
        //References
        inventTestCertOfAnalysisTmp.ReferenceType                           =   inventTestCertOfAnalysisTable.ReferenceType;
        inventTestCertOfAnalysisTmp.InventRefId                             =   inventTestCertOfAnalysisTable.InventRefId;
        inventTestCertOfAnalysisTmp.InventRefTransId                        =   inventTestCertOfAnalysisTable.InventRefTransId;
        inventTestCertOfAnalysisTmp.RouteId                                 =   inventTestCertOfAnalysisTable.RouteId;
    
        if (_tableId == tableNum(InventTestCertOfAnalysisLine) || _tableId == tableNum(InventTestCertOfAnalysisLineResults))
        {
            inventQualityOrderLine                                          =   InventQualityOrderLine::find(inventTestCertOfAnalysisTable.QualityOrderId,
                                                                                        inventTestCertOfAnalysisLine.TestId,
                                                                                        inventTestCertOfAnalysisLine.TestSequence);
    
            pdsBatchAttribId                                                =   inventQualityOrderLine.PdsBatchAttribId;
    
            replacePassResults                                              =   inventTestCOACustReq.ReplacePassResults && inventTestCertOfAnalysisLine.TestResult == InventTestOutcomeStatus::Pass;
            replaceFailResults                                              =   inventTestCOACustReq.ReplaceFailResults && inventTestCertOfAnalysisLine.TestResult == InventTestOutcomeStatus::Fail;
    
            //Line Options
            inventTestCertOfAnalysisTmp.TestId                              =   inventTestCertOfAnalysisLine.TestId;
            inventTestCertOfAnalysisTmp.TestUnitID                          =   inventTestCertOfAnalysisLine.TestUnitId;
            inventTestCertOfAnalysisTmp.TestResult                          =   inventTestCertOfAnalysisLine.TestResult;
            inventTestCertOfAnalysisTmp.VariableOutcomeIdStandard           =   inventTestCertOfAnalysisLine.VariableOutcomeIdStandard;
    
            if (replacePassResults)
            {
                inventTestCertOfAnalysisTmp.PdsOrderLineResult              =   inventTestCOACustReq.ReplacePassResults;
            }
            else if (replaceFailResults)
            {
                inventTestCertOfAnalysisTmp.PdsOrderLineResult              =   inventTestCOACustReq.ReplaceFailResults;
            }
            else
            {
                inventTestCertOfAnalysisTmp.PdsOrderLineResult              =   inventQualityOrderLine.PdsOrderLineResult;
            }
    
            //Line Non_Options (Extra)
            inventTestCertOfAnalysisTmp.StandardValue                       =   inventTestCertOfAnalysisLine.StandardValue;
    
            pdsBatchAttribByItemCustomer                                    =   PdsBatchAttribByItemCustomer::pipFindByItemId(inventTestCertOfAnalysisTable.ItemId,
                                                                                            pdsBatchAttribId,
                                                                                            TableGroupAll::Table,
                                                                                            custTable);
    
            if (inventTestCOACustReq.UseCustBatchAttribRange && pdsBatchAttribByItemCustomer)
            {
                // Replace with customer batch attributes
                inventTestCertOfAnalysisTmp.StandardValue                   =   this.getAttribTargetFromBatchAttribByItemCustomer(pdsBatchAttribByItemCustomer);
                inventTestCertOfAnalysisTmp.LowerLimit                      =   pdsBatchAttribByItemCustomer.PdsBatchAttribMin;
                inventTestCertOfAnalysisTmp.UpperLimit                      =   pdsBatchAttribByItemCustomer.PdsBatchAttribMax;
    
                if (inventTestCertOfAnalysisTmp.StandardValue)
                {
                    inventTestCertOfAnalysisTmp.LowerTolerance              =   round(100 * (abs(inventTestCertOfAnalysisTmp.StandardValue - inventTestCertOfAnalysisTmp.LowerLimit) / abs(inventTestCertOfAnalysisTmp.StandardValue)), 0.01);
                    inventTestCertOfAnalysisTmp.UpperTolerance              =   round(100 * (abs(inventTestCertOfAnalysisTmp.UpperLimit - inventTestCertOfAnalysisTmp.StandardValue) / abs(inventTestCertOfAnalysisTmp.StandardValue)), 0.01);
                }
                else
                {
                    inventTestCertOfAnalysisTmp.LowerTolerance              =   0;
                    inventTestCertOfAnalysisTmp.UpperTolerance              =   0;
                }
    
            }
            else
            {
                inventTestCertOfAnalysisTmp.LowerLimit                      =   inventTestCertOfAnalysisLine.LowerLimit;
                inventTestCertOfAnalysisTmp.UpperLimit                      =   inventTestCertOfAnalysisLine.UpperLimit;
                inventTestCertOfAnalysisTmp.LowerTolerance                  =   inventTestCertOfAnalysisLine.LowerTolerance;
                inventTestCertOfAnalysisTmp.UpperTolerance                  =   inventTestCertOfAnalysisLine.UpperTolerance;
            }
    
            inventTestCertOfAnalysisTmp.SupressMinMaxValues                 =   inventTestCOACustReq.SupressMinMaxValues;
    
            //Line (Only Test Type)
            inventTestCertOfAnalysisTmp.TestType                            =   InventTestTable::find(inventTestCertOfAnalysisLine.TestId).TestType;
    
            if (_tableId == tableNum(InventTestCertOfAnalysisLineResults))
            {
                //Results Options
                inventTestCertOfAnalysisTmp.TestResultQuantity              =   inventTestCertOfAnalysisLineResults.TestResultQuantity;
                inventTestCertOfAnalysisTmp.TestResultValueOutcome          =   inventTestCertOfAnalysisLineResults.TestResultValueOutcome;
                inventTestCertOfAnalysisTmp.TestResultResult                =   inventTestCertOfAnalysisLineResults.TestResult;
    
                //Results Non Options
                inventTestCertOfAnalysisTmp.TestResultValueReal             =   inventTestCertOfAnalysisLineResults.TestResultValueReal;
                inventTestCertOfAnalysisTmp.CertOfAnalysisResult            =   NoYes::Yes;
    
                replacePassResults                                          =   inventTestCOACustReq.ReplacePassResults && inventTestCertOfAnalysisLineResults.TestResult == InventTestOutcomeStatus::Pass;
                replaceFailResults                                          =   inventTestCOACustReq.ReplaceFailResults && inventTestCertOfAnalysisLineResults.TestResult == InventTestOutcomeStatus::Fail;
    
                if (replacePassResults)
                {
                    inventTestCertOfAnalysisTmp.ReplaceResult               =   inventTestCOACustReq.ReplacePassResults;
                }
                else if (replaceFailResults)
                {
                    inventTestCertOfAnalysisTmp.ReplaceResult               =   inventTestCOACustReq.ReplaceFailResults;
                }
            }
            else
            {
                //Results Options
                inventTestCertOfAnalysisTmp.TestResultQuantity              =   #Zero;
                inventTestCertOfAnalysisTmp.TestResultValueOutcome          =   #EmptyString;
                inventTestCertOfAnalysisTmp.TestResultResult                =   InventTestOutcomeStatus::Fail;
    
                //Results Non Options
                inventTestCertOfAnalysisTmp.TestResultValueReal             =   #Zero;
                inventTestCertOfAnalysisTmp.CertOfAnalysisResult            =   NoYes::No;
            }
        }
        else
        {
            //Line Options
            inventTestCertOfAnalysisTmp.TestId                              =   #EmptyString;
            inventTestCertOfAnalysisTmp.TestUnitID                          =   #EmptyString;
            inventTestCertOfAnalysisTmp.TestResult                          =   InventTestOutcomeStatus::Fail;
            inventTestCertOfAnalysisTmp.VariableOutcomeIdStandard           =   #EmptyString;
    
            //Line Non_Options (Extra)
            inventTestCertOfAnalysisTmp.StandardValue                       =   #Zero;
            inventTestCertOfAnalysisTmp.LowerLimit                          =   #Zero;
            inventTestCertOfAnalysisTmp.UpperLimit                          =   #Zero;
            inventTestCertOfAnalysisTmp.LowerTolerance                      =   #Zero;
            inventTestCertOfAnalysisTmp.UpperTolerance                      =   #Zero;
    
            //Line (Only Test Type)
            inventTestCertOfAnalysisTmp.TestType                            =   InventTestType::Fraction;
    
            //Results Options
            inventTestCertOfAnalysisTmp.TestResultQuantity                  =   #Zero;
            inventTestCertOfAnalysisTmp.TestResultValueOutcome              =   #EmptyString;
            inventTestCertOfAnalysisTmp.TestResult                          =   InventTestOutcomeStatus::Fail;
    
            //Results Non Options
            inventTestCertOfAnalysisTmp.TestResultValueReal                 =   #Zero;
            inventTestCertOfAnalysisTmp.CertOfAnalysisResult                =   NoYes::No;
        }
    
        // This is not a docuRef record.
        inventTestCertOfAnalysisTmp.DocuRefCertOfAnalysis       =   NoYes::No;
        inventTestCertOfAnalysisTmp.DocuRefCertOfAnalysisLine   =   NoYes::No;
        inventTestCertOfAnalysisTmp.DocuRefCertOfAnalysisResult =   NoYes::No;

        inventTestCertOfAnalysisTmp.PIPSuppressBatchAttribCOAReport = InventParameters::find().PIPSuppressBatchAttribCOAReport;
   
        inventTestCertOfAnalysisTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertWithDocuRef</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether a <c>DocuRef</c> record exists for each record that was received.
    /// </summary>
    /// <param name="_common">
    ///     A common table buffer record.
    /// </param>
    /// <remarks>
    ///     If a <c>DocuRef</c> record exists, this method sends for the insertion together with the
    ///     <c>DocuRef</c> record. Otherwise, this method will send for the insertion of this record only.
    /// </remarks>
    private void insertWithDocuRef(Common _common)
    {
        InventTestReportSetup   inventTestReportSetup;
        int                     tableId = _common.TableId;
    
        this.insertIntoTempTable(tableId);
    
        while select docuRef
            order by ModifiedDateTime
            where docuRef.RefCompanyId  == _common.DataAreaId
               && docuRef.RefTableId    == _common.TableId
               && docuRef.RefRecId      == _common.RecId
            exists join inventTestReportSetup
                where inventTestReportSetup.InventTestReport    == InventTestReport::CertificateOfAnalysis
                   && inventTestReportSetup.DocuRestriction     == docuRef.Restriction
                   && inventTestReportSetup.DocuTypeIdNote      == docuRef.TypeId
        {
            this.insertDocuRefIntoTempTable(tableId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAttribTargetFromBatchAttribByItemCustomer</Name>
				<Source><![CDATA[
    private InventTestStandardValue getAttribTargetFromBatchAttribByItemCustomer(PdsBatchAttribByItemCustomer  _itemCustomer)
    {
        PdsBatchAttribByItem         attribByItem;
        PdsBatchAttribByAttribGroup  attribGroup;
        PdsBatchAttribTarget         attribTarget;
        PdsBatchAttrib               attributes;

        if (_itemCustomer.PdsBatchAttribCode != TableGroupAll::Table)
        {
            return 0;
        }

        attribByItem = _itemCustomer.pdsBatchAttribByItem();

        if (attribByItem)
        {
            attribTarget = attribByItem.pdsBatchAttribTargetEdit(false, attribByItem.PdsBatchAttribTarget);
        }
        else
        {
            select PdsBatchAttribTarget from attribGroup
                    where attribGroup.PdsBatchAttribAttribId == _itemCustomer.PdsBatchAttribRelation
                join attribByItem
                    where attribByItem.PdsBatchAttribItemId == _itemCustomer.PdsBatchAttribItemId
                    &&    attribByItem.PdsBatchAttribCode == TableGroupAll::GroupId
                    &&    attribByItem.PdsBatchAttribRelation == attribGroup.PdsBatchAttribGroupId ;

            attribTarget = attribGroup.pdsBatchAttribTargetEdit(false, attribGroup.PdsBatchAttribTarget);
        }

        //PdsBatchAttribByItem AccountCode is set to All
        if (!attribTarget)
        {
            attribByItem = PdsBatchAttribByItem::findItemId(
                    _itemCustomer.PdsBatchAttribItemId,
                    '',
                    TableGroupAll::All);

            if (attribByItem)
            {
                attributes = PdsBatchAttrib::find(_itemCustomer.PdsBatchAttribRelation);

                attribTarget = attributes.pdsBatchAttribTargetEdit();
            }
        }

        return str2Num(attribTarget);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTestCertOfAnalysis</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the <c>InventTestCertOfAnalysisLine</c> and <c>InventTestCertOfAnalysisLineResults</c>
    /// records.
    /// </summary>
    /// <remarks>
    ///     This method retrieves the <c>Docuref</c> records for each record to return.
    /// </remarks>
    private void inventTestCertOfAnalysis()
    {
        InventQualityOrderTable             inventQualityOrderTable;
    
        this.insertWithDocuRef(inventTestCertOfAnalysisTable);
    
        while select inventTestCertOfAnalysisLine
            order by TestSequence, TestId
            where inventTestCertOfAnalysisLine.InventCertificateOfAnalysisId  == inventTestCertOfAnalysisTable.InventCertificateOfAnalysisId
                join TestGroupId from inventQualityOrderTable
                where inventQualityOrderTable.QualityOrderId                  == inventTestCertOfAnalysisTable.QualityOrderId
        {
            inventQualityOrderLine  = InventQualityOrderLine::find(inventTestCertOfAnalysisTable.QualityOrderId,
                                                inventTestCertOfAnalysisLine.TestId,
                                                inventTestCertOfAnalysisLine.TestSequence);
    
            inventTestCOACustReq    = PIPInventTestCertOfAnalysisCustReq::findByOrderLineAndCust(CustTable::find(inventTestCertOfAnalysisTable.PIPCustAccount),
                                                inventQualityOrderLine.RecId);
    
            if(inventTestCOACustReq ? !inventTestCOACustReq.ExcludeFromCOA : inventQualityOrderLine.CertificateOfAnalysisReport)
            {
                this.insertWithDocuRef(inventTestCertOfAnalysisLine);
    
                while select inventTestCertOfAnalysisLineResults
                    where inventTestCertOfAnalysisLineResults.InventCertificateOfAnalysisId   == inventTestCertOfAnalysisLine.InventCertificateOfAnalysisId
                        && inventTestCertOfAnalysisLineResults.TestSequence                   == inventTestCertOfAnalysisLine.TestSequence
                        && inventTestCertOfAnalysisLineResults.TestId                         == inventTestCertOfAnalysisLine.TestId
                {
                    this.insertWithDocuRef(inventTestCertOfAnalysisLineResults);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Processes the report business logic by calling the helper methods and inserting the data into the
    ///     temporary table.
    /// </summary>
    /// <remarks>
    ///     This method provides the ability to write the report business logic. It will be called by
    ///     Reporting Service (SSRS) at run time. The method should compute data and populate the data tables
    ///     that will be returned to SSRS.
    /// </remarks>
    public void processReport()
    {
        QueryRun queryRun;

        queryRun = new QueryRun(this.parmQuery());
    
        while (queryRun.next())
        {
            inventTestCertOfAnalysisTable = queryRun.get(tableNum(InventTestCertOfAnalysisTable));
            this.inventTestCertOfAnalysis();
            this.setIndependentBatchAttributes();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setIndependentBatchAttributes</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates bath attribute information for independent batches if item is batch-controlled.
    /// </summary>
    private void setIndependentBatchAttributes()
    {
        InventDim                       inventDim;
        PdsBatchAttrib                  pdsBatchAttrib;
        PdsBatchAttributes              pdsBatchAttributes;
        PdsBatchAttribByItem            pdsBatchAttribbyItem;
        PdsBatchAttribByItemCustomer    pdsBatchAttribByItemCustomer;
        InventQualityOrderLine          qualityOrderLine;
        boolean                         isIndependentAttrib;
    
        if (!inventBatch)
        {
            return;
        }
        inventTestCertOfAnalysisTmp.clear();
        inventTestCertOfAnalysisTmp.InventCertificateOfAnalysisId = inventTestCertOfAnalysisTable.InventCertificateOfAnalysisId;
    
        while select pdsBatchAttributes
            where pdsBatchAttributes.ItemId                         ==  inventTestCertOfAnalysisTable.ItemId
            exists join inventDim
            where inventTestCertOfAnalysisTable.InventDimId         ==  inventDim.inventDimId
                && inventDim.inventBatchId                          ==  pdsBatchAttributes.InventBatchId
            notexists join  PDSAttribValue from qualityOrderLine
            where qualityOrderLine.QualityOrderId                   ==  inventTestCertOfAnalysisTable.QualityOrderId
                && qualityOrderLine.PdsBatchAttribId                ==  pdsBatchAttributes.PdsBatchAttribId
            exists join pdsBatchAttrib
                where pdsBatchAttrib.PdsBatchAttribId               ==  pdsBatchAttributes.PdsBatchAttribId
        {
            pdsBatchAttribbyItem            = PdsBatchAttribByItem::findItemId(inventTestCertOfAnalysisTable.ItemId, pdsBatchAttributes.PdsBatchAttribId, TableGroupAll::Table);
    
            pdsBatchAttribByItemCustomer    = PdsBatchAttribByItemCustomer::pipFindByItemId(inventTestCertOfAnalysisTable.ItemId, pdsbatchattributes.PdsBatchAttribId, TableGroupAll::Table, custTable);
    
            isIndependentAttrib = (pdsBatchAttribbyItem.PIPIncludeInCOA
                                        && pdsBatchAttribByItemCustomer.PIPIncludeInCOA)
                                    || (pdsBatchAttribbyItem.PIPIncludeInCOA
                                        && !pdsBatchAttribByItemCustomer)
                                    || (pdsBatchAttribByItemCustomer.PIPIncludeInCOA
                                        && !pdsBatchAttribbyItem);
    
            if (isIndependentAttrib)
            {
                inventTestCertOfAnalysisTmp.PdsBatchAttribId              = pdsBatchAttributes.PdsBatchAttribId;
                inventTestCertOfAnalysisTmp.PdsBatchAttribTarget          = pdsBatchAttribbyItem.PdsBatchAttribTarget;
                inventTestCertOfAnalysisTmp.PdsBatchAttribMin             = pdsBatchAttributes.pdsBatchAttribMin();
                inventTestCertOfAnalysisTmp.PdsBatchAttribMax             = pdsBatchAttributes.pdsBatchAttribMax();
                inventTestCertOfAnalysisTmp.PdsBatchAttribValue           = pdsBatchAttributes.batchAttribValue();
                inventTestCertOfAnalysisTmp.PIPSuppressBatchAttribCOAReport = InventParameters::find().PIPSuppressBatchAttribCOAReport;
                inventTestCertOfAnalysisTmp.insert();
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>