<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PIPInventTestCustSpecificCOAGenerate</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>PIPInventTestCustSpecificCOAGenerate</c> creates customer-specific COA's and triggers
///     report generation from these COA's.
/// </summary>
public class PIPInventTestCustSpecificCOAGenerate
{
    PIPInventTestCustSpecificCOAController  controller;
    Args                                    args;
    List                                    coaDetailsList;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>generateCustSpecificCOA</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates customer-specific COA's and uses the <c>PIPInventTestCustSpecificCOAController</c> class
    ///     to generate COA reports.
    /// </summary>
    public void generateCustSpecificCOA()
    {
        NumberSeq                       numberSeq;
        InventTestCertOfAnalysisTable   custSpecificCOA;
        InventQualityOrderId            qualityOrderId;
        InventQualityOrderTable         inventQualityOrderTable;
        container                       conCOADetail;
        str                             certOfAnalysisIds;
        ListEnumerator                  listEnumerator;
        Map                             mapCOARecords;
        MapEnumerator                   mapCOAEnumerator;
    
        #define.DetailOrderIdPos(1)
        #define.DetailSalesIdPos(2)
        #define.DetailPackingSlipDatePos(3)
        #define.DetailCustAccountPos(4)
    
        args            = new Args();
        numberSeq       = NumberSeq::newGetNum(InventParameters::numRefCertificateOfAnalysisId());

        mapCOARecords = new Map(Types::String, Types::Container);

        RecordInsertList coaInserter = new RecordInsertList(tableNum(InventTestCertOfAnalysisTable));
    
        listEnumerator  = coaDetailsList.getEnumerator();
        while(listEnumerator.moveNext())
        {
            conCOADetail                                    = listEnumerator.current();
    
            qualityOrderId                                  = conPeek(conCOADetail, #DetailOrderIdPos);
    
            inventQualityOrderTable                         = InventQualityOrderTable::find(qualityOrderId);
            custSpecificCOA.InventCertificateOfAnalysisId   = numberSeq.num();
    
            custSpecificCOA.initFromInventQualityOrderTable(inventQualityOrderTable);
    
            custSpecificCOA.PIPSalesId                      = conPeek(conCOADetail, #DetailSalesIdPos);
            custSpecificCOA.PIPPackingSlipDate              = conPeek(conCOADetail, #DetailPackingSlipDatePos);
            custSpecificCOA.PIPCustAccount                  = conPeek(conCOADetail, #DetailCustAccountPos);
    
            coaInserter.add(custSpecificCOA);
    
            if (!mapCOARecords.exists(custSpecificCOA.PIPCustAccount))
            {
                mapCOARecords.insert(custSpecificCOA.PIPCustAccount, [custSpecificCOA.InventCertificateOfAnalysisId]);
            }
            else
            {
                mapCOARecords.insert(custSpecificCOA.PIPCustAccount, mapCOARecords.lookup(custSpecificCOA.PIPCustAccount) + custSpecificCOA.InventCertificateOfAnalysisId);
            }
        }
        coaInserter.insertDatabase();
    
        mapCOAEnumerator = mapCOARecords.getEnumerator();
        while (mapCOAEnumerator.moveNext())
        {
            certOfAnalysisIds = con2Str(mapCOAEnumerator.currentValue(),',');
            custSpecificCOA = InventTestCertOfAnalysisTable::find(conPeek(mapCOAEnumerator.currentValue(), 1));

            args.record(custSpecificCOA);
            args.parm(certOfAnalysisIds);
            args.menuItemName(menuItemOutputStr(InventTestCertOfAnalysis));
            args.menuItemType(MenuItemType::Output);
    
            // generate report
            controller.parmArgs(args);
            controller.parmReportName(ssrsReportStr(PIPInventTestCustSpecificCOA, Report));
            controller.parmShowDialog(false);
            controller.startOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCOADetailsList</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets or sets the <c>COADetailsList</c> parameter.
    /// </summary>
    /// <param name="_coaDetailsList">
    ///     The value to set.
    /// </param>
    /// <returns>
    ///     The value of the <c>COADetailsList</c> parameter.
    /// </returns>
    /// <remarks>
    ///     <c>COADetailsList</c> list is a list of type container and a maximum of 15 containers.
    /// </remarks>
    public List parmCOADetailsList(List _coaDetailsList = coaDetailsList)
    {
        coaDetailsList = _coaDetailsList;
    
        return coaDetailsList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmController</Name>
				<Source><![CDATA[
    public PIPInventTestCustSpecificCOAController parmController(PIPInventTestCustSpecificCOAController _controller = controller)
    {
        controller = _controller;
        return controller;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PIPInventTestCustSpecificCOAGenerate construct()
    {
        return new PIPInventTestCustSpecificCOAGenerate();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>