<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PIPCOASalesFormLetter_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(SalesFormLetter))]
public final class PIPCOASalesFormLetter_Extension
{
    private PIPPrintCustSpecificCertOfAnalysis      printCustSpecificCertOfAnalysis;
    private PIPInventTestCustSpecificCOAController  custSpecificCOAController;
    private List                                    coaDetailsList;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmPIPCustSpecificCOA</Name>
				<Source><![CDATA[
    public PIPPrintCustSpecificCertOfAnalysis parmPIPCustSpecificCOA(PIPPrintCustSpecificCertOfAnalysis _printCustSpecificCertOfAnalysis = printCustSpecificCertOfAnalysis)
    {
        printCustSpecificCertOfAnalysis = _printCustSpecificCertOfAnalysis;
    
        return printCustSpecificCertOfAnalysis;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPIPCustSpecificCOAController</Name>
				<Source><![CDATA[
    public PIPInventTestCustSpecificCOAController parmPIPCustSpecificCOAController(PIPInventTestCustSpecificCOAController _custSpecificCOAController = custSpecificCOAController)
    {
        custSpecificCOAController = _custSpecificCOAController;
    
        return custSpecificCOAController;
    }

]]></Source>
			</Method>
			<Method>
				<Name>SalesFormLetter_Post_run</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="args"></param>
    [PostHandlerFor(classStr(SalesFormLetter), methodStr(SalesFormLetter, run))]
    public static void SalesFormLetter_Post_run(XppPrePostArgs args)
    {
        SalesFormLetter _this = args.getThis();
        if (#PIPCustSpecificCOAEnabled && _this.printCustSpecificCertOfAnalysis && _this.custSpecificCOAController)
        {
            _this.pipPrintCustSpecificCOA();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>SalesFormLetter_Pre_run</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="args"></param>
    [PreHandlerFor(classStr(SalesFormLetter), methodStr(SalesFormLetter, run))]
    public static void SalesFormLetter_Pre_run(XppPrePostArgs args)
    {
        SalesFormLetter _this = args.getThis();
        if (#PIPCustSpecificCOAEnabled && _this.printCustSpecificCertOfAnalysis && _this.custSpecificCOAController && _this.proforma() && !_this.lateSelection())
        {
            _this.pipCaptureCOADetails();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pipCaptureCOADetails</Name>
				<Source><![CDATA[
    private void pipCaptureCOADetails()
    {
        InventTrans                             inventTrans;
        InventTransOrigin                       inventTransOrigin;
        InventDim                               inventDim;
        InventBatch                             inventBatch;
        SalesParmTable                          salesParmTableCOA;
        container                               coaDetail;

        coaDetailsList = new List(Types::Container);
    
        while select SalesId, TransDate, CustAccount from salesParmTableCOA
            where salesParmTableCOA.ParmId                  == this.parmId()
                && salesParmTableCOA.Ordering               == DocumentStatus::PackingSlip
                && salesParmTableCOA.SalesId
            join PIPCertOfAnalysisQualityOrderId from inventBatch
                where inventBatch.PIPCertOfAnalysisQualityOrderId
            exists join inventTransOrigin
                where inventTransOrigin.ReferenceCategory   == InventTransType::Sales
                    && inventTransOrigin.ReferenceId        == salesParmTableCOA.SalesId
            exists join inventTrans
                where inventTrans.InventTransOrigin         == inventTransOrigin.RecId
                    && inventTrans.ItemId                   == inventBatch.itemId
            exists join inventDim
                where inventDim.InventBatchId               == inventBatch.InventBatchId
                    && inventDim.inventDimId                == inventTrans.inventDimId
        {
            coaDetail = [inventBatch.PIPCertOfAnalysisQualityOrderId, salesParmTableCOA.SalesId, salesParmTableCOA.Transdate, salesParmTableCOA.CustAccount];
            coaDetailsList.addEnd(coaDetail);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pipPrintCustSpecificCOA</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Depending on the need to generate a COA report, calls another class <c>PIPInventTestCustSpecificCOAGenerate</c> to create COA's
    ///     from currrent packing slip information and then prints customer-specific COA reports for those records.
    /// </summary>
    private void pipPrintCustSpecificCOA()
    {
        if (!coaDetailsList)
        {
            this.pipCaptureCOADetails();
        }

        if (coaDetailsList.elements())
        {
            PIPInventTestCustSpecificCOAGenerate custSpecificCOAGenerate = PIPInventTestCustSpecificCOAGenerate::construct();
    
            custSpecificCOAGenerate.parmController(this.parmPIPCustSpecificCOAController());
            custSpecificCOAGenerate.parmCOADetailsList(coaDetailsList);
            custSpecificCOAGenerate.generateCustSpecificCOA();

            coaDetailsList = null;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>