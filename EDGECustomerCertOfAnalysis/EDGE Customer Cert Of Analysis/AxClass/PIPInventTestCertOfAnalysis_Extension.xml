<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PIPInventTestCertOfAnalysis_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(InventTestCertOfAnalysis))]
public final class PIPInventTestCertOfAnalysis_Extension
{    
    private const int MaxRecordsParentAllows = 15;
    private List selectedCOAIds;
    private Set printedCOAIds;
    private boolean inRunOperation;
    private boolean isCustomerSpecific;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
    protected void prePromptModifyContract()
    {
        try
        {
            this.pipSaveExcessiveMarkedRecords();
    
            next prePromptModifyContract();
        }
        finally
        {
            this.pipRemarkRecords();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pipSaveExcessiveMarkedRecords</Name>
				<Source><![CDATA[
    private void pipSaveExcessiveMarkedRecords()
    {
        InventTestCertOfAnalysisTable inventTestCertOfAnalysisTableCaller = this.parmArgs().record() as InventTestCertOfAnalysisTable;
        FormDataSource formDataSource = FormDataUtil::getFormDataSource(inventTestCertOfAnalysisTableCaller);

        if (formDataSource)
        {
            selectedCOAIds = new List(Types::String);
            printedCOAIds = new Set(Types::String);

            MultiSelectionHelper selectHelper = MultiSelectionHelper::construct();
            selectHelper.parmDatasource(formDataSource);
            InventTestCertOfAnalysisTable certOfAnalysis = selectHelper.getFirst();
            int recordsToLeaveMarked = MaxRecordsParentAllows;

            while (certOfAnalysis)
            {
                if (isCustomerSpecific ? certOfAnalysis.PIPCustAccount == '' : certOfAnalysis.PIPCustAccount != '')
                {
                    throw error("@PIP1023");
                }
                
                if (recordsToLeaveMarked)
                {
                    recordsToLeaveMarked--;
                }
                else
                {
                    formDataSource.markRecord(certOfAnalysis, 0);
                    selectedCOAIds.addEnd(certOfAnalysis.InventCertificateOfAnalysisId);
                }

                certOfAnalysis = selectHelper.getNext();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pipRemarkRecords</Name>
				<Source><![CDATA[
    private void pipRemarkRecords()
    {
        if (!selectedCOAIds || !selectedCOAIds.elements())
        {
            return;
        }

        InventTestCertOfAnalysisTable inventTestCertOfAnalysisTableCaller = this.parmArgs().record() as InventTestCertOfAnalysisTable;
        FormDataSource formDataSource = FormDataUtil::getFormDataSource(inventTestCertOfAnalysisTableCaller);

        Query query = new Query();
        QueryBuildDataSource ds = query.addDataSource(tableNum(InventTestCertOfAnalysisTable));
        ds.addRange(fieldNum(InventTestCertOfAnalysisTable, InventCertificateOfAnalysisId)).value(con2Str(list2Con(selectedCOAIds), ','));

        QueryRun qr = new QueryRun(query);
        while (qr.next())
        {
            InventTestCertOfAnalysisTable certOfAnalysis = qr.get(tableNum(InventTestCertOfAnalysisTable));
            formDataSource.markRecord(certOfAnalysis, 1);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pipHasMoreToPrint</Name>
				<Source><![CDATA[
    private boolean pipHasMoreToPrint()
    {
        return selectedCOAIds != null && selectedCOAIds.elements() > printedCOAIds.elements();
    }

]]></Source>
			</Method>
			<Method>
				<Name>runOperation</Name>
				<Source><![CDATA[
    public void runOperation()
    {
        // Only need to validate the query the first time this runs since the user could have changed the ranges manually, even clearing or adding additional COA IDs
        // Recursive executions triggered below will only have COA IDs in the range that have been validated earlier.
        if (!inRunOperation)
        {
            this.pipCheckInitalQuery(this.getFirstQuery());
        }

        next runOperation();

        if (!inRunOperation && this.pipHasMoreToPrint())
        {
            inRunOperation = true;

            while (this.pipHasMoreToPrint())
            {
                Query query = this.getFirstQuery();
                QueryBuildDataSource queryBuildDataSource = query.dataSourceTable(tableNum(InventTestCertOfAnalysisTable));
                QueryBuildRange queryBuildRange = SysQuery::findOrCreateRange(queryBuildDataSource, fieldNum(InventTestCertOfAnalysisTable, InventCertificateOfAnalysisId));

                str idListRange;
                int remaining = MaxRecordsParentAllows;
                ListEnumerator coaEnumerator = selectedCOAIds.getEnumerator();
                while (remaining && coaEnumerator.moveNext())
                {
                    if (!printedCOAIds.in(coaEnumerator.current()))
                    {
                        printedCOAIds.add(coaEnumerator.current());
                        idListRange = queryRangeConcat(idListRange, queryValue(coaEnumerator.current()));
                        remaining--;
                    }
                }
                queryBuildRange.value(idListRange);

                this.runOperation();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pipCheckInitalQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks whether user selection includes both customer-specific COA's and regular COA's.
    /// </summary>
    /// <param name="_query">
    ///     The query object from which COA records will be retrieved.
    /// </param>
    /// <exception cref="Exception::Error">
    ///     Thrown when user selection includes general and customer-specific COA's.
    /// </exception>
    private void pipCheckInitalQuery(Query _query)
    {
        if (#PIPCustSpecificCOAEnabled)
        {
            Query coaQuery = new Query(_query);
    
            SysQuery::findOrCreateRange(coaQuery.dataSourceTable(tableNum(InventTestCertOfAnalysisTable)), fieldNum(InventTestCertOfAnalysisTable, PIPCustAccount)).value(isCustomerSpecific ? SysQuery::valueEmptyString() : SysQuery::valueNotEmptyString());
            
            if (QueryRun::getQueryRowCount(coaQuery, 1) > 0)
            {
                throw error("@PIP1023");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>startOperation</Name>
				<Source><![CDATA[
    public SysOperationStartResult startOperation()
    {
        InventTestCertOfAnalysisTable inventTestCertOfAnalysisTable = this.parmArgs().record();
        FormDataSource formDataSource = FormDataUtil::getFormDataSource(inventTestCertOfAnalysisTable);

        if (formDataSource)
        {
            inventTestCertOfAnalysisTable = formDataSource.getFirst(true) ? formDataSource.getFirst(true) : formDataSource.cursor();
        }

        if (inventTestCertOfAnalysisTable.PIPCustAccount)
        {
            isCustomerSpecific = true;
        }

        if (this.parmReportName() == ssrsReportStr(InventTestCertOfAnalysis, Report) && isCustomerSpecific)
        {
            this.parmReportName(ssrsReportStr(PIPInventTestCustSpecificCOA, Report));
        }

        return next startOperation();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>