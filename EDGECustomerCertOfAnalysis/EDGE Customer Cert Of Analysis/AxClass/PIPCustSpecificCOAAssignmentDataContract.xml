<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PIPCustSpecificCOAAssignmentDataContract</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>PIPCustSpeciifcCOAAssignmentContract</c> class contains the data contract for the
///     <c>PIPCustSpeciifcCOAAssignmentDataService</c> service.
/// </summary>
[
    DataContractAttribute,
    SysOperationContractProcessingAttribute(classstr(PIPCustSpecificCOAAssignmentUIBuilder))
]
public class PIPCustSpecificCOAAssignmentDataContract implements SysOperationValidatable
{
    str                             packedQuery;
    TableGroupAll                   customerCode;
    CustVendRel                     customerRelation;
    PIPExcludeFromCertOfAnalysis    excludeFromCOA;
    PIPUseCustBatchAttribRange      useCustBatchAttribRange;
    PIPReplacePassResultsOnCOA      replacePassResult;
    PIPReplaceFailResultsOnCOA      replaceFailResult;
    PIPSupressMinMaxValuesOnCOA     suppressMinMaxValues;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the query object associated with the data contract.
    /// </summary>
    /// <returns>
    ///     The packed query from the data contract.
    /// </returns>
    public Query getQuery()
    {
        return new Query(SysOperationHelper::base64Decode(packedQuery));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustomerCode</Name>
				<Source><![CDATA[
    [
        DataMemberAttribute('CustomerCode'),
        SysOperationLabelAttribute(literalStr("@SYS23780")),
        SysOperationDisplayOrderAttribute('1')
    ]
    public TableGroupAll parmCustomerCode(TableGroupAll _customerCode = customerCode)
    {
        customerCode = _customerCode;
        return customerCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustomerRelation</Name>
				<Source><![CDATA[
    [
        DataMemberAttribute('CustomerRelation'),
        SysOperationLabelAttribute(literalStr("@SYS23779")),
        SysOperationDisplayOrderAttribute('2')
    ]
    public CustVendRel parmCustomerRelation(CustVendRel _customerRelation = customerRelation)
    {
        customerRelation = _customerRelation;
        return customerRelation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExcludeFromCOA</Name>
				<Source><![CDATA[
    [
        DataMemberAttribute('ExcludeFromCOA'),
        SysOperationLabelAttribute(literalStr("@PIP977")),
        SysOperationDisplayOrderAttribute('3')
    ]
    public PIPExcludeFromCertOfAnalysis parmExcludeFromCOA(PIPExcludeFromCertOfAnalysis _excludeFromCOA = excludeFromCOA)
    {
        excludeFromCOA = _excludeFromCOA;
        return excludeFromCOA;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQuery</Name>
				<Source><![CDATA[
    [
        DataMemberAttribute,
        AifQueryTypeAttribute('_packedQuery', queryStr(PIPInventTestTable))
    ]
    public str parmQuery(str _packedQuery = packedQuery)
    {
        packedQuery = _packedQuery;
        return packedQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReplaceFailResult</Name>
				<Source><![CDATA[
    [
        DataMemberAttribute('ReplaceFailResult'),
        SysOperationLabelAttribute(literalStr("@PIP998")),
        SysOperationDisplayOrderAttribute('7')
    ]
    public PIPReplaceFailResultsOnCOA parmReplaceFailResult(PIPReplaceFailResultsOnCOA _replaceFailResult = replaceFailResult)
    {
        replaceFailResult = _replaceFailResult;
        return replaceFailResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReplacePassResult</Name>
				<Source><![CDATA[
    [
        DataMemberAttribute('ReplacePassResult'),
        SysOperationLabelAttribute(literalStr("@PIP996")),
        SysOperationDisplayOrderAttribute('6')
    ]
    public PIPReplacePassResultsOnCOA parmReplacePassResult(PIPReplacePassResultsOnCOA _replacePassResult = replacePassResult)
    {
        replacePassResult = _replacePassResult;
        return replacePassResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSupressMinMaxValues</Name>
				<Source><![CDATA[
    [
        DataMemberAttribute('SupressMinMaxValues'),
        SysOperationLabelAttribute(literalStr("@PIP994")),
        SysOperationDisplayOrderAttribute('5')
    ]
    public PIPSupressMinMaxValuesOnCOA parmSupressMinMaxValues(PIPSupressMinMaxValuesOnCOA _suppressMinMaxValues = suppressMinMaxValues)
    {
        suppressMinMaxValues = _suppressMinMaxValues;
        return suppressMinMaxValues;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUseCustBatchAttribRange</Name>
				<Source><![CDATA[
    [
        DataMemberAttribute('UseCustBatchAttribRange'),
        SysOperationLabelAttribute(literalStr("@PIP987")),
        SysOperationDisplayOrderAttribute('4')
    ]
    public PIPUseCustBatchAttribRange parmUseCustBatchAttribRange(PIPUseCustBatchAttribRange _useCustBatchAttribRange = useCustBatchAttribRange)
    {
        useCustBatchAttribRange = _useCustBatchAttribRange;
        return useCustBatchAttribRange;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the query object associated with the data contract.
    /// </summary>
    /// <param name="_query">
    ///     The query to be packed into data contract.
    /// </param>
    public void setQuery(Query _query)
    {
        packedQuery = SysOperationHelper::base64Encode(_query.pack());
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates the contract.
    /// </summary>
    /// <returns>
    ///     true if the contract is valid; otherwise, false.
    /// </returns>
    public boolean validate()
    {
        boolean ret = true;
    
        switch(customerCode)
        {
            case TableGroupAll::Table:
                if (!CustTable::exist(customerRelation))
                {
                    ret = checkFailed("@PIP1007");
    
                }
                break;
            case TableGroupAll::GroupId:
                if (!PIPInventTestCertOfAnalysisCustGroup::exist(customerRelation))
                {
                    ret = checkFailed("@PIP1007");
                }
                break;
            case TableGroupAll::All:
                if (customerRelation)
                {
                    ret = checkFailed("@PIP1007");
                }
                break;
        }
    
        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>