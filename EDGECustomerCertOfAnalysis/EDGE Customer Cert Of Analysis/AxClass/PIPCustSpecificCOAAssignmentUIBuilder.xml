<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PIPCustSpecificCOAAssignmentUIBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>PIPCustSpecificCOAAssignmentUIBuilder</c> class is customizing the UI for customer-specific
///     COA assignment to test group members.
/// </summary>
class PIPCustSpecificCOAAssignmentUIBuilder extends SysOperationAutomaticUIBuilder
{
    DialogField                                 fieldCustomerCode;
    DialogField                                 fieldCustomerRelation;
    DialogField                                 fieldExclude;
    DialogField                                 fieldUseCustSpecificRanges;
    DialogField                                 fieldSuppressMinMaxValues;
    DialogField                                 fieldReplacePassResults;
    DialogField                                 fieldReplaceFailResults;

    PIPCustSpecificCOAAssignmentDataContract    custSpecificCOAAssignmentDataContract;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkCustomerRelation</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates the customer relation against the cutomer code value.
    /// </summary>
    /// <param name="_control">
    ///     Reference of the string control.
    /// </param>
    /// <returns>
    ///     true if relationship is valid; otherwise, false.
    /// </returns>
    private boolean checkCustomerRelation(FormStringControl _control)
    {
        boolean     ok              = true;
        CustVendRel custRelation    = fieldCustomerRelation.value();
    
        switch(fieldCustomerCode.value())
        {
            case TableGroupAll::Table:
                if (!CustTable::exist(custRelation))
                {
                    ok = checkFailed("@PIP1007");
                }
                break;

            case TableGroupAll::GroupId:
                if (!PIPInventTestCertOfAnalysisCustGroup::exist(custRelation))
                {
                    ok = checkFailed("@PIP1007");
                }
                break;

            case TableGroupAll::All:
                if (custRelation)
                {
                    ok = checkFailed("@PIP1007");
                }
                break;
        }
    
        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupCustomerRelation</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Overrides the lookup method depending on whether table/group/all is selected for customer code.
    /// </summary>
    /// <param name="_control">
    ///     A <c>FormStringControl</c> reference for which to create the lookup.
    /// </param>
    public void lookupCustomerRelation(FormStringControl _control)
    {
        SysTableLookup          sysTableLookup;
        Query                   lookupQuery;
    
        switch (fieldCustomerCode.value())
        {
            case TableGroupAll::Table :
                CustTable::lookupCustomer(_control as FormStringControl);
                break;

            case TableGroupAll::GroupId :
                sysTableLookup = SysTablelookup::newParameters(tableNum(PIPInventTestCertOfAnalysisCustGroup), _control, true);
                sysTableLookup.addLookupfield(fieldNum(PIPInventTestCertOfAnalysisCustGroup, CustGroupId));
                sysTableLookup.addLookupfield(fieldNum(PIPInventTestCertOfAnalysisCustGroup, Description));
    
                lookupQuery = new Query();
                lookupQuery.addDataSource(tableNum(PIPInventTestCertOfAnalysisCustGroup));
                sysTableLookup.parmQuery(lookupQuery);
    
                sysTableLookup.performFormLookup();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modified</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Overrides the modified method for controls of type <c>FormCheckBoxControl</c>.
    /// </summary>
    /// <param name="_control">
    ///     A <c>FormCheckBoxControl</c> reference.
    /// </param>
    /// <returns>
    ///     true if field is modified; otherwise, false.
    /// </returns>
    public boolean modified(FormCheckBoxControl _control)
    {
        if (fieldExclude.value())
        {
            fieldUseCustSpecificRanges.value(false);
            fieldSuppressMinMaxValues.value(false);
            fieldReplaceFailResults.value("");
            fieldReplacePassResults.value("");
        }
    
        if (fieldUseCustSpecificRanges.value())
        {
            fieldSuppressMinMaxValues.value(NoYes::No);
        }
        if (fieldSuppressMinMaxValues.value())
        {
            fieldUseCustSpecificRanges.value(NoYes::No);
        }
    
        fieldUseCustSpecificRanges.enabled(!fieldExclude.value() && !fieldSuppressMinMaxValues.value());
        fieldSuppressMinMaxValues.enabled(!fieldExclude.value() && !fieldUseCustSpecificRanges.value());
        fieldReplaceFailResults.enabled(!fieldExclude.value());
        fieldReplacePassResults.enabled(!fieldExclude.value());
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postBuild</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the dialog fields and overrides the defaults in order to handle events on dialogs.
    /// </summary>
    public void postBuild()
    {
        super();
    
        custSpecificCOAAssignmentDataContract = this.dataContractObject();
    
        // get dialog fields
        fieldCustomerCode           =   this.bindInfo().getDialogField(custSpecificCOAAssignmentDataContract, methodstr(PIPCustSpecificCOAAssignmentDataContract, parmCustomerCode));
        fieldCustomerRelation       =   this.bindInfo().getDialogField(custSpecificCOAAssignmentDataContract, methodstr(PIPCustSpecificCOAAssignmentDataContract, parmCustomerRelation));
        fieldExclude                =   this.bindInfo().getDialogField(custSpecificCOAAssignmentDataContract, methodstr(PIPCustSpecificCOAAssignmentDataContract, parmExcludeFromCOA));
        fieldUseCustSpecificRanges  =   this.bindInfo().getDialogField(custSpecificCOAAssignmentDataContract, methodstr(PIPCustSpecificCOAAssignmentDataContract, parmUseCustBatchAttribRange));
        fieldSuppressMinMaxValues   =   this.bindInfo().getDialogField(custSpecificCOAAssignmentDataContract, methodstr(PIPCustSpecificCOAAssignmentDataContract, parmSupressMinMaxValues));
        fieldReplacePassResults     =   this.bindInfo().getDialogField(custSpecificCOAAssignmentDataContract, methodstr(PIPCustSpecificCOAAssignmentDataContract, parmReplacePassResult));
        fieldReplaceFailResults     =   this.bindInfo().getDialogField(custSpecificCOAAssignmentDataContract, methodstr(PIPCustSpecificCOAAssignmentDataContract, parmReplaceFailResult));
    
        // register override methods
        fieldCustomerRelation.registerOverrideMethod(methodStr(FormStringControl, lookup), methodStr(PIPCustSpecificCOAAssignmentUIBuilder, lookupCustomerRelation), this);
        fieldCustomerRelation.registerOverrideMethod(methodStr(FormStringControl, validate), methodStr(PIPCustSpecificCOAAssignmentUIBuilder, checkCustomerRelation), this);
        fieldCustomerCode.registerOverrideMethod(methodstr(FormComboBoxControl, selectionChange), methodstr(PIPCustSpecificCOAAssignmentUIBuilder, selectionChanged), this);
        fieldExclude.registerOverrideMethod(methodstr(FormCheckBoxControl, modified), methodstr(PIPCustSpecificCOAAssignmentUIBuilder, modified), this);
        fieldUseCustSpecificRanges.registerOverrideMethod(methodstr(FormCheckBoxControl, modified), methodstr(PIPCustSpecificCOAAssignmentUIBuilder, modified), this);
        fieldSuppressMinMaxValues.registerOverrideMethod(methodstr(FormCheckBoxControl, modified), methodstr(PIPCustSpecificCOAAssignmentUIBuilder, modified), this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectionChanged</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Overrides the selectionChanged method of a dialog field.
    /// </summary>
    /// <param name="_control">
    ///     Reference to the control.
    /// </param>
    public void selectionChanged(FormControl _control)
    {
        fieldCustomerRelation.value("");
    
        switch (fieldCustomerCode.value())
        {
            case TableGroupAll::Table   :
            case TableGroupAll::GroupId :
                fieldCustomerRelation.value("");
                fieldCustomerRelation.enabled(true);
                break;

            case TableGroupAll::All :
                fieldCustomerRelation.value("");
                fieldCustomerRelation.enabled(false);
                break;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>