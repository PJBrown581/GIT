<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PIPInventTestCustSpecificCOAController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventTestCertOfAnalysis</c> class is a controller class for the
///    <c>InventTestCertOfAnalysis</c> report.
/// </summary>
public class PIPInventTestCustSpecificCOAController extends SrsPrintMgmtController
{
    #define.MaxRange(15)

    SalesId                         salesId;
    TransDate                       packingSlipDate;
    SrsReportDataContract           contract;
    PrintCopyOriginal               printCopyOriginal;
    InventTestCertOfAnalysisTable   inventTestCertOfAnalysisTable;

    SRSPrintDestinationSettings     printSettings;

    private List                    selectedCOAIds;
    private Set                     printedCOAIds;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmPackingSlipDate</Name>
				<Source><![CDATA[
    public TransDate parmPackingSlipDate(TransDate _packingSlipDate = packingSlipDate)
    {
        packingSlipDate = _packingSlipDate;
        return packingSlipDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintType</Name>
				<Source><![CDATA[
    public PrintCopyOriginal parmPrintType(PrintCopyOriginal _parmPrintType = printCopyOriginal)
    {
        printCopyOriginal = _parmPrintType;
        return printCopyOriginal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintSettings</Name>
				<Source><![CDATA[
    public SRSPrintDestinationSettings parmPrintSettings(SRSPrintDestinationSettings _printSettings = printSettings)
    {
        printSettings = _printSettings;
        this.updatePrinterSettings(printSettings);
        return printSettings;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesId</Name>
				<Source><![CDATA[
    public SalesId parmSalesId(SalesId _salesId = salesId)
    {
        salesId = _salesId;
        return salesId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
    protected void prePromptModifyContract()
    {
        contract = this.parmReportContract();
    
        this.setRanges();
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    protected void preRunModifyContract()
    {
        SrsReportRdlDataContract dataContract = this.parmReportContract().parmRdlContract();
    
        #define.parameterPrintedFromPackingSlip('Parameter_PrintedFromPackingSlip')
    
        dataContract.setValue(#parameterPrintedFromPackingSlip, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>runPrintMgmt</Name>
				<Source><![CDATA[
    protected void runPrintMgmt()
    {
        printMgmtReportRun = PrintMgmtReportRun::construct(PrintMgmtHierarchyType::Invent, PrintMgmtNodeType::Invent, PrintMgmtDocumentType::PIPInventTestCustSpecificCertOfAnalysis);
    
        printMgmtReportRun.parmReportRunController(this);
    
        if (printSettings)
        {
            this.setSettingDetail(printSettings);
        }

        printMgmtReportRun.load(this.parmArgs().record(), this.parmArgs().record(), currentUserLanguage());
    
        if (printMgmtReportRun.more())
        {
            this.outputReports();
        }
        else
        {
            warning("@SYS78951");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRanges</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets ranges for a query for the <c>InventTestCertOfAnalysis</c> report.
    /// </summary>
    private void setRanges()
    {
        QueryBuildDataSource            queryBuildDataSource;
        QueryBuildRange                 queryBuildRange;
        Query                           q;
        str                             parmCOARecIds   = this.parmArgs().parm();
    
        q                       = this.getFirstQuery();
        queryBuildDataSource    = q.dataSourceTable(tableNum(InventTestCertOfAnalysisTable));
        queryBuildRange         = SysQuery::findOrCreateRange(queryBuildDataSource, fieldNum(InventTestCertOfAnalysisTable, InventCertificateOfAnalysisId));
    
        if (!parmCOARecIds)
        {
            throw Error(Error::wrongUseOfFunction(funcName()));
        }

        queryBuildRange.value(this.createRangeValueForFirstSetOfIds(parmCOARecIds));
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRangeValueForFirstSetOfIds</Name>
				<Source><![CDATA[
    private str createRangeValueForFirstSetOfIds(str _recordIdList)
    {
        str recordIdList = _recordIdList;

        // To maintain backwards compatibility this still uses a simple string with a comma separated list of COA ID values.
        container ids = str2con(recordIdList, ',', false);

        if (conLen(ids) > #MaxRange)
        {
            selectedCOAIds = new List(Types::String);
            printedCOAIds = new Set(Types::String);
            
            container firstSetOfIds;
            int i = 1;
            while (i <= #MaxRange)
            {
                firstSetOfIds += [conPeek(ids, i)];
                i++;
            }

            while (i <= conLen(ids))
            {
                selectedCOAIds.addEnd(conPeek(ids, i));
                i++;
            }

            recordIdList = con2Str(firstSetOfIds, ',');
        }

        return recordIdList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasMoreToPrint</Name>
				<Source><![CDATA[
    private boolean hasMoreToPrint()
    {
        return selectedCOAIds != null && selectedCOAIds.elements() > printedCOAIds.elements();
    }

]]></Source>
			</Method>
			<Method>
				<Name>runOperation</Name>
				<Source><![CDATA[
    public void runOperation()
    {
        super();

        while (this.hasMoreToPrint())
        {
            Query q = this.getFirstQuery();
            QueryBuildDataSource queryBuildDataSource = q.dataSourceTable(tableNum(InventTestCertOfAnalysisTable));
            QueryBuildRange queryBuildRange = SysQuery::findOrCreateRange(queryBuildDataSource, fieldNum(InventTestCertOfAnalysisTable, InventCertificateOfAnalysisId));

            str idListRange;
            int remaining = #MaxRange;
            ListEnumerator coaEnumerator = selectedCOAIds.getEnumerator();
            while (remaining && coaEnumerator.moveNext())
            {
                if (!printedCOAIds.in(coaEnumerator.current()))
                {
                    printedCOAIds.add(coaEnumerator.current());
                    idListRange = queryRangeConcat(idListRange, queryValue(coaEnumerator.current()));
                    remaining--;
                }
            }
            queryBuildRange.value(idListRange);

            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSettingDetail</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the print destination settings on the report.
    /// </summary>
    /// <param name="_printSettings">
    ///     The print destination settings that need to be used for the report.
    /// </param>
    /// <param name="_documentKeyValue">
    ///     A human readable value that uniquely identifies the document to be printed.
    /// </param>
    public void setSettingDetail(SRSPrintDestinationSettings _printSettings, str _documentKeyValue = '')
    {
        PrintMgmtPrintSettingDetail printSettingDetail      = new PrintMgmtPrintSettingDetail();
        PrintMgmtReportFormat       printMgmtReportFormat   = PrintMgmtReportFormat::findSystem(PrintMgmtDocumentType::PIPInventTestCustSpecificCertOfAnalysis);

        printSettingDetail.parmReportFormatName(printMgmtReportFormat.Name);
        printSettingDetail.parmSSRS(printMgmtReportFormat.SSRS);

        // Since this will be reported to the screen, one copy should be shown
        printSettingDetail.parmNumberOfCopies(1);

        printSettingDetail.parmPrintJobSettings(_printSettings);

        printMgmtReportRun.loadSettingDetail(printSettingDetail, _documentKeyValue);

        printMgmtReportRun.parmDefaultOriginalPrintJobSettings(_printSettings);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePrinterSettings</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Updates the printer settings for the report.
    /// </summary>
    /// <param name="_printerSettings">
    ///     An instance of the <c>SRSPrintDestinationSettings</c> class.
    /// </param>
    /// <param name="_originalCopy">
    ///     Indication of whether the report is an original or copy.
    /// </param>
    public void updatePrinterSettings(SRSPrintDestinationSettings _printerSettings, PrintSetupOriginalCopy _originalCopy = PrintSetupOriginalCopy::Original)
    {
        contract = this.parmReportContract();
        contract.parmPrintSettings(_printerSettings);
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes an instance of the <c>SRSReportRun</c> class, assigns range values, and runs the
    ///    <c>SRSReportRun</c> object.
    /// </summary>
    /// <param name="_args">
    ///    The args object.
    /// </param>
    /// <remarks>
    ///    This method assigns the <c>InventTestCertOfAnalysis</c> range with the specified values.
    /// </remarks>
    public static void main(Args _args)
    {
        PIPInventTestCustSpecificCOAController controller;
    
        if (_args.parm()
            || (_args.record() && _args.dataset() == tableNum(InventTestCertOfAnalysisTable)))
        {
            controller = new PIPInventTestCustSpecificCOAController();
            controller.parmArgs(_args);
            controller.parmReportName(ssrsReportStr(PIPInventTestCustSpecificCOA, Report));
            controller.parmShowDialog(false);
            controller.startOperation();
        }
        else
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>