<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PIPInventTestCertOfAnalysisCustReq</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PIPInventTestCertOfAnalysisCustReq extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkCustomerRelation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks that the combination of the fields <c>CustomerCode</c> and <c>CustomerRelation</c> is valid.
    /// </summary>
    /// <returns>
    ///    true if the combination is valid; otherwise, false.
    /// </returns>
    public boolean checkCustomerRelation()
    {
        boolean  ok = true;
    
        switch(this.CustomerCode)
        {
            case TableGroupAll::Table:
                if (!CustTable::exist(this.CustomerRelation))
                {
                    ok = checkFailed("@PIP1007");
                }
                break;
            case TableGroupAll::GroupId:
                if (!PIPInventTestCertOfAnalysisCustGroup::exist(this.CustomerRelation))
                {
                    ok = checkFailed("@PIP1007");
                }
                break;
            case TableGroupAll::All:
                if (this.CustomerRelation)
                {
                    ok = checkFailed("@PIP1007");
                }
                break;
        }
    
        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);
    
        switch(_fieldId)
        {
            case fieldNum(PIPInventTestCertOfAnalysisCustReq, ExcludeFromCOA) :
                if (this.ExcludeFromCOA)
                {
                    this.ReplaceFailResults         = "";
                    this.ReplacePassResults         = "";
                    this.SupressMinMaxValues        = NoYes::No;
                    this.UseCustBatchAttribRange    = NoYes::No;
                }
                break;
            case fieldNum(PIPInventTestCertOfAnalysisCustReq, UseCustBatchAttribRange) :
                if (this.UseCustBatchAttribRange)
                {
                    this.SupressMinMaxValues = NoYes::No;
                }
                break;
            case fieldNum(PIPInventTestCertOfAnalysisCustReq, SupressMinMaxValues) :
                if (this.SupressMinMaxValues)
                {
                    this.UseCustBatchAttribRange = NoYes::No;
                }
                break;
            case fieldNum(PIPInventTestCertOfAnalysisCustReq, CustomerCode) :
                this.CustomerRelation = "";
                break;
            case fieldNum(PIPInventTestCertOfAnalysisCustReq, CustomerRelation) :
                this.checkCustomerRelation();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>orderLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the quality order line associated with the given record.
    /// </summary>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///     A record from the <c>InventQualityOrderLine</c> table.
    /// </returns>
    public InventQualityOrderLine orderLine(boolean _forUpdate = false)
    {
        InventQualityOrderLine  inventQualityOrderLine;
    
        inventQualityOrderLine.selectForUpdate(_forUpdate);
    
        if (this.RefTableId == tableNum(InventQualityOrderLine))
        {
            select firstOnly inventQualityOrderLine
                where this.RefRecId     == inventQualityOrderLine.RecId
                    && this.RefTableId  == inventQualityOrderLine.TableId;
        }
    
        return inventQualityOrderLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;
    
        ret = super();
    
        ret = ret && this.checkCustomerRelation();
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyFromTestGroupMember</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Copies all customer-specific COA requirements from a given test group member to a quality order line.
    /// </summary>
    /// <param name="_inventTestGroupMember">
    ///     The <c>InventTestGroupMember</c> record to be copied from.
    /// </param>
    /// <param name="_inventQualityOrderLine">
    ///     The <c>InventTestQualityOrderLine</c> record to be copied to.
    /// </param>
    public server static void copyFromTestGroupMember(InventTestGroupMember _inventTestGroupMember, InventQualityOrderLine _inventQualityOrderLine)
    {
        PIPInventTestCertOfAnalysisCustReq  testGroupMemberCOACustReq;
        PIPInventTestCertOfAnalysisCustReq  qualityOrderLineCOACustReq;
    
        if (_inventTestGroupMember
            && PIPInventTestCertOfAnalysisCustReq::existReference(_inventTestGroupMember))
        {
            qualityOrderLineCOACustReq.RefTableId   = _inventQualityOrderLine.TableId;
            qualityOrderLineCOACustReq.RefRecId     = _inventQualityOrderLine.RecId;
    
            ttsBegin;
            RecordInsertList custReqInserter = new RecordInsertList(tableNum(PIPInventTestCertOfAnalysisCustReq));
            while select testGroupMemberCOACustReq
                where testGroupMemberCOACustReq.RefTableId  == _inventTestGroupMember.TableId
                    && testGroupMemberCOACustReq.RefRecId   == _inventTestGroupMember.RecId
            {
                qualityOrderLineCOACustReq.CustomerCode             = testGroupMemberCOACustReq.CustomerCode;
                qualityOrderLineCOACustReq.CustomerRelation         = testGroupMemberCOACustReq.CustomerRelation;
                qualityOrderLineCOACustReq.ExcludeFromCOA           = testGroupMemberCOACustReq.ExcludeFromCOA;
                qualityOrderLineCOACustReq.UseCustBatchAttribRange  = testGroupMemberCOACustReq.UseCustBatchAttribRange;
                qualityOrderLineCOACustReq.SupressMinMaxValues      = testGroupMemberCOACustReq.SupressMinMaxValues;
                qualityOrderLineCOACustReq.ReplaceFailResults       = testGroupMemberCOACustReq.ReplaceFailResults;
                qualityOrderLineCOACustReq.ReplacePassResults       = testGroupMemberCOACustReq.ReplacePassResults;
    
                custReqInserter.add(qualityOrderLineCOACustReq);
            }
            custReqInserter.insertDatabase();
            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the specified record in the <c>PIPInventTestCertOfAnalysisCustReq</c> table exists.
    /// </summary>
    /// <param name="_inventTestCertOfAnalysisCustReqRecId">
    ///    The surrogate record id for the Certificate of analysis customer requirement.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(PIPInventTestCertOfAnalysisCustReqRecId _inventTestCertOfAnalysisCustReqRecId)
    {
        return _inventTestCertOfAnalysisCustReqRecId
            && (select firstonly PIPInventTestCertOfAnalysisCustReq
                    where PIPInventTestCertOfAnalysisCustReq.RecId == _inventTestCertOfAnalysisCustReqRecId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existReference</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether any customer-specific COA requirements exist for the given record.
    /// </summary>
    /// <param name="_common">
    ///    The record to be used for finding any references.
    /// </param>
    /// <returns>
    ///     true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean existReference(Common _common)
    {
        return (select PIPInventTestCertOfAnalysisCustReq
                    where PIPInventTestCertOfAnalysisCustReq.RefTableId == _common.TableId
                        && PIPInventTestCertOfAnalysisCustReq.RefRecId  == _common.RecId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>PIPInventTestCertOfAnalysisCustReq</c> table.
    /// </summary>
    /// <param name="_inventTestCertOfAnalysisCustReqRecId">
    ///    The surrogate key value to find.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>PIPInventTestCertOfAnalysisCustReq</c> table; otherwise, an empty record.
    /// </returns>
    public static PIPInventTestCertOfAnalysisCustReq find(PIPInventTestCertOfAnalysisCustReqRecId _inventTestCertOfAnalysisCustReqRecId, boolean _forUpdate = false)
    {
        PIPInventTestCertOfAnalysisCustReq  inventTestCertOfAnalysisCustReq;
    
        inventTestCertOfAnalysisCustReq.selectForUpdate(_forUpdate);
    
        if (_inventTestCertOfAnalysisCustReqRecId)
        {
            select firstonly inventTestCertOfAnalysisCustReq
                where inventTestCertOfAnalysisCustReq.RecId == _inventTestCertOfAnalysisCustReqRecId;
        }
    
        return inventTestCertOfAnalysisCustReq;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByOrderLineAndCust</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds the customer specific COA requirements for the given quality order line and customer references.
    /// </summary>
    /// <param name="_custTable">
    ///     A record from <c>CustTable</c> to be used as reference.
    /// </param>
    /// <param name="_orderLineRecId">
    ///     The record Id of the quality order line reference.
    /// </param>
    /// <param name="_forUpdate">
    ///     A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///     A record in the <c>PIPInventTestCertOfAnalysisCustReq</c> table; otherwise, an empty record.
    /// </returns>
    public static PIPInventTestCertOfAnalysisCustReq findByOrderLineAndCust(
        CustTable               _custTable,
        RefRecId                _orderLineRecId,
        boolean                 _forUpdate = false)
    {
        PIPInventTestCertOfAnalysisCustReq  inventTestCertOfAnalysisCustReq;
    
        inventTestCertOfAnalysisCustReq.selectForUpdate(_forUpdate);
    
        if (_custTable)
        {
            select firstonly inventTestCertOfAnalysisCustReq
                order by CustomerCode
                where inventTestCertOfAnalysisCustReq.RefRecId              == _orderLineRecId
                    && inventTestCertOfAnalysisCustReq.RefTableId           == tableNum(InventQualityOrderLine)
                    && ((inventTestCertOfAnalysisCustReq.CustomerCode       == TableGroupAll::Table
                        && inventTestCertOfAnalysisCustReq.CustomerRelation == _custTable.AccountNum)
                    || (inventTestCertOfAnalysisCustReq.CustomerCode        == TableGroupAll::GroupId
                        && inventTestCertOfAnalysisCustReq.CustomerRelation == _custTable.PIPCertOfAnalysisCustGroup)
                    || inventTestCertOfAnalysisCustReq.CustomerCode         == TableGroupAll::All);
        }
    
        return inventTestCertOfAnalysisCustReq;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findReqForGrpMemberAndCustomer</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds the customer specific COA requirements for given quality test group member and customer references.
    /// </summary>
    /// <param name="_customerCode">
    ///     The Table/Group/All option reference to look for.
    /// </param>
    /// <param name="_customerRelation">
    ///     The customer relation to be used as reference.
    /// </param>
    /// <param name="_testGroupMember">
    ///     The test group member record to which the COA requirement is attached.
    /// </param>
    /// <param name="_forUpdate">
    ///     A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///     A record in the <c>PIPInventTestCertOfAnalysisCustReq</c> table; otherwise, an empty record.
    /// </returns>
    public static PIPInventTestCertOfAnalysisCustReq findReqForGrpMemberAndCustomer
    (
        TableGroupAll           _customerCode,
        CustVendRel             _customerRelation,
        InventTestGroupMember   _testGroupMember,
        boolean                 _forUpdate = false
    )
    {
        PIPInventTestCertOfAnalysisCustReq  inventTestCertOfAnalysisCustReq;
    
        inventTestCertOfAnalysisCustReq.selectForUpdate(_forUpdate);
    
        if (_testGroupMember)
        {
            select firstOnly inventTestCertOfAnalysisCustReq
                where inventTestCertOfAnalysisCustReq.CustomerCode      == _customerCode
                    && inventTestCertOfAnalysisCustReq.CustomerRelation == _customerRelation
                    && inventTestCertOfAnalysisCustReq.RefRecId         == _testGroupMember.RecId
                    && inventTestCertOfAnalysisCustReq.RefTableId       == _testGroupMember.TableId;
        }
    
        return inventTestCertOfAnalysisCustReq;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PIPCustSpecificCOA</ConfigurationKey>
	<DeveloperDocumentation>@PIP1020</DeveloperDocumentation>
	<FormRef>PIPInventTestCertOfAnalysisCustReq</FormRef>
	<Label>@PIP1002</Label>
	<TitleField1>CustomerCode</TitleField1>
	<TitleField2>CustomerRelation</TitleField2>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CustomerCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustomerRelation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExcludeFromCOA</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReplacePassResults</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReplaceFailResults</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SupressMinMaxValues</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UseCustBatchAttribRange</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CustomerCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustomerRelation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExcludeFromCOA</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReplaceFailResults</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReplacePassResults</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SupressMinMaxValues</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UseCustBatchAttribRange</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RefRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RefTableId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustomerCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustomerRelation</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CustomerCode</Name>
			<HelpText>@PIP1059</HelpText>
			<Label>@SYS23780</Label>
			<EnumType>TableGroupAll</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustomerRelation</Name>
			<ExtendedDataType>CustVendRel</ExtendedDataType>
			<HelpText>@PIP1060</HelpText>
			<StringSize>20</StringSize>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ExcludeFromCOA</Name>
			<ExtendedDataType>PIPExcludeFromCertOfAnalysis</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RefRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<HelpText>@SYS12233</HelpText>
			<Label>@SYS22569</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>RefTableId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>RefTableId</ExtendedDataType>
			<HelpText>@SYS22567</HelpText>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ReplaceFailResults</Name>
			<ExtendedDataType>PIPReplaceFailResultsOnCOA</ExtendedDataType>
			<StringSize>30</StringSize>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ReplacePassResults</Name>
			<ExtendedDataType>PIPReplacePassResultsOnCOA</ExtendedDataType>
			<StringSize>30</StringSize>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SupressMinMaxValues</Name>
			<ExtendedDataType>PIPSupressMinMaxValuesOnCOA</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>UseCustBatchAttribRange</Name>
			<ExtendedDataType>PIPUseCustBatchAttribRange</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>InventTestCertOfAnalysisIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>RefTableId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RefRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CustomerCode</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CustomerRelation</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>CustTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>CustomerCode</Name>
					<Field>CustomerCode</Field>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustomerRelation</Name>
					<Field>CustomerRelation</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventQualityOrderLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventQualityOrderLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefRecId</Name>
					<Field>RefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefTableId</Name>
					<Field>RefTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventTestGroupMember</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>InventTestGroupMember</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefRecId</Name>
					<Field>RefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefTableId</Name>
					<Field>RefTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PIPInventTestCertOfAnalysisCustGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PIPInventTestCertOfAnalysisCustGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>CustomerCode</Name>
					<Field>CustomerCode</Field>
					<Value>1</Value>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustomerRelation</Name>
					<Field>CustomerRelation</Field>
					<RelatedField>CustGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>