<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PIPUpgradeApprovedCustomerList</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PIPUpgradeApprovedCustomerList</c> class fills in new fields in the <c>PIPApprvoedCustomerList</c> table as necesary for the feature update.
/// </summary>
public class PIPUpgradeApprovedCustomerList
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        // empty
    }

]]></Source>
			</Method>
			<Method>
				<Name>Application_onDbSynchronize</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="tableId"></param>
    /// <param name="syncAsNeeded"></param>
    /// <param name="continueOnError"></param>
    /// <param name="showProgress"></param>
    /// <param name="checkSyncTables"></param>
    /// <param name="createAllIndexes"></param>
    /// <param name="useLockForSingleTable"></param>
    [SubscribesTo(classStr(Application), delegateStr(Application, onDbSynchronize))]
    public static void Application_onDbSynchronize(TableId tableId, boolean syncAsNeeded, boolean continueOnError, boolean showProgress, container checkSyncTables, boolean createAllIndexes, boolean useLockForSingleTable)
    {
        if (#PIPApprovedCustomerListEnabled 
            && (tableId == 0 || tableId == tableNum(PIPApprovedCustomerList)))
        {
            PIPUpgradeApprovedCustomerList upgrade = PIPUpgradeApprovedCustomerList::construct();
            upgrade.updateAllCompanies();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAllCompanies</Name>
				<Source><![CDATA[
    private void updateAllCompanies()
    {
        boolean changed = false;

        PIPApprovedCustomerList approvedCustomerList;
        while select crosscompany approvedCustomerList
            group by DataAreaId
            where approvedCustomerList.InventDimId == ''
        {
            changecompany(approvedCustomerList.DataAreaId)
            {
                setPrefix(strFmt("@SYS110249", approvedCustomerList.DataAreaId));
                this.run();

                changed = true;
            }
        }

        if (!changed)
        {
            info("@PIP5102");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the upgrade.
    /// </summary>
    public void run()
    {
        boolean needsUpdate = (select PIPApprovedCustomerList where PIPApprovedCustomerList.InventDimId == '').RecId != 0;

        if (needsUpdate)
        {
            InventDimId blankDimId = InventDim::inventDimIdBlank();

            ttsbegin;

            PIPApprovedCustomerList approvedCustomerList;
            approvedCustomerList.skipDataMethods(true);
            approvedCustomerList.validTimeStateUpdateMode(ValidTimeStateUpdate::Correction);

            update_recordset approvedCustomerList
                setting InventDimId = blankDimId
                where approvedCustomerList.InventDimId == '';

            ttscommit;

            info("@PIP5101");
        }
        else
        {
            info("@PIP5102");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PIPUpgradeApprovedCustomerList construct()
    {
        return new PIPUpgradeApprovedCustomerList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        PIPUpgradeApprovedCustomerList upgrade = PIPUpgradeApprovedCustomerList::construct();

        upgrade.updateAllCompanies();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>