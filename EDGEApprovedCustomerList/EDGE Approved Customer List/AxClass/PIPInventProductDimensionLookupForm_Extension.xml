<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PIPInventProductDimensionLookupForm_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(formStr(InventProductDimensionLookup))]
public final class PIPInventProductDimensionLookupForm_Extension
{
    private boolean approvedCombinationVisible;
    private boolean approvedCombinationTabIsActiveInSelectMode;
    private CustAccount custAccount;
    private date fromDate;
    private date toDate;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>InventProductDimensionLookup_Post_init</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="args"></param>
    [PostHandlerFor(formStr(InventProductDimensionLookup), formMethodStr(InventProductDimensionLookup, init))]
    public static void InventProductDimensionLookup_Post_init(XppPrePostArgs args)
    {
        FormRun form = args.getThis();
        form.pipInitPost();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pipInitPost</Name>
				<Source><![CDATA[
    private void pipInitPost()
    {
        ItemId  callerItemId                        = this.inventDimSetupObject().callerItemId();
        boolean hasCallerItemId                     = this.inventDimSetupObject().hasCallerItemId();
        boolean hasCallerInventDim                  = this.inventDimSetupObject().callerInventDimFormDatasource() != null;
        FormDataSource callerItemIdDataSource       = this.inventDimSetupObject().callerItemIdFormDatasource();

        approvedCombinationVisible = hasCallerItemId && hasCallerInventDim && callerItemIdDataSource != null;

        if (approvedCombinationVisible)
        {
            switch (callerItemIdDataSource.cursor().TableId)
            {
                case (tableNum(SalesLine)):
                    SalesLine salesLine = callerItemIdDataSource.cursor();
                    custAccount = salesLine.CustAccount;
                    fromDate = salesLine.pipACLDate();
                    break;
        
                case (tableNum(SalesQuotationLine)):
                    SalesQuotationLine salesQuotationLine = callerItemIdDataSource.cursor();
                    custAccount = salesQuotationLine.CustAccount;
                    fromDate = salesQuotationLine.pipACLDate();
                    break;
        
                case (tableNum(AgreementLine)):
                case (tableNum(AgreementLineQuantityCommitment)):
                case (tableNum(AgreementLineVolumeCommitment)):
                    {
                        AgreementLine agreementLine = callerItemIdDataSource.cursor();
                        SalesAgreementHeader salesAgreementHeader = SalesAgreementHeader::find(agreementLine.agreementHeader().RecId);
                        custAccount = salesAgreementHeader.CustAccount;
                        fromDate = agreementLine.pipACLFromDate(salesAgreementHeader);
                        toDate = agreementLine.pipACLToDate(salesAgreementHeader);
                    }
                    break;

                case (tableNum(SalesCreateReleaseOrderLineTmp)):
                    {
                        SalesCreateReleaseOrderLineTmp salesCreateReleaseOrderLineTmp = callerItemIdDataSource.cursor();
                        AgreementLine agreementLine = AgreementLine::find(salesCreateReleaseOrderLineTmp.AgreementLineQuantityCommitment);
                        SalesAgreementHeader salesAgreementHeader = agreementLine.agreementHeader();
                        custAccount = salesAgreementHeader.CustAccount;
                        fromDate = agreementLine.pipACLFromDate(salesAgreementHeader);
                        toDate = agreementLine.pipACLToDate(salesAgreementHeader);
                    }
                    break;

                default:
                    approvedCombinationVisible = false;
                    break;
            }

            approvedCombinationVisible = approvedCombinationVisible && PIPApprovedCustomerList::existValidItemForCustomer(custAccount, callerItemId, fromDate, toDate);
        }

        PIPACLCtrlTabPageApprovedCombination.visible(approvedCombinationVisible);

        if (approvedCombinationVisible)
        {
            this.pipAddDimensionsToCombinationsGrid();

            if (this.inventDimSetupObject().hasCallerInventDimParm())
            {
                PIPACLSelectAllCombi.value(selectAllCombi);
            }
            else
            {
                PIPACLSelectAllCombi.visible(false);
            }

            PIPApprovedCustomerList::getApprovedItemVariants(CustTable::find(custAccount), InventTable::find(this.inventDimSetupObject().callerItemId()), fromDate, toDate, PIPInventDimCombinationApproved);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pipAddDimensionsToCombinationsGrid</Name>
				<Source><![CDATA[
    private void pipAddDimensionsToCombinationsGrid()
    {
        FieldId dimFieldIdForLookup = this.inventDimSetupObject().parmMainSortFieldId();

        InventDimensionEnumerator productDimensionsEnumerator = InventProductDimension::getEnumeratorForEnabledOrderedDimensions();
        FormControl gridCombinationControl = this.design().controlName(formControlStr(InventProductDimensionLookup, PIPACLEcoResProductAllVariants_DisplayProductNumber));

        InventDim current = PIPInventDimApproved_ds.cursor();

        Query query = PIPInventDimApproved_ds.query();

        // Lookup dimension field is always placed first
        gridCombinationControl = PIPACLGridCombination.addDataField(PIPInventDimApproved_ds.id(), dimFieldIdForLookup, gridCombinationControl);

        while (productDimensionsEnumerator.moveNext())
        {
            if (productDimensionsEnumerator.currentInventDimFieldId() != dimFieldIdForLookup)
            {
                gridCombinationControl = PIPACLGridCombination.addDataField(PIPInventDimApproved_ds.id(), productDimensionsEnumerator.currentInventDimFieldId(), gridCombinationControl);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>PIPInventDimCombinationApproved_OnInitialized</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormDataSourceEventHandler(formDataSourceStr(InventProductDimensionLookup, PIPInventDimCombinationApproved), FormDataSourceEventType::Initialized)]
    public static void PIPInventDimCombinationApproved_OnInitialized(FormDataSource sender, FormDataSourceEventArgs e)
    {
        FormRun form = sender.formRun();
        form.pipInventDimCombinationInit(sender);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pipInventDimCombinationInit</Name>
				<Source><![CDATA[
    private void pipInventDimCombinationInit(FormDataSource ds)
    {
        QueryBuildDataSource qbds = ds.query().dataSourceName(ds.name());
        qbds.clearDynalinks();
        qbds.sortClear();

        FieldId fieldId = this.inventDimSetupObject().callerItemFieldId();

        if (fieldId)
        {
            qbds.addDynalink(
                fieldNum(PIPTmpInventDimCombination, ItemId),
                this.inventDimSetupObject().callerItemIdFormDatasource().cursor(),
                fieldId);
        }
        else
        {
            qbds.addRange(fieldNum(PIPTmpInventDimCombination,ItemId)).value(this.inventDimSetupObject().callerItemId());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>PIPInventDimApproved_OnInitialized</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormDataSourceEventHandler(formDataSourceStr(InventProductDimensionLookup, PIPInventDimApproved), FormDataSourceEventType::Initialized)]
    public static void PIPInventDimApproved_OnInitialized(FormDataSource sender, FormDataSourceEventArgs e)
    {
        FormRun form = sender.formRun();
        form.pipSetInventDimSortOrder(sender.queryBuildDataSource());
    }

]]></Source>
			</Method>
			<Method>
				<Name>pipSetInventDimSortOrder</Name>
				<Source><![CDATA[
    private void pipSetInventDimSortOrder(QueryBuildDataSource _ds)
    {
        _ds.sortClear();
        _ds.addOrderByField(this.inventDimSetupObject().parmMainSortFieldId(), SortOrder::Ascending);
    }

]]></Source>
			</Method>
			<Method>
				<Name>PIPEcoResProductApproved_OnInitialized</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormDataSourceEventHandler(formDataSourceStr(InventProductDimensionLookup, PIPEcoResProductApproved), FormDataSourceEventType::Initialized)]
    public static void PIPEcoResProductApproved_OnInitialized(FormDataSource sender, FormDataSourceEventArgs e)
    {
        sender.queryBuildDataSource().addLink(fieldNum(PIPTmpInventDimCombination, DistinctProductVariant), fieldNum(EcoResProduct, RecId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>PIPACLCtrlTabPageApprovedCombination_OnPageActivated</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormControlEventHandler(formControlStr(InventProductDimensionLookup, PIPACLCtrlTabPageApprovedCombination), FormControlEventType::PageActivated)]
    public static void PIPACLCtrlTabPageApprovedCombination_OnPageActivated(FormControl sender, FormControlEventArgs e)
    {
        FormRun form = sender.formRun();
        form.pipApprovedCombinationActivated();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pipApprovedCombinationActivated</Name>
				<Source><![CDATA[
    private void pipApprovedCombinationActivated()
    {
        PIPACLLinkDimCombi.value(linkDimVariants);
        PIPACLSelectAllCombi.value(selectAllCombi);
    }

]]></Source>
			</Method>
			<Method>
				<Name>PIPACLSelectAllCombi_OnClicked</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormControlEventHandler(formControlStr(InventProductDimensionLookup, PIPACLSelectAllCombi), FormControlEventType::Clicked)]
    public static void PIPACLSelectAllCombi_OnClicked(FormControl sender, FormControlEventArgs e)
    {
        FormRun formRun = sender.formRun();
        formRun.pipSelectAllCombiClicked();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pipSelectAllCombiClicked</Name>
				<Source><![CDATA[
    private void pipSelectAllCombiClicked()
    {
        ctrlSelectAllCombi.clicked();
        ctrlSelectAllCombi.value(selectAllCombi);
    }

]]></Source>
			</Method>
			<Method>
				<Name>InventProductDimensionLookup_Pre_setSelectMode</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="args"></param>
    [PreHandlerFor(formStr(InventProductDimensionLookup), formMethodStr(InventProductDimensionLookup, setSelectMode))]
    public static void InventProductDimensionLookup_Pre_setSelectMode(XppPrePostArgs args)
    {
        FormRun form = args.getThis();
        form.pipSetSelectModePre();
    }

]]></Source>
			</Method>
			<Method>
				<Name>InventProductDimensionLookup_Post_setSelectMode</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="args"></param>
    [PostHandlerFor(formStr(InventProductDimensionLookup), formMethodStr(InventProductDimensionLookup, setSelectMode))]
    public static void InventProductDimensionLookup_Post_setSelectMode(XppPrePostArgs args)
    {
        FormRun form = args.getThis();
        form.pipSetSelectMode();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pipSetSelectModePre</Name>
				<Source><![CDATA[
    private void pipSetSelectModePre()
    {
        approvedCombinationTabIsActiveInSelectMode = approvedCombinationVisible && PIPACLCtrlTabPageApprovedCombination.isActivePage();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pipSetSelectMode</Name>
				<Source><![CDATA[
    private void pipSetSelectMode()
    {
        if (approvedCombinationTabIsActiveInSelectMode)
        {
            selectedControl = this.pipFindDimensionControl(PIPACLGridCombination, this.inventDimSetupObject().parmMainSortFieldId());
            selectedFormDataSource = PIPInventDimApproved_ds;
            this.selectMode(selectedControl);
            selectedControl.setFocus();

            approvedCombinationTabIsActiveInSelectMode = false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>PIPACLCtrlTabPageApprovedCombination_OnAllowPageDeactivate</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormControlEventHandler(formControlStr(InventProductDimensionLookup, PIPACLCtrlTabPageApprovedCombination), FormControlEventType::AllowPageDeactivate)]
    public static void PIPACLCtrlTabPageApprovedCombination_OnAllowPageDeactivate(FormControl sender, FormControlEventArgs e)
    {
        FormRun form = sender.formRun();
        form.pipAllowPageDeactivate(e);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pipAllowPageDeactivate</Name>
				<Source><![CDATA[
    private void pipAllowPageDeactivate(FormControlEventArgs e)
    {
        FormControlCancelEventArgs cancelEvent = e as FormControlCancelEventArgs;
        if (approvedCombinationTabIsActiveInSelectMode)
        {
            cancelEvent.cancel(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pipFindDimensionControl</Name>
				<Source><![CDATA[
    // Copied from original form since the method is private
    protected FormStringControl pipFindDimensionControl(Object _parentControl, FieldId _inventDimDataFieldId)
    {
        FormStringControl   dimensionControl;
        FormControl         control;
        int                 controlsCount;
        int                 i;

        //loop all child controls of a container (grid, group) and find the one that has
        //data field the same as passed InventDim field
        controlsCount = _parentControl.controlCount();
        for (i = 1; i <= controlsCount; ++i)
        {
            control = _parentControl.controlNum(i);
            if (control is FormStringControl)
            {
                dimensionControl = control as FormStringControl;
                if (   dimensionControl.dataSource()                        == _parentControl.dataSource()
                    && Global::fieldExt2Id(dimensionControl.dataField())    == _inventDimDataFieldId)
                {
                    return dimensionControl;
                }
            }
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>InventProductDimensionLookup_Pre_closeSelect</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="args"></param>
    [PreHandlerFor(formStr(InventProductDimensionLookup), formMethodStr(InventProductDimensionLookup, closeSelect))]
    public static void InventProductDimensionLookup_Pre_closeSelect(XppPrePostArgs args)
    {
        FormRun form = args.getThis();
        form.pipCloseSelect();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pipCloseSelect</Name>
				<Source><![CDATA[
    private void pipCloseSelect()
    {
        if (canSelect && selectAllCombi && PIPACLCtrlTabPageApprovedCombination.visible() && PIPACLCtrlTabPageApprovedCombination.isActivePage())
        {
            FormDataSource callerInventDimDS = this.inventDimSetupObject().callerInventDimFormDatasource();

            if (callerInventDimDS)
            {
                InventDim callerInventDim = callerInventDimDS.cursor() as InventDim;

                Enumerator enum = InventDim::dimProductDimensionEnabledFieldList().getEnumerator();

                while (enum.moveNext())
                {
                    FieldId fieldId = enum.current();

                    if (PIPInventDimApproved.(fieldId))
                    {
                        FormControl control = this.pipFindDimensionControl(PIPACLGridCombination, fieldId);
                        if (control && control.visible())
                        {
                            callerInventDim.(fieldId) = PIPInventDimApproved.(fieldId);
                        }
                    }
                }
                                
                callerInventDimDS.refresh();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>PIPACLLinkDimCombi_OnClicked</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormControlEventHandler(formControlStr(InventProductDimensionLookup, PIPACLLinkDimCombi), FormControlEventType::Clicked)]
    public static void PIPACLLinkDimCombi_OnClicked(FormControl sender, FormControlEventArgs e)
    {
        FormRun form = sender.formRun();
        form.pipACLLinkDimCombiClicked();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pipACLLinkDimCombiClicked</Name>
				<Source><![CDATA[
    private void pipACLLinkDimCombiClicked()
    {
        ctrlLinkDimCombi.clicked();
        ctrlLinkDimCombi.value(linkDimVariants);

        PIPInventDimApproved_ds.executeQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>PIPInventDimApproved_OnQueryExecuting</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormDataSourceEventHandler(formDataSourceStr(InventProductDimensionLookup, PIPInventDimApproved), FormDataSourceEventType::QueryExecuting)]
    public static void PIPInventDimApproved_OnQueryExecuting(FormDataSource sender, FormDataSourceEventArgs e)
    {
        FormRun form = sender.formRun() as FormRun;
        form.pipInventDimApprovedQueryExecuting(sender);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pipInventDimApprovedQueryExecuting</Name>
				<Source><![CDATA[
    private void pipInventDimApprovedQueryExecuting(FormDataSource sender)
    {
        if (!PIPACLCtrlTabPageApprovedCombination.visible())
        {
            return;
        }

        if (this.inventDimSetupObject().hasCallerItemId())
        {
            this.inventDimSetupObject().executeInventDimLinkDimQueryDS(sender.query().dataSourceName(PIPInventDimApproved_ds.name()), linkDimVariants);
            this.updateDesign(InventDimFormDesignUpdate::LinkActive);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>