<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PIPSalesQuickQuote_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(formStr(SalesQuickQuote))]
public final class PIPSalesQuickQuote_Extension
{
    private CustTable               custTable;
    private ValidFromDate           aclDate;
    private boolean                 aclActive;
    private QueryBuildDataSource    dsApprovedItems;
    private QueryBuildDataSource    dsApprovedItems2;
    private QueryBuildDataSource    dsApprovedDimCombination;
    private QueryBuildDataSource    dsApprovedDimCombination2;
    private TmpPIPApprovedItems     pipApprovedItems;

    private PIPTmpInventDimCombination  pipApprovedInventDimCombination;
    private Map                         existVariantCache;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>pipInitACL</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the approved customer list section of the form.
    /// </summary>
    public void pipInitACL()
    {
        SalesQuotationTable     salesQuotationTable;
        SalesTable              localSalesTable;
        FormDataSource          formDataSource;
        Common                  callerRecord;
    
        switch(this.args().dataset())
        {
            case tableNum(SalesTable) :
                localSalesTable = this.args().record();
                custTable = localSalesTable.custTable_CustAccount();
                break;
    
            case tableNum(SalesQuotationLine) :
                callerRecord        = this.args().record();
                formDataSource      = FormDataUtil::getFormDataSource(callerRecord);
                salesQuotationTable = formDataSource.formRun().dataSource(1).cursor();
                custTable           = salesQuotationTable.custTable_CustAccount();
                break;
        }

        aclDate = localSalesTable.pipACLDate();
    
        if (PIPApprovedCustomerListControls::useACLInSalesQuickQuote() && PIPApprovedCustomerList::existValidForCustomer(custTable.AccountNum, aclDate))
        {
            aclActive = true;

            PIPApprovedCustomerList::getApprovedItems(custTable, aclDate, dateNull(), pipApprovedItems);
            existVariantCache = new Map(Types::String, Types::Enum);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>SalesQuickQuote_OnInitializing</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormEventHandler(formStr(SalesQuickQuote), FormEventType::Initializing)]
    public void SalesQuickQuote_OnInitializing(xFormRun sender, FormEventArgs e)
    {
        this.pipInitACL();
    }

]]></Source>
			</Method>
			<Method>
				<Name>SalesQuickQuote_OnInitialized</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormEventHandler(formStr(SalesQuickQuote), FormEventType::Initialized)]
    public void SalesQuickQuote_OnInitialized(xFormRun sender, FormEventArgs e)
    {
        if (aclActive)
        {
            PIPShowApprovedOnly.visible(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>TmpPIPApprovedItems_OnInitialized</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormDataSourceEventHandler(formDataSourceStr(SalesQuickQuote, TmpPIPApprovedItems), FormDataSourceEventType::Initialized)]
    public void TmpPIPApprovedItems_OnInitialized(FormDataSource sender, FormDataSourceEventArgs e)
    {
        dsApprovedItems = sender.queryBuildDataSource();
        dsApprovedItems.enabled(aclActive);

        // MSBUG: Added due to compiler issues in Update5/6
        TmpPIPApprovedItems TmpPIPApprovedItems = sender.cursor();
        TmpPIPApprovedItems.linkPhysicalTableInstance(pipApprovedItems);
    }

]]></Source>
			</Method>
			<Method>
				<Name>TmpPIPApprovedItems2_OnInitialized</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormDataSourceEventHandler(formDataSourceStr(SalesQuickQuote, TmpPIPApprovedItems2), FormDataSourceEventType::Initialized)]
    public void TmpPIPApprovedItems2_OnInitialized(FormDataSource sender, FormDataSourceEventArgs e)
    {
        dsApprovedItems2 = sender.queryBuildDataSource();
        dsApprovedItems2.enabled(aclActive);

        TmpPIPApprovedItems2.linkPhysicalTableInstance(pipApprovedItems);
    }

]]></Source>
			</Method>
			<Method>
				<Name>PIPTmpInventDimCombination_OnInitialized</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormDataSourceEventHandler(formDataSourceStr(SalesQuickQuote, PIPTmpInventDimCombination), FormDataSourceEventType::Initialized)]
    public void PIPTmpInventDimCombination_OnInitialized(FormDataSource sender, FormDataSourceEventArgs e)
    {
        dsApprovedDimCombination = sender.queryBuildDataSource();
        sender.cursor().linkPhysicalTableInstance(pipApprovedInventDimCombination);

        dsApprovedDimCombination.clearLinks();
        dsApprovedDimCombination.addLink(fieldNum(InventDimCombination, ItemId), fieldNum(PIPTmpInventDimCombination, ItemId));
        dsApprovedDimCombination.addLink(fieldNum(InventDimCombination, InventDimId), fieldNum(PIPTmpInventDimCombination, InventDimId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>PIPTmpInventDimCombination2_OnInitialized</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormDataSourceEventHandler(formDataSourceStr(SalesQuickQuote, PIPTmpInventDimCombination2), FormDataSourceEventType::Initialized)]
    public void PIPTmpInventDimCombination2_OnInitialized(FormDataSource sender, FormDataSourceEventArgs e)
    {
        dsApprovedDimCombination2 = sender.queryBuildDataSource();
        sender.cursor().linkPhysicalTableInstance(pipApprovedInventDimCombination);

        dsApprovedDimCombination2.clearLinks();
        dsApprovedDimCombination2.addLink(fieldNum(InventDimCombination, ItemId), fieldNum(PIPTmpInventDimCombination, ItemId));
        dsApprovedDimCombination2.addLink(fieldNum(InventDimCombination, InventDimId), fieldNum(PIPTmpInventDimCombination, InventDimId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>pipExistsValidVariant</Name>
				<Source><![CDATA[
    private boolean pipExistsValidVariant(ItemId _itemId)
    {
        if (existVariantCache.exists(_itemId))
        {
            return existVariantCache.lookup(_itemId);
        }

        boolean exist = PIPApprovedCustomerList::existValidVariantForCustomer(custTable.AccountNum, _itemId, aclDate);
        existVariantCache.insert(_itemId, exist);
        return exist;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pipLoadVariantApprovalRecords</Name>
				<Source><![CDATA[
    private void pipLoadVariantApprovalRecords(InventTable _inventTable)
    {
        select RecId from pipApprovedInventDimCombination where pipApprovedInventDimCombination.ItemId == _inventTable.ItemId;
        if (!pipApprovedInventDimCombination.RecId)
        {
            PIPApprovedCustomerList::getApprovedItemVariants(custTable, _inventTable, aclDate, dateNull(), pipApprovedInventDimCombination);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>InventDimCombination_OnQueryExecuting</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormDataSourceEventHandler(formDataSourceStr(SalesQuickQuote, InventDimCombination), FormDataSourceEventType::QueryExecuting)]
    public void InventDimCombination_OnQueryExecuting(FormDataSource sender, FormDataSourceEventArgs e)
    {
        boolean dimApprovalActive = aclActive && dsApprovedItems.enabled() && this.pipExistsValidVariant(inventTable.ItemId);
        dsApprovedDimCombination.enabled(dimApprovalActive);

        if (dimApprovalActive)
        {
            this.pipLoadVariantApprovalRecords(inventTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>InventDimCombination2_OnQueryExecuting</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormDataSourceEventHandler(formDataSourceStr(SalesQuickQuote, InventDimCombination2), FormDataSourceEventType::QueryExecuting)]
    public void InventDimCombination2_OnQueryExecuting(FormDataSource sender, FormDataSourceEventArgs e)
    {
        boolean dimApprovalActive = aclActive && dsApprovedItems.enabled() && this.pipExistsValidVariant(inventTable2.ItemId);
        dsApprovedDimCombination2.enabled(dimApprovalActive);

        if (dimApprovalActive)
        {
            this.pipLoadVariantApprovalRecords(inventTable2);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>PIPShowApprovedOnly_OnClicked</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormControlEventHandler(formControlStr(SalesQuickQuote, PIPShowApprovedOnly), FormControlEventType::Clicked)]
    public void PIPShowApprovedOnly_OnClicked(FormControl sender, FormControlEventArgs e)
    {
        boolean enable = !dsApprovedItems.enabled();
        dsApprovedItems.enabled(enable);
        dsApprovedItems2.enabled(enable);
            
        InventTable_ds.executeQuery();
        InventTable2_ds.executeQuery();
            
        this.updateDesign(InventDimFormDesignUpdate::Active);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>