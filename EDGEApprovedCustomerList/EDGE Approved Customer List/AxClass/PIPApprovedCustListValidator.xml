<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PIPApprovedCustListValidator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>PIPApprovedCustListValidator</c> class is the base class for approved customer list validation.
/// </summary>
class PIPApprovedCustListValidator
{
    date                    activeDate;
    CustAccount             custAccount;
    InventTable             inventTable;
    CustTable               custTable;
    InventDim               inventDim;

    FromDate                fromDate;
    ToDate                  toDate;
    boolean                 ignoreError;
    boolean                 strictValidation;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getCustomerCheckResult</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the current customer check result.
    /// </summary>
    /// <param name="_validFrom">
    ///     Effective start date. Optional.
    /// </param>
    /// <param name="_validTo">
    ///     Effective end date. Optional.
    /// </param>
    /// <returns>
    ///     A <c>PIPCustomerCheckResult</c> enumerate denoting the current customer check result.
    /// </returns>
    protected PIPCustomerCheckResult getCustomerCheckResult(ValidFromDate _validFrom = dateNull(), ValidToDate _validTo = dateNull())
    {
        PIPCustomerCheckResult ret = PIPCustomerCheckResult::Ok;

        if (inventTable)
        {   
            FromDate validFrom;
            ToDate validTo;

            if (activeDate != dateNull())
            {
                validFrom = activeDate;
                validTo = dateNull();
            }
            else
            {
                validFrom = _validFrom == dateNull() ? fromDate : _validFrom;
                validTo = _validTo == dateNull() ? toDate : _validTo;
            }

            custTable = CustTable::find(custAccount);
    
            if (custTable
                && (inventTable.PIPCustomerCheckItem != PIPCustomerCheckItem::NoCheck
                    || custTable.PIPCustomerCheckItem != PIPCustomerCheckItem::NoCheck)
                && !PIPApprovedCustomerList::existValid(inventTable, custTable, validFrom, validTo, inventDim))
            {
                if (inventTable.PIPCustomerCheckItem == PIPCustomerCheckItem::NotAllowed
                    || custTable.PIPCustomerCheckItem == PIPCustomerCheckItem::NotAllowed)
                {
                    ret = PIPCustomerCheckResult::NotAllowed;
                }
                else
                {
                    ret = PIPCustomerCheckResult::Warning;
                }
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the current <c>InventTable</c> buffer.
    /// </summary>
    /// <returns>
    ///     The current <c>InventTable</c> buffer.
    /// </returns>
    private InventTable getInventTable()
    {
        return inventTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes this object with the specified buffer.
    /// </summary>
    /// <param name="_buffer">
    ///     A buffer to initialize this object with.
    /// </param>
    /// <remarks>
    ///     Subclasses may override this method to perform initialization specific to the subclass.
    /// </remarks>
    protected void initFromBuffer(Common _buffer)
    {
        this.initFromInventTable(_buffer as InventTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventTable</Name>
				<Source><![CDATA[
    private void initFromInventTable(InventTable _inventTable)
    {
        this.parmInventTable(_inventTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        activeDate  = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmActiveDate</Name>
				<Source><![CDATA[
    public date parmActiveDate(date _activeDate = activeDate)
    {
        if (!prmisdefault(_activeDate))
        {
            activeDate = _activeDate;
        }
    
        return activeDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustAccount</Name>
				<Source><![CDATA[
    public CustAccount parmCustAccount(CustAccount _custAccount = custAccount)
    {
        if (!prmisdefault(_custAccount))
        {
            custAccount = _custAccount;
        }
    
        return custAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDate</Name>
				<Source><![CDATA[
    public FromDate parmFromDate(FromDate _fromDate = fromDate)
    {
        if (!prmisdefault(_fromDate))
        {
            fromDate = _fromDate;
        }
    
        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIgnoreError</Name>
				<Source><![CDATA[
    public boolean parmIgnoreError(boolean _ignoreError = ignoreError)
    {
        if (!prmisdefault(_ignoreError))
        {
            ignoreError = _ignoreError;
        }
    
        return ignoreError;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTable</Name>
				<Source><![CDATA[
    protected InventTable parmInventTable(InventTable _inventTable = inventTable)
    {
        inventTable = _inventTable;
    
        return inventTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDim</Name>
				<Source><![CDATA[
    public InventDim parmInventDim(InventDim _inventDim = inventDim)
    {
        inventDim = _inventDim;

        return inventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStrictValidation</Name>
				<Source><![CDATA[
    public boolean parmStrictValidation(boolean _strictValidation = strictValidation)
    {
        if (!prmisdefault(_strictValidation))
        {
            strictValidation = _strictValidation;
        }
    
        return strictValidation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDate</Name>
				<Source><![CDATA[
    public ToDate parmToDate(ToDate _toDate = toDate)
    {
        if (!prmisdefault(_toDate))
        {
            toDate = _toDate;
        }
    
        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCustomerCheckResult</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates the current customer check result.
    /// </summary>
    /// <returns>
    ///     true if there are no problems or the problems were non-fatal; otherwise, false.
    /// </returns>
    public boolean validateCustomerCheckResult()
    {
        boolean ret = true;
    
        switch (this.getCustomerCheckResult())
        {
            case PIPCustomerCheckResult::NotAllowed:
                str msg = this.CustomerCheckResultNotAllowedMsg();
                if (strictValidation)
                {
                    ret = false;
                    error(msg);
                }
                else
                {
                    warning(msg);
                }
                break;
    
            case PIPCustomerCheckResult::Warning:
                warning(this.CustomerCheckResultWarningMsg());
                break;
        }
    
        return ret || ignoreError;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCustomerCheckResultWHS</Name>
				<Source><![CDATA[
    public container validateCustomerCheckResultWHS()
    {
        container ret = conNull();
    
        switch (this.getCustomerCheckResult())
        {
            case PIPCustomerCheckResult::NotAllowed:
                str msg = this.CustomerCheckResultNotAllowedMsg();
                if (strictValidation)
                {
                    return [msg, WHSRFColorText::Error];
                }
                else
                {
                    return [msg, WHSRFColorText::Warning];
                }
                break;
    
            case PIPCustomerCheckResult::Warning:
                return [this.CustomerCheckResultWarningMsg(), WHSRFColorText::Warning];
                break;
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>CustomerCheckResultNotAllowedMsg</Name>
				<Source><![CDATA[
    private str CustomerCheckResultNotAllowedMsg()
    {
        str msg;
        
        if (inventDim.anyProductDimensionSpecified())
        {
            msg = strFmt("@PIP246", this.parmCustAccount(), this.getInventTable().ItemId, inventDim.preFixValue(InventDim::dimProductDimFieldList()));
        }
        else
        {
            msg = strFmt("@PIP244", this.parmCustAccount(), this.getInventTable().ItemId);
        }

        return msg;
    }

]]></Source>
			</Method>
			<Method>
				<Name>CustomerCheckResultWarningMsg</Name>
				<Source><![CDATA[
    private str CustomerCheckResultWarningMsg()
    {
        str msg;
        
        if (inventDim.anyProductDimensionSpecified())
        {
            msg = strFmt("@PIP247", this.parmCustAccount(), this.getInventTable().ItemId, inventDim.preFixValue(InventDim::dimProductDimFieldList()));
        }
        else
        {
            msg = strFmt("@PIP245", this.parmCustAccount(), this.getInventTable().ItemId);
        }

        return msg;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTableName</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the table name from the record.
    /// </summary>
    /// <param name="_buffer">
    ///     A record buffer from caller.
    /// </param>
    /// <returns>
    ///     A <c>TableName</c> object which has the table name of the record if it's not an extended table
    ///     and from one of the supported tables for ACL; otherwise the table name of the base table if it's an extended table.
    /// </returns>
    public static TableName getTableName(Common _buffer)
    {
        SysDictTable    dictTable       = new SysDictTable(_buffer.tableId);
        Set             supportedTables = new Set(Types::Integer);
                
        supportedTables.add(tableNum(AgreementLine));
        supportedTables.add(tableNum(SalesAgreementHeader));
        supportedTables.add(tableNum(SalesLine));
        supportedTables.add(tableNum(SalesQuotationTable));
        supportedTables.add(tableNum(SalesQuotationLine));
        supportedTables.add(tableNum(SalesTable));

        if (supportedTables.in(_buffer.TableId))
        {
            return tableId2Name(_buffer.TableId);
        }

        if (dictTable.extends())
        {
            while (dictTable.extends())
            {
                dictTable = new SysDictTable(dictTable.extends());
            }
        }

        return dictTable.name();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Constructs an instance of a subclass of <c>PIPApprovedCustListValidator</c> based on type of record passed in.
    /// </summary>
    /// <param name="_buffer">
    ///     A record buffer from caller.
    /// </param>
    /// <param name="_activeDate">
    ///     The date for which the customer must be approved.
    /// </param>
    /// <returns>
    ///     A <c>PIPApprovedCustListValidator</c> based object.
    /// </returns>
    public static PIPApprovedCustListValidator newFromTable(Common _buffer, date _activeDate = dateNull())
    {
        TableName                       tableName       = PIPApprovedCustListValidator::getTableName(_buffer);
        PIPApprovedCustListValidator    aclValidator    = SysExtensionAppClassFactory::getClassFromSysAttribute(classStr(PIPApprovedCustListValidator),
                                                            new PIPApprovedCustListValidatorAttribute(tableName));
    
        if (!aclValidator)
        {
            aclValidator = PIPApprovedCustListValidatorDefault::construct();
        }
    
        aclValidator.initFromBuffer(_buffer);
        aclValidator.parmActiveDate(_activeDate);
    
        return aclValidator;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>