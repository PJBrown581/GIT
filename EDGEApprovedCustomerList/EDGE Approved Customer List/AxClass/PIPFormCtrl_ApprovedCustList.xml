<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PIPFormCtrl_ApprovedCustList</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>PIPFormCtrl_ApprovedCustList</c> class serves as a form control class for the <c>PIPApprovedCustomerList</c> form.
/// </summary>
[PIPDisplayMenuItemNameAttribute(menuitemDisplayStr(PIPApprovedCustomerList))]
public class PIPFormCtrl_ApprovedCustList extends PmfFormCtrl
{
    // design flags
    boolean                     allowEdit;
    boolean                     showItemHeader;
    boolean                     showCustomerHeader;
    boolean                     showApprovedItemGroupHeader;
    boolean                     showApprovedCustGroupHeader;

    boolean                     showItemGrid;
    boolean                     showCustomerGrid;

    boolean                     showFilterValidFrom;
    boolean                     showFilterValidTo;
    boolean                     showFilterValidToAsOf;
    boolean                     showFilterIncludeNoExpiration;
    boolean                     showFilterProductDimensions;
    boolean                     allowEditFilterProductDimensions;

    boolean                     validFromShouldBeLastGridField;
    boolean                     isFixedInventDimFilter;

    // query parameters
    PIPApprovedCustomerGroupId  approvedCustGroupId;
    PIPApprovedItemGroupId      approvedItemGroupId;
    PIPCustRelation             customerId;
    ItemId                      itemId;
    validFromDate               fromDate;
    validToDate                 toDate;
    NoYesId                     includeNoExpiration;
    InventDim                   filterInventDim;

    FormDataSource              inventTableDS;
    FormDataSource              filterInventDimDS;
    FormDataSource              custTableDS;
    FormDataSource              approvedItemGroupDS;
    FormDataSource              approvedCustomerGroupDS;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dataSourceACLExecuteQueryPre</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adds ranges to the form data source for <c>PIPApprovedCustomerList</c> table according to parameters.
    /// </summary>
    public void dataSourceACLExecuteQueryPre()
    {
        QueryBuildDataSource    qbds;
        InventTable             inventTable;
        CustTable               custTable;
    
        qbds = this.parmFormDataSource().query().dataSourceTable(tableNum(PIPApprovedCustomerList));
        qbds.sortClear();
        this.setSorting(qbds);
    
        qbds.clearRanges();
        qbds.clearDynalinks();
    
        if (itemId)
        {
            inventTable = InventTable::find(itemId);
            // Important: It's critical to have both ItemCode and ItemRelation as well as both CustomerCode and CustomerRelation specified in each OR
            // clause, otherwise SQL Server may use a Clustered Index Scan (bad -- like a table scan) instead of an Index seek (good)
            SysQuery::findOrCreateRange(qbds, fieldNum(PIPApprovedCustomerList, ItemRelation))
                .value(strFmt('(((%1 == %3) && (%2 == "")) || ((%1 == %4) && (%2 == "%5")) || ((%1 == %6) && (%2 == "%7")))',
                    fieldStr(PIPApprovedCustomerList, ItemCode),
                    fieldStr(PIPApprovedCustomerList, ItemRelation),
                    enum2int(TableGroupAll::All),
                    enum2int(TableGroupAll::GroupId),
                    inventTable.PIPApprovedItemGroup,
                    enum2int(TableGroupAll::Table),
                    inventTable.ItemId));
        }
    
        if (customerId)
        {
            custTable = CustTable::find(customerId);
            // Important: It's critical to have both ItemCode and ItemRelation as well as both CustomerCode and CustomerRelation specified in each OR
            // clause, otherwise SQL Server may use a Clustered Index Scan (bad -- like a table scan) instead of an Index seek (good)
            SysQuery::findOrCreateRange(qbds, fieldNum(PIPApprovedCustomerList, CustomerRelation))
                .value(strFmt('(((%1 == %3) && (%2 == "")) || ((%1 == %4) && (%2 == "%5")) || ((%1 == %6) && (%2 == "%7")))',
                    fieldStr(PIPApprovedCustomerList, CustomerCode),
                    fieldStr(PIPApprovedCustomerList, CustomerRelation),
                    enum2int(TableGroupAll::All),
                    enum2int(TableGroupAll::GroupId),
                    custTable.PIPApprovedCustomerGroup,
                    enum2int(TableGroupAll::Table),
                    custTable.AccountNum));
        }
    
        if (approvedItemGroupId)
        {
            SysQuery::findOrCreateRange(qbds, fieldnum(PIPApprovedCustomerList, ItemRelation)).value(approvedItemGroupId);
        }
    
        if (approvedCustGroupId)
        {
            SysQuery::findOrCreateRange(qbds, fieldnum(PIPApprovedCustomerList, CustomerRelation)).value(approvedCustGroupId);
        }

        this.addOrUpdateProductDimensionFilter();
    
        SysQuery::findOrCreateRange(qbds, fieldnum(PIPApprovedCustomerList, RecId))
            .value(strFmt(this.datesQueryRangeFormat(), date2StrXpp(fromDate), date2StrXpp(toDate), enum2int(includeNoExpiration)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>addOrUpdateProductDimensionFilter</Name>
				<Source><![CDATA[
    private void addOrUpdateProductDimensionFilter()
    {
        if (filterInventDim)
        {
            QueryBuildDataSource inventDimDS = SysQuery::findOrCreateDataSource(this.parmFormDataSource().query(), tableNum(InventDim), tableNum(PIPApprovedCustomerList));
            
            ListEnumerator productDimEnumerator = InventDim::dimProductDimFieldList().getEnumerator();
            while (productDimEnumerator.moveNext())
            {
                FieldId productDimFieldId = productDimEnumerator.current();
                QueryBuildRange range = SysQuery::findOrCreateRange(inventDimDS, productDimFieldId);
                if (filterInventDim.(productDimFieldId))
                {
                    range.enabled(true);
                    range.status(RangeStatus::Locked);
                    range.value(strFmt('((%1 = "%2") || (%1 == ""))', fieldId2Name(tableNum(InventDim), productDimFieldId), filterInventDim.(productDimFieldId)));
                }
                else
                {
                    range.enabled(false);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dataSourceInitValuePost</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Executes additional field initializations in the primary data source buffer initialization.
    /// </summary>
    /// <param name="_approvedCustList">
    ///    The approved customer list buffer that is being initialized.
    /// </param>
    public void dataSourceInitValuePost(PIPApprovedCustomerList _approvedCustList)
    {
        // Only do this if called given the specific menu item. However, the base class can be
        // instantied as the default form control class for other menu items.
        if (this.args().menuItemName() == menuitemDisplayStr(PIPApprovedCustomerList))
        {
            _approvedCustList.ItemRelation = inventTableDS.cursor().(fieldNum(InventTable, itemId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dataSourceInventTableExecuteQueryPre</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adds ranges for the given <c>InventTable</c> table data source.
    /// </summary>
    /// <param name="_datasource">
    ///     The <c>InventTable</c> datasource to add the ranges to.
    /// </param>
    public void dataSourceInventTableExecuteQueryPre(FormDataSource _datasource)
    {
        QueryBuildDataSource    qbds;
    
        qbds = _datasource.query().dataSourceTable(tableNum(InventTable));
        if (!qbds)
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }
    
        qbds.clearDynalinks();
        this.setItemIdRange();
    }

]]></Source>
			</Method>
			<Method>
				<Name>datesQueryRangeFormat</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a query range format string for the valid from/valid to query range.
    /// </summary>
    /// <returns>
    ///    The format string to use for the valid from/valid to query range. The format string will
    ///    have the following arguments:
    ///    <list type="table">
    ///       <item><term>%1</term><description>interval start (date)</description></item>
    ///       <item><term>%2</term><description>interval end (date)</description></item>
    ///       <item><term>%3</term><description>include records without expiration (NoYes, formatted as an int)</description></item>
    ///    </list>
    /// </returns>
    protected str datesQueryRangeFormat()
    {
        return '(' + fieldStr(PIPApprovedCustomerList, ValidFrom) + ' < %2) && (' + fieldStr(PIPApprovedCustomerList, ValidTo) + ' >= %1)';
    }

]]></Source>
			</Method>
			<Method>
				<Name>editHandlerFromDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Edits controls bound to from date.
    /// </summary>
    /// <param name="_set">
    ///    Determines if the field should be set.
    /// </param>
    /// <param name="_fromDate">
    ///    The value to set.
    /// </param>
    /// <returns>
    ///    The value to show on the form.
    /// </returns>
    public validFromDate editHandlerFromDate(boolean _set, validFromDate _fromDate)
    {
        if (_set)
        {
            fromDate = _fromDate;
            this.parmFormDataSource().executeQuery();
        }
    
        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editHandlerIncludeNoExpiration</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Edits controls bound to the field for including records without expiration.
    /// </summary>
    /// <param name="_set">
    ///    Determines if the field should be set.
    /// </param>
    /// <param name="_includeNoExpiration">
    ///    The value to set.
    /// </param>
    /// <returns>
    ///    The value to show on the form.
    /// </returns>
    public NoYesId editHandlerIncludeNoExpiration(boolean _set, NoYesId _includeNoExpiration)
    {
        if (_set)
        {
            includeNoExpiration = _includeNoExpiration;
            this.parmFormDataSource().executeQuery();
        }
    
        return includeNoExpiration;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editHandlerToDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Edits controls bound to the field for to date.
    /// </summary>
    /// <param name="_set">
    ///    Determines if the field should be set.
    /// </param>
    /// <param name="_toDate">
    ///    The value to set.
    /// </param>
    /// <returns>
    ///    The value to show on the form.
    /// </returns>
    public validToDate editHandlerToDate(boolean _set, validToDate _toDate)
    {
        if (_set)
        {
            toDate = _toDate;
            this.parmFormDataSource().executeQuery();
        }
    
        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formCaption</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the caption to use on the form.
    /// </summary>
    /// <returns>
    ///    The caption to use on the form.
    /// </returns>
    protected str formCaption()
    {
        return "@PIP205";
    }

]]></Source>
			</Method>
			<Method>
				<Name>formControlItemIdFilter</Name>
				<Source><![CDATA[
    private FormStringControl formControlItemIdFilter()
    {
        return formRun.design().controlName(formControlStr(PIPApprovedCustomerList, ItemId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>formControlItemIdFilterModified</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Updates the item id query range in the <c>InventTable</c> datasource.
    /// </summary>
    /// <param name="_callingControl">
    ///     The control calling the method.
    /// </param>
    public void formControlItemIdFilterModified(FormStringControl _callingControl)
    {
        Object formObject = formRun;
    
        itemId = _callingControl.text();
        this.setItemIdRange();
    
        formObject.formRefreshQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>formControlItemName</Name>
				<Source><![CDATA[
    private FormStringControl formControlItemName()
    {
        return formRun.design().controlName(formControlStr(PIPApprovedCustomerList, ProductName));
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the parameters for a new instance of this form control class with default values.
    /// </summary>
    protected void init()
    {
        this.parmAllowEdit(true);
        this.parmShowItemHeader(true);
        this.parmShowCustomerGrid(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPost</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Executes additional logic after the form has been initialized.
    /// </summary>
    /// <remarks>
    ///    This must be executed after the form run base init() method has been called.
    /// </remarks>
    public void initPost()
    {
        FormStringControl idFilter;
    
        super();
    
        if (!this.parmFormRun())
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }
    
        this.parmFormRun().design().caption(this.formCaption());
    
        this.parmFormDataSource().allowCreate(allowEdit);
        this.parmFormDataSource().allowDelete(allowEdit);
        this.parmFormDataSource().allowEdit(allowEdit);
        this.enableFormControl(formControlStr(PIPApprovedCustomerList, AddRecord), allowEdit);
        this.visibleFormControl(formControlStr(PIPApprovedCustomerList, AddRecord), allowEdit);
        this.enableFormControl(formControlStr(PIPApprovedCustomerList, RemoveRecord), allowEdit);
        this.visibleFormControl(formControlStr(PIPApprovedCustomerList, RemoveRecord), allowEdit);
        this.enableFormControl(formControlStr(PIPApprovedCustomerList, EditRecord), allowEdit);
        this.visibleFormControl(formControlStr(PIPApprovedCustomerList, EditRecord), allowEdit);
    
        this.visibleFormControl(formControlStr(PIPApprovedCustomerList, DetailsHeaderItem), showItemHeader);
        this.visibleFormControl(formControlStr(PIPApprovedCustomerList, DetailsHeaderCustomer), showCustomerHeader);
        this.visibleFormControl(formControlStr(PIPApprovedCustomerList, DetailsHeaderApprovedItemGroup), showApprovedItemGroupHeader);
        this.visibleFormControl(formControlStr(PIPApprovedCustomerList, DetailsHeaderApprovedCustGroup), showApprovedCustGroupHeader);
    
        this.visibleFormControl(formControlStr(PIPApprovedCustomerList, Filter), this.showFilterGroup());
        if (this.showFilterGroup())
        {
            this.visibleFormControl(formControlStr(PIPApprovedCustomerList, ParmFromDate), showFilterValidFrom);
            this.visibleFormControl(formControlStr(PIPApprovedCustomerList, ParmToDate), showFilterValidTo);
            this.visibleFormControl(formControlStr(PIPApprovedCustomerList, ParmAsOfDate), showFilterValidToAsOf);
            this.visibleFormControl(formControlStr(PIPApprovedCustomerList, ParmIncludeNoExpiration), showFilterIncludeNoExpiration);
        }

        this.setupProductDimFilterControls();
        
        if (!this.args().record() && this.parmShowItemHeader())
        {
            idFilter = this.formControlItemIdFilter();
            idFilter.dataField(0);
            idFilter.dataSource(0);
            idFilter.allowEdit(true);
            idFilter.extendedDataType(extendedTypeNum(itemId));
            idFilter.registerOverrideMethod(methodStr(FormStringControl, modified), methodStr(PIPFormCtrl_ApprovedCustList, formControlItemIdFilterModified), this);
    
            showItemGrid = true;
        }
    
        this.visibleFormControl(formControlStr(PIPApprovedCustomerList, PIPApprovedCustomerList_ItemRelation), showItemGrid);
        this.visibleFormControl(formControlStr(PIPApprovedCustomerList, PIPApprovedCustomerList_ItemCode), showItemGrid);
        this.visibleFormControl(formControlStr(PIPApprovedCustomerList, PIPApprovedCustomerList_CustomerRelation), showCustomerGrid);
        this.visibleFormControl(formControlStr(PIPApprovedCustomerList, PIPApprovedCustomerList_CustomerCode), showCustomerGrid);

        this.visibleFormControl(formControlStr(PIPApprovedCustomerList, PIPApprovedCustomerList_ValidFrom),      !validFromShouldBeLastGridField);
        this.visibleFormControl(formControlStr(PIPApprovedCustomerList, PIPApprovedCustomerList_ValidFrom_Last), validFromShouldBeLastGridField);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupProductDimFilterControls</Name>
				<Source><![CDATA[
    private void setupProductDimFilterControls()
    {
        this.visibleFormControl(formControlStr(PIPApprovedCustomerList, ProductDimensionsFilter), showFilterProductDimensions);

        if (showFilterProductDimensions && filterInventDimDS)
        {
            filterInventDimDS.create();
            filterInventDimDS.write();
            filterInventDimDS.cursor().data(filterInventDim);

            ListEnumerator productDimFieldIdEnumerator = InventDim::dimProductDimFieldList().getEnumerator();

            // Fixed filter dimensions; only show the specific dimension fields that are non-blank and restrict editing
            while (productDimFieldIdEnumerator.moveNext())
            {
                FieldId dimFieldId = productDimFieldIdEnumerator.current();
                if (isFixedInventDimFilter)
                {
                    filterInventDimDS.object(dimFieldId).visible(filterInventDim.(dimFieldId) != '');
                    enableDSField(filterInventDimDS, dimFieldId, false);
                }
                else
                {
                    enableDSField(filterInventDimDS, dimFieldId, true);
                }                    
            }

            FormDataSource inventDimDS = formRun.dataSource(formDataSourceStr(PIPApprovedCustomerList, InventDim));
            inventDimDS.allowEdit(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPre</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Executes additional logic before the form has been initialized.
    /// </summary>
    /// <remarks>
    ///    This must be executed before the form run base init() method has been called.
    /// </remarks>
    public void initPre()
    {
        InventTable                 inventTable;
        CustTable                   custTable;
        SalesTable                  salesTable;
        PIPApprovedItemGroup        approvedItemGroup;
        PIPApprovedCustomerGroup    approvedCustomerGroup;
    
        Args                        args = this.args();
    
        switch (args.dataset())
        {
            case tableNum(InventTable):
                inventTable = args.record();
                itemId      = inventTable.ItemId;
                break;
    
            case tableNum(CustTable):
                custTable   = args.record();
                customerId  = custTable.AccountNum;
                allowEdit   = true;
                break;
    
            case tableNum(SalesTable):
                salesTable  = args.record();
                customerId  = salesTable.CustAccount;
                break;
    
            case tableNum(PIPApprovedItemGroup):
                approvedItemGroup   = args.record();
                approvedItemGroupId = approvedItemGroup.ApprovedItemGroup;
                break;
    
            case tableNum(PIPApprovedCustomerGroup):
                approvedCustomerGroup = args.record();
                approvedCustGroupId   = approvedCustomerGroup.ApprovedCustomerGroup;
                break;

            case tableNum(InventDimCombination):
                InventDimCombination dimCombination = args.record();
                itemId = dimCombination.ItemId;
                this.parmFilterInventDim(dimCombination.inventDim());
                this.parmShowFilterProductDimensions(true);
                break;
        }
    
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    
        toDate = dateMax();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAllowEdit</Name>
				<Source><![CDATA[
    public boolean parmAllowEdit(boolean _allowEdit = allowEdit)
    {
        allowEdit = _allowEdit;
    
        return allowEdit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmApprovedCustomerGroupFormDataSource</Name>
				<Source><![CDATA[
    public FormDataSource parmApprovedCustomerGroupFormDataSource(FormDataSource _approvedCustomerGroupDS = approvedCustomerGroupDS)
    {
        if (!prmisDefault(_approvedCustomerGroupDS))
        {
            if (!_approvedCustomerGroupDS.queryBuildDataSource().table(tableNum(PIPApprovedCustomerGroup)))
            {
                throw error(error::wrongUseOfFunction(funcName()));
            }
            approvedCustomerGroupDS = _approvedCustomerGroupDS;
        }
    
        return approvedCustomerGroupDS;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmApprovedItemGroupFormDataSource</Name>
				<Source><![CDATA[
    public FormDataSource parmApprovedItemGroupFormDataSource(FormDataSource _approvedItemGroupDS = approvedItemGroupDS)
    {
        if (!prmisDefault(_approvedItemGroupDS))
        {
            if (!_approvedItemGroupDS.queryBuildDataSource().table(tableNum(PIPApprovedItemGroup)))
            {
                throw error(error::wrongUseOfFunction(funcName()));
            }
            approvedItemGroupDS = _approvedItemGroupDS;
        }
    
        return approvedItemGroupDS;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustTableFormDataSource</Name>
				<Source><![CDATA[
    public FormDataSource parmCustTableFormDataSource(FormDataSource _custTableDS = custTableDS)
    {
        if (!prmisDefault(_custTableDS))
        {
            if (!_custTableDS.queryBuildDataSource().table(tableNum(CustTable)))
            {
                throw error(error::wrongUseOfFunction(funcName()));
            }
            custTableDS = _custTableDS;
    
            custTableDS.queryBuildDataSource().addRange(fieldNum(CustTable, AccountNum)).value(customerId);
        }
    
        return custTableDS;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDate</Name>
				<Source><![CDATA[
    public validFromDate parmFromDate(validFromDate _fromDate = fromDate)
    {
        fromDate = _fromDate;
    
        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTableFormDataSource</Name>
				<Source><![CDATA[
    public FormDataSource parmInventTableFormDataSource(FormDataSource _inventTableDS = inventTableDS)
    {
        if (!prmisDefault(_inventTableDS))
        {
            if (!_inventTableDS.queryBuildDataSource().table(tableNum(InventTable)))
            {
                throw error(error::wrongUseOfFunction(funcName()));
            }
            inventTableDS = _inventTableDS;
        }
    
        return inventTableDS;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFilterInventFormDimDataSource</Name>
				<Source><![CDATA[
    public FormDataSource parmFilterInventFormDimDataSource(FormDataSource _filterInventDimDS = filterInventDimDS)
    {
        if (!prmIsDefault(_filterInventDimDS))
        {
            filterInventDimDS = _filterInventDimDS;
            if (!isFixedInventDimFilter)
            {
                filterInventDim = filterInventDimDS.cursor();
            }
        }

        return filterInventDimDS;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemId</Name>
				<Source><![CDATA[
    public ItemId parmItemId(ItemId _itemId = itemId)
    {
        itemId = _itemId;
    
        return itemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFilterInventDim</Name>
				<Source><![CDATA[
    public InventDim parmFilterInventDim(InventDim _filterInventDim = filterInventDim)
    {
        if (!prmIsDefault(_filterInventDim))
        {
            filterInventDim = _filterInventDim;
            isFixedInventDimFilter = filterInventDim != null;
        }

        return filterInventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowFilterProductDimensions</Name>
				<Source><![CDATA[
    public boolean parmShowFilterProductDimensions(boolean _showFilterProductDimensions = showFilterProductDimensions)
    {
        showFilterProductDimensions = _showFilterProductDimensions;

        return showFilterProductDimensions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAllowEditFilterProductDimensions</Name>
				<Source><![CDATA[
    public boolean parmAllowEditFilterProductDimensions(boolean _allowEditFilterProductDimensions = allowEditFilterProductDimensions)
    {
        allowEditFilterProductDimensions = _allowEditFilterProductDimensions;

        return allowEditFilterProductDimensions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowApprovedCustGroupHeader</Name>
				<Source><![CDATA[
    public boolean parmShowApprovedCustGroupHeader(boolean _showApprovedCustGroupHeader = showApprovedCustGroupHeader)
    {
        showApprovedCustGroupHeader = _showApprovedCustGroupHeader;
    
        return showApprovedCustGroupHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowApprovedItemGroupHeader</Name>
				<Source><![CDATA[
    public boolean parmShowApprovedItemGroupHeader(boolean _showApprovedItemGroupHeader = showApprovedItemGroupHeader)
    {
        showApprovedItemGroupHeader = _showApprovedItemGroupHeader;
    
        return showApprovedItemGroupHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowCustomerGrid</Name>
				<Source><![CDATA[
    public boolean parmShowCustomerGrid(boolean _showCustomerGrid = showCustomerGrid)
    {
        showCustomerGrid = _showCustomerGrid;
    
        return showCustomerGrid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowCustomerHeader</Name>
				<Source><![CDATA[
    public boolean parmShowCustomerHeader(boolean _showCustomerHeader = showCustomerHeader)
    {
        showCustomerHeader = _showCustomerHeader;
    
        return showCustomerHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowFilterIncludeNoExpiration</Name>
				<Source><![CDATA[
    public boolean parmShowFilterIncludeNoExpiration(boolean _showFilterIncludeNoExpiration = showFilterIncludeNoExpiration)
    {
        showFilterIncludeNoExpiration = _showFilterIncludeNoExpiration;
    
        return showFilterIncludeNoExpiration;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowFilterValidFrom</Name>
				<Source><![CDATA[
    public boolean parmShowFilterValidFrom(boolean _showFilterValidFrom = showFilterValidFrom)
    {
        showFilterValidFrom = _showFilterValidFrom;
    
        return showFilterValidFrom;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowFilterValidTo</Name>
				<Source><![CDATA[
    public boolean parmShowFilterValidTo(boolean _showFilterValidTo = showFilterValidTo)
    {
        showFilterValidTo = _showFilterValidTo;
    
        return showFilterValidTo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowFilterValidToAsOf</Name>
				<Source><![CDATA[
    public boolean parmShowFilterValidToAsOf(boolean _showFilterValidToAsOf = showFilterValidToAsOf)
    {
        showFilterValidToAsOf = _showFilterValidToAsOf;
    
        return showFilterValidToAsOf;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowItemGrid</Name>
				<Source><![CDATA[
    public boolean parmShowItemGrid(boolean _showItemGrid = showItemGrid)
    {
        showItemGrid = _showItemGrid;
    
        return showItemGrid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowItemHeader</Name>
				<Source><![CDATA[
    public boolean parmShowItemHeader(boolean _showItemHeader = showItemHeader)
    {
        showItemHeader = _showItemHeader;
    
        return showItemHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDate</Name>
				<Source><![CDATA[
    public validToDate parmToDate(validToDate _toDate = toDate)
    {
        toDate = _toDate;
    
        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmValidFromShouldBeLastGridField</Name>
				<Source><![CDATA[
    public boolean parmValidFromShouldBeLastGridField(boolean _validFromShouldBeLastGridField = validFromShouldBeLastGridField)
    {
        validFromShouldBeLastGridField = _validFromShouldBeLastGridField;
    
        return validFromShouldBeLastGridField;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setItemIdRange</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the item id range value in the form's data source for the <c>InventTable</c> table.
    /// </summary>
    protected void setItemIdRange()
    {
        FormStringControl   itemNameControl;
        QueryBuildRange     qbr;
    
        qbr = SysQuery::findOrCreateRange(inventTableDS.query().dataSourceTable(tableNum(InventTable)), fieldNum(InventTable, ItemId));
        qbr.value(this.parmItemId());
    
        itemNameControl = this.formControlItemName();
    
        if (this.parmItemId())
        {
            itemNameControl.dataMethod(tableMethodStr(InventTable, ItemName));
        }
        else
        {
            itemNameControl.dataMethod('');
            itemNameControl.text('');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSorting</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the sorting query options for the main data source of the form.
    /// </summary>
    /// <param name="_qbds">
    ///     The main data source of the form.
    /// </param>
    protected void setSorting(QueryBuildDataSource _qbds)
    {
        _qbds.addSortField(fieldNum(PIPApprovedCustomerList, CustomerRelation), SortOrder::Ascending);
        _qbds.addSortField(fieldNum(PIPApprovedCustomerList, ValidFrom), SortOrder::Ascending);
    }

]]></Source>
			</Method>
			<Method>
				<Name>showFilterGroup</Name>
				<Source><![CDATA[
    private boolean showFilterGroup()
    {
        return showFilterIncludeNoExpiration
            || showFilterValidFrom
            || showFilterValidTo
            || showFilterValidToAsOf;
    }

]]></Source>
			</Method>
			<Method>
				<Name>visibleFormControl</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Shows or hides the specified form control.
    /// </summary>
    /// <param name="_name">
    ///     The identifying name of the form control.
    /// </param>
    /// <param name="_visible">
    ///     Determines if the control should be visible.
    /// </param>
    /// <remarks>
    ///    This is a convenience method to show or hide a control on the associated form.
    ///    If the referenced control does not exist on the form then this method does nothing.
    /// </remarks>
    protected void visibleFormControl(IdentifierName _name, boolean _visible)
    {
        FormControl control;
    
        control = formRun.design().controlName(_name);
        if (control)
        {
            control.visible(_visible);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static PIPFormCtrl_ApprovedCustList construct()
    {
        return new PIPFormCtrl_ApprovedCustList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromFormRun</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>PIPFormCtrl_AppovedCustList</c> class for the form.
    /// </summary>
    /// <param name="_formRun">
    ///    The form run for the form.
    /// </param>
    /// <returns>
    ///    A new instance of the <c>PIPFormCtrl_ApprovedCustList</c> class for use with the form.
    /// </returns>
    public static PIPFormCtrl_ApprovedCustList newFromFormRun(FormRun _formRun)
    {
        PIPFormCtrl_ApprovedCustList    formControl;
    
        if (_formRun.args().menuItemName())
        {
            formControl = SysExtensionAppClassFactory::getClassFromSysAttribute(
                            classStr(PIPFormCtrl_ApprovedCustList),
                            new PIPDisplayMenuItemNameAttribute(_formRun.args().menuItemName()));
        }
    
        if (!formControl)
        {
            formControl = PIPFormCtrl_ApprovedCustList::construct();
        }
    
        formControl.parmFormRun(_formRun);
        formControl.init();
        return formControl;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>