<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PIPsmmActivities_Handler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     Event handler class for the <c>smmActivities</c> class.
/// </summary>
public static class PIPsmmActivities_Handler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>postModifiedFieldHandler</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Executes logic in the modified event for the <c>smmActivities</c> <see cref="modifiedField method"/> method.
    /// </summary>
    /// <param name="_args">
    ///     The arguments passed by the event hanlder.
    /// </param>
    [PostHandlerFor(tableStr(smmActivities), tableMethodStr(smmActivities, modifiedField))]
    public static void postModifiedFieldHandler(XppPrePostArgs _args)
    {
        smmActivities   smmActivities   = _args.getThis();
        FieldId         fieldId         = _args.getArg('_fieldId');
    
        switch (fieldId)
        {
            case fieldnum(smmActivities, PIPWorkerGroup):
                if (!smmActivities.pipGetWorkerGroup() && HierarchyTreeTable::findActivityRecId(smmActivities.RecId).ElementNodeType == ElementNodeType::Node)
                {
                    smmActivities.ResponsibleWorker = 0;
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>smmActivities_onInitializedRecord</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Executes logic for the <c>smmActivities</c> table <c>InitializedRecord</c> event.
    /// </summary>
    /// <param name="sender">
    ///     The table buffer.
    /// </param>
    /// <param name="e">
    ///     The event arguments.
    /// </param>
    [DataEventHandler(tableStr(smmActivities), DataEventType::InitializedRecord)]
    public static void smmActivities_onInitializedRecord(Common sender, DataEventArgs e)
    {
        smmActivities activity = sender as smmActivities;

        if (!activity.PIPIsCAPA)
        {
            activity.ResponsibleWorker = smmUtility::getCurrentContactWorker();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>smmActivities_onInserting</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Executes logic for the <c>smmActivities</c> table <c>Inserting</c> event.
    /// </summary>
    /// <param name="sender">
    ///     The table buffer.
    /// </param>
    /// <param name="e">
    ///     The event arguments.
    /// </param>
    [DataEventHandler(tableStr(smmActivities), DataEventType::Inserting)]
    public static void smmActivities_onInserting(Common sender, DataEventArgs e)
    {
        smmActivities activity = sender as smmActivities;

        if (activity.PIPIsCAPA && !activity.IsTemplate && !activity.ResponsibleWorker)
        {
            activity.pipInitCAPAWorker(activity);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>smmActivities_Post_validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Executes additional logic in the post-method event for the <see cref="validateWrite method"/> on this class.
    /// </summary>
    /// <param name="args">
    ///    The standard pre-/post- arguments for a static method event handler.
    /// </param>
    [PostHandlerFor(tableStr(smmActivities), tableMethodStr(smmActivities, validateWrite))]
    public static void smmActivities_Post_validateWrite(XppPrePostArgs args)
    {
        HierarchyTreeTable  hierarchyTreeTable;
        PIPCAPAWorkerGroup  workerGroup;
        smmActivities       activity = args.getThis();
        boolean             ret      = args.getReturnValue();

        if (ret && activity.PIPIsCAPA)
        {
            if (activity.RecId && !activity.IsTemplate && !activity.ResponsibleWorker)
            {
                ret = checkFailed(strFmt("@SYS84753", fieldPName(smmActivities, ResponsibleWorker)));
            }

            workerGroup = activity.pipWorkerGroup();

            if (ret && !workerGroup.RecId)
            {
                hierarchyTreeTable = HierarchyTreeTable::findActivityRecId(activity.RecId);
                if (hierarchyTreeTable.ElementNodeType == ElementNodeType::Node
                && hierarchyTreeTable.Level != 0)
                {
                    activity.ResponsibleWorker = 0;
                    ret = checkFailed(strFmt("@SYS84753", fieldPName(smmActivities, PIPWorkerGroup)));
                }
            }
            else if (ret && activity.ResponsibleWorker && !workerGroup.isGroupMember(activity.ResponsibleWorker))
            {
                ret = checkFailed("@PIP82");
            }

            if (ret && !activity.IsTemplate && activity.ActivityTaskTimeType == smmActivityTaskTimeType::InProgress && activity.orig().ResponsibleWorker != activity.ResponsibleWorker)
            {
                if (Box::yesNo("@PIP80", DialogButton::Yes) == DialogButton::Yes)
                {
                    activity.pipSendMailCAPA();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>smmActivities_Post_shouldActivityBeCreated</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Executes additional logic in the post-method event for the <see cref="shouldActivityBeCreated method"/> on this class.
    /// </summary>
    /// <param name="args">
    ///    The standard pre-/post- arguments for a static method event handler.
    /// </param>
    [PostHandlerFor(tableStr(smmActivities), tableStaticMethodStr(smmActivities, shouldActivityBeCreated))]
    public static void smmActivities_Post_shouldActivityBeCreated(XppPrePostArgs args)
    {
        Common          table       = args.getArg('_table');

        if (table.TableId == tableNum(CaseDetailBase))
        {
            CaseDetailBase caseDetailBase = table;

            if (caseDetailBase.PIPIsCAPA)
            {
                args.setReturnValue(caseYesNoPrompt::No);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>smmActivities_Pre_update</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Executes additional logic in the pre-method event for the <see cref="update method"/> on this class.
    /// </summary>
    /// <param name="args">
    ///    The standard pre-/post- arguments for a static method event handler.
    /// </param>
    [PreHandlerFor(tableStr(smmActivities), tableMethodStr(smmActivities, update))]
    public static void smmActivities_Pre_update(XppPrePostArgs args)
    {
        smmActivities activities = args.getThis();

        smmSourceType smmSourceType = smmSourceType::construct();
        smmSourceType.initDefaultData();
        
        if ((activities.orig().PIPCAPAResolutionNote == '' && activities.PIPCAPAResolutionNote != '')
            || (activities.orig().PIPCAPAResolution == '' && activities.PIPCAPAResolution != ''))
        {
            smmSourceType::checkAndCreateCaseLogForSourceType(activities);
        }

        if (activities.pipGetEmailActivityUpdate() == PIPNoYesInherit::Yes)
        {
            CaseDetailBase caseDetailBase = activities.pipCaseDetailBase();
            PIPCAPACaseEmailRec emailRec;

            if (activities.Closed)
            {
                while select emailRec
                    where emailRec.CaseRecId == CaseDetailBase.RecId
                    && emailRec.ActivityStatusClosed == NoYesCombo::Yes
                {
                    smmActivities::emailActivityState(emailRec, activities, caseDetailBase);
                }
            }
            else
            {
                while select emailRec
                    where emailRec.CaseRecId == CaseDetailBase.RecId
                    && emailRec.ActivityStatusReopened == NoYesCombo::Yes
                {
                    smmActivities::emailActivityState(emailRec, activities, caseDetailBase);
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>