<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PIPHierarchyEmailAddressLoader</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>PIPHierarchyEmailAddressLoader</c> class is a record visitor for retrieving all the
///    e-mail addresses in a hierarchy tree.
/// </summary>
/// <remarks>
///    This class expects to receive only records of the <c>HierarchyTreeTable</c> table.
/// </remarks>
public class PIPHierarchyEmailAddressLoader implements PIPRecordVisitor
{
    Set     addresses;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accept</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Accepts and processes a record that has been visited.
    /// </summary>
    /// <param name="_buffer">
    ///    The record to accept and process; must be a record of the <c>HierarchyTreeTable</c> table.
    /// </param>
    /// <returns>
    ///    true if the record visitor should continue to the next record; otherwise, false.
    /// </returns>
    public boolean accept(Common _buffer)
    {
        HierarchyTreeTable              hierarchyTreeTable = _buffer;
        smmActivities                   activity;
        PIPCAPAWorkerGroup              workerGroup;
        PIPCAPAWorkerGroupAssignment    workerAssignment;
    
        activity = hierarchyTreeTable.pipActivity();
        if (activity.pipGetNotifyWorkerGroup() == PIPNoYesInherit::Yes)
        {
            workerGroup = activity.pipWorkerGroup();
    
            while select Worker from workerAssignment
                where workerAssignment.Group == workerGroup.RecId
            {
                this.addAddress(workerAssignment.worker().email());
            }
    
            if (workerGroup.AdminIsMember)
            {
                this.addAddress(HcmWorker::find(InventParameters::find().PIPCAPAAdministrator).email());
            }
        }
        else
        {
            this.addAddress(activity.pipWorker().email());
        }
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addAddress</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds an email address to the set of addresses.
    /// </summary>
    /// <param name="_email">
    ///    The email address to add.
    /// </param>
    /// <remarks>
    ///    This ignores any blank email addresses.
    /// </remarks>
    private void addAddress(Email _email)
    {
        if (_email)
        {
            addresses.add(_email);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addresses</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the set of e-mail addresses.
    /// </summary>
    /// <returns>
    ///    The set of e-mail addresses.
    /// </returns>
    public Set addresses()
    {
        return addresses;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        addresses = new Set(Types::String);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PIPHierarchyEmailAddressLoader construct()
    {
        return new PIPHierarchyEmailAddressLoader();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>