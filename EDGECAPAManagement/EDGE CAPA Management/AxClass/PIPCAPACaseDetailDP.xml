<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PIPCAPACaseDetailDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
[
    SRSReportQueryAttribute(queryStr(PIPCAPACaseDetail)),
    SRSReportParameterAttribute(classStr(PIPCAPACaseDetailContract))
]
class PIPCAPACaseDetailDP extends SRSReportDataProviderBase
{
    PIPCAPACaseDetailTmp caseDetailTmp;
    PIPCAPACaseEmailRecTmp caseEmailRecTmp;
    PIPCAPACaseLogTmp caseLogTmp;
    PIPCAPACaseAssociationTmp caseAssociationTmp;
    TmpSmmKACaseRelation tmpSmmKACaseRelation;
    PIPCAPAActivitiesTmp activitiesTemp;
    PIPSignatureLogTmp signatureLogTmp;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getCaseDetailTmp</Name>
				<Source><![CDATA[
    [SRSReportDataSetAttribute(tableStr(PIPCAPACaseDetailTmp))]
    public PIPCAPACaseDetailTmp getCaseDetailTmp()
    {
        select caseDetailTmp;
        return caseDetailTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCaseEmailRecTmp</Name>
				<Source><![CDATA[
    [SRSReportDataSetAttribute(tableStr(PIPCAPACaseEmailRecTmp))]
    public PIPCAPACaseEmailRecTmp getCaseEmailRecTmp()
    {
        select caseEmailRecTmp;
        return caseEmailRecTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCaseLogTmp</Name>
				<Source><![CDATA[
    [SRSReportDataSetAttribute(tableStr(PIPCAPACaseLogTmp))]
    public PIPCAPACaseLogTmp getCaseLogTmp()
    {
        select caseLogTmp;
        return caseLogTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCaseAssociationTmp</Name>
				<Source><![CDATA[
    [SRSReportDataSetAttribute(tableStr(PIPCAPACaseAssociationTmp))]
    public PIPCAPACaseAssociationTmp getCaseAssociationTmp()
    {
        select caseAssociationTmp;
        return caseAssociationTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTmpSmmKACaseRelation</Name>
				<Source><![CDATA[
    [SRSReportDataSetAttribute(tableStr(TmpSmmKACaseRelation))]
    public TmpSmmKACaseRelation getTmpSmmKACaseRelation()
    {
        select tmpSmmKACaseRelation;
        return tmpSmmKACaseRelation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActivitiesTmp</Name>
				<Source><![CDATA[
    [SRSReportDataSetAttribute(tableStr(PIPCAPAActivitiesTmp))]
    public PIPCAPAActivitiesTmp getActivitiesTmp()
    {
        select activitiesTemp;
        return activitiesTemp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSignatureLogTmp</Name>
				<Source><![CDATA[
    [SRSReportDataSetAttribute(tableStr(PIPSignatureLogTmp))]
    public PIPSignatureLogTmp getSignatureLogTmp()
    {
        select signatureLogTmp;
        return signatureLogTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    public void processReport()
    {
        PIPCAPACaseDetailContract reportContract = this.rdpDataContract as PIPCAPACaseDetailContract;
        Query query = this.parmQuery();
        QueryRun queryRun = new QueryRun(query);

        CaseDetailBase caseDetailBase = CaseDetailBase::find(reportContract.parmCaseId());

        caseDetailTmp = this.newCaseDetailBaseTmp(CaseDetailBase);

        caseDetailTmp.insert();

        PIPCAPACaseEmailRec emailRec;
        while select emailRec
                where emailRec.CaseRecId == caseDetailBase.RecId
        {
            this.newCaseEmailRecTmp(emailRec, caseDetailTmp);
        }

        CaseLog caseLog;
        while select caseLog
                where caseLog.CaseRecId == caseDetailBase.RecId
        {
            this.newCaseLogTmp(caseLog, caseDetailTmp);
        }

        CaseAssociation caseAssociation;
        while select caseAssociation
                where caseAssociation.CaseRecId == caseDetailBase.RecId
        {
            this.newCaseAssociationTmp(caseAssociation, caseDetailTmp);
        }

        tmpSmmKACaseRelation = CaseDetailForm::createTmpKATable(caseDetailBase);

        smmActivityParentLinkTable parentLink;
        while select parentLink
            where parentLink.ParentType == smmActivityParentType::Case
                && parentLink.RefRecId == caseDetailBase.RecId
        {
            smmActivities activities = smmActivities::find(parentLink.ActivityNumber);

            if (activities.pipGetPrintOnReport() == PIPNoYesInherit::Yes)
            {
                this.newSMMActivitiesTemp(activities);
            }
        }

        this.newSignatureLogTmp(caseDetailBase);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newCaseDetailBaseTmp</Name>
				<Source><![CDATA[
    private PIPCAPACaseDetailTmp newCaseDetailBaseTmp(CaseDetailBase _caseDetailBase)
    {
        PIPCAPACaseDetailTmp newCaseDetailTmp;

        newCaseDetailTmp.CaseId = _caseDetailBase.CaseId;
        newCaseDetailTmp.CategoryRecId = _caseDetailBase.CategoryRecId;
        newCaseDetailTmp.ClosedBy = _caseDetailBase.ClosedBy;
        newCaseDetailTmp.ClosedDateTime = _caseDetailBase.ClosedDateTime;
        newCaseDetailTmp.ContactPersonId = _caseDetailBase.ContactPersonId;
        newCaseDetailTmp.Department = _caseDetailBase.Department;
        newCaseDetailTmp.Description = _caseDetailBase.Description;
        newCaseDetailTmp.EmailId = _caseDetailBase.EmailId;
        newCaseDetailTmp.InstanceRelationType = _caseDetailBase.InstanceRelationType;
        newCaseDetailTmp.Memo = _caseDetailBase.Memo;
        newCaseDetailTmp.HcmWorkerName = HcmWorker::find(_caseDetailBase.OwnerWorker).name();
        newCaseDetailTmp.Party = _caseDetailBase.Party;
        newCaseDetailTmp.Process = _caseDetailBase.Process;
        newCaseDetailTmp.Status = _caseDetailBase.Status;
        newCaseDetailTmp.Priority = _caseDetailBase.Priority;
        newCaseDetailTmp.PIPActivateSignature = _caseDetailBase.PIPActivateSignature;
        newCaseDetailTmp.PIPCAPACaseClassification = _caseDetailBase.PIPCAPACaseClassification;
        newCaseDetailTmp.PIPCAPAClassificationCode = _caseDetailBase.PIPCAPAClassificationCode;
        newCaseDetailTmp.PIPCAPAClassificationDescription = PIPCAPAClassificationCodes::find(_caseDetailBase.PIPCAPAClassificationCode).ClassificationDescription;
        newCaseDetailTmp.PIPCAPADueDate = _caseDetailBase.PIPCAPADueDate;
        newCaseDetailTmp.PIPCAPAResolution = _caseDetailBase.PIPCAPAResolution;
        newCaseDetailTmp.PIPCAPAResolutionNote = _caseDetailBase.PIPCAPAResolutionNote;
        newCaseDetailTmp.PIPCAPAResolutionType = _caseDetailBase.PIPCAPAResolutionType;
        newCaseDetailTmp.PIPCAPAResolutionTypeDescription = PIPCAPAResolutions::find(_caseDetailBase.PIPCAPAResolutionType).ResolutionTypeDescription;
        newCaseDetailTmp.PIPCAPASourceCode = _caseDetailBase.PIPCAPASourceCode;
        newCaseDetailTmp.PIPCAPASourceDescription = PIPCAPASourceCodes::find(_caseDetailBase.PIPCAPASourceCode).SourceDescription;
        newCaseDetailTmp.PIPCAPASubCategory = _caseDetailBase.PIPCAPASubCategory;
        newCaseDetailTmp.PIPCategory = _caseDetailBase.PIPCategory;
        newCaseDetailTmp.PIPDate = _caseDetailBase.PIPDate;
        newCaseDetailTmp.Title = strFmt("@SYS76766", _caseDetailBase.CaseId, _caseDetailBase.Description);
        newCaseDetailTmp.DirPartyName = DirPartyTable::findRec(_caseDetailBase.Party).Name;
        newCaseDetailTmp.PIPCreatedBy = _caseDetailBase.CreatedBy;
        newCaseDetailTmp.PIPCreatedDateAndTime = _caseDetailBase.CreatedDateTime;
        newCaseDetailTmp.DepartmentName = OMOperatingUnit::find(_caseDetailBase.Department, OMOperatingUnitType::OMDepartment).Name;
        newCaseDetailTmp.PIPCAPAType = _caseDetailBase.PIPCAPAType;
        newCaseDetailTmp.PIPCAPARootCauseCode = _caseDetailBase.PIPCAPARootCauseCode;

        CaseDetail caseDetail = CaseDetail::find(_caseDetailBase.CaseId);

        newCaseDetailTmp.ServiceLevelAgreementId = caseDetail.ServiceLevelAgreementId;
        newCaseDetailTmp.ServiceLevelAgreementStatus = caseDetail.ServiceLevelAgreementStatus;
        newCaseDetailTmp.SLALatestCompletionDateTime = caseDetail.SLALatestCompletionDateTime;
        newCaseDetailTmp.StageId = caseDetail.StageId;
        newCaseDetailTmp.ProjId = caseDetail.ProjId;
        newCaseDetailTmp.PlannedEffectiveDate = caseDetail.PlannedEffectiveDate;
        newCaseDetailTmp.Compliance = caseDetail.Compliance;
        newCaseDetailTmp.Resolution = caseDetail.Resolution;
        newCaseDetailTmp.QuestionnaireId = caseDetail.QuestionnaireId;
        newCaseDetailTmp.PIPCAPARootCauseDescription = caseDetail.pipCAPARootCauseDescription();
        newCaseDetailTmp.PIPCAPATypeDescription = caseDetail.pipCAPATypeDescription();

        CaseDependency caseDependency = CaseDependency::findCase(_caseDetailBase.RecId);

        newCaseDetailTmp.ParentCaseId = CaseDetail::findRec(CaseDependency.parentCaseRecId).CaseId;

        return newCaseDetailTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newCaseEmailRecTmp</Name>
				<Source><![CDATA[
    private void newCaseEmailRecTmp(PIPCAPACaseEmailRec _emailRec, PIPCAPACaseDetailTmp _caseDetailTmp)
    {
        caseEmailRecTmp.ActivityStatusClosed = _emailRec.ActivityStatusClosed;
        caseEmailRecTmp.ActivityStatusReopened = _emailRec.ActivityStatusReopened;
        caseEmailRecTmp.CaseStatusCancelled = _emailRec.CaseStatusCancelled;
        caseEmailRecTmp.CaseStatusClosed = _emailRec.CaseStatusClosed;
        caseEmailRecTmp.CaseStatusInProcess = _emailRec.CaseStatusInProcess;
        
        if (_emailRec.PIPCAPAWorkerGroupRecId)
        {
            caseEmailRecTmp.Email = "Multiple";
        }
        else if (_emailRec.DirPartyRecId)
        {
            DirPersonName personName = DirPersonName::find(DirPerson::find(_emailRec.DirPartyRecId).RecId);

            caseEmailRecTmp.FirstName = personName.FirstName;
            caseEmailRecTmp.LastName = PersonName.LastName;
            
            DirPartyTable partyTable = DirPartyTable::findRec(_emailRec.DirPartyRecId);

            caseEmailRecTmp.Phone = partyTable.primaryPhone();
            caseEmailRecTmp.Email = partyTable.primaryEmail();
            caseEmailRecTmp.DirPartyNumber = partyTable.PartyNumber;
        }

        caseEmailRecTmp.PIPCAPAWorkerGroupId = PIPCAPAWorkerGroup::find(_emailRec.PIPCAPAWorkerGroupRecId).GroupId;

        caseEmailRecTmp.CaseRecId = _caseDetailTmp.RecId;

        caseEmailRecTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newCaseLogTmp</Name>
				<Source><![CDATA[
    private void newCaseLogTmp(CaseLog _caseLog, PIPCAPACaseDetailTmp _caseDetailTmp)
    {
        caseLogTmp.CaseId = _caseDetailTmp.CaseId;
        caseLogTmp.PIPCreatedDateAndTime = _caseLog.CreatedDateTime;
        caseLogTmp.Description = _caseLog.editDescription(false, _caseLog.Description);
        caseLogTmp.SourceTypeId = _caseLog.SourceTypeId;
        caseLogTmp.PIPCreatedBy = _caseLog.CreatedBy;
        caseLogTmp.CaseSourceLinkId = CaseLog_Extension::editSourceLinkedId(_caseLog);
        caseLogTmp.PIPCAPAResolution = CaseLog::pipEditResolution(_caseLog);

        caseLogTmp.CaseRecId = _caseDetailTmp.RecId;

        caseLogTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newCaseAssociationTmp</Name>
				<Source><![CDATA[
    private void newCaseAssociationTmp(CaseAssociation _caseAssociation, PIPCAPACaseDetailTmp _caseDetailTmp)
    {
        caseAssociationTmp.EntityType = _caseAssociation.EntityType;
        caseAssociationTmp.IsPrimary = _caseAssociation.IsPrimary;
        caseAssociationTmp.RefRecId = _caseAssociation.RefRecId;
        caseAssociationTmp.CaseLinkedName = _caseAssociation.linkedName();
        
        CaseIAssociation caseAssociation = CaseAssociation::getPlugIn(_caseAssociation.EntityType);
        if (caseAssociation)
        {
            caseAssociationTmp.CaseAssociationLinkId = caseAssociation.getLinkedId(_caseAssociation.RefRecId);
        }
        
        caseAssociationTmp.CaseRecId = _caseDetailTmp.RecId;

        if (_caseAssociation.EntityType == CaseEntityType::Item)
        {
            PIPCAPACaseDimAssociation dimAssociation;

            while select dimAssociation
                where dimAssociation.CaseAssociation == _caseAssociation.RecId
            {
                InventDim inventDim = InventDim::find(dimAssociation.InventDimId);

                caseAssociationTmp.InventBatchId = inventDim.inventBatchId;
                caseAssociationTmp.InventSerialId = inventDim.inventSerialId;
                caseAssociationTmp.PIPImpactedQty = dimAssociation.PIPImpactedQty;
                caseAssociationTmp.UnitId = dimAssociation.UnitId;
                caseAssociationTmp.PIPPdsImpactedCWQty = dimAssociation.PIPPdsImpactedCWQty;
                caseAssociationTmp.PdsCWUnitId = dimAssociation.PdsCWUnitId;
                caseAssociationTmp.insert();
            }

        }
        else
        {
            caseAssociationTmp.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newSMMActivitiesTemp</Name>
				<Source><![CDATA[
    private void newSMMActivitiesTemp(smmActivities _activities)
    {
        activitiesTemp.ActivityNumber = _activities.ActivityNumber;
        activitiesTemp.ActivityTaskTimeType = _activities.ActivityTaskTimeType;
        activitiesTemp.ActualEndDateTime = _activities.ActualEndDateTime;
        activitiesTemp.Category = _activities.Category;
        activitiesTemp.Closed = _activities.Closed;
        activitiesTemp.Dispatched = _activities.Dispatched;
        activitiesTemp.EndDateTime = _activities.EndDateTime;
        activitiesTemp.Location = _activities.Location;
        activitiesTemp.PIPCAPAResolution = _activities.PIPCAPAResolution;
        activitiesTemp.PIPCAPAResolutionNote = _activities.PIPCAPAResolutionNote;
        activitiesTemp.PhaseId = _activities.PhaseId;
        activitiesTemp.PlanId = _activities.PlanId;
        activitiesTemp.Purpose = _activities.Purpose;
        activitiesTemp.RecurrenceState = _activities.RecurrenceState;
        activitiesTemp.ReminderActive = _activities.ReminderActive;
        activitiesTemp.ReminderMinutes = _activities.ReminderMinutes;
        activitiesTemp.StartDateTime = _activities.StartDateTime;
        activitiesTemp.Status = _activities.Status;
        activitiesTemp.TaskPriority = _activities.TaskPriority;
        activitiesTemp.TypeId = _activities.TypeId;
        activitiesTemp.UserMemo = _activities.UserMemo;
        
        activitiesTemp.PIPCAPAWorkerGroupId = PIPCAPAWorkerGroup::find(_activities.PIPWorkerGroup).GroupId;
        activitiesTemp.ResponsibleName = HcmWorker::find(_activities.ResponsibleWorker).name();
        activitiesTemp.DoneByWorker = HcmWorker::find(_activities.DoneByWorker).name();

        activitiesTemp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newSignatureLogTmp</Name>
				<Source><![CDATA[
    private void newSignatureLogTmp(CaseDetailBase _caseDetailBase)
    {
        SIGSignatureLog signatureLog;

        select firstonly signatureLog order signatureLog.SignatureDateTime desc
            where signatureLog.RefRecId == _caseDetailBase.RecId
                && signatureLog.RefTableId == _caseDetailBase.TableId;

        signatureLogTmp.AuditLogRef = signatureLog.AuditLogRef;
        signatureLogTmp.Comment = signatureLog.Comment;
        signatureLogTmp.DocumentClassId = signatureLog.DocumentClassId;
        signatureLogTmp.LoginId = signatureLog.LoginId;
        signatureLogTmp.ReasonCode = signatureLog.ReasonCode;
        signatureLogTmp.SerializedDocument = signatureLog.SerializedDocument;
        signatureLogTmp.SignatureDateTime = signatureLog.SignatureDateTime;
        signatureLogTmp.SigneeId = signatureLog.SigneeId;
        signatureLogTmp.SigningCertificate = signatureLog.SigningCertificate;
        signatureLogTmp.SigningProvider = signatureLog.SigningProvider;
        signatureLogTmp.PIPPrintedName = signatureLog.PIPPrintedName;

        UserInfo userInfo = xUserInfo::find(false, signatureLog.LoginId);
        signatureLogTmp.SIGLoginName = (userInfo && userInfo.Name) ? userInfo.Name : signatureLog.LoginId;

        userInfo = xUserInfo::find(false, signatureLog.SigneeId);
        signatureLogTmp.SIGSigneeName = (userInfo && userInfo.Name) ? userInfo.Name : signatureLog.SigneeId;

        signatureLogTmp.insert();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>