<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PIPHierarchyTreeTable_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(tableStr(HierarchyTreeTable))]
public final class PIPHierarchyTreeTable_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>pipActivity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the related record from the <c>smmActivities</c> table.
    /// </summary>
    /// <param name="_forUpdate">
    ///    Determines if the record will be read for updating; optional.
    /// </param>
    /// <returns>
    ///    The related record from the <c>smmActivities</c> table.
    /// </returns>
    public smmActivities pipActivity(boolean _forUpdate = false)
    {
        return smmActivities::findWithRecId(this.RefRecId, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pipGetInheritedValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets an inheritable value for this hierarchy tree element.
    /// </summary>
    /// <param name="_activityFieldNum">
    ///    The ID of the field in the <c>smmActivities</c> table to retrieve the value for.
    /// </param>
    /// <returns>
    ///    The value of an inheritable field for this hierarchy tree element. The value may have been inherited from a parent element of the hierarchy.
    /// </returns>
    private anytype pipGetInheritedValue(FieldId _activityFieldNum)
    {
        smmActivities       activity;
        HierarchyTreeTable  hierarchyTreeTable = this;
    
        while (hierarchyTreeTable.RecId)
        {
            activity = hierarchyTreeTable.pipActivity();
            if (activity.(_activityFieldNum))
            {
                return activity.(_activityFieldNum);
            }
            hierarchyTreeTable = hierarchyTreeTable.pipParent();
        }
    
        // Return the empty value, whatever type that is for the specified field
        return activity.(_activityFieldNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pipGetNotifyWorkerGroup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the CAPA send notification to worker group indicator value for this hierarchy tree element.
    /// </summary>
    /// <returns>
    ///    The CAPA send notification to worker group indicator value for this hierarchy tree element, which may have been inherited from a parent element in hierarchy.
    /// </returns>
    public PIPCAPANotifyGroup pipGetNotifyWorkerGroup()
    {
        PIPCAPANotifyGroup  notifyGroup = this.pipGetInheritedValue(fieldNum(smmActivities, PIPNotifyGroup));
    
        if (notifyGroup == PIPNoYesInherit::Inherit)
        {
            notifyGroup = PIPNoYesInherit::No;
        }
    
        return notifyGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pipGetEmailActivityUpdate</Name>
				<Source><![CDATA[
    public PIPCAPAEmailActivity pipGetEmailActivityUpdate()
    {
        PIPCAPAEmailActivity  emailActivity = this.pipGetInheritedValue(fieldNum(smmActivities, PIPNotifyGroup));
    
        if (emailActivity == PIPNoYesInherit::Inherit)
        {
            emailActivity = PIPNoYesInherit::No;
        }
    
        return emailActivity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pipGetWorker</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the worker reference for this hierarchy tree element.
    /// </summary>
    /// <returns>
    ///    The worker reference for this hierarchy tree element, which may have been inherited from a parent element of the hierarchy.
    /// </returns>
    public HcmWorkerRecId pipGetWorker()
    {
        return this.pipGetInheritedValue(fieldNum(smmActivities, ResponsibleWorker));
    }

]]></Source>
			</Method>
			<Method>
				<Name>pipGetWorkerGroup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the CAPA worker group reference for this hierarchy tree element.
    /// </summary>
    /// <returns>
    ///    The CAPA worker group reference for this hierarchy tree element, which may have been inherited from a parent element in hierarchy.
    /// </returns>
    public PIPCAPAWorkerGroupRecId pipGetWorkerGroup()
    {
        return this.pipGetInheritedValue(fieldNum(smmActivities, PIPWorkerGroup));
    }

]]></Source>
			</Method>
			<Method>
				<Name>pipGetPrintOnReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Get the print on report parameter for this hierarchy tree element.
    /// </summary>
    /// <returns>
    ///     The print on report parameter for this hierarchy tree element, which may have been inherited from a parent element in hierarchy.
    /// </returns>
    public PIPCAPAPrintOnReport pipGetPrintOnReport()
    {
        return this.pipGetInheritedValue(fieldNum(smmActivities, PIPCAPAPrintOnReport));
    }

]]></Source>
			</Method>
			<Method>
				<Name>pipIsElementReadyForCase</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a value indicating if this hierarchy element is ready to use on a case.
    /// </summary>
    /// <param name="_showError">
    ///    Determines if this should show specific error messages when a problem is encountered; optional.
    /// </param>
    /// <returns>
    ///    true if this hierarchy element is ready to use on a case; otherwise, false.
    /// </returns>
    public boolean pipIsElementReadyForCase(boolean _showError = true)
    {
        HierarchyTreeTable  hierarchyTreeTable;
        smmActivities       activity;
    
        if (this.ElementNodeType == ElementNodeType::Node)
        {
            while select hierarchyTreeTable
                where hierarchyTreeTable.HierarchyId            == this.HierarchyId
                    && hierarchyTreeTable.ParentElementNumber   == this.ElementNumber
            {
                if (!hierarchyTreeTable.pipIsElementReadyForCase(_showError))
                {
                    return false;
                }
            }
        }
        else
        {
            activity = this.pipActivity();
            if (!activity.ResponsibleWorker && !activity.pipWorkerGroup().defaultWorker())
            {
                if (_showError)
                {
                    error(strFmt("@PIP321", activity.Purpose, activity.pipWorkerGroup().GroupId));
                }
                return false;
            }
        }
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pipParent</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the parent node for this node.
    /// </summary>
    /// <returns>
    ///    The parent node for this node.
    /// </returns>
    public HierarchyTreeTable pipParent()
    {
        return HierarchyTreeTable::findParentElement(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pipTopLevelNode</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the top level node in the tree for this node.
    /// </summary>
    /// <returns>
    ///    The top level node in the tree for this node.
    /// </returns>
    /// <remarks>
    ///    The top level node is the node in the tree just below the root node.
    /// </remarks>
    public HierarchyTreeTable pipTopLevelNode()
    {
        HierarchyTreeTable  node = this;
        HierarchyTreeTable  root = HierarchyTreeTable::findRootLevelNode(this.HierarchyId);
    
        while (node.RecId && node.ParentElementNumber != root.ElementNumber)
        {
            node = node.pipParent();
        }
    
        return node;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pipVisitNodes</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Visits all the nodes including sub-nodes, recursively, for the current node with the given visitor.
    /// </summary>
    /// <param name="_recordVisitor">
    ///   The record visitor to select and process all hierarchy tree nodes starting with the current node and all
    ///   children.
    /// </param>
    public void pipVisitNodes(PIPRecordVisitor _recordVisitor)
    {
        this.pipVisitNodesRecursive(_recordVisitor);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pipVisitNodesRecursive</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Visits the hierarchy tree nodes recursively.
    /// </summary>
    /// <param name="_recordVisitor">
    ///    The record visitor used to accept each record visited.
    /// </param>
    /// <returns>
    ///    true to continue processing; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    This is used internally to do the actual recursive scan through the hierarchy tree.
    /// </remarks>
    private boolean pipVisitNodesRecursive(PIPRecordVisitor _recordVisitor)
    {
        HierarchyTreeTable  hierarchyTreeTable;
    
        if (!_recordVisitor.accept(this))
        {
            return false;
        }
    
        if (this.ElementNodeType == ElementNodeType::Node)
        {
            while select hierarchyTreeTable
                order by hierarchyTreeTable.SiblingNumber
                where hierarchyTreeTable.ParentElementNumber == this.ElementNumber
                    && hierarchyTreeTable.HierarchyId        == this.HierarchyId
            {
                if (!hierarchyTreeTable.pipVisitNodesRecursive(_recordVisitor))
                {
                    return false;
                }
            }
        }
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>HierarchyTreeTable_onInserted</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [DataEventHandler(tableStr(HierarchyTreeTable), DataEventType::Inserted)]
    public static void HierarchyTreeTable_onInserted(Common sender, DataEventArgs e)
    {
        HierarchyTreeTable _this = sender as HierarchyTreeTable;
        smmActivities::findWithRecId(_this.RefRecId).pipOnHierarchyNodeCreated(_this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>HierarchyTreeTable_insertNodeEvent</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="_hierarchy"></param>
    /// <param name="_hierarchyTreeTable"></param>
    /// <param name="_smmActivities"></param>
    [SubscribesTo(tableStr(HierarchyTreeTable), delegateStr(HierarchyTreeTable, insertNodeEvent))]
    public static void HierarchyTreeTable_insertNodeEvent(Hierarchy _hierarchy, HierarchyTreeTable _hierarchyTreeTable, smmActivities _smmActivities)
    {
        _smmActivities.PIPIsCAPA = _hierarchy.PIPIsCAPA;
    }

]]></Source>
			</Method>
			<Method>
				<Name>HierarchyTreeTable_preInsertActivity</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="_hierarchyTreeTable"></param>
    /// <param name="_smmActivities"></param>
    [SubscribesTo(tableStr(HierarchyTreeTable), delegateStr(HierarchyTreeTable, preInsertActivity))]
    public static void HierarchyTreeTable_preInsertActivity(HierarchyTreeTable _hierarchyTreeTable, smmActivities _smmActivities)
    {
        if (!_hierarchyTreeTable.Name)
        {
            _hierarchyTreeTable.Name = _smmActivities.Purpose;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>