<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PIPCAPACreateTemplateDialogField</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>PIPCAPACreateTemplateDialogField</c> class manages the dialog fields and values for a
///    single template node in a CAPA process creation document.
/// </summary>
public class PIPCAPACreateTemplateDialogField implements PIPCAPACreateTemplateControl
{
    HierarchyName   templateName;
    NoYes           loadTemplate;
    boolean         overwrite;

    HierarchyName   definedTemplateName;
    Description     templateDescription;

    DialogField     loadTemplateField;
    DialogField     templateNameField;

    #define.AttributeName("name")
    #define.AttributeDescription("description")
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean         ret = true;
        Hierarchy       hierarchy;
        DialogButton    button;
    
        templateName = templateNameField.value();
        loadTemplate = loadTemplateField.value();
    
        if (!templateName)
        {
            ret = checkFailed(strFmt("@PIP464", definedTemplateName));
            templateName = definedTemplateName;
            templateNameField.value(templateName);
        }
    
        if (ret && loadTemplate)
        {
            overwrite = false;
            hierarchy = Hierarchy::findByNameType(templateName, HierarchyType::Case, NoYes::Yes);
            if (hierarchy)
            {
                if (!hierarchy.PIPIsCAPA)
                {
                    ret = checkFailed(strFmt("@PIP465", templateName));
                }
                else if (HierarchyLinkTable::existTemplateId(hierarchy.HierarchyId))
                {
                    ret = checkFailed(strFmt("@PIP466", templateName));
                }
                else
                {
                    button = Box::yesNoCancel(strFmt("@PIP467", templateName), DialogButton::No);
                    switch (button)
                    {
                        case DialogButton::Cancel:
                            ret = false;
                            break;
                        case DialogButton::Yes:
                            overwrite = true;
                            break;
                        case DialogButton::No:
                            overwrite = false;
                            break;
                    }
                }
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDialogTemplateNode</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the dialog fields and values from the given template node.
    /// </summary>
    /// <param name="_dialog">
    ///    The dialog where the fields need to be added.
    /// </param>
    /// <param name="_templateNode">
    ///    The template <c>XmlNode</c> from a CAPA process XML document.
    /// </param>
    private void initDialogTemplateNode(Dialog _dialog, XmlNode _templateNode)
    {
        DialogGroup templateGroup;
        DialogText  descriptionText;
        XmlNode     node;
    
        definedTemplateName = PIPCAPATemplateCreator::getAttribute(_templateNode, #AttributeName, true).value();
        templateName        = definedTemplateName;
        loadTemplate        = Hierarchy::findByNameType(templateName, HierarchyType::Case, NoYes::Yes).RecId == 0;
    
        templateGroup = _dialog.addGroup();
        templateGroup.columns(3);
        loadTemplateField = _dialog.addFieldValue(extendedTypeStr(NoYesId), loadTemplate, "@SYS8784", "@PIP468");
        templateNameField = _dialog.addFieldValue(extendedTypeStr(HierarchyName), templateName, "@SYS92116", "@PIP469");
    
        node = _templateNode.attributes().getNamedItem(#AttributeDescription);
        if (node)
        {
            descriptionText = _dialog.addText(node.value());
        }
        else
        {
            descriptionText = _dialog.addText(definedTemplateName);
        }
        descriptionText.displayLengthValue(40);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDefinedTemplateName</Name>
				<Source><![CDATA[
    public HierarchyName parmDefinedTemplateName(HierarchyName _definedTemplateName = definedTemplateName)
    {
        definedTemplateName = _definedTemplateName;
    
        return definedTemplateName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLoadTemplate</Name>
				<Source><![CDATA[
    public boolean parmLoadTemplate(boolean _loadTemplate = loadTemplate)
    {
        loadTemplate = _loadTemplate;
    
        return loadTemplate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOverwrite</Name>
				<Source><![CDATA[
    public boolean parmOverwrite(boolean _overwrite = overwrite)
    {
        overwrite = _overwrite;
    
        return overwrite;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTemplateName</Name>
				<Source><![CDATA[
    public HierarchyName parmTemplateName(HierarchyName _templateName = templateName)
    {
        templateName = _templateName;
    
        return templateName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static PIPCAPACreateTemplateDialogField construct()
    {
        return new PIPCAPACreateTemplateDialogField();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newDialogTemplateNode</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>PIPCAPACreateTemplateDialogField</c> class.
    /// </summary>
    /// <param name="_dialog">
    ///    The dialog where the fields need to be added.
    /// </param>
    /// <param name="_templateNode">
    ///    The template <c>XmlNode</c> from a CAPA process XML document.
    /// </param>
    /// <returns>
    ///    A new instance of the <c>PIPCAPACreateTemplateDialogField</c> class.
    /// </returns>
    /// <remarks>
    ///    This will also add fields that the object will manage to dialog <paramref name="_dialog"/>.
    /// </remarks>
    public static PIPCAPACreateTemplateDialogField newDialogTemplateNode(Dialog _dialog, XmlNode _templateNode)
    {
        PIPCAPACreateTemplateDialogField    templateFields = PIPCAPACreateTemplateDialogField::construct();
    
        templateFields.initDialogTemplateNode(_dialog, _templateNode);
    
        return templateFields;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>