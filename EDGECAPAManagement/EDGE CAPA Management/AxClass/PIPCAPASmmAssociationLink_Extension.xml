<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PIPCAPASmmAssociationLink_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(smmAssociationLink))]
public final class PIPCAPASmmAssociationLink_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createCaseAssociation</Name>
				<Source><![CDATA[
    public static CaseAssociation createCaseAssociation(NoYes _isPrimary, Common _externalRecord, RefRecId _caseRecId)
    {
        InventBatch inventBatch;
        
        if (_externalRecord is InventBatch)
        {
            inventBatch = _externalRecord;
            _externalRecord = inventBatch.InventTable();
        }
        
        CaseAssociation caseAssociation = next createCaseAssociation(_isPrimary, _externalRecord, _caseRecId);

        if (caseAssociation && caseAssociation.EntityType == CaseEntityType::PurchTable)
        {
            PurchTable purchTable = _externalRecord;

            if (purchTable.MCRDropShipment == NoYes::Yes)
            {
                InterCompanyPurchSalesReference purchSalesRefernce;
                SalesTable salesTable;

                select firstonly purchSalesRefernce
                    where purchSalesRefernce.PurchId == purchTable.PurchId
                    join salesTable
                        where salesTable.SalesId == purchSalesRefernce.SalesId;

                if (salesTable)
                {
                    smmAssociationLink::createCaseAssociation(NoYes::No, salesTable, _caseRecId);
                }

            }
        }

        if (inventBatch)
        {
            ttsbegin;
            
            PIPCAPACaseDimAssociation dimAssociation;

            select firstonly forupdate dimAssociation 
                where dimAssociation.CaseAssociation == caseAssociation.RecId;

            InventDim inventDim = InventDim::find(dimAssociation.InventDimId);
            inventDim.inventBatchId = inventBatch.inventBatchId;

            dimAssociation.InventDimId = InventDim::findOrCreate(InventDim).inventDimId;
            dimAssociation.update();

            ttscommit;
        }

        return caseAssociation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRelatedCaseRanges</Name>
				<Source><![CDATA[
    public void addRelatedCaseRanges(Common _externalRecord)
    {
        InventBatch inventBatch;
        InventTable inventTable;
        
        if (_externalRecord is InventBatch)
        {
            inventBatch = _externalRecord;
            inventTable = inventBatch.InventTable();
        }
        
        next addRelatedCaseRanges(inventTable ? inventTable : _externalRecord);

        QueryBuildDataSource    queryBuildDataSource;
        CaseEntityType          caseEntityType;

        if (inventTable)
        {
            queryBuildDataSource = SysQuery::findOrCreateDataSource(query, tablenum(CaseAssociation), tablenum(CaseDetailBase));

            QueryBuildDataSource caseDimBuildDataSource = queryBuildDataSource.addDataSource(tableNum(PIPCAPACaseDimAssociation));
            caseDimBuildDataSource.joinMode(JoinMode::ExistsJoin);
            caseDimBuildDataSource.fetchMode(QueryFetchMode::One2One);
            caseDimBuildDataSource.addLink(fieldNum(CaseAssociation, RecId), fieldNum(PIPCAPACaseDimAssociation, CaseAssociation));

            QueryBuildDataSource inventDimBuildDataSource = caseDimBuildDataSource.addDataSource(tableNum(InventDim));
            inventDimBuildDataSource.joinMode(JoinMode::ExistsJoin);
            inventDimBuildDataSource.fetchMode(QueryFetchMode::One2One);
            inventDimBuildDataSource.addLink(fieldNum(PIPCAPACaseDimAssociation, InventDimId), fieldNum(InventDim, inventDimId));

            QueryBuildRange batchRange = inventDimBuildDataSource.addRange(fieldnum(InventDim, inventBatchId));
            batchRange.value(inventBatch.inventBatchId);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>