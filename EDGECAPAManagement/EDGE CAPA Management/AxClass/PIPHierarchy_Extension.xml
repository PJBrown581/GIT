<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PIPHierarchy_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class contains extensions for the table <c>Hierarchy</c>.
/// </summary>
[ExtensionOf(tableStr(Hierarchy))]
public final class PIPHierarchy_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>pipCanApproveHierarchy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if a record in the <c>Hierarchy</c> table can be approved.
    /// </summary>
    /// <returns>
    /// true if the hierarchy can be approved; otherwise, false.
    /// </returns>
    public boolean pipCanApproveHierarchy()
    {
        HierarchyTreeTable  hierarchyTreeTable;
        HierarchyTreeTable  hierarchyTreeTable2;
        smmActivities       smmActivities;
        Hierarchy           hierarchy;
        boolean             ret = true;

        #define.TopLevel(1)

        select firstOnly RecId from hierarchy
            where hierarchy.HierarchyId                     == this.HierarchyId
                && hierarchy.IsTemplate                     == NoYes::Yes
                && hierarchy.HierarchyType                  == HierarchyType::Case
            exists join hierarchyTreeTable
            where hierarchyTreeTable.HierarchyId            == hierarchy.HierarchyId
                    && hierarchyTreeTable.ElementNodeType   == ElementNodeType::Activity
            notExists join hierarchyTreeTable2
            where hierarchyTreeTable2.HierarchyId           == hierarchy.HierarchyId
                && hierarchyTreeTable2.ElementNodeType      == ElementNodeType::Node
                && hierarchyTreeTable2.Level                == #TopLevel
            exists join smmActivities
            where smmActivities.RecId                       == hierarchyTreeTable2.RefRecId
                    && smmActivities.PIPWorkerGroup         == 0;

        if (hierarchy.RecId == 0)
        {
            ret = checkFailed("@PIP78");
        }

        if (ret)
        {
            while select smmActivities
                where smmActivities.ResponsibleWorker     != 0
                exists join hierarchyTreeTable
                where hierarchyTreeTable.HierarchyId      == this.HierarchyId
                    && hierarchyTreeTable.ElementNodeType == ElementNodeType::Activity
                    && hierarchyTreeTable.RefRecId        == smmActivities.RecId
            {
                if (!smmActivities.pipWorkerGroup().isGroupMember(smmActivities.pipGetWorker()))
                {
                    ret = checkFailed(strFmt("@PIP574", smmActivities.pipWorker().name(), smmActivities.Purpose, smmActivities.pipWorkerGroup().GroupId)) && ret;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pipIsReadyForCase</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a value indicating if this hierarchy is ready to be used on a CAPA case.
    /// </summary>
    /// <param name="_showError">
    /// Determines if this should show specific error messages when a problem is encountered; optional.
    /// </param>
    /// <returns>
    /// true if the hierarchy is ready to be used on a CAPA case; otherwise, false.
    /// </returns>
    // <PIP>
    public boolean pipIsReadyForCase(boolean _showError = true)
    {
        HierarchyTreeTable hierarchyTreeTable;

        hierarchyTreeTable = HierarchyTreeTable::findFirstLevelNodes(this.HierarchyId);

        return hierarchyTreeTable.pipIsElementReadyForCase(_showError);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pipLookupProcess</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Provides a form lookup for the process hierarchies available.
    /// </summary>
    /// <param name="_stringControl">
    ///    The form string control from which the lookup has been called.
    /// </param>
    /// <param name="_forCAPA">
    ///    Determines if the lookup should show the CAPA related hierarchy processes.
    /// </param>
    public static void pipLookupProcess(FormStringControl _stringControl, boolean _forCAPA)
    {
        Query                   query = new Query();
        QueryBuildDataSource    queryBuildDataSource;
    
        SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(Hierarchy), _stringControl);
    
        sysTableLookup.addLookupField(fieldNum(Hierarchy, Name));
        sysTableLookup.addLookupField(fieldNum(Hierarchy, Description));
        sysTableLookup.addLookupField(fieldNum(Hierarchy, HierarchyType));
        sysTableLookup.addLookupField(fieldNum(Hierarchy, IsActive));
        sysTableLookup.addLookupField(fieldNum(Hierarchy, IsTemplate));
    
        queryBuildDataSource = query.addDataSource(tableNum(Hierarchy));
    
        if (_forCAPA)
        {
            queryBuildDataSource.addRange(fieldNum(Hierarchy, PIPIsCAPA)).value(queryValue(NoYes::Yes));
            queryBuildDataSource.addRange(fieldNum(Hierarchy, PIPApproved)).value(queryValue(NoYes::Yes));
        }
        else
        {
            queryBuildDataSource.addRange(fieldNum(Hierarchy, PIPIsCAPA)).value(queryValue(NoYes::No));
        }
    
        sysTableLookup.parmQuery(query);
    
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>Hierarchy_onModifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [DataEventHandler(tableStr(Hierarchy), DataEventType::ModifiedField)]
    public static void Hierarchy_onModifiedField(Common sender, DataEventArgs e)
    {
        Hierarchy               hierarchy  = sender;
        ModifyFieldEventArgs    args       = e;
       
        switch (args.parmFieldId())
        {
            case fieldNum(Hierarchy, PIPApproved):
                hierarchy.IsActive = hierarchy.PIPApproved;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>Hierarchy_onValidatedField</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [DataEventHandler(tableStr(Hierarchy), DataEventType::ValidatedField)]
    public static void Hierarchy_onValidatedField(Common sender, DataEventArgs e)
    {

        Hierarchy               hierarchy  = sender;
        ValidateFieldEventArgs  args       = e;
       
        switch (args.parmFieldId())
        {
            case fieldNum(Hierarchy, PIPApproved):
                if (hierarchy.PIPApproved && !hierarchy.pipCanApproveHierarchy())
                {
                    checkFailed("@PIP573");
                }
                break;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>