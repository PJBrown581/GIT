<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PIPCAPAWorkerListPanel</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>PIPCAPAWorkerListPanel</c> class provides a form list panel control for assigning and unassigning
///    workers in a CAPA worker group.
/// </summary>
public class PIPCAPAWorkerListPanel extends SysListPanel
{
    PIPCAPAWorkerGroupRecId workerGroup;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addData</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds assignments to the worker group.
    /// </summary>
    /// <param name="data">
    ///    A container with the surrogate keys for the <c>HcmWorker</c> table for the workers to assign to the group.
    /// </param>
    public void addData(container data)
    {
        PIPCAPAWorkerGroupAssignment    workerAssignment;
        int                             i;
    
        if (!PIPCAPAWorkerGroup::exist(workerGroup))
        {
            return;
        }
    
        ttsBegin;
        RecordInsertList insertList = new RecordInsertList(tableNum(PIPCAPAWorkerGroupAssignment));
        for (i = conLen(data); i > 0; i--)
        {
            workerAssignment.clear();
            workerAssignment.Group = workerGroup;
            workerAssignment.Worker = conPeek(data, i);
            insertList.add(workerAssignment);
        }
        insertList.insertDatabase();
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getData</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the worker data to show in the list panel.
    /// </summary>
    /// <returns>
    ///    A container used by the standard list panel assignment. This container contains two contaniers, the first
    ///    is for the left pane and the second is the records for the right pane. The inner containers themselves
    ///    both contain zero or more containers which represent the records and data to show in the panes. The first
    ///    value in this container is the unique key identifying the record, in this case, the surrogate key for
    ///    the <c>HcmWorker</c> table and the remaining values are for each column shown in the pane.
    /// </returns>
    public container getData()
    {
        return PIPCAPAWorkerListPanel::getDataOnServer(workerGroup);
    }

]]></Source>
			</Method>
			<Method>
				<Name>numOfColumns</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the number of columns to show in the left or right panels.
    /// </summary>
    /// <returns>
    ///    The number of columns to show.
    /// </returns>
    public int numOfColumns()
    {
        return 4;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkerGroup</Name>
				<Source><![CDATA[
    public PIPCAPAWorkerGroupRecId parmWorkerGroup(PIPCAPAWorkerGroupRecId _workerGroup = workerGroup)
    {
        workerGroup = _workerGroup;
    
        return workerGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeData</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Removes assignments from the worker group.
    /// </summary>
    /// <param name="data">
    ///    A container with the surrogate keys for the <c>HcmWorker</c> table for the workers to remove from the group.
    /// </param>
    public void removeData(container data)
    {
        PIPCAPAWorkerGroupAssignment    workerAssignment;
        HcmWorkerRecId                  workerRecId;
        int                             i;

        workerAssignment.skipDataMethods(true);
    
        ttsBegin;
        for (i = conLen(data); i > 0; i--)
        {
            workerRecId = conPeek(data, i);
            delete_from workerAssignment
                where workerAssignment.Group    == workerGroup
                    && workerAssignment.Worker  == workerRecId;
        }
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sortMethod</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the sort method to use when constructing the data panes.
    /// </summary>
    /// <returns>
    ///    A value indicating which sort method to use; this implementation always returns <c>FormListSort::NoSort</c>.
    /// </returns>
    protected FormListSort sortMethod()
    {
        return FormListSort::NoSort;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that a panel update operation is allowed for a given record in the panel.
    /// </summary>
    /// <param name="data">
    ///    The key for the record being removed or added; in this case, the surrogate key for the <c>HcmWorker</c> table.
    /// </param>
    /// <param name="addRemove">
    ///    Determines if the validation is for a remove or add operation.
    /// </param>
    /// <returns>
    ///    true if the operation is allowed; otherwise, false.
    /// </returns>
    public boolean validate(anytype data, AddRemove addRemove)
    {
        boolean                         ret;
        PIPCAPAWorkerGroupAssignment    workerAssignment;
        HcmWorkerRecId                  workerRecId         = data;
    
        ret = super(data, addRemove);
    
        if (ret && addRemove == addRemove::Remove)
        {
            workerAssignment = PIPCAPAWorkerGroupAssignment::findGroupWorker(workerGroup, workerRecId, true);
            ret = workerAssignment.validateDelete();
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static PIPCAPAWorkerListPanel construct()
    {
        return new PIPCAPAWorkerListPanel();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDataOnServer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the data on the server tier.
    /// </summary>
    /// <param name="_workerGroup">
    ///    The surrogate key for the record in the <c>PIPCAPAWorkerGroup</c> table.
    /// </param>
    /// <returns>
    ///    A container used by the standard list panel assignment. This container contains two contaniers, the first
    ///    is for the left pane and the second is the records for the right pane. The inner containers themselves
    ///    both contain zero or more containers which represent the records and data to show in the panes. The first
    ///    value in this container is the unique key identifying the record, in this case, the surrogate key for
    ///    the <c>HcmWorker</c> table and the remaining values are for each column shown in the pane.
    /// </returns>
    private static server container getDataOnServer(PIPCAPAWorkerGroupRecId _workerGroup)
    {
        PIPCAPAWorkerLookup             capaWorkerLookup;
        QueryRun                        queryRun;
        Query                           query;
        QueryBuildDataSource            dsWorkerAssignment;
    
        HcmWorker                       worker;
        HcmEmployment                   employment;
        DirPerson                       person;
    
        container                       leftData;
        container                       rightData;
    
        // Use the lookup class to build the query to ensure the list panel shows exactly the same set of workers
        capaWorkerLookup = PIPCAPAWorkerLookup::newStandardOptions();
        capaWorkerLookup.parmWorkerGroup(_workerGroup);
    
        query = capaWorkerLookup.updateQuery();
    
        if (_workerGroup)
        {
            queryRun = new QueryRun(query);
            while (queryRun.next())
            {
                // Only need to retrieve the buffers from the QueryRun the first time since they are the same for every row
                if (!worker)
                {
                    worker = queryRun.get(tableNum(HcmWorker));
                    person = queryRun.get(tableNum(DirPerson));
                    employment = queryRun.get(tableNum(HcmEmployment));
                }
                rightData += [[worker.RecId, worker.PersonnelNumber, person.Name, worker.email(), enum2str(employment.EmploymentType)]];
            }
    
            dsWorkerAssignment = query.dataSourceTable(tableNum(PIPCAPAWorkerGroupAssignment));
            dsWorkerAssignment.joinMode(JoinMode::NoExistsJoin);
        }
    
        queryRun = new QueryRun(query);
        while (queryRun.next())
        {
            // Only need to retrieve the buffers from the QueryRun the first time since they are the same for every row
            if (!worker)
            {
                worker = queryRun.get(tableNum(HcmWorker));
                person = queryRun.get(tableNum(DirPerson));
                employment = queryRun.get(tableNum(HcmEmployment));
            }
            leftData += [[worker.RecId, worker.PersonnelNumber, person.Name, worker.email(), enum2str(employment.EmploymentType)]];
        }
    
        return [leftData, rightData];
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFormRun</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>PIPCAPAWorkerListPanel</c> class.
    /// </summary>
    /// <param name="_formRun">
    ///    The form run for the form.
    /// </param>
    /// <param name="_parentControlId">
    ///    The control ID for the control in which the panel should be created on the form. This must be a container
    ///    control, such as a tab page.
    /// </param>
    /// <returns>
    ///    A new instance of the <c>PIPCAPAWorkerListPanel</c> class.
    /// </returns>
    /// <remarks>
    ///    This class must be instanitated in a form <c>init</c> method prior to initializing the form (i.e. prior to calling
    ///    <c>super()</c>).
    /// </remarks>
    public static PIPCAPAWorkerListPanel newFormRun(FormRun _formRun, int _parentControlId)
    {
        PIPCAPAWorkerListPanel  sysListPanel = PIPCAPAWorkerListPanel::construct();
    
        #ResAppl
    
        sysListPanel.parmFormRun(_formRun);
        sysListPanel.parmParentId(_parentControlId);
        sysListPanel.parmCaptionSelected("@SYS70575");
        sysListPanel.parmCaptionAvailable("@SYS69647");
        sysListPanel.parmImageId(#ImageUser);
        sysListPanel.build();
    
        return sysListPanel;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>