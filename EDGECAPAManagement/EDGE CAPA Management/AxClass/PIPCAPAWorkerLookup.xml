<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PIPCAPAWorkerLookup</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>PIPCAPAWorkerLookup</c> class provides a lookup for workers that are also assigned to
///    at least one CAPA worker group.
/// </summary>
public class PIPCAPAWorkerLookup extends HcmWorkerLookup
{
    boolean                     requireCAPAGroupAssignment;
    PIPCAPAWorkerGroupRecId     workerGroup;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmRequireCAPAGroupAssignment</Name>
				<Source><![CDATA[
    public boolean parmRequireCAPAGroupAssignment(boolean _requireCAPAGroupAssignment = requireCAPAGroupAssignment)
    {
        requireCAPAGroupAssignment = _requireCAPAGroupAssignment;
    
        return requireCAPAGroupAssignment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkerGroup</Name>
				<Source><![CDATA[
    public PIPCAPAWorkerGroupRecId parmWorkerGroup(PIPCAPAWorkerGroupRecId _workerGroup = workerGroup)
    {
        workerGroup = _workerGroup;
    
        return workerGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQuery</Name>
				<Source><![CDATA[
    public Query updateQuery(HcmWorkerRecId _workerRecId = 0, Query _queryToUpdate = query)
    {
        Query                   localQuery;
        QueryBuildDataSource    dsWorker;
        QueryBuildDataSource    dsWorkerGroupAssignment;
        QueryBuildRange         rangeWorkerGroup;
    
        localQuery = super(_workerRecId, _queryToUpdate);
    
        dsWorker = localQuery.dataSourceTable(tableNum(HcmWorker));
        dsWorkerGroupAssignment = localQuery.dataSourceTable(tableNum(PIPCAPAWorkerGroupAssignment));
    
        if (requireCAPAGroupAssignment || workerGroup)
        {
            if (!dsWorkerGroupAssignment)
            {
                dsWorkerGroupAssignment = dsWorker.addDataSource(tableNum(PIPCAPAWorkerGroupAssignment));
                dsWorkerGroupAssignment.joinMode(JoinMode::ExistsJoin);
                dsWorkerGroupAssignment.relations(true);
            }
    
            dsWorkerGroupAssignment.enabled(true);
            rangeWorkerGroup = SysQuery::findOrCreateRange(dsWorkerGroupAssignment, fieldNum(PIPCAPAWorkerGroupAssignment, Group));
    
            if (workerGroup)
            {
                rangeWorkerGroup.value(queryValue(workerGroup));
            }
            else
            {
                rangeWorkerGroup.value('');
            }
        }
        else if (dsWorkerGroupAssignment)
        {
            dsWorkerGroupAssignment.enabled(false);
        }
    
        return localQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWorker</Name>
				<Source><![CDATA[
    public boolean validateWorker(HcmWorkerRecId _workerRecId)
    {
        boolean ret;
    
        ret = super(_workerRecId);
    
        // Also allow the administrator if they are a member of the group through some other settings (e.g. implied member)
        if (!ret && workerGroup && InventParameters::find().PIPCAPAAdministrator == _workerRecId && PIPCAPAWorkerGroup::find(workerGroup).isGroupMember(_workerRecId))
        {
            ret = true;
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PIPCAPAWorkerLookup construct()
    {
        return new PIPCAPAWorkerLookup(false, false, false, false, false, false, false, false, false, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newForAdministrator</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>PIPCAPAWorkerLookup</c> class specifically for looking up workers to assign
    ///    as a CAPA administrator.
    /// </summary>
    /// <returns>
    ///    A new instance of the <c>PIPCAPAWorkerLookup</c> class initialized for assigning a CAPA administrator.
    /// </returns>
    public static PIPCAPAWorkerLookup newForAdministrator()
    {
        PIPCAPAWorkerLookup workerLookup = PIPCAPAWorkerLookup::construct();
    
        workerLookup.pipSetActiveWorkers();
        workerLookup.parmIncludeOnlyCurrentLegalEntity(true);
        workerLookup.parmlockLegalEntityFilters(true);
        workerLookup.parmRequireUserRelation(true);
    
        return workerLookup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandardOptions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>PIPCAPAWorkerLookup</c> class with the standard options set for
    ///    looking up a CAPA worker.
    /// </summary>
    /// <returns>
    ///    A new instance of the <c>PIPCAPAWorkerLookup</c> class with the standard options set for
    ///    looking up a CAPA worker.
    /// </returns>
    public static PIPCAPAWorkerLookup newStandardOptions()
    {
        PIPCAPAWorkerLookup workerLookup = PIPCAPAWorkerLookup::construct();
    
        workerLookup.pipSetActiveWorkers();
        workerLookup.parmIncludeOnlyCurrentLegalEntity(true);
        workerLookup.parmlockLegalEntityFilters(true);
        workerLookup.parmRequireCAPAGroupAssignment(true);
    
        return workerLookup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>workerLookupReference</Name>
				<Source><![CDATA[
    public Common workerLookupReference(FormReferenceControl _sender, PIPCAPAWorkerGroupRecId _workerGroupRecId = 0)
    {
        this.parmWorkerGroup(_workerGroupRecId);
        return this.lookupWorker(_sender);
    }

]]></Source>
			</Method>
			<Method>
				<Name>workerResolveReference</Name>
				<Source><![CDATA[
    public Common workerResolveReference(FormReferenceControl _sender, PIPCAPAWorkerGroupRecId _workerGroupRecId = 0)
    {
        PersonName name = _sender.filterValue(AbsoluteFieldBinding::construct(fieldStr(DirPerson, Name), tableStr(DirPerson))).value();
            
        HcmWorker worker;
        DirPartyTable party;
        select firstonly worker
            exists join party
                where party.RecId == worker.Person
                    && party.Name == Name;
        
        this.parmWorkerGroup(_workerGroupRecId);
        if (worker != null && !this.validateWorker(worker.RecId))
        {
            worker = null;
        }
        return worker;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>