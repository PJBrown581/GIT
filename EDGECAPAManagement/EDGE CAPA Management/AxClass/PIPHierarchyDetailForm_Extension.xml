<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PIPHierarchyDetailForm_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(formStr(HierarchyDetail))]
public final class PIPHierarchyDetailForm_Extension
{
    private static readonly DictClass extClass = new DictClass(classNum(PIPHierarchyDetailForm_Extension));
    
    private PIPCAPAWorkerLookup capaWorkerLookup;
    private boolean isCAPA;
    #PIPCAPAManagement

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmPIPIsCAPA</Name>
				<Source><![CDATA[
    public boolean parmPIPIsCAPA(boolean _isCAPA = isCAPA)
    {
        isCAPA = _isCAPA;
        return isCAPA;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onContextChange</Name>
				<Source><![CDATA[
    protected void onContextChange()
    {
        this.parmPIPIsCAPA(this.hierarchyContext.PIPIsCAPA);

        next onContextChange();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pipFormInitializing</Name>
				<Source><![CDATA[
    private void pipFormInitializing()
    {
        FormRun callerForm = this.args().caller() as FormRun;
        if (callerForm && callerForm.name() == formStr(Hierarchy))
        {
            DictClass dictClass = new DictClass(classNum(PIPHierarchyForm_Extension));
            isCAPA = dictClass.callStatic(methodStr(PIPHierarchyForm_Extension, parmPIPIsCAPA), callerForm);
        }
        else if (this.args().parm() == #CAPA)
        {
            isCAPA = true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>HierarchyDetail_OnInitialized</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormEventHandler(formStr(HierarchyDetail), FormEventType::Initialized)]
    public void HierarchyDetail_OnInitialized(xFormRun sender, FormEventArgs e)
    {
        // Important! This should be done in the Initializing event; however, AX7 U3 is not calling that either through a pre-method event handler or the form Initializing event.
        this.pipFormInitializing();

        if (isCAPA)
        {
            capaWorkerLookup = PIPCAPAWorkerLookup::newStandardOptions();

            // see standard class CaseDetailEventHandler for an example of how this was done
            var responsibleWorkControl = sender.design().controlName(formControlStr(HierarchyDetail, PIPCAPAResponsible_ResponsibleWorker)) as FormReferenceGroupControl;
            responsibleWorkControl.registerOverrideMethod(methodStr(FormReferenceControl, lookupReference), methodStr(PIPHierarchyDetailForm_Extension, onResponsibleWorkerLookupReference), this);
            responsibleWorkControl.registerOverrideMethod(methodStr(FormReferenceControl, resolveReference), methodStr(PIPHierarchyDetailForm_Extension, onResponsibleWorkerResolveReference), this);

            this.design().caption("@PIP9");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>PIPCtrlTreeActionCopyFrom_OnClicked</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormControlEventHandler(formControlStr(HierarchyDetail, PIPCtrlTreeActionCopyFrom), FormControlEventType::Clicked)]
    public void PIPCtrlTreeActionCopyFrom_OnClicked(FormControl sender, FormControlEventArgs e)
    {
        // For the standard code, this executes before the super() occurs but we are not able to do that here
        hierarchyTreeTable_ds.positionToRecord(HierarchyTreeTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>PIPCtrlTreeActionCopyTo_OnClicked</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormControlEventHandler(formControlStr(HierarchyDetail, PIPCtrlTreeActionCopyTo), FormControlEventType::Clicked)]
    public void PIPCtrlTreeActionCopyTo_OnClicked(FormControl sender, FormControlEventArgs e)
    {
        // For the standard code, this executes before the super() occurs but we are not able to do that here
        hierarchyTreeTable_ds.positionToRecord(this.parmHierarchyContext());
    }

]]></Source>
			</Method>
			<Method>
				<Name>onResponsibleWorkerLookupReference</Name>
				<Source><![CDATA[
    public Common onResponsibleWorkerLookupReference(FormReferenceControl _sender)
    {
        return capaWorkerLookup.workerLookupReference(_sender, smmActivities.pipGetWorkerGroup());
    }

]]></Source>
			</Method>
			<Method>
				<Name>onResponsibleWorkerResolveReference</Name>
				<Source><![CDATA[
    public Common onResponsibleWorkerResolveReference(FormReferenceControl _sender)
    {
        return capaWorkerLookup.workerResolveReference(_sender, smmActivities.pipGetWorkerGroup());
    }

]]></Source>
			</Method>
			<Method>
				<Name>HierarchyDetail_Post_setControls</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="args"></param>
    [PostHandlerFor(formStr(HierarchyDetail), formMethodStr(HierarchyDetail, setControls))]
    public static void HierarchyDetail_Post_setControls(XppPrePostArgs args)
    {
        FormRun formRun = args.getThis() as FormRun;
        boolean isCAPA = extClass.callStatic(methodStr(PIPHierarchyDetailForm_Extension, parmPIPIsCAPA), formRun);
        
        if (isCAPA)
        {
            formRun.design().controlName(formControlStr(HierarchyDetail, Responsible)).visible(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>HierarchyDetail_Post_setControlByType</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="args"></param>
    [PostHandlerFor(formStr(HierarchyDetail), formMethodStr(HierarchyDetail, setControlByType))]
    public static void HierarchyDetail_Post_setControlByType(XppPrePostArgs args)
    {
        HierarchyType type = args.getArg('_type');

        FormRun formRun = args.getThis() as FormRun;
        boolean isCAPA = extClass.callStatic(methodStr(PIPHierarchyDetailForm_Extension, parmPIPIsCAPA), formRun);

        switch (type)
        {
            case HierarchyType::Case:
                formRun.design().controlName(formControlStr(HierarchyDetail, ctrlTreeActionCopyTo)).visible(!isCAPA);
                formRun.design().controlName(formControlStr(HierarchyDetail, ctrlTreeActionCopyFrom)).visible(!isCAPA);
                formRun.design().controlName(formControlStr(HierarchyDetail, PIPCtrlTreeActionCopyTo)).visible(isCAPA);
                formRun.design().controlName(formControlStr(HierarchyDetail, PIPCtrlTreeActionCopyFrom)).visible(isCAPA);
                formRun.design().controlName(formControlStr(HierarchyDetail, PIPCAPANotify)).visible(isCAPA);
                formRun.design().controlName(formControlStr(HierarchyDetail, PIPCAPAResponsible)).visible(isCAPA);

                formRun.dataSource(formDataSourceStr(HierarchyDetail, smmActivities)).object(fieldNum(smmActivities, ResponsibilityId)).visible(!isCAPA);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>HierarchyDetail_Post_setFieldAccess</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="args"></param>
    [PostHandlerFor(formStr(HierarchyDetail), formMethodStr(HierarchyDetail, setFieldAccess))]
    public static void HierarchyDetail_Post_setFieldAccess(XppPrePostArgs _args)
    {
        FormRun _this = _args.getThis();

        boolean enabled = _this.design().controlName(formControlStr(HierarchyDetail, ctrlTreeActionCopyTo)).enabled();

        _this.design().controlName(formControlStr(HierarchyDetail, PIPCtrlTreeActionCopyTo)).enabled(enabled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>HierarchyDetail_Post_setTemplateFieldAccess</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="args"></param>
    [PostHandlerFor(formStr(HierarchyDetail), formMethodStr(HierarchyDetail, setTemplateFieldAccess))]
    public static void HierarchyDetail_Post_setTemplateFieldAccess(XppPrePostArgs args)
    {
        FormRun formRun = args.getThis();
        FormControl PIPCtrlTreeActionCopyTo = formRun.design().controlName(formControlStr(HierarchyDetail, PIPCtrlTreeActionCopyTo));

        PIPCtrlTreeActionCopyTo.visible(!formRun.parmIsTemplate());
    }

]]></Source>
			</Method>
			<Method>
				<Name>HierarchyTreeTable_OnActivated</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormDataSourceEventHandler(formDataSourceStr(HierarchyDetail, HierarchyTreeTable), FormDataSourceEventType::Activated)]
    public void HierarchyTreeTable_OnActivated(FormDataSource sender, FormDataSourceEventArgs e)
    {
        if (isCAPA)
        {
            TabGeneral.allowEdit(hierarchyTreeTable.Level != 0);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeSmmActivities</Name>
				<Source><![CDATA[
    protected void initializeSmmActivities()
    {
        next initializeSmmActivities();

        smmActivities.PIPIsCAPA = this.parmPIPIsCAPA();
    }

]]></Source>
			</Method>
			<Method>
				<Name>smmActivities_OnInitValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormDataSourceEventHandler(formDataSourceStr(HierarchyDetail, smmActivities), FormDataSourceEventType::InitValue)]
    public void smmActivities_OnInitValue(FormDataSource sender, FormDataSourceEventArgs e)
    {
        if (smmActivities.PIPIsCAPA && !smmActivities.IsTemplate)
        {
            // MSBUG: Added due to compiler issues in Update5/6            
            smmActivities smmActivities = sender.cursor();

            smmActivities.ResponsibleWorker = hierarchyTreeTable.pipParent().pipGetWorker();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>