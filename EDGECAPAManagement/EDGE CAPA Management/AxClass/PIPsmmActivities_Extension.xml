<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PIPsmmActivities_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     This class contains extensions for the table <c>smmActivities</c>.
/// </summary>
[ExtensionOf(tableStr(smmActivities))]
public final class PIPsmmActivities_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>pipGetNotifyWorkerGroup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the CAPA send notification to worker group for this activity.
    /// </summary>
    /// <returns>
    ///    The CAPA send notification to worker group for this activity, which may have been inherited from a parent element of the process hierarchy.
    /// </returns>
    public PIPCAPANotifyGroup pipGetNotifyWorkerGroup()
    {
        if (this.PIPNotifyGroup)
        {
            return this.PIPNotifyGroup;
        }
    
        // Scan up the related hierarchy looking for the first element with an activity that has a non-blank group.
        return HierarchyTreeTable::findParentElement(HierarchyTreeTable::findActivityRecId(this.RecId)).pipGetNotifyWorkerGroup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pipGetEmailActivityUpdate</Name>
				<Source><![CDATA[
    public PIPCAPANotifyGroup pipGetEmailActivityUpdate()
    {
        if (this.PIPEmailActivity)
        {
            return this.PIPEmailActivity;
        }
    
        // Scan up the related hierarchy looking for the first element with an activity that has a non-blank group.
        return HierarchyTreeTable::findParentElement(HierarchyTreeTable::findActivityRecId(this.RecId)).pipGetEmailActivityUpdate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pipGetWorker</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the worker reference for this activity.
    /// </summary>
    /// <returns>
    ///    The worker reference for this activity, which may have been inherited from a parent element of the process hierarchy.
    /// </returns>
    public HcmWorkerRecId pipGetWorker()
    {
        if (this.ResponsibleWorker)
        {
            return this.ResponsibleWorker;
        }
    
        return HierarchyTreeTable::findParentElement(HierarchyTreeTable::findActivityRecId(this.RecId)).pipGetWorker();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pipGetWorkerGroup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the CAPA worker group for this activity.
    /// </summary>
    /// <returns>
    ///    The CAPA worker group for this activity, which may have been inherited from a parent element of the process hierarchy.
    /// </returns>
    public PIPCAPAWorkerGroupRecId pipGetWorkerGroup()
    {
        if (this.PIPWorkerGroup)
        {
            return this.PIPWorkerGroup;
        }
    
        // Scan up the related hierarchy looking for the first element with an activity that has a non-blank group.
        return HierarchyTreeTable::findParentElement(HierarchyTreeTable::findActivityRecId(this.RecId)).pipGetWorkerGroup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pipGetPrintOnReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the print on report parameter.
    /// </summary>
    /// <returns>
    ///     The print on report parameter for this activity, which may have been inherited from a parent element of the process hierarchy.
    /// </returns>
    public PIPCAPAPrintOnReport pipGetPrintOnReport()
    {
        if (this.PIPCAPAPrintOnReport == PIPNoYesInherit::Inherit)
        {
            return HierarchyTreeTable::findParentElement(HierarchyTreeTable::findActivityRecId(this.RecId)).pipGetPrintOnReport();
        }

        return this.PIPCAPAPrintOnReport;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pipInitCAPAWorker</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the CAPA worker information in this record from a template record.
    /// </summary>
    /// <param name="_smmActivities">
    ///     The template activity record to initialize the CAPA worker information from.
    /// </param>
    /// <exception cref="Exception::Error">
    ///     Thrown if no effective worker was found in the activity hierarchy and the CAPA administrator has not been defined in inventory parameters.
    /// </exception>
    /// <exception cref="Exception::Error">
    ///     Thrown if a worker was determined but that worker is not in the effective worker group in the template.
    /// </exception>
    public void pipInitCAPAWorker(smmActivities _smmActivities)
    {
        HcmWorkerRecId          workerRecId;
        PIPCAPAWorkerGroup      workerGroup;
        
        if (this.ResponsibleWorker)
        {
            return;
        }
    
        workerGroup = _smmActivities.pipWorkerGroup();
        workerRecId = _smmActivities.pipGetWorker();
        if (workerRecId)
        {
            if (!workerGroup.isGroupMember(workerRecId))
            {
                throw error(strFmt("@PIP79", HcmWorker::find(workerRecId).name(), _smmActivities.Purpose, workerGroup.GroupId));
            }
        }
        else
        {
            workerRecId = workerGroup.defaultWorker();
            if (!workerRecId)
            {
                throw error(strFmt("@PIP321", _smmActivities.Purpose, workerGroup.GroupId));
            }
        }
    
        this.ResponsibleWorker = workerRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pipOnHierarchyNodeCreated</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Executes logic needed to properly updated a CAPA activity when the activity has been linked to the
    ///    hierarchy tree.
    /// </summary>
    /// <param name="_hierarchyTreeTable">
    ///    The record in the <c>HierarchyTreeTable</c> table that is the new hierarchy tree node for this activity.
    /// </param>
    public void pipOnHierarchyNodeCreated(HierarchyTreeTable _hierarchyTreeTable)
    {
        boolean update;
    
        if (!this.PIPIsCAPA)
        {
            return;
        }
    
        if (_hierarchyTreeTable.Level <= 1 && this.PIPNotifyGroup == PIPNoYesInherit::Inherit)
        {
            this.selectForUpdate(true);
            this.PIPNotifyGroup = PIPNoYesInherit::No;
            update = true;
        }

        if (_hierarchyTreeTable.Level <= 1 && this.PIPEmailActivity == PIPNoYesInherit::Inherit)
        {
            this.selectForUpdate(true);
            this.PIPEmailActivity = PIPNoYesInherit::No;
            update = true;
        }

        if (_hierarchyTreeTable.Level <= 1 && this.PIPCAPAPrintOnReport == PIPNoYesInherit::Inherit)
        {
            this.selectForUpdate(true);
            this.PIPEmailActivity = PIPNoYesInherit::No;
            update = true;
        }
    
        if (!this.IsTemplate && !this.ResponsibleWorker)
        {
            this.selectForUpdate(true);
            this.pipInitCAPAWorker(this);
            update = true;
        }
    
        if (update)
        {
            this.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pipSendMailCAPA</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sends mail to the new CAPA user assigned to the current activity.
    /// </summary>
    /// <param name="_activityOrig">
    ///     The original buffer for this record in the <c>smmActivities</c> table with the original assginment; optional.
    /// </param>
    public void pipSendMailCAPA(smmActivities _activityOrig = this.orig())
    {
        CaseDetailBase              caseDetailBase = this.pipCaseDetailBase();
        HcmWorker                   worker;
        PIPCAPAMailer               mailer;
    
        worker = this.pipWorker();
    
        mailer = PIPCAPAMailer::construct();
        mailer.parmSubject(strFmt("@PIP:ActivityReassignedHeader", this.ActivityNumber));
        mailer.parmBody(strFmt("@PIP:ActivityReassignedBody",
            PIPCAPAMailer::buildAXURL(menuItemDisplayStr(smmActivities), MenuItemType::Display, formDataSourceStr(smmActivities,smmActivities), fieldStr(smmActivities, ActivityNumber), this.ActivityNumber),
            this.ActivityNumber,
            this.Purpose,
            worker.name(),
            _activityOrig.pipWorker().name(),
            worker.name(),
            date2StrUsr(this.startDate()),
            date2StrUsr(this.endDate()),
            this.TaskPriority,
            PIPCAPAMailer::buildAXURL(menuItemDisplayStr(PIPCAPACaseDetail), MenuItemType::Display, formDataSourceStr(PIPCAPACaseDetail, CaseDetailBase), fieldStr(CaseDetailBase, CaseId), caseDetailBase.CaseId),
            caseDetailBase.CaseId,
            caseDetailBase.Description,
            caseDetailBase.Priority,
            date2StrUsr(caseDetailBase.PIPCAPADueDate),
            caseDetailBase.PIPCategory,
            caseDetailBase.PIPCAPASubCategory));
        mailer.addToAddress(worker.email());
        mailer.send();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pipWorker</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the record in the <c>HcmWorker</c> table for the CAPA worker assigned to this activity.
    /// </summary>
    /// <param name="_forUpdate">
    ///    Determines if the record should be read for update; optional.
    /// </param>
    /// <returns>
    ///    The record in the <c>HcmWorker</c> table for the CAPA worker assigned to this activity.
    /// </returns>
    public HcmWorker pipWorker(boolean _forUpdate = false)
    {
        return HcmWorker::find(this.pipGetWorker(), _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pipWorkerGroup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the record in the <c>PIPCAPAWorkerGroup</c> table associated with this or inherited to this activity.
    /// </summary>
    /// <param name="_forUpdate">
    ///    Determines if the record should be read for updating; optional.
    /// </param>
    /// <returns>
    ///    The record in the <c>PIPCAPAWorkerGroup</c> table associated with this or inherited to this activity if one is defined; otherwise, an empty buffer.
    /// </returns>
    public PIPCAPAWorkerGroup pipWorkerGroup(boolean _forUpdate = false)
    {
        return PIPCAPAWorkerGroup::find(this.pipGetWorkerGroup(), _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>emailActivityState</Name>
				<Source><![CDATA[
    public static void emailActivityState(PIPCAPACaseEmailRec _emailRec, smmActivities _activity, CaseDetailBase _caseDetailBase)
    {
        PIPCAPAMailer mailer = PIPCAPAMailer::construct();
        mailer.parmSubject(strFmt("@PIP:ActivityStatusChangeHeader",_activity.ActivityNumber, _activity.Closed ? "@SYS14403" : "@PIP:Reopened"));
        mailer.parmBody(strFmt("@PIP:ActivityStatusChangeBody",
            PIPCAPAMailer::buildAXURL(menuItemDisplayStr(smmActivities), MenuItemType::Display, formDataSourceStr(smmActivities,smmActivities), fieldStr(smmActivities, ActivityNumber), _activity.ActivityNumber),
            _activity.ActivityNumber,
            _activity.Purpose,
            _activity.Closed ? "@SYS14403" : "@PIP:Reopened",
            HcmWorker::find(_activity.ResponsibleWorker).name(),
            date2StrUsr(_activity.startDate()),
            date2StrUsr(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())),
            _activity.TaskPriority,
            PIPCAPAMailer::buildAXURL(menuItemDisplayStr(PIPCAPACaseDetail), MenuItemType::Display, formDataSourceStr(PIPCAPACaseDetail, CaseDetailBase), fieldStr(CaseDetailBase, CaseId), _caseDetailBase.CaseId),
            _caseDetailBase.CaseId,
            _caseDetailBase.Description,
            _caseDetailBase.Priority,
            date2StrUsr(_caseDetailBase.PIPCAPADueDate),
            _caseDetailBase.PIPCategory,
            _caseDetailBase.PIPCAPASubCategory
            ));

        if (_emailRec.DirPartyRecId)
        {
            mailer.addToAddress(_emailRec.emailAddress());
        }

        if (_emailRec.PIPCAPAWorkerGroupRecId)
        {
            PIPCAPAWorkerGroupAssignment groupAssignment;

            while select groupAssignment
                where groupAssignment.Group == _emailRec.PIPCAPAWorkerGroupRecId
            {
                mailer.addToAddress(groupAssignment.worker().email());
            }
        }

        mailer.send();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pipCaseDetailBase</Name>
				<Source><![CDATA[
    public CaseDetailBase pipCaseDetailBase()
    {
        CaseDetailBase              caseDetailBase;
        smmActivityParentLinkTable  smmLink;
    
        select firstOnly caseDetailBase
            exists join smmLink
            where caseDetailBase.RecId          == smmLink.RefRecId
                && this.ActivityNumber   == smmLink.ActivityNumber;

        return CaseDetailBase;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>