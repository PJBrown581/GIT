<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PIPSIGCAPAProcedure</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PIPSIGCAPAProcedure extends PIPSIGProcedureProviderBase
{
    PIPSIGCAPAProvider  capaProvider;
    CaseDetailBase      caseDetailBase;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>captureDelayedSignature</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Captures a signature that was initiated prior to updating the status on the specified CAPA case.
    /// </summary>
    /// <param name="_base">
    ///     The CAPA case to be signed for.
    /// </param>
    /// <exception cref="Exception::Error">
    ///     The specified CAPA case does not match the CAPA case that was used when initiating the signature process prior to status update.
    /// </exception>
    public void captureDelayedSignature(CaseDetailBase _base)
    {
        container       fields;
        ListEnumerator  listEnumerator;
        SIGBaseDocument doc;

        if (caseDetailBase.RecId != _base.RecId)
        {
            throw error("@PIP489");
        }

        caseDetailBase = _base;

        fields          = SIGBaseDocument::buildFieldList(DatabaseLogType::Update, caseDetailBase, caseDetailBase.orig());
        listEnumerator  = docList.getEnumerator();

        TableId baseTableId = SIGBaseDocument::pipBaseTableId(caseDetailBase.TableId);

        while (listEnumerator.moveNext())
        {
            doc = listEnumerator.current();
            if (doc.getRefTableId() ==  baseTableId && doc.getRefRecId() == caseDetailBase.RecId)
            {
                doc.initFieldList(DatabaseLogType::Update, fields, baseTableId, caseDetailBase.RecId);
                doc.setSigneeId(signeeId);
            }
        }

        signed = capaProvider.signDataList(docList, capaProvider.getValidCertificate(signeeId));
        if (signed)
        {
            SIGBaseDocument::addListToCache(docList);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertToSIGExtendedDocument</Name>
				<Source><![CDATA[
    private SIGExtendedDocument convertToSIGExtendedDocument(SIGBaseDocument _doc)
    {
        Object                  obj;
        SysDictClass            dictClass;

        obj = _doc;
        dictClass = new SysDictClass(classIdGet(obj));
        if (dictClass.isImplementing(classNum(SIGExtendedDocument)))
        {
            return obj;
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAuditFieldList</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets a list of signature controlled fields for this procedure.
    /// </summary>
    /// <returns>
    ///     The list of signature controlled fields required for this procedure.
    /// </returns>
    public container getAuditFieldList()
    {
        return [
            [DatabaseLogType::Update, tablenum(CaseDetailBase), fieldNum(CaseDetailBase, PIPActivateSignature)]
        ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSigningProvider</Name>
				<Source><![CDATA[
    protected SIGSigningProvider getSigningProvider()
    {
        if (!capaProvider)
        {
            capaProvider = super();
        }

        return capaProvider;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCaseDetailBase</Name>
				<Source><![CDATA[
    public CaseDetailBase parmCaseDetailBase(CaseDetailBase _caseDetailBase = null)
    {
        if (!prmisDefault(_caseDetailBase))
        {
            caseDetailBase = _caseDetailBase;

            docList = new List(Types::Class);

            // MSBUG: Cannot create the base document in CLR due to a Microsoft bug in SIGXMLDocument; don't initialize the document unless it is needed and e-signature cannot work in CLR
            if (this.signatureRequired())
            {
                docList.addEnd(SIGBaseDocument::newDatabaseLog(DatabaseLogType::Update, caseDetailBase));
            }
        }

        return caseDetailBase;
    }

]]></Source>
			</Method>
			<Method>
				<Name>preferredProviderId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the class ID of the preferred signature provider.
    /// </summary>
    /// <returns>
    ///     The class ID of the preferred signature provider.
    /// </returns>
    protected ClassId preferredProviderId()
    {
        return classNum(PIPSIGCapaProvider);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupAllowed</Name>
				<Source><![CDATA[
    public boolean setupAllowed()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>signatureRequired</Name>
				<Source><![CDATA[
    public boolean signatureRequired()
    {
        boolean ret;
        ClassId classId = classidget(this);

        ret = SIGProcSetup::classIdEnabled(classId) && caseDetailBase.PIPIsCAPA;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PIPSIGCAPAProcedure construct()
    {
        return new PIPSIGCAPAProcedure();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@PIP3001";
    }

]]></Source>
			</Method>
			<Method>
				<Name>newCaseDetailBase</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of this class by using a <c>CaseDetailBase</c> record.
    /// </summary>
    /// <param name="_caseDetailBase">
    ///    The record to use to create the instance.
    /// </param>
    /// <returns>
    ///    The new instance.
    /// </returns>
    public static PIPSIGCAPAProcedure newCaseDetailBase(CaseDetailBase _caseDetailBase)
    {
        PIPSIGCAPAProcedure procedure = PIPSIGCAPAProcedure::construct();

        procedure.parmCaseDetailBase(_caseDetailBase);

        return procedure;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pipIsDelaySigned</Name>
				<Source><![CDATA[
    public boolean pipIsDelaySigned()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>