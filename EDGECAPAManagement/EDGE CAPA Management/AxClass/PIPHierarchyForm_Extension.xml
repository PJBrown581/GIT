<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PIPHierarchyForm_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(formStr(Hierarchy))]
public final class PIPHierarchyForm_Extension
{
    private static readonly DictClass extClass = new DictClass(classNum(PIPHierarchyForm_Extension));

    private PIPIsCAPA isCAPA;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmPIPIsCAPA</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the form should be run for a CAPA Process.
    /// </summary>
    public PIPIsCAPA parmPIPIsCAPA(PIPIsCAPA _isCAPA = isCAPA)
    {
        isCAPA = _isCAPA;
        return isCAPA;
    }

]]></Source>
			</Method>
			<Method>
				<Name>Hierarchy_OnInitialized</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormEventHandler(formStr(Hierarchy), FormEventType::Initialized)]
    public void Hierarchy_OnInitialized(xFormRun sender, FormEventArgs e)
    {
        #PIPCAPAManagement

        if (this.args().parmEnumType() == enumNum(HierarchyType))
        {
            // MSBUG: Added due to compiler issues in Update5/6
            Hierarchy hierarchy = Hierarchy_ds.cursor();

            isCAPA = #PIPCAPAManagementEnabled && (this.args().parm() == #CAPA);
            if (isCAPA)
            {
                hierarchy.HierarchyType = HierarchyType::Case;
                GeneralHierarchy_HierarchyType.visible(false);
                PIPHierarchy_PIPApproved.visible(true);
                Hierarchy_IsActive.visible(false);

                this.parmPIPIsCAPA(true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>Hierarchy_OnQueryExecuting</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormDataSourceEventHandler(formDataSourceStr(Hierarchy, Hierarchy), FormDataSourceEventType::QueryExecuting)]
    public void Hierarchy_OnQueryExecuting(FormDataSource sender, FormDataSourceEventArgs e)
    {
        SysQuery::findOrCreateRange(sender.queryBuildDataSource(), fieldNum(Hierarchy, PIPIsCAPA)).value(queryValue(this.parmPIPIsCAPA()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>Hierarchy_OnWritten</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormDataSourceEventHandler(formDataSourceStr(Hierarchy, Hierarchy), FormDataSourceEventType::Written)]
    public void Hierarchy_OnWritten(FormDataSource sender, FormDataSourceEventArgs e)
    {
        if (this.parmPIPIsCAPA())
        {
            // MSBUG: Added due to compiler issues in Update5/6
            Hierarchy hierarchy = Hierarchy_ds.cursor();
            
            hierarchy.PIPIsCAPA = NoYes::Yes;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>Hierarchy_Post_setControlByType</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="args"></param>
    [PostHandlerFor(classStr(HierarchyEventHandler), staticMethodStr(HierarchyEventHandler, Hierarchy_Post_setControlByType))]
    public static void Hierarchy_Post_setControlByType(XppPrePostArgs args)
    {
        // args argument is another XppPrePostArgs for the actual form method arguments as this method must run after the AppSuite event handler for the setControlByType method
        XppPrePostArgs callerArgs = args.getArg('_args');

        HierarchyType type  = callerArgs.getArg('_type');
        FormRun formRun     = callerArgs.getThis() as FormRun;
        // Note that the actual method is a static method on the extension class with the first parameter being FormRun
        boolean isCAPA = extClass.callStatic(methodStr(PIPHierarchyForm_Extension, parmPIPIsCAPA), formRun);

        DictClass dictClass = new DictClass(classIdGet(formRun));
        boolean isTemplate = dictClass.callObject(formMethodStr(Hierarchy, parmIsTemplate), formRun);

        switch (type)
        {
            case HierarchyType::Case:
                formRun.design().controlName(formControlStr(Hierarchy, tabResponsibility)).visible(!isCAPA && isTemplate);
                formRun.design().controlName(formControlStr(Hierarchy, Hierarchy_IsActive)).visible(!isCAPA);
                formRun.design().controlName(formControlStr(Hierarchy, GeneralHierarchy_IsActive)).visible(!isCAPA);
                formRun.design().controlName(formControlStr(Hierarchy, InquiryButton_Case)).visible(!isCAPA);

                formRun.design().controlName(formControlStr(Hierarchy, PIPInquiryButton_CAPACase)).visible(isCAPA);

                formRun.dataSource(formDataSourceStr(Hierarchy, Hierarchy)).object(fieldNum(Hierarchy, PIPApproved)).visible(isCAPA);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>Hierarchy_Post_init</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="args"></param>
    [PostHandlerFor(formStr(Hierarchy), formMethodStr(Hierarchy, init))]
    public static void Hierarchy_Post_init(XppPrePostArgs args)
    {
        FormRun formRun = args.getThis() as FormRun;
        // Note that the actual method is a static method on the extension class with the first parameter being FormRun
        boolean isCAPA = extClass.callStatic(methodStr(PIPHierarchyForm_Extension, parmPIPIsCAPA), formRun);

        if (isCAPA)
        {
            formRun.design().caption("@PIP9");
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>