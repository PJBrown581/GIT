<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PIPCaseDetailBase_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(tableStr(CaseDetailBase))]
public final class PIPCaseDetailBase_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>pipIsRecordSigned</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    public display PIPSigningStatus pipIsRecordSigned()
    {
        return SIGSignatureLog::pipExistRecord(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pipCAPAResolutionTypeDescription</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    public display PIPCAPAResolutionTypeDescription pipCAPAResolutionTypeDescription()
    {
        return PIPCAPAResolutions::find(this.PIPCAPAResolutionType).ResolutionTypeDescription;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pipCAPASourceDescription</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    public display PIPCAPASourceDescription pipCAPASourceDescription()
    {
        return PIPCAPASourceCodes::find(this.PIPCAPASourceCode).SourceDescription;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pipCAPAClassificationDescription</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    public display PIPCAPAClassificationDescription pipCAPAClassificationDescription()
    {
        return PIPCAPAClassificationCodes::find(this.PIPCAPAClassificationCode).ClassificationDescription;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pipCAPARootCauseDescription</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    public display PIPCAPARootCauseDescription pipCAPARootCauseDescription()
    {
        return PIPCAPARootCauses::find(this.PIPCAPARootCauseCode).RootCauseDescription;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pipCAPATypeDescription</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    public display PIPCAPATypeDescription pipCAPATypeDescription()
    {
        return PIPCAPATypes::find(this.PIPCAPAType).CAPATypeDescription;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pipNumberOfCAPACasesUsingActiveWorkflow</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds the number of CAPA cases currently using an active workflow
    /// </summary>
    /// <returns>
    ///     The number of CAPA cases currently using an active workflow.
    /// </returns>
    public static int pipNumberOfCAPACasesUsingActiveWorkflow()
    {
        WorkflowTable       workflowTable;
        SysWorkflowTable    sysWorkflowTable;
        CaseDetailBase      caseDetailBase;

        select count(RecId) from caseDetailBase
            where caseDetailBase.PIPIsCAPA
            exists join sysWorkflowTable
            where sysWorkflowTable.ContextCompanyId == curext()
                && sysWorkflowTable.ContextRecId    == caseDetailBase.RecId
            exists join workflowTable
            where workflowTable.SequenceNumber      == sysWorkflowTable.ConfigurationSequenceNumber
                && workflowTable.DefaultConfiguration;

        return any2int(caseDetailBase.RecID);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite(boolean validateWorkerOnly)
    {
        if (this.PIPIsCAPA && !this.CategoryRecId)
        {
            this.CategoryRecId = InventParameters::find().PIPNullCaseCategoryRecId;

            if (!this.CategoryRecId)
            {
                warning(strFmt("@PIP5075", fieldPName(InventParameters, PIPNullCaseCategoryRecId), "@SYS336190"));
            }
        }

        boolean ret = next validateWrite(validateWorkerOnly);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pipLookupCAPASubCategory</Name>
				<Source><![CDATA[
    public static void pipLookupCAPASubCategory(FormControl sender, CaseDetailBase caseDetail)
    {
        Query           query           = new Query();
        SysTableLookup  sysTableLookup  = SysTableLookup::newParameters(tableNum(PIPCAPASubCategoryUserDefined), sender);

        sysTableLookup.addLookupField(fieldNum(PIPCAPASubCategoryUserDefined, SubCategory));
        sysTableLookup.addLookupField(fieldNum(PIPCAPASubCategoryUserDefined, Description));

        QueryBuildDataSource queryBuildDataSource = query.addDataSource(tableNum(PIPCAPASubCategoryUserDefined));
        queryBuildDataSource.addRange(fieldNum(PIPCAPASubCategoryUserDefined, CAPACategory)).value(queryValue(caseDetail.PIPCategory));

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret = next validateField(_fieldIdToCheck);

        if (ret)
        {
            switch (_fieldIdToCheck)
            {
                case fieldNum(CaseDetailBase, PIPCAPADueDate):
                    if (this.PIPCAPADueDate && this.PIPCAPADueDate <= DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
                    {
                        ret = checkFailed("@PIP5054");
                    }
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>CaseDetailBase_Post_canSubmit</Name>
				<Source><![CDATA[
    [PostHandlerFor(tableStr(CaseDetailBase), tableMethodStr(CaseDetailBase, canSubmit))]
    public static void CaseDetailBase_Post_canSubmit(XppPrePostArgs args)
    {
        CaseDetailBase  thisCaseDetailBase = args.getThis();
        boolean         ret                = args.getReturnValue();
    
        if (thisCaseDetailBase.PIPIsCAPA)
        {
            ret = ret && InventParameters::find().PIPUseCaseManagementWorkflow;
        }
    
        args.setReturnValue(ret);
    }

]]></Source>
			</Method>
			<Method>
				<Name>CaseDetailBase_Pre_insert</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="args"></param>
    [PreHandlerFor(tableStr(CaseDetailBase), tableMethodStr(CaseDetailBase, insert))]
    public static void CaseDetailBase_Pre_insert(XppPrePostArgs args)
    {
        CaseDetailBase  thisCaseDetailBase = args.getThis();

        thisCaseDetailBase.PIPDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        
        if (thisCaseDetailBase.PIPCategory && thisCaseDetailBase.Process && !Hierarchy::findByName(thisCaseDetailBase.Process).pipIsReadyForCase())
        {
            throw error("@SYS107513");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>CaseDetailBase_Post_modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="args"></param>
    [PostHandlerFor(tableStr(CaseDetailBase), tableMethodStr(CaseDetailBase, modifiedField))]
    public static void CaseDetailBase_Post_modifiedField(XppPrePostArgs args)
    {
        CaseDetailBase  thisCaseDetailBase  = args.getThis();
        FieldId         modifiedFieldId     = args.getArg('_fieldId');

        switch(modifiedFieldId)
        {
            case fieldNum(CaseDetailBase, PIPCategory):
                thisCaseDetailBase.PIPCAPASubCategory = "";
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>CaseDetailBase_Pre_update</Name>
				<Source><![CDATA[
    [PreHandlerFor(tableStr(CaseDetailBase), tableMethodStr(CaseDetailBase, update))]
    public static void CaseDetailBase_Pre_update(XppPrePostArgs args)
    {
        CaseDetailBase thisCaseDetailBase  = args.getThis() as CaseDetailBase;
        CaseDetailBase origCaseDetailBase  = thisCaseDetailBase.orig();
        PIPCAPACaseEmailRec emailRec;

        switch(origCaseDetailBase.Status)
        {
            case CaseStatus::Closed:
            case CaseStatus::Cancelled:
                if (thisCaseDetailBase.Status == CaseStatus::Planned || thisCaseDetailBase.Status == CaseStatus::InProcess)
                {
                    while select emailRec
                        where emailRec.CaseRecId == thisCaseDetailBase.RecId
                            && emailRec.CaseStatusInProcess == NoYesCombo::Yes
                    {
                        CaseDetailBase::emailCapaStatus(emailRec, origCaseDetailBase.Status, thisCaseDetailBase);
                    }
                }
                break;
            case CaseStatus::Planned:
            case CaseStatus::InProcess:
                if (thisCaseDetailBase.Status == CaseStatus::Closed)
                {
                    while select emailRec
                        where emailRec.CaseRecId == thisCaseDetailBase.RecId
                            && emailRec.CaseStatusClosed == NoYesCombo::Yes
                    {
                        CaseDetailBase::emailCapaStatus(emailRec, origCaseDetailBase.Status, thisCaseDetailBase);
                    }
                }
                if (thisCaseDetailBase.Status == CaseStatus::Cancelled)
                {
                    while select emailRec
                        where emailRec.CaseRecId == thisCaseDetailBase.RecId
                            && emailRec.CaseStatusCancelled == NoYesCombo::Yes
                    {
                        CaseDetailBase::emailCapaStatus(emailRec, origCaseDetailBase.Status, thisCaseDetailBase);
                    }
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>emailCapaStatus</Name>
				<Source><![CDATA[
    private static void emailCapaStatus(PIPCAPACaseEmailRec _emailRec, CaseStatus _origStatus, CaseDetailBase _caseDetailBase)
    {
        PIPCAPAMailer               mailer;

        mailer = PIPCAPAMailer::construct();
        mailer.parmSubject("@PIP:CAPACaseStatusHeader");
        mailer.parmBody(strFmt("@PIP:CAPACaseStatusBody",
            PIPCAPAMailer::buildAXURL(menuItemDisplayStr(PIPCAPACaseDetail), MenuItemType::Display, formDataSourceStr(PIPCAPACaseDetail, CaseDetailBase), fieldStr(CaseDetailBase, CaseId), _caseDetailBase.CaseId),
            _caseDetailBase.CaseId,
            _caseDetailBase.Description,
            _origStatus,
            _caseDetailBase.Status,
            XUserInfo::find(false, curUserId()).name,
            date2StrUsr(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())),
            _caseDetailBase.Priority,
            date2StrUsr(_caseDetailBase.PIPCAPADueDate),
            _caseDetailBase.PIPCategory,
            _caseDetailBase.PIPCAPASubCategory
            ));
        
        if (_emailRec.DirPartyRecId)
        {
            mailer.addToAddress(_emailRec.emailAddress());
        }

        if (_emailRec.PIPCAPAWorkerGroupRecId)
        {
            PIPCAPAWorkerGroupAssignment groupAssignment;

            while select groupAssignment
                where groupAssignment.Group == _emailRec.PIPCAPAWorkerGroupRecId
            {
                mailer.addToAddress(groupAssignment.worker().email());
            }
        }

        mailer.send();
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsCAPARefRecId</Name>
				<Source><![CDATA[
    public static boolean existsCAPARefRecId(CaseEntityType _entityType, RefRecId _refRecId)
    {
        CaseDetailBase caseDetailBase;
        CaseAssociation caseAssociation;

        select firstonly caseDetailBase
            where caseDetailBase.PIPIsCAPA == NoYes::Yes
            join caseAssociation
                where caseAssociation.CaseRecId == caseDetailBase.RecId
                    && caseAssociation.EntityType == _entityType
                    && caseAssociation.RefRecId == _refRecId;

        return caseDetailBase.RecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>