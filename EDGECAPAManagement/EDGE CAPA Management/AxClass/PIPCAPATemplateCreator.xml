<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PIPCAPATemplateCreator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>PIPCAPATemplateCreator</c> class creates CAPA process templates given an XML text.
/// </summary>
/// <remarks>
///    This will create a standard set of CAPA process template when run as an action.
/// </remarks>
public class PIPCAPATemplateCreator extends RunBase
{
    str                     templateXml;
    XmlDocument             templateXmlDocument;

    List                    templateDialogFields;
    List                    templateNameControls;

    PIPTableFieldValidator  smmActivitiesFieldValidator;

    #define.DocumentName("CAPATemplates")

    #define.ElementTemplate("template")
    #define.ElementLevel("level")
    #define.ElementAppointment("appointment")
    #define.ElementTask("task")
    #define.ElementEvent("event")
    #define.ElementAction("action")
    #define.ElementNote("note")

    #define.AttributeName("name")
    #define.AttributePurpose("purpose")
    #define.AttributeRequired("required")
    #define.AttributeStartDays("startDays")
    #define.AttributeStartTime("startTime")
    #define.AttributeEndDays("endDays")
    #define.AttributeEndTime("endTime")
    #define.AttributePriority("priority")
    #define.AttributeGroup("group")
    #define.AttributeNotifyGroup("notifyGroup")

    #define.ElementExitCriteria("exitCriteria")
    #define.AttributeCheckForRequired("checkForRequired")

    #define.ElementGroups("groups")
    #define.ElementGroup("group")

    #define.AttributeId("id")
    #define.AttributeAllowAny("allowAny")
    #define.AttributeAdminDefaultWorker("adminDefaultWorker")
    #define.AttributeAdminIsMember("adminIsMember")
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>atLeastOneTemplateSelectedForLoading</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a value indicating if at least one of the process templates in the controls list has been selected to load.
    /// </summary>
    /// <param name="_templateControls">
    ///    A list of objects implementing the <see cref="PIPCAPACreateTemplateControl interface"/>.
    /// </param>
    /// <returns>
    ///    true if at least one control object in <paramref name="_templateControls"/> has the LoadTemplate property set to true; otherwise, false.
    /// </returns>
    private boolean atLeastOneTemplateSelectedForLoading(List _templateControls)
    {
        ListEnumerator                  templateControlEnumerator;
        PIPCAPACreateTemplateControl    templateControl;
    
        templateControlEnumerator = _templateControls.getEnumerator();
        while (templateControlEnumerator.moveNext())
        {
            templateControl = templateControlEnumerator.current();
            if (templateControl.parmLoadTemplate())
            {
                return true;
            }
        }
    
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>attributeToBoolean</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a boolean value from an XML node attribute.
    /// </summary>
    /// <param name="_attribute">
    ///    The XML node attribute.
    /// </param>
    /// <param name="_default">
    ///    The default value if <paramref name="_attribute"/> is <c>null</c>.
    /// </param>
    /// <returns>
    ///    true if the attribute is defined and has a related true value or if attribute is not defined and the default is <c>true</c>; otherwise false.
    /// </returns>
    /// <exception cref="Exception::Error">
    ///    If <paramref name="_attribute"/> is non-null but the value is not convertible to a boolean.
    /// </exception>
    protected boolean attributeToBoolean(XmlAttribute _attribute, boolean _default = false)
    {
        boolean res = _default;
    
        // We use the English here as these are non-locale specific values
        #define.Yes("yes")
        #define.True("true")
        #define.No("no")
        #define.False("false")
    
        if (_attribute)
        {
            if (_attribute.value() == #Yes || _attribute.value() == #True)
            {
                res = true;
            }
            else if (_attribute.value() == #No || _attribute.value() == #False)
            {
                res = false;
            }
            else
            {
                throw error(strFmt("@PIP471", _attribute.value(), _attribute.ownerElement().name(), _attribute.name()));
            }
        }
    
        return res;
    }

]]></Source>
			</Method>
			<Method>
				<Name>attributeToEnum</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets an enumerate value from an XMl attribute.
    /// </summary>
    /// <param name="_enumId">
    ///    The base enumerate object ID.
    /// </param>
    /// <param name="_attribute">
    ///    The XML node attribute.
    /// </param>
    /// <param name="_default">
    ///    The default enumerate value to return if <paramref name="_attribute"/> is <c>null</c>.
    /// </param>
    /// <returns>
    ///    The enumerate value in the attribute or the default.
    /// </returns>
    /// <exception cref="Exception::Error">
    ///    Thrown if <paramref name="_attribute"/> is non-null but the value is not one of the enumerate symbols.
    /// </exception>
    protected int attributeToEnum(EnumID _enumId, XmlAttribute _attribute, int _default)
    {
        smmActivityPriority res         = _default;
        DictEnum            dictEnum    = new DictEnum(_enumId);
    
        #define.InvalidEnumerateValue(255)
    
        if (_attribute)
        {
            res = dictEnum.symbol2Value(_attribute.value());
            if (res == #InvalidEnumerateValue)
            {
                throw error(strFmt("@PIP471", _attribute.value(), _attribute.ownerElement().name(), _attribute.name()));
            }
        }
    
        return res;
    }

]]></Source>
			</Method>
			<Method>
				<Name>attributeToInt</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets an integer value from an XMl attribute.
    /// </summary>
    /// <param name="_attribute">
    ///    The XML node attribute.
    /// </param>
    /// <param name="_default">
    ///    The default integer value to return if <paramref name="_attribute"/> is <c>null</c>.
    /// </param>
    /// <returns>
    ///    The integer value in the attribute or the default.
    /// </returns>
    protected int attributeToInt(XmlAttribute _attribute, int _default = 0)
    {
        int res =_default;
    
        if (_attribute)
        {
            res = str2int(_attribute.value());
        }
    
        return res;
    }

]]></Source>
			</Method>
			<Method>
				<Name>attributeToTime</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a time of day value from an XMl attribute.
    /// </summary>
    /// <param name="_attribute">
    ///    The XML node attribute.
    /// </param>
    /// <param name="_default">
    ///    The default integer value to return if <paramref name="_attribute"/> is <c>null</c>.
    /// </param>
    /// <returns>
    ///    The time of day value in the attribute or the default.
    /// </returns>
    /// <exception cref="Exception::Error">
    ///    Thrown if <paramref name="_attribute"/> is non-null but the value is convertible to time of day.
    /// </exception>
    protected TimeOfDay attributeToTime(XmlAttribute _attribute, TimeOfDay _default = 0)
    {
        TimeOfDay   res = _default;
    
        if (_attribute)
        {
            res = str2time(_attribute.value());
            if (res == -1)
            {
                throw error(strFmt("@PIP471", _attribute.value(), _attribute.ownerElement().name(), _attribute.name()));
            }
        }
    
        return res;
    }

]]></Source>
			</Method>
			<Method>
				<Name>attributeValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a string value from an XMl attribute.
    /// </summary>
    /// <param name="_attribute">
    ///    The XML node attribute.
    /// </param>
    /// <param name="_default">
    ///    The default string value to return if <paramref name="_attribute"/> is <c>null</c>.
    /// </param>
    /// <returns>
    ///    The string value in the attribute or the default.
    /// </returns>
    protected str attributeValue(XmlAttribute _attribute, str _default = "")
    {
        str res = _default;
    
        if (_attribute)
        {
            res = _attribute.value();
        }
    
        return res;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createEntryActivityAndTreeNode</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an activity and related hierarchy tree node for the given template XML node.
    /// </summary>
    /// <param name="_category">
    ///    The category for the new activity.
    /// </param>
    /// <param name="_parentTreeNode">
    ///    The parent hierarch tree node in which this new activity and hierarchy tree node are to be created.
    /// </param>
    /// <param name="_node">
    ///    The template XML node for the activity.
    /// </param>
    /// <returns>
    ///    The new record in the <c>HierarchyTreeTable</c> table that was created for the new activity.
    /// </returns>
    /// <exception cref="Exception::Error">
    ///    Thrown if there are an validation failures on the created activity or hierarchy tree node.
    /// </exception>
    private HierarchyTreeTable createEntryActivityAndTreeNode(smmActivityCategory _category, HierarchyTreeTable _parentTreeNode, XmlNode _node)
    {
        XmlNode             noteNode;
        XmlAttribute        attribute;
        HierarchyTreeTable  treeNode;
        smmActivities       activity;
    
        activity.IsTemplate         = NoYes::Yes;
        activity.PIPIsCAPA          = NoYes::Yes;
        activity.initValue(_category);
        activity.setActivityNum();
        activity.Purpose            = PIPCAPATemplateCreator::getAttribute(_node, #AttributePurpose, true).value();
        activity.PIPWorkerGroup     = this.workerGroupIdToKey(this.attributeValue(PIPCAPATemplateCreator::getAttribute(_node, #AttributeGroup)));
        activity.StartDateTime      = DateTimeUtil::minValue();
        activity.EndDateTime        = DateTimeUtil::minValue();
    
        attribute = PIPCAPATemplateCreator::getAttribute(_node, #AttributeStartDays);
        if (attribute)
        {
            activity.templateStartDays(true, this.attributeToInt(attribute));
        }
        activity.StartDateTime = DateTimeUtil::newDateTime(DateTimeUtil::date(activity.StartDateTime), this.attributeToTime(PIPCAPATemplateCreator::getAttribute(_node, #AttributeStartTime)));
        activity.EndDateTime   = activity.StartDateTime;
    
        attribute = PIPCAPATemplateCreator::getAttribute(_node, #AttributeEndDays);
        if (attribute)
        {
            activity.templateEndDays(true, this.attributeToInt(attribute));
        }
        activity.EndDateTime = DateTimeUtil::newDateTime(DateTimeUtil::date(activity.EndDateTime), this.attributeToTime(PIPCAPATemplateCreator::getAttribute(_node, #AttributeEndTime)));
    
        attribute = PIPCAPATemplateCreator::getAttribute(_node, #AttributePriority);
        if (attribute)
        {
            activity.TaskPriority = this.attributeToEnum(enumNum(smmActivityPriority), attribute, enum2int(smmActivityPriority::Normal));
        }
    
        noteNode = _node.getNamedElement(#ElementNote);
        if (noteNode)
        {
            activity.UserMemo = noteNode.innerText();
        }
    
        if (!smmActivitiesFieldValidator.validate(activity) || !activity.validateWrite())
        {
            throw error("@SYS107513");
        }
        activity.insert();
    
        treeNode = this.createTreeNode(_parentTreeNode, activity, ElementNodeType::Activity);
        treeNode.IsRequired = this.attributeToBoolean(PIPCAPATemplateCreator::getAttribute(_node, #AttributeRequired));
        if (treeNode.IsRequired)
        {
            treeNode.update();
        }
    
        return treeNode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLevel</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new level in the hierarchy tree.
    /// </summary>
    /// <param name="_parentTreeNode">
    ///    The parent record of the <c>HierarchyTreeTable</c> for the new level.
    /// </param>
    /// <param name="_levelNode">
    ///    The XML node for the new level from the source XML document.
    /// </param>
    /// <param name="_topLevel">
    ///    Determines if the new level is a top level in the hierarchy tree which is known as a "stage".
    /// </param>
    /// <exception cref="Exception::Error">
    ///    Thrown for any validation errors.
    /// </exception>
    private void createLevel(HierarchyTreeTable _parentTreeNode, XmlNode _levelNode, boolean _topLevel = true)
    {
        XmlNodeList         children;
        XmlNode             childNode;
        XmlNode             node;
        HierarchyTreeTable  treeNode;
        smmActivities       activity;
        smmProcessStage     processStage;
        int                 i;
    
        activity = this.createLevelActivity(_levelNode, _topLevel);
        treeNode = this.createTreeNode(_parentTreeNode, activity, ElementNodeType::Node);
    
        node = _levelNode.getNamedElement(#ElementExitCriteria);
        if (node)
        {
            processStage.initValue();
            processStage.initFromHierarchyTree(treeNode);
            processStage.PredefinedCheck = this.attributeToBoolean(PIPCAPATemplateCreator::getAttribute(node, #AttributeCheckForRequired));
            processStage.insert();
        }
    
        children = _levelNode.childNodes();
        for (i = 0; i < children.length(); i++)
        {
            childNode = children.item(i);
    
            switch (childNode.name())
            {
                case #ElementLevel:
                    this.createLevel(treeNode, childNode, false);
                    break;
    
                case #ElementTask:
                    this.createEntryActivityAndTreeNode(smmActivityCategory::Task, treeNode, childNode);
                    break;
    
                case #ElementAction:
                    this.createEntryActivityAndTreeNode(smmActivityCategory::Action, treeNode, childNode);
                    break;
    
                case #ElementEvent:
                    this.createEntryActivityAndTreeNode(smmActivityCategory::Event, treeNode, childNode);
                    break;
    
                case #ElementAppointment:
                    this.createEntryActivityAndTreeNode(smmActivityCategory::Appointment, treeNode, childNode);
                    break;
    
                case #ElementNote:
                case #ElementExitCriteria:
                    // Ignore these here, they were handled in createLevelActivity(), above
                    break;
    
                default:
                    throw error(strFmt("@PIP472", childNode.name(), _levelNode.name()));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLevelActivity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a node level activity for the given template XML node.
    /// </summary>
    /// <param name="_levelNode">
    ///    The template XML node for the activity.
    /// </param>
    /// <param name="_topLevel">
    ///    Determines if the new activity node is for a top level node in the hierarchy tree which is known as a "stage".
    /// </param>
    /// <returns>
    ///    The new record created in the <c>smmActivities</c> table.
    /// </returns>
    /// <exception cref="Exception::Error">
    ///    Thrown if there are an validation failures on the created activity.
    /// </exception>
    private smmActivities createLevelActivity(XmlNode _levelNode, boolean _topLevel)
    {
        smmActivities   activity;
        XmlNode         node;
    
        activity.IsTemplate         = NoYes::Yes;
        activity.PIPIsCAPA          = NoYes::Yes;
        activity.initValue();
        activity.setActivityNum();
        activity.Purpose            = PIPCAPATemplateCreator::getAttribute(_levelNode, #AttributePurpose, true).value();
        activity.PIPWorkerGroup     = this.workerGroupIdToKey(this.attributeValue(PIPCAPATemplateCreator::getAttribute(_levelNode, #AttributeGroup, _topLevel)));
        activity.PIPNotifyGroup     = this.attributeToEnum(enumNum(PIPNoYesInherit), PIPCAPATemplateCreator::getAttribute(_levelNode, #AttributeNotifyGroup), enum2int(PIPNoYesInherit::Inherit));
        activity.PIPEmailActivity   = this.attributeToEnum(enumNum(PIPNoYesInherit), PIPCAPATemplateCreator::getAttribute(_levelNode, #AttributeNotifyGroup), enum2int(PIPNoYesInherit::Inherit));
        activity.PIPCAPAPrintOnReport   = this.attributeToEnum(enumNum(PIPNoYesInherit), PIPCAPATemplateCreator::getAttribute(_levelNode, #AttributeNotifyGroup), enum2int(PIPNoYesInherit::Inherit));
        if (_topLevel && activity.PIPNotifyGroup == PIPNoYesInherit::Inherit)
        {
            activity.PIPNotifyGroup = PIPNoYesInherit::No;
        }
        if (_topLevel && activity.PIPEmailActivity == PIPNoYesInherit::Inherit)
        {
            activity.PIPEmailActivity = PIPNoYesInherit::No;
        }
        if (_topLevel && activity.PIPCAPAPrintOnReport == PIPNoYesInherit::Inherit)
        {
            activity.PIPCAPAPrintOnReport = PIPNoYesInherit::No;
        }
        node = _levelNode.getNamedElement(#ElementNote);
        if (node)
        {
            activity.UserMemo = node.innerText();
        }
        if (!smmActivitiesFieldValidator.validate(activity) || !activity.validateWrite())
        {
            throw error("@SYS107513");
        }
        activity.insert();
    
        return activity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTemplate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a CAPA process template.
    /// </summary>
    /// <param name="_templateNode">
    ///    The XML node from the source XML document for the template to create.
    /// </param>
    /// <param name="_name">
    ///    The name of the template, which overrides the name given in <paramref name="_templateNode"/>.
    /// </param>
    /// <param name="_overwrite">
    ///    Determines if an existing template hierarchy of the same name as <paramref name="_name"/> should be overwritten.
    /// </param>
    /// <exception cref="Exception::Error">
    ///    Thrown if the template hierarchy already exists but it is not a CAPA hierarchy.
    /// </exception>
    /// <exception cref="Exception::Error">
    ///    Thrown if the template hierarchy already exists but it is linked to one or more processes.
    /// </exception>
    /// <exception cref="Exception::Error">
    ///    Thrown if there are any validation errors.
    /// </exception>
    private void createTemplate(XmlNode _templateNode, HierarchyName _name, boolean _overwrite)
    {
        Hierarchy           hierarchy;
        HierarchyTreeTable  rootNode;
        XmlNodeList         levelNodes;
        XmlNode             levelNode;
        int                 i;
    
        setPrefix(strFmt("@PIP473", _name));
    
        hierarchy = Hierarchy::findByNameType(_name, HierarchyType::Case, NoYes::Yes, true);
        if (hierarchy.RecId)
        {
            if (!_overwrite)
            {
                return;
            }
            else if (!hierarchy.PIPIsCAPA)
            {
                throw error(strFmt("@PIP465", _name));
            }
            else if (HierarchyLinkTable::existTemplateId(hierarchy.HierarchyId))
            {
                throw error(strFmt("@PIP466", _name));
            }
    
            this.deleteHierarchy(hierarchy);
        }
    
        hierarchy.clear();
        hierarchy.initValue();
        hierarchy.HierarchyType = HierarchyType::Case;
        hierarchy.IsTemplate    = NoYes::Yes;
        hierarchy.IsActive      = NoYes::No;
        hierarchy.Name          = _name;
        hierarchy.Description   = hierarchy.Name;
        hierarchy.PIPIsCAPA     = NoYes::Yes;
        hierarchy.insert();
    
        rootNode = HierarchyTreeTable::insertRoot(hierarchy.HierarchyId, hierarchy.Description);
    
        levelNodes = _templateNode.childNodes();
        for (i = 0; i < levelNodes.length(); i++)
        {
            levelNode = levelNodes.item(i);
            if (levelNode.name() == #ElementLevel)
            {
                this.createLevel(rootNode, levelNode);
            }
            else
            {
                throw error(strFmt("@PIP474", levelNode.name(), _templateNode.name(), #ElementLevel));
            }
        }
    
        info(strFmt("@PIP475", _name));
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTreeNode</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new record in the <c>HierarchyTreeTable</c> table.
    /// </summary>
    /// <param name="_parentTreeNode">
    ///    The record in the <c>HierarchyTreeTable</c> table that is the parent node for the new record.
    /// </param>
    /// <param name="_activity">
    ///    The record in the <c>smmActivities</c> table related to the new hierarchy tree node.
    /// </param>
    /// <param name="_treeNodeType">
    ///    The type of the new hierarchy tree node.
    /// </param>
    /// <returns>
    ///    The new record created in the <c>HierarchyTreeTable</c> table.
    /// </returns>
    /// <exception cref="Exception::Error">
    ///    Thrown if there are any validation errors.
    /// </exception>
    private HierarchyTreeTable createTreeNode(HierarchyTreeTable _parentTreeNode, smmActivities _activity, ElementNodeType _treeNodeType)
    {
        HierarchyTreeTable      treeNode;
    
        #Characters
    
        treeNode.initValue();
        treeNode.HierarchyId            = _parentTreeNode.HierarchyId;
        treeNode.ElementNumber          = NumberSeq::newGetNum(CompanyInfo::numRefElementNumber()).num();
        treeNode.ParentElementNumber    = _parentTreeNode.ElementNumber;
        treeNode.ElementNodeType        = _treeNodeType;
        treeNode.Name                   = _activity.Purpose;
        treeNode.Path                   = _parentTreeNode.Path + _parentTreeNode.ElementNumber + #Sharp;
        treeNode.RefRecId               = _activity.RecId;
        treeNode.SiblingNumber          = HierarchyTreeTable::nextSiblingNum(_parentTreeNode.HierarchyId, _parentTreeNode.ElementNumber);
        if (!treeNode.validateWrite())
        {
            throw error("@SYS107513");
        }
        treeNode.insert();
    
        return treeNode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createWorkerGroups</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the worker groups defined in the XML template.
    /// </summary>
    /// <param name="_groupsNode">
    ///    The XML node from the source XML document for the worker groups element.
    /// </param>
    private void createWorkerGroups(XmlNode _groupsNode)
    {
        PIPCAPAWorkerGroup  workerGroup;
    
        XmlNode             groupNode;
        XmlNodeList         groupNodes;
        int                 i;
    
        ttsBegin;
    
        groupNodes = _groupsNode.childNodes();
        for (i = 0; i < groupNodes.length(); i++)
        {
            groupNode = groupNodes.item(i);
            if (groupNode.name() == #ElementGroup)
            {
                workerGroup.clear();
                workerGroup.GroupId = PIPCAPATemplateCreator::getAttribute(groupNode, #AttributeId, true).value();
                if (!PIPCAPAWorkerGroup::existByGroupId(workerGroup.GroupId))
                {
                    workerGroup.Name                = this.attributeValue(PIPCAPATemplateCreator::getAttribute(groupNode, #AttributeName), workerGroup.GroupId);
                    workerGroup.AllowAny            = this.attributeToBoolean(PIPCAPATemplateCreator::getAttribute(groupNode, #AttributeAllowAny), true);
                    workerGroup.AdminDefaultWorker  = this.attributeToBoolean(PIPCAPATemplateCreator::getAttribute(groupNode, #AttributeAdminDefaultWorker), true);
                    workerGroup.AdminIsMember       = this.attributeToBoolean(PIPCAPATemplateCreator::getAttribute(groupNode, #AttributeAdminIsMember), true);
                    workerGroup.insert();
                }
            }
            else
            {
                throw error(strFmt("@PIP474", groupNode.name(), _groupsNode.name(), #ElementGroup));
            }
        }
    
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteHierarchy</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deletes the given hierarchy.
    /// </summary>
    /// <param name="_hierarchy">
    ///    The record in the <c>Hierarchy</c> table to delete.
    /// </param>
    /// <remarks>
    ///    This method doesn't do any special validation so the caller should ensure that the hierarchy should be deleted.
    /// </remarks>
    private void deleteHierarchy(Hierarchy _hierarchy)
    {
        HierarchyTreeTable  hierarchyTreeTable;
        smmActivities       activity;

        activity.skipDataMethods(true);
    
        delete_from activity
            exists join hierarchyTreeTable
                where hierarchyTreeTable.HierarchyId == _hierarchy.HierarchyId
                    && hierarchyTreeTable.RefRecId   == activity.RecId;
    
        _hierarchy.delete();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        Dialog      dialog = super();
        XmlNodeList templateNodes;
        XmlNode     node;
        int         i;
    
        dialog.caption("@PIP476");
    
        if (!this.validateTemplate())
        {
            throw error("@SYS107513");
        }
    
        templateNodes = this.templateXmlDocument().documentElement().childNodes();
        for (i = 0; i < templateNodes.length(); i++)
        {
            node = templateNodes.item(i);
            if (node.name() == #ElementTemplate)
            {
                templateDialogFields.addEnd(PIPCAPACreateTemplateDialogField::newDialogTemplateNode(dialog, node));
            }
        }
    
        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean                             ret = true;
        ListEnumerator                      fieldsEnumerator = templateDialogFields.getEnumerator();
        PIPCAPACreateTemplateDialogField    templateDialogField;
    
        while (ret && fieldsEnumerator.moveNext())
        {
            templateDialogField = fieldsEnumerator.current();
            ret = templateDialogField.getFromDialog();
        }
    
        if (ret && !this.atLeastOneTemplateSelectedForLoading(templateDialogFields))
        {
            ret = checkFailed("@PIP477");
        }
    
        if (ret)
        {
            this.parmTemplateNameControls(templateDialogFields);
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    
        templateDialogFields = new List(Types::Class);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTemplateNameControls</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the <c>TemplateNameControls</c> parameter.
    /// </summary>
    /// <param name="_templateNameControls">
    ///    A list of objects that implement <see cref="PIPCAPACreateTemplateControl interface"/>.
    /// </param>
    /// <returns>
    ///    The list of template name control objects.
    /// </returns>
    public List parmTemplateNameControls(List _templateNameControls = templateNameControls)
    {
        templateNameControls = _templateNameControls;
    
        return templateNameControls;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTemplateXml</Name>
				<Source><![CDATA[
    public str parmTemplateXml(str _templateXml = templateXml)
    {
        templateXml = _templateXml;
    
        return templateXml;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        XmlNodeList                     templateNodes;
        XmlNode                         templateNode;
        int                             i;
        Map                             templateNodeMap = new Map(Types::String, Types::Class);
        ListEnumerator                  templateNameControlEnumerator;
        PIPCAPACreateTemplateControl    templateControl;
    
        if (!this.validate())
        {
            return;
        }
    
        smmActivitiesFieldValidator = PIPTableFieldValidator::construct();
        smmActivitiesFieldValidator.addFieldId(fieldNum(smmActivities, Category));
        smmActivitiesFieldValidator.addFieldId(fieldNum(smmActivities, ResponsibleWorker));
        smmActivitiesFieldValidator.addFieldId(fieldNum(smmActivities, Source));
        smmActivitiesFieldValidator.addFieldId(fieldNum(smmActivities, ActivityTimeType));
        smmActivitiesFieldValidator.addFieldId(fieldNum(smmActivities, ActivityTaskTimeType));
        smmActivitiesFieldValidator.addFieldId(fieldNum(smmActivities, TaskPriority));
        smmActivitiesFieldValidator.addFieldId(fieldNum(smmActivities, IsTemplate));
        smmActivitiesFieldValidator.addFieldId(fieldNum(smmActivities, Purpose));
        smmActivitiesFieldValidator.addFieldId(fieldNum(smmActivities, StartDateTime));
        smmActivitiesFieldValidator.addFieldId(fieldNum(smmActivities, EndDateTime));
        smmActivitiesFieldValidator.addFieldId(fieldNum(smmActivities, PIPIsCAPA));
        smmActivitiesFieldValidator.addFieldId(fieldNum(smmActivities, PIPWorkerGroup));
        smmActivitiesFieldValidator.addFieldId(fieldNum(smmActivities, UserMemo));
        smmActivitiesFieldValidator.parmCheckOnlyChangedFields(true);
    
        templateNodes = this.templateXmlDocument().documentElement().childNodes();
        for (i = 0; i < templateNodes.length(); i++)
        {
            templateNode = templateNodes.item(i);
            switch (templateNode.name())
            {
                case #ElementTemplate:
                    templateNodeMap.insert(PIPCAPATemplateCreator::getAttribute(templateNode, #AttributeName, true).value(), templateNode);
                    break;
    
                case #ElementGroups:
                    this.createWorkerGroups(templateNode);
                    break;
    
                default:
                    throw error(strFmt("@PIP472", templateNode.name(), this.templateXmlDocument().documentElement().name()));
            }
        }
    
        setPrefix("@PIP478");
    
        templateNameControlEnumerator = this.parmTemplateNameControls().getEnumerator();
        while (templateNameControlEnumerator.moveNext())
        {
            templateControl = templateNameControlEnumerator.current();
            if (templateControl.parmLoadTemplate())
            {
                if (templateNodeMap.exists(templateControl.parmDefinedTemplateName()))
                {
                    ttsBegin;
    
                    templateNode = templateNodeMap.lookup(templateControl.parmDefinedTemplateName());
                    this.createTemplate(templateNode, templateControl.parmTemplateName(), templateControl.parmOverwrite());
    
                    ttsCommit;
                }
            }
        }
    
        info("@PIP479");
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateXmlDocument</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the <c>XmlDocument</c> for the given template XML text.
    /// </summary>
    /// <returns>
    ///    The <c>XmlDocument</c> for the given template XMl text.
    /// </returns>
    private XmlDocument templateXmlDocument()
    {
        if (!templateXmlDocument)
        {
            templateXmlDocument = XmlDocument::newXml(templateXml, true);
        }
    
        return templateXmlDocument;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that the required properties have been set.
    /// </summary>
    /// <param name="calledFrom">
    ///    The calling object; optional.
    /// </param>
    /// <returns>
    ///    true if the required properties are valid; otherwise, false.
    /// </returns>
    public boolean validate(Object calledFrom = null)
    {
        boolean                         ret;
    
        ret = super(calledFrom);
    
        ret = ret && this.validateTemplate();
    
        if (ret && !this.parmTemplateNameControls())
        {
            ret = checkFailed("@PIP480");
        }
    
        if (ret && !this.atLeastOneTemplateSelectedForLoading(this.parmTemplateNameControls()))
        {
            ret = checkFailed("@PIP477");
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTemplate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the XML template has been defined and is valid XML.
    /// </summary>
    /// <returns>
    ///    true if the XML template has defined and is valid XML; otherwise, false.
    /// </returns>
    private boolean validateTemplate()
    {
        boolean         ret = true;
        XmlParseError   parseError;
    
        if (ret && !templateXml)
        {
            ret = checkFailed("@PIP481");
        }
    
        if (ret)
        {
            parseError = this.templateXmlDocument().parseError();
            if (parseError.line())
            {
                ret = checkFailed(strFmt("@PIP482", parseError.line(), parseError.linePos()));
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>workerGroupIdToKey</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the surrogate record id for the record in the <c>PIPCAPAWorkerGroup</c> table.
    /// </summary>
    /// <param name="_groupId">
    ///   The group ID to find.
    /// </param>
    /// <returns>
    ///    The surrogate key for the record in the <c>PIPCAPAWorkerGroup</c> table.
    /// </returns>
    private PIPCAPAWorkerGroupRecId workerGroupIdToKey(PIPCAPAWorkerGroupId _groupId)
    {
        return PIPCAPAWorkerGroup::findByGroupId(_groupId).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PIPCAPATemplateCreator construct()
    {
        return new PIPCAPATemplateCreator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the description for this <c>RunBase</c> class.
    /// </summary>
    /// <returns>
    ///    The description for this <c>RunBase</c> class.
    /// </returns>
    public static Description description()
    {
        return "@PIP470";
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAttribute</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets an attribute from an XML node with some validation.
    /// </summary>
    /// <param name="_node">
    ///    The XML node to retrieve the attribute from.
    /// </param>
    /// <param name="_attributeName">
    ///    The name of the attribute to get.
    /// </param>
    /// <param name="_required">
    ///    Determines if the attribute is required; optional.
    /// </param>
    /// <returns>
    ///    The found <c>XmlAttribute</c> for the attribute or <c>null</c> if the attribute was not required and it does not exist.
    /// </returns>
    /// <exception cref="Exception::Error">
    ///    Thrown if <paramref name="_required"/> is <c>true</c> but the attribute was not defined in <paramref name="_node"/>.
    /// </exception>
    public static XmlAttribute getAttribute(XmlNode _node, str _attributeName, boolean _required = false)
    {
        XmlAttribute        attribute;
    
        attribute = _node.attributes().getNamedItem(_attributeName);
        if (!attribute && _required)
        {
            throw error(strFmt("@PIP483", _node.name(), _attributeName));
        }
    
        return attribute;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        PIPCAPATemplateCreator  creator = PIPCAPATemplateCreator::construct();
    
        str predefinedTemplate;
    
        [predefinedTemplate] = SysResource::getResourceNodeData(SysResource::getResourceNode(resourceStr(PIPCAPAProcessTemplate)));
    
        creator.parmTemplateXml(predefinedTemplate);
    
        if (creator.prompt())
        {
            creator.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>