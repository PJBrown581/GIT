<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PIPSmmProcessInstance_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(smmProcessInstance))]
public final class PIPSmmProcessInstance_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>SmmProcessInstance_postChangeStage</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="_toStage"></param>
    /// <param name="_last"></param>
    /// <param name="_transferActivities"></param>
    /// <param name="_hierarchy"></param>
    /// <param name="_elementNumber"></param>
    /// <param name="_processInstance"></param>
    [SubscribesTo(classStr(SmmProcessInstance), delegateStr(SmmProcessInstance, postChangeStage))]
    public static void SmmProcessInstance_postChangeStage(ElementNumber _toStage, boolean _last, boolean _transferActivities, Hierarchy _hierarchy, ElementNumber _elementNumber, smmProcessInstance _processInstance)
    {
        if (_elementNumber != _toStage && !_last)
        {
            smmProcessInstance _this = _processInstance as smmProcessInstance;

            if (_this.parmHierarchyTable().PIPIsCAPA)
            {
                smmProcessStage currentStageTable = smmProcessStage::find(_this.parmHierarchyTable().HierarchyId, _elementNumber);
                if (currentStageTable)
                {
                    PIPCAPAWorkerGroupRecId workerGroupRecId = HierarchyTreeTable::findElementNumber(currentStageTable.HierarchyId, _elementNumber).pipGetWorkerGroup();
                    if (!PIPCAPAWorkerGroup::find(workerGroupRecId).isCurrentUserAllowedToChangeStage())
                    {
                        throw error("@PIP201");
                    }
                }
                _this.pipSendMailCAPA(HierarchyTreeTable::findElementNumber(_this.parmHierarchyTable().HierarchyId, _toStage));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFormArgs</Name>
				<Source><![CDATA[
    protected Args createFormArgs()
    {
        #PIPCAPAManagement

        Args args = next createFormArgs();

        if (this.parmHierarchyTable().PIPIsCAPA == NoYes::Yes)
        {
            args.parm(#CAPA);
        }

        return args;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pipHierarchyNodeForCurrentStage</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the stage node record in the <c>HierarchyTreeTable</c> table for the current stage of the process.
    /// </summary>
    /// <param name="_forUpdate">
    ///    Determines if the record should be read for updating; optional.
    /// </param>
    /// <returns>
    ///    The stage node record in the <c>HierarchyTreeTable</c> table for the current stage.
    /// </returns>
    public HierarchyTreeTable pipHierarchyNodeForCurrentStage(boolean _forUpdate = false)
    {
        return this.getCurrentStage().pipHierarchyTreeTable(_forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pipSendMailCAPA</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sends e-mail to all CAPA users assigned to destination stage and child activities.
    /// </summary>
    /// <param name="_hierarchyTreeTable">
    ///     The <c>HierarchyTreeTable</c> record required to find the corresponding activties.
    /// </param>
    private void pipSendMailCAPA(HierarchyTreeTable _hierarchyTreeTable)
    {
        HierarchyTreeTable              stageNode   = _hierarchyTreeTable.pipTopLevelNode();
        CaseDetailBase                  caseDetail  = this.parmSourceCommon();
    
        PIPHierarchyEmailAddressLoader  addressLoader;
        PIPCAPAMailer                   mailer;

        HierarchyTreeTable              hierarchyTreeTable;
        smmActivities                   activities;
        str                             activityString;

        while select hierarchyTreeTable
            where hierarchyTreeTable.ParentElementNumber == stageNode.ElementNumber
            join activities
                where activities.RecId == hierarchyTreeTable.RefRecId
        {
            activityString += strFmt("@PIP:CAPAChangeProcessRow",
                PIPCAPAMailer::buildAXURL(menuItemDisplayStr(smmActivities), MenuItemType::Display, formDataSourceStr(smmActivities,smmActivities), fieldStr(smmActivities, ActivityNumber), activities.ActivityNumber),
                activities.ActivityNumber,
                activities.Purpose,
                HcmWorker::find(activities.ResponsibleWorker).name(),
                date2StrUsr(activities.startDate()),
                date2StrUsr(activities.endDate()));
        }
    
        addressLoader = PIPHierarchyEmailAddressLoader::construct();
        stageNode.pipVisitNodes(addressLoader);
    
        mailer = PIPCAPAMailer::construct();
        mailer.parmSubject(strFmt("@PIP:CAPAChangeProcessHeader", caseDetail.CaseId));
        mailer.parmBody(strFmt("@PIP:CAPAChangeProcessBody",
            PIPCAPAMailer::buildAXURL(menuItemDisplayStr(PIPCAPACaseDetail), MenuItemType::Display, formDataSourceStr(PIPCAPACaseDetail, CaseDetailBase), fieldStr(CaseDetailBase, CaseId), caseDetail.CaseId),
            caseDetail.CaseId,
            caseDetail.Description,
            stageNode.pipActivity().Purpose,
            caseDetail.Priority,
            date2StrUsr(caseDetail.PIPCAPADueDate),
            caseDetail.PIPCategory,
            caseDetail.PIPCAPASubCategory,
            activityString
            ));
        mailer.parmToAddresses(addressLoader.addresses());
        mailer.send();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>