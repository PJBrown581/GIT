<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PIPCAPAAnalyticsDataProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>PIPCAPAAnalyticsDataProvider</c> class provides the analytics graph data on the server for
///    performance purposes.
/// </summary>
class PIPCAPAAnalyticsDataProvider
{
    StartDate                       startDate;
    EndDate                         endDate;
    PIPCategory                     capaCategory;
    PIPCAPASubCategoryEntityType    subCategoryEntityType;
    #define.TopTen(10)

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getCategoryGraphData</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a packed container with the data for the category graph.
    /// </summary>
    /// <returns>
    ///    A packed container for a <c>List</c> where each element is a container with the category name and count of
    ///    entries per category.
    /// </returns>
    public container getCategoryGraphData()
    {
        return PIPCAPAAnalyticsDataProvider::getCategoryGraphDataOnServer(startDate, endDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPriorityGraphData</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a packed container with the data for the priority graph.
    /// </summary>
    /// <returns>
    ///    A packed container for a <c>List</c> where each element is a container with the category name and count of
    ///    entries per category.
    /// </returns>
    public container getPriorityGraphData()
    {
        return PIPCAPAAnalyticsDataProvider::getPriorityGraphDataOnServer(startDate, endDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTypeGraphData</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a packed container with the data for the Type graph.
    /// </summary>
    /// <returns>
    ///    A packed container for a <c>List</c> where each element is a container with the Type name and count of
    ///    entries per category.
    /// </returns>
    public container getTypeGraphData()
    {
        return PIPCAPAAnalyticsDataProvider::getTypeGraphDataOnServer(startDate, endDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRootCauseGraphData</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a packed container with the data for the Root cause graph.
    /// </summary>
    /// <returns>
    ///    A packed container for a <c>List</c> where each element is a container with the Root cause code and count of
    ///    entries per category.
    /// </returns>
    public container getRootCauseGraphData()
    {
        return PIPCAPAAnalyticsDataProvider::getRootCauseGraphDataOnServer(startDate, endDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSubCategoryGraphData</Name>
				<Source><![CDATA[
    public container getSubCategoryGraphData()
    {
        CaseEntityType                  associationEntityType;
        PIPCAPACategories               capaCategoryTmp = PIPCAPACategories::find(capaCategory);
        PIPCAPASubCategoryEntityType    subCategoryType = PIPCAPACategories::find(capaCategory).SubCategoryEntityType;
    
        switch(subCategoryType)
        {
            case PIPCAPASubCategoryEntityType::Customer :
                associationEntityType = CaseEntityType::Customer;
                break;
            case PIPCAPASubCategoryEntityType::Vendor :
                associationEntityType = CaseEntityType::Vendor;
                break;
            case PIPCAPASubCategoryEntityType::Product :
                associationEntityType = CaseEntityType::Item;
                break;
        }
    
        if (subCategoryType == PIPCAPASubCategoryEntityType::UserDefined)
        {
            return PIPCAPAAnalyticsDataProvider::getSubCategoryGraphDataUserDefined(startDate, endDate, capaCategory);
        }
        else
        {
            return PIPCAPAAnalyticsDataProvider::getSubCategoryGrapDataOther(startDate, endDate, capaCategory, associationEntityType);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTrendGraphData</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a packed container with the data for the trend graph.
    /// </summary>
    /// <returns>
    ///    A packed container for a <c>List</c> where each element is a container with the activity date,
    ///    the category, and count of entries per date and category.
    /// </returns>
    public container getTrendGraphData()
    {
        return PIPCAPAAnalyticsDataProvider::getTrendGraphDataOnServer(startDate, endDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTrendingSubCategoryGraphData</Name>
				<Source><![CDATA[
    public container getTrendingSubCategoryGraphData()
    {
        CaseEntityType                  associationEntityType;
        PIPCAPASubCategoryEntityType    subCategoryType = PIPCAPACategories::find(capaCategory).SubCategoryEntityType;
    
        switch(subCategoryType)
        {
            case PIPCAPASubCategoryEntityType::Customer :
                associationEntityType = CaseEntityType::Customer;
                break;
            case PIPCAPASubCategoryEntityType::Vendor :
                associationEntityType = CaseEntityType::Vendor;
                break;
            case PIPCAPASubCategoryEntityType::Product :
                associationEntityType = CaseEntityType::Item;
                break;
        }
    
        if (subCategoryType == PIPCAPASubCategoryEntityType::UserDefined)
        {
            return PIPCAPAAnalyticsDataProvider::getTrendSubCategoryGraphDataUserDefined(startDate, endDate, capaCategory);
        }
        else
        {
            return PIPCAPAAnalyticsDataProvider::getTrendSubCategoryGraphDataOther(startDate, endDate, capaCategory, associationEntityType);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWorkerGraphData</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a packed container with the data for the worker graph.
    /// </summary>
    /// <returns>
    ///    A packed container for a <c>List</c> where each element is a container with the worker id and count of
    ///    entries per worker id.
    /// </returns>
    public container getWorkerGraphData()
    {
        return PIPCAPAAnalyticsDataProvider::getWorkerGraphDataOnServer(startDate, endDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStatusGraphData</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a packed container with the data for the status graph.
    /// </summary>
    /// <returns>
    ///    A packed container for a <c>List</c> where each element is a container with the case status and count of
    ///    entries per case status.
    /// </returns>
    public container getStatusGraphData()
    {
        return PIPCAPAAnalyticsDataProvider::getStatusGraphDataOnServer(startDate, endDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        endDate   = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        startDate = DateTimeUtil::getStartOfYearDate(new Session().preferredLocale(), endDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCAPACategory</Name>
				<Source><![CDATA[
    public PIPCategory parmCAPACategory(PIPCategory _capaCategory = capaCategory)
    {
        capaCategory = _capaCategory;
    
        return capaCategory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEndDate</Name>
				<Source><![CDATA[
    public EndDate parmEndDate(EndDate _endDate = endDate)
    {
        endDate = _endDate;
    
        return endDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEntityType</Name>
				<Source><![CDATA[
    public PIPCAPASubCategoryEntityType parmEntityType(PIPCAPASubCategoryEntityType _subCategoryEntityType = subCategoryEntityType)
    {
        subCategoryEntityType = _subCategoryEntityType;
    
        return subCategoryEntityType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStartDate</Name>
				<Source><![CDATA[
    public StartDate parmStartDate(StartDate _startDate = startDate)
    {
        startDate = _startDate;
    
        return startDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PIPCAPAAnalyticsDataProvider construct()
    {
        return new PIPCAPAAnalyticsDataProvider();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCategoryGraphDataOnServer</Name>
				<Source><![CDATA[
    private static server container getCategoryGraphDataOnServer(StartDate _startDate, EndDate _endDate)
    {
        CaseDetailBase  capaCase;
        List            result  = new List(Types::Container);
    
        while select PIPCategory, count(RecId) from capaCase
            group by PIPCategory
            where capaCase.PIPCategory
                && capaCase.PIPDate >= _startDate
                && capaCase.PIPDate <= _endDate
        {
            result.addEnd([capaCase.PIPCategory, any2int(capaCase.RecId)]);
        }
    
        return result.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPriorityGraphDataOnServer</Name>
				<Source><![CDATA[
    private static server container getPriorityGraphDataOnServer(StartDate _startDate, EndDate _endDate)
    {
        CaseDetailBase  capaCase;
        List            result  = new List(Types::Container);
        
        while select Priority, count(RecId) from capaCase
            group by Priority
            where capaCase.PIPIsCAPA
                && capaCase.PIPDate >= _startDate
                && capaCase.PIPDate <= _endDate
        {
            result.addEnd([capaCase.Priority, any2int(capaCase.RecId)]);
        }
        
        return result.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSubCategoryGrapDataOther</Name>
				<Source><![CDATA[
    private static server container getSubCategoryGrapDataOther(
        StartDate                       _startDate,
        EndDate                         _endDate,
        PIPCategory                     _capaCategory,
        CaseEntityType                  _associationEntityType)
    {
        PIPCAPACaseAnalytics    capaCaseAnalytics;
        PIPCAPAAnalyticsTmp     capaAnalyticsTmp;      
        CustTable               custTable;
        VendTable               vendTable;
        InventTable             inventTable;
        List                    result  = new List(Types::Container);
    
        while select RefRecId, count(RecId) from capaCaseAnalytics
            group by capaCaseAnalytics.RefRecId
            where capaCaseAnalytics.RefRecId
                && capaCaseAnalytics.CreatedDate    >= _startDate
                && capaCaseAnalytics.CreatedDate    <= _endDate    
                && capaCaseAnalytics.Category       == _capaCategory
                && capaCaseAnalytics.EntityType     == _associationEntityType
        {
            switch (_associationEntityType)
            {
                case CaseEntityType::Customer :
                    custTable                   = CustTable::findRecId(capaCaseAnalytics.RefRecId);
                    capaAnalyticsTmp.EntityId   = custTable.AccountNum;
                    break;
                case CaseEntityType::Vendor :
                    vendTable                   = VendTable::findRecId(capaCaseAnalytics.RefRecId);
                    capaAnalyticsTmp.EntityId   = vendTable.AccountNum;
                    break;
                case CaseEntityType::Item :
                    inventTable                 = InventTable::findRecId(capaCaseAnalytics.RefRecId);
                    capaAnalyticsTmp.EntityId   = inventTable.ItemId;
                    break;
            }
    
            capaAnalyticsTmp.RefRecId              = any2Int(capaCaseAnalytics.RefRecId);
            capaAnalyticsTmp.CaseCount             = any2Int(capaCaseAnalytics.RecId);
            capaAnalyticsTmp.insert();
        }
    
        while select firstonly10 capaAnalyticsTmp
            order by capaAnalyticsTmp.CaseCount desc, capaAnalyticsTmp.EntityId asc
        {
            result.addEnd([capaAnalyticsTmp.EntityId, capaAnalyticsTmp.CaseCount]);         
        }
    
        return result.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSubCategoryGraphDataUserDefined</Name>
				<Source><![CDATA[
    private static server container getSubCategoryGraphDataUserDefined(
        StartDate                       _startDate,
        EndDate                         _endDate,
        PIPCategory                     _capaCategory)
    {
        PIPCAPAAnalyticsTmp     capaAnalyticsTmp;
        CaseDetailBase          capaCase;
        List                    result  = new List(Types::Container);

        while select PIPCAPASubCategory, count(RecId) from capaCase
            group by capaCase.PIPCAPASubCategory
            where capaCase.PIPCAPASubCategory
                && capaCase.PIPCategory == _capaCategory
                && capaCase.PIPDate     >= _startDate
                && capaCase.PIPDate     <= _endDate
        {
            capaAnalyticsTmp.EntityId   = capaCase.PIPCAPASubCategory;
            capaAnalyticsTmp.CaseCount  = any2int(capaCase.RecId);
            capaAnalyticsTmp.insert();
        }

        while select firstonly10 capaAnalyticsTmp
            order by capaAnalyticsTmp.CaseCount desc, capaAnalyticsTmp.EntityId asc
        {
            result.addEnd([capaAnalyticsTmp.EntityId, capaAnalyticsTmp.CaseCount]);
        }

        return result.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTrendGraphDataOnServer</Name>
				<Source><![CDATA[
    private static server container getTrendGraphDataOnServer(StartDate _startDate, EndDate _endDate)
    {
        CaseDetailBase  capaCase;
        List            result  = new List(Types::Container);
    
        while select PIPCategory, PIPDate, count(RecId) from capaCase
            group by PIPCategory, PIPDate
            where capaCase.PIPCategory
                && capaCase.PIPDate >= _startDate
                && capaCase.PIPDate <= _endDate
        {
            result.addEnd([capaCase.PIPDate, capaCase.PIPCategory, any2int(capaCase.RecId)]);
        }
    
        return result.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTrendSubCategoryGraphDataOther</Name>
				<Source><![CDATA[
    private static server container getTrendSubCategoryGraphDataOther(
        StartDate                       _startDate,
        EndDate                         _endDate,
        PIPCategory                     _capaCategory,
        CaseEntityType                  _associationEntityType)
    {
        PIPCAPACaseAnalytics    capaCaseAnalytics;
        PIPCAPAAnalyticsTmp     capaAnalyticsTmp;
        PIPCAPAAnalyticsTmp     capaAnalyticsSort;
        int                     recordCount;
        CustTable               custTable;
        VendTable               vendTable;
        InventTable             inventTable;
        List                    result              = new List(Types::Container);
        Set                     topTenSubCategories = new Set(Types::String);
    
        while select RefRecId, count(RecId) from capaCaseAnalytics
            group by capaCaseAnalytics.RefRecId, capaCaseAnalytics.CreatedDate
            where capaCaseAnalytics.RefRecId
                && capaCaseAnalytics.CreatedDate    >= _startDate
                && capaCaseAnalytics.CreatedDate    <= _endDate
                && capaCaseAnalytics.Category       == _capaCategory
                && capaCaseAnalytics.EntityType     == _associationEntityType
        {
            switch (_associationEntityType)
            {
                case CaseEntityType::Customer :
                    custTable                   = CustTable::findRecId(capaCaseAnalytics.RefRecId);
                    capaAnalyticsTmp.EntityId   = custTable.AccountNum;
                    break;
                case CaseEntityType::Vendor :
                    vendTable                   = VendTable::findRecId(capaCaseAnalytics.RefRecId);
                    capaAnalyticsTmp.EntityId   = vendTable.AccountNum;
                    break;
                case CaseEntityType::Item :
                    inventTable                 = InventTable::findRecId(capaCaseAnalytics.RefRecId);
                    capaAnalyticsTmp.EntityId   = inventTable.ItemId;
                    break;
            }
    
            capaAnalyticsTmp.CreationDate          = capaCaseAnalytics.CreatedDate;
            capaAnalyticsTmp.RefRecId              = capaCaseAnalytics.RefRecId;
            capaAnalyticsTmp.CaseCount             = any2Int(capaCaseAnalytics.recId);
            capaAnalyticsTmp.insert();
        }
       
        while select EntityId, sum(CaseCount) from  capaAnalyticsTmp
            group by capaAnalyticsTmp.EntityId
        {
            capaAnalyticsSort.EntityId  = capaAnalyticsTmp.EntityId;
            capaAnalyticsSort.CaseCount = any2Int(capaAnalyticsTmp.CaseCount);
            capaAnalyticsSort.insert();
        }

        while select firstonly10 capaAnalyticsSort
            order by capaAnalyticsSort.CaseCount desc, capaAnalyticsSort.EntityId
        {
            topTenSubCategories.add(capaAnalyticsSort.EntityId);
        }
    
        while select capaAnalyticsTmp
            order by capaAnalyticsTmp.CaseCount desc, capaAnalyticsTmp.EntityId asc
        {
            if (topTenSubCategories.in(capaAnalyticsTmp.EntityId))
            {
                result.addEnd([capaAnalyticsTmp.CreationDate, capaAnalyticsTmp.EntityId, capaAnalyticsTmp.CaseCount]);               
            }          
        }
    
        return result.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTrendSubCategoryGraphDataUserDefined</Name>
				<Source><![CDATA[
    private static server container getTrendSubCategoryGraphDataUserDefined(
        StartDate                       _startDate,
        EndDate                         _endDate,
        PIPCategory                     _capaCategory)
    {
        CaseDetailBase          capaCase;
        PIPCAPAAnalyticsTmp     capaAnalyticsTmp;
        PIPCAPAAnalyticsTmp     capaAnalyticsSort;        
        List                    result              = new List(Types::Container);
        Set                     topTenSubCategories = new Set(Types::String);

        while select PIPDate, PIPCAPASubCategory, count(RecId) from capaCase
            group by capaCase.PIPCAPASubCategory, capaCase.PIPDate
            where capaCase.PIPCAPASubCategory
                && capaCase.PIPCategory == _capaCategory
                && capaCase.PIPDate     >= _startDate
                && capaCase.PIPDate     <= _endDate
        {
            capaAnalyticsTmp.CreationDate   = capaCase.PIPDate;
            capaAnalyticsTmp.EntityId       = capaCase.PIPCAPASubCategory;
            capaAnalyticsTmp.CaseCount      = any2int(capaCase.RecId);
            capaAnalyticsTmp.insert();
        }

        while select PIPCAPASubCategory, count(RecId) from capaCase
            group by capaCase.PIPCAPASubCategory
            where capaCase.PIPCAPASubCategory
                && capaCase.PIPCategory == _capaCategory
                && capaCase.PIPDate     >= _startDate
                && capaCase.PIPDate     <= _endDate
        {           
            capaAnalyticsSort.EntityId       = capaCase.PIPCAPASubCategory;
            capaAnalyticsSort.CaseCount      = any2int(capaCase.RecId);
            capaAnalyticsSort.insert();
        }

        while select firstonly10 capaAnalyticsSort
            order by capaAnalyticsSort.CaseCount desc, capaAnalyticsSort.EntityId asc
        {
            topTenSubCategories.add(capaAnalyticsSort.EntityId);
        }

        while select capaAnalyticsTmp
            order by capaAnalyticsTmp.CaseCount desc, capaAnalyticsTmp.EntityId asc
        {
            if (topTenSubCategories.in(capaAnalyticsTmp.EntityId))
            {
                result.addEnd([capaAnalyticsTmp.CreationDate, capaAnalyticsTmp.EntityId, capaAnalyticsTmp.CaseCount]);
            }         
        }

        return result.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWorkerGraphDataOnServer</Name>
				<Source><![CDATA[
    private static server container getWorkerGraphDataOnServer(StartDate _startDate, EndDate _endDate)
    {
        CaseDetailBase  capaCase;
        List            result  = new List(Types::Container);
    
        while select CreatedBy, count(RecId) from capaCase
            group by CreatedBy
            where capaCase.PIPCategory
                && capaCase.PIPDate >= _startDate
                && capaCase.PIPDate <= _endDate
        {
            result.addEnd([capaCase.createdBy, any2int(capaCase.RecId)]);
        }
    
        return result.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStatusGraphDataOnServer</Name>
				<Source><![CDATA[
    private static server container getStatusGraphDataOnServer(StartDate _startDate, EndDate _endDate)
    {
        CaseDetailBase  capaCase;
        List            result  = new List(Types::Container);
        
        while select Status, count(RecId) from capaCase
            group by Status
            where capaCase.PIPCategory
                && capaCase.PIPDate >= _startDate
                && capaCase.PIPDate <= _endDate
        {
            result.addEnd([enum2Str(capaCase.Status), any2int(capaCase.RecId)]);
        }
        
        return result.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTypeGraphDataOnServer</Name>
				<Source><![CDATA[
    private static server container getTypeGraphDataOnServer(StartDate _startDate, EndDate _endDate)
    {
        CaseDetailBase  capaCase;
        List            result  = new List(Types::Container);
        
        while select PIPCAPAType, count(RecId) from capaCase
            group by PIPCAPAType
            where capaCase.PIPIsCAPA
                && capaCase.PIPDate >= _startDate
                && capaCase.PIPDate <= _endDate
        {
            result.addEnd([capaCase.PIPCAPAType, any2int(capaCase.RecId)]);
        }
        
        return result.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRootCauseGraphDataOnServer</Name>
				<Source><![CDATA[
    private static server container getRootCauseGraphDataOnServer(StartDate _startDate, EndDate _endDate)
    {
        CaseDetailBase  capaCase;
        List            result  = new List(Types::Container);
        
        while select PIPCAPARootCauseCode, count(RecId) from capaCase
            group by PIPCAPARootCauseCode
            where capaCase.PIPIsCAPA
                && capaCase.PIPDate >= _startDate
                && capaCase.PIPDate <= _endDate
        {
            result.addEnd([capaCase.PIPCAPARootCauseCode, any2int(capaCase.RecId)]);
        }
        
        return result.pack();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>