<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PIPCAPAWorkerGroup</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PIPCAPAWorkerGroup extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>defaultWorker</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the default worker for this group.
    /// </summary>
    /// <returns>
    ///    The default worker for this group.
    /// </returns>
    public HcmWorkerRecId defaultWorker()
    {
        HcmWorkerRecId workerRecId;
    
        workerRecId = PIPCAPAWorkerGroupAssignment::find(this.DefaultWorker).Worker;
    
        if (!workerRecId && this.AdminDefaultWorker)
        {
            workerRecId = InventParameters::find().PIPCAPAAdministrator;
        }
    
        return workerRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCurrentUserAllowedToChangeStage</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a value indicating if the worker associated with the current Dynamics AX user ID is allowed to change a processing stage on a CAPA case for this worker group.
    /// </summary>
    /// <returns>
    ///    true if the worker associated with the current Dynamics AX user ID is allowed to change the processing stage; otherwise, false.
    /// </returns>
    public boolean isCurrentUserAllowedToChangeStage()
    {
        return this.isWorkerAllowedToChangeStage(HcmWorkerLookup::currentWorker());
    }

]]></Source>
			</Method>
			<Method>
				<Name>isGroupMember</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a value indicating if a worker is a member of this worker group.
    /// </summary>
    /// <param name="_workerRecId">
    ///    The surrogate key of the worker to check.
    /// </param>
    /// <returns>
    ///    true if the worker is a member of this worker group; otherwise, false.
    /// </returns>
    public boolean isGroupMember(HcmWorkerRecId _workerRecId)
    {
        boolean ret;
    
        // When Admin is the default worker but not a member, they should be considered a member for validation but they will not be authorized to advance a stage
        ret = (this.AdminIsMember || this.AdminDefaultWorker) && InventParameters::find().PIPCAPAAdministrator == _workerRecId;
    
        ret = ret || PIPCAPAWorkerGroupAssignment::existGroupWorker(this.RecId, _workerRecId);
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWorkerAllowedToChangeStage</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a value indicating if a worker is allowed to change a processing stage on a CAPA case for this worker group.
    /// </summary>
    /// <param name="_workerRecId">
    ///    The surrogate key for the record in the <c>HcmWorker</c> table.
    /// </param>
    /// <returns>
    ///    true if the worker is allowed to change the processing stage; otherwise, false.
    /// </returns>
    public boolean isWorkerAllowedToChangeStage(HcmWorkerRecId _workerRecId)
    {
        boolean ret;
    
        if (this.AllowAny)
        {
            ret = PIPCAPAWorkerGroupAssignment::existGroupWorker(this.RecId, _workerRecId);
        }
        else
        {
            ret = PIPCAPAWorkerGroupAssignment::findGroupWorker(this.RecId, _workerRecId).Allowed;
        }
    
        if (!ret && this.AdminIsMember && InventParameters::find().PIPCAPAAdministrator == _workerRecId)
        {
            ret = true;
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        if (this.AdminDefaultWorker && !this.orig().AdminDefaultWorker)
        {
            this.DefaultWorker = 0;
        }
        else if (this.DefaultWorker && !this.orig().DefaultWorker)
        {
            this.AdminDefaultWorker = NoYes::No;
        }
    
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a value indicating if a record in the <c>PIPCAPAWorkerGroup</c> table exists for the given surrogate key.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the record in the <c>PIPCAPAworkerGroup</c> table.
    /// </param>
    /// <returns>
    ///    true if the record exists; otherwise, false.
    /// </returns>
    public static boolean exist(PIPCAPAWorkerGroupRecId _recId)
    {
        return _recId
            && (select PIPCAPAWorkerGroup
                    where PIPCAPAWorkerGroup.RecId == _recId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existByGroupId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a value indicating if a record in the <c>PIPCAPAWorkerGroup</c> table exists for the given group ID.
    /// </summary>
    /// <param name="_groupId">
    ///    The group ID to check.
    /// </param>
    /// <returns>
    ///    true if the record exists; otherwise, false.
    /// </returns>
    public static boolean existByGroupId(PIPCAPAWorkerGroupId _groupId)
    {
        return _groupId
            && (select PIPCAPAWorkerGroup
                    where PIPCAPAWorkerGroup.GroupId == _groupId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the record in the <c>PIPCAPAWorkerGroup</c> table for the given surrogate key.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the record in the <c>PIPCAPAworkerGroup</c> table.
    /// </param>
    /// <param name="_forUpdate">
    ///    Determines if the record should be read for update; optional.
    /// </param>
    /// <returns>
    ///    The matching record in the <c>PIPCAPAWorkerGroup</c> table if it exists; otherwise, an empty buffer.
    /// </returns>
    public static PIPCAPAWorkerGroup find(PIPCAPAWorkerGroupRecId _recId, boolean _forUpdate = false)
    {
        PIPCAPAWorkerGroup  workerGroup;
    
        if (_recId)
        {
            workerGroup.selectForUpdate(_forUpdate);
    
            select firstOnly workerGroup
                where workerGroup.RecId == _recId;
        }
    
        return workerGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByGroupId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the record in the <c>PIPCAPAWorkerGroup</c> table for the given surrogate key.
    /// </summary>
    /// <param name="_groupId">
    ///    The group ID to find.
    /// </param>
    /// <param name="_forUpdate">
    ///    Determines if the record should be read for update; optional.
    /// </param>
    /// <returns>
    ///    The matching record in the <c>PIPCAPAWorkerGroup</c> table if it exists; otherwise, an empty buffer.
    /// </returns>
    public static PIPCAPAWorkerGroup findByGroupId(PIPCAPAWorkerGroupId _groupId, boolean _forUpdate = false)
    {
        PIPCAPAWorkerGroup  workerGroup;
    
        if (_groupId)
        {
            workerGroup.selectForUpdate(_forUpdate);
    
            select firstOnly workerGroup
                where workerGroup.GroupId == _groupId;
        }
    
        return workerGroup;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PIPCAPAManagement</ConfigurationKey>
	<DeveloperDocumentation>@PIP553</DeveloperDocumentation>
	<FormRef>PIPCAPAWorkerGroup</FormRef>
	<Label>@PIP555</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>GroupId</TitleField1>
	<TitleField2>Name</TitleField2>
	<ReplacementKey>GroupIdIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>GroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>GroupId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Administrator</Name>
			<Label>@PIP77</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AdminIsMember</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AdminDefaultWorker</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS53631</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>GroupId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Name</Name>
			<Label>@SYS92116</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Options</Name>
			<Label>@SYS119149</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AllowAny</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AdminDefaultWorker</Name>
			<ExtendedDataType>PIPCAPADefaultWorker</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AdminIsMember</Name>
			<ExtendedDataType>PIPCAPAAdminIsMember</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AllowAny</Name>
			<ExtendedDataType>PIPCAPAAllowAny</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DefaultWorker</Name>
			<ExtendedDataType>PIPCAPAWorkerGroupAssignmentRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>GroupId</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>PIPCAPAWorkerGroupId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<StringSize>20</StringSize>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<ExtendedDataType>Name</ExtendedDataType>
			<StringSize>60</StringSize>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>GroupIdIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>GroupId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PIPCAPAWorkerGroupAssignment</Name>
			<Cardinality>ZeroOne</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>PIPCAPAWorkerGroupAssignment</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultWorker</Name>
					<Field>DefaultWorker</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>