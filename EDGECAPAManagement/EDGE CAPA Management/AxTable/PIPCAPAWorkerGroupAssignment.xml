<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PIPCAPAWorkerGroupAssignment</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PIPCAPAWorkerGroupAssignment extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        PIPCAPAWorkerGroup workerGroup;
    
        super();
    
        workerGroup = this.workerGroup();
        if (workerGroup.DefaultWorker == this.RecId)
        {
            workerGroup.selectForUpdate(true);
            workerGroup.DefaultWorker = 0;
            workerGroup.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        if (!this.worker().pipUserId())
        {
            warning(strFmt("@PIP549", this.worker().name()));
        }
    
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>worker</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the related record in the <c>HcmWorker</c> table.
    /// </summary>
    /// <param name="_forUpdate">
    ///    Determines if the record should be read for update; optional.
    /// </param>
    /// <returns>
    ///    The related record in the <c>HcmWorker</c> table.
    /// </returns>
    public HcmWorker worker(boolean _forUpdate = false)
    {
        return HcmWorker::find(this.Worker, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>workerGroup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the related record in the <c>PIPCAPAWorkerGroup</c> table.
    /// </summary>
    /// <param name="_forUpdate">
    ///    Determines if the record should be read for update; optional.
    /// </param>
    /// <returns>
    ///    The related record in the <c>PIPCAPAWorkerGroup</c> table.
    /// </returns>
    public PIPCAPAWorkerGroup workerGroup(boolean _forUpdate = false)
    {
        return PIPCAPAWorkerGroup::find(this.Group, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a value indicating if a record in the <c>PIPCAPAWorkerGroupRecId</c> table exists for a given worker group and worker reference combination.
    /// </summary>
    /// <param name="_workerGroupAssignmentRecId">
    ///    The surrogate key for the record in the <c>PIPCAPAWorkerGroupAssignment</c> table.
    /// </param>
    /// <returns>
    ///    true if the record exists; otherwise, false.
    /// </returns>
    public static boolean exist(PIPCAPAWorkerGroupAssignmentRecId _workerGroupAssignmentRecId)
    {
        return _workerGroupAssignmentRecId
            && (select PIPCAPAWorkerGroupAssignment
                    where PIPCAPAWorkerGroupAssignment.RecId == _workerGroupAssignmentRecId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existGroupWorker</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a value indicating if a record in the <c>PIPCAPAWorkerGroupRecId</c> table exists for a given worker group and worker reference combination.
    /// </summary>
    /// <param name="_workerGroupRecId">
    ///    The surrogate key for the record in the <c>PIPCAPAWorkerGroup</c> table.
    /// </param>
    /// <param name="_workerRecId">
    ///    The surrogate key for the record in the <c>HcmWorker</c> table.
    /// </param>
    /// <returns>
    ///    true if the record exists; otherwise, false.
    /// </returns>
    public static boolean existGroupWorker(PIPCAPAWorkerGroupRecId _workerGroupRecId, HcmWorkerRecId _workerRecId)
    {
        return _workerGroupRecId && _workerRecId
            && (select PIPCAPAWorkerGroupAssignment
                    where PIPCAPAWorkerGroupAssignment.Group    == _workerGroupRecId
                        && PIPCAPAWorkerGroupAssignment.Worker  == _workerRecId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds a record in the <c>PIPCAPAWorkerGroupAssignment</c> table.
    /// </summary>
    /// <param name="_workerGroupAssignmentRecId">
    ///    The surrogate key for the record in the <c>PIPCAPAWorkerGroupAssignment</c> table.
    /// </param>
    /// <param name="_forUpdate">
    ///    Determines if the record should be read for update; optional.
    /// </param>
    /// <returns>
    ///    The matching record in the <c>PIPCAPAWorkerGroupAssignment</c> table if it exists; otherwise, an empty buffer.
    /// </returns>
    public static PIPCAPAWorkerGroupAssignment find(PIPCAPAWorkerGroupAssignmentRecId _workerGroupAssignmentRecId, boolean _forUpdate = false)
    {
        PIPCAPAWorkerGroupAssignment  workerAssignment;
    
        if (_workerGroupAssignmentRecId)
        {
            workerAssignment.selectForUpdate(_forUpdate);
    
            select firstOnly workerAssignment
                where workerAssignment.RecId    == _workerGroupAssignmentRecId;
        }
    
        return workerAssignment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findGroupWorker</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the record in the <c>PIPCAPAWorkerGroupAssignment</c> table for a given worker group and worker reference combination.
    /// </summary>
    /// <param name="_workerGroupRecId">
    ///    The surrogate key for the record in the <c>PIPCAPAWorkerGroup</c> table.
    /// </param>
    /// <param name="_workerRecId">
    ///    The surrogate key for the record in the <c>HcmWorker</c> table.
    /// </param>
    /// <param name="_forUpdate">
    ///    Determines if the record should be read for update; optional.
    /// </param>
    /// <returns>
    ///    The matching record in the <c>PIPCAPAWorkerGroupAssignment</c> table if it exists; otherwise, an empty buffer.
    /// </returns>
    public static PIPCAPAWorkerGroupAssignment findGroupWorker(PIPCAPAWorkerGroupRecId _workerGroupRecId, HcmWorkerRecId _workerRecId, boolean _forUpdate = false)
    {
        PIPCAPAWorkerGroupAssignment  workerAssignment;
    
        if (_workerGroupRecId && _workerRecId)
        {
            workerAssignment.selectForUpdate(_forUpdate);
    
            select firstOnly workerAssignment
                where workerAssignment.Group    == _workerGroupRecId
                    && workerAssignment.Worker  == _workerRecId;
        }
    
        return workerAssignment;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PIPCAPAManagement</ConfigurationKey>
	<DeveloperDocumentation>@PIP554</DeveloperDocumentation>
	<Label>@PIP546</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>Group</TitleField1>
	<TitleField2>Worker</TitleField2>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Group</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Worker</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Allowed</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Options</Name>
			<Label>@SYS22622</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Allowed</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>References</Name>
			<Label>@SYS14018</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Group</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Worker</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Allowed</Name>
			<ExtendedDataType>PIPCAPAAllowed</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Group</Name>
			<ExtendedDataType>PIPCAPAWorkerGroupRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Worker</Name>
			<ExtendedDataType>HcmWorkerRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>GroupWorkerIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>Group</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Worker</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>WorkerGroupIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>Worker</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Group</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>HcmWorker</Name>
			<Cardinality>OneMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>HcmWorker</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Worker</Name>
					<Field>Worker</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PIPCAPAWorkerGroup</Name>
			<Cardinality>OneMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>PIPCAPAWorkerGroup</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Group_</Name>
					<Field>Group</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>